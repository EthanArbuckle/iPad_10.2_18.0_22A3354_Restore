void sub_1AE003818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x390]);
  STACK[0x450] = (unint64_t)&STACK[0x260];
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v60 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  v61 = STACK[0x2A8];
  STACK[0x2A8] = 0;
  if (v61)
    (*(void (**)(unint64_t))(*(_QWORD *)v61 + 8))(v61);
  STACK[0x450] = (unint64_t)&STACK[0x2B0];
  std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v62 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v62;
    operator delete(v62);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)&STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)&STACK[0x310]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  v63 = STACK[0x388];
  STACK[0x388] = 0;
  if (v63)
    (*(void (**)(unint64_t))(*(_QWORD *)v63 + 16))(v63);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<int> const,kaldi::quasar::Score>::~pair(uint64_t a1)
{
  void *v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t kaldi::quasar::Score::updateLmCache(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  int32x2_t v18[6];
  int32x2_t v19[6];

  kaldi::CuMatrix<float>::CuMatrix(v19, 1, 1, 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v18, 1, 1, 1, 0, 0);
  *(float *)v18[1].i32[0] = (float)a2;
  v8 = operator new(0x48uLL);
  v8[2] = 0;
  *v8 = &unk_1E5D422F8;
  v8[1] = 0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  v8[3] = &unk_1E5D34170;
  *((_BYTE *)v8 + 64) = 0;
  *(_QWORD *)&v17 = v8 + 3;
  *((_QWORD *)&v17 + 1) = v8;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 24, &v17);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD **)(a1 + 40);
  if (v12)
    kaldi::quasar::CEDecoder::SetStates(*a3, v12);
  kaldi::quasar::CEDecoder::Compute(*a3, (uint64_t)v18, (uint64_t)v19, a4, 0, 0, *(int32x2_t **)(a1 + 24));
  kaldi::quasar::CEDecoder::GetStates((kaldi::quasar::CEDecoder *)*a3, (char ***)&v17);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 40, &v17);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_BYTE *)(a1 + 56) = 1;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v19);
}

void sub_1AE004390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::Score::merge(kaldi::quasar::Score *this, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = a3;
  if (*((_BYTE *)this + 8))
  {
    if (a2 >= a3)
      return a2;
  }
  else if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min < a2)
  {
    if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min >= a3)
    {
      return a2;
    }
    else
    {
      if (a2 >= a3)
        v4 = a2;
      else
        v4 = a3;
      v5 = expf(a2 - v4);
      v6 = expf(v3 - v4);
      return v4 + logf(v5 + v6);
    }
  }
  return v3;
}

void std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x2E8BA2E8BA2E8BA3 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 88 * a2;
    while (v3 != v7)
    {
      v3 -= 88;
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::Score::scoreString(kaldi::quasar::Score *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v2 = v12[0];
  *(_QWORD *)((char *)&v12[3] + *(_QWORD *)(v12[0] - 24)) = 8;
  *(_QWORD *)((char *)&v12[2] + *(_QWORD *)(v2 - 24)) = 5;
  kaldi::quasar::Score::merge(this, *((float *)this + 1), *(float *)this);
  std::ostream::operator<<();
  if (*((float *)this + 3) > 0.0)
  {
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" = ", 3);
    v4 = *v3;
    *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = 8;
    *(uint64_t *)((char *)v3 + *(_QWORD *)(v4 - 24) + 16) = 5;
    kaldi::quasar::Score::merge(this, *((float *)this + 1), *(float *)this);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" + ", 3);
    v7 = *v6;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 8;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 5;
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" * ", 3);
    v10 = *v9;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 3;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 16) = 2;
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1AE004698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEED0Ev()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5CFF330;
  return result;
}

void _ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5CFF330;
}

uint64_t _ZNSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEEclEOi(uint64_t a1, _DWORD *a2)
{
  return (*a2 + 1);
}

uint64_t _ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE11target_typeEv()
{
  return &_ZTIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_E;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF858;
  return result;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF858;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::target_type()
{
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF8B0;
  return result;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF8B0;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 + 1);
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::target_type()
{
}

uint64_t std::unordered_map<std::vector<int>,kaldi::quasar::Score,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,std::allocator<std::pair<std::vector<int> const,kaldi::quasar::Score>>>::unordered_map(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 88 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(a1, a2, (uint64_t)a2);
      a2 += 11;
      v5 -= 88;
    }
    while (v5);
  }
  return a1;
}

void sub_1AE00491C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v11)
        v3 = v8 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        v16 = (char *)v6 - (char *)v7;
        do
        {
          v17 = v15[1];
          if (v17 == v8)
          {
            v18 = (const void *)v15[2];
            if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v3)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(a1, v8, a3, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v15 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v15;
}

void sub_1AE004BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::pair<std::vector<int> const,kaldi::quasar::Score> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE004C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>(uint64_t a1)
{
  void *v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 48);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

_QWORD *std::vector<kaldi::CuVector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::CuVector<float>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = *(_QWORD **)(a1 + 8);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = &unk_1E5D341C8;
  v4[1] = 0;
  v4[3] = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize((uint64_t)v4, *(unsigned int *)(a2 + 16), 1);
  result = kaldi::CuVectorBase<float>::CopyFromVec(v4, a2);
  *(_QWORD *)(a1 + 8) = v4 + 4;
  return result;
}

void sub_1AE004F0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__push_back_slow_path<kaldi::CuVector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_QWORD *)v11 = &unk_1E5D341C8;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize((uint64_t)v11, *(unsigned int *)(a2 + 16), 1);
  kaldi::CuVectorBase<float>::CopyFromVec(v11, a2);
  v15 += 32;
  std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AE005010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v28;
  _QWORD v29[3];

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    goto LABEL_26;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v4 = v8;
    if (v8 >= v11)
      v4 = v8 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v14)
    goto LABEL_26;
  v15 = (_QWORD *)*v14;
  if (!*v14)
    goto LABEL_26;
  v28 = a4;
  v16 = (char *)v6 - (char *)v7;
  do
  {
    v17 = v15[1];
    if (v17 == v8)
    {
      v18 = (const void *)v15[2];
      if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
        return v15;
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11)
        v17 %= v11;
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4)
      break;
LABEL_24:
    v15 = (_QWORD *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v29[0] = *v25;
    *v25 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29[0];
    }
  }
  v15 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1AE0052B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE005344(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>(uint64_t a1)
{
  void *v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int>&&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  const void *v19;
  char *v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v8 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    do
    {
      v11 = *v10++;
      v9 = v11 + 7853 * v9;
    }
    while (v10 != v7);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v12)
        v4 = v9 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v9;
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        v17 = (char *)v7 - (char *)v8;
        do
        {
          v18 = v16[1];
          if (v18 == v9)
          {
            v19 = (const void *)v16[2];
            if (v16[3] - (_QWORD)v19 == v17 && !memcmp(v19, v8, v17))
              return v16;
          }
          else
          {
            if (v14 > 1)
            {
              if (v18 >= v12)
                v18 %= v12;
            }
            else
            {
              v18 &= v12 - 1;
            }
            if (v18 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  v20 = (char *)operator new(0x68uLL);
  v31[0] = v20;
  v31[1] = a1 + 16;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v9;
  v21 = *a4;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *((_OWORD *)v20 + 1) = *(_OWORD *)v21;
  *((_QWORD *)v20 + 4) = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)v21 = 0;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *((_QWORD *)v20 + 12) = 0;
  *((_OWORD *)v20 + 3) = 0u;
  *((_QWORD *)v20 + 5) = 0x80000000800000;
  *(_OWORD *)(v20 + 68) = 0u;
  *(_OWORD *)(v20 + 81) = 0u;
  *(_OWORD *)(v20 + 52) = 0u;
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    v24 = 1;
    if (v12 >= 3)
      v24 = (v12 & (v12 - 1)) != 0;
    v25 = v24 | (2 * v12);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v27);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v9 >= v12)
        v4 = v9 % v12;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v12 - 1) & v9;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v29 >= v12)
          v29 %= v12;
      }
      else
      {
        v29 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  v16 = (_QWORD *)v31[0];
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v31, 0);
  return v16;
}

void sub_1AE0056AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && v7[1] > v7[3])
      {
        v7 += 2;
        v6 = v8;
      }
      v9 = v7[1];
      v10 = a3[1];
      if (v9 <= v10)
      {
        v11 = *a3;
        do
        {
          v12 = a3;
          a3 = v7;
          *v12 = *v7;
          v12[1] = v9;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 8 * v6);
          v14 = v13 + 2;
          if (v14 < a2 && v7[1] > v7[3])
          {
            v7 += 2;
            v6 = v14;
          }
          v9 = v7[1];
        }
        while (v9 <= v10);
        *a3 = v11;
        a3[1] = v10;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v28;
  _QWORD v29[3];

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    goto LABEL_26;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v4 = v8;
    if (v8 >= v11)
      v4 = v8 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v14)
    goto LABEL_26;
  v15 = (_QWORD *)*v14;
  if (!*v14)
    goto LABEL_26;
  v28 = a4;
  v16 = (char *)v6 - (char *)v7;
  do
  {
    v17 = v15[1];
    if (v17 == v8)
    {
      v18 = (const void *)v15[2];
      if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
        return v15;
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11)
        v17 %= v11;
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4)
      break;
LABEL_24:
    v15 = (_QWORD *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v29[0] = *v25;
    *v25 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29[0];
    }
  }
  v15 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1AE005A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = *a3;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v8 + 2, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  result = 0.0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_QWORD *)v8 + 12) = 0;
  *((_QWORD *)v8 + 5) = 0x80000000800000;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 81) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE005ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__insert_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>>(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v30[2];
  char *v31;
  char *v32;
  uint64_t v33;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = a5 + 1;
      v21 = a3;
      do
      {
        v21 = (_QWORD *)*v21;
        --v20;
      }
      while (v20 > 1);
      v22 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3);
      v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - a2) < 1)
        {
          v21 = a3;
        }
        else
        {
          v24 = v22 + 1;
          v21 = a3;
          do
          {
            v21 = (_QWORD *)*v21;
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v5) >> 3);
      }
      if (v23 >= 1)
      {
        std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__move_range((uint64_t)a1, v5, v12, v5 + 88 * a5);
        if (v21 != v7)
        {
          v28 = v5;
          do
          {
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100]<std::vector<int> const,kaldi::quasar::Score,(void *)0>(v28, (uint64_t)(v7 + 2));
            v7 = (_QWORD *)*v7;
            v28 += 88;
          }
          while (v7 != v21);
        }
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1745D1745D1745DLL)
        v18 = 0x2E8BA2E8BA2E8BALL;
      else
        v18 = v17;
      v33 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v9, v18);
      else
        v19 = 0;
      v25 = &v19[88 * v15];
      v30[0] = v19;
      v30[1] = v25;
      v31 = v25;
      v32 = &v19[88 * v18];
      v26 = 88 * a5;
      v27 = &v25[88 * a5];
      do
      {
        std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100]((uint64_t)v25, (uint64_t)(v7 + 2));
        v25 += 88;
        v7 = (_QWORD *)*v7;
        v26 -= 88;
      }
      while (v26);
      v31 = v27;
      v5 = std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(a1, v30, v5);
      std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(v30);
    }
  }
  return v5;
}

void sub_1AE005D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v10 = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v10;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
      *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
      v8 += 88;
      v9 += 88;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,0>(a2, v7, v6);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100](v4, (uint64_t)(v6 + 2));
      v6 = (_QWORD *)*v6;
      v4 = v11 + 88;
      v11 += 88;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AE005F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 88;
      a3 -= 88;
      std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;

  std::vector<int>::__move_assign(a1, (__n128 *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 48, (__int128 *)(a2 + 48));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 64, (__int128 *)(a2 + 64));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100]<std::vector<int> const,kaldi::quasar::Score,(void *)0>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)(a2 + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      v8 = *(_OWORD *)(a3 - 88);
      a3 -= 88;
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(v7 - 72) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(v7 - 64) = v9;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 + 80);
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(v4 + 24) = v5;
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_BYTE *)(v4 + 80) = *(_BYTE *)(a2 + 80);
      v4 += 88;
      a2 += 88;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v4, i - 88);
  }
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4 &,std::__wrap_iter<std::pair<std::vector<int>,kaldi::quasar::Score> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x2E8BA2E8BA2E8BA3 * ((a3 - a1) >> 3))
    {
      v8 = (0x5D1745D1745D1746 * ((a3 - a1) >> 3)) | 1;
      v9 = (float *)(a1 + 88 * v8);
      v10 = 0x5D1745D1745D1746 * ((a3 - a1) >> 3) + 2;
      if (v10 < a2)
      {
        v11 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(a1 + 88 * v8 + 24), *(float *)(a1 + 88 * v8 + 28), *(float *)(a1 + 88 * v8 + 24))+ (float)(*(float *)(a1 + 88 * v8 + 36) * *(float *)(a1 + 88 * v8 + 40));
        if (v11 > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 28), v9[29], v9[28])
                         + (float)(v9[31] * v9[32])))
        {
          v9 += 22;
          v8 = v10;
        }
      }
      v12 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 6), v9[7], v9[6]) + (float)(v9[9] * v9[10]);
      if (v12 <= (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v4 + 24), *(float *)(v4 + 28), *(float *)(v4 + 24))+ (float)(*(float *)(v4 + 36) * *(float *)(v4 + 40))))
      {
        *(_OWORD *)__p = *(_OWORD *)v4;
        v34 = *(_QWORD *)(v4 + 16);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = 0;
        v13 = *(_OWORD *)(v4 + 24);
        v14 = *(_QWORD *)(v4 + 40);
        v15 = *(_OWORD *)(v4 + 64);
        v37 = *(_OWORD *)(v4 + 48);
        *(_QWORD *)(v4 + 48) = 0;
        *(_QWORD *)(v4 + 56) = 0;
        v38 = v15;
        v36 = v14;
        *(_QWORD *)(v4 + 64) = 0;
        *(_QWORD *)(v4 + 72) = 0;
        v39 = *(_BYTE *)(v4 + 80);
        v35 = v13;
        do
        {
          v16 = v4;
          v4 = (uint64_t)v9;
          std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v16, (uint64_t)v9);
          if (v6 < v8)
            break;
          v17 = (2 * v8) | 1;
          v9 = (float *)(a1 + 88 * v17);
          v18 = 2 * v8 + 2;
          if (v18 < a2)
          {
            v19 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(a1 + 88 * v17 + 24), *(float *)(a1 + 88 * v17 + 28), *(float *)(a1 + 88 * v17 + 24));
            v20 = a1 + 88 * v17;
            v21 = *(float *)(v20 + 36);
            v22 = *(float *)(v20 + 40);
            if ((float)(v19 + (float)(v21 * v22)) > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 28), v9[29], v9[28])+ (float)(v9[31] * v9[32])))
            {
              v9 += 22;
              v17 = v18;
            }
          }
          v23 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 6), v9[7], v9[6]);
          v24 = v9[9];
          v25 = v9[10];
          v26 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)&v35, *((float *)&v35 + 1), *(float *)&v35);
          v8 = v17;
        }
        while ((float)(v23 + (float)(v24 * v25)) <= (float)(v26 + (float)(*((float *)&v35 + 3) * *(float *)&v36)));
        std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v4, (uint64_t)__p);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1AE006604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<int> const,kaldi::quasar::Score>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<kaldi::quasar::Score>(__int128 *a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v14 = *a1;
  v15 = *((_QWORD *)a1 + 2);
  v5 = *(__int128 *)((char *)a1 + 24);
  v4 = (_QWORD *)a1 + 3;
  v16 = v5;
  *v4 = 0;
  *((_QWORD *)a1 + 4) = 0;
  v17 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v18 = *((_BYTE *)a1 + 56);
  v6 = *((_QWORD *)a2 + 2);
  *a1 = *a2;
  *((_QWORD *)a1 + 2) = v6;
  v7 = (uint64_t)a2 + 24;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)((char *)a2 + 24));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a1 + 40, (__int128 *)((char *)a2 + 40));
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *a2 = v14;
  *((_QWORD *)a2 + 2) = v15;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v7, &v16);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2 + 40, &v17);
  *((_BYTE *)a2 + 56) = v18;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void **std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 88 * a2;
      do
      {
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_QWORD *)(v7 + 80) = 0;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 24) = 0x80000000800000;
        *(_OWORD *)(v7 + 36) = 0uLL;
        *(_OWORD *)(v7 + 52) = 0uLL;
        *(_OWORD *)(v7 + 65) = 0uLL;
        v7 += 88;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[88 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[88 * v11];
    v15 = &v14[88 * a2];
    do
    {
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_QWORD *)v14 + 10) = 0;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 3) = 0x80000000800000;
      *(_OWORD *)(v14 + 36) = 0uLL;
      *(_OWORD *)(v14 + 52) = 0uLL;
      *(_OWORD *)(v14 + 65) = 0uLL;
      v14 += 88;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(v16);
  }
  return result;
}

void sub_1AE0068FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::CTCAlignedDecoderContext>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::allocator<quasar::CTCAlignedDecoderContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::~__hash_table(a2 + 64);
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::~__hash_table(a2 + 24);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<kaldi::quasar::Score,std::allocator<kaldi::quasar::Score>,kaldi::quasar::Score const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x58uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::Score>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Score const&,std::allocator<kaldi::quasar::Score>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1AE006BB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Score>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Score const&,std::allocator<kaldi::quasar::Score>,0>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E5CFFCE8;
  v2 = *a2;
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(result + 24) = v2;
  v3 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(result + 56) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(result + 64) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(result + 72) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(result + 80) = *((_BYTE *)a2 + 56);
  return result;
}

void std::__shared_ptr_emplace<kaldi::quasar::Score>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFCE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Score>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFCE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Score>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 64);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t quasar::NotchDetector::dumpVector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  uint64_t v9;
  _BYTE v10[408];
  _QWORD v11[20];

  v11[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v9);
  v5 = *a3;
  for (i = a3[1]; v5 != i; v5 += 8)
  {
    v6 = (_QWORD *)std::ostream::operator<<();
    v8 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v10[*(_QWORD *)(v9 - 24) - 8], *(_DWORD *)&v10[*(_QWORD *)(v9 - 24) + 24] | 4);
  v9 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v10[*(_QWORD *)(v9 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v10);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v11);
}

void sub_1AE006DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcCosineWindow(quasar::NotchDetector *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  double *v7;
  long double v8;
  long double v9;
  double v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  void *__p;
  double *v21;
  double *v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  std::vector<double>::reserve(&__p, a2);
  if (a2 >= 1)
  {
    v6 = 0;
    v7 = v21;
    do
    {
      v8 = cos((double)v6 / (double)(a2 - 1) * 6.28318531);
      v9 = pow(1.0 - v8, *((long double *)this + 4));
      v10 = v9 + v9;
      if (v7 >= v22)
      {
        v12 = (double *)__p;
        v13 = ((char *)v7 - (_BYTE *)__p) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = (char *)v22 - (_BYTE *)__p;
        if (((char *)v22 - (_BYTE *)__p) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v22, v16);
          v12 = (double *)__p;
          v7 = v21;
        }
        else
        {
          v17 = 0;
        }
        v18 = (double *)&v17[8 * v13];
        *v18 = v10;
        v11 = v18 + 1;
        while (v7 != v12)
        {
          v19 = *((_QWORD *)v7-- - 1);
          *((_QWORD *)v18-- - 1) = v19;
        }
        __p = v18;
        v21 = v11;
        v22 = (double *)&v17[8 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v7 = v10;
        v11 = v7 + 1;
      }
      v21 = v11;
      ++v6;
      v7 = v11;
    }
    while (v6 != a2);
  }
  quasar::NotchDetector::normalize((double **)&__p, a3);
  if (__p)
  {
    v21 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1AE006F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::normalize(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  _QWORD *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0.0;
  if (*a1 != v5)
  {
    v7 = *a1;
    do
    {
      v8 = *v7++;
      v6 = v6 + v8;
    }
    while (v7 != v5);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<double>::reserve((void **)a2, v5 - v4);
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    v11 = (_QWORD *)(a2 + 16);
    v12 = *(double **)(a2 + 8);
    do
    {
      v13 = *v9 / v6;
      if ((unint64_t)v12 >= *v11)
      {
        v15 = *(double **)a2;
        v16 = ((uint64_t)v12 - *(_QWORD *)a2) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = *v11 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a2 + 16, v19);
          v15 = *(double **)a2;
          v12 = *(double **)(a2 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (double *)&v20[8 * v16];
        *v21 = v13;
        v14 = v21 + 1;
        while (v12 != v15)
        {
          v22 = *((_QWORD *)v12-- - 1);
          *((_QWORD *)v21-- - 1) = v22;
        }
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v14;
        *(_QWORD *)(a2 + 16) = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v12 = v13;
        v14 = v12 + 1;
      }
      *(_QWORD *)(a2 + 8) = v14;
      ++v9;
      v12 = v14;
    }
    while (v9 != v10);
  }
}

void sub_1AE0070EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcHfPower(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  double v26;
  int v27;
  int v28;
  double v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  double *v34;
  int v35;
  void *__p[2];
  char v37;
  void *v38[3];

  v35 = kaldi::MatrixBase<float>::NumCols(a2);
  v33 = a2;
  v10 = kaldi::MatrixBase<float>::NumRows(a2);
  std::vector<double>::vector(a5, v10);
  std::vector<double>::vector(v38, v10);
  if (v10 >= 1)
  {
    v31 = a1;
    v32 = a5;
    v11 = 0;
    v14 = a3;
    v12 = *a3;
    v13 = v14[1];
    v15 = *a4;
    v16 = a4[1];
    v34 = (double *)v38[0];
    do
    {
      if (v35 < 1)
      {
        v19 = 0.0;
      }
      else
      {
        v17 = 0;
        v18 = *(_QWORD *)v33 + 4 * *(_DWORD *)(v33 + 16) * (int)v11;
        v19 = 0.0;
        do
        {
          if (v17 >= v12 && v17 < v13 || v17 >= v15 && v17 < v16)
            v19 = v19 + 1.0 / (double)((int)v13 + (int)v16 - ((int)v12 + (int)v15)) * expf(*(float *)(v18 + 4 * v17));
          ++v17;
        }
        while (v35 != v17);
      }
      v34[v11++] = v19;
    }
    while (v11 != v10);
    v20 = 0;
    a1 = v31;
    a5 = v32;
    v21 = *(_DWORD *)(v31 + 24);
    v22 = -v21;
    v23 = *v32;
    if (v21 >= 0)
      v24 = *(_DWORD *)(v31 + 24);
    else
      v24 = -v21;
    v25 = v21 + v24 + 1;
    do
    {
      v26 = 0.0;
      if ((v21 & 0x80000000) == 0)
      {
        v27 = v22;
        v28 = v25;
        do
        {
          if ((v27 & 0x80000000) == 0 && v27 < v10)
            v26 = v26 + *((double *)v38[0] + v27);
          ++v27;
          --v28;
        }
        while (v28);
      }
      v29 = v26 / (double)((2 * v21) | 1);
      if (v29 < 1.0e-10)
        v29 = 1.0e-10;
      *(double *)(v23 + 8 * v20++) = v29;
      ++v22;
    }
    while (v20 != v10);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v30 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.hfpower.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v30, (uint64_t)__p, a5);
    if (v37 < 0)
      operator delete(__p[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
}

void sub_1AE00733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  v24 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcWeightedSpectrum(quasar::NotchDetector *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  float *v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  void *v35[3];
  void *v36[3];

  v8 = kaldi::MatrixBase<float>::NumCols(a3);
  v32 = a3;
  v9 = kaldi::MatrixBase<float>::NumRows(a3);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  std::vector<double>::reserve((void **)a4, v8);
  quasar::NotchDetector::calcCosineWindow(a1, v9, (uint64_t)v36);
  quasar::NotchDetector::multiply(v36, a2, (uint64_t)__p);
  quasar::NotchDetector::normalize((double **)__p, (uint64_t)v35);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((_BYTE *)a1 + 40))
  {
    v10 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.wt.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v10, (uint64_t)__p, (uint64_t *)v35);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  if (v8 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = v9;
    do
    {
      v14 = v9;
      if ((int)v9 < 1)
      {
        v19 = 0.0;
      }
      else
      {
        v15 = 0;
        v16 = (double *)v35[0];
        v17 = (float *)(*(_QWORD *)v32 + v11);
        v18 = 4 * *(int *)(v32 + 16);
        v19 = 0.0;
        do
        {
          v19 = v19 + expf(*v17) * v16[v15++];
          v17 = (float *)((char *)v17 + v18);
        }
        while (v13 != v15);
      }
      v20 = log10(v19) * 10.0;
      v22 = *(double **)(a4 + 8);
      v21 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v22 >= v21)
      {
        v24 = *(double **)a4;
        v25 = ((uint64_t)v22 - *(_QWORD *)a4) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v21 - (_QWORD)v24;
        if (v27 >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a4 + 16, v28);
          v24 = *(double **)a4;
          v22 = *(double **)(a4 + 8);
        }
        else
        {
          v29 = 0;
        }
        v30 = (double *)&v29[8 * v25];
        *v30 = v20;
        v23 = v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_QWORD *)v22-- - 1);
          *((_QWORD *)v30-- - 1) = v31;
        }
        *(_QWORD *)a4 = v30;
        *(_QWORD *)(a4 + 8) = v23;
        *(_QWORD *)(a4 + 16) = &v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v22 = v20;
        v23 = v22 + 1;
      }
      *(_QWORD *)(a4 + 8) = v23;
      ++v12;
      v11 += 4;
      v9 = v14;
    }
    while (v12 != v8);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
}

void sub_1AE0075EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (a17 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  v24 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::multiply(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = a1[1] - *a1;
  v7 = a2[1] - *a2;
  if (v7 >> 3 >= (unint64_t)(v6 >> 3))
    v8 = v6 >> 3;
  else
    v8 = v7 >> 3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v6 >> 3 <= (unint64_t)(v7 >> 3))
    v9 = v7 >> 3;
  else
    v9 = v6 >> 3;
  *(_QWORD *)a3 = 0;
  std::vector<double>::reserve((void **)a3, (int)v9);
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v11 = (_QWORD *)(a3 + 16);
    v12 = *(double **)(a3 + 8);
    do
    {
      v13 = *(double *)(*a1 + 8 * v10) * *(double *)(*a2 + 8 * v10);
      if ((unint64_t)v12 >= *v11)
      {
        v15 = *(double **)a3;
        v16 = ((uint64_t)v12 - *(_QWORD *)a3) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = *v11 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a3 + 16, v19);
          v15 = *(double **)a3;
          v12 = *(double **)(a3 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (double *)&v20[8 * v16];
        *v21 = v13;
        v14 = v21 + 1;
        while (v12 != v15)
        {
          v22 = *((_QWORD *)v12-- - 1);
          *((_QWORD *)v21-- - 1) = v22;
        }
        *(_QWORD *)a3 = v21;
        *(_QWORD *)(a3 + 8) = v14;
        *(_QWORD *)(a3 + 16) = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v12 = v13;
        v14 = v12 + 1;
      }
      *(_QWORD *)(a3 + 8) = v14;
      ++v10;
      v12 = v14;
    }
    while (v10 != v8);
  }
  if ((int)v8 < (int)v9)
  {
    v23 = (_QWORD *)(a3 + 16);
    v24 = *(_QWORD **)(a3 + 8);
    do
    {
      if ((unint64_t)v24 >= *v23)
      {
        v26 = *(_QWORD **)a3;
        v27 = ((uint64_t)v24 - *(_QWORD *)a3) >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = *v23 - (_QWORD)v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a3 + 16, v30);
          v26 = *(_QWORD **)a3;
          v24 = *(_QWORD **)(a3 + 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[8 * v27];
        *(_QWORD *)v32 = 0;
        v25 = v32 + 8;
        while (v24 != v26)
        {
          v33 = *--v24;
          *((_QWORD *)v32 - 1) = v33;
          v32 -= 8;
        }
        *(_QWORD *)a3 = v32;
        *(_QWORD *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 16) = &v31[8 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v24 = 0;
        v25 = v24 + 1;
      }
      *(_QWORD *)(a3 + 8) = v25;
      LODWORD(v8) = v8 + 1;
      v24 = v25;
    }
    while ((_DWORD)v8 != (_DWORD)v9);
  }
}

void sub_1AE0078B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcPeak(_DWORD *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  int v12;
  int v13;
  double v14;
  double v15;
  _QWORD *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  uint64_t v27;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v12 = a2[1] - *a2;
  std::vector<double>::reserve((void **)a4, a2[1] - (uint64_t)*a2);
  if (v12 >= 1)
  {
    v13 = 0;
    v14 = a6 - a5;
    v15 = (double)(a1[1] - *a1);
    v16 = (_QWORD *)(a4 + 16);
    v17 = *(double **)(a4 + 8);
    do
    {
      v18 = a5 + (double)(*a2 + v13 - *a1) / v15 * v14 - *(double *)(*a3 + 8 * (*a2 + v13));
      if ((unint64_t)v17 >= *v16)
      {
        v20 = *(double **)a4;
        v21 = ((uint64_t)v17 - *(_QWORD *)a4) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = *v16 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a4 + 16, v24);
          v20 = *(double **)a4;
          v17 = *(double **)(a4 + 8);
        }
        else
        {
          v25 = 0;
        }
        v26 = (double *)&v25[8 * v21];
        *v26 = v18;
        v19 = v26 + 1;
        while (v17 != v20)
        {
          v27 = *((_QWORD *)v17-- - 1);
          *((_QWORD *)v26-- - 1) = v27;
        }
        *(_QWORD *)a4 = v26;
        *(_QWORD *)(a4 + 8) = v19;
        *(_QWORD *)(a4 + 16) = &v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v17 = v18;
        v19 = v17 + 1;
      }
      *(_QWORD *)(a4 + 8) = v19;
      ++v13;
      v17 = v19;
    }
    while (v13 != v12);
  }
}

void sub_1AE007A68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double quasar::NotchDetector::measureNotch(quasar::NotchDetector *a1, int *a2, int *a3, int *a4, uint64_t a5, float a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  double v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  double v55;
  double *v56;
  double v57;
  void *__p[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double *v76;
  double *v77;
  uint64_t v78;
  void *v79[3];
  void *v80[3];
  char v81;

  LODWORD(v12) = kaldi::MatrixBase<float>::NumCols(a5);
  quasar::NotchDetector::calcHfPower((uint64_t)a1, a5, a2, a4, v80);
  quasar::NotchDetector::calcWeightedSpectrum(a1, v80, a5, (uint64_t)v79);
  if (*((_BYTE *)a1 + 40))
  {
    v13 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.weighted.spectrum.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v13, (uint64_t)__p, (uint64_t *)v79);
    if (SBYTE7(v60) < 0)
      operator delete(__p[0]);
  }
  v14 = *a2;
  v15 = a2[1];
  v16 = 0.0;
  v17 = 0.0;
  if ((int)v15 > (int)v14)
  {
    v18 = v15 - v14;
    v19 = (double *)((char *)v79[0] + 8 * v14);
    do
    {
      v20 = *v19++;
      v17 = v17 + v20;
      --v18;
    }
    while (v18);
  }
  v21 = v17 / (double)((int)v15 - (int)v14);
  v22 = *a4;
  v23 = a4[1];
  if ((int)v23 > (int)v22)
  {
    v24 = v23 - v22;
    v25 = (double *)((char *)v79[0] + 8 * v22);
    v16 = 0.0;
    do
    {
      v26 = *v25++;
      v16 = v16 + v26;
      --v24;
    }
    while (v24);
  }
  v27 = v16 / (double)((int)v23 - (int)v22);
  v28 = *((_DWORD *)a1 + 2);
  v29 = *((_DWORD *)a1 + 3);
  v30 = v28 + *(_DWORD *)a1;
  if (v30 < 0 != __OFADD__(v28, *(_DWORD *)a1))
    ++v30;
  v31 = v30 >> 1;
  v32 = *((_DWORD *)a1 + 5);
  v33 = __OFADD__(v32, v29);
  v34 = v32 + v29;
  if (v34 < 0 != v33)
    ++v34;
  v35 = (double)(int)(float)(a6 * 0.5) / (double)((int)v12 - 1);
  v36 = (int)((double)v31 / v35);
  v37 = v34 >> 1;
  if (v36 >= (int)v12)
    v38 = v12;
  else
    v38 = v36;
  v39 = (int)((double)v37 / v35);
  if (v39 >= (int)v12)
    v12 = v12;
  else
    v12 = v39;
  v78 = v38 | (v12 << 32);
  quasar::NotchDetector::calcPeak(&v78, a3, v79, (uint64_t)&v76, v21, v27);
  if (*((_BYTE *)a1 + 40))
  {
    if (quasar::gLogLevel >= 4)
    {
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"avlo = ", 7);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"  avhi = ", 9);
      v41 = (_QWORD *)std::ostream::operator<<();
      v81 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v81, 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      if (quasar::gLogLevel >= 4)
      {
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_below.lo = ", 17);
        v42 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", bands_below.hi = ", 19);
        v43 = (_QWORD *)std::ostream::operator<<();
        v81 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v81, 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        if (quasar::gLogLevel >= 4)
        {
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_notch.lo = ", 17);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", bands_notch.hi = ", 19);
          v45 = (_QWORD *)std::ostream::operator<<();
          v81 = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v81, 1);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          if (quasar::gLogLevel >= 4)
          {
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_above.lo = ", 17);
            v46 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", bands_above.hi = ", 19);
            v47 = (_QWORD *)std::ostream::operator<<();
            v81 = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v81, 1);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            if (quasar::gLogLevel >= 4)
            {
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v66 = 0u;
              v67 = 0u;
              v64 = 0u;
              v65 = 0u;
              v62 = 0u;
              v63 = 0u;
              v60 = 0u;
              v61 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_across.lo = ", 18);
              v48 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", bands_across.hi = ", 20);
              v49 = (_QWORD *)std::ostream::operator<<();
              v81 = 10;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)&v81, 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            }
          }
        }
      }
    }
    v50 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.peak.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v50, (uint64_t)__p, (uint64_t *)&v76);
    if (SBYTE7(v60) < 0)
      operator delete(__p[0]);
  }
  if (v76 == v77)
  {
    v51 = 0.0;
    if (v76)
    {
LABEL_37:
      v77 = v76;
      operator delete(v76);
    }
  }
  else
  {
    v51 = *v76;
    v52 = v76;
    do
    {
      v53 = *v52++;
      v54 = v53;
      if (v53 >= v51)
        v51 = v54;
    }
    while (v52 != v77);
    v55 = 0.0;
    v56 = v76;
    do
    {
      v57 = *v56++;
      v55 = v55 + v57;
    }
    while (v56 != v77);
    if (v76)
      goto LABEL_37;
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  return v51;
}

void sub_1AE007FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;
  void *v17;
  void *v18;

  v16 = *(void **)(v14 - 184);
  if (v16)
  {
    *(_QWORD *)(v14 - 176) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v14 - 152);
  if (v17)
  {
    *(_QWORD *)(v14 - 144) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v14 - 128);
  if (v18)
  {
    *(_QWORD *)(v14 - 120) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::measureNotch(int *a1, uint64_t a2, float a3)
{
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = kaldi::MatrixBase<float>::NumCols(a2);
  v7 = (double)(int)(float)(a3 * 0.5) / (double)(v6 - 1);
  LODWORD(v8) = (int)((double)*a1 / v7);
  if ((int)v8 >= v6)
    v8 = v6;
  else
    v8 = v8;
  LODWORD(v9) = (int)((double)a1[1] / v7);
  if ((int)v9 >= v6)
    v9 = v6;
  else
    v9 = v9;
  v10 = v8 | (v9 << 32);
  v11 = (int)((double)a1[2] / v7);
  if (v11 >= v6)
    v12 = v6;
  else
    v12 = v11;
  LODWORD(v13) = (int)((double)a1[3] / v7);
  if ((int)v13 >= v6)
    v13 = v6;
  else
    v13 = v13;
  v14 = v12 | (v13 << 32);
  v15 = a1[5];
  v16 = (int)((double)a1[4] / v7);
  v20 = v14;
  v21 = v10;
  if (v16 >= v6)
    v17 = v6;
  else
    v17 = v16;
  LODWORD(v18) = (int)((double)v15 / v7);
  if ((int)v18 >= v6)
    v18 = v6;
  else
    v18 = v18;
  v19 = v17 | (v18 << 32);
  quasar::NotchDetector::measureNotch((quasar::NotchDetector *)a1, (int *)&v21, (int *)&v20, (int *)&v19, a2, a3);
}

id EARLogger::QuasarOSLogger(EARLogger *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  int v4;

  v2 = 0x1EDB9E000uLL;
  if ((v1 & 1) == 0)
  {
    v2 = 0x1EDB9E000;
    if (v4)
    {
      EARLogger::QuasarOSLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar");
      v2 = 0x1EDB9E000;
    }
  }
  return *(id *)(v2 + 2136);
}

void EARLogger::initializeLogging(EARLogger *this)
{
  if (EARLogger::initializeLogging(void)::onceToken != -1)
    dispatch_once(&EARLogger::initializeLogging(void)::onceToken, &__block_literal_global_4);
}

void ___ZN9EARLogger17initializeLoggingEv_block_invoke(EARLogger *this)
{
  quasar::QuasarFatalMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  kaldi::KaldiErrorMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarExceptionMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarErrorMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarWarnMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  kaldi::KaldiWarnMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarProdInfoMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  quasar::QuasarInfoMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  kaldi::KaldiLogMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  quasar::QuasarDebugMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_DEBUG;
  quasar::QuasarTraceMessage::logger = (uint64_t (*)(uint64_t))EARLogger::QuasarOSLogger_DEBUG;
  kaldi::KaldiVlogMessage::g_logger = (uint64_t (*)())quasar::QuasarTraceMessage::logKaldiTrace;
  EARLogger::setQuasarLogLevelToSystemDefault(this);
}

void EARLogger::QuasarOSLogger_FAULT(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  uint64_t *v4;

  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  EARLogger::QuasarOSLog((EARLogger *)0x11, a2, a3, a4, v4);
}

void EARLogger::QuasarOSLogger_INFO(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  uint64_t *v4;

  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  EARLogger::QuasarOSLog((EARLogger *)1, a2, a3, a4, v4);
}

void EARLogger::QuasarOSLogger_DEBUG(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  uint64_t *v4;

  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  EARLogger::QuasarOSLog((EARLogger *)2, a2, a3, a4, v4);
}

void EARLogger::setQuasarLogLevelToSystemDefault(EARLogger *this)
{
  int v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  NSObject *oslog;

  EARLogger::QuasarOSLogger(this);
  oslog = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
  {
    v1 = 1;
    v2 = 5;
LABEL_7:
    v3 = oslog;
    goto LABEL_8;
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    v1 = 0;
    v2 = 4;
    goto LABEL_7;
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v1 = -1;
    v2 = 2;
    goto LABEL_7;
  }
  v4 = os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR);
  v3 = oslog;
  if (!v4)
    goto LABEL_9;
  v1 = -1;
  v2 = 1;
LABEL_8:
  quasar::gLogLevel = v2;
  kaldi::g_kaldi_verbose_level = v1;
LABEL_9:

}

void EARLogger::QuasarOSLog(EARLogger *this, os_log_type_t a2, void *a3, const char *a4, ...)
{
  void *v4;

  EARLogger::QuasarOSLogger(this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  os_log_with_args();

}

uint64_t quasar::QuasarTraceMessage::logKaldiTrace(uint64_t a1)
{
  return quasar::QuasarTraceMessage::logger(a1);
}

void quasar::ConfusionNetworkCombinerDecoder::registerParams(quasar::ConfusionNetworkCombinerDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  *((_DWORD *)this + 540) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "confusion-network-combiner");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 45, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  quasar::ConfusionNetworkCombiner::registerParams((quasar::ConfusionNetworkCombinerDecoder *)((char *)this + 448), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "wait-milliseconds");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of milliseconds to wait for a confusion network to become available in the cache");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2160, (uint64_t)v4, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AE0085BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::ConfusionNetworkCombinerDecoder::finishInit(quasar::ConfusionNetworkCombinerDecoder *this)
{
  quasar::ConfusionNetworkCombiner::finishInit((quasar::ConfusionNetworkCombinerDecoder *)((char *)this + 448));
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t *v8;
  uint64_t ***v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  const quasar::Token *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  double *v26;
  clockid_t v27;
  clockid_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  clockid_t v33;
  clockid_t v34;
  char ConfNetwork;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t ***v44;
  uint64_t **v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  std::string **v67;
  uint64_t v68;
  void **v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  std::string *v73;
  uint64_t p_size;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  void *__p;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97[3];
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101[3];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void **v105[3];
  void **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t ***v112;
  std::__shared_weak_count *v113;
  uint64_t ***v114;
  std::__shared_weak_count *v115;
  _BYTE v116[24];
  int v117;
  double v118;
  double v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t ***v122[3];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[18];

  if (!*(_QWORD *)(a2 + 592))
  {
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v123 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v123, "No confusion network cache found.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v123);
  }
  if (*(_QWORD *)(*a3 + 304))
  {
    if ((quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4) & 1) != 0
      || quasar::SpeechRequestData::isUtteranceConcatenationEnabled(*a4))
    {
      if (quasar::gLogLevel >= 4)
      {
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"This doesn't work when utt detect/concatenation is enabled. Doing nothing.", 74);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v123);
      }
      return 0;
    }
    v88 = a2;
    std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::vector(v122, 2uLL);
    v8 = *(uint64_t **)(*a3 + 304);
    v9 = v122[0] + 3;
    std::vector<std::vector<std::vector<quasar::Token>>>::resize((uint64_t *)v122[0] + 3, 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    v90 = a3;
    v10 = *v8;
    if (v8[1] != *v8)
    {
      v11 = 0;
      do
      {
        std::vector<std::vector<quasar::Token>>::resize((uint64_t *)&(*v9)[3 * v11], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v10 + 24 * v11 + 8) - *(_QWORD *)(v10 + 24 * v11)) >> 5));
        v10 = *v8;
        v12 = *(_QWORD *)(*v8 + 24 * v11);
        if (*(_QWORD *)(*v8 + 24 * v11 + 8) != v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = (*v9)[3 * v11];
          do
          {
            v17 = (const quasar::Token *)(v12 + v13);
            v18 = &v16[v14];
            v19 = v16[v14 + 1];
            if (v19 >= v16[v14 + 2])
            {
              v20 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v16[v14], v17);
            }
            else
            {
              quasar::Token::Token((std::string *)v16[v14 + 1], v17);
              v20 = v19 + 224;
              v18[1] = v19 + 224;
            }
            v18[1] = v20;
            v16 = (*v9)[3 * v11];
            *(float *)(v16[v14 + 1] - 184) = *(float *)(v16[v14 + 1] - 184) * 1000.0;
            ++v15;
            v10 = *v8;
            v12 = *(_QWORD *)(*v8 + 24 * v11);
            v14 += 3;
            v13 += 224;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*v8 + 24 * v11 + 8) - v12) >> 5) > v15);
        }
        ++v11;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v8[1] - v10) >> 3) > v11);
    }
    v21 = v90;
    v22 = *(_QWORD *)(*v90 + 424);
    std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>&,void>(v9, &v120);
    quasar::SpeechRequestResultData::storeServerConfusionNetwork(v22, &v120);
    v23 = v121;
    if (v121)
    {
      p_shared_owners = (unint64_t *)&v121->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, &v123);
    v26 = (double *)v123;
    *(double *)(*v90 + 536) = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v27) - *v26) * 1000.0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
    v30 = v88;
    if (*((_QWORD *)&v123 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    quasar::StopWatch::StopWatch((quasar::StopWatch *)v116, v28);
    quasar::StopWatch::resume((quasar::StopWatch *)v116, v33);
    v114 = 0;
    v115 = 0;
    ConfNetwork = quasar::ConfusionNetworkCache::getConfNetwork(*(_QWORD *)(v88 + 592), &v114, *(_DWORD *)(a1 + 2160));
    v36 = v119;
    if (v117)
      v36 = v36 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v34) - v118;
    v37 = *v90;
    *(double *)(*v90 + 520) = v36 * 1000.0;
    if ((ConfNetwork & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"No confusion network found in cache. Doing nothing.", 51);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v123);
      }
      goto LABEL_109;
    }
    v38 = *(_QWORD *)(v37 + 424);
    v112 = v114;
    v113 = v115;
    if (v115)
    {
      v39 = (unint64_t *)&v115->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    quasar::SpeechRequestResultData::storeClientConfusionNetwork(v38, (uint64_t *)&v112);
    v41 = v113;
    if (v113)
    {
      v42 = (unint64_t *)&v113->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v114;
    if (v122[0] != v114)
    {
      std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v122[0], *v114, v114[1], 0xAAAAAAAAAAAAAAABLL * (v114[1] - *v114));
      v44 = v122[0];
    }
    *(_BYTE *)(*v90 + 517) = 1;
    v110 = 0;
    v111 = 0;
    v109 = 0;
    v45 = *v44;
    if (v44[1] != *v44)
    {
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = v45[3 * v46];
        if (v45[3 * v46 + 1] != v48)
        {
          v49 = 0;
          do
          {
            if (v48[3 * v49 + 1] == v48[3 * v49])
            {
              v57 = 0;
            }
            else
            {
              v50 = 0;
              v51 = 0;
              do
              {
                if (!v49)
                {
                  v123 = 0uLL;
                  *(_QWORD *)&v124 = 0;
                  v106 = 0;
                  v107 = 0;
                  v108 = 0;
                  v52 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v106, (const quasar::Token *)(*(*v44)[3 * v46] + v50));
                  v53 = (_QWORD *)*((_QWORD *)&v123 + 1);
                  v107 = v52;
                  if (*((_QWORD *)&v123 + 1) >= (unint64_t)v124)
                  {
                    v54 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v123, (uint64_t *)&v106);
                  }
                  else
                  {
                    **((_QWORD **)&v123 + 1) = 0;
                    v53[1] = 0;
                    v53[2] = 0;
                    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v53, (uint64_t)v106, v107, 0x6DB6DB6DB6DB6DB7 * ((v107 - (uint64_t)v106) >> 5));
                    v54 = (uint64_t)(v53 + 3);
                  }
                  *((_QWORD *)&v123 + 1) = v54;
                  v55 = v110;
                  if ((unint64_t)v110 >= v111)
                  {
                    v56 = (uint64_t **)std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>((uint64_t *)&v109, (uint64_t **)&v123);
                  }
                  else
                  {
                    *v110 = 0;
                    v55[1] = 0;
                    v55[2] = 0;
                    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v55, (uint64_t *)v123, *((uint64_t **)&v123 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3));
                    v56 = v55 + 3;
                  }
                  v110 = v56;
                  v105[0] = (void **)&v106;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v105);
                  v106 = (void **)&v123;
                  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v106);
                  v44 = v122[0];
                  v45 = *v122[0];
                }
                ++v51;
                v57 = 0x6DB6DB6DB6DB6DB7 * ((v45[3 * v46][3 * v49 + 1] - v45[3 * v46][3 * v49]) >> 5);
                v50 += 224;
              }
              while (v57 > v51);
              v48 = v45[3 * v46];
            }
            v47 |= v57 > 1;
            ++v49;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v45[3 * v46 + 1] - v48) > v49);
        }
        ++v46;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v44[1] - v45) > v46);
      v21 = v90;
      v30 = v88;
      if ((v47 & 1) != 0)
      {
        if (quasar::gLogLevel >= 5)
        {
          v138 = 0u;
          v139 = 0u;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v123 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"Detected phrases in confusion network - backing off to flattened 1-best (this is OK)", 84);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v123);
          v44 = v122[0];
        }
        if (v44 != &v109)
          std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v44, v109, v110, 0xAAAAAAAAAAAAAAABLL * (v110 - v109));
      }
    }
    v106 = 0;
    v107 = 0;
    v108 = 0;
    memset(v105, 0, sizeof(v105));
    v102 = 0;
    v103 = 0;
    v104 = 0;
    memset(v101, 0, sizeof(v101));
    v98 = 0;
    v99 = 0;
    v100 = 0;
    memset(v97, 0, sizeof(v97));
    v94 = 0;
    v95 = 0;
    v96 = 0;
    __p = 0;
    v92 = 0;
    v93 = 0;
    quasar::ConfusionNetworkCombiner::combineResults(a1 + 448, v122, (uint64_t)&v106, (uint64_t)v105, &v102, v101, (uint64_t)&v98, v97, (uint64_t)&v94, (uint64_t)&__p);
    if (v103 == v102)
    {
      if (quasar::gLogLevel < 4)
      {
LABEL_102:
        if (__p)
        {
          v92 = __p;
          operator delete(__p);
        }
        if (v94)
        {
          v95 = v94;
          operator delete(v94);
        }
        *(_QWORD *)&v123 = v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        if (v98)
        {
          v99 = v98;
          operator delete(v98);
        }
        *(_QWORD *)&v123 = v101;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        *(_QWORD *)&v123 = &v102;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        *(_QWORD *)&v123 = v105;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        *(_QWORD *)&v123 = &v106;
        std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        *(_QWORD *)&v123 = &v109;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
LABEL_109:
        v85 = v115;
        if (v115)
        {
          v86 = (unint64_t *)&v115->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        *(_QWORD *)&v123 = v116;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        *(_QWORD *)&v123 = v122;
        std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        return 0;
      }
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"Combined sausage is empty. Doing nothing.", 41);
    }
    else
    {
      quasar::Decoder::calculateNBest(v30, v21, *((_DWORD *)*a4 + 4));
      v58 = *(uint64_t **)(*v21 + 352);
      v59 = (uint64_t *)*v58;
      v123 = 0uLL;
      *(_QWORD *)&v124 = 0;
      std::vector<std::vector<quasar::Token>>::insert(v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v103 - v102) >> 3), (uint64_t *)&v123);
      *(_QWORD *)&v140[1] = &v123;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140[1]);
      v60 = v102;
      v61 = v103;
      if (v103 != v102)
      {
        v62 = 0;
        do
        {
          v63 = *(_QWORD *)(v60 + 24 * v62);
          if (*(_QWORD *)(v60 + 24 * v62 + 8) != v63)
          {
            v64 = 0;
            v65 = 0;
            v66 = (uint64_t *)(**(_QWORD **)(*v90 + 352) + 24 * v62);
            v67 = (std::string **)(v66 + 1);
            do
            {
              v68 = *(_QWORD *)(v63 + v64);
              quasar::PhonesetMapping::getIpaPhoneSequence(v30 + 608, v68 + 48, (uint64_t)&v123);
              v69 = (void **)(v68 + 96);
              if (*(char *)(v68 + 119) < 0)
                operator delete(*v69);
              *(_OWORD *)v69 = v123;
              *(_QWORD *)(v68 + 112) = v124;
              if (quasar::gLogLevel >= 5)
              {
                v138 = 0u;
                v139 = 0u;
                v136 = 0u;
                v137 = 0u;
                v134 = 0u;
                v135 = 0u;
                v132 = 0u;
                v133 = 0u;
                v130 = 0u;
                v131 = 0u;
                v128 = 0u;
                v129 = 0u;
                v126 = 0u;
                v127 = 0u;
                v124 = 0u;
                v125 = 0u;
                v123 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
                v70 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" ", 1);
                v71 = (_QWORD *)std::ostream::operator<<();
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
                quasar::operator<<(v72, v68);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v123);
              }
              if (quasar::Token::isPrintable((quasar::Token *)v68))
              {
                v73 = *v67;
                if ((unint64_t)*v67 >= v66[2])
                {
                  p_size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(v66, (const quasar::Token *)v68);
                }
                else
                {
                  quasar::Token::Token(*v67, (const quasar::Token *)v68);
                  p_size = (uint64_t)&v73[9].__r_.__value_.__l.__size_;
                  *v67 = (std::string *)((char *)v73 + 224);
                }
                *v67 = (std::string *)p_size;
              }
              else if ((std::string *)*v66 != *v67)
              {
                LODWORD((*v67)[-8].__r_.__value_.__l.__data_) = *(_DWORD *)(v68 + 32);
              }
              ++v65;
              v60 = v102;
              v75 = (uint64_t *)(v102 + 24 * v62);
              v63 = *v75;
              v64 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v75[1] - *v75) >> 3) > v65);
            v61 = v103;
          }
          ++v62;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 3) > v62);
      }
      *(_QWORD *)&v140[1] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*v90 + 352) + 8) - **(_QWORD **)(*v90 + 352)) >> 3);
      std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long,void>((unint64_t *)&v140[1], &v123);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v90 + 392, &v123);
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *v90;
      v80 = **(_QWORD **)(*v90 + 392);
      v81 = *(_QWORD *)(*(_QWORD *)(*v90 + 392) + 8);
      v82 = v81 - v80;
      if (v81 != v80)
      {
        v83 = 0;
        v84 = v82 >> 3;
        if (v84 <= 1)
          v84 = 1;
        do
        {
          *(double *)(v80 + 8 * v83) = (double)(int)v83;
          ++v83;
        }
        while (v84 != v83);
      }
      *(_DWORD *)(v79 + 528) = *(_QWORD *)v94;
      *(_WORD *)v140 = 0;
      quasar::Align::MakeMonotonic(*(uint64_t **)(v79 + 352), &v140[1], v140);
      if (!v140[0] || quasar::gLogLevel < 4)
        goto LABEL_102;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"Tokens not monotonic and have been corrected.", 45);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v123);
    goto LABEL_102;
  }
  if (quasar::gLogLevel >= 1)
  {
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v123 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"No confusion network found in decodeChainOutput. Doing nothing.", 63);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v123);
  }
  return 2;
}

uint64_t *std::vector<std::vector<quasar::Token>>::insert(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v4 = a2;
  if (a3)
  {
    v10 = a1[2];
    v8 = (uint64_t)(a1 + 2);
    v9 = v10;
    v11 = *(_QWORD *)(v8 - 8);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 3) >= a3)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)a2) >> 3);
      v20 = a3;
      if (a3 <= v19)
        goto LABEL_15;
      v21 = 0;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)a2) >> 3);
      v27 = v11 + 24 * (a3 - v19);
      v22 = 24 * a3 - 8 * ((uint64_t)(v11 - (_QWORD)a2) >> 3);
      do
      {
        v23 = (_QWORD *)(v11 + v21);
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(v11 + v21), *a4, a4[1], 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5));
        v21 += 24;
      }
      while (v22 != v21);
      a1[1] = v27;
      if ((uint64_t *)v11 != v4)
      {
LABEL_15:
        std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, v4, v11, (uint64_t)&v4[3 * a3]);
        if (v4 <= a4)
        {
          if (a1[1] <= (unint64_t)a4)
            v24 = 0;
          else
            v24 = a3;
          a4 += 3 * v24;
        }
        v25 = (uint64_t)v4;
        do
        {
          if ((uint64_t *)v25 != a4)
            std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v25, *a4, a4[1], 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5));
          v25 += 24;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      v12 = *a1;
      v13 = a3 - 0x5555555555555555 * ((uint64_t)(v11 - *a1) >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v13)
        v16 = v13;
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      v32 = v8;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v8, v17);
      else
        v18 = 0;
      v28 = v18;
      v29 = &v18[24 * v14];
      v30 = v29;
      v31 = &v18[24 * v17];
      std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end(&v28, a3, a4);
      v4 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v28, v4);
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v28);
    }
  }
  return v4;
}

void sub_1AE009758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::supportsEager(quasar::ConfusionNetworkCombinerDecoder *this)
{
  return 1;
}

void quasar::ConfusionNetworkCombinerDecoder::~ConfusionNetworkCombinerDecoder(quasar::ConfusionNetworkCombinerDecoder *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D3AAE0;
  *((_QWORD *)this + 56) = &off_1E5D395B8;
  v2 = (void *)*((_QWORD *)this + 264);
  if (v2)
  {
    *((_QWORD *)this + 265) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 2088);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2071) < 0)
    operator delete(*((void **)this + 256));
  if (*((char *)this + 2047) < 0)
    operator delete(*((void **)this + 253));
  quasar::ResultCombiner::~ResultCombiner((void **)this + 56);
  quasar::Decoder::~Decoder((void **)this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D3AAE0;
  *((_QWORD *)this + 56) = &off_1E5D395B8;
  v2 = (void *)*((_QWORD *)this + 264);
  if (v2)
  {
    *((_QWORD *)this + 265) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 2088);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2071) < 0)
    operator delete(*((void **)this + 256));
  if (*((char *)this + 2047) < 0)
    operator delete(*((void **)this + 253));
  quasar::ResultCombiner::~ResultCombiner((void **)this + 56);
  quasar::Decoder::~Decoder((void **)this);
  MEMORY[0x1AF44D190]();
}

_QWORD *std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AE009948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>&,void>@<X0>(uint64_t ***a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1AE0099A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>(uint64_t a1, uint64_t ***a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D45708;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((_QWORD *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  return a1;
}

void sub_1AE009A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1AE009B28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<double>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE009B74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<double>>,0>(_QWORD *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D458C8;
  std::vector<double>::vector(a1 + 3, *a2);
  return a1;
}

void sub_1AE009BC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

kaldi::FbankWithAudioAnalytics *kaldi::FbankWithAudioAnalytics::FbankWithAudioAnalytics(kaldi::FbankWithAudioAnalytics *this, const kaldi::FbankWithAudioAnalyticsOptions *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  __int128 v32;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = off_1E5D29D98;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_QWORD *)((char *)this + 37) = *(_QWORD *)((char *)a2 + 21);
  *(_OWORD *)((char *)this + 24) = v4;
  v5 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 2);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 7);
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 5);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 24);
  *((_OWORD *)this + 5) = v7;
  *((_OWORD *)this + 6) = v8;
  *((_QWORD *)this + 2) = &unk_1E5D2ADB0;
  *(_OWORD *)((char *)this + 116) = *(_OWORD *)((char *)a2 + 100);
  v9 = *(_OWORD *)((char *)a2 + 116);
  v10 = *(_OWORD *)((char *)a2 + 132);
  v11 = *(_OWORD *)((char *)a2 + 148);
  *(_OWORD *)((char *)this + 180) = *(_OWORD *)((char *)a2 + 164);
  *(_OWORD *)((char *)this + 164) = v11;
  *(_OWORD *)((char *)this + 148) = v10;
  *(_OWORD *)((char *)this + 132) = v9;
  v12 = *(_OWORD *)((char *)a2 + 180);
  v13 = *(_OWORD *)((char *)a2 + 196);
  v14 = *(_OWORD *)((char *)a2 + 212);
  *((_BYTE *)this + 244) = *((_BYTE *)a2 + 228);
  *(_OWORD *)((char *)this + 228) = v14;
  *(_OWORD *)((char *)this + 212) = v13;
  *(_OWORD *)((char *)this + 196) = v12;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::FbankWithAudioAnalytics *)((char *)this + 296), (const kaldi::FbankWithAudioAnalyticsOptions *)((char *)a2 + 8));
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 86) = 0;
  if (*((_BYTE *)a2 + 99))
  {
    v15 = operator new(0x90uLL);
    v15[2] = 0;
    *v15 = &unk_1E5D41418;
    v15[1] = 0;
    v16 = (int)*((float *)a2 + 3);
    v15[3] = 850045863;
    *((_OWORD *)v15 + 2) = 0u;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    *((_DWORD *)v15 + 28) = v16;
    v15[16] = 0;
    v15[17] = 0;
    v15[15] = 0;
    *(_QWORD *)&v32 = v15 + 3;
    *((_QWORD *)&v32 + 1) = v15;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this, &v32);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = *((float *)a2 + 23);
  if (v20 > 0.0)
    *((float *)this + 66) = logf(v20);
  v21 = kaldi::FrameExtractionOptions::PaddedWindowSize((const kaldi::FbankWithAudioAnalyticsOptions *)((char *)a2 + 8));
  if ((v21 & (v21 - 1)) == 0)
  {
    v22 = operator new();
    v24 = v22;
    if (v21 >= 0)
      v25 = v21;
    else
      v25 = v21 + 1;
    kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v22, v25 >> 1, v23);
    *(_DWORD *)(v24 + 48) = v21;
    *((_QWORD *)this + 40) = v24;
  }
  kaldi::FbankWithAudioAnalytics::GetMelBanks(this, 1.0);
  v26 = operator new();
  kaldi::OnlineAudioAnalyticsFeature::OnlineAudioAnalyticsFeature(v26, (char *)a2 + 100);
  *((_QWORD *)this + 31) = v26;
  v27 = operator new();
  kaldi::OnlineProcessAudioAnalytics::OnlineProcessAudioAnalytics(v27, (char *)a2 + 180, *((_QWORD *)this + 31));
  *((_QWORD *)this + 32) = v27;
  v28 = operator new();
  kaldi::Matrix<float>::Matrix(v28);
  *((_QWORD *)this + 41) = v28;
  v29 = operator new();
  v30 = kaldi::Matrix<float>::Matrix(v29);
  *((_QWORD *)this + 42) = v29;
  if (*((_BYTE *)this + 244))
  {
    LODWORD(v30) = *((_DWORD *)this + 59);
    *((_DWORD *)this + 86) = (vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v30))
                                             + *((_BYTE *)this + 240));
  }
  return this;
}

void sub_1AE009ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::FbankWithAudioAnalytics::GetMelBanks(kaldi::FbankWithAudioAnalytics *this, float a2)
{
  char **v4;
  char **v5;
  char **v6;
  uint64_t *v7;
  float v9;
  float *v10;

  v9 = a2;
  v4 = (char **)*((_QWORD *)this + 35);
  if (!v4)
    goto LABEL_8;
  v5 = (char **)((char *)this + 280);
  do
  {
    v6 = v4 + 1;
    if (*((float *)v4 + 8) >= a2)
    {
      v6 = v4;
      v5 = v4;
    }
    v4 = (char **)*v6;
  }
  while (*v6);
  if (v5 != (char **)((char *)this + 280) && *((float *)v5 + 8) <= a2)
    return (uint64_t *)v5[5];
LABEL_8:
  v7 = (uint64_t *)operator new();
  kaldi::MelBanks::MelBanks(v7, (char *)this + 80, (char *)this + 24, a2);
  v10 = &v9;
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t **)this + 34, &v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v10)[5] = v7;
  return v7;
}

void sub_1AE00A06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::FbankWithAudioAnalytics::~FbankWithAudioAnalytics(kaldi::FbankWithAudioAnalytics *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::OnlineProcessPitch *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v2 = (char *)*((_QWORD *)this + 34);
  v3 = (char *)this + 280;
  if (v2 != (char *)this + 280)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      if (v4)
      {
        v16 = (void **)(v4 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v16);
        kaldi::Vector<float>::Destroy(v4);
        MEMORY[0x1AF44D190](v4, 0x10A0C409C5A7551);
      }
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = *((_QWORD *)this + 40);
  if (v8)
  {
    v9 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v8);
    MEMORY[0x1AF44D190](v9, 0x1090C40943DB512);
  }
  v10 = *((_QWORD *)this + 31);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
  v11 = (kaldi::OnlineProcessPitch *)*((_QWORD *)this + 32);
  if (v11)
  {
    kaldi::OnlineProcessPitch::~OnlineProcessPitch(v11);
    MEMORY[0x1AF44D190]();
  }
  v12 = *((_QWORD *)this + 41);
  if (v12)
  {
    v13 = kaldi::Matrix<float>::~Matrix(v12);
    MEMORY[0x1AF44D190](v13, 0x1080C40EB13E0A1);
  }
  v14 = *((_QWORD *)this + 42);
  if (v14)
  {
    v15 = kaldi::Matrix<float>::~Matrix(v14);
    MEMORY[0x1AF44D190](v15, 0x1080C40EB13E0A1);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 296);
  std::__tree<int>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  kaldi::FbankOptions::~FbankOptions((void **)this + 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t kaldi::FbankWithAudioAnalytics::Compute(kaldi::FbankWithAudioAnalytics *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, int a6, float a7)
{
  uint64_t *MelBanks;

  MelBanks = kaldi::FbankWithAudioAnalytics::GetMelBanks(a1, a7);
  return kaldi::FbankWithAudioAnalytics::ComputeInternal((uint64_t)a1, a2, (uint64_t)MelBanks, a3, a4, a5, a6);
}

uint64_t kaldi::FbankWithAudioAnalytics::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, int32x2_t *a6, int a7)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int32x2_t *v23;
  int32x2_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int32x2_t v29;
  __int32 v30;
  float *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int32x2_t v38;
  __int32 v39;
  unsigned int v40;
  int32x2_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t j;
  float *v52;
  int32x2_t v53;
  __int32 v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  float v60;
  float *v61;
  float *v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float *v69;
  int v70;
  float v71;
  uint64_t v72;
  int32x2_t v73;
  __int32 v74;
  float *v75;
  uint64_t v76;
  unsigned int v77;
  int32x2_t v78;
  __int32 v79;
  unsigned int v80;
  int32x2_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t i;
  int32x2_t v86;
  __int32 v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  BOOL v98;
  uint64_t *v100;
  float *v101;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *__p;
  float *v119;
  float *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  const void *v124[3];
  float *v125;
  uint64_t v126;
  uint64_t v127;
  int32x2_t v128[2];
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v101 = (float *)(a1 + 24);
  v104 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 24);
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(unsigned __int8 *)(a1 + 104);
  v13 = *(_DWORD *)(a1 + 344);
  v14 = *(_QWORD *)(a1 + 328);
  if (v14)
  {
    v106 = kaldi::MatrixBase<float>::NumRows(v14);
    if (kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 336)) != v106)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"#remaining_frames for fbank ", 28);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and energy ", 12);
      kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 336));
      v16 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " don't match!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
    }
  }
  else
  {
    v106 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v128);
  v17 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 256));
  if (a5)
  {
    v18 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)(a5 + 8));
    v132 = 0;
    v130 = 0;
    v131 = 0;
    kaldi::Vector<float>::Resize((void **)&v130, v18, 0);
    v19 = *(int *)(a5 + 8);
    v112 = 0;
    v113 = 0;
    v111 = *(_QWORD *)a2 + 4 * v19;
    LODWORD(v112) = v131;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v130, (const void **)&v111);
    (*(void (**)(_QWORD, uint64_t *, float))(**(_QWORD **)(a1 + 248) + 32))(*(_QWORD *)(a1 + 248), &v130, *(float *)(a1 + 116));
    kaldi::Vector<float>::Destroy((uint64_t)&v130);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 248) + 32))(*(_QWORD *)(a1 + 248), a2, *(float *)(a1 + 116));
  }
  if (a7)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 40))(*(_QWORD *)(a1 + 248));
  v100 = (uint64_t *)a2;
  v20 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 256)) - v17;
  if (a7)
  {
    v21 = v20 - (v106 + v104);
    if (v21 < 0)
      v21 = v106 + v104 - v20;
    if (v21 >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"mismatch between finished audio analytics frames and remaining frames+new wav frames: ", 86);
      v96 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" v.s. ", 6);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
    }
    v20 = (v106 + v104);
  }
  if ((_DWORD)v20)
  {
    kaldi::Matrix<float>::Resize(v128, v20, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 56), 0, 0);
    if (a6)
      kaldi::Matrix<float>::Resize(a6, v20, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 56), 0, 0);
    v98 = (int)v20 > 0;
    if ((int)v20 >= 1)
    {
      v22 = 0;
      do
      {
        v131 = 0;
        v132 = 0;
        v130 = *(_QWORD *)v128 + 4 * v129 * v22;
        LODWORD(v131) = kaldi::MatrixBase<float>::NumCols((uint64_t)v128);
        kaldi::OnlineProcessAudioAnalytics::GetFrame(*(_QWORD *)(a1 + 256), v17 + v22++, (uint64_t)&v130);
      }
      while ((_DWORD)v20 != v22);
    }
    kaldi::Matrix<float>::Resize(a4, v20, (v11 + v12 + v13), 0, 0);
  }
  else
  {
    v98 = 0;
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
  if (a5)
    kaldi::ExtractWaveformRemainder((uint64_t)v100, v101, (void **)a5);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  memset(v124, 0, sizeof(v124));
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v23 = (int32x2_t *)operator new();
  kaldi::Matrix<float>::Matrix((uint64_t)v23);
  v24 = (int32x2_t *)operator new();
  kaldi::Matrix<float>::Matrix((uint64_t)v24);
  v25 = v106 + v104;
  v105 = v25;
  v26 = (v25 - v20);
  if ((int)v26 >= 1)
  {
    kaldi::Matrix<float>::Resize(v23, (v25 - v20), *(unsigned int *)(a1 + 80), 0, 0);
    kaldi::Matrix<float>::Resize(v24, v26, 1, 0, 0);
  }
  v97 = (uint64_t *)v24;
  __p = 0;
  v119 = 0;
  v120 = 0;
  if (v105 >= 1)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      if (v27 >= v106)
      {
        v114 = 1.0;
        if ((*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 115)) && *(_BYTE *)(a1 + 112))
          v52 = &v114;
        else
          v52 = 0;
        kaldi::ExtractWindow(v100, v27 - v106, (uint64_t)v101, (float **)(a1 + 296), (void **)&v125, v52);
        if (*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 115))
        {
          if (!*(_BYTE *)(a1 + 112))
          {
            v60 = kaldi::VecVec<float>((uint64_t)&v125, (const float **)&v125);
            if (v60 < 1.1755e-38)
              v60 = 1.1755e-38;
            v114 = v60;
          }
          if (*(_BYTE *)(a1 + 115))
          {
            v61 = v119;
            if (v119 >= v120)
            {
              v63 = (float *)__p;
              v64 = ((char *)v119 - (_BYTE *)__p) >> 2;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v66 = (char *)v120 - (_BYTE *)__p;
              if (((char *)v120 - (_BYTE *)__p) >> 1 > v65)
                v65 = v66 >> 1;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                v67 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
              {
                v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v120, v67);
                v63 = (float *)__p;
                v61 = v119;
              }
              else
              {
                v68 = 0;
              }
              v69 = (float *)&v68[4 * v64];
              *v69 = v114;
              v62 = v69 + 1;
              while (v61 != v63)
              {
                v70 = *((_DWORD *)v61-- - 1);
                *((_DWORD *)v69-- - 1) = v70;
              }
              __p = v69;
              v119 = v62;
              v120 = (float *)&v68[4 * v67];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v119 = v114;
              v62 = v61 + 1;
            }
            v119 = v62;
          }
        }
        v71 = logf(v114);
        if ((LODWORD(v71) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v111);
          kaldi::VectorBase<float>::Write((uint64_t)&v125, &v111, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"Non-finite energy found for frame ", 34);
          v92 = (_QWORD *)std::ostream::operator<<();
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if (v117 >= 0)
            v94 = &v115;
          else
            v94 = v115;
          if (v117 >= 0)
            v95 = HIBYTE(v117);
          else
            v95 = v116;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
          if (SHIBYTE(v117) < 0)
            operator delete(v115);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
        }
        v72 = *(_QWORD *)(a1 + 320);
        if (v72)
          kaldi::SplitRadixRealFft<float>::Compute(v72, v125, 1, (float **)&v121);
        else
          kaldi::RealFft<float>((uint64_t)&v125, 1);
        kaldi::ComputePowerSpectrum((uint64_t)&v125);
        v132 = 0;
        v130 = (uint64_t)v125;
        v131 = ((int)v126 / 2 + 1);
        kaldi::MelBanks::Compute(a3, &v130, (uint64_t)v124);
        if (*(_BYTE *)(a1 + 114))
        {
          kaldi::VectorBase<float>::ApplyFloor((uint64_t)v124, 1.1755e-38);
          kaldi::VectorBase<float>::ApplyLog((uint64_t)v124);
        }
        if (v27 < (int)v20)
        {
          v73 = *a4;
          v74 = a4[2].i32[0];
          kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
          v75 = (float *)(*(_QWORD *)&v73 + 4 * v74 * v27);
          v76 = *(unsigned __int8 *)(a1 + 104);
          v77 = *(_DWORD *)(a1 + 80);
          v113 = 0;
          v111 = (uint64_t)&v75[v76];
          v112 = v77;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v111, v124);
          if (a6)
          {
            v78 = *a6;
            v79 = a6[2].i32[0];
            v80 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
            v117 = 0;
            v115 = (void *)(*(_QWORD *)&v78 + 4 * v79 * v27);
            v116 = v80;
            v81 = v128[0];
            v82 = v129;
            v83 = kaldi::MatrixBase<float>::NumCols((uint64_t)v128);
            v109 = 0;
            v110 = 0;
            v107 = *(_QWORD *)&v81 + 4 * v82 * v27;
            v108 = v83;
            kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v115, (const void **)&v107);
          }
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(float *)(a1 + 108) > 0.0 && v71 < *(float *)(a1 + 264))
              v71 = *(float *)(a1 + 264);
            *v75 = v71;
            if (*(_BYTE *)(a1 + 113))
            {
              v84 = *(unsigned int *)(a1 + 80);
              if ((int)v84 >= 1)
              {
                for (i = 0; i != v84; ++i)
                  v75[i] = v75[i + 1];
              }
              v75[(int)v84] = v71;
            }
          }
          goto LABEL_96;
        }
        v86 = *v23;
        v87 = v23[2].i32[0];
        v88 = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
        v113 = 0;
        v111 = *(_QWORD *)&v86 + 4 * v87 * v28;
        v112 = v88;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v111, v124);
      }
      else
      {
        if (v27 < (int)v20)
        {
          v29 = *a4;
          v30 = a4[2].i32[0];
          kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
          v31 = (float *)(*(_QWORD *)&v29 + 4 * v30 * v27);
          v32 = *(unsigned __int8 *)(a1 + 104);
          v33 = *(_DWORD *)(a1 + 80);
          v132 = 0;
          v130 = (uint64_t)&v31[v32];
          v131 = v33;
          v34 = *(_QWORD *)(a1 + 328);
          v35 = *(_QWORD *)v34;
          v36 = *(_DWORD *)(v34 + 16);
          v37 = kaldi::MatrixBase<float>::NumCols(v34);
          v113 = 0;
          v111 = v35 + 4 * v36 * v27;
          v112 = v37;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v130, (const void **)&v111);
          if (a6)
          {
            v38 = *a6;
            v39 = a6[2].i32[0];
            v40 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
            v113 = 0;
            v111 = *(_QWORD *)&v38 + 4 * v39 * v27;
            v112 = v40;
            v41 = v128[0];
            v42 = v129;
            v43 = kaldi::MatrixBase<float>::NumCols((uint64_t)v128);
            v117 = 0;
            v115 = (void *)(*(_QWORD *)&v41 + 4 * v42 * v27);
            v116 = v43;
            kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v111, (const void **)&v115);
          }
          if (*(_BYTE *)(a1 + 104))
          {
            v44 = *(_QWORD *)(a1 + 336);
            v45 = *(_QWORD *)v44;
            v46 = *(_DWORD *)(v44 + 16);
            kaldi::MatrixBase<float>::NumCols(v44);
            v47 = *(float *)(v45 + 4 * v46 * v27);
            if (v47 < 1.1755e-38)
              v47 = 1.1755e-38;
            v48 = logf(v47);
            if (*(float *)(a1 + 108) > 0.0 && v48 < *(float *)(a1 + 264))
              v48 = *(float *)(a1 + 264);
            *v31 = v48;
          }
          if (*(_BYTE *)(a1 + 113) && *(_BYTE *)(a1 + 104))
          {
            v49 = *v31;
            v50 = *(unsigned int *)(a1 + 80);
            if ((int)v50 >= 1)
            {
              for (j = 0; j != v50; ++j)
                v31[j] = v31[j + 1];
            }
            v31[(int)v50] = v49;
          }
          goto LABEL_96;
        }
        v53 = *v23;
        v54 = v23[2].i32[0];
        v55 = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
        v132 = 0;
        v130 = *(_QWORD *)&v53 + 4 * v54 * v28;
        v131 = v55;
        v56 = *(_QWORD *)(a1 + 328);
        v57 = *(_QWORD *)v56;
        v58 = *(_DWORD *)(v56 + 16);
        v59 = kaldi::MatrixBase<float>::NumCols(v56);
        v113 = 0;
        v111 = v57 + 4 * v58 * v27;
        v112 = v59;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v130, (const void **)&v111);
      }
      ++v28;
LABEL_96:
      ++v27;
    }
    while (v27 != v105);
  }
  if (v98 && kaldi::MatrixBase<float>::NumRows((uint64_t)a4) == (_DWORD)v20 && *(_BYTE *)(a1 + 244))
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v130, (uint64_t)a4, 0, v20, *(_DWORD *)(a1 + 80) + *(unsigned __int8 *)(a1 + 104), *(_DWORD *)(a1 + 344));
    kaldi::AudioAnalyticsHelper::ExtractDesiredAudioAnalytics((float **)v128, 31, (uint64_t)&v130);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v130);
  }
  if (*(_BYTE *)(a1 + 115))
    kaldi::SnrTracker::add_frame_energy(*(_QWORD *)a1, (char **)&__p);
  kaldi::Matrix<float>::Swap(*(uint64_t **)(a1 + 328), (uint64_t *)v23);
  kaldi::Matrix<float>::Swap(*(uint64_t **)(a1 + 336), v97);
  v89 = kaldi::Matrix<float>::~Matrix((uint64_t)v23);
  MEMORY[0x1AF44D190](v89, 0x1080C40EB13E0A1);
  v90 = kaldi::Matrix<float>::~Matrix((uint64_t)v97);
  MEMORY[0x1AF44D190](v90, 0x1080C40EB13E0A1);
  if (__p)
  {
    v119 = (float *)__p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v124);
  kaldi::Vector<float>::Destroy((uint64_t)&v125);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v128);
}

void sub_1AE00ADC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1AE00AE40);
}

void sub_1AE00AE30(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_1AE00AE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a67;
  char a70;

  if (__p)
    operator delete(__p);
  if (a64)
    operator delete(a64);
  kaldi::Vector<float>::Destroy((uint64_t)&a67);
  kaldi::Vector<float>::Destroy((uint64_t)&a70);
  JUMPOUT(0x1AE00AE70);
}

uint64_t quasar::KeywordSpottingSyncDecoder::KeywordSpottingSyncDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::SyncDecoder::SyncDecoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D39D68;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 176), "<blk>");
  *(_QWORD *)(a1 + 200) = 3240099840;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 1;
  *(_BYTE *)(a1 + 218) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 276) = 1;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 9999;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  return a1;
}

void sub_1AE00AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 152);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 128);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 + 112);
  if (*(char *)(v10 + 111) < 0)
    operator delete(*(void **)(v10 + 88));
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v11);
  quasar::SyncDecoder::~SyncDecoder((void **)v10);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::~KeywordSpottingSyncDecoder(void **this)
{
  void *v2;
  void **v3;

  *this = &off_1E5D39D68;
  v3 = this + 49;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  v3 = this + 42;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[39];
  if (v2)
  {
    this[40] = v2;
    operator delete(v2);
  }
  v3 = this + 35;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 28;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  v3 = this + 19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  quasar::SyncDecoder::~SyncDecoder(this);
}

{
  quasar::KeywordSpottingSyncDecoder::~KeywordSpottingSyncDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::KeywordSpottingSyncDecoder::registerParams(quasar::KeywordSpottingSyncDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-spotting");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 42, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "The threshold for the keyword score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 200, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "frame offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 204, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "apply viterbi for keyword detection");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 216, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 64, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-list-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of keywords and their corresponding tokens sequence");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 88, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of frames that get decoded in one go");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 208, (uint64_t)v4, 0, 42, 108, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-batch-reset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Reset scores after each result");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 217, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-top-result-only");
  std::string::basic_string[abi:ne180100]<0>(v4, "Only return the best keyword score");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 218, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-moving-avg");
  std::string::basic_string[abi:ne180100]<0>(v4, "Performs a moving average of the scores");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 272, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "moving-avg-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Set the window size for the moving average");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 276, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-discriminative-branches");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of discriminative branch outputs to be decoded");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 304, (uint64_t)v4, 0, 245, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "discriminative-config-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Config to map the keywords to the discriminative branch numbersAlso specifies the weights to be used for combining the phonetic and discriminative scoresExpected format: <kwdToken> <discBranchId> <phoneticScoreScaleFactor> <discScoreScaleFactor>");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 360, (uint64_t)v4, 0, 245, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-frames-to-use");
  std::string::basic_string[abi:ne180100]<0>(v4, "Num of frames to use for decodingThis is specifically required when using discriminative branch as we need to use thediscriminative output coming out of the first block");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 384, (uint64_t)v4, 0, 248, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AE00B6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordSpottingSyncDecoder::setupDiscBranch(const std::string *this)
{
  const std::locale::facet *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  int v7;
  unint64_t v8;
  char *size;
  _DWORD *v10;
  char *data;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  std::vector<std::wstring>::pointer begin;
  unint64_t v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  int v32;
  std::string::size_type v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  std::vector<std::wstring>::pointer v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void **p_data;
  uint64_t *v43;
  void *__p;
  float *v45;
  float *v46;
  std::vector<std::wstring> v47;
  std::locale v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *v65[2];
  uint64_t v66;
  void **v67;
  std::fstream v68;
  _QWORD v69[22];

  v69[19] = *MEMORY[0x1E0C80C00];
  std::fstream::basic_fstream(&v68, this + 15, 8u);
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  if (this[5].__r_.__value_.__r.__words[2] == this[5].__r_.__value_.__l.__size_
    || (int)(-1431655765 * ((this[5].__r_.__value_.__r.__words[2] - this[5].__r_.__value_.__l.__size_) >> 3)) < 1)
  {
    if (quasar::gLogLevel > 1)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      *(_OWORD *)&v48[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"No keywords configured, ignore discriminative config", 52);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v48);
    }
  }
  else
  {
    p_data = (void **)&this[13].__r_.__value_.__l.__data_;
    v43 = (uint64_t *)&this[14];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v68 + *((_QWORD *)v68.__sb_.__extbuf_ - 3)));
      v3 = std::locale::use_facet(v48, MEMORY[0x1E0DE4A90]);
      v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
      std::locale::~locale(v48);
      v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, (uint64_t)v65, v4);
      if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
        break;
      memset(&v47, 0, sizeof(v47));
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      quasar::splitStringSimple((uint64_t)v65, (uint64_t *)&__p, (uint64_t *)v48);
      std::vector<std::string>::__vdeallocate(&v47);
      *(_OWORD *)&v47.__begin_ = *(_OWORD *)&v48[0].__locale_;
      v47.__end_cap_.__value_ = (std::wstring *)v49;
      v48[1].__locale_ = 0;
      *(_QWORD *)&v49 = 0;
      v48[0].__locale_ = 0;
      v67 = (void **)v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v67);
      if (SHIBYTE(v46) < 0)
        operator delete(__p);
      if (v47.__end_ == v47.__begin_
        || (std::vector<std::wstring>::pointer)((char *)v47.__end_ - (char *)v47.__begin_) != (std::vector<std::wstring>::pointer)96)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        *(_OWORD *)&v48[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"invalid mapping, expected format <kwd> <discBranchId> <phoneticScaleFactor> <discScaleFactor>", 93);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v48);
      }
      v6 = std::stoi((const std::string *)&v47.__begin_[1], 0, 10);
      v7 = v6;
      if (v6 >= SLODWORD(this[12].__r_.__value_.__r.__words[2]))
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        *(_OWORD *)&v48[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Invalid discriminative branch ID", 32);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v48);
      }
      size = (char *)this[13].__r_.__value_.__l.__size_;
      v8 = this[13].__r_.__value_.__r.__words[2];
      if ((unint64_t)size >= v8)
      {
        data = (char *)*p_data;
        v12 = (size - (_BYTE *)*p_data) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)data;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[13].__r_.__value_.__r.__words[2], v15);
          data = this[13].__r_.__value_.__l.__data_;
          size = (char *)this[13].__r_.__value_.__l.__size_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (int *)&v16[4 * v12];
        *v17 = v7;
        v10 = v17 + 1;
        while (size != data)
        {
          v18 = *((_DWORD *)size - 1);
          size -= 4;
          *--v17 = v18;
        }
        this[13].__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        this[13].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
        this[13].__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[4 * v15];
        if (data)
          operator delete(data);
      }
      else
      {
        *(_DWORD *)size = v6;
        v10 = size + 4;
      }
      this[13].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      __p = 0;
      v45 = 0;
      v46 = 0;
      begin = v47.__begin_;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3) >= 3)
      {
        v20 = 2;
        do
        {
          v21 = std::stof((const std::string *)&begin[v20], 0);
          v22 = v21;
          v23 = v45;
          if (v45 >= v46)
          {
            v25 = (float *)__p;
            v26 = ((char *)v45 - (_BYTE *)__p) >> 2;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v28 = (char *)v46 - (_BYTE *)__p;
            if (((char *)v46 - (_BYTE *)__p) >> 1 > v27)
              v27 = v28 >> 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v29);
              v25 = (float *)__p;
              v23 = v45;
            }
            else
            {
              v30 = 0;
            }
            v31 = (float *)&v30[4 * v26];
            *v31 = v22;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v32 = *((_DWORD *)v23-- - 1);
              *((_DWORD *)v31-- - 1) = v32;
            }
            __p = v31;
            v45 = v24;
            v46 = (float *)&v30[4 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *v45 = v21;
            v24 = v23 + 1;
          }
          v45 = v24;
          ++v20;
          begin = v47.__begin_;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3) > v20);
      }
      v33 = this[14].__r_.__value_.__l.__size_;
      if (v33 >= this[14].__r_.__value_.__r.__words[2])
      {
        v34 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v43, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v43, (uint64_t)&__p);
        v34 = v33 + 24;
      }
      this[14].__r_.__value_.__l.__size_ = v34;
      if (quasar::gLogLevel >= 4)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        *(_OWORD *)&v48[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Kwd: ", 5);
        v36 = SHIBYTE(v47.__begin_->__r_.__value_.__r.__words[2]);
        v37 = v36 >= 0 ? v47.__begin_ : (std::vector<std::wstring>::pointer)v47.__begin_->__r_.__value_.__r.__words[0];
        v38 = v36 >= 0 ? HIBYTE(v47.__begin_->__r_.__value_.__r.__words[2]) : v47.__begin_->__r_.__value_.__l.__size_;
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" DiscriminativeBranch: ", 23);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v48);
        if (quasar::gLogLevel >= 4)
        {
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          *(_OWORD *)&v48[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Weights: ", 9);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" ", 1);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v48);
        }
      }
      if (__p)
      {
        v45 = (float *)__p;
        operator delete(__p);
      }
      v48[0].__locale_ = (std::locale::__imp *)&v47;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
    }
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(this[5].__r_.__value_.__r.__words[2] - this[5].__r_.__value_.__l.__size_) >> 3) != (uint64_t)(this[13].__r_.__value_.__l.__size_ - this[13].__r_.__value_.__r.__words[0]) >> 2)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      *(_OWORD *)&v48[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Mismatch in num keywords specified in discriminative config", 59);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v48);
    }
  }
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  MEMORY[0x1AF44CA70](v68.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v69);
}

void sub_1AE00BE58()
{
  JUMPOUT(0x1AE00BEDCLL);
}

void sub_1AE00BEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  void *v20;
  char v21;
  void (__cdecl **v22)(std::fstream *__hidden);

  std::locale::~locale(&a19);
  if (v21 < 0)
    operator delete(v20);
  std::fstream::~fstream(&v22);
  _Unwind_Resume(a1);
}

void sub_1AE00BEC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (__p)
    operator delete(__p);
  a19 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  JUMPOUT(0x1AE00BEECLL);
}

uint64_t quasar::KeywordSpottingSyncDecoder::finishInit(quasar::KeywordSpottingSyncDecoder *this)
{
  _QWORD *Text;
  _QWORD *v3;
  std::locale::__imp *locale;
  unint64_t *v5;
  unint64_t v6;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  std::string::size_type v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  unsigned __int8 v47;
  uint64_t v48;
  void *__p[3];
  std::locale v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  void *v69[2];
  uint64_t v70;
  std::fstream v71;
  _QWORD v72[22];

  v72[19] = *MEMORY[0x1E0C80C00];
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v71);
  Text = fst::SymbolTable::ReadText((uint64_t)this + 64);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v50, (uint64_t)Text);
  v3 = (_QWORD *)((char *)this + 112);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 112, (__int128 *)v50);
  locale = v50[1].__locale_;
  if (v50[1].__locale_)
  {
    v5 = (unint64_t *)((char *)v50[1].__locale_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    }
  }
  if (v71.__sb_.__extbuf_min_[7] < 0)
    operator delete((void *)v71.__sb_.__extbufnext_);
  std::fstream::basic_fstream(&v71, (const std::string *)((char *)this + 88), 8u);
  v69[0] = 0;
  v69[1] = 0;
  v46 = (uint64_t *)((char *)this + 128);
  v70 = 0;
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v71 + *((_QWORD *)v71.__sb_.__extbuf_ - 3)));
    v8 = std::locale::use_facet(v50, v7);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v50);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v71, (uint64_t)v69, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    v50[0].__locale_ = 0;
    v50[1].__locale_ = 0;
    *(_QWORD *)&v51 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v67, " ");
    quasar::splitStringSimple((uint64_t)v69, (uint64_t *)&v67, (uint64_t *)&v68);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)v50);
    *(_OWORD *)&v50[0].__locale_ = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
    *(_QWORD *)&v51 = *((_QWORD *)&v68.__r_.__value_.__l + 2);
    memset(&v68, 0, sizeof(v68));
    __p[0] = &v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    v11 = *((_QWORD *)this + 17);
    if (v11 >= *((_QWORD *)this + 18))
    {
      v12 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v46, (__int128 **)v50);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v46, (__int128 **)v50);
      v12 = v11 + 24;
    }
    *((_QWORD *)this + 17) = v12;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 112))(*v3);
  if (quasar::gLogLevel >= 5)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)&v50[0].__locale_ = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Number of labels: ", 18);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v50);
  }
  v13 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14), (char *)this + 176);
  *((_QWORD *)this + 33) = v13;
  if (v13 == -1)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)&v50[0].__locale_ = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Blank label \"", 13);
    v42 = *((char *)this + 199);
    if (v42 >= 0)
      v43 = (char *)this + 176;
    else
      v43 = (char *)*((_QWORD *)this + 22);
    if (v42 >= 0)
      v44 = *((unsigned __int8 *)this + 199);
    else
      v44 = *((_QWORD *)this + 23);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\" not found in symbol table.", 28);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v50);
  }
  if (quasar::gLogLevel >= 5)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)&v50[0].__locale_ = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Blank label index: ", 19);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v50);
  }
  v14 = *((_QWORD *)this + 16);
  if (*((_QWORD *)this + 17) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(__int128 **)(v14 + 24 * v15);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 + 24 * v15 + 8) - (_QWORD)v16) >> 3) > 1)
      {
        if (*((char *)v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
          v14 = *v46;
        }
        else
        {
          v17 = *v16;
          v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v17;
        }
        v18 = (_QWORD *)(v14 + 24 * v15);
        v19 = (__int128 *)v18[1];
        v20 = (__int128 *)(*v18 + 24);
        memset(&v67, 0, sizeof(v67));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v67, v20, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v20) >> 3));
        std::vector<long long>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3));
        if (quasar::gLogLevel >= 5)
        {
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          *(_OWORD *)&v50[0].__locale_ = 0u;
          v51 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Adding keyword: ", 16);
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v68;
          else
            v22 = (std::string *)v68.__r_.__value_.__r.__words[0];
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          else
            size = v68.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v50);
        }
        v24 = v67.__r_.__value_.__r.__words[0];
        if (v67.__r_.__value_.__l.__size_ != v67.__r_.__value_.__r.__words[0])
        {
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = (*(uint64_t (**)(_QWORD, std::string::size_type))(*(_QWORD *)*v3 + 96))(*v3, v24 + v25);
            *((_QWORD *)__p[0] + v26) = v27;
            if (v27 == -1)
            {
              v65 = 0u;
              v66 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v56 = 0u;
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              *(_OWORD *)&v50[0].__locale_ = 0u;
              v51 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
              v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Symbol \"", 8);
              v36 = v67.__r_.__value_.__r.__words[0] + v25;
              v37 = *(char *)(v67.__r_.__value_.__r.__words[0] + v25 + 23);
              if (v37 >= 0)
                v38 = v67.__r_.__value_.__r.__words[0] + v25;
              else
                v38 = *(_QWORD *)v36;
              if (v37 >= 0)
                v39 = *(unsigned __int8 *)(v36 + 23);
              else
                v39 = *(_QWORD *)(v36 + 8);
              v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\" not found in symbol table.", 28);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v50);
            }
            ++v26;
            v24 = v67.__r_.__value_.__r.__words[0];
            v25 += 24;
          }
          while (v26 < 0xAAAAAAAAAAAAAAABLL
                      * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3));
        }
        quasar::AMKeywordDetection::AMKeywordDetection(v50, &v68, __p, *((unsigned __int8 *)this + 216));
        v28 = *((_QWORD *)this + 29);
        if (v28 >= *((_QWORD *)this + 30))
        {
          v29 = std::vector<quasar::AMKeywordDetection>::__push_back_slow_path<quasar::AMKeywordDetection>((uint64_t *)this + 28, (const quasar::AMKeywordDetection *)v50);
        }
        else
        {
          quasar::AMKeywordDetection::AMKeywordDetection(*((quasar::AMKeywordDetection **)this + 29), (const quasar::AMKeywordDetection *)v50);
          v29 = v28 + 216;
          *((_QWORD *)this + 29) = v28 + 216;
        }
        *((_QWORD *)this + 29) = v29;
        quasar::AMKeywordDetection::~AMKeywordDetection((quasar::AMKeywordDetection *)v50);
        LODWORD(v50[0].__locale_) = 0;
        v48 = 0;
        v47 = 0;
        v30 = *((_QWORD *)this + 20);
        if (v30 >= *((_QWORD *)this + 21))
        {
          v31 = std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float const&,BOOL>((uint64_t *)this + 19, (uint64_t)&v68, (int *)v50, (int *)&v48 + 1, (int *)&v48, &quasar::negInf, &v47);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>((uint64_t)this + 168, *((std::string **)this + 20), (uint64_t)&v68, (int *)v50, (int *)&v48 + 1, (int *)&v48, &quasar::negInf, &v47);
          v31 = v30 + 224;
          *((_QWORD *)this + 20) = v30 + 224;
        }
        *((_QWORD *)this + 20) = v31;
        ++*((_QWORD *)this + 31);
        if (*((_BYTE *)this + 272))
        {
          v52 = 0u;
          v53 = 0u;
          *(_OWORD *)&v50[0].__locale_ = 0u;
          v51 = 0u;
          v32 = *((_QWORD *)this + 36);
          if (v32 >= *((_QWORD *)this + 37))
          {
            v33 = std::vector<quasar::MovingAverage>::__push_back_slow_path<quasar::MovingAverage>((uint64_t *)this + 35, (uint64_t)v50);
          }
          else
          {
            *(_DWORD *)(v32 + 8) = 0;
            *(_QWORD *)v32 = 0;
            *(_OWORD *)(v32 + 16) = v51;
            *(_OWORD *)(v32 + 32) = v52;
            v51 = 0uLL;
            v52 = 0uLL;
            *(_OWORD *)(v32 + 48) = v53;
            v53 = 0uLL;
            v33 = v32 + 64;
          }
          *((_QWORD *)this + 36) = v33;
          std::deque<int>::~deque[abi:ne180100](&v51);
          quasar::MovingAverage::init((quasar::MovingAverage *)(*((_QWORD *)this + 36) - 64), *((int *)this + 69));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v50[0].__locale_ = (std::locale::__imp *)&v67;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      else if (quasar::gLogLevel >= 4)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v56 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        *(_OWORD *)&v50[0].__locale_ = 0u;
        v51 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Invalid keyword-phrase line", 27);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
      }
      ++v15;
      v14 = *((_QWORD *)this + 16);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v14) >> 3) > v15);
  }
  if (quasar::gLogLevel > 4)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)&v50[0].__locale_ = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Number of keywords: ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v50);
  }
  if (!*((_QWORD *)this + 31))
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)&v50[0].__locale_ = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"DP contains no keywords for detection", 37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v50);
  }
  if (*((_BYTE *)this + 272))
  {
    if (*((_BYTE *)this + 216))
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v56 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      *(_OWORD *)&v50[0].__locale_ = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Error: Both, Viterbi and moving average decoding enabled, select only one", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v50);
    }
    if (quasar::gLogLevel >= 4)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v56 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      *(_OWORD *)&v50[0].__locale_ = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Moving average window size: ", 28);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
    }
  }
  if (*((int *)this + 76) >= 1)
    quasar::KeywordSpottingSyncDecoder::setupDiscBranch((const std::string *)this);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  MEMORY[0x1AF44CA70](v71.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v72);
}

void sub_1AE00CA10(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE00CA70);
}

void sub_1AE00CA20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE *v4;
  _BYTE v5[72];
  uint64_t v6;

  if (v3)
    operator delete(v3);
  v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if ((v5[47] & 0x80000000) != 0)
    operator delete(*(void **)(v1 + 304));
  if ((v5[71] & 0x80000000) != 0)
    operator delete(*(void **)(v1 + 328));
  std::fstream::~fstream(&v6);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::reset(quasar::KeywordSpottingSyncDecoder *this)
{
  quasar::AMKeywordDetection *v2;
  quasar::AMKeywordDetection *v3;
  quasar::MovingAverage *v4;
  quasar::MovingAverage *v5;
  uint64_t v6;
  uint64_t i;

  v2 = (quasar::AMKeywordDetection *)*((_QWORD *)this + 28);
  v3 = (quasar::AMKeywordDetection *)*((_QWORD *)this + 29);
  while (v2 != v3)
  {
    quasar::AMKeywordDetection::init(v2);
    v2 = (quasar::AMKeywordDetection *)((char *)v2 + 216);
  }
  v4 = (quasar::MovingAverage *)*((_QWORD *)this + 35);
  v5 = (quasar::MovingAverage *)*((_QWORD *)this + 36);
  while (v4 != v5)
  {
    quasar::MovingAverage::init(v4, *((int *)this + 69));
    v4 = (quasar::MovingAverage *)((char *)v4 + 64);
  }
  *((_DWORD *)this + 53) = 0;
  v6 = *((_QWORD *)this + 19);
  for (i = *((_QWORD *)this + 20); v6 != i; v6 += 224)
  {
    *(_DWORD *)(v6 + 28) = 0;
    *(_DWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 36) = 0xFF7FFFFF00000000;
  }
}

BOOL quasar::KeywordSpottingSyncDecoder::firstIsBetter(quasar::KeywordSpottingSyncDecoder *this, const quasar::Token *a2, const quasar::Token *a3)
{
  return *((float *)this + 10) > *((float *)a2 + 10);
}

uint64_t quasar::KeywordSpottingSyncDecoder::updateBestScores(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD v23[18];

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v5 = result;
    for (i = 0; 0x6DB6DB6DB6DB6DB7 * ((v2 - v3) >> 5) > i; ++i)
    {
      v7 = v3 + 224 * i;
      v8 = *(_QWORD *)(v5 + 152);
      v9 = (unsigned __int8 **)(v8 + 224 * i);
      v10 = *(unsigned __int8 *)(v7 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = (unsigned __int8 *)*(unsigned __int8 *)(v7 + 23);
      else
        v11 = *(unsigned __int8 **)(v7 + 8);
      v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = v9[1];
      if (v11 != v12)
        goto LABEL_23;
      if (v13 >= 0)
        v14 = (unsigned __int8 *)(v8 + 224 * i);
      else
        v14 = *v9;
      if ((v10 & 0x80) != 0)
      {
        result = memcmp(*(const void **)v7, v14, *(_QWORD *)(v7 + 8));
        if ((_DWORD)result)
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v7 + 23))
      {
        v15 = (unsigned __int8 *)(v3 + 224 * i);
        while (*v15 == *v14)
        {
          ++v15;
          ++v14;
          if (!--v10)
            goto LABEL_19;
        }
LABEL_23:
        memset(v23, 0, 272);
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Coding error. Keyword ", 22);
        v17 = *a2 + 224 * i;
        v18 = *(char *)(v17 + 23);
        if (v18 >= 0)
          v19 = *a2 + 224 * i;
        else
          v19 = *(_QWORD *)v17;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v17 + 23);
        else
          v20 = *(_QWORD *)(v17 + 8);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" != ", 4);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, *(_QWORD *)(v5 + 152) + 224 * i);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
      }
LABEL_19:
      if (*(float *)(v3 + 224 * i + 40) > *(float *)(v8 + 224 * i + 40))
      {
        result = quasar::Token::operator=(v8 + 224 * i, v3 + 224 * i);
        v3 = *a2;
        v2 = a2[1];
      }
    }
  }
  return result;
}

void quasar::KeywordSpottingSyncDecoder::addDiscriminativeScores(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3)
{
  int v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  float *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _OWORD v30[17];
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  int v35;

  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, &v34);
  v4 = *(_DWORD *)(a1 + 304);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = v35 - v4;
    do
    {
      v7 = v34;
      if (v5 >= v33)
      {
        v9 = v31;
        v10 = v5 - v31;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = (char *)v33 - (char *)v31;
        if (((char *)v33 - (char *)v31) >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v13);
          v9 = v31;
          v5 = v32;
        }
        else
        {
          v14 = 0;
        }
        v15 = (float *)&v14[4 * v10];
        *v15 = *(float *)(v7 + 4 * v6);
        v8 = v15 + 1;
        while (v5 != v9)
        {
          v16 = *((_DWORD *)v5-- - 1);
          *((_DWORD *)v15-- - 1) = v16;
        }
        v31 = v15;
        v32 = v8;
        v33 = (float *)&v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v5 = *(float *)(v34 + 4 * v6);
        v8 = v5 + 1;
      }
      v32 = v8;
      ++v6;
      v5 = v8;
    }
    while (v6 < v35);
  }
  v18 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  if (v17 != v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = quasar::gLogLevel;
    do
    {
      *(float *)(*(_QWORD *)(a1 + 152) + v20 + 40) = (float)(v31[*(int *)(*(_QWORD *)(a1 + 312) + 4 * v21)]
                                                           * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + v19) + 4))
                                                   + (float)(**(float **)(*(_QWORD *)(a1 + 336) + v19)
                                                           * *(float *)(*(_QWORD *)(a1 + 152) + v20 + 40));
      if (v22 >= 4)
      {
        memset(v30, 0, sizeof(v30));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"KWD: ", 5);
        v24 = *(_QWORD *)(a1 + 152) + v20;
        v25 = *(char *)(v24 + 23);
        if (v25 >= 0)
          v26 = *(_QWORD *)(a1 + 152) + v20;
        else
          v26 = *(_QWORD *)v24;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v24 + 23);
        else
          v27 = *(_QWORD *)(v24 + 8);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" CTC Score: ", 12);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" Disc Score: ", 13);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v30);
        v22 = quasar::gLogLevel;
        v18 = *(_QWORD *)(a1 + 128);
        v17 = *(_QWORD *)(a1 + 136);
      }
      ++v21;
      v20 += 224;
      v19 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3) > v21);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1AE00CF90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::KeywordSpottingSyncDecoder::getResultTokens(quasar::KeywordSpottingSyncDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  void **i;
  uint64_t (*v16)(__int128 *, uint64_t);
  uint64_t (*v17)(__int128 *, uint64_t);
  char *v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t (**v22)(__int128 *, uint64_t);
  char v23;
  __int128 v24;
  void *v25;
  _QWORD v26[6];
  __int128 v27;
  void *v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  void *v34;
  int v35;
  __int16 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  int v40;
  _QWORD v41[4];

  v41[1] = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v19, *((_QWORD *)this + 19), *((_QWORD *)this + 20), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 5));
  v2 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v20 - (char *)v19) >> 5));
  v16 = (uint64_t (*)(__int128 *, uint64_t))quasar::KeywordSpottingSyncDecoder::firstIsBetter;
  if (v20 == v19)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>((__int128 *)v19, v20, &v16, v3, 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * (((char *)v20 - (char *)v19) >> 5));
  v4 = v19;
  for (i = v20; v4 != i; v4 += 28)
  {
    v5 = *(_OWORD *)v4;
    v25 = v4[2];
    v24 = v5;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    v6 = *(_OWORD *)(v4 + 3);
    *(_QWORD *)((char *)&v26[1] + 6) = *(void **)((char *)v4 + 38);
    *(_OWORD *)v26 = v6;
    v7 = *((_OWORD *)v4 + 3);
    v26[5] = v4[8];
    *(_OWORD *)&v26[3] = v7;
    v4[7] = 0;
    v4[8] = 0;
    v4[6] = 0;
    v27 = *(_OWORD *)(v4 + 9);
    v28 = v4[11];
    v4[9] = 0;
    v4[10] = 0;
    v4[11] = 0;
    v8 = *((_OWORD *)v4 + 6);
    v30 = v4[14];
    v29 = v8;
    v4[13] = 0;
    v4[14] = 0;
    v4[12] = 0;
    v31 = *(_OWORD *)(v4 + 15);
    v32 = v4[17];
    v4[15] = 0;
    v4[16] = 0;
    v4[17] = 0;
    v9 = *((_OWORD *)v4 + 9);
    v34 = v4[20];
    v33 = v9;
    v4[19] = 0;
    v4[20] = 0;
    v4[18] = 0;
    v10 = *((_DWORD *)v4 + 42);
    v36 = *((_WORD *)v4 + 86);
    v35 = v10;
    v11 = *((_OWORD *)v4 + 11);
    v38 = v4[24];
    v37 = v11;
    v4[23] = 0;
    v4[24] = 0;
    v4[22] = 0;
    v12 = *(_OWORD *)(v4 + 25);
    v40 = *((_DWORD *)v4 + 54);
    v39 = v12;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v22 = &v16;
    v23 = 0;
    v16 = (uint64_t (*)(__int128 *, uint64_t))operator new(0xE0uLL);
    v17 = v16;
    v18 = (char *)v16 + 224;
    v17 = (uint64_t (*)(__int128 *, uint64_t))std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v18, (uint64_t)&v24, (uint64_t)v41, (uint64_t)v16);
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)&v16);
    v22 = &v16;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    quasar::Token::~Token((void **)&v24);
    if (*((_BYTE *)this + 218))
      break;
  }
  *(_QWORD *)&v24 = &v19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1AE00D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = a12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a21);
  a21 = (void **)&a16;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::updateProb(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3, uint64_t *a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *__p[3];
  uint64_t v13;
  int v14;

  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, &v13);
  v6 = *(_DWORD *)(a1 + 304);
  if (v6 >= v14 || v6 <= 0)
    v6 = 0;
  v8 = (v14 - v6);
  std::vector<float>::vector(__p, (int)v8);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = v13;
    v11 = __p[0];
    do
    {
      v11[v9] = *(_DWORD *)(v10 + 4 * v9);
      ++v9;
    }
    while (v8 != v9);
  }
  std::vector<std::vector<float>>::push_back[abi:ne180100](a4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AE00D390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordSpottingSyncDecoder::runSync(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  char *v5;
  char *v6;
  int v7;
  signed int i;
  BOOL IsValidFrame;
  signed int v10;
  kaldi::OnlineFeatureMatrix *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  signed int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  quasar::MovingAverage *v29;
  float v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  float Average;
  int v35;
  quasar::AMKeywordDetection *v36;
  quasar::AMKeywordDetection *v37;
  uint64_t BestStartFrame;
  float v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t data;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  kaldi::OnlineFeatureMatrix *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  _QWORD *v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t **v68;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  kaldi::OnlineFeatureMatrix *v76[2];
  void *v77[2];
  char v78;
  __int128 *v79[3];
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  std::string v84;
  std::locale v85;
  std::string *v86;
  unint64_t v87;
  void *v88[2];
  __int128 v89;
  __int128 v90;
  void *v91[2];
  __int128 v92;
  __int128 v93;
  void *v94[2];
  __int128 v95;
  __int128 v96;
  void *v97[2];
  __int128 v98;
  void *__p[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  kaldi::OnlineFeatureMatrix *v105[2];
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  void **v109[2];

  v2 = a2;
  v4 = *(void ***)(a2 + 88);
  v5 = (char *)*v4;
  v6 = (char *)v4[1];
  while (v6 != v5)
  {
    v6 -= 24;
    v88[0] = v6;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  }
  v4[1] = v5;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 56) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16));
  v106 = 0;
  v107 = 0;
  v108 = 0;
  for (i = *(_DWORD *)(a1 + 212); ; ++i)
  {
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v2 + 56), i, 1);
    v10 = *(_DWORD *)(a1 + 384);
    if (i >= v10 || !IsValidFrame)
      break;
    v12 = *(kaldi::OnlineFeatureMatrix **)(v2 + 64);
    v105[0] = *(kaldi::OnlineFeatureMatrix **)(v2 + 56);
    v105[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)((char *)v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    quasar::KeywordSpottingSyncDecoder::updateProb(a1, v105, i, (uint64_t *)&v106);
    if (v12)
    {
      v15 = (unint64_t *)((char *)v12 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        (*(void (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v12 + 16))(v12);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
      }
    }
  }
  v17 = *(_DWORD *)(a1 + 212);
  if (v17 < v10)
  {
    if (v107 == v106)
      goto LABEL_104;
    v18 = v107 - v106;
    v19 = -1431655765 * v18;
    if (-1431655765 * (int)v18 < 1)
      goto LABEL_79;
    if (*(_QWORD *)(a1 + 256) != (uint64_t)(v106[1] - *v106) >> 2)
    {
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      *(_OWORD *)__p = 0u;
      v100 = 0u;
      *(_OWORD *)v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      *(_OWORD *)v94 = 0u;
      *(_OWORD *)v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      *(_OWORD *)v88 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Dimension mismatch. Code or DP error", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v88);
    }
    if (v19 < 1)
    {
LABEL_79:
      v21 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v70 = -1431655765 * v18;
      v22 = (-1431655765 * v18);
      v74 = v7;
      if (v22 <= 1)
        v22 = 1;
      v72 = v22;
      v73 = v2;
      do
      {
        v75 = &v106[3 * v20];
        v85.__locale_ = 0;
        v86 = 0;
        v87 = 0;
        if (*(_BYTE *)(a1 + 272))
        {
          if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128))
          {
            v71 = v21;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = *(int *)(a1 + 212);
              v28 = *(int *)(a1 + 276);
              v29 = (quasar::MovingAverage *)(*(_QWORD *)(a1 + 280) + v23);
              quasar::MovingAverage::add(v29, *(float *)(*v75 + 4 * v26));
              v30 = *(float *)(a1 + 204);
              v31 = *(int *)(a1 + 212);
              v32 = *(__int128 **)(*(_QWORD *)(a1 + 128) + v24);
              if (*((char *)v32 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
              }
              else
              {
                v33 = *v32;
                v84.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v33;
              }
              Average = quasar::MovingAverage::getAverage(v29);
              std::string::basic_string[abi:ne180100]<0>(v82, "");
              std::string::basic_string[abi:ne180100]<0>(v80, "");
              memset(v79, 0, sizeof(v79));
              std::string::basic_string[abi:ne180100]<0>(v77, "");
              v35 = (int)(float)(v30 + (float)((v20 + v31) * v74));
              quasar::Token::Token((std::string *)v88, (__int128 *)&v84, (int)(float)(v30 + (float)(((v20 + v27 - v28) & ~((v20 + v27 - v28) >> 63)) * v74)), v35, v35, 0, 0, (__int128 *)v82, Average, (__int128 *)v80, v79, 0, (__int128 *)v77, 0, 0);
              quasar::Token::operator=(*(_QWORD *)(a1 + 152) + v25, (__int128 *)v88);
              if (SBYTE7(v100) < 0)
                operator delete(__p[0]);
              if (SBYTE7(v98) < 0)
                operator delete(v97[0]);
              v109[0] = (void **)&v95 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v109);
              if (SBYTE7(v95) < 0)
                operator delete(v94[0]);
              v109[0] = (void **)&v92 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v109);
              if (SBYTE7(v92) < 0)
                operator delete(v91[0]);
              if (SBYTE7(v89) < 0)
                operator delete(v88[0]);
              if (v78 < 0)
                operator delete(v77[0]);
              v77[0] = v79;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
              if (v81 < 0)
                operator delete(v80[0]);
              if (v83 < 0)
                operator delete(v82[0]);
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v84.__r_.__value_.__l.__data_);
              ++v26;
              v25 += 224;
              v24 += 24;
              v23 += 64;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3) > v26);
            v2 = v73;
            v21 = v71;
          }
        }
        else
        {
          v37 = *(quasar::AMKeywordDetection **)(a1 + 224);
          v36 = *(quasar::AMKeywordDetection **)(a1 + 232);
          while (v37 != v36)
          {
            quasar::AMKeywordDetection::propagate(v37, v75, *(_QWORD *)(a1 + 264));
            LODWORD(v82[0]) = 0;
            LODWORD(v82[0]) = quasar::AMKeywordDetection::getScore(v37);
            BestStartFrame = (uint64_t)quasar::AMKeywordDetection::getBestStartFrame(v37);
            if (BestStartFrame == -1)
              BestStartFrame = 0;
            v39 = *(float *)(a1 + 204);
            LODWORD(v80[0]) = (int)(float)(v39 + (float)(BestStartFrame * v74));
            LODWORD(v79[0]) = (int)(float)(v39 + (float)((v20 + *(_DWORD *)(a1 + 212)) * v74));
            kaldi::quasar::Vocab::OOvWord(v37, (std::string *)v88);
            LOBYTE(v77[0]) = 0;
            v40 = v86;
            if ((unint64_t)v86 >= v87)
            {
              v41 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int &,int &,int &,float &,BOOL>((uint64_t *)&v85, (uint64_t)v88, (int *)v80, (int *)v79, (int *)v79, (float *)v82, (unsigned __int8 *)v77);
            }
            else
            {
              std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>((uint64_t)&v87, v86, (uint64_t)v88, (int *)v80, (int *)v79, (int *)v79, (float *)v82, (unsigned __int8 *)v77);
              v41 = (std::string *)((char *)v40 + 224);
            }
            v2 = v73;
            v86 = v41;
            if (SBYTE7(v89) < 0)
              operator delete(v88[0]);
            if (*(float *)v82 > *(float *)(a1 + 200))
            {
              if (quasar::gLogLevel >= 4)
              {
                v42 = v86;
                v103 = 0u;
                v104 = 0u;
                v101 = 0u;
                v102 = 0u;
                *(_OWORD *)__p = 0u;
                v100 = 0u;
                *(_OWORD *)v97 = 0u;
                v98 = 0u;
                v95 = 0u;
                v96 = 0u;
                v93 = 0u;
                *(_OWORD *)v94 = 0u;
                *(_OWORD *)v91 = 0u;
                v92 = 0u;
                v89 = 0u;
                v90 = 0u;
                *(_OWORD *)v88 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
                v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"KWD ", 4);
                v44 = v42[-9].__r_.__value_.__s.__data_[15];
                if (v44 >= 0)
                  v45 = (uint64_t)&v42[-10].__r_.__value_.__r.__words[2];
                else
                  v45 = v42[-10].__r_.__value_.__r.__words[2];
                if (v44 >= 0)
                  data = v42[-9].__r_.__value_.__s.__data_[15];
                else
                  data = (uint64_t)v42[-9].__r_.__value_.__l.__data_;
                v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, data);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ", 1);
                v48 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ", 1);
                v49 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" ", 1);
                std::ostream::operator<<();
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v88);
              }
              ++v21;
            }
            v37 = (quasar::AMKeywordDetection *)((char *)v37 + 216);
          }
          quasar::KeywordSpottingSyncDecoder::updateBestScores(a1, (uint64_t *)&v85);
        }
        v88[0] = &v85;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
        ++v20;
      }
      while (v20 != v72);
      v17 = *(_DWORD *)(a1 + 212);
      v19 = v70;
    }
    *(_DWORD *)(a1 + 212) = v17 + v19;
    if (quasar::gLogLevel > 4)
    {
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      *(_OWORD *)__p = 0u;
      v100 = 0u;
      *(_OWORD *)v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      *(_OWORD *)v94 = 0u;
      *(_OWORD *)v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      *(_OWORD *)v88 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Frames seen so far: ", 20);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v88);
    }
    if (*(int *)(a1 + 304) >= 1)
    {
      v53 = *(kaldi::OnlineFeatureMatrix **)(v2 + 64);
      v76[0] = *(kaldi::OnlineFeatureMatrix **)(v2 + 56);
      v76[1] = v53;
      if (v53)
      {
        v54 = (unint64_t *)((char *)v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      quasar::KeywordSpottingSyncDecoder::addDiscriminativeScores(a1, v76, *(_DWORD *)(a1 + 212) - 1);
      if (v53)
      {
        v56 = (unint64_t *)((char *)v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          (*(void (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v53 + 16))(v53);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
        }
      }
    }
    if (v21 < 1)
    {
      if (quasar::gLogLevel >= 4)
      {
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        *(_OWORD *)__p = 0u;
        v100 = 0u;
        *(_OWORD *)v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        *(_OWORD *)v94 = 0u;
        *(_OWORD *)v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        *(_OWORD *)v88 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"no keywords detected", 20);
        std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
        v61 = std::locale::use_facet(&v85, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
        std::locale::~locale(&v85);
        std::ostream::put();
        std::ostream::flush();
LABEL_96:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v88);
        if (quasar::gLogLevel >= 4)
        {
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          *(_OWORD *)__p = 0u;
          v100 = 0u;
          *(_OWORD *)v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          *(_OWORD *)v94 = 0u;
          *(_OWORD *)v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          *(_OWORD *)v88 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"keyword search finished with ", 29);
          v62 = (_QWORD *)std::ostream::operator<<();
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" detected hypothesis.", 21);
          std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
          v64 = std::locale::use_facet(&v85, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
          std::locale::~locale(&v85);
          std::ostream::put();
          std::ostream::flush();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v88);
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      *(_OWORD *)__p = 0u;
      v100 = 0u;
      *(_OWORD *)v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      *(_OWORD *)v94 = 0u;
      *(_OWORD *)v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      *(_OWORD *)v88 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"keyword detected", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
      v59 = std::locale::use_facet(&v85, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_96;
    }
    if (*(_BYTE *)(a1 + 217))
    {
      v65 = *(_QWORD *)(a1 + 152);
      for (j = *(_QWORD *)(a1 + 160); v65 != j; v65 += 224)
      {
        *(_DWORD *)(v65 + 28) = 0;
        *(_DWORD *)(v65 + 32) = 0;
        *(_QWORD *)(v65 + 36) = 0xFF7FFFFF00000000;
      }
    }
    quasar::KeywordSpottingSyncDecoder::getResultTokens((quasar::KeywordSpottingSyncDecoder *)a1, (uint64_t *)v88);
    v67 = *(_QWORD *)(v2 + 88);
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v67);
    *(_OWORD *)v67 = *(_OWORD *)v88;
    *(_QWORD *)(v67 + 16) = v89;
    v88[0] = 0;
    v88[1] = 0;
    *(_QWORD *)&v89 = 0;
    v85.__locale_ = (std::locale::__imp *)v88;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (*(_DWORD *)(a1 + 212) >= *(_DWORD *)(a1 + 384))
    {
      v68 = *(uint64_t ***)(v2 + 88);
      if ((uint64_t **)(a1 + 392) != v68)
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 392, *v68, v68[1], 0xAAAAAAAAAAAAAAABLL * (v68[1] - *v68));
    }
    goto LABEL_104;
  }
  if (quasar::gLogLevel >= 4)
  {
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    *(_OWORD *)__p = 0u;
    v100 = 0u;
    *(_OWORD *)v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    *(_OWORD *)v94 = 0u;
    *(_OWORD *)v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v88 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"framesSeenSoFar: ", 17);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" hit numFramesToUse: ", 21);
    v51 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", use the tokens result from cutoff", 35);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v88);
  }
  v52 = *(_QWORD *)(v2 + 88);
  if (v52 != a1 + 392)
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v52, *(uint64_t **)(a1 + 392), *(uint64_t **)(a1 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 3));
LABEL_104:
  v88[0] = &v106;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  return 1;
}

void sub_1AE00DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,std::locale a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  __p = (void *)(v60 - 152);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>(__int128 *a1, void **a2, uint64_t (**a3)(__int128 *, uint64_t), uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  BOOL v22;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, void **a2, uint64_t (**a3)(void **, uint64_t))
{
  void **v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14[2];
  void *v15;
  _BYTE v16[22];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int128 __p;
  uint64_t v30;
  __int128 v31;
  int v32;
  void **v33[2];

  if ((void **)a1 != a2)
  {
    v5 = (void **)(a1 + 224);
    if ((void **)(a1 + 224) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, v8))
        {
          *(_OWORD *)v14 = *(_OWORD *)v9;
          v15 = v9[2];
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          *(_OWORD *)v16 = *(_OWORD *)(v8 + 248);
          *(_QWORD *)&v16[14] = *(_QWORD *)(v8 + 262);
          v17 = *(_OWORD *)(v8 + 272);
          v18 = *(_QWORD *)(v8 + 288);
          *(_QWORD *)(v8 + 272) = 0;
          *(_QWORD *)(v8 + 280) = 0;
          *(_QWORD *)(v8 + 288) = 0;
          v19 = *(_OWORD *)(v8 + 296);
          v20 = *(_QWORD *)(v8 + 312);
          *(_QWORD *)(v8 + 296) = 0;
          *(_QWORD *)(v8 + 304) = 0;
          *(_QWORD *)(v8 + 312) = 0;
          v21 = *(_OWORD *)(v8 + 320);
          v22 = *(_QWORD *)(v8 + 336);
          *(_QWORD *)(v8 + 320) = 0;
          *(_QWORD *)(v8 + 328) = 0;
          *(_QWORD *)(v8 + 336) = 0;
          v23 = *(_OWORD *)(v8 + 344);
          v24 = *(_QWORD *)(v8 + 360);
          *(_QWORD *)(v8 + 344) = 0;
          *(_QWORD *)(v8 + 352) = 0;
          *(_QWORD *)(v8 + 360) = 0;
          v25 = *(_OWORD *)(v8 + 368);
          v26 = *(_QWORD *)(v8 + 384);
          *(_QWORD *)(v8 + 368) = 0;
          *(_QWORD *)(v8 + 376) = 0;
          *(_QWORD *)(v8 + 384) = 0;
          v27 = *(_DWORD *)(v8 + 392);
          v28 = *(_WORD *)(v8 + 396);
          v30 = *(_QWORD *)(v8 + 416);
          __p = *(_OWORD *)(v8 + 400);
          *(_QWORD *)(v8 + 400) = 0;
          *(_QWORD *)(v8 + 408) = 0;
          *(_QWORD *)(v8 + 416) = 0;
          v10 = *(_OWORD *)(v8 + 424);
          v32 = *(_DWORD *)(v8 + 440);
          v11 = v7;
          v31 = v10;
          while (1)
          {
            quasar::Token::operator=(a1 + v11 + 224, (__int128 *)(a1 + v11));
            if (!v11)
              break;
            v12 = (*a3)(v14, a1 + v11 - 224);
            v11 -= 224;
            if ((v12 & 1) == 0)
            {
              v13 = a1 + v11 + 224;
              goto LABEL_10;
            }
          }
          v13 = a1;
LABEL_10:
          quasar::Token::operator=(v13, (__int128 *)v14);
          if (SHIBYTE(v30) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v26) < 0)
            operator delete((void *)v25);
          v33[0] = (void **)&v23;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v33);
          if (SHIBYTE(v22) < 0)
            operator delete((void *)v21);
          v33[0] = (void **)&v19;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
          if (SHIBYTE(v18) < 0)
            operator delete((void *)v17);
          if (SHIBYTE(v15) < 0)
            operator delete(v14[0]);
        }
        v5 = v9 + 28;
        v7 += 224;
        v8 = (uint64_t)v9;
      }
      while (v9 + 28 != a2);
    }
  }
}

void sub_1AE00E658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(void **a1, void **a2, uint64_t (**a3)(void **, uint64_t))
{
  void **v4;
  void **v5;
  void **v7;
  __int128 v8;
  void *v9[2];
  void *v10;
  _BYTE v11[22];
  __int128 v12;
  void *v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  void *v21;
  int v22;
  __int16 v23;
  __int128 __p;
  void *v25;
  __int128 v26;
  int v27;
  void **v28[2];

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 28;
    if (a1 + 28 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          *(_OWORD *)v9 = *(_OWORD *)v7;
          v10 = v7[2];
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          *(_OWORD *)v11 = *(_OWORD *)(v4 + 31);
          *(_QWORD *)&v11[14] = *(void **)((char *)v4 + 262);
          v12 = *((_OWORD *)v4 + 17);
          v13 = v4[36];
          v4[34] = 0;
          v4[35] = 0;
          v4[36] = 0;
          v14 = *(_OWORD *)(v4 + 37);
          v15 = v4[39];
          v4[37] = 0;
          v4[38] = 0;
          v4[39] = 0;
          v16 = *((_OWORD *)v4 + 20);
          v17 = v4[42];
          v4[40] = 0;
          v4[41] = 0;
          v4[42] = 0;
          v18 = *(_OWORD *)(v4 + 43);
          v19 = v4[45];
          v4[43] = 0;
          v4[44] = 0;
          v4[45] = 0;
          v20 = *((_OWORD *)v4 + 23);
          v21 = v4[48];
          v4[46] = 0;
          v4[47] = 0;
          v4[48] = 0;
          v22 = *((_DWORD *)v4 + 98);
          v23 = *((_WORD *)v4 + 198);
          v25 = v4[52];
          __p = *((_OWORD *)v4 + 25);
          v4[50] = 0;
          v4[51] = 0;
          v4[52] = 0;
          v8 = *(_OWORD *)(v4 + 53);
          v27 = *((_DWORD *)v4 + 110);
          v26 = v8;
          do
          {
            quasar::Token::operator=((uint64_t)(v4 + 28), (__int128 *)v4);
            v4 -= 28;
          }
          while (((*a3)(v9, (uint64_t)v4) & 1) != 0);
          quasar::Token::operator=((uint64_t)(v4 + 28), (__int128 *)v9);
          if (SHIBYTE(v25) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v21) < 0)
            operator delete((void *)v20);
          v28[0] = (void **)&v18;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v28);
          if (SHIBYTE(v17) < 0)
            operator delete((void *)v16);
          v28[0] = (void **)&v14;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
          if (SHIBYTE(v13) < 0)
            operator delete((void *)v12);
          if (SHIBYTE(v10) < 0)
            operator delete(v9[0]);
        }
        v5 = v7 + 28;
        v4 = v7;
      }
      while (v7 + 28 != a2);
    }
  }
}

void sub_1AE00E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 *v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::swap[abi:ne180100]<quasar::Token>(a1, a2);
    if (!(*a4)(a3, (uint64_t)a2))
      return 1;
    v10 = (uint64_t)a2;
    v11 = a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::Token>(v10, v11);
    return 2;
  }
  std::swap[abi:ne180100]<quasar::Token>(a1, a3);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(void **, unint64_t))
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  void *v15[2];
  uint64_t v16;
  _BYTE v17[22];
  void *v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  int v28;
  __int16 v29;
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  int v33;
  void **v34;

  v4 = a2;
  *(_OWORD *)v15 = *(_OWORD *)a1;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v17 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v17[14] = *(_QWORD *)(a1 + 38);
  *(_OWORD *)v18 = *(_OWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v20 = *(_OWORD *)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = *(_OWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)v22 = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v24 = *(_OWORD *)(a1 + 120);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v7 = *(_OWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)v26 = v7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v8 = *(_DWORD *)(a1 + 168);
  v29 = *(_WORD *)(a1 + 172);
  v28 = v8;
  v9 = *(_OWORD *)(a1 + 176);
  v31 = *(_QWORD *)(a1 + 192);
  *(_OWORD *)__p = v9;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v10 = *(_OWORD *)(a1 + 200);
  v33 = *(_DWORD *)(a1 + 216);
  v32 = v10;
  if (((*a3)(v15, (unint64_t)(a2 - 14)) & 1) != 0)
  {
    v11 = a1;
    do
      v11 += 224;
    while (((*a3)(v15, v11) & 1) == 0);
  }
  else
  {
    v12 = a1 + 224;
    do
    {
      v11 = v12;
      if (v12 >= (unint64_t)v4)
        break;
      v13 = (*a3)(v15, v12);
      v12 = v11 + 224;
    }
    while (!v13);
  }
  if (v11 < (unint64_t)v4)
  {
    do
      v4 -= 14;
    while (((*a3)(v15, (unint64_t)v4) & 1) != 0);
  }
  while (v11 < (unint64_t)v4)
  {
    std::swap[abi:ne180100]<quasar::Token>(v11, v4);
    do
      v11 += 224;
    while (!(*a3)(v15, v11));
    do
      v4 -= 14;
    while (((*a3)(v15, (unint64_t)v4) & 1) != 0);
  }
  if (v11 - 224 != a1)
    quasar::Token::operator=(a1, (__int128 *)(v11 - 224));
  quasar::Token::operator=(v11 - 224, (__int128 *)v15);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  v34 = (void **)&v24;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  v34 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return v11;
}

void sub_1AE00EC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Token::~Token(&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t, void **))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *v15;
  void *v17[2];
  uint64_t v18;
  _BYTE v19[22];
  void *v20[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  int v30;
  __int16 v31;
  void *__p[2];
  uint64_t v33;
  __int128 v34;
  int v35;
  void **v36;

  v6 = 0;
  *(_OWORD *)v17 = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v19 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v19[14] = *(_QWORD *)(a1 + 38);
  *(_OWORD *)v20 = *(_OWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v22 = *(_OWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(_OWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)v24 = v7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v26 = *(_OWORD *)(a1 + 120);
  v27 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_OWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)v28 = v8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v31 = *(_WORD *)(a1 + 172);
  v30 = *(_DWORD *)(a1 + 168);
  v9 = *(_OWORD *)(a1 + 176);
  v33 = *(_QWORD *)(a1 + 192);
  *(_OWORD *)__p = v9;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v10 = *(_OWORD *)(a1 + 200);
  v35 = *(_DWORD *)(a1 + 216);
  v34 = v10;
  do
  {
    v11 = (*a3)(a1 + v6 + 224, v17);
    v6 += 224;
  }
  while ((v11 & 1) != 0);
  v12 = a1 + v6;
  if (v6 == 224)
  {
    do
    {
      if (v12 >= (unint64_t)a2)
        break;
      a2 -= 14;
    }
    while (((*a3)((uint64_t)a2, v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 14;
    while (!(*a3)((uint64_t)a2, v17));
  }
  if (v12 >= (unint64_t)a2)
  {
    v15 = (__int128 *)(v12 - 224);
  }
  else
  {
    v13 = a1 + v6;
    v14 = a2;
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v13, v14);
      do
        v13 += 224;
      while (((*a3)(v13, v17) & 1) != 0);
      do
        v14 -= 14;
      while (!(*a3)((uint64_t)v14, v17));
    }
    while (v13 < (unint64_t)v14);
    v15 = (__int128 *)(v13 - 224);
  }
  if (v15 != (__int128 *)a1)
    quasar::Token::operator=(a1, v15);
  quasar::Token::operator=((uint64_t)v15, (__int128 *)v17);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  v36 = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  v36 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  return v15;
}

void sub_1AE00EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Token::~Token(&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _BYTE v22[22];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  __int128 __p;
  uint64_t v36;
  __int128 v37;
  int v38;
  void **v39[2];

  v6 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)a1) >> 5);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 14, (uint64_t)a1))
        std::swap[abi:ne180100]<quasar::Token>((uint64_t)a1, a2 - 14);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a2 - 14, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a2 - 14, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a1 + 42, a2 - 14, a3);
      return 1;
    default:
      v8 = a1 + 28;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a3);
      v9 = a1 + 42;
      if (a1 + 42 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, (uint64_t)v8))
    {
      *(_OWORD *)v20 = *v9;
      v21 = *((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      *(_OWORD *)v22 = *(__int128 *)((char *)v9 + 24);
      *(_QWORD *)&v22[14] = *(_QWORD *)((char *)v9 + 38);
      v23 = v9[3];
      v24 = *((_QWORD *)v9 + 8);
      *((_QWORD *)v9 + 6) = 0;
      *((_QWORD *)v9 + 7) = 0;
      v25 = *(__int128 *)((char *)v9 + 72);
      v26 = *((_QWORD *)v9 + 11);
      *((_QWORD *)v9 + 8) = 0;
      *((_QWORD *)v9 + 9) = 0;
      *((_QWORD *)v9 + 10) = 0;
      *((_QWORD *)v9 + 11) = 0;
      v12 = v9[6];
      v28 = *((_QWORD *)v9 + 14);
      v27 = v12;
      *((_QWORD *)v9 + 12) = 0;
      *((_QWORD *)v9 + 13) = 0;
      v29 = *(__int128 *)((char *)v9 + 120);
      v30 = *((_QWORD *)v9 + 17);
      *((_QWORD *)v9 + 14) = 0;
      *((_QWORD *)v9 + 15) = 0;
      *((_QWORD *)v9 + 16) = 0;
      *((_QWORD *)v9 + 17) = 0;
      v13 = v9[9];
      v32 = *((_QWORD *)v9 + 20);
      v31 = v13;
      *((_QWORD *)v9 + 18) = 0;
      *((_QWORD *)v9 + 19) = 0;
      *((_QWORD *)v9 + 20) = 0;
      v14 = *((_DWORD *)v9 + 42);
      v34 = *((_WORD *)v9 + 86);
      v33 = v14;
      v15 = v9[11];
      v36 = *((_QWORD *)v9 + 24);
      __p = v15;
      *((_QWORD *)v9 + 22) = 0;
      *((_QWORD *)v9 + 23) = 0;
      *((_QWORD *)v9 + 24) = 0;
      v16 = *(__int128 *)((char *)v9 + 200);
      v38 = *((_DWORD *)v9 + 54);
      v17 = v10;
      v37 = v16;
      while (1)
      {
        quasar::Token::operator=((uint64_t)a1 + v17 + 672, (__int128 *)((char *)a1 + v17 + 448));
        if (v17 == -448)
          break;
        v18 = (*a3)((__int128 *)v20, (uint64_t)a1 + v17 + 224);
        v17 -= 224;
        if ((v18 & 1) == 0)
        {
          v19 = (uint64_t)a1 + v17 + 672;
          goto LABEL_12;
        }
      }
      v19 = (uint64_t)a1;
LABEL_12:
      quasar::Token::operator=(v19, (__int128 *)v20);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)v31);
      v39[0] = (void **)&v29;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v39);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v39[0] = (void **)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v39);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      if (++v11 == 8)
        return v9 + 14 == a2;
    }
    v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2)
      return 1;
  }
}

void sub_1AE00F228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, uint64_t))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a2, a3, a5);
  if ((*a5)(a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a3, a4);
    if ((*a5)(a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
      if ((*a5)(a2, a1))
        std::swap[abi:ne180100]<quasar::Token>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, uint64_t))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a4, a5);
    if ((*a6)(a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<quasar::Token>((uint64_t)a3, a4);
      if ((*a6)(a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
        if ((*a6)(a2, a1))
          std::swap[abi:ne180100]<quasar::Token>(a1, a2);
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,quasar::Token*>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 224;
    if ((char *)a2 - (char *)a1 >= 225)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a4, v9, v12);
        v12 -= 224;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)((__int128 *)v14, (uint64_t)a1))
        {
          std::swap[abi:ne180100]<quasar::Token>(v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 224;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 225)
    {
      v15 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 224;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  int64_t v7;
  int64_t v10;
  __int128 *v11;
  int64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _BYTE v22[22];
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  int v33;
  __int16 v34;
  void *__p[2];
  uint64_t v36;
  __int128 v37;
  int v38;
  void **v39[2];

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - a1) >> 5))
    {
      v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 5)) | 1;
      v11 = (__int128 *)(a1 + 224 * v10);
      v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 5) + 2;
      if (v12 < a3 && (*a2)((__int128 *)(a1 + 224 * v10), (uint64_t)(v11 + 14)))
      {
        v11 += 14;
        v10 = v12;
      }
      if (((*a2)(v11, v5) & 1) == 0)
      {
        *(_OWORD *)v20 = *(_OWORD *)v5;
        v21 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = 0;
        *(_OWORD *)v22 = *(_OWORD *)(v5 + 24);
        *(_QWORD *)&v22[14] = *(_QWORD *)(v5 + 38);
        *(_OWORD *)v23 = *(_OWORD *)(v5 + 48);
        v24 = *(_QWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 56) = 0;
        v25 = *(_OWORD *)(v5 + 72);
        v26 = *(_QWORD *)(v5 + 88);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        v13 = *(_OWORD *)(v5 + 96);
        v28 = *(_QWORD *)(v5 + 112);
        *(_OWORD *)v27 = v13;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = 0;
        v29 = *(_OWORD *)(v5 + 120);
        v30 = *(_QWORD *)(v5 + 136);
        *(_QWORD *)(v5 + 112) = 0;
        *(_QWORD *)(v5 + 120) = 0;
        *(_QWORD *)(v5 + 128) = 0;
        *(_QWORD *)(v5 + 136) = 0;
        v14 = *(_OWORD *)(v5 + 144);
        v32 = *(_QWORD *)(v5 + 160);
        *(_OWORD *)v31 = v14;
        *(_QWORD *)(v5 + 144) = 0;
        *(_QWORD *)(v5 + 152) = 0;
        *(_QWORD *)(v5 + 160) = 0;
        v15 = *(_DWORD *)(v5 + 168);
        v34 = *(_WORD *)(v5 + 172);
        v33 = v15;
        v16 = *(_OWORD *)(v5 + 176);
        v36 = *(_QWORD *)(v5 + 192);
        *(_OWORD *)__p = v16;
        *(_QWORD *)(v5 + 176) = 0;
        *(_QWORD *)(v5 + 184) = 0;
        *(_QWORD *)(v5 + 192) = 0;
        v17 = *(_OWORD *)(v5 + 200);
        v38 = *(_DWORD *)(v5 + 216);
        v37 = v17;
        do
        {
          v18 = (uint64_t)v11;
          quasar::Token::operator=(v5, v11);
          if (v7 < v10)
            break;
          v19 = (2 * v10) | 1;
          v11 = (__int128 *)(a1 + 224 * v19);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v19;
          }
          else if ((*a2)((__int128 *)(a1 + 224 * v19), (uint64_t)(v11 + 14)))
          {
            v11 += 14;
          }
          else
          {
            v10 = v19;
          }
          v5 = v18;
        }
        while (!(*a2)(v11, (uint64_t)v20));
        quasar::Token::operator=(v18, (__int128 *)v20);
        if (SHIBYTE(v36) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(v31[0]);
        v39[0] = (void **)&v29;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v39);
        if (SHIBYTE(v28) < 0)
          operator delete(v27[0]);
        v39[0] = (void **)&v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v39);
        if (SHIBYTE(v24) < 0)
          operator delete(v23[0]);
        if (SHIBYTE(v21) < 0)
          operator delete(v20[0]);
      }
    }
  }
}

void sub_1AE00F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  void *v15[2];
  uint64_t v16;
  _BYTE v17[22];
  void *v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  int v28;
  __int16 v29;
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  int v33;
  void **v34;

  if (a4 >= 2)
  {
    *(_OWORD *)v15 = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_OWORD *)v17 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)&v17[14] = *(_QWORD *)(a1 + 38);
    *(_OWORD *)v18 = *(_OWORD *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v20 = *(_OWORD *)(a1 + 72);
    v21 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v7 = *(_OWORD *)(a1 + 96);
    v23 = *(_QWORD *)(a1 + 112);
    *(_OWORD *)v22 = v7;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v24 = *(_OWORD *)(a1 + 120);
    v25 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v8 = *(_OWORD *)(a1 + 144);
    v27 = *(_QWORD *)(a1 + 160);
    *(_OWORD *)v26 = v8;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v9 = *(_DWORD *)(a1 + 168);
    v29 = *(_WORD *)(a1 + 172);
    v28 = v9;
    v10 = *(_OWORD *)(a1 + 176);
    v31 = *(_QWORD *)(a1 + 192);
    *(_OWORD *)__p = v10;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    v11 = *(_OWORD *)(a1 + 200);
    v33 = *(_DWORD *)(a1 + 216);
    v32 = v11;
    v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a3, a4);
    v13 = v12;
    v14 = (__int128 *)(a2 - 224);
    if (v12 == v14)
    {
      quasar::Token::operator=((uint64_t)v12, (__int128 *)v15);
    }
    else
    {
      quasar::Token::operator=((uint64_t)v12, v14);
      quasar::Token::operator=((uint64_t)v14, (__int128 *)v15);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, (uint64_t)(v13 + 14), (uint64_t (**)(__int128 *, void **))a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - a1 + 224) >> 5));
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
    v34 = (void **)&v24;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
    v34 = (void **)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
  }
}

void sub_1AE00F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Token::~Token(&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 224 * v6 + 224);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 224 * v6 + 224, a1 + 224 * v6 + 448))
    {
      v9 += 14;
      v10 = v11;
    }
    quasar::Token::operator=(a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, void **), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  _BYTE v19[22];
  void *v20[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  int v30;
  __int16 v31;
  void *__p[2];
  uint64_t v33;
  __int128 v34;
  int v35;
  void **v36;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (__int128 *)(a1 + 224 * (v4 >> 1));
    v10 = a2 - 224;
    if ((*a3)(v9, (void **)(a2 - 224)))
    {
      *(_OWORD *)v17 = *(_OWORD *)v10;
      v18 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      *(_OWORD *)v19 = *(_OWORD *)(a2 - 200);
      *(_QWORD *)&v19[14] = *(_QWORD *)(a2 - 186);
      *(_OWORD *)v20 = *(_OWORD *)(a2 - 176);
      v21 = *(_QWORD *)(a2 - 160);
      *(_QWORD *)(a2 - 176) = 0;
      *(_QWORD *)(a2 - 168) = 0;
      v22 = *(_OWORD *)(a2 - 152);
      v23 = *(_QWORD *)(a2 - 136);
      *(_QWORD *)(a2 - 160) = 0;
      *(_QWORD *)(a2 - 152) = 0;
      *(_QWORD *)(a2 - 144) = 0;
      *(_QWORD *)(a2 - 136) = 0;
      v11 = *(_OWORD *)(a2 - 128);
      v25 = *(_QWORD *)(a2 - 112);
      *(_OWORD *)v24 = v11;
      *(_QWORD *)(a2 - 128) = 0;
      *(_QWORD *)(a2 - 120) = 0;
      v26 = *(_OWORD *)(a2 - 104);
      v27 = *(_QWORD *)(a2 - 88);
      *(_QWORD *)(a2 - 112) = 0;
      *(_QWORD *)(a2 - 104) = 0;
      *(_QWORD *)(a2 - 96) = 0;
      *(_QWORD *)(a2 - 88) = 0;
      v12 = *(_OWORD *)(a2 - 80);
      v29 = *(_QWORD *)(a2 - 64);
      *(_OWORD *)v28 = v12;
      *(_QWORD *)(a2 - 80) = 0;
      *(_QWORD *)(a2 - 72) = 0;
      *(_QWORD *)(a2 - 64) = 0;
      v13 = *(_DWORD *)(a2 - 56);
      v31 = *(_WORD *)(a2 - 52);
      v30 = v13;
      v14 = *(_OWORD *)(a2 - 48);
      v33 = *(_QWORD *)(a2 - 32);
      *(_OWORD *)__p = v14;
      *(_QWORD *)(a2 - 48) = 0;
      *(_QWORD *)(a2 - 40) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      v15 = *(_OWORD *)(a2 - 24);
      v35 = *(_DWORD *)(a2 - 8);
      v34 = v15;
      do
      {
        v16 = (uint64_t)v9;
        quasar::Token::operator=(v10, v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 224 * v8);
        v10 = v16;
      }
      while (((*a3)(v9, v17) & 1) != 0);
      quasar::Token::operator=(v16, (__int128 *)v17);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v29) < 0)
        operator delete(v28[0]);
      v36 = (void **)&v26;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      v36 = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
    }
  }
}

void sub_1AE00FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Token::~Token(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int &,int &,int &,float &,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string::value_type *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9)
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v16 = 0x124924924924924;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = (std::string *)&v17[224 * v8];
  v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1AE00FE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  void *__p[2];
  char v15;
  __int128 *v16[3];
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  __int128 v21;
  uint64_t v22;

  v21 = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  memset(v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v21, v9, v10, v11, v13 != 0, 0, (__int128 *)v19, v12, (__int128 *)v17, v16, 0, (__int128 *)__p, 0, 0);
  if (v15 < 0)
    operator delete(__p[0]);
  __p[0] = v16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
}

void sub_1AE00FF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void kaldi::ReadPhoneMap(uint64_t a1, std::vector<int> *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  int *begin;
  _DWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  std::string::size_type v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string __p;
  std::vector<int>::value_type __x[2];
  std::string v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  a2->__end_ = a2->__begin_;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v30 = *(std::string *)a1;
  v4 = kaldi::ReadVectorVectorSimple<int>((uint64_t)&v30, &v31);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Error reading phone map from ", 29);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v27 = *(std::string *)a1;
    kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
  }
  v5 = v31;
  v6 = v32;
  if (v32 == v31)
  {
    begin = a2->__begin_;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(unsigned int **)(v5 + v7);
      if (*(_QWORD *)(v5 + v7 + 8) - (_QWORD)v9 != 8 || (v10 = *v9, (int)v10 < 1) || (v11 = v9[1], v11 < 1))
      {
LABEL_21:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Error reading phone map from ", 29);
        if (*(char *)(a1 + 23) < 0)
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          v26 = *(std::string *)a1;
        kaldi::PrintableRxfilename((uint64_t)&v26, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &__p;
        else
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v16 = __p.__r_.__value_.__l.__size_;
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (bad line ", 11);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      begin = a2->__begin_;
      if ((int)v10 >= (int)((unint64_t)((char *)a2->__end_ - (char *)a2->__begin_) >> 2))
      {
        __x[0] = -1;
        std::vector<int>::resize(a2, v10 + 1, __x);
        v5 = v31;
        v6 = v32;
        v13 = *(_DWORD **)(v31 + v7);
        begin = a2->__begin_;
        LODWORD(v10) = *v13;
        v11 = v13[1];
      }
      else if (begin[v10] != -1)
      {
        goto LABEL_21;
      }
      begin[(int)v10] = v11;
      ++v8;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
  }
  if (begin == a2->__end_)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Read empty phone map from ", 26);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v25 = *(std::string *)a1;
    kaldi::PrintableRxfilename((uint64_t)&v25, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &__p;
    else
      v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v24 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v23, v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
  }
  *(_QWORD *)__x = &v31;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
}

void SkipNgram::SkipNgram(SkipNgram *this, Vocab *a2, int a3)
{
  uint64_t v5;
  unsigned int v6;

  Ngram::Ngram(this, a2, a3);
  *(_QWORD *)v5 = &off_1E5D17F68;
  *(_DWORD *)(v5 + 192) = 100;
  *(_OWORD *)(v5 + 200) = xmmword_1AE192C70;
  v6 = (*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 72))(a2);
  LHash<unsigned int,double>::LHash((_QWORD *)this + 27, v6);
}

void sub_1AE01048C(_Unwind_Exception *a1)
{
  LM *v1;

  *(_QWORD *)v1 = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)v1 + 152);
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

_DWORD **SkipNgram::memStats(SkipNgram *this, MemStats *a2)
{
  Ngram::memStats(this, a2);
  return LHash<unsigned int,double>::memStats((_DWORD **)this + 27, (uint64_t *)a2);
}

void SkipNgram::wordProb(SkipNgram *this, const unsigned int *a2, Vocab *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  double *v10;
  double *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  double v20;
  double v21;
  double v22;
  char v23;

  v6 = Vocab::length((uint64_t)a3, a2);
  if (!*(_BYTE *)(*(uint64_t (**)(SkipNgram *))(*(_QWORD *)this + 344))(this)
    || *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3)) != (_DWORD)a2
    && (*((_DWORD *)this + 44) < 2u
     || (v7 = *(_DWORD *)a3,
         v7 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3)))
     && (*((_DWORD *)this + 44) < 3u
      || (v8 = *((_DWORD *)a3 + 2),
          v8 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3))))))
  {
    if (v6)
    {
      v9 = *(_DWORD *)a3;
      v23 = 0;
      v10 = (double *)LHash<unsigned int,double>::find((_DWORD **)this + 27, v9, &v23);
      if (v10 && (v11 = v10, *v10 != 0.0))
      {
        v14 = *((_DWORD *)this + 44) - 1;
        if (v6 - 1 >= v14)
          v15 = v14;
        else
          v15 = v6 - 1;
        v16 = Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3 + 1, v15);
        v17 = *((_DWORD *)this + 44) - 1;
        if (v6 >= v17)
          v18 = v17;
        else
          v18 = v6;
        v19 = Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, v18);
        v20 = *v11;
        v21 = 0.0;
        v22 = 0.0;
        if (v16 != -INFINITY)
          v22 = exp(v16 * 2.30258509);
        if (v19 != -INFINITY)
          v21 = exp(v19 * 2.30258509);
        log10((1.0 - v20) * v21 + v20 * v22);
      }
      else
      {
        v12 = *((_DWORD *)this + 44) - 1;
        if (v6 >= v12)
          v13 = v12;
        else
          v13 = v6;
        Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, v13);
      }
    }
    else
    {
      Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, 0);
    }
  }
}

uint64_t SkipNgram::read(SkipNgram *this, File *a2, unsigned int a3)
{
  uint64_t result;
  char *v6;
  char **v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  std::locale v17;
  char v18[8];
  char *__s;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = Ngram::read(this, a2, a3);
  if ((_DWORD)result)
  {
    v6 = File::getline(a2);
    if (v6)
    {
      while (1)
      {
        *(_QWORD *)v18 = 0;
        __s = 0;
        v20 = 0;
        if (Vocab::parseWords((Vocab *)v6, v18, (const char **)3, v7) != 2)
        {
          v10 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"illegal skip prob line\n", 23);
          return 0;
        }
        v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), *(_QWORD *)v18);
        v16 = 0;
        if (!parseProb(__s, (double *)&v16))
          break;
        v9 = v16;
        LOBYTE(v17.__locale_) = 0;
        *(_QWORD *)LHash<unsigned int,double>::insert((_QWORD *)this + 27, v8, &v17) = v9;
        v6 = File::getline(a2);
        if (!v6)
          return 1;
      }
      v11 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"bad skip prob value ", 20);
      v13 = strlen(__s);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__s, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
      v15 = std::locale::use_facet(&v17, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1AE0108D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t SkipNgram::write(Vocab **this, File *a2)
{
  uint64_t result;
  uint64_t (*v5)(Vocab *, uint64_t);
  double *v6;
  const char *v7;
  unsigned int v8;
  _BYTE v9[32];

  result = Ngram::write((Ngram *)this, a2);
  if ((_DWORD)result)
  {
    File::fprintf(a2, "\n");
    v5 = Vocab::compareIndex(this[3]);
    LHashIter<unsigned int,double>::LHashIter(v9, this + 27, v5);
    v8 = 0;
    while (1)
    {
      v6 = (double *)LHashIter<unsigned int,double>::next((uint64_t)v9, &v8);
      if (!v6)
        break;
      v7 = (const char *)(*(uint64_t (**)(Vocab *, _QWORD))(*(_QWORD *)this[3] + 32))(this[3], v8);
      File::fprintf(a2, "%s %lg\n", v7, *v6);
    }
    File::fprintf(a2, "\n");
    LHashIter<unsigned int,double>::~LHashIter((uint64_t)v9);
    return 1;
  }
  return result;
}

void sub_1AE0109C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void SkipNgram::~SkipNgram(SkipNgram *this)
{
  *(_QWORD *)this = &off_1E5D17F68;
  LHash<unsigned int,double>::~LHash((_QWORD *)this + 27);
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17F68;
  LHash<unsigned int,double>::~LHash((_QWORD *)this + 27);
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  if (*((_QWORD *)this + 41))
    NLTokenizerRelease();
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  quasar::TokenizerOptions::~TokenizerOptions((quasar::TokenizerBlock *)((char *)this + 8));
}

void quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 336));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 336));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 336));
}

{
  quasar::TokenizerBlock::~TokenizerBlock((quasar::TokenizerBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t quasar::TokenizerBlock::init(quasar::TokenizerBlock *this)
{
  uint64_t result;

  quasar::Bitmap::~Bitmap(this);
  result = NLTokenizerCreate();
  *((_QWORD *)this + 41) = result;
  return result;
}

uint64_t `virtual thunk to'quasar::TokenizerBlock::init(quasar::TokenizerBlock *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 88);
  quasar::Bitmap::~Bitmap(this);
  result = NLTokenizerCreate();
  *((_QWORD *)v1 + 41) = result;
  return result;
}

_QWORD *quasar::TokenizerOptions::options@<X0>(quasar::TokenizerOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 160;
  result[1] = (char *)this + 16;
  *a2 = result;
  return result;
}

void quasar::TokenizerBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int Type;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28[2];
  char v29;
  _BYTE v30[64];
  std::string v31;
  __int16 v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  char v44;
  _BYTE v45[64];
  uint64_t v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = a1;
  v5 = *a3;
  v6 = a3[1];
  if (v5 == v6)
  {
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v50, v5, v6, 0x8F5C28F5C28F5C29 * ((v6 - v5) >> 3));
    v7 = v50;
    v21 = v51;
    if (v50 != v51)
    {
      v20 = v4 + 21;
      v8 = v4 + 3;
      v19 = v4;
      do
      {
        quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v48, (quasar::TranslationPhraseInternal *)v7);
        v9 = quasar::OptionValue<std::string>::value(v20);
        quasar::TokenizerBlock::tokenize((const char *)v48, v9, &v46);
        quasar::PTree::PTree((quasar::PTree *)v45);
        std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer input");
        quasar::PTree::PTree(&v31, v48);
        quasar::PTree::putChild((uint64_t)v45, (uint64_t)__p, (uint64_t)&v31, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v31);
        if (v44 < 0)
          operator delete(__p[0]);
        quasar::PTree::PTree((quasar::PTree *)__p);
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v8))
        {
          v11 = *(_QWORD *)(v7 + 136);
          for (i = *(_QWORD *)(v7 + 144);
                i != v11;
                std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v7 + 152, i))
          {
            i -= 136;
          }
          *(_QWORD *)(v7 + 144) = v11;
        }
        v12 = v46;
        for (j = v47; v12 != j; v12 += 32)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          memset(&v31, 0, sizeof(v31));
          v32 = 0;
          v36 = 3212836864;
          v37 = -1;
          v38 = 0u;
          v39 = 0u;
          v40 = 0u;
          v41 = 0;
          v42 = -1;
          std::string::operator=(&v31, (const std::string *)v12);
          LOBYTE(v32) = 1;
          if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v8))
          {
            v14 = *(_QWORD *)(v7 + 144);
            if (v14 >= *(_QWORD *)(v7 + 152))
            {
              v15 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)(v7 + 136), (const quasar::TranslationTokenInternal *)&v31);
            }
            else
            {
              quasar::TranslationTokenInternal::TranslationTokenInternal(*(std::string **)(v7 + 144), (const quasar::TranslationTokenInternal *)&v31);
              v15 = v14 + 136;
              *(_QWORD *)(v7 + 144) = v14 + 136;
            }
            *(_QWORD *)(v7 + 144) = v15;
          }
          quasar::PTree::PTree((quasar::PTree *)v30);
          std::string::basic_string[abi:ne180100]<0>(v28, "text");
          quasar::PTree::PTree(&Type, v12);
          quasar::PTree::putChild((uint64_t)v30, (uint64_t)v28, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v29 < 0)
            operator delete(v28[0]);
          std::string::basic_string[abi:ne180100]<0>(v28, "start");
          v16 = *(_DWORD *)(v12 + 24);
          Type = quasar::getType((quasar *)v16);
          std::to_string(&v23, v16);
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 1;
          quasar::PTree::putChild((uint64_t)v30, (uint64_t)v28, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v29 < 0)
            operator delete(v28[0]);
          std::string::basic_string[abi:ne180100]<0>(v28, "length");
          v17 = *(_DWORD *)(v12 + 28);
          Type = quasar::getType((quasar *)v17);
          std::to_string(&v23, v17);
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 1;
          quasar::PTree::putChild((uint64_t)v30, (uint64_t)v28, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v29 < 0)
            operator delete(v28[0]);
          quasar::PTree::addChild((quasar::PTree *)__p, (const quasar::PTree *)v30);
          quasar::PTree::~PTree((quasar::PTree *)v30);
          if ((_QWORD)v40)
          {
            *((_QWORD *)&v40 + 1) = v40;
            operator delete((void *)v40);
          }
          if (SBYTE7(v39) < 0)
            operator delete((void *)v38);
          if (v33)
          {
            v34 = v33;
            operator delete(v33);
          }
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
        }
        v4 = v19;
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v8))
        {
          v18 = *(_QWORD *)(v7 + 144);
          if (*(_QWORD *)(v7 + 136) != v18)
            *(_BYTE *)(v18 - 112) = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&v31, "tokenizer output");
        quasar::PTree::putChild((uint64_t)v45, (uint64_t)&v31, (uint64_t)__p, 1);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        quasar::MetaInfo::update((quasar::MetaInfo::Impl **)(v7 + 192), (const quasar::PTree *)v45);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
        if (v49 < 0)
          operator delete(v48[0]);
        v7 += 200;
      }
      while (v7 != v21);
    }
    quasar::ProcessingBlock::send((uint64_t)v4 + *(_QWORD *)(*v4 - 24), (uint64_t)&v50, 0);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  }
}

void sub_1AE0110F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  __p = (void *)(v60 - 128);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::TokenizerBlock::tokenize(const char *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  const __CFString *v5;
  int v6;
  int v7;
  CFRange *NextToken;
  CFRange *v9;
  std::string *v10;
  CFIndex length;
  CFIndex location;
  int v13;
  int v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  int v18;
  CFIndex v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  std::string v36;
  unint64_t v37;
  std::string v38;
  std::string::size_type __n;
  _QWORD v40[5];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v5 = CFStringCreateWithCString(0, a1, 0x8000100u);
  CFStringGetLength(v5);
  quasar::languageIdForLocale(a2);
  NLTokenizerSetString();
  v6 = 0;
  v7 = 0;
  while (1)
  {
    NextToken = (CFRange *)NLTokenizerGetNextToken();
    v9 = NextToken;
    if (!NextToken)
      break;
    __n = 0;
    memset(&v38, 0, sizeof(v38));
    CFStringGetBytes(v5, *NextToken, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&__n);
    std::string::resize(&v38, __n, 0);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v38;
    else
      v10 = (std::string *)v38.__r_.__value_.__r.__words[0];
    CFStringGetBytes(v5, *v9, 0x8000100u, 0, 0, (UInt8 *)v10, __n, (CFIndex *)&__n);
    location = v9->location;
    length = v9->length;
    v13 = v9->location - v7;
    if ((int)v9->location <= v7)
    {
      v16 = v9->location;
      v14 = 0;
      v17 = v9->location;
    }
    else
    {
      v14 = 0;
      v15 = v7;
      do
      {
        if (CFStringGetCharacterAtIndex(v5, v15) >> 10 == 55)
          ++v14;
        ++v15;
        --v13;
      }
      while (v13);
      v16 = v9->location;
      v17 = v9->location;
    }
    v7 = length + location;
    if ((int)v16 >= (int)length + (int)location)
    {
      v18 = 0;
    }
    else
    {
      v18 = 0;
      v19 = (int)v17;
      v20 = v7 - v17;
      do
      {
        if (CFStringGetCharacterAtIndex(v5, v19) >> 10 == 55)
          ++v18;
        ++v19;
        --v20;
      }
      while (v20);
      LODWORD(v16) = v9->location;
    }
    v21 = v9->length;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v36, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    else
      v36 = v38;
    v22 = v14 + v6;
    v37 = (v16 - v22) | ((unint64_t)(v21 - v18) << 32);
    v23 = a3[1];
    v24 = a3[2];
    if (v23 >= v24)
    {
      v26 = (uint64_t)(v23 - *a3) >> 5;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = v24 - *a3;
      if (v28 >> 4 > v27)
        v27 = v28 >> 4;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
        v29 = 0x7FFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      v40[4] = a3 + 2;
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a3 + 2), v29);
      v31 = &v30[32 * v26];
      v40[0] = v30;
      v40[1] = v31;
      v40[3] = &v30[32 * v32];
      v33 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *((_QWORD *)v31 + 2) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)v31 = v33;
      memset(&v36, 0, sizeof(v36));
      *((_QWORD *)v31 + 3) = v37;
      v40[2] = v31 + 32;
      std::vector<std::pair<std::string,std::pair<int,int>>>::__swap_out_circular_buffer(a3, v40);
      v34 = a3[1];
      std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v40);
      v35 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
      a3[1] = v34;
      if (v35 < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
    }
    else
    {
      v25 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)v23 = v25;
      memset(&v36, 0, sizeof(v36));
      *(_QWORD *)(v23 + 24) = v37;
      a3[1] = v23 + 32;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v6 = v18 + v22;
  }
  CFRelease(v5);
}

void sub_1AE01154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::TokenizerBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::TokenizerBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::TokenizerBlock::minConfigVersion(quasar::TokenizerBlock *this)
{
  return 169;
}

uint64_t `virtual thunk to'quasar::TokenizerBlock::minConfigVersion(quasar::TokenizerBlock *this)
{
  return 169;
}

void quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AE0116B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

const char *quasar::TokenizerBlock::blockType(quasar::TokenizerBlock *this)
{
  return "TokenizerBlock";
}

const char *`virtual thunk to'quasar::TokenizerBlock::blockType(quasar::TokenizerBlock *this)
{
  return "TokenizerBlock";
}

void quasar::TokenizerOptions::~TokenizerOptions(quasar::TokenizerOptions *this)
{
  *(_QWORD *)this = &off_1E5D36358;
  *((_QWORD *)this + 20) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  *((_QWORD *)this + 20) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  *((_QWORD *)this + 2) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t std::vector<std::pair<std::string,std::pair<int,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void kaldi::CuRandom::RandGauss<float>(int *a1, uint64_t a2, float a3, float a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  float *v9;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v10;
  unint64_t v11;
  char v12;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (!*((_BYTE *)a1 + 4))
    {
      v5 = *a1;
      a1[2] = *a1;
      v6 = 1;
      for (i = 3; i != 626; ++i)
      {
        v8 = 1812433253 * (v5 ^ (v5 >> 30));
        v5 = v8 + v6;
        a1[i] = i + v8 - 2;
        ++v6;
      }
      *((_QWORD *)a1 + 313) = 0;
      *((_BYTE *)a1 + 4) = 1;
      v4 = *(_DWORD *)(a2 + 16);
    }
    v9 = *(float **)(a2 + 8);
    v11 = __PAIR64__(LODWORD(a4), LODWORD(a3));
    v12 = 0;
    if (v4 >= 1)
    {
      v10 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2);
      do
      {
        *v9++ = std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v10, (float *)&v11);
        --v4;
      }
      while (v4);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"cannot write data to zero size vector", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
  }
}

void sub_1AE011A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuRand<float>::~CuRand(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 40);
  return a1;
}

void kaldi::CuRand<float>::RandGaussian(uint64_t a1, uint64_t a2)
{
  kaldi::VectorBase<float>::SetRandn(a2 + 8);
}

void kaldi::CuRand<float>::BinarizeProbs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;

  v3 = *(_DWORD *)(a3 + 20);
  if (v3 >= 1)
  {
    v6 = 0;
    LODWORD(v7) = *(_DWORD *)(a3 + 16);
    do
    {
      if ((int)v7 >= 1)
      {
        v8 = 0;
        do
        {
          v9 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
          if (*(float *)(*(_QWORD *)(a2 + 8) + 4 * v6 * *(_DWORD *)(a2 + 24) + 4 * v8) <= v9)
            v10 = 0.0;
          else
            v10 = 1.0;
          *(float *)(*(_QWORD *)(a3 + 8) + 4 * v6 * *(_DWORD *)(a3 + 24) + 4 * v8++) = v10;
          v7 = *(int *)(a3 + 16);
        }
        while (v8 < v7);
        v3 = *(_DWORD *)(a3 + 20);
      }
      ++v6;
    }
    while (v6 < v3);
  }
}

float std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, float *a3)
{
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;

  if (*(_BYTE *)(a1 + 12))
  {
    *(_BYTE *)(a1 + 12) = 0;
    v5 = *(float *)(a1 + 8);
  }
  else
  {
    do
    {
      do
      {
        v7 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        v8 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        v9 = (float)(v8 * v8) + (float)(v7 * v7);
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    v10 = sqrtf((float)(logf((float)(v8 * v8) + (float)(v7 * v7)) * -2.0) / v9);
    *(float *)(a1 + 8) = v8 * v10;
    *(_BYTE *)(a1 + 12) = 1;
    v5 = v7 * v10;
  }
  return *a3 + (float)(v5 * a3[1]);
}

_QWORD *quasar::LmData::dataTypeString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, &quasar::EvaluationTask::dataSetOptions[20 * a1]);
}

uint64_t quasar::LmData::getInputDataType(std::string *this)
{
  std::string::size_type size;
  uint64_t v3;
  const std::string::value_type *i;
  _QWORD *v5;
  _OWORD v7[17];

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  v3 = 0;
  for (i = "plain-text"; std::string::compare(this, i); i += 20)
  {
    if (++v3 == 4)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid input data type specifier: ", 35);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)this);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
  }
  return v3;
}

void sub_1AE011D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

_QWORD *quasar::operator<<(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  unsigned __int8 v18;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"inputDataType ", 14);
  std::string::basic_string[abi:ne180100]<0>(__p, &quasar::LmData::inputDataOptions[20 * *a2]);
  if ((v18 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v6 = v18;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" numDocumentsRejected ", 22);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" numSentencesRejected ", 22);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" numSentencesMungeRejected ", 27);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" numDocuments ", 14);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" numUniqSentences ", 18);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" numSentences ", 14);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" numSentencesMungeChanged ", 26);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" numTokens ", 11);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" numTokensOOV ", 14);
  std::ostream::operator<<();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1AE011EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::LmData::Stats::ptree(quasar::LmData::Stats *this@<X0>, int a2@<W1>, int a3@<W2>, quasar::PTree *a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  quasar::PTree *v19;
  unsigned int v20;
  quasar *v21;
  int Type;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *__p[2];
  char v29;

  quasar::PTree::PTree(a4);
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsRejected");
  v8 = *((_DWORD *)this + 1);
  Type = quasar::getType((quasar *)v8);
  std::to_string(&v23, v8);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesRejected");
  v9 = *((_DWORD *)this + 2);
  Type = quasar::getType((quasar *)v9);
  std::to_string(&v23, v9);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocuments");
  v10 = *((_DWORD *)this + 4);
  Type = quasar::getType((quasar *)v10);
  std::to_string(&v23, v10);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentences");
  v11 = *((_DWORD *)this + 5);
  Type = quasar::getType((quasar *)v11);
  std::to_string(&v23, v11);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokens");
  v12 = *((_DWORD *)this + 8);
  Type = quasar::getType((quasar *)v12);
  std::to_string(&v23, v12);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensOOV");
  v13 = *((_DWORD *)this + 9);
  Type = quasar::getType((quasar *)v13);
  std::to_string(&v23, v13);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsDictated");
  v14 = *((_DWORD *)this + 10);
  Type = quasar::getType((quasar *)v14);
  std::to_string(&v23, v14);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsTyped");
  v15 = *((_DWORD *)this + 11);
  Type = quasar::getType((quasar *)v15);
  std::to_string(&v23, v15);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensDictated");
  v16 = *((_DWORD *)this + 12);
  Type = quasar::getType((quasar *)v16);
  std::to_string(&v23, v16);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensTyped");
  v17 = *((_DWORD *)this + 13);
  Type = quasar::getType((quasar *)v17);
  std::to_string(&v23, v17);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensEstimatedExamined");
  v18 = *((_DWORD *)this + 14);
  Type = quasar::getType((quasar *)v18);
  std::to_string(&v23, v18);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
  {
    operator delete(__p[0]);
    if (!a3)
      goto LABEL_28;
  }
  else if (!a3)
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesMungeRejected");
  v20 = *((_DWORD *)this + 3);
  Type = quasar::getType((quasar *)v20);
  std::to_string(&v23, v20);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesMungeChanged");
  v21 = (quasar *)*((unsigned int *)this + 6);
  Type = quasar::getType(v21);
  std::to_string(&v23, v21);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_28:
    if (!a2)
      return;
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!a2)
    return;
LABEL_29:
  quasar::roundCountsInPtree(a4, v19);
}

void sub_1AE0124C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree *v23;

  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

void quasar::inferSymbolTableRootFromDecoderChainName(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  std::operator+<char>();
  v2 = std::string::append(&v3, ".lattice-biglm-lme-faster");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1AE012600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::loadSymbolTable(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  void **v7;
  const void *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
  if (SBYTE7(v21) < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)v7 + v6) = 46;
  quasar::SystemConfig::setPrefix(a1, (const std::string *)__p);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  quasar::QsrTextSymbolTable::Register((quasar::QsrTextSymbolTable *)&v37, (quasar::SystemConfig *)a1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  quasar::SystemConfig::readPtree((uint64_t)a1, a2, 0, 0);
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
  if (!quasar::QsrTextSymbolTable::init((const std::string *)&v37, (const quasar::SystemConfig::Version *)__p, 0, 1, 0))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported config: first decoder lacks word-syms-map-file", 58);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v9 = v43;
  *(_OWORD *)__p = v43;
  if (*((_QWORD *)&v43 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *a3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 16))(v9);
  if (*((_QWORD *)&v9 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  v14 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v42) < 0)
    operator delete(*((void **)&v41 + 1));
  if (SBYTE7(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(v39) < 0)
    operator delete(*((void **)&v38 + 1));
  if (SBYTE7(v38) < 0)
    operator delete((void *)v37);
}

void sub_1AE0128C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  quasar::QsrTextSymbolTable::~QsrTextSymbolTable((void **)(v14 - 208));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::LmData()
{
  uint64_t v0;
  std::string *v1;
  char v2;
  char v3;
  char v4;
  char v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v17;
  quasar::TextSanitizer *v18;
  quasar::TextSanitizer *v19;
  float *v20;
  unint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  _BYTE *v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unsigned int *v42;
  char *v43;
  int v44;
  uint64_t v45;
  float *v46;
  float v47;
  float v48;
  _QWORD *v49;
  __int128 *p_p;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  float v55;
  _QWORD *v56;
  __int128 *v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  clockid_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  size_t size;
  __int128 *v70;
  std::string *v71;
  uint64_t PtreeOptional;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  clockid_t v79;
  std::string *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t ChildOptional;
  quasar::PTree *v84;
  const std::string *String;
  uint64_t i;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  clockid_t v103;
  unsigned int v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _BYTE *v132;
  uint64_t v133;
  void **v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  const std::string *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  quasar::TextSanitizer **v178;
  char *v179;
  std::string *v180;
  uint64_t *v181;
  uint64_t v182;
  std::string *__str;
  uint64_t v184;
  int *v185;
  __int128 v186;
  const char *v187;
  uint64_t v188;
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  unsigned int v192[4];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  std::string v205[64];
  uint64_t v206[3];
  char v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  void *v226;
  _BYTE *v227;
  uint64_t v228;
  __int128 __p;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;

  v0 = MEMORY[0x1E0C80A78]();
  v180 = v1;
  v3 = v2;
  v5 = v4;
  v182 = v7;
  __str = v6;
  v9 = v8;
  v10 = v0;
  v246 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v0 = off_1E5D3B970;
  *(_DWORD *)(v0 + 8) = -1;
  v185 = (int *)(v0 + 8);
  v12 = *v11;
  *v11 = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)(v0 + 16) = v12;
  *(_OWORD *)(v0 + 72) = 0u;
  v13 = v0 + 72;
  *(_OWORD *)(v0 + 124) = 0u;
  *(_OWORD *)(v0 + 140) = 0u;
  v14 = (uint64_t *)(v0 + 48);
  *(_OWORD *)(v0 + 156) = 0u;
  v15 = (uint64_t *)(v0 + 96);
  *(_OWORD *)(v0 + 172) = 0u;
  *(_OWORD *)(v0 + 188) = 0u;
  *(_OWORD *)(v0 + 204) = 0u;
  *(_OWORD *)(v0 + 220) = 0u;
  *(_OWORD *)(v0 + 236) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *(_OWORD *)(v0 + 252) = 0u;
  *(_OWORD *)(v0 + 268) = 0u;
  *(_OWORD *)(v0 + 284) = 0u;
  *(_OWORD *)(v0 + 300) = 0u;
  *(_OWORD *)(v0 + 316) = 0u;
  *(_OWORD *)(v0 + 332) = 0u;
  v178 = (quasar::TextSanitizer **)(v0 + 352);
  v16 = (uint64_t *)(v0 + 360);
  v179 = (char *)(v0 + 432);
  v181 = (uint64_t *)(v0 + 456);
  v172 = (uint64_t *)(v0 + 480);
  v173 = (const std::string *)(v0 + 384);
  v174 = v0 + 504;
  v17 = (void **)(v0 + 552);
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 528) = 0;
  *(_OWORD *)(v0 + 496) = 0u;
  *(_OWORD *)(v0 + 512) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_OWORD *)(v0 + 480) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_DWORD *)(v0 + 584) = 0;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 588) = xmmword_1AE192D10;
  *(_DWORD *)(v0 + 620) = 512;
  v184 = v0 + 536;
  *(_OWORD *)(v0 + 604) = xmmword_1AE192D20;
  v177 = (uint64_t *)(v0 + 624);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v0 + 624), "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\");
  *(_OWORD *)(v10 + 769) = 0u;
  *(_OWORD *)(v10 + 744) = 0u;
  *(_OWORD *)(v10 + 760) = 0u;
  *(_OWORD *)(v10 + 712) = 0u;
  *(_OWORD *)(v10 + 728) = 0u;
  *(_OWORD *)(v10 + 680) = 0u;
  *(_OWORD *)(v10 + 696) = 0u;
  *(_OWORD *)(v10 + 648) = 0u;
  *(_OWORD *)(v10 + 664) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v10 + 792), "Dictation");
  *(_BYTE *)(v10 + 840) = 0;
  *(_QWORD *)(v10 + 832) = 0;
  *(_OWORD *)(v10 + 816) = 0u;
  *(_OWORD *)(v10 + 848) = 0u;
  *(_OWORD *)(v10 + 864) = 0u;
  *(_OWORD *)(v10 + 880) = 0u;
  *(_OWORD *)(v10 + 896) = 0u;
  *(_OWORD *)(v10 + 912) = 0u;
  *(_OWORD *)(v10 + 928) = 0u;
  *(_OWORD *)(v10 + 944) = 0u;
  *(_OWORD *)(v10 + 960) = 0u;
  *(_OWORD *)(v10 + 976) = 0u;
  *(_DWORD *)(v10 + 992) = 0;
  *(_WORD *)(v10 + 996) = 1;
  *(_BYTE *)(v10 + 998) = 0;
  *(_BYTE *)(v10 + 999) = v5;
  *(_BYTE *)(v10 + 1000) = v3;
  *(_OWORD *)(v10 + 1008) = 0u;
  *(_OWORD *)(v10 + 1024) = 0u;
  *(_DWORD *)(v10 + 1040) = 1065353216;
  quasar::LmData::parseConfig(v10, v9, (uint64_t)__str);
  *(_DWORD *)(v10 + 104) = quasar::LmData::getInputDataType((std::string *)(v10 + 744));
  v18 = (quasar::TextSanitizer *)operator new();
  quasar::BasicTextSanitizer::BasicTextSanitizer(v18, v177);
  v19 = *v178;
  *v178 = v18;
  if (v19)
    (*(void (**)(quasar::TextSanitizer *))(*(_QWORD *)v19 + 8))(v19);
  v227 = 0;
  v226 = 0;
  v228 = 0;
  kaldi::SplitStringToFloats<float>(v10 + 720, ",", 1, &v226);
  v175 = v13;
  v176 = v14;
  v20 = (float *)v226;
  if (v227 == v226 || (unint64_t)(v227 - (_BYTE *)v226) >= 0x11)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"min-words should be a single int or a comma-separated list of size 1..", 70);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v209);
  }
  v21 = 0;
  v22 = *(unsigned int **)(v10 + 552);
  *(_QWORD *)(v10 + 560) = v22;
  v23 = (_QWORD *)(v10 + 568);
  do
  {
    v24 = vcvtms_u32_f32(v20[v21]);
    if ((unint64_t)v22 >= *v23)
    {
      v25 = (unsigned int *)*v17;
      v26 = ((char *)v22 - (_BYTE *)*v17) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = *v23 - (_QWORD)v25;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10 + 568, v29);
        v22 = *(unsigned int **)(v10 + 560);
        v25 = *(unsigned int **)(v10 + 552);
      }
      else
      {
        v30 = 0;
      }
      v31 = (unsigned int *)&v30[4 * v26];
      *v31 = v24;
      v32 = v31 + 1;
      while (v22 != v25)
      {
        v33 = *--v22;
        *--v31 = v33;
      }
      *(_QWORD *)(v10 + 552) = v31;
      *(_QWORD *)(v10 + 560) = v32;
      *(_QWORD *)(v10 + 568) = &v30[4 * v29];
      if (v25)
        operator delete(v25);
      v22 = v32;
    }
    else
    {
      *v22++ = v24;
    }
    *(_QWORD *)(v10 + 560) = v22;
    ++v21;
    v20 = (float *)v226;
  }
  while (v21 < (v227 - (_BYTE *)v226) >> 2);
  v34 = *v17;
  v35 = (unint64_t)((char *)v22 - (_BYTE *)*v17) >> 2;
  if ((int)v35 <= 3)
  {
    do
    {
      if ((unint64_t)v22 >= *v23)
      {
        v36 = (unsigned int *)*v17;
        v37 = ((char *)v22 - (_BYTE *)*v17) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = *v23 - (_QWORD)v36;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10 + 568, v40);
          v42 = *(unsigned int **)(v10 + 560);
          v36 = *(unsigned int **)(v10 + 552);
        }
        else
        {
          v41 = 0;
          v42 = v22;
        }
        v43 = &v41[4 * v37];
        *(_DWORD *)v43 = *(v22 - 1);
        v22 = (unsigned int *)(v43 + 4);
        while (v42 != v36)
        {
          v44 = *--v42;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        *(_QWORD *)(v10 + 552) = v43;
        *(_QWORD *)(v10 + 560) = v22;
        *(_QWORD *)(v10 + 568) = &v41[4 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v22 = *(v22 - 1);
        ++v22;
      }
      *(_QWORD *)(v10 + 560) = v22;
      LODWORD(v35) = v35 + 1;
    }
    while ((_DWORD)v35 != 4);
    v34 = *v17;
  }
  if ((char *)v22 - v34 != 16)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"minWords.size() == NumDataSetTypes", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
  }
  if ((*(char *)(v10 + 431) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 431))
      goto LABEL_47;
    goto LABEL_46;
  }
  if (!*(_QWORD *)(v10 + 416))
LABEL_46:
    *((_DWORD *)v34 + 3) = 0;
LABEL_47:
  kaldi::SplitStringToFloats<float>(v10 + 648, ",", 1, v181);
  v46 = *(float **)(v10 + 456);
  v45 = *(_QWORD *)(v10 + 464);
  if (v45 - (_QWORD)v46 != 12)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"train-dev-test-split should be comma-separated list of size ", 60);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v209);
  }
  v47 = *v46 + v46[1];
  v48 = v47 + v46[2];
  v46[1] = v47;
  v46[2] = v48;
  if (quasar::gLogLevel > 4)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"splitOffsets: ", 14);
    *(_QWORD *)v189 = " ";
    *(_QWORD *)&v189[8] = 1;
    quasar::join<std::vector<float>>(v181, (uint64_t *)v189);
    if ((SBYTE7(v230) & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if ((SBYTE7(v230) & 0x80u) == 0)
      v51 = BYTE7(v230);
    else
      v51 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, v51);
    if (SBYTE7(v230) < 0)
      operator delete((void *)__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v209);
    v45 = *(_QWORD *)(v10 + 464);
  }
  if (fabsf(*(float *)(v45 - 4) + -1.0) > 0.001)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"train-dev-test-split values should sum to 1", 43);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v209);
  }
  if (*(char *)(v10 + 719) < 0)
  {
    if (*(_QWORD *)(v10 + 704))
      goto LABEL_61;
LABEL_77:
    *(_QWORD *)(v10 + 488) = *(_QWORD *)(v10 + 480);
    goto LABEL_78;
  }
  if (!*(_BYTE *)(v10 + 719))
    goto LABEL_77;
LABEL_61:
  kaldi::SplitStringToFloats<float>(v10 + 696, ",", 1, v172);
  v53 = *(float **)(v10 + 480);
  v52 = *(_QWORD *)(v10 + 488);
  if (v52 - (_QWORD)v53 != 12)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"external-train-dev-test-split should be comma-separated list of size ", 69);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v209);
  }
  v54 = *v53 + v53[1];
  v55 = v54 + v53[2];
  v53[1] = v54;
  v53[2] = v55;
  if (quasar::gLogLevel > 4)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"externalSplitOffsets: ", 22);
    *(_QWORD *)v189 = " ";
    *(_QWORD *)&v189[8] = 1;
    quasar::join<std::vector<float>>(v172, (uint64_t *)v189);
    if ((SBYTE7(v230) & 0x80u) == 0)
      v57 = &__p;
    else
      v57 = (__int128 *)__p;
    if ((SBYTE7(v230) & 0x80u) == 0)
      v58 = BYTE7(v230);
    else
      v58 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    if (SBYTE7(v230) < 0)
      operator delete((void *)__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v209);
    v52 = *(_QWORD *)(v10 + 488);
  }
  if (fabsf(*(float *)(v52 - 4) + -1.0) > 0.001)
  {
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    v221 = 0u;
    v220 = 0u;
    v219 = 0u;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"external-train-dev-test-split values should sum to 1", 52);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v209);
  }
LABEL_78:
  kaldi::SplitStringToVector((const std::string *)(v10 + 672), ",", 1, v174);
  v59 = (float64x2_t)vdupq_n_s64(0x404E000000000000uLL);
  v60 = vmulq_f64(vmulq_f64(*(float64x2_t *)(v10 + 768), v59), v59);
  __asm { FMOV            V1.2D, #24.0 }
  *(float64x2_t *)v184 = vmulq_f64(v60, _Q1);
  memset(v189, 0, 24);
  v230 = 0u;
  __p = 0u;
  LODWORD(v231) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v209, v182, (uint64_t *)v189, (uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
  *(_QWORD *)&__p = v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 + 815) < 0)
    v66 = *(_QWORD *)(v10 + 800);
  else
    v66 = *(unsigned __int8 *)(v10 + 815);
  v67 = (uint64_t)v180;
  if (v66)
  {
    quasar::getOrValidateDecoderChainName((quasar *)&v209, v10 + 792, (const void **)v175, (std::string *)&__p);
    if (*(char *)(v10 + 95) < 0)
      operator delete(*(void **)v175);
    *(_OWORD *)v175 = __p;
    *(_QWORD *)(v175 + 16) = v230;
  }
  v207 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v206, v65);
  v208 = 0;
  v68 = SHIBYTE(v180->__r_.__value_.__r.__words[2]);
  if (v68 < 0)
  {
    if (v180->__r_.__value_.__l.__size_)
    {
LABEL_87:
      if ((v68 & 0x80) == 0)
        goto LABEL_88;
LABEL_106:
      if (*(_QWORD *)(v67 + 8))
        goto LABEL_110;
      goto LABEL_107;
    }
  }
  else if (*((_BYTE *)&v180->__r_.__value_.__s + 23))
  {
    goto LABEL_87;
  }
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  v70 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 19);
  if (SBYTE7(v230) < 0)
    v70 = (__int128 *)__p;
  if (size)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = __str;
    else
      v71 = (std::string *)__str->__r_.__value_.__r.__words[0];
    memmove(v70, v71, size);
  }
  strcpy((char *)v70 + size, ".word-syms-map-file");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)&v209, (uint64_t)&__p);
  v73 = PtreeOptional;
  if (SBYTE7(v230) < 0)
  {
    operator delete((void *)__p);
    if (v73)
      goto LABEL_103;
  }
  else if (PtreeOptional)
  {
LABEL_103:
    v67 = (uint64_t)v180;
    std::string::operator=(v180, __str);
    goto LABEL_110;
  }
  v67 = (uint64_t)v180;
  LOBYTE(v68) = *((_BYTE *)&v180->__r_.__value_.__s + 23);
  if ((v68 & 0x80) != 0)
    goto LABEL_106;
LABEL_88:
  if ((_BYTE)v68)
    goto LABEL_110;
LABEL_107:
  quasar::inferSymbolTableRootFromDecoderChainName((std::string *)&__p);
  if (*(char *)(v67 + 23) < 0)
    operator delete(*(void **)v67);
  *(_OWORD *)v67 = __p;
  *(_QWORD *)(v67 + 16) = v230;
LABEL_110:
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v205, (const quasar::SystemConfig *)&v209, 1, 1);
  quasar::loadSymbolTable(v205, v67, &v187);
  v74 = operator new();
  v75 = v187;
  v187 = 0;
  *(_QWORD *)&__p = v75;
  quasar::lm::SymbolTableData::SymbolTableData(v74, &__p);
  *(_QWORD *)v189 = v74;
  v76 = __p;
  *(_QWORD *)&__p = 0;
  if (v76)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    v74 = *(_QWORD *)v189;
  }
  *(_QWORD *)v189 = 0;
  v77 = (_QWORD *)*v15;
  *v15 = v74;
  if (v77)
  {
    std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100]((uint64_t)v15, v77);
    v78 = *(_QWORD **)v189;
    *(_QWORD *)v189 = 0;
    if (v78)
      std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100]((uint64_t)v189, v78);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v205);
  if (quasar::gLogLevel >= 4)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"symbolTable init ", 17);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v79);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  std::operator+<char>();
  v80 = std::string::append((std::string *)v189, ".lattice-biglm-lme-faster");
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  *(_QWORD *)&v230 = *((_QWORD *)&v80->__r_.__value_.__l + 2);
  __p = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = quasar::SystemConfig::getPtreeOptional((uint64_t)&v209, (uint64_t)&__p);
  if (SBYTE7(v230) < 0)
    operator delete((void *)__p);
  if ((v189[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v189);
    if (v82)
      goto LABEL_121;
LABEL_128:
    quasar::lm::SymbolTableData::observeAllSymbols(*v15);
    goto LABEL_159;
  }
  if (!v82)
    goto LABEL_128;
LABEL_121:
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-nnet-file-list");
  ChildOptional = quasar::PTree::getChildOptional(v82, (uint64_t)&__p);
  if (SBYTE7(v230) < 0)
    operator delete((void *)__p);
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)&__p);
  if (ChildOptional)
  {
    if (quasar::gLogLevel >= 4)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v194 = 0u;
      *(_OWORD *)v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      memset(v189, 0, sizeof(v189));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v189);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Found a NNET in the first pass, will consider all symbols in the symbol table to be in-vocabulary", 97);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v189);
    }
    quasar::lm::SymbolTableData::observeAllSymbols(*v15);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v189, "big-g-fst-file-list");
    v84 = (quasar::PTree *)quasar::PTree::getChildOptional(v82, (uint64_t)v189);
    if ((v189[23] & 0x80000000) != 0)
      operator delete(*(void **)v189);
    if (!v84)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v194 = 0u;
      *(_OWORD *)v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      memset(v189, 0, sizeof(v189));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v189);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Unsupported config: first decoder must have only one big G FST", 62);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v189);
    }
    String = (const std::string *)quasar::PTree::getString(v84);
    std::string::basic_string[abi:ne180100]<0>(v189, ",");
    quasar::splitAndTrimNoEmpty(String, v189, &v187);
    if ((v189[23] & 0x80000000) != 0)
      operator delete(*(void **)v189);
    v87 = (uint64_t)v187;
    for (i = v188; v87 != i; v87 += 24)
    {
      if (quasar::gLogLevel >= 4)
      {
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        *(_OWORD *)v192 = 0u;
        v193 = 0u;
        v190 = 0u;
        v191 = 0u;
        memset(v189, 0, sizeof(v189));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v189);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Observing symbols from ", 23);
        v89 = *(char *)(v87 + 23);
        if (v89 >= 0)
          v90 = v87;
        else
          v90 = *(_QWORD *)v87;
        if (v89 >= 0)
          v91 = *(unsigned __int8 *)(v87 + 23);
        else
          v91 = *(_QWORD *)(v87 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v189);
      }
      quasar::ModelLoader::readFstNetwork((uint64_t)&__p, v87, (uint64_t *)v189);
      v92 = *v15;
      v186 = *(_OWORD *)v189;
      if (*(_QWORD *)&v189[8])
      {
        v93 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      quasar::lm::SymbolTableData::observeBigGSymbols(v92, (uint64_t *)&v186);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      if (*((_QWORD *)&v186 + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = *(std::__shared_weak_count **)&v189[8];
      if (*(_QWORD *)&v189[8])
      {
        v99 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
    *(_QWORD *)v189 = &v187;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v189);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&__p);
LABEL_159:
  if (quasar::gLogLevel >= 4)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v101 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/", 1);
    v102 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" symbols in bigG ", 17);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v103);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  if (*(char *)(v10 + 71) < 0)
  {
    if (!*(_QWORD *)(v10 + 56))
      goto LABEL_185;
  }
  else if (!*(_BYTE *)(v10 + 71))
  {
    goto LABEL_185;
  }
  v104 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(*v15 + 16) + 96))(*(_QWORD *)(*v15 + 16), v176);
  if (quasar::gLogLevel >= 6)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"symbol=", 7);
    v106 = *(char *)(v10 + 71);
    if (v106 >= 0)
      v107 = (uint64_t)v176;
    else
      v107 = *(_QWORD *)(v10 + 48);
    if (v106 >= 0)
      v108 = *(unsigned __int8 *)(v10 + 71);
    else
      v108 = *(_QWORD *)(v10 + 56);
    v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" id=", 4);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  }
  if ((int)v104 <= 0)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Could not find OOV symbol: ", 27);
    v140 = *(_BYTE *)(v10 + 71);
    if (v140 >= 0)
      v141 = (uint64_t)v176;
    else
      v141 = *(_QWORD *)(v10 + 48);
    if (v140 >= 0)
      v142 = *(unsigned __int8 *)(v10 + 71);
    else
      v142 = *(_QWORD *)(v10 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, v141, v142);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v110 = *v15;
  if ((unint64_t)v104 >= *(_QWORD *)(*v15 + 32))
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Symbol out of range: ", 21);
    v144 = *(_BYTE *)(v10 + 71);
    if (v144 >= 0)
      v145 = (uint64_t)v176;
    else
      v145 = *(_QWORD *)(v10 + 48);
    if (v144 >= 0)
      v146 = *(unsigned __int8 *)(v10 + 71);
    else
      v146 = *(_QWORD *)(v10 + 56);
    v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, v145, v146);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)" (", 2);
    v148 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)")", 1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (((*(_QWORD *)(*(_QWORD *)(v110 + 24) + (((unint64_t)v104 >> 3) & 0x1FFFFFF8)) >> v104) & 1) == 0)
  {
    if (quasar::gLogLevel >= 2)
    {
      v245 = 0u;
      v244 = 0u;
      v243 = 0u;
      v242 = 0u;
      v241 = 0u;
      v240 = 0u;
      v239 = 0u;
      v238 = 0u;
      v237 = 0u;
      v236 = 0u;
      v235 = 0u;
      v234 = 0u;
      v233 = 0u;
      v232 = 0u;
      v231 = 0u;
      v230 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Symbol has wrong value in symbolInBigG: ", 40);
      v112 = *(char *)(v10 + 71);
      if (v112 >= 0)
        v113 = (uint64_t)v176;
      else
        v113 = *(_QWORD *)(v10 + 48);
      if (v112 >= 0)
        v114 = *(unsigned __int8 *)(v10 + 71);
      else
        v114 = *(_QWORD *)(v10 + 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, v113, v114);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      v110 = *v15;
    }
    quasar::lm::SymbolTableData::observeSymbol(v110, 1, v104);
  }
LABEL_185:
  if (*(char *)(v10 + 71) < 0)
  {
    if (!*(_QWORD *)(v10 + 56))
      goto LABEL_213;
  }
  else if (!*(_BYTE *)(v10 + 71))
  {
    goto LABEL_213;
  }
  v115 = quasar::lm::SymbolTableData::getAndCheckSymbolId(*v15, (uint64_t)v176);
  *v185 = v115;
  if (v115 == *(_DWORD *)(*v15 + 88))
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"OOV replacement ", 16);
    v150 = *(_BYTE *)(v10 + 71);
    if (v150 >= 0)
      v151 = (uint64_t)v176;
    else
      v151 = *(_QWORD *)(v10 + 48);
    if (v150 >= 0)
      v152 = *(unsigned __int8 *)(v10 + 71);
    else
      v152 = *(_QWORD *)(v10 + 56);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, v151, v152);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)" identical with unseenId", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v116 = *(char *)(v10 + 71);
  if (v116 < 0)
  {
    if (*(_QWORD *)(v10 + 56) != 5)
    {
LABEL_199:
      (*(void (**)(_QWORD, const char *))(**(_QWORD **)*v15 + 56))(*(_QWORD *)*v15, "<unk>");
      v115 = *v185;
      goto LABEL_200;
    }
    v117 = *v176;
  }
  else
  {
    v117 = (uint64_t)v176;
    if (v116 != 5)
      goto LABEL_199;
  }
  v118 = *(_DWORD *)v117;
  v119 = *(unsigned __int8 *)(v117 + 4);
  if (v118 != 1802401084 || v119 != 62)
    goto LABEL_199;
LABEL_200:
  if (v115 == -1)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"OOV replacement not in symbol table or out of range: ", 53);
    v155 = *(_BYTE *)(v10 + 71);
    if (v155 >= 0)
      v156 = (uint64_t)v176;
    else
      v156 = *(_QWORD *)(v10 + 48);
    if (v155 >= 0)
      v157 = *(unsigned __int8 *)(v10 + 71);
    else
      v157 = *(_QWORD *)(v10 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, v156, v157);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v121 = (uint64_t)v176;
  if (*(char *)(v10 + 71) < 0)
    v121 = *v176;
  v122 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v10 + 96) + 16))(**(_QWORD **)(v10 + 96), v121);
  v123 = *(char *)(v10 + 71);
  if (v123 < 0)
  {
    if (*(_QWORD *)(v10 + 56) != 5)
    {
LABEL_212:
      *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)*v15 + 88))(*(_QWORD *)*v15) = v122;
      goto LABEL_213;
    }
    v124 = *v176;
  }
  else
  {
    v124 = (uint64_t)v176;
    if (v123 != 5)
      goto LABEL_212;
  }
  v125 = *(_DWORD *)v124;
  v126 = *(unsigned __int8 *)(v124 + 4);
  if (v125 != 1802401084 || v126 != 62)
    goto LABEL_212;
LABEL_213:
  if (*(char *)(v10 + 455) < 0)
  {
    if (!*(_QWORD *)(v10 + 440))
      goto LABEL_220;
  }
  else if (!*(_BYTE *)(v10 + 455))
  {
    goto LABEL_220;
  }
  if (!quasar::filesystem::exists(v179))
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"train ARPA LM file doesn't exist: ", 34);
    v159 = *(_BYTE *)(v10 + 455);
    if (v159 >= 0)
      v160 = (uint64_t)v179;
    else
      v160 = *(_QWORD *)(v10 + 432);
    if (v159 >= 0)
      v161 = *(unsigned __int8 *)(v10 + 455);
    else
      v161 = *(_QWORD *)(v10 + 440);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, v160, v161);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  Vocab::Vocab((Vocab *)v189, 0, 0xFFFFFFFE);
  Vocab::remove((uint64_t)v189, v192[0]);
  quasar::lm::ExtractVocabularyFromARPA((uint64_t)v179, (File *)v189);
  quasar::lm::SymbolTableData::observeSrilmVocabulary((quasar::lm::SymbolTableData *)*v15, (Vocab *)v189);
  if (((*(_QWORD *)(*(_QWORD *)(*v15 + 48) + (((unint64_t)*v185 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v185) & 1) == 0)
  {
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    v233 = 0u;
    v232 = 0u;
    v231 = 0u;
    v230 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)" didn't observe OOV symbol ", 27);
    v163 = *(_BYTE *)(v10 + 71);
    if (v163 >= 0)
      v164 = (uint64_t)v176;
    else
      v164 = *(_QWORD *)(v10 + 48);
    if (v163 >= 0)
      v165 = *(unsigned __int8 *)(v10 + 71);
    else
      v165 = *(_QWORD *)(v10 + 56);
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, v164, v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)":", 1);
    v167 = (_QWORD *)std::ostream::operator<<();
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)" in ", 4);
    v169 = *(_BYTE *)(v10 + 455);
    if (v169 >= 0)
      v170 = (uint64_t)v179;
    else
      v170 = *(_QWORD *)(v10 + 432);
    if (v169 >= 0)
      v171 = *(unsigned __int8 *)(v10 + 455);
    else
      v171 = *(_QWORD *)(v10 + 440);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, v170, v171);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  quasar::lm::SymbolTableData::extractTrainVocabFromSymbolTable((quasar::lm::SymbolTableData *)*v15);
  (*(void (**)(_QWORD))(**(_QWORD **)*v15 + 152))(*(_QWORD *)*v15);
  Vocab::~Vocab((Vocab *)v189);
LABEL_220:
  if (*v185 != -1 && *(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)*v15 + 152))(*(_QWORD *)*v15))
    quasar::lm::SymbolTableData::observeTrainingSymbol((_QWORD *)*v15, v185, v176);
  kaldi::SplitStringToVector(v173, ",", 1, (uint64_t)v16);
  if (*(_BYTE *)(v10 + 784))
  {
    quasar::LanguageRecognizer::create((quasar::AppleLanguageRecognizer **)&__p);
    v128 = __p;
    *(_QWORD *)&__p = 0;
    v129 = *(_QWORD *)(v10 + 872);
    *(_QWORD *)(v10 + 872) = v128;
    if (v129)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      v130 = __p;
      *(_QWORD *)&__p = 0;
      if (v130)
        (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
    }
    if (*(_QWORD *)(v10 + 872) && quasar::gLogLevel >= 4)
    {
      v245 = 0u;
      v244 = 0u;
      v243 = 0u;
      v242 = 0u;
      v241 = 0u;
      v240 = 0u;
      v239 = 0u;
      v238 = 0u;
      v237 = 0u;
      v236 = 0u;
      v235 = 0u;
      v234 = 0u;
      v233 = 0u;
      v232 = 0u;
      v231 = 0u;
      v230 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Filtering by languages ", 23);
      v187 = " ";
      v188 = 1;
      quasar::join<std::vector<std::string>>(v16, (uint64_t *)&v187);
      if (v189[23] >= 0)
        v132 = v189;
      else
        v132 = *(_BYTE **)v189;
      if (v189[23] >= 0)
        v133 = v189[23];
      else
        v133 = *(_QWORD *)&v189[8];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
      if ((v189[23] & 0x80000000) != 0)
        operator delete(*(void **)v189);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
  }
  if ((*(char *)(v10 + 839) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v10 + 839))
      goto LABEL_243;
    goto LABEL_242;
  }
  if (*(_QWORD *)(v10 + 824))
  {
LABEL_242:
    v134 = (void **)operator new();
    quasar::Munger::Munger(v134, v10 + 816);
    std::unique_ptr<quasar::Munger>::reset[abi:ne180100]((void ***)(v10 + 880), v134);
  }
LABEL_243:
  if (*(float *)(v184 + 52) >= 0.0 || *(float *)(v10 + 592) >= 0.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      v245 = 0u;
      v244 = 0u;
      v243 = 0u;
      v242 = 0u;
      v241 = 0u;
      v240 = 0u;
      v239 = 0u;
      v238 = 0u;
      v237 = 0u;
      v236 = 0u;
      v235 = 0u;
      v234 = 0u;
      v233 = 0u;
      v232 = 0u;
      v231 = 0u;
      v230 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Creating lmScorer. minSentencePpl=", 34);
      v135 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" maxSentencePpl=", 16);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    v136 = operator new();
    quasar::FstLmScorer::FstLmScorer(v136, v182);
    v137 = *(_QWORD *)(v10 + 888);
    *(_QWORD *)(v10 + 888) = v136;
    if (v137)
      (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "external");
  quasar::LmData::loadExternalData(v10, 1, (uint64_t)&__p);
  if (SBYTE7(v230) < 0)
    operator delete((void *)__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v209);
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  return v10;
}

void sub_1AE01485C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE014AA8);
}

void quasar::LmData::parseConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t PtreeOptional;
  uint64_t v6;
  const std::string *SpeechModelInfo;
  int64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  std::string::size_type v13;
  void **v14;
  size_t v15;
  void **v16;
  const void *v17;
  void *__p[2];
  __int128 v19;
  int v20;
  void *v21[2];
  uint64_t v22;
  std::string v23[64];

  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v23, a2, (uint64_t *)v21, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v23, (uint64_t)__p);
  v6 = PtreeOptional;
  if (SBYTE7(v19) < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (PtreeOptional)
  {
LABEL_5:
    SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v23);
    std::string::operator=((std::string *)(a1 + 24), SpeechModelInfo + 5);
  }
LABEL_6:
  if (*(char *)(a1 + 47) < 0)
  {
    v9 = *(char **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 47);
    v9 = (char *)(a1 + 24);
  }
  v10 = &v9[v8];
  if (v8 >= 1)
  {
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 95, v8);
      if (!v12)
        break;
      if (*v12 == 95)
        goto LABEL_15;
      v11 = v12 + 1;
      v8 = v10 - (_BYTE *)v11;
    }
    while (v10 - (_BYTE *)v11 > 0);
  }
  v12 = v10;
LABEL_15:
  if (v12 == v10)
    v13 = -1;
  else
    v13 = v12 - v9;
  std::string::basic_string((std::string *)__p, (const std::string *)(a1 + 24), 0, v13, (std::allocator<char> *)v21);
  v14 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 400) = v19;
  if (*(char *)(a3 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 1);
  if (SBYTE7(v19) < 0)
    v16 = (void **)__p[0];
  if (v15)
  {
    if (*(char *)(a3 + 23) >= 0)
      v17 = (const void *)a3;
    else
      v17 = *(const void **)a3;
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)v16 + v15) = 46;
  quasar::SystemConfig::setPrefix(v23, (const std::string *)__p);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "train-dev-test-split");
  std::string::basic_string[abi:ne180100]<0>(v21, "Comma-separated list of 3 positive numbers that should sum to 1. Example: 0.7:0.2:0.1 means data will be split as follows: 70%% train, 20%% dev, and 10%% test");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 648, (uint64_t)v21, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sources");
  std::string::basic_string[abi:ne180100]<0>(v21, "Comma-separated list of sources. They can be anything since the caller is responsible for interpreting them.");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 672, (uint64_t)v21, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "query-limit");
  std::string::basic_string[abi:ne180100]<0>(v21, "Query limit. The caller is responsible for interpreting this.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 528, (uint64_t)v21, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-age-days");
  std::string::basic_string[abi:ne180100]<0>(v21, "Maximum age of data. The caller is responsible for interpreting this.");
  quasar::SystemConfig::Register<double>((uint64_t)v23, (const void **)__p, a1 + 768, (uint64_t)v21, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-age-days");
  std::string::basic_string[abi:ne180100]<0>(v21, "Minimum age of data. The caller is responsible for interpreting this.");
  quasar::SystemConfig::Register<double>((uint64_t)v23, (const void **)__p, a1 + 776, (uint64_t)v21, 0, 178, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-words");
  std::string::basic_string[abi:ne180100]<0>(v21, "Minimum number of total words for training to proceed.");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 720, (uint64_t)v21, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-words");
  std::string::basic_string[abi:ne180100]<0>(v21, "Maximum number of total words to use.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 576, (uint64_t)v21, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "oov-replacement");
  std::string::basic_string[abi:ne180100]<0>(v21, "Replace OOVs with this token");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 48, (uint64_t)v21, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "filter-language");
  std::string::basic_string[abi:ne180100]<0>(v21, "If true, filter text by Language ID");
  quasar::SystemConfig::Register<BOOL>((uint64_t)v23, (const void **)__p, a1 + 784, (uint64_t)v21, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "external-data-file");
  std::string::basic_string[abi:ne180100]<0>(v21, "Optionally provide an external data file as general test set to evaluate over-adaptation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 408, (uint64_t)v21, 0, 177, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "external-train-dev-test-split");
  std::string::basic_string[abi:ne180100]<0>(v21, "Will split into common train & dev sets, but keeping an extra external test set.Comma-separated list of 3 positive numbers that should sum to 1. Example: 0.1:0.2:0.7 means external data will be split as follows: 10%% train, 20%% dev, and 70%% external");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 696, (uint64_t)v21, 0, 177, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "munge-file");
  std::string::basic_string[abi:ne180100]<0>(v21, "Munge file. See documentation in Munger.hpp");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 816, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-sentence-ppl");
  std::string::basic_string[abi:ne180100]<0>(v21, "If >= 0: sentences with background LM PPL < this value are rejected.");
  quasar::SystemConfig::Register<float>((uint64_t)v23, (const void **)__p, a1 + 588, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-sentence-ppl");
  std::string::basic_string[abi:ne180100]<0>(v21, "If >= 0: sentences with background LM PPL > this value are rejected.");
  quasar::SystemConfig::Register<float>((uint64_t)v23, (const void **)__p, a1 + 592, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-sentence-oov-ratio");
  std::string::basic_string[abi:ne180100]<0>(v21, "If >= 0: sentences with OOV ratio > this value are rejected.");
  quasar::SystemConfig::Register<float>((uint64_t)v23, (const void **)__p, a1 + 596, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-sentence-oov-count");
  std::string::basic_string[abi:ne180100]<0>(v21, "If >= 0: sentences with OOV count > this value are rejected.");
  quasar::SystemConfig::Register<int>((uint64_t)v23, (const void **)__p, a1 + 604, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-document-length");
  std::string::basic_string[abi:ne180100]<0>(v21, "If > 0: documents with length (UTF8 bytes) > this value are rejected.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 608, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-sentences-per-document");
  std::string::basic_string[abi:ne180100]<0>(v21, "If > 0: documents with number of sentences > this value are rejected.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 612, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-sentence-length");
  std::string::basic_string[abi:ne180100]<0>(v21, "If > 0: sentences with length (UTF8 bytes) > this value are rejected.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 616, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-token-length");
  std::string::basic_string[abi:ne180100]<0>(v21, "If > 0: sentences with token length (UTF8 bytes) > this value are rejected.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 620, (uint64_t)v21, 0, 181, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sanitizer-special-chars-pattern");
  std::string::basic_string[abi:ne180100]<0>(v21, "Override pattern for TextSanitizer mSpecialChars.");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 624, (uint64_t)v21, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "filter-language-list");
  std::string::basic_string[abi:ne180100]<0>(v21, "Comma-separated list of languages to keep using Language ID. Default: model-info.language.split('_')[0]. Example default: 'en' for 'en_US'");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 384, (uint64_t)v21, 0, 188, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "input-type");
  std::string::basic_string[abi:ne180100]<0>(v21, "Format of input data (e.g. ngram-counts). Default: plain-text");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 744, (uint64_t)v21, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "task-name");
  std::string::basic_string[abi:ne180100]<0>(v21, "Name of the task to lookup, e.g., Dictation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 792, (uint64_t)v21, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-chain-name");
  std::string::basic_string[abi:ne180100]<0>(v21, "Name of the decoder for the given task from which to take the bigG FST, e.g., msg");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 72, (uint64_t)v21, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rdar-69947462");
  std::string::basic_string[abi:ne180100]<0>(v21, "Requires approval of <rdar://problem/69947462> [AzulC] New fields in Dictation Personalization dodML");
  quasar::SystemConfig::Register<BOOL>((uint64_t)v23, (const void **)__p, a1 + 840, (uint64_t)v21, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "filter-document-types");
  std::string::basic_string[abi:ne180100]<0>(v21, "A list of document types which will be excluded from training corpus, e.g. typed, dictated");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 848, (uint64_t)v21, 0, 212, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "train-arpa-lm-file");
  std::string::basic_string[abi:ne180100]<0>(v21, "ARPA LM file estimated from training data");
  quasar::SystemConfig::Register<std::string>((uint64_t)v23, (const void **)__p, a1 + 432, (uint64_t)v21, 0, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-examined-words");
  std::string::basic_string[abi:ne180100]<0>(v21, "Maximum number of words that can be investigated or preprocessed");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 580, (uint64_t)v21, 0, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-estimated-examined-words");
  std::string::basic_string[abi:ne180100]<0>(v21, "Maximum number of estimated words that can be investigated or preprocessed");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)v23, (const void **)__p, a1 + 584, (uint64_t)v21, 0, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cjk-characters-per-word");
  std::string::basic_string[abi:ne180100]<0>(v21, "Number of average characters per word in CJK locales");
  quasar::SystemConfig::Register<float>((uint64_t)v23, (const void **)__p, a1 + 600, (uint64_t)v21, 0, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtree((uint64_t)v23, a3, 0, 0);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v23);
}

void sub_1AE0159C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a26);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::loadExternalData(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::locale::id *v18;
  const std::locale::facet *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v24;
  std::string *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string::size_type v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  std::string::size_type v35;
  unsigned int v36;
  std::string v37;
  std::string v38;
  std::string __str;
  _BYTE v40[15];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[23];

  v5 = result;
  v58[20] = *MEMORY[0x1E0C80C00];
  if (*(char *)(result + 431) < 0)
  {
    if (!*(_QWORD *)(result + 416))
      return result;
  }
  else if (!*(_BYTE *)(result + 431))
  {
    return result;
  }
  v6 = quasar::filesystem::exists((char *)(result + 408));
  v7 = quasar::gLogLevel;
  if (!v6 && quasar::gLogLevel >= 1)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"external data file doesn't exist: ", 34);
    v9 = *(char *)(v5 + 431);
    if (v9 >= 0)
      v10 = v5 + 408;
    else
      v10 = *(_QWORD *)(v5 + 408);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 431);
    else
      v11 = *(_QWORD *)(v5 + 416);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
    v7 = quasar::gLogLevel;
  }
  if (v7 >= 4)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Reading external data file ", 27);
    v13 = *(char *)(v5 + 431);
    if (v13 >= 0)
      v14 = v5 + 408;
    else
      v14 = *(_QWORD *)(v5 + 408);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v5 + 431);
    else
      v15 = *(_QWORD *)(v5 + 416);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v41);
  }
  std::ifstream::basic_ifstream(&v41);
  v16 = v41;
  if (!*(_DWORD *)((char *)&v43 + *(_QWORD *)(v41 - 24)))
  {
    v17 = 0;
    memset(&__str, 0, sizeof(__str));
    v18 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v41 + *(_QWORD *)(v16 - 24)));
      v19 = std::locale::use_facet((const std::locale *)&v38, v18);
      v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)&v38);
      v21 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (uint64_t)&__str, v20);
      if ((*((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 32) & 5) != 0)
        break;
      memset(&v38, 0, sizeof(v38));
      if (a2)
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          size = __str.__r_.__value_.__l.__size_;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          v24 = (unsigned __int8 *)p_str + size;
          v25 = p_str;
LABEL_30:
          v26 = 0;
          while (v25->__r_.__value_.__s.__data_[0] != asc_1AE262489[v26])
          {
            if (++v26 == 2)
            {
              v25 = (std::string *)((char *)v25 + 1);
              if (v25 != (std::string *)v24)
                goto LABEL_30;
              v25 = (std::string *)v24;
              break;
            }
          }
          v27 = (char *)v25 - (char *)p_str;
          if (v25 == (std::string *)v24)
            v28 = -1;
          else
            v28 = v27;
        }
        else
        {
          v28 = -1;
        }
        std::string::basic_string(&v37, &__str, 0, v28, (std::allocator<char> *)v40);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v38 = v37;
        std::string::basic_string(&v37, &__str, v28 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v40);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v37;
      }
      else
      {
        std::to_string(&v37, v17);
        v29 = *(char *)(a3 + 23);
        if (v29 >= 0)
          v30 = (const std::string::value_type *)a3;
        else
          v30 = *(const std::string::value_type **)a3;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(a3 + 23);
        else
          v31 = *(_QWORD *)(a3 + 8);
        v32 = std::string::insert(&v37, 0, v30, v31);
        v33 = v32->__r_.__value_.__r.__words[0];
        *(_QWORD *)v40 = v32->__r_.__value_.__l.__size_;
        *(_QWORD *)&v40[7] = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v38.__r_.__value_.__r.__words[0] = v33;
        v38.__r_.__value_.__l.__size_ = *(_QWORD *)v40;
        *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v40[7];
        *((_BYTE *)&v38.__r_.__value_.__s + 23) = v34;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        ++v17;
      }
      v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = __str.__r_.__value_.__l.__size_;
      if (v35)
      {
        LODWORD(v37.__r_.__value_.__l.__data_) = 0;
        v36 = quasar::LmData::hash((_QWORD *)v5, (uint64_t)&v38, 1);
        LODWORD(v37.__r_.__value_.__l.__data_) = v36;
        if (*(_BYTE *)(v5 + 996))
        {
          quasar::trim(&__str);
          quasar::LmData::addLine((_DWORD *)v5, (int *)&v37, (uint64_t)&v38, (uint64_t)&__str);
        }
        else
        {
          ++*(_DWORD *)(v5 + 60 * v36 + 116);
        }
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v16 = v41;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v41 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&v41 + *(_QWORD *)(v41 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v42);
  std::istream::~istream();
  result = MEMORY[0x1AF44D094](v58);
  ++*(_DWORD *)(v5 + 304);
  return result;
}

void sub_1AE016044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48)
{
  void *v49;
  void *v50;
  _QWORD *v51;
  const char *v52;
  size_t v53;

  if (a2)
  {
    v49 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      if (quasar::gLogLevel >= 1)
      {
        v50 = v49;
        a47 = 0u;
        a48 = 0u;
        a45 = 0u;
        a46 = 0u;
        a43 = 0u;
        a44 = 0u;
        a41 = 0u;
        a42 = 0u;
        a39 = 0u;
        a40 = 0u;
        a37 = 0u;
        a38 = 0u;
        a35 = 0u;
        a36 = 0u;
        a34 = 0u;
        a32 = 0u;
        a33 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a32, (uint64_t)"C++ exception: ", 15);
        v52 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
        v53 = strlen(v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a32);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      a47 = 0u;
      a48 = 0u;
      a45 = 0u;
      a46 = 0u;
      a43 = 0u;
      a44 = 0u;
      a41 = 0u;
      a42 = 0u;
      a39 = 0u;
      a40 = 0u;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a34 = 0u;
      a32 = 0u;
      a33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a32, (uint64_t)"Unknown exception", 17);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a32);
    }
    __cxa_end_catch();
    JUMPOUT(0x1AE015FFCLL);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmData::~LmData(quasar::LmData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)this = off_1E5D3B970;
  if (quasar::gLogLevel >= 4)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Train data: ", 12);
    quasar::operator<<(v2, (unsigned int *)this + 27);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
    if (quasar::gLogLevel >= 4)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Dev data: ", 10);
      quasar::operator<<(v3, (unsigned int *)this + 42);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
      if (quasar::gLogLevel >= 4)
      {
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v15 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Test data: ", 11);
        quasar::operator<<(v4, (unsigned int *)this + 57);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
        if (quasar::gLogLevel >= 4)
        {
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v15 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
          v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"External test data: ", 20);
          quasar::operator<<(v5, (unsigned int *)this + 72);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1008);
  for (i = 968; i != 872; i -= 24)
  {
    *(_QWORD *)&v15 = (char *)this + i;
    std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v7 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::unique_ptr<quasar::Munger>::reset[abi:ne180100]((void ***)this + 110, 0);
  v8 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 815) < 0)
    operator delete(*((void **)this + 99));
  if (*((char *)this + 767) < 0)
    operator delete(*((void **)this + 93));
  if (*((char *)this + 743) < 0)
    operator delete(*((void **)this + 90));
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  if (*((char *)this + 647) < 0)
    operator delete(*((void **)this + 78));
  v9 = (void *)*((_QWORD *)this + 69);
  if (v9)
  {
    *((_QWORD *)this + 70) = v9;
    operator delete(v9);
  }
  *(_QWORD *)&v15 = (char *)this + 504;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v10 = (void *)*((_QWORD *)this + 60);
  if (v10)
  {
    *((_QWORD *)this + 61) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 57);
  if (v11)
  {
    *((_QWORD *)this + 58) = v11;
    operator delete(v11);
  }
  if (*((char *)this + 455) < 0)
    operator delete(*((void **)this + 54));
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  *(_QWORD *)&v15 = (char *)this + 360;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v12 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v13)
    std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100]((uint64_t)this + 96, v13);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

uint64_t quasar::LmData::hash(_QWORD *a1, uint64_t a2, int a3)
{
  float v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v10;
  uint64_t i;
  float v12;
  _QWORD v15[34];

  v5 = (float)(std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v15, a2) % 0x3E8) / 1000.0;
  if (a3)
  {
    v6 = (float *)a1[60];
    v7 = (float *)a1[61];
    if (v6 == v7)
      return 3;
    if ((char *)v7 - (char *)v6 == 12)
    {
      v8 = *v6;
      if (v5 <= *v6 && v8 > 0.0)
        return 0;
      v12 = v6[1];
      if (v12 <= v8 || v12 <= 0.0 || v5 > v12)
        return 3;
      else
        return 1;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "externalSplitOffsets.size() == NumPartitions");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  v10 = a1[57];
  if (a1[58] - v10 != 12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "splitOffsets.size() == NumPartitions");
    goto LABEL_26;
  }
  for (i = 0; i != 3; ++i)
  {
    if (v5 <= *(float *)(v10 + 4 * i))
      break;
  }
  if (i >= 2)
    return 2;
  else
    return i;
}

void quasar::LmData::sanitize(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v3 = quasar::TextSanitizer::sanitize(*(_QWORD *)(a1 + 352), a2, (uint64_t)__p);
  v4 = *(char *)(a2 + 23);
  if (v3)
  {
    if (v4 < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  else
  {
    if (v4 < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v6;
    HIBYTE(v6) = 0;
    LOBYTE(__p[0]) = 0;
  }
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1AE016808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::LmData::addLine(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void (*v5)(void);
  _OWORD v6[17];

  v4 = a1[26];
  if (v4 == 2)
  {
    v5 = *(void (**)(void))(*(_QWORD *)a1 + 24);
  }
  else
  {
    if (v4 == 1)
    {
      quasar::LmData::addNgramCount((uint64_t)a1, *a2, a4);
      return;
    }
    if (v4)
    {
      memset(v6, 0, sizeof(v6));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unsupported input type ", 23);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
    }
    v5 = *(void (**)(void))(*(_QWORD *)a1 + 24);
  }
  v5();
}

BOOL quasar::LmData::tokenizeSentence(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, &v7);
  v4 = v7;
  v5 = v8;
  if (v7 != v8)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate(a3);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    a3[2] = *(_QWORD *)(v4 + 16);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  v10 = (void **)&v7;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v4 != v5;
}

void sub_1AE016994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::LmData::addNgramCount(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  int v11;
  _OWORD *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  uint64_t v58[2];
  void *v59[2];
  unsigned __int8 v60;
  std::string v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[4];
  __int128 __p;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  if (a2)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "addNgramCounts only support training data currently!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (quasar::gLogLevel >= 6)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"RECEIVED ", 9);
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  }
  v64 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v65, "");
  memset(v71, 0, sizeof(v71));
  v69 = 0u;
  v70 = 0u;
  v68 = 0u;
  v67 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, " \t");
  quasar::splitStringSimple(a3, (uint64_t *)&__p, (uint64_t *)&v62);
  if (SBYTE7(v73) < 0)
    operator delete((void *)__p);
  if (0xAAAAAAAAAAAAAAABLL * ((v63 - (uint64_t)v62) >> 3) <= 1)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to split line \"", 22);
    v53 = *(char *)(a3 + 23);
    if (v53 >= 0)
      v54 = a3;
    else
      v54 = *(_QWORD *)a3;
    if (v53 >= 0)
      v55 = *(unsigned __int8 *)(a3 + 23);
    else
      v55 = *(_QWORD *)(a3 + 8);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\" into n-gram and count.", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v64 = std::stoi((const std::string *)(v63 - 24), 0, 10);
  memset(&v61, 0, sizeof(v61));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v61, v62, (__int128 *)(v63 - 24), 0xAAAAAAAAAAAAAAABLL * ((v63 - 24 - (uint64_t)v62) >> 3));
  size = v61.__r_.__value_.__l.__size_;
  v9 = v61.__r_.__value_.__r.__words[0];
  if (v61.__r_.__value_.__r.__words[0] == v61.__r_.__value_.__l.__size_)
    goto LABEL_51;
  v57 = 0;
  do
  {
    while (1)
    {
      v11 = quasar::lm::SymbolTableData::getAndCheckSymbolId(*(_QWORD *)(a1 + 96), v9);
      if (v11 > 0)
        break;
      if (quasar::gLogLevel >= 2)
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"OOV token encountered in ngram counts. Skipping...", 50);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v9, v64);
      v9 += 24;
      v57 = 1;
      if (v9 == size)
        goto LABEL_92;
    }
    v12 = (_OWORD *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1) >= (unint64_t)v68)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v68 - v67) >> 3) > v16)
        v16 = 0x5555555555555556 * ((uint64_t)(v68 - v67) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v67) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      *(_QWORD *)&v74 = &v68;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v68, v17);
      else
        v18 = 0;
      v19 = &v18[24 * v15];
      *(_QWORD *)&__p = v18;
      *((_QWORD *)&__p + 1) = v19;
      *((_QWORD *)&v73 + 1) = &v18[24 * v17];
      v20 = *(_OWORD *)v9;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v19 = v20;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)&v73 = v19 + 24;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v67, (std::__split_buffer<std::string> *)&__p);
      v14 = (char *)*((_QWORD *)&v67 + 1);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
    }
    else
    {
      v13 = *(_OWORD *)v9;
      *(_QWORD *)(*((_QWORD *)&v67 + 1) + 16) = *(_QWORD *)(v9 + 16);
      *v12 = v13;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v14 = (char *)v12 + 24;
    }
    *((_QWORD *)&v67 + 1) = v14;
    v21 = (char *)v69;
    if ((unint64_t)v69 >= *((_QWORD *)&v69 + 1))
    {
      v23 = (char *)*((_QWORD *)&v68 + 1);
      v24 = (uint64_t)(v69 - *((_QWORD *)&v68 + 1)) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = *((_QWORD *)&v69 + 1) - *((_QWORD *)&v68 + 1);
      if ((uint64_t)(*((_QWORD *)&v69 + 1) - *((_QWORD *)&v68 + 1)) >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69 + 8, v27);
        v23 = (char *)*((_QWORD *)&v68 + 1);
        v21 = (char *)v69;
      }
      else
      {
        v28 = 0;
      }
      v29 = (int *)&v28[4 * v24];
      *v29 = v11;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v30 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *--v29 = v30;
      }
      *((_QWORD *)&v68 + 1) = v29;
      *(_QWORD *)&v69 = v22;
      *((_QWORD *)&v69 + 1) = &v28[4 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_DWORD *)v69 = v11;
      v22 = v21 + 4;
    }
    *(_QWORD *)&v69 = v22;
    v9 += 24;
  }
  while (v9 != size);
  if ((v57 & 1) == 0)
  {
LABEL_51:
    v31 = *((_QWORD *)&v68 + 1);
    if ((_QWORD)v69 == *((_QWORD *)&v68 + 1))
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3);
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = quasar::lm::SymbolTableData::observeTrainingSymbol(*(_QWORD **)(a1 + 96), (int *)(v31 + 4 * v32), (uint64_t *)(v67 + 24 * v32));
        v34 = v33;
        v35 = (char *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1) >= v71[0])
        {
          v37 = (char *)v70;
          v38 = (uint64_t)(*((_QWORD *)&v70 + 1) - v70) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = v71[0] - v70;
          if ((uint64_t)(v71[0] - v70) >> 1 > v39)
            v39 = v40 >> 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v71, v41);
            v35 = (char *)*((_QWORD *)&v70 + 1);
            v37 = (char *)v70;
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[4 * v38];
          *(_DWORD *)v43 = v34;
          v36 = v43 + 4;
          while (v35 != v37)
          {
            v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          *(_QWORD *)&v70 = v43;
          *((_QWORD *)&v70 + 1) = v36;
          v71[0] = &v42[4 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          **((_DWORD **)&v70 + 1) = v33;
          v36 = v35 + 4;
        }
        *((_QWORD *)&v70 + 1) = v36;
        ++v32;
        v31 = *((_QWORD *)&v68 + 1);
        v45 = (uint64_t)(v69 - *((_QWORD *)&v68 + 1)) >> 2;
      }
      while (v45 > v32);
    }
    v46 = v64 * v45;
    *(_DWORD *)(a1 + 140) += v64 * v45;
    *(_DWORD *)(a1 + 992) += v46;
    if (quasar::gLogLevel > 5)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ADDED ", 6);
      v58[0] = (uint64_t)",";
      v58[1] = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v67, v58);
      if ((v60 & 0x80u) == 0)
        v48 = v59;
      else
        v48 = (void **)v59[0];
      if ((v60 & 0x80u) == 0)
        v49 = v60;
      else
        v49 = (uint64_t)v59[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
      if ((char)v60 < 0)
        operator delete(v59[0]);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
    }
    if (!*(_BYTE *)(a1 + 997))
    {
      v51 = *((_QWORD *)&v67 + 1);
      v50 = v67;
      while (v51 != v50)
      {
        if (*(char *)(v51 - 1) < 0)
          operator delete(*(void **)(v51 - 24));
        v51 -= 24;
      }
      *((_QWORD *)&v67 + 1) = v50;
    }
    if (!*(_BYTE *)(a1 + 998))
      *(_QWORD *)&v69 = *((_QWORD *)&v68 + 1);
    std::vector<quasar::lm::TokenStringAndCount>::emplace_back<quasar::lm::TokenStringAndCount>((uint64_t *)(a1 + 896), (uint64_t)&v64);
  }
LABEL_92:
  *(_QWORD *)&__p = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v71[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if (*((_QWORD *)&v68 + 1))
  {
    *(_QWORD *)&v69 = *((_QWORD *)&v68 + 1);
    operator delete(*((void **)&v68 + 1));
  }
  *(_QWORD *)&__p = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v66 < 0)
    operator delete(v65);
}

void sub_1AE017234()
{
  __cxa_end_catch();
  JUMPOUT(0x1AE0172A4);
}

void sub_1AE017240(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    operator delete(__p);
  JUMPOUT(0x1AE0172B4);
}

void sub_1AE017258()
{
  JUMPOUT(0x1AE0172B4);
}

void sub_1AE017260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a39);
  JUMPOUT(0x1AE0172BCLL);
}

void sub_1AE017278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__split_buffer<std::wstring> *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a39);
  JUMPOUT(0x1AE017294);
}

void sub_1AE017290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, void **);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  va_copy((va_list)v7, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v11, va2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  quasar::lm::TokenStringAndCount::~TokenStringAndCount((quasar::lm::TokenStringAndCount *)va3);
  _Unwind_Resume(a1);
}

unint64_t std::vector<quasar::lm::TokenStringAndCount>::emplace_back<quasar::lm::TokenStringAndCount>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v8 = (uint64_t)(v6 - *a1) >> 7;
    if ((unint64_t)(v8 + 1) >> 57)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 6;
    if (v9 >> 6 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = &v12[128 * v8];
    v17 = &v12[128 * v11];
    std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(v5, (uint64_t)v15, a2);
    v16 = v15 + 128;
    std::vector<quasar::lm::TokenStringAndCount>::__swap_out_circular_buffer(a1, &v14);
    v7 = a1[1];
    std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 128;
    a1[1] = v6 + 128;
  }
  a1[1] = v7;
  return v7 - 128;
}

void sub_1AE0173C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::lm::TokenStringAndCount::~TokenStringAndCount(quasar::lm::TokenStringAndCount *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t quasar::LmData::mapSymbols(uint64_t a1, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::string *__str;
  uint64_t v48;
  void **v49;
  std::vector<std::string> *v50;
  _BYTE __v[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string v66;

  *a4 = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v49 = (void **)(a3 + 7);
    v50 = (std::vector<std::string> *)(a3 + 4);
    __str = (std::string *)(a1 + 48);
    v48 = (uint64_t)(a3 + 6);
    v46 = (uint64_t)(a3 + 9);
    while (1)
    {
      v10 = (__int128 *)(v5 + 24 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v66.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v11;
      }
      v12 = quasar::lm::SymbolTableData::getAndCheckSymbolId(*(_QWORD *)(a1 + 96), (uint64_t)&v66);
      v13 = v12;
      if (!v9 && v12 == *(_DWORD *)(*(_QWORD *)(a1 + 96) + 80))
        break;
      if (-1 - 0x5555555555555555 * ((a2[1] - *a2) >> 3) == v9 && v12 == *(_DWORD *)(*(_QWORD *)(a1 + 96) + 84))
        break;
      if (v12 > 0)
        goto LABEL_11;
      ++*a4;
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v66, *(unsigned int *)a3);
      if (*(int *)(a1 + 8) < 1)
        break;
      std::string::operator=(&v66, __str);
      v13 = *(_DWORD *)(a1 + 8);
      v18 = a3[8];
      if (a3[7] != v18 && *(_DWORD *)(v18 - 4) == v13)
        break;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
      {
LABEL_11:
        v14 = a3[5];
        v15 = a3[6];
        if (v14 >= v15)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v50->__begin_) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)v50->__begin_) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v21;
          *(_QWORD *)&__v[32] = v48;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v48, v23);
          else
            v24 = 0;
          v25 = &v24[24 * v20];
          *(_QWORD *)__v = v24;
          *(_QWORD *)&__v[8] = v25;
          *(_QWORD *)&__v[24] = &v24[24 * v23];
          v26 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *((_QWORD *)v25 + 2) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
          *(_OWORD *)v25 = v26;
          memset(&v66, 0, sizeof(v66));
          *(_QWORD *)&__v[16] = v25 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(v50, (std::__split_buffer<std::string> *)__v);
          v17 = a3[5];
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        }
        else
        {
          v16 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *(_QWORD *)(v14 + 16) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
          *(_OWORD *)v14 = v16;
          memset(&v66, 0, sizeof(v66));
          v17 = v14 + 24;
          a3[5] = v14 + 24;
        }
        a3[5] = v17;
        v28 = (char *)a3[8];
        v27 = a3[9];
        if ((unint64_t)v28 >= v27)
        {
          v30 = (char *)*v49;
          v31 = (v28 - (_BYTE *)*v49) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v27 - (_QWORD)v30;
          if (v33 >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v46, v34);
            v30 = (char *)a3[7];
            v28 = (char *)a3[8];
          }
          else
          {
            v35 = 0;
          }
          v36 = (int *)&v35[4 * v31];
          *v36 = v13;
          v29 = v36 + 1;
          while (v28 != v30)
          {
            v37 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *--v36 = v37;
          }
          a3[7] = v36;
          a3[8] = v29;
          a3[9] = &v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_DWORD *)v28 = v13;
          v29 = v28 + 4;
        }
        v19 = 0;
        a3[8] = v29;
      }
      else
      {
        v19 = 1;
      }
LABEL_46:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((v19 | 4) != 4)
        return 0;
      ++v9;
      v5 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9)
        goto LABEL_50;
    }
    v19 = 4;
    goto LABEL_46;
  }
LABEL_50:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[5] - a3[4]) >> 3) == (uint64_t)(a3[8] - a3[7]) >> 2)
    return 1;
  if (quasar::gLogLevel >= 1)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    v41 = a3[1];
    v40 = a3 + 1;
    v39 = v41;
    v42 = *((char *)v40 + 23);
    if (v42 >= 0)
      v43 = (uint64_t)v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *((unsigned __int8 *)v40 + 23);
    else
      v44 = v40[1];
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" : number of tokens and symbolIds don't match", 45);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__v);
  }
  return 0;
}

void sub_1AE017870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::addTokenizedSentence(uint64_t a1, unsigned int a2, std::string *a3, uint64_t a4, _DWORD *a5, uint64_t a6, unsigned int a7, _DWORD *a8)
{
  std::string *v14;
  uint64_t v15;
  char *i;
  std::string::size_type size;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  _QWORD *v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  double Latitude;
  double Weight;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int64x2_t v61;
  unsigned int v63;
  __int128 *v64[3];
  void *__p[2];
  char v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  __int128 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  char v76;
  int64x2_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unsigned int v94;
  std::string v95;
  __int16 v96;
  uint64_t v97;
  void *v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  __int128 **v105;

  v14 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "");
  memset(v104, 0, sizeof(v104));
  v103 = 0u;
  v102 = 0u;
  v101 = 0u;
  v100 = 0u;
  std::string::operator=(v14, a3);
  v97 = a7;
  v96 = 0;
  if (a2 != 3)
  {
    v15 = *(_QWORD *)(a1 + 880);
    if (v15)
      quasar::Munger::munge(v15, (uint64_t *)a4, (_BYTE *)&v96 + 1, &v96);
  }
  v63 = a2;
  memset(&v95, 0, sizeof(v95));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, *(__int128 **)a4, *(__int128 **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  if (*(_BYTE *)(a1 + 1000))
  {
    size = v95.__r_.__value_.__l.__size_;
    for (i = (char *)v95.__r_.__value_.__r.__words[0]; i != (char *)size; i += 24)
    {
      v72 = i;
      v18 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1008, (unsigned __int8 *)i, (uint64_t)&std::piecewise_construct, (__int128 **)&v72);
      ++*((_DWORD *)v18 + 10);
    }
  }
  v94 = 0;
  if ((quasar::LmData::mapSymbols(a1, (uint64_t *)a4, &v97, &v94) & 1) == 0)
    goto LABEL_27;
  v19 = *(_QWORD *)a4;
  v20 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 == v20 || *((_QWORD *)&v101 + 1) == (_QWORD)v102 && (_QWORD)v100 == *((_QWORD *)&v100 + 1))
  {
    if (quasar::gLogLevel >= 6)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to empty", 19);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
    }
    a5[2] += a7;
    if (HIBYTE(v96))
    {
      v25 = 0;
      a5[3] += a7;
      goto LABEL_29;
    }
    goto LABEL_54;
  }
  if (v63 != 3)
  {
    v21 = v94;
    v22 = (float)v94 / (float)(0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    if (quasar::gLogLevel >= 6)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"oovRatio=", 9);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" numTokensOOV=", 14);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
    }
    v24 = *(float *)(a1 + 596);
    if (v24 >= 0.0 && v22 > v24)
    {
      if (quasar::gLogLevel >= 6)
      {
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to high oov ratio", 28);
LABEL_26:
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    v26 = *(_DWORD *)(a1 + 604);
    if ((v26 & 0x80000000) == 0 && v21 > v26)
    {
      if (quasar::gLogLevel >= 6)
      {
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to high oov count", 28);
        goto LABEL_26;
      }
LABEL_27:
      v25 = 0;
LABEL_28:
      a5[2] += a7;
      goto LABEL_29;
    }
    if (*(_QWORD *)(a1 + 888))
    {
      quasar::LmInfo::LmInfo((uint64_t)&v72, 1, (__int128 *)a3);
      v61 = vdupq_n_s64(0x4076800000000000uLL);
      v77 = v61;
      Latitude = quasar::Location::getLatitude((quasar::Location *)&v77);
      v77 = v61;
      Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)&v77);
      v30 = *(_QWORD *)(a1 + 888);
      v77 = 0uLL;
      *(_QWORD *)&v78 = 0;
      v70 = v61;
      *(_QWORD *)&v71 = quasar::Location::knownOrFallback((uint64_t)&v70, Latitude, Weight);
      *((_QWORD *)&v71 + 1) = v31;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      memset(v64, 0, sizeof(v64));
      BYTE2(v60) = 0;
      LOWORD(v60) = 0;
      v32 = quasar::FstLmScorer::computeLmScore(v30, (uint64_t)&v77, &v71, (__int128 *)(a1 + 72), (__int128 **)&v100, 0, (uint64_t)&v72, (_QWORD **)&v67, 0, (__int128 *)__p, (int **)&v101 + 1, v60, 0, v64, 1);
      v105 = v64;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (v66 < 0)
        operator delete(__p[0]);
      __p[0] = &v67;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v67 = (const char *)&v77;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (v76)
        v33 = v32;
      else
        v33 = 0;
      if (!v33 || v73 == v74)
      {
        if (quasar::gLogLevel >= 6)
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to no ppl", 20);
          goto LABEL_52;
        }
LABEL_53:
        a5[2] += a7;
        quasar::LmInfo::~LmInfo((quasar::LmInfo *)&v72);
LABEL_54:
        v25 = 0;
        goto LABEL_29;
      }
      v34 = expf((float)-v75 / (float)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v74 - v73) >> 3)));
      if (quasar::gLogLevel >= 6)
      {
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"ppl=", 4);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
      }
      v35 = *(float *)(a1 + 588);
      if (v35 >= 0.0 && v34 < v35)
      {
        if (quasar::gLogLevel >= 6)
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to low ppl", 21);
LABEL_52:
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
          goto LABEL_53;
        }
        goto LABEL_53;
      }
      v36 = *(float *)(a1 + 592);
      if (v36 >= 0.0 && v34 > v36)
      {
        if (quasar::gLogLevel < 6)
          goto LABEL_53;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Reject due to high ppl", 22);
        goto LABEL_52;
      }
      quasar::LmInfo::~LmInfo((quasar::LmInfo *)&v72);
    }
  }
  v37 = *(unsigned int *)(a1 + 576);
  v39 = *((_QWORD *)&v101 + 1);
  v38 = v102;
  if ((_DWORD)v37)
  {
    if ((unint64_t)*(unsigned int *)(a1 + 992) + ((uint64_t)(v102 - *((_QWORD *)&v101 + 1)) >> 2) >= v37)
    {
      v25 = 0;
      *(_BYTE *)(a1 + 996) = 0;
      goto LABEL_28;
    }
    v40 = (uint64_t)(v102 - *((_QWORD *)&v101 + 1)) >> 2;
  }
  else
  {
    v40 = (uint64_t)(v102 - *((_QWORD *)&v101 + 1)) >> 2;
  }
  a5[9] += v94 * a7;
  v41 = v40 * a7;
  if (a8)
    *a8 = v41;
  a5[8] += v41;
  *(_DWORD *)(a1 + 992) += v41;
  ++a5[7];
  a5[5] += a7;
  if ((_BYTE)v96)
    a5[6] += a7;
  if (!v63)
  {
    if (v38 != v39)
    {
      v42 = 0;
      v38 = v39;
      do
      {
        v43 = quasar::lm::SymbolTableData::observeTrainingSymbol(*(_QWORD **)(a1 + 96), (int *)(v38 + 4 * v42), (uint64_t *)(v100 + 24 * v42));
        v44 = v43;
        v45 = (char *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1) >= *(_QWORD *)&v104[0])
        {
          v47 = (char *)v103;
          v48 = (uint64_t)(*((_QWORD *)&v103 + 1) - v103) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = *(_QWORD *)&v104[0] - v103;
          if ((uint64_t)(*(_QWORD *)&v104[0] - v103) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v104, v51);
            v45 = (char *)*((_QWORD *)&v103 + 1);
            v47 = (char *)v103;
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = v44;
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          *(_QWORD *)&v103 = v53;
          *((_QWORD *)&v103 + 1) = v46;
          *(_QWORD *)&v104[0] = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          **((_DWORD **)&v103 + 1) = v43;
          v46 = v45 + 4;
        }
        *((_QWORD *)&v103 + 1) = v46;
        ++v42;
        v38 = *((_QWORD *)&v101 + 1);
      }
      while (v42 < (uint64_t)(v102 - *((_QWORD *)&v101 + 1)) >> 2);
    }
    if (!*(_BYTE *)(a1 + 998))
      *(_QWORD *)&v102 = v38;
  }
  if (quasar::gLogLevel >= 6)
  {
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"ADDED ", 6);
    v67 = ",";
    v68 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v100, (uint64_t *)&v67);
    if (v74 >= 0)
      v56 = &v72;
    else
      v56 = v72;
    if (v74 >= 0)
      v57 = HIBYTE(v74);
    else
      v57 = v73;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
    if (SHIBYTE(v74) < 0)
      operator delete(v72);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
  }
  if (!*(_BYTE *)(a1 + 997))
  {
    v59 = *((_QWORD *)&v100 + 1);
    v58 = v100;
    while (v59 != v58)
    {
      if (*(char *)(v59 - 1) < 0)
        operator delete(*(void **)(v59 - 24));
      v59 -= 24;
    }
    *((_QWORD *)&v100 + 1) = v58;
  }
  if (*(_BYTE *)(a1 + 999))
  {
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)v104 + 8));
    *(std::string *)((char *)v104 + 8) = v95;
    memset(&v95, 0, sizeof(v95));
  }
  std::vector<quasar::lm::TokenStringAndCount>::emplace_back<quasar::lm::TokenStringAndCount>((uint64_t *)(a1 + 24 * v63 + 896), (uint64_t)&v97);
  v25 = 1;
LABEL_29:
  v77.i64[0] = (uint64_t)&v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  v77.i64[0] = (uint64_t)v104 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if ((_QWORD)v103)
  {
    *((_QWORD *)&v103 + 1) = v103;
    operator delete((void *)v103);
  }
  if (*((_QWORD *)&v101 + 1))
  {
    *(_QWORD *)&v102 = *((_QWORD *)&v101 + 1);
    operator delete(*((void **)&v101 + 1));
  }
  v77.i64[0] = (uint64_t)&v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (v99 < 0)
    operator delete(v98);
  return v25;
}

void sub_1AE0182E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a47);
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)&a34);
  a47 = (uint64_t)&STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  quasar::lm::TokenStringAndCount::~TokenStringAndCount((quasar::lm::TokenStringAndCount *)(v47 - 248));
  _Unwind_Resume(a1);
}

_QWORD *quasar::LmData::serialize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t (**v7)();
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v16[0] = a3;
  v16[1] = v5;
  v35 = 0;
  v6 = *(_DWORD *)(a1 + 104);
  if (v6 == 2)
  {
    v7 = &off_1E5D3FB90;
  }
  else if (v6 == 1)
  {
    v7 = &off_1E5D3FBE8;
  }
  else
  {
    if (v6)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unsupported input type ", 23);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v17);
    }
    v7 = &off_1E5D3FB38;
  }
  *(_QWORD *)&v17 = v7;
  *((_QWORD *)&v17 + 1) = a3;
  *(_QWORD *)&v18 = v16;
  *((_QWORD *)&v18 + 1) = &v17;
  std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::swap[abi:ne180100](&v17, v34);
  v9 = (__int128 *)*((_QWORD *)&v18 + 1);
  if (*((__int128 **)&v18 + 1) == &v17)
  {
    v10 = 4;
    v9 = &v17;
    goto LABEL_11;
  }
  if (*((_QWORD *)&v18 + 1))
  {
    v10 = 5;
LABEL_11:
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v9 + 8 * v10))(v9, v8);
  }
  v11 = a1 + 24 * a2;
  v12 = *(_QWORD *)(v11 + 896);
  v13 = *(_QWORD *)(v11 + 904);
  while (v12 != v13)
  {
    if (!v35)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, uint64_t))(*v35 + 48))(v35, v12);
    v12 += 128;
  }
  result = v35;
  if (v35 == v34)
  {
    v15 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v15))(result, v8);
}

void sub_1AE0185CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmData::getSentences(uint64_t a1, unsigned int a2)
{
  return a1 + 24 * a2 + 896;
}

double quasar::LmData::parseCountPhrase(std::string *__str, uint64_t a2, int *a3)
{
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  std::string *v9;
  uint64_t v10;
  int64_t v11;
  double result;
  _QWORD *v13;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_18;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v7 = __str;
    if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
      goto LABEL_18;
  }
  v8 = (unsigned __int8 *)v7 + size;
  v9 = v7;
LABEL_6:
  v10 = 0;
  while (v9->__r_.__value_.__s.__data_[0] != asc_1AE262489[v10])
  {
    if (++v10 == 2)
    {
      v9 = (std::string *)((char *)v9 + 1);
      if (v9 == (std::string *)v8)
        goto LABEL_18;
      goto LABEL_6;
    }
  }
  if (v9 == (std::string *)v8 || (v11 = (char *)v9 - (char *)v7, (char *)v9 - (char *)v7 == -1))
  {
LABEL_18:
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid input sentence: ", 24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)__str);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string((std::string *)__p, __str, 0, (char *)v9 - (char *)v7, (std::allocator<char> *)&v31);
  *a3 = std::stoi((const std::string *)__p, 0, 10);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::string::basic_string((std::string *)__p, __str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v15;
  return result;
}

uint64_t quasar::LmData::setInputType(uint64_t result, int a2)
{
  if (a2 == 4)
    a2 = *(_DWORD *)(result + 104);
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t quasar::LmData::loadFromTextFile(quasar::LmData *a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD v18[17];

  v10 = (_QWORD *)operator new();
  std::ifstream::basic_ifstream(v10);
  if (*(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32))
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Can't open ", 11);
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" for reading", 12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  v17 = v10;
  quasar::LmData::loadFromStream(a1, &v17, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
}

void sub_1AE0189B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void quasar::LmData::loadFromStream(quasar::LmData *a1, _QWORD **a2, int *a3, uint64_t a4, int a5)
{
  void *__p[2];
  __int128 v10;
  void *v11[3];
  char v12;

  std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](v11, *a2);
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  quasar::LmData::loadFromIterator<std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>>(a1, (uint64_t)v11, __p, a3, a4, a5);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  if (v12 < 0)
    operator delete(v11[1]);
}

void sub_1AE018A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::LmData::loadFromStream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::loadFromIterator<std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>>(quasar::LmData *a1, uint64_t a2, void **a3, int *a4, uint64_t a5, int a6)
{
  void *v10;
  int v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type size;
  void *v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  std::string::size_type v40;
  void *v41;
  char v42;
  uint64_t v43;
  std::string v44;

  if (a6 == 4)
    a6 = *((_DWORD *)a1 + 26);
  *((_DWORD *)a1 + 26) = a6;
  *((_DWORD *)a1 + 15 * *a4 + 27) = a6;
  v10 = *(void **)a2;
  v23[0] = *(void **)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v23[1], *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v10 = v23[0];
  }
  else
  {
    *(_OWORD *)&v23[1] = *(_OWORD *)(a2 + 8);
    v23[3] = *(void **)(a2 + 24);
  }
  if (v10 != *a3)
  {
    v11 = 0;
    do
    {
      std::to_string(&v44, v11);
      v12 = *(char *)(a5 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)a5;
      else
        v13 = *(const std::string::value_type **)a5;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a5 + 23);
      else
        v14 = *(_QWORD *)(a5 + 8);
      v15 = std::string::insert(&v44, 0, v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v40 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      quasar::LmData::addLine(a1, a4, (uint64_t)__p, (uint64_t)&v23[1]);
      if (SHIBYTE(v40) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v17 = quasar::internal::operator>>((_QWORD *)v23[0], (uint64_t)&v23[1]);
      if ((*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 5) != 0)
      {
        v18 = 0;
        v23[0] = 0;
      }
      else
      {
        v18 = v23[0];
      }
      ++v11;
    }
    while (v18 != *a3);
  }
  if (SHIBYTE(v23[3]) < 0)
    operator delete(v23[1]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  quasar::LmData::getMetrics(a1, 1, (quasar::PTree *)v23);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v23, __p, 1);
  quasar::PTree::~PTree((quasar::PTree *)v23);
  if (quasar::gLogLevel >= 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    memset(v23, 0, sizeof(v23));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"data metrics ", 13);
    std::stringbuf::str();
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v44;
    else
      v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v23);
  }
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v42 < 0)
    operator delete(v41);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v43);
}

void sub_1AE018D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 65) < 0)
    operator delete(*(void **)(v51 - 88));
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::getWordFrequency(quasar::LmData *this)
{
  return (uint64_t)this + 1008;
}

uint64_t quasar::LmData::getSymbolTableData(quasar::LmData *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t quasar::LmData::getSources(quasar::LmData *this)
{
  return (uint64_t)this + 504;
}

uint64_t quasar::LmData::getQueryLimit(quasar::LmData *this)
{
  return *((unsigned int *)this + 132);
}

double quasar::LmData::getMaxAgeSeconds(quasar::LmData *this)
{
  return *((double *)this + 67);
}

double quasar::LmData::getMinAgeSeconds(quasar::LmData *this)
{
  return *((double *)this + 68);
}

void quasar::LmData::getMetrics(quasar::LmData *this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  uint64_t v6;
  quasar::LmData::Stats *v7;
  _BYTE v8[64];
  void *__p[2];
  char v10;

  quasar::PTree::PTree(a3);
  v6 = 0;
  v7 = (quasar::LmData *)((char *)this + 108);
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &quasar::EvaluationTask::dataSetOptions[v6]);
    quasar::LmData::Stats::ptree(v7, a2, *((unsigned __int8 *)this + 840), (quasar::PTree *)v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v8, 1);
    quasar::PTree::~PTree((quasar::PTree *)v8);
    if (v10 < 0)
      operator delete(__p[0]);
    v6 += 20;
    v7 = (quasar::LmData::Stats *)((char *)v7 + 60);
  }
  while (v6 != 80);
}

void sub_1AE018EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree *v23;

  quasar::PTree::~PTree((quasar::PTree *)&a10);
  if (a23 < 0)
    operator delete(__p);
  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

BOOL quasar::LmData::hasEnoughData(quasar::LmData *this)
{
  _DWORD *v1;
  unint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (_DWORD *)*((_QWORD *)this + 69);
  if (*((_DWORD *)this + 35) < *v1)
    return 0;
  v3 = 0;
  v4 = v1 + 1;
  v5 = (unsigned int *)((char *)this + 200);
  do
  {
    v6 = v3;
    if (v3 == 3)
      break;
    v7 = *v5;
    v5 += 15;
    v8 = v4[v3++];
  }
  while (v7 >= v8);
  return v6 > 2;
}

uint64_t quasar::LmData::hasRoomForMoreData(quasar::LmData *this)
{
  return *((unsigned __int8 *)this + 996);
}

void quasar::LmData::disallowMoreData(quasar::LmData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[17];

  *((_BYTE *)this + 996) = 0;
  v2 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<quasar::Munger>::reset[abi:ne180100]((void ***)this + 110, 0);
  v5 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (quasar::gLogLevel >= 4)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"numSymbolsInTrainSet ", 21);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v6);
  }
}

void sub_1AE019080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a2)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a2 + 18));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a2 + 13));
    v3 = (void *)a2[6];
    if (v3)
      operator delete(v3);
    v4 = (void *)a2[3];
    if (v4)
      operator delete(v4);
    v5 = a2[2];
    a2[2] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    JUMPOUT(0x1AF44D190);
  }
}

__n128 std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v3 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  return result;
}

uint64_t std::vector<quasar::lm::TokenStringAndCount>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 128;
      std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(a1, v7 - 128, v9);
      v7 = *((_QWORD *)&v16 + 1) - 128;
      *((_QWORD *)&v16 + 1) -= 128;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v3, v1);
      v1 += 128;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::lm::TokenStringAndCount>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::lm::TokenStringAndCount>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 128;
    std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v4, i - 128);
  }
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3FB38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3FB38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  const std::locale::facet *v3;
  std::locale v5;

  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(_QWORD ****)(a1 + 16), a2);
  std::ios_base::getloc((const std::ios_base *)(**(_QWORD **)(a1 + 8) + *(_QWORD *)(***(_QWORD ***)(a1 + 8) - 24)));
  v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1AE0194CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

_QWORD *quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(_QWORD ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *result;
  _OWORD v11[17];

  v2 = *(_QWORD *)(a2 + 80);
  v3 = *(_QWORD *)(a2 + 88);
  if (v2 == v3)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Unable to serialize record.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  v6 = 0;
  do
  {
    if (v6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(**a1, (uint64_t)" ", 1);
      v2 = *(_QWORD *)(a2 + 80);
      v3 = *(_QWORD *)(a2 + 88);
    }
    if (v6 >= (v3 - v2) >> 2)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    v7 = **a1;
    v8 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**a1[1] + 32))(*a1[1], *(unsigned int *)(v2 + 4 * v6));
    v9 = strlen(v8);
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    ++v6;
    v2 = *(_QWORD *)(a2 + 80);
    v3 = *(_QWORD *)(a2 + 88);
  }
  while (v6 < (v3 - v2) >> 2);
  return result;
}

_QWORD *std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1AE0197BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3FB90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3FB90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale v7;

  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\t", 1);
  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(_QWORD ****)(a1 + 16), a2);
  std::ios_base::getloc((const std::ios_base *)(**(_QWORD **)(a1 + 8) + *(_QWORD *)(***(_QWORD ***)(a1 + 8) - 24)));
  v5 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1AE0198E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3FBE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3FBE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  const std::locale::facet *v3;
  std::locale v5;

  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(_QWORD ****)(a1 + 16), a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(**(_QWORD ***)(a1 + 8), (uint64_t)"\t", 1);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)(**(_QWORD **)(a1 + 8) + *(_QWORD *)(***(_QWORD ***)(a1 + 8) - 24)));
  v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1AE019A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

_QWORD *std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v3 = quasar::internal::operator>>(a2, (uint64_t)(a1 + 1));
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    *a1 = 0;
  return a1;
}

void sub_1AE019B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::internal::operator>>(_QWORD *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  std::locale v7;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v7);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2, v5);
}

void sub_1AE019BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_1AE019D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a25 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AE019E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AE019F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AE01A198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v28, 0x10B3C40067A2A16);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a26);

  _Unwind_Resume(a1);
}

void sub_1AE01A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  uint64_t v17;

  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a16;
  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::__tree<std::string>::destroy(v17 - 64, *(char **)(v17 - 56));

  _Unwind_Resume(a1);
}

void sub_1AE01A3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AE01A474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AE01A504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AE01A5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::CommandTagging>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::CommandTagging::~CommandTagging(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::vector<quasar::CommandTagging>>::__init_with_size[abi:ne180100]<std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AE01A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v4, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AE01A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void kaldi::PrintableRxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (_BYTE *)a1;
      if (*(_BYTE *)(a1 + 23) != 1)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard input");
    return;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_9;
  if (v3 != 1)
    goto LABEL_10;
  v2 = *(_BYTE **)a1;
LABEL_8:
  if (*v2 == 45)
    goto LABEL_9;
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

void kaldi::PrintableWxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (_BYTE *)a1;
      if (*(_BYTE *)(a1 + 23) != 1)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard output");
    return;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_9;
  if (v3 != 1)
    goto LABEL_10;
  v2 = *(_BYTE **)a1;
LABEL_8:
  if (*v2 == 45)
    goto LABEL_9;
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

uint64_t kaldi::ClassifyWxfilename(uint64_t a1)
{
  char *v1;
  int v2;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[34];

  if (*(char *)(a1 + 23) >= 0)
    v1 = (char *)a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  if (!*v1)
    return 2;
  if (v2 == 124)
    return 3;
  if (v2 == 45)
  {
    if (v1[1])
    {
      v4 = 45;
      goto LABEL_12;
    }
    return 2;
  }
  v4 = (char)v2;
  if ((char)v2 < 0)
  {
    if (!__maskrune((char)v2, 0x4000uLL))
      goto LABEL_15;
LABEL_19:
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
    v9 = *(char *)(a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    goto LABEL_26;
  }
LABEL_12:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x4000) != 0)
    goto LABEL_19;
LABEL_15:
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL))
      goto LABEL_19;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_19;
  }
  v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like a wspecifier instead of a filename \"", 58);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v10 = a1;
      else
        v10 = *(_QWORD *)a1;
      if (v19 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
LABEL_26:
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_27:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      return 0;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_27;
  }
  v20 = v1 - 1;
  do
  {
    v21 = v20[2];
    ++v20;
  }
  while (v21);
  v22 = *v20;
  if (v22 == 124)
    return 0;
  if ((v22 & 0x80000000) != 0 ? __maskrune(v22, 0x4000uLL) : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x4000)
    return 0;
  if ((*v20 & 0x80000000) == 0
    && (v24 = *v20, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1)
        break;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) == 0)
        break;
      v29 = *--v20;
      v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    return v24 != 58;
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify wxfilename with pipe symbol in the wrong place (pipe without | at the beginning?): ", 102);
      v26 = *(char *)(a1 + 23);
      if (v26 >= 0)
        v27 = a1;
      else
        v27 = *(_QWORD *)a1;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a1 + 23);
      else
        v28 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_27;
    }
    return 1;
  }
}

void sub_1AE01AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ClassifyRxfilename(uint64_t a1)
{
  char *v1;
  int v2;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[34];

  if (*(char *)(a1 + 23) >= 0)
    v1 = (char *)a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  if (!*v1)
    return 2;
  if (v2 == 124)
    return 0;
  if (v2 == 45)
  {
    if (v1[1])
    {
      v4 = 45;
      goto LABEL_11;
    }
    return 2;
  }
  v4 = (char)v2;
  if (((char)v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x4000) != 0)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__maskrune((char)v2, 0x4000uLL))
    goto LABEL_18;
LABEL_14:
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL))
    {
LABEL_18:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
        v9 = *(char *)(a1 + 23);
        if (v9 >= 0)
          v10 = a1;
        else
          v10 = *(_QWORD *)a1;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(a1 + 23);
        else
          v11 = *(_QWORD *)(a1 + 8);
LABEL_25:
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_26:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_18;
  }
  v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like an rspecifier instead of a filename \"", 59);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v10 = a1;
      else
        v10 = *(_QWORD *)a1;
      if (v19 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      goto LABEL_25;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_26;
  }
  v20 = v1 - 1;
  do
  {
    v21 = v20[2];
    ++v20;
  }
  while (v21);
  v22 = *v20;
  if (v22 == 124)
    return 4;
  if ((v22 & 0x80000000) != 0)
    v23 = __maskrune(v22, 0x4000uLL);
  else
    v23 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x4000;
  if (v23)
    return 0;
  if ((*v20 & 0x80000000) == 0
    && (v24 = *v20, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1)
        break;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) == 0)
        break;
      v29 = *--v20;
      v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    if (v24 == 58)
      return 3;
    else
      return 1;
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify rxfilename with pipe symbol in the wrong place (pipe without | at the end?): ", 96);
      v26 = *(char *)(a1 + 23);
      if (v26 >= 0)
        v27 = a1;
      else
        v27 = *(_QWORD *)a1;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a1 + 23);
      else
        v28 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_26;
    }
    return 1;
  }
}

void sub_1AE01AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::FileOutputImpl::~FileOutputImpl(kaldi::FileOutputImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_QWORD *)this = &off_1E5D2A118;
  v2 = (_QWORD *)((char *)this + 32);
  if (*((_QWORD *)this + 20))
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Error closing output file ", 26);
      v8 = *((_QWORD *)this + 1);
      v7 = (char *)this + 8;
      v6 = v8;
      v9 = v7[23];
      if (v9 >= 0)
        v10 = (uint64_t)v7;
      else
        v10 = v6;
      if (v9 >= 0)
        v11 = v7[23];
      else
        v11 = *((_QWORD *)v7 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
  }
  v3 = MEMORY[0x1E0DE4F48];
  v4 = *MEMORY[0x1E0DE4F48];
  *((_QWORD *)this + 4) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x1AF44CA70]((char *)this + 40);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 448);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  kaldi::FileOutputImpl::~FileOutputImpl(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::StandardOutputImpl::~StandardOutputImpl(kaldi::StandardOutputImpl *this)
{
  fst *v1;
  _QWORD *v2;
  _QWORD v3[34];

  *(_QWORD *)this = &off_1E5D2A768;
  if (*((_BYTE *)this + 8))
  {
    fst::cout(this);
    v1 = (fst *)std::ostream::flush();
    v2 = (_QWORD *)fst::cout(v1);
    if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error writing to standard output", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
    }
  }
}

{
  kaldi::StandardOutputImpl::~StandardOutputImpl(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::PipeOutputImpl::~PipeOutputImpl(kaldi::PipeOutputImpl *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  std::string v5;
  std::string __p;
  _QWORD v7[34];

  *(_QWORD *)this = &off_1E5D2A290;
  if (*((_QWORD *)this + 6) && !kaldi::PipeOutputImpl::Close(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Error writing to pipe ", 22);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v5 = *(std::string *)((char *)this + 8);
    kaldi::PrintableWxfilename((uint64_t)&v5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  kaldi::PipeOutputImpl::~PipeOutputImpl(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::FileInputImpl::~FileInputImpl(kaldi::FileInputImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D29DB8;
  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 1) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70]((char *)this + 24);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 432);
}

{
  kaldi::FileInputImpl::~FileInputImpl(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::StandardInputImpl::~StandardInputImpl(kaldi::StandardInputImpl *this)
{
  JUMPOUT(0x1AF44D190);
}

void kaldi::PipeInputImpl::~PipeInputImpl(void **this)
{
  *this = &off_1E5D29F98;
  if (this[6])
    kaldi::PipeInputImpl::Close((kaldi::PipeInputImpl *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  kaldi::PipeInputImpl::~PipeInputImpl(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 5) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)this = &off_1E5D2A7A0;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 40) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70]((char *)this + 56);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 464);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t *kaldi::Output::Output(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string v10;
  std::string __p;
  _QWORD v12[34];

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if ((kaldi::Output::Open(a1, (std::string *)a2, a3, a4) & 1) == 0)
  {
    if (*a1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
      *a1 = 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Error opening output stream ", 28);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v10 = *(std::string *)a2;
    kaldi::PrintableWxfilename((uint64_t)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return a1;
}

void sub_1AE01B630(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Output::Open(uint64_t *a1, std::string *__str, uint64_t a3, int a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t (**v14)();
  std::ios_base *v15;
  uint64_t (**v16)();
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  uint64_t result;
  _QWORD *v22;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v25;
  std::string v26;
  std::string v27;
  std::string __p;
  _QWORD v29[35];

  v8 = *a1;
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    if (*a1)
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
    *a1 = 0;
    if ((v9 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Output::Open(), failed to close output stream: ", 47);
      if (*((char *)a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)a1[1], a1[2]);
      else
        v27 = *(std::string *)(a1 + 1);
      kaldi::PrintableWxfilename((uint64_t)&v27, &__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (uint64_t)&__p);
      std::string::~string(&__p);
      std::string::~string(&v27);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
    }
  }
  std::string::operator=((std::string *)(a1 + 1), __str);
  v10 = kaldi::ClassifyWxfilename((uint64_t)__str);
  switch(v10)
  {
    case 3:
      v17 = operator new();
      v11 = (uint64_t (***)())v17;
      v16 = &off_1E5D2A290;
      *(_QWORD *)v17 = &off_1E5D2A290;
      *(_QWORD *)(v17 + 48) = 0;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      goto LABEL_11;
    case 2:
      v17 = operator new();
      v11 = (uint64_t (***)())v17;
      v16 = &off_1E5D2A768;
      *(_QWORD *)v17 = &off_1E5D2A768;
      *(_BYTE *)(v17 + 8) = 0;
LABEL_11:
      *a1 = v17;
      goto LABEL_12;
    case 1:
      v11 = (uint64_t (***)())operator new();
      bzero(v11 + 4, 0x238uLL);
      *v11 = &off_1E5D2A118;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = 0;
      v12 = MEMORY[0x1E0DE4FB0] + 64;
      v11[56] = (uint64_t (**)())(MEMORY[0x1E0DE4FB0] + 64);
      v13 = *(uint64_t (***)())(MEMORY[0x1E0DE4F48] + 8);
      v14 = *(uint64_t (***)())(MEMORY[0x1E0DE4F48] + 16);
      v11[4] = v13;
      *(_QWORD *)((char *)*(v13 - 3) + (_QWORD)(v11 + 4)) = v14;
      v15 = (std::ios_base *)((char *)*(v11[4] - 3) + (_QWORD)(v11 + 4));
      std::ios_base::init(v15, v11 + 5);
      v15[1].__vftable = 0;
      v15[1].__fmtflags_ = -1;
      v11[4] = (uint64_t (**)())(MEMORY[0x1E0DE4FB0] + 24);
      v11[56] = (uint64_t (**)())v12;
      MEMORY[0x1AF44CA64](v11 + 5);
      *a1 = (uint64_t)v11;
      v16 = *v11;
LABEL_12:
      if ((((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))*v16)(v11, __str, a3) & 1) == 0)
        goto LABEL_46;
      if (!a4)
        return 1;
      v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 8))(*a1);
      if ((_DWORD)a3)
      {
        std::ostream::put();
        std::ostream::put();
      }
      v19 = (char *)v18 + *(_QWORD *)(*v18 - 24);
      if (*((uint64_t *)v19 + 2) <= 6)
        *((_QWORD *)v19 + 2) = 7;
      v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 8))(*a1);
      if (!*(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 32))
        return 1;
LABEL_46:
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
      result = 0;
      *a1 = 0;
      return result;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Invalid output filename format ", 31);
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v26, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      v26 = *__str;
    kaldi::PrintableWxfilename((uint64_t)&v26, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
  }
  return 0;
}

void kaldi::Output::~Output(const std::string::value_type **this)
{
  const std::string::value_type *v2;
  char v3;
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string v7;
  std::string __p;
  _QWORD v9[34];

  v2 = *this;
  if (v2)
  {
    v3 = (*(uint64_t (**)(const std::string::value_type *))(*(_QWORD *)v2 + 16))(v2);
    if (*this)
      (*(void (**)(const std::string::value_type *))(*(_QWORD *)*this + 32))(*this);
    *this = 0;
    if ((v3 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error closing output file ", 26);
      if (*((char *)this + 31) < 0)
        std::string::__init_copy_ctor_external(&v7, this[1], (std::string::size_type)this[2]);
      else
        v7 = *(std::string *)(this + 1);
      kaldi::PrintableWxfilename((uint64_t)&v7, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
  }
  if (*((char *)this + 31) < 0)
    operator delete((void *)this[1]);
}

uint64_t kaldi::Output::Stream(kaldi::Output *this)
{
  uint64_t v1;
  _QWORD v3[34];

  v1 = *(_QWORD *)this;
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Output::Stream() called but not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *kaldi::Input::Input(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  std::string v9;
  _QWORD v10[34];

  *a1 = 0;
  if ((kaldi::Input::OpenInternal(a1, a2, 1, a3) & 1) == 0)
  {
    v6 = a2;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening input stream ", 27);
    if (*(char *)(v6 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
    else
      __p = *(std::string *)v6;
    kaldi::PrintableRxfilename((uint64_t)&__p, &v9);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)&v9);
    std::string::~string(&v9);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::Input::Close(kaldi::Input *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)this = 0;
  }
  return result;
}

uint64_t kaldi::Input::OpenInternal(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string *p_p;
  std::string::size_type size;
  _BYTE *v27;
  std::string v28;
  std::string __p;
  _QWORD v30[35];

  v8 = kaldi::ClassifyRxfilename(a2);
  v9 = *a1;
  if (*a1)
  {
    if (v8 == 3)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v9 = *a1;
      if (v10 == 3)
      {
        if (((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v9)(v9, a2, a3) & 1) != 0)
        {
          if (!a4)
            return 1;
          goto LABEL_20;
        }
LABEL_21:
        if (*a1)
          (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
        result = 0;
        *a1 = 0;
        return result;
      }
      if (!v9)
      {
LABEL_11:
        v27 = a4;
        v12 = (_QWORD *)operator new();
        bzero(v12 + 4, 0x248uLL);
        *v12 = &off_1E5D2A7A0;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        v18 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
        v19 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
        v12[5] = v18;
        v20 = MEMORY[0x1E0DE4FA8];
        v21 = MEMORY[0x1E0DE4FA8] + 64;
        v12[58] = MEMORY[0x1E0DE4FA8] + 64;
        *(_QWORD *)((char *)v12 + *(_QWORD *)(v18 - 24) + 40) = v19;
        v12[6] = 0;
        v22 = (std::ios_base *)((char *)v12 + *(_QWORD *)(v12[5] - 24) + 40);
        std::ios_base::init(v22, v12 + 7);
        v22[1].__vftable = 0;
        v22[1].__fmtflags_ = -1;
        v12[5] = v20 + 24;
        v12[58] = v21;
        MEMORY[0x1AF44CA64](v12 + 7);
LABEL_12:
        a4 = v27;
LABEL_18:
        *a1 = v12;
        if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))*v12)(v12, a2, a3) & 1) != 0)
        {
          if (!a4)
            return 1;
LABEL_20:
          v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
          return kaldi::InitKaldiInputStream(v24, a4);
        }
        goto LABEL_21;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *a1 = 0;
  }
  switch(v8)
  {
    case 1:
      v27 = a4;
      v12 = (_QWORD *)operator new();
      bzero(v12 + 2, 0x238uLL);
      *v12 = &off_1E5D29DB8;
      v13 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
      v14 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
      v12[1] = v13;
      v15 = MEMORY[0x1E0DE4FA8];
      v16 = MEMORY[0x1E0DE4FA8] + 64;
      v12[54] = MEMORY[0x1E0DE4FA8] + 64;
      *(_QWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = v14;
      v12[2] = 0;
      v17 = (std::ios_base *)((char *)v12 + *(_QWORD *)(v12[1] - 24) + 8);
      std::ios_base::init(v17, v12 + 3);
      v17[1].__vftable = 0;
      v17[1].__fmtflags_ = -1;
      v12[1] = v15 + 24;
      v12[54] = v16;
      MEMORY[0x1AF44CA64](v12 + 3);
      goto LABEL_12;
    case 2:
      v12 = (_QWORD *)operator new();
      *v12 = &off_1E5D2A660;
      *((_BYTE *)v12 + 8) = 0;
      goto LABEL_18;
    case 3:
      goto LABEL_11;
    case 4:
      v12 = (_QWORD *)operator new();
      *v12 = &off_1E5D29F98;
      v12[6] = 0;
      *(_OWORD *)(v12 + 1) = 0u;
      *(_OWORD *)(v12 + 3) = 0u;
      goto LABEL_18;
    default:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Invalid input filename format ", 30);
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v28 = *(std::string *)a2;
        kaldi::PrintableRxfilename((uint64_t)&v28, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      result = 0;
      break;
  }
  return result;
}

void sub_1AE01C1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a24);
  _Unwind_Resume(a1);
}

void kaldi::Input::~Input(kaldi::Input *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)this = 0;
  }
}

uint64_t kaldi::Input::Stream(kaldi::Input *this)
{
  uint64_t v1;
  _QWORD v3[34];

  v1 = *(_QWORD *)this;
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Input::Stream(), not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

BOOL kaldi::FileOutputImpl::Open(uint64_t a1, const std::string *a2)
{
  _QWORD *v4;
  _QWORD v5[34];

  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"FileOutputImpl::Open(), ", 24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::ofstream::open();
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t kaldi::FileOutputImpl::Stream(kaldi::FileOutputImpl *this)
{
  _QWORD v2[34];

  if (!*((_QWORD *)this + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileOutputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 32;
}

BOOL kaldi::FileOutputImpl::Close(kaldi::FileOutputImpl *this)
{
  _QWORD *v1;
  _QWORD v3[34];

  if (!*((_QWORD *)this + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v1 = (_QWORD *)((char *)this + 32);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)), *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) | 4);
  return (*((_BYTE *)v1 + *(_QWORD *)(*v1 - 24) + 32) & 5) == 0;
}

BOOL kaldi::StandardOutputImpl::Open(fst *a1)
{
  _QWORD *v2;
  _BOOL8 result;
  _QWORD v4[34];

  if (*((_BYTE *)a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "StandardOutputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  v2 = (_QWORD *)fst::cout(a1);
  result = *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) == 0;
  *((_BYTE *)a1 + 8) = result;
  return result;
}

uint64_t kaldi::StandardOutputImpl::Stream(kaldi::StandardOutputImpl *this)
{
  _QWORD v2[34];

  if (!*((_BYTE *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardOutputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cout(this);
}

BOOL kaldi::StandardOutputImpl::Close(kaldi::StandardOutputImpl *this)
{
  fst *v1;
  _QWORD *v2;
  _QWORD v4[34];

  if (!*((_BYTE *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "StandardOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  *((_BYTE *)this + 8) = 0;
  fst::cout(this);
  v1 = (fst *)std::ostream::flush();
  v2 = (_QWORD *)fst::cout(v1);
  return (*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) == 0;
}

BOOL kaldi::PipeOutputImpl::Open(uint64_t a1, std::string *a2)
{
  const char *v4;
  FILE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BOOL8 v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  char *v18;
  size_t v19;
  _QWORD v21[34];
  void *__dst[2];
  unsigned __int8 v23;

  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a2, 1uLL);
  if ((v23 & 0x80u) == 0)
    v4 = (const char *)__dst;
  else
    v4 = (const char *)__dst[0];
  v5 = popen(v4, "w");
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = operator new();
    v7 = *(_QWORD *)(a1 + 32);
    std::streambuf::basic_streambuf();
    *(_QWORD *)v6 = &unk_1E5D2A098;
    *(_QWORD *)(v6 + 64) = v7;
    *(_DWORD *)(v6 + 72) = -1;
    *(_BYTE *)(v6 + 76) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    v8 = operator new();
    v9 = *(void **)(a1 + 40);
    v10 = MEMORY[0x1E0DE4FA0];
    *(_QWORD *)(v8 + 8) = MEMORY[0x1E0DE4FA0] + 64;
    *(_QWORD *)v8 = v10 + 24;
    std::ios_base::init((std::ios_base *)(v8 + 8), v9);
    *(_QWORD *)(v8 + 144) = 0;
    *(_DWORD *)(v8 + 152) = -1;
    *(_QWORD *)(a1 + 48) = v8;
    v11 = *(_DWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 - 24) + 32) == 0;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Failed opening pipe for writing, command is: ", 45);
      if ((v23 & 0x80u) == 0)
        v13 = __dst;
      else
        v13 = (void **)__dst[0];
      if ((v23 & 0x80u) == 0)
        v14 = v23;
      else
        v14 = (uint64_t)__dst[1];
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", errno is ", 11);
      v17 = __error();
      v18 = strerror(*v17);
      v19 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    }
    v11 = 0;
  }
  if ((char)v23 < 0)
    operator delete(__dst[0]);
  return v11;
}

void sub_1AE01C7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 33) < 0)
    operator delete(*(void **)(v10 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::PipeOutputImpl::Stream(kaldi::PipeOutputImpl *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeOutputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

BOOL kaldi::PipeOutputImpl::Close(kaldi::PipeOutputImpl *this)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL8 result;
  _QWORD v12[34];

  if (!*((_QWORD *)this + 6))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "PipeOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  std::ostream::flush();
  v2 = *((_QWORD *)this + 6);
  v3 = *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4)))
    v4 = kaldi::g_kaldi_verbose_level < -1;
  else
    v4 = 1;
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Pipe ", 5);
    v6 = *((char *)this + 31);
    if (v6 >= 0)
      v7 = (char *)this + 8;
    else
      v7 = (char *)*((_QWORD *)this + 1);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)this + 31);
    else
      v8 = *((_QWORD *)this + 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  *((_QWORD *)this + 4) = 0;
  v10 = *((_QWORD *)this + 5);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = (v3 & 5) == 0;
  *((_QWORD *)this + 5) = 0;
  return result;
}

void sub_1AE01C9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL kaldi::FileInputImpl::Open(uint64_t a1)
{
  _QWORD *v3;
  _QWORD v4[34];

  if (*(_QWORD *)(a1 + 144))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FileInputImpl::Open(), ", 23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  std::ifstream::open();
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t kaldi::FileInputImpl::Stream(kaldi::FileInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_QWORD *)this + 18))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 8;
}

void kaldi::FileInputImpl::Close(kaldi::FileInputImpl *this)
{
  std::ios_base *v2;
  _QWORD v3[34];

  if (!*((_QWORD *)this + 18))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (!std::filebuf::close())
  {
    v2 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 1) - 24) + 8);
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }
}

uint64_t kaldi::FileInputImpl::MyType(kaldi::FileInputImpl *this)
{
  return 1;
}

uint64_t kaldi::StandardInputImpl::Open(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_BYTE *)(a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  *(_BYTE *)(a1 + 8) = 1;
  return 1;
}

uint64_t kaldi::StandardInputImpl::Stream(kaldi::StandardInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_BYTE *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cin(this);
}

uint64_t kaldi::StandardInputImpl::Close(uint64_t this)
{
  _QWORD v1[34];

  if (!*(_BYTE *)(this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StandardInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t kaldi::StandardInputImpl::MyType(kaldi::StandardInputImpl *this)
{
  return 2;
}

uint64_t kaldi::PipeInputImpl::Open(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  FILE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type size;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  char *v21;
  size_t v22;
  std::string *p_p;
  std::string::size_type v25;
  _QWORD *v26;
  std::string v27;
  std::string __p;
  _QWORD v29[34];
  std::string v30;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (*(char *)(a2 + 23) < 0)
    v4 = *(_QWORD *)(a2 + 8);
  else
    v4 = *(unsigned __int8 *)(a2 + 23);
  std::string::basic_string(&v30, (const std::string *)a2, 0, v4 - 1, (std::allocator<char> *)v29);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v30;
  else
    v5 = (std::string *)v30.__r_.__value_.__r.__words[0];
  v6 = popen((const char *)v5, "r");
  *(_QWORD *)(a1 + 32) = v6;
  if (!v6)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Failed opening pipe for reading, command is: ", 45);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v30;
      else
        v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        size = v30.__r_.__value_.__l.__size_;
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, size);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", errno is ", 11);
      v20 = __error();
      v21 = strerror(*v20);
      v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    }
    goto LABEL_21;
  }
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 32);
  std::streambuf::basic_streambuf();
  *(_QWORD *)v7 = &unk_1E5D2A098;
  *(_QWORD *)(v7 + 64) = v8;
  *(_DWORD *)(v7 + 72) = -1;
  *(_BYTE *)(v7 + 76) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = operator new();
  v10 = *(void **)(a1 + 40);
  v11 = MEMORY[0x1E0DE4F98];
  *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DE4F98] + 64;
  *(_QWORD *)v9 = v11 + 24;
  *(_QWORD *)(v9 + 8) = 0;
  std::ios_base::init((std::ios_base *)(v9 + 16), v10);
  *(_QWORD *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 160) = -1;
  *(_QWORD *)(a1 + 48) = v9;
  v12 = *(_DWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 - 24) + 32);
  if ((v12 & 5) != 0)
  {
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v13 = 1;
  if ((v12 & 2) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Pipe opened with command ", 25);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v27 = *(std::string *)a2;
    kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v25 = __p.__r_.__value_.__l.__size_;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" is empty.", 10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v13 = 1;
  }
LABEL_22:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1AE01CF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::Stream(kaldi::PipeInputImpl *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::PipeInputImpl::Close(kaldi::PipeInputImpl *this)
{
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD v10[34];

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "PipeInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4)))
    v3 = kaldi::g_kaldi_verbose_level < -1;
  else
    v3 = 1;
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Pipe ", 5);
    v5 = *((char *)this + 31);
    if (v5 >= 0)
      v6 = (char *)this + 8;
    else
      v6 = (char *)*((_QWORD *)this + 1);
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)this + 31);
    else
      v7 = *((_QWORD *)this + 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  *((_QWORD *)this + 4) = 0;
  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

void sub_1AE01D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::MyType(kaldi::PipeInputImpl *this)
{
  return 4;
}

BOOL kaldi::OffsetFileInputImpl::Open(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  std::string *p_s1;
  _BOOL8 v12;
  unint64_t v14;
  std::string __s1;

  v5 = (_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(a1 + 176))
  {
    __s1.__r_.__value_.__r.__words[0] = 0;
    kaldi::OffsetFileInputImpl::SplitFilename(a2, a1 + 8, (uint64_t *)&__s1);
    *(_BYTE *)(a1 + 32) = a3;
    std::ifstream::open();
    return *(_QWORD *)(a1 + 176)
        && kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, __s1.__r_.__value_.__r.__words[0]);
  }
  memset(&__s1, 0, sizeof(__s1));
  v14 = 0;
  kaldi::OffsetFileInputImpl::SplitFilename(a2, (uint64_t)&__s1, (uint64_t *)&v14);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v8 = *(unsigned __int8 *)(a1 + 31);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 16);
  if (size == v8)
  {
    if (v9 >= 0)
      v10 = (unsigned __int8 *)(a1 + 8);
    else
      v10 = *(unsigned __int8 **)(a1 + 8);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_))
        goto LABEL_23;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      goto LABEL_23;
    }
LABEL_21:
    if (*(unsigned __int8 *)(a1 + 32) == a3)
    {
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)), 0);
LABEL_26:
      v12 = kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, v14);
      goto LABEL_28;
    }
  }
LABEL_23:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)), *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32) | 4);
  std::string::operator=((std::string *)(a1 + 8), &__s1);
  std::ifstream::open();
  if (*(_QWORD *)(a1 + 176))
    goto LABEL_26;
  v12 = 0;
LABEL_28:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1AE01D3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OffsetFileInputImpl::Stream(kaldi::OffsetFileInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_QWORD *)this + 22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 40;
}

void kaldi::OffsetFileInputImpl::Close(kaldi::OffsetFileInputImpl *this)
{
  std::ios_base *v2;
  _QWORD v3[34];

  if (!*((_QWORD *)this + 22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (!std::filebuf::close())
  {
    v2 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 5) - 24) + 40);
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }
}

uint64_t kaldi::OffsetFileInputImpl::MyType(kaldi::OffsetFileInputImpl *this)
{
  return 3;
}

void kaldi::basic_pipebuf<char>::~basic_pipebuf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::basic_pipebuf<char>::sync(uint64_t a1)
{
  if (fflush(*(FILE **)(a1 + 64)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t kaldi::basic_pipebuf<char>::underflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 0);
}

uint64_t kaldi::basic_pipebuf<char>::uflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 1);
}

uint64_t kaldi::basic_pipebuf<char>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  BOOL v6;
  char v8;
  _BYTE v9[15];

  *(_QWORD *)&v9[7] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 != -1)
  {
    v3 = a2;
    if (*(_BYTE *)(a1 + 76))
    {
      v8 = *(_DWORD *)(a1 + 72);
      v4 = v9;
      while (v4 > &v8)
      {
        v5 = *--v4;
        if (ungetc(v5, *(FILE **)(a1 + 64)) == -1)
          return 0xFFFFFFFFLL;
      }
    }
    *(_DWORD *)(a1 + 72) = v3;
    v6 = 1;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a1 + 76))
  {
    v3 = *(unsigned int *)(a1 + 72);
    v6 = (_DWORD)v3 != -1;
LABEL_11:
    *(_BYTE *)(a1 + 76) = v6;
    return v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t kaldi::basic_pipebuf<char>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char __ptr;
  uint64_t v6;

  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  *(_QWORD *)(a1 + 40) = &__ptr;
  v3 = (_QWORD *)(a1 + 40);
  __ptr = a2;
  *(_QWORD *)(a1 + 48) = &v6;
  *(_QWORD *)(a1 + 56) = &v6;
  if (fwrite(&__ptr, 1uLL, 1uLL, *(FILE **)(a1 + 64)) != 1)
    return 0xFFFFFFFFLL;
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return v2;
}

uint64_t kaldi::basic_pipebuf<char>::__getchar(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  int v5;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 76))
  {
    v5 = getc(*(FILE **)(a1 + 64));
    if (v5 != -1)
    {
      v4 = v5;
      if ((v2 & 1) != 0)
      {
        *(_DWORD *)(a1 + 72) = v5;
        return v4;
      }
      if (ungetc(v5, *(FILE **)(a1 + 64)) != -1)
        return v4;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(unsigned int *)(a1 + 72);
  if (a2)
  {
    *(_DWORD *)(a1 + 72) = -1;
    *(_BYTE *)(a1 + 76) = 0;
  }
  return v4;
}

void kaldi::OffsetFileInputImpl::SplitFilename(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string v14;
  void *__dst[2];
  char v16;

  v6 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v14, (const std::string *)a1, 0, v6, (std::allocator<char> *)__dst);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v14;
  v7 = std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a1, v6 + 1);
  if ((kaldi::ConvertStringToInteger<unsigned long>((uint64_t)v7, a3) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Cannot get offset from filename ", 32);
    v9 = *(char *)(a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (possibly you compiled in 32-bit and have a >32-bit", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" byte offset into a file; you'll have to compile 64-bit.",
      56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  if (v16 < 0)
    operator delete(__dst[0]);
}

void sub_1AE01D808(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

BOOL kaldi::OffsetFileInputImpl::Seek(kaldi::OffsetFileInputImpl *this, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  std::ios_base *v7;
  unint64_t v8;

  v3 = (_QWORD *)((char *)this + 40);
  std::istream::tellg();
  v4 = v8;
  if (v8 == a2)
    return 1;
  if (v8 < a2 && v8 + 100 > a2)
  {
    do
    {
      std::istream::get();
      ++v4;
    }
    while (a2 != v4);
    std::istream::tellg();
    return v8 == a2;
  }
  else
  {
    std::istream::seekg();
    v7 = (std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24));
    if ((v7->__rdstate_ & 5) == 0)
    {
      std::ios_base::clear(v7, 0);
      return 1;
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
    return 0;
  }
}

uint64_t kaldi::ConvertStringToInteger<unsigned long>(uint64_t a1, uint64_t *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  int *v11;
  char *__endptr;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  __endptr = 0;
  *__error() = 0;
  v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3)
    return 0;
  v5 = v4;
  v6 = __endptr - 1;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    v8 = v6[1];
    if ((v8 & 0x80000000) != 0)
      v9 = __maskrune(v8, 0x4000uLL);
    else
      v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6)
    return 0;
  v11 = __error();
  result = 0;
  if (!*v11 && (v5 & 0x8000000000000000) == 0)
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

void sub_1AE01DB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AE01DD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1AE01DF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AE01E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AE01E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1AE01EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t quasar::SystemCombinationDecoder::SystemCombinationDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)(v3 + 448) = 0;
  *(_QWORD *)(v3 + 456) = 0;
  *(_QWORD *)v3 = &off_1E5D39730;
  *(_QWORD *)(v3 + 464) = 0;
  *(_QWORD *)(v3 + 472) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 850045863;
  *(_QWORD *)(v3 + 560) = 0;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_QWORD *)(v3 + 592) = 0;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 537) = 0u;
  *(_QWORD *)(v3 + 584) = v3 + 592;
  *(_QWORD *)(v3 + 616) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_QWORD *)(v3 + 608) = v3 + 616;
  *(_DWORD *)(v3 + 640) = 1056964608;
  *(_QWORD *)(a1 + 632) = 0x100000001;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 648), "");
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_BYTE *)(a1 + 713) = 1;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1AE01EDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  std::mutex *v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  std::__shared_weak_count *v19;

  v16 = v15;
  v17 = v12;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(v16, *(_QWORD **)(v10 + 616));
  std::__tree<std::string>::destroy(v13, *(char **)(v10 + 592));
  a10 = v17;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::mutex::~mutex(v11);
  if (*(char *)(v10 + 487) < 0)
    operator delete(*v14);
  v19 = *(std::__shared_weak_count **)(v10 + 456);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  quasar::Decoder::~Decoder((void **)v10);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::~SystemCombinationDecoder(quasar::SystemCombinationDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(_QWORD *)this = &off_1E5D39730;
  v2 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v2)
    std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100]((uint64_t)this + 704, v2);
  v3 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 696, v3);
  v5 = (void **)((char *)this + 672);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy((uint64_t)this + 608, *((_QWORD **)this + 77));
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  v5 = (void **)((char *)this + 560);
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::mutex::~mutex((std::mutex *)((char *)this + 488));
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::SystemCombinationDecoder::~SystemCombinationDecoder(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::SystemCombinationDecoder::combinesSystems(quasar::SystemCombinationDecoder *this)
{
  return 1;
}

void quasar::SystemCombinationDecoder::registerParams(quasar::SystemCombinationDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "system-combination");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 195, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "selected-chain");
  std::string::basic_string[abi:ne180100]<0>(v4, "Decoder chain to select for output.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "selection-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Filename for selection model. Each line must have the format: intercept <value> OR, <FEATURE> <WEIGHT> [ <FEATURE-MEAN> [ <FEATURE-STD> ] ](feature mean and std values are both optional, could be provided for feature normalization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 648, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-hyps-primary");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of primary chain hypotheses to consider for selection.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-hyps-secondary");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of secondary chain hypotheses to consider for selection.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "selection-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold value for system selection");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 640, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "uncombinable-word-tags");
  std::string::basic_string[abi:ne180100]<0>(v4, "Force primary selection if recognition has any of these suffixes");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)this + 672, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "disable-pron-transfer");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not copy word pronunciations from the primary chain");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 712, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "disable-after-first-utterance");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not run system combination for second-and-later utterances");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 713, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AE01F2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SystemCombinationDecoder::finishInit(quasar::SystemCombinationDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void **v28;

  if (*((char *)this + 671) < 0)
  {
    if (*((_QWORD *)this + 82))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 671))
  {
LABEL_3:
    v2 = operator new();
    kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(v2, (char *)this + 648);
    v3 = *((_QWORD *)this + 87);
    *((_QWORD *)this + 87) = v2;
    if (v3)
    {
      std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 696, v3);
      v2 = *((_QWORD *)this + 87);
    }
    v4 = *((_DWORD *)this + 158);
    v5 = *((_DWORD *)this + 159);
    v11 = 0uLL;
    *(_QWORD *)&v12 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v11, *(__int128 **)(v2 + 32), *(__int128 **)(v2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 40) - *(_QWORD *)(v2 + 32)) >> 3));
    v6 = operator new();
    kaldi::quasar::SystemSelectionFeatureExtractor::SystemSelectionFeatureExtractor(v6, v5 + v4, (uint64_t)&v11, 0.0);
    v7 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v6;
    if (v7)
      std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100]((uint64_t)this + 704, v7);
    v28 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
    return;
  }
  if (quasar::gLogLevel >= 4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"No selection model supplied. The output of the primary chain will be selected.", 78);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v11);
  }
  v8 = *((_DWORD *)this + 159) + *((_DWORD *)this + 158);
  v9 = operator new();
  v11 = 0uLL;
  *(_QWORD *)&v12 = 0;
  kaldi::quasar::SystemSelectionFeatureExtractor::SystemSelectionFeatureExtractor(v9, v8, (uint64_t)&v11, 0.0);
  v28 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  v10 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v9;
  if (v10)
    std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100]((uint64_t)this + 704, v10);
}

void sub_1AE01F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemCombinationDecoder::supportsEager(quasar::SystemCombinationDecoder *this)
{
  return 1;
}

uint64_t quasar::SystemCombinationDecoder::runAsyncTasks(int64x2_t *a1, uint64_t a2, uint64_t a3, quasar::SpeechRequestData **a4, uint64_t a5, uint64_t *a6, _QWORD *a7, uint64_t *a8)
{
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _QWORD **LmeDataStreams;
  std::__assoc_sub_state **Location;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  quasar::SpeechRequestData *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  std::string::size_type v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v95;
  int64x2_t *v96;
  __int128 v97;
  char v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  _BYTE *v105;
  _BYTE *v106;
  std::string __p;
  char *v108;
  int64x2_t *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (a1[25].i32[0] != 1)
  {
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v110 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Must call init() for ", 21);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)p_p, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v95, " before calling runAsyncTasks().");
    std::string::~string(&__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v110);
  }
  if (quasar::gLogLevel >= 4)
  {
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v110 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Running async tasks of Decoder: ", 32);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v16 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v110);
  }
  v17 = *((_QWORD *)*a4 + 3);
  quasar::SpeechRecognizerModelLoader::lookupRecognizers(*a8, *(unsigned int *)(v17 + 24), (unsigned __int8 **)(v17 + 80), (std::string *)(v17 + 152), *(unsigned __int8 *)(v17 + 34), *(unsigned __int8 *)(v17 + 739), (std::string *)(v17 + 648), (std::string *)(v17 + 672), (uint64_t *)&v105, (std::string *)(v17 + 696));
  if (a1[44].i8[9] && *((_DWORD *)*a4 + 1))
  {
    if (quasar::gLogLevel >= 4)
    {
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v110 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Not running async tasks for post-first utterances of Decoder: ", 62);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v20 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v110);
    }
    v21 = v105;
    v22 = v106;
    while (v21 != v22)
    {
      if (!v21[16])
        quasar::MultiChainMultiAudioBuffer::removeBuffer(*a6, (unsigned __int8 *)(*(_QWORD *)v21 + 16));
      v21 += 24;
    }
    v90 = 0;
    goto LABEL_125;
  }
  v23 = (uint64_t)v105;
  v24 = v106;
  if (v105 != v106)
  {
    v96 = a1 + 35;
    while (*(_BYTE *)(v23 + 16))
    {
LABEL_32:
      v23 += 24;
      if ((_BYTE *)v23 == v24)
        goto LABEL_120;
    }
    quasar::MultiChainMultiAudioBuffer::getBuffer(*a6, (const void **)(*(_QWORD *)v23 + 16), &v103);
    std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,quasar::RunAsyncParams&,void>(*((const quasar::RunAsyncParams **)*a4 + 3), &v101);
    LmeDataStreams = (_QWORD **)quasar::SpeechRequestData::getLmeDataStreams(*a4);
    Location = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a4);
    *(_QWORD *)&v110 = quasar::Location::fromSharedFuture(Location);
    *((_QWORD *)&v110 + 1) = v27;
    quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, &__p);
    v99 = *((_BYTE *)*a4 + 216);
    v98 = 0;
    std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,void>(&v101, a6, &v103, LmeDataStreams, &v110, (uint64_t *)&__p, &v99, &v100, &v98);
    v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *a4;
    v32 = v100;
    *(_DWORD *)(v100 + 8) = *((_DWORD *)*a4 + 2);
    *(_QWORD *)v32 = *(_QWORD *)v31;
    *(_DWORD *)(v32 + 16) = *((_DWORD *)v31 + 4);
    std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(&v97, (int64x2_t *)a1[28].i64);
    v110 = v97;
    if (*((_QWORD *)&v97 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v111 = v100;
    if (*((_QWORD *)&v100 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *(_QWORD *)&v112 = *(_QWORD *)v23;
    v37 = *(_QWORD *)(v23 + 8);
    *((_QWORD *)&v112 + 1) = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)&v113, a5);
    v40 = a7[1];
    *(_QWORD *)&v115 = *a7;
    *((_QWORD *)&v115 + 1) = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = a8[1];
    *(_QWORD *)&v116 = *a8;
    *((_QWORD *)&v116 + 1) = v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = a1[35].u64[1];
    v47 = a1[36].u64[0];
    if (v46 >= v47)
    {
      v49 = (uint64_t)(v46 - v96->i64[0]) >> 3;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v50 = v47 - v96->i64[0];
      v51 = v50 >> 2;
      if (v50 >> 2 <= (unint64_t)(v49 + 1))
        v51 = v49 + 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      v109 = a1 + 36;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)a1[36].i64, v52);
      else
        v53 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[8 * v49];
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      v108 = &v53[8 * v52];
      std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>((pthread_t *)__p.__r_.__value_.__l.__size_, (uint64_t)&v110);
      v54 = __p.__r_.__value_.__l.__size_;
      v48 = __p.__r_.__value_.__r.__words[2] + 8;
      __p.__r_.__value_.__r.__words[2] += 8;
      v55 = (_QWORD *)a1[35].i64[1];
      v56 = (_QWORD *)a1[35].i64[0];
      if (v55 == v56)
      {
        v58 = vdupq_n_s64((unint64_t)v55);
      }
      else
      {
        do
        {
          v57 = *--v55;
          *(_QWORD *)(v54 - 8) = v57;
          v54 -= 8;
          *v55 = 0;
        }
        while (v55 != v56);
        v58 = *v96;
        v48 = __p.__r_.__value_.__r.__words[2];
      }
      a1[35].i64[0] = v54;
      a1[35].i64[1] = v48;
      *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v58;
      v59 = (char *)a1[36].i64[0];
      a1[36].i64[0] = (uint64_t)v108;
      v108 = v59;
      __p.__r_.__value_.__r.__words[0] = v58.i64[0];
      std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&__p);
    }
    else
    {
      std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>((pthread_t *)a1[35].i64[1], (uint64_t)&v110);
      v48 = v46 + 8;
      a1[35].i64[1] = v48;
    }
    a1[35].i64[1] = v48;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (__int128 *)*((_QWORD *)&v114 + 1);
    if (*((__int128 **)&v114 + 1) == &v113)
    {
      v66 = &v113;
      v67 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_85;
      v67 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_85:
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    if (*((_QWORD *)&v110 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v102;
    if (v102)
    {
      p_shared_owners = (unint64_t *)&v102->__shared_owners_;
      do
        v85 = __ldaxr(p_shared_owners);
      while (__stlxr(v85 - 1, p_shared_owners));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v104;
    if (v104)
    {
      v87 = (unint64_t *)&v104->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    goto LABEL_32;
  }
LABEL_120:
  v89 = *(_QWORD *)(a5 + 24);
  if (!v89)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 48))(v89))
    v90 = 1;
  else
    v90 = 3;
LABEL_125:
  *(_QWORD *)&v110 = &v105;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  return v90;
}

void sub_1AE01FE8C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE01FF8CLL);
}

void sub_1AE01FE9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a33 < 0)
    operator delete(__p);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a36);
  JUMPOUT(0x1AE01FF8CLL);
}

void sub_1AE01FECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0::~$_0((uint64_t)&a33);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  JUMPOUT(0x1AE01FF7CLL);
}

void sub_1AE01FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a25;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void sub_1AE01FF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  JUMPOUT(0x1AE01FF6CLL);
}

void sub_1AE01FF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t *)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](va1);
  JUMPOUT(0x1AE01FF7CLL);
}

uint64_t quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 80);
  v2 = *(_QWORD **)(a1 + 72);
  if (v2 == (_QWORD *)(a1 + 48))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 48);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1);
}

void quasar::SystemCombinationDecoder::runSyncCheck(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  quasar::SpeechRequestData *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D40;
  v12->__shared_owners_ = 0;
  v12[1].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  v12[1].__shared_weak_owners_ = 0;
  v32 = v12;
  v13 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(a3 + 8);
  v35 = *(quasar::SpeechRequestData **)a3;
  v36 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v33 = &v12[1].__vftable;
  v34 = v12;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  quasar::SystemCombinationDecoder::runSync(a1, &v37, &v35, (uint64_t *)&v33, a4, a5, a6);
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v32)
  {
    v30 = (unint64_t *)&v32->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1AE0201E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;
  void *v30;
  _QWORD *v31;
  const char *v32;
  size_t v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  const char *v37;
  size_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  const char *v42;
  size_t v43;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26 - 112);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26 - 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26 - 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 3)
  {
    v29 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v30 = v29;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Ran out of token storage during decode: ", 40);
      v32 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
    }
  }
  else if (a2 == 2)
  {
    v34 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v35 = v34;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Ran out of forward link storage during decode: ", 47);
      v37 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      v38 = strlen(v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v39 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v40 = v39;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Synchronous decoding failed: ", 29);
      v42 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      v43 = strlen(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
    }
  }
  std::mutex::lock((std::mutex *)(v25 + 488));
  *(_BYTE *)(v25 + 552) = 1;
  std::mutex::unlock((std::mutex *)(v25 + 488));
  __cxa_end_catch();
  JUMPOUT(0x1AE0201C4);
}

void quasar::SystemCombinationDecoder::runSync(uint64_t a1, uint64_t *a2, quasar::SpeechRequestData **a3, uint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t *a7)
{
  quasar::SpeechRequestData *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *MultiBuffer;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int FrameDurationMs;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106[2];
  quasar::SpeechRequestData *v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *__p[2];
  unsigned __int8 v113;
  int v114;
  void *v115;
  std::__shared_weak_count *v116;
  quasar::SpeechRequestData *v117[2];
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  kaldi::OnlineFeatureMatrix *v124[9];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;

  if (*(_QWORD *)*a4 != *(_QWORD *)(*a4 + 8))
  {
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v125);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v125, "Symbol table list passed to runSync() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v125);
  }
  memset(v124, 0, sizeof(v124));
  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v120, a2);
  if (!(_QWORD)v120)
  {
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"Invalid recognition request parameters", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v125);
  }
  v118 = 0;
  v119 = 0;
  v13 = a3[1];
  v117[0] = *a3;
  v117[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)((char *)v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  quasar::SystemCombinationDecoder::createFeatChain(v117, &v120, &v118, (char **)&v125);
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)&v121);
  v121 = v125;
  *(_QWORD *)&v122 = v126;
  *(_QWORD *)&v126 = 0;
  v125 = 0uLL;
  __p[0] = &v125;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v13)
  {
    v16 = (unint64_t *)((char *)v13 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(quasar::SpeechRequestData *))(*(_QWORD *)v13 + 16))(v13);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    }
  }
  v18 = *(void **)(*((_QWORD *)&v121 + 1) - 16);
  v115 = v18;
  v19 = *(std::__shared_weak_count **)(*((_QWORD *)&v121 + 1) - 8);
  v116 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (quasar::gLogLevel >= 5)
  {
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"Created OnlineFeatInputItf chain", 32);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v125);
  }
  v22 = (_DWORD *)(*a6 + 1612);
  __p[0] = v18;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,void>(v22, (uint64_t *)__p, &v125);
  v23 = v125;
  v125 = 0uLL;
  v24 = (std::__shared_weak_count *)v124[2];
  *(_OWORD *)&v124[1] = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  quasar::Decodable::createDecodable((uint64_t *)&v125, *(quasar::Decodable **)(v120 + 64), v124[1]);
  v30 = v125;
  v125 = 0uLL;
  v31 = (std::__shared_weak_count *)v124[4];
  *(_OWORD *)&v124[3] = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v121 + 80))(&v125);
  v37 = v125;
  v125 = 0uLL;
  v38 = (std::__shared_weak_count *)v124[6];
  *(_OWORD *)&v124[5] = v37;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(_QWORD *)(v120 + 80);
  v114 = 0;
  v114 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v124[1] + 2) + 24))(*((_QWORD *)v124[1] + 2));
  if (!v114)
  {
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"Feature extraction misconfigured", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v125);
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)v44 + 112))(__p);
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a3);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 1, &v110);
  v46 = v113;
  if ((v113 & 0x80u) != 0)
    v46 = (unint64_t)__p[1];
  if (v46 && v110)
  {
    quasar::SpeechRecognizerModelLoader::getSpgConfig(*a7, (uint64_t)__p, &v109);
    std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,void>(&v109, &v110, (unsigned int *)(*((_QWORD *)*a3 + 3) + 24), &v125);
    v47 = v125;
    v125 = 0uLL;
    v48 = (std::__shared_weak_count *)v124[8];
    *(_OWORD *)&v124[7] = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
    if (*((_QWORD *)&v125 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    FrameDurationMs = quasar::SilencePosteriorGenerator::getFrameDurationMs(v124[7]);
    if (FrameDurationMs != v114)
    {
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v125);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"Frontend and SPG frame durations differ: ", 41);
      v105 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)" vs ", 4);
      quasar::SilencePosteriorGenerator::getFrameDurationMs(v124[7]);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v125);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string const&,int &>((uint64_t **)(a1 + 584), (const void **)(v120 + 16), v120 + 16, &v114);
  v58 = (std::__shared_weak_count *)a3[1];
  v107 = *a3;
  v108 = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *a4;
  v62 = (std::__shared_weak_count *)a4[1];
  v106[0] = v61;
  v106[1] = (uint64_t)v62;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  quasar::SystemCombinationDecoder::runSyncUtterance((uint64_t *)&v107, v106, (uint64_t *)&v120, a5, (uint64_t)&v125);
  if (v62)
  {
    v65 = (unint64_t *)&v62->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v67 = v108;
  if (v108)
  {
    v68 = (unint64_t *)&v108->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>((uint64_t **)(a1 + 608), (const void **)(v120 + 16), (__int128 *)(v120 + 16), (uint64_t)&v125);
  std::mutex::unlock((std::mutex *)(a1 + 488));
  v70 = *(_QWORD **)(v120 + 80);
  v71 = *(_QWORD **)(v120 + 88);
  while (v70 != v71)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v70 + 120))(*v70);
    v70 += 2;
  }
  v72 = (std::__shared_weak_count *)v126;
  if ((_QWORD)v126)
  {
    v73 = (unint64_t *)(v126 + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v111;
  if (v111)
  {
    v76 = (unint64_t *)&v111->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if ((char)v113 < 0)
    operator delete(__p[0]);
  v78 = v116;
  if (v116)
  {
    v79 = (unint64_t *)&v116->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v119;
  if (v119)
  {
    v82 = (unint64_t *)&v119->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)v124[8];
  if (v124[8])
  {
    v85 = (unint64_t *)((char *)v124[8] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)v124[6];
  if (v124[6])
  {
    v88 = (unint64_t *)((char *)v124[6] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)v124[4];
  if (v124[4])
  {
    v91 = (unint64_t *)((char *)v124[4] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)v124[2];
  if (v124[2])
  {
    v94 = (unint64_t *)((char *)v124[2] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)v124[0];
  if (v124[0])
  {
    v97 = (unint64_t *)((char *)v124[0] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)v123;
  if ((_QWORD)v123)
  {
    v100 = (unint64_t *)(v123 + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  *(_QWORD *)&v125 = &v121;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
}

void sub_1AE020EF4()
{
  JUMPOUT(0x1AE020F9CLL);
}

void sub_1AE020EFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46)
{
  std::mutex *v46;

  std::mutex::unlock(v46);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  JUMPOUT(0x1AE020F74);
}

void sub_1AE020F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11[4];
  char v12;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v11);
  if (v12 < 0)
    operator delete(v11[2]);
  JUMPOUT(0x1AE020F8CLL);
}

void sub_1AE020F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  quasar::SystemCombinationDecoder::RecogChain::~RecogChain((quasar::SystemCombinationDecoder::RecogChain *)&a27);
  _Unwind_Resume(a1);
}

void sub_1AE020F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1AE020F94);
}

void sub_1AE020F5C()
{
  JUMPOUT(0x1AE020F7CLL);
}

void quasar::SystemCombinationDecoder::createFeatChain(quasar::SpeechRequestData **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, char **a4@<X8>)
{
  quasar::SpeechRequestData *v8;
  uint64_t v9;
  int v10;
  _QWORD *Location;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v16;
  uint64_t *MultiBuffer;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  int64x2_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *j;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  kaldi::OnlineFeatInputItf *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  int64x2_t v94;
  char *v95;
  char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  void **v146;
  int64x2_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[41];
  int v152;
  char v153;
  __int128 v154;
  __int128 __p;
  uint64_t v156;
  char v157;
  const void *v158;
  std::__shared_weak_count *v159;
  kaldi::OnlineFeatInputItf *v160;
  std::__shared_weak_count *v161;
  const void *v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[41];
  int v172;
  char v173;
  __int128 v174;
  void *v175[2];
  uint64_t v176;
  char v177;
  const void *v178;
  std::__shared_weak_count *v179;
  _BYTE v180[24];
  char *v181;
  _QWORD *v182;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v178 = 0;
  v179 = 0;
  v8 = *a1;
  v9 = *((_QWORD *)v8 + 3);
  v10 = *(_DWORD *)(v9 + 24);
  LOBYTE(v9) = *(_BYTE *)(v9 + 51);
  v165 = v10;
  v166 = 0;
  v167 = v9;
  v172 = 0;
  v173 = 0;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  memset(v171, 0, sizeof(v171));
  v174 = 0u;
  *(_OWORD *)v175 = 0u;
  v176 = 0;
  v177 = 1;
  Location = (_QWORD *)quasar::SpeechRequestData::getLocation(v8);
  if (*Location)
  {
    v12 = (unint64_t *)(*Location + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v166 = *Location;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v168, (uint64_t *)(*((_QWORD *)*a1 + 3) + 320));
  v14 = *a2;
  for (i = *(uint64_t **)(*a2 + 40); i != *(uint64_t **)(*a2 + 48); v14 = *a2)
  {
    v16 = *i;
    MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a1);
    quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, &v164);
    if ((_QWORD)v164)
      v18 = v164 + 16;
    else
      v18 = 0;
    v162 = v178;
    v163 = v179;
    if (v179)
    {
      p_shared_owners = (unint64_t *)&v179->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    quasar::FeatureExtractor::createOnlineFeInput(v16, v18, (uint64_t *)&v162);
    v21 = a4[1];
    v22 = (unint64_t)a4[2];
    if ((unint64_t)v21 >= v22)
    {
      v23 = (v21 - *a4) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v22 - (_QWORD)*a4;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      *((_QWORD *)&v148 + 1) = a4 + 2;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = *(_OWORD *)v180;
      *(_OWORD *)v180 = 0uLL;
      v31 = *a4;
      v30 = a4[1];
      if (v30 == *a4)
      {
        v34 = vdupq_n_s64((unint64_t)v30);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 16;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
        }
        while (v30 != v31);
        v34 = *(int64x2_t *)a4;
      }
      v35 = v29 + 16;
      *a4 = v32;
      a4[1] = v29 + 16;
      v147 = v34;
      v36 = a4[2];
      a4[2] = &v27[16 * v28];
      *(_QWORD *)&v148 = v36;
      v146 = (void **)v34.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v146);
      v37 = *(std::__shared_weak_count **)&v180[8];
      a4[1] = v35;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v180;
      *(_OWORD *)v180 = 0uLL;
      a4[1] = v21 + 16;
    }
    v40 = v163;
    if (v163)
    {
      v41 = (unint64_t *)&v163->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
    if (*((_QWORD *)&v164 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v178, (uint64_t *)a4[1] - 2);
    if (v178
    {
      v46 = v179;
      if (v179)
      {
        v47 = (unint64_t *)&v179->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a2 + 5, (uint64_t *)&v178);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*i + 16))(*i))
    {
      v160 = (kaldi::OnlineFeatInputItf *)v178;
      std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v160, &v164);
      v50 = v164;
      *(_OWORD *)v180 = v164;
      v164 = 0uLL;
      v52 = a4[1];
      v51 = (unint64_t)a4[2];
      if ((unint64_t)v52 >= v51)
      {
        v145 = v50;
        v54 = (v52 - *a4) >> 4;
        if ((unint64_t)(v54 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v55 = v51 - (_QWORD)*a4;
        v56 = v55 >> 3;
        if (v55 >> 3 <= (unint64_t)(v54 + 1))
          v56 = v54 + 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        *((_QWORD *)&v148 + 1) = a4 + 2;
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v57);
        v60 = &v58[16 * v54];
        *(_OWORD *)v60 = v145;
        *(_OWORD *)v180 = 0uLL;
        v62 = *a4;
        v61 = a4[1];
        if (v61 == *a4)
        {
          v65 = vdupq_n_s64((unint64_t)v61);
          v63 = &v58[16 * v54];
        }
        else
        {
          v63 = &v58[16 * v54];
          do
          {
            v64 = *((_OWORD *)v61 - 1);
            v61 -= 16;
            *((_OWORD *)v63 - 1) = v64;
            v63 -= 16;
            *(_QWORD *)v61 = 0;
            *((_QWORD *)v61 + 1) = 0;
          }
          while (v61 != v62);
          v65 = *(int64x2_t *)a4;
        }
        v53 = v60 + 16;
        *a4 = v63;
        a4[1] = v60 + 16;
        v147 = v65;
        v66 = a4[2];
        a4[2] = &v58[16 * v59];
        *(_QWORD *)&v148 = v66;
        v146 = (void **)v65.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v146);
      }
      else
      {
        *(_OWORD *)v52 = v50;
        v53 = v52 + 16;
        *(_OWORD *)v180 = 0uLL;
      }
      a4[1] = v53;
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v178, (uint64_t *)a4[1] - 2);
    }
    i += 2;
  }
  v70 = *(_QWORD **)(v14 + 80);
  for (j = *(_QWORD **)(v14 + 88); v70 != j; v70 += 2)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v70 + 48))(*v70))
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>("cache", &v146);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v146);
      v72 = (std::__shared_weak_count *)v147.i64[0];
      if (v147.i64[0])
      {
        v73 = (unint64_t *)(v147.i64[0] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      quasar::FeatureExtractor::init(*a3);
      v75 = *a3;
      v76 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a1);
      quasar::MultiAudioBuffer::getBuffer(*v76, 0, &v160);
      v77 = v160;
      v158 = v178;
      v159 = v179;
      if (v179)
      {
        v78 = (unint64_t *)&v179->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      LODWORD(v146) = *(_DWORD *)(*((_QWORD *)*a1 + 3) + 24);
      v147.i64[0] = 0;
      v147.i8[8] = 0;
      v152 = 0;
      v153 = 0;
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      memset(v151, 0, sizeof(v151));
      v154 = 0u;
      __p = 0u;
      v156 = 0;
      v157 = 1;
      if (v77)
        v80 = (uint64_t)v77 + 16;
      else
        v80 = 0;
      quasar::FeatureExtractor::createOnlineFeInput(v75, v80, (uint64_t *)&v158);
      v81 = a4[1];
      v82 = (unint64_t)a4[2];
      if ((unint64_t)v81 >= v82)
      {
        v83 = (v81 - *a4) >> 4;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v85 = v82 - (_QWORD)*a4;
        if (v85 >> 3 > v84)
          v84 = v85 >> 3;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
          v86 = 0xFFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        v182 = a4 + 2;
        v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v86);
        v89 = &v87[16 * v83];
        *(_OWORD *)v89 = v164;
        v164 = 0uLL;
        v91 = *a4;
        v90 = a4[1];
        if (v90 == *a4)
        {
          v94 = vdupq_n_s64((unint64_t)v90);
          v92 = &v87[16 * v83];
        }
        else
        {
          v92 = &v87[16 * v83];
          do
          {
            v93 = *((_OWORD *)v90 - 1);
            v90 -= 16;
            *((_OWORD *)v92 - 1) = v93;
            v92 -= 16;
            *(_QWORD *)v90 = 0;
            *((_QWORD *)v90 + 1) = 0;
          }
          while (v90 != v91);
          v94 = *(int64x2_t *)a4;
        }
        v95 = v89 + 16;
        *a4 = v92;
        a4[1] = v89 + 16;
        *(int64x2_t *)&v180[8] = v94;
        v96 = a4[2];
        a4[2] = &v87[16 * v88];
        v181 = v96;
        *(_QWORD *)v180 = v94.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v180);
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        a4[1] = v95;
        if (v97)
        {
          v98 = (unint64_t *)&v97->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
      else
      {
        *(_OWORD *)v81 = v164;
        v164 = 0uLL;
        a4[1] = v81 + 16;
      }
      if (SHIBYTE(v156) < 0)
        operator delete((void *)__p);
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
      if (*((_QWORD *)&v154 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = *(std::__shared_weak_count **)&v151[32];
      if (*(_QWORD *)&v151[32])
      {
        v104 = (unint64_t *)(*(_QWORD *)&v151[32] + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      *(_QWORD *)v180 = v151;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v180);
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
      if (*((_QWORD *)&v150 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      if (*((_QWORD *)&v149 + 1))
      {
        v110 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = v147.i64[0];
      if (v147.i64[0])
      {
        v116 = (unint64_t *)(v147.i64[0] + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 16))(v115);
      }
      v118 = v159;
      if (v159)
      {
        v119 = (unint64_t *)&v159->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = v161;
      if (v161)
      {
        v122 = (unint64_t *)&v161->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a2 + 7, (uint64_t *)a4[1] - 2);
  if (SHIBYTE(v176) < 0)
    operator delete(v175[0]);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = *(std::__shared_weak_count **)&v171[32];
  if (*(_QWORD *)&v171[32])
  {
    v128 = (unint64_t *)(*(_QWORD *)&v171[32] + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v146 = (void **)v171;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v146);
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v166;
  if (v166)
  {
    v140 = (unint64_t *)(v166 + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v139 + 16))(v139);
  }
  v142 = v179;
  if (v179)
  {
    v143 = (unint64_t *)&v179->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
}

void sub_1AE021AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a43);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v43 - 160);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::runSyncUtterance(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  kaldi::quasar::Vocab *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  kaldi::quasar::Vocab **v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  int v96;
  BOOL v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  __int128 v112;
  void *__p[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  __int128 *v134[3];
  __int128 *v135[3];
  __int128 *v136[3];
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char *v172;
  char *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  kaldi::quasar::Vocab *v178;
  std::__shared_weak_count *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)*a2 != *(_QWORD *)(*a2 + 8))
  {
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v155 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v155);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v155, "Symbol table list passed to runSyncUtterance() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v155);
  }
  v10 = *a3;
  v11 = *(_QWORD **)(*a3 + 80);
  v12 = *(_QWORD **)(*a3 + 88);
  if (v11 != v12)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 72))(*v11) & 1) == 0)
      {
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v155 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v155);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v155, "All secondary chain decoders should affect recognition.");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v155);
      }
      v11 += 2;
    }
    while (v11 != v12);
    v10 = *a3;
    v11 = *(_QWORD **)(*a3 + 80);
  }
  v14 = (kaldi::quasar::Vocab *)*v11;
  v13 = (std::__shared_weak_count *)v11[1];
  v178 = (kaldi::quasar::Vocab *)*v11;
  v179 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v10 = *a3;
    v11 = *(_QWORD **)(*a3 + 80);
  }
  v17 = *(char **)(v10 + 88);
  v176 = 0;
  v177 = 0;
  v175 = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>((char *)&v175, v11 + 2, v17, (v17 - (char *)(v11 + 2)) >> 4);
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48))
    goto LABEL_33;
  if (((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(_QWORD *)v14 + 80))(v14) & 1) != 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48)
      || !(*(unsigned int (**)(kaldi::quasar::Vocab *))(*(_QWORD *)v14 + 88))(v14)
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3[11] + 56))(a3[11]) & 1) != 0)
    {
      goto LABEL_33;
    }
    if (quasar::gLogLevel >= 4)
    {
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v156 = 0u;
      v157 = 0u;
      v155 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v155);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v155, (uint64_t)"Eager disabled: silence posterior required but not available: ", 62);
      kaldi::quasar::Vocab::OOvWord(v14, (std::string *)__p);
      if ((SBYTE7(v114) & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((SBYTE7(v114) & 0x80u) == 0)
        v20 = BYTE7(v114);
      else
        v20 = (uint64_t)__p[1];
LABEL_29:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      if (SBYTE7(v114) < 0)
        operator delete(__p[0]);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v155);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v155 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v155);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v155, (uint64_t)"Eager disabled: not supported by first-pass decoder: ", 53);
    kaldi::quasar::Vocab::OOvWord(v14, (std::string *)__p);
    if ((SBYTE7(v114) & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((SBYTE7(v114) & 0x80u) == 0)
      v20 = BYTE7(v114);
    else
      v20 = (uint64_t)__p[1];
    goto LABEL_29;
  }
  *(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48) = 0;
LABEL_33:
  v22 = (kaldi::quasar::Vocab **)v175;
  v21 = v176;
  while (v22 != (kaldi::quasar::Vocab **)v21)
  {
    if (*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48)
      && ((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(_QWORD *)*v22 + 80))(*v22) & 1) == 0)
    {
      if (quasar::gLogLevel >= 5)
      {
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v155 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v155);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v155, (uint64_t)"Eager disabled: not supported by second-pass decoder: ", 54);
        kaldi::quasar::Vocab::OOvWord(*v22, (std::string *)__p);
        if ((SBYTE7(v114) & 0x80u) == 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        if ((SBYTE7(v114) & 0x80u) == 0)
          v25 = BYTE7(v114);
        else
          v25 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        if (SBYTE7(v114) < 0)
          operator delete(__p[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v155);
      }
      *(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48) = 0;
      break;
    }
    v22 += 2;
  }
  v26 = a2;
  v111 = a4;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v27 = v175;
  v28 = v176;
  if (v175 != v176)
  {
    v29 = 0;
    do
    {
      v30 = *(_OWORD *)v27;
      v31 = v27[1];
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 16);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      if ((unint64_t)v29 >= v174)
      {
        v112 = v30;
        v34 = (v29 - v172) >> 4;
        if ((unint64_t)(v34 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v35 = (uint64_t)(v174 - (_QWORD)v172) >> 3;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if (v174 - (unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        *(_QWORD *)&v157 = &v174;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v174, v36);
        v38 = &v37[16 * v34];
        *(_QWORD *)&v155 = v37;
        *((_QWORD *)&v155 + 1) = v38;
        *((_QWORD *)&v156 + 1) = &v37[16 * v39];
        *(_OWORD *)v38 = v112;
        *(_QWORD *)&v156 = v38 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)&v172, &v155);
        v29 = v173;
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&v155);
      }
      else
      {
        *(_QWORD *)v29 = v30;
        *((_QWORD *)v29 + 1) = v31;
        v29 += 16;
      }
      v173 = v29;
      v27 += 2;
    }
    while (v27 != v28);
  }
  v40 = (std::__shared_weak_count *)a3[6];
  v153 = a3[5];
  v154 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = (std::__shared_weak_count *)a3[8];
  v151 = a3[7];
  v152 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (std::__shared_weak_count *)a3[10];
  v149 = a3[9];
  v150 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = (std::__shared_weak_count *)a3[12];
  v147 = a3[11];
  v148 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(*a3 + 72);
  v145 = *(_QWORD *)(*a3 + 64);
  v146 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = (std::__shared_weak_count *)a3[14];
  v143 = a3[13];
  v144 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v142 = 0;
  v141 = 0;
  v58 = *(_QWORD *)(*a1 + 24) + 56;
  v59 = (std::__shared_weak_count *)a3[16];
  v139 = a3[15];
  v140 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v138 = 0;
  v137 = 0;
  memset(v136, 0, sizeof(v136));
  memset(v135, 0, sizeof(v135));
  memset(v134, 0, sizeof(v134));
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v114 = 0;
  quasar::DecoderPassData::DecoderPassData((uint64_t)&v155, &v153, &v151, &v149, &v147, &v145, &v143, 0, 1, (_QWORD **)&v172, &v141, v58, &v139, &v137, 4, 0, v136, v135, v134,
    0,
    0,
    (uint64_t **)__p);
  v132 = __p;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v132);
  __p[0] = v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v135;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v62 = v138;
  if (v138)
  {
    v63 = (unint64_t *)&v138->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v140;
  if (v140)
  {
    v66 = (unint64_t *)&v140->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v142;
  if (v142)
  {
    v69 = (unint64_t *)&v142->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v144;
  if (v144)
  {
    v72 = (unint64_t *)&v144->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v146;
  if (v146)
  {
    v75 = (unint64_t *)&v146->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v148;
  if (v148)
  {
    v78 = (unint64_t *)&v148->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v150;
  if (v150)
  {
    v81 = (unint64_t *)&v150->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v152;
  if (v152)
  {
    v84 = (unint64_t *)&v152->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v154;
  if (v154)
  {
    v87 = (unint64_t *)&v154->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v26[1];
  v130 = *v26;
  v131 = (std::__shared_weak_count *)v89;
  if (v89)
  {
    v90 = (unint64_t *)(v89 + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  quasar::SystemCombinationDecoder::initializeDecoderChainOutput((uint64_t)a1, &v130, &v132);
  v92 = v131;
  if (v131)
  {
    v93 = (unint64_t *)&v131->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Waiting for first valid feature frame of first utterance...", 59);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (!*(_DWORD *)(*a1 + 4) && !kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)a3[9], 0, 1))
  {
    v100 = *(_QWORD *)(v111 + 24);
    if (!v100)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 48))(v100))
      v101 = 2;
    else
      v101 = 3;
    goto LABEL_161;
  }
  v95 = quasar::Decoder::run((uint64_t)v178, (uint64_t)&v155, (uint64_t)&v132, a1, v111, 1, v175 == v176);
  v96 = v95;
  if (*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 48))
    v97 = 0;
  else
    v97 = v95 == 0;
  if (v97)
  {
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v180, v111);
    v96 = quasar::Decoder::runChain(&v175, (uint64_t)v180, (uint64_t)&v155, (uint64_t)&v132, a1);
    v98 = v181;
    if (v181 == v180)
    {
      v99 = 4;
      v98 = v180;
    }
    else
    {
      if (!v181)
        goto LABEL_156;
      v99 = 5;
    }
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
LABEL_156:
  if (v96 == 2)
  {
    *(_DWORD *)a5 = 0;
    goto LABEL_162;
  }
  if (v96 == 1)
    v101 = 2;
  else
    v101 = 1;
LABEL_161:
  *(_DWORD *)a5 = v101;
LABEL_162:
  v102 = v133;
  *(_QWORD *)(a5 + 8) = v132;
  *(_QWORD *)(a5 + 16) = v102;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = v133;
  if (v133)
  {
    v106 = (unint64_t *)&v133->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  quasar::DecoderPassData::~DecoderPassData((void **)&v155);
  *(_QWORD *)&v155 = &v172;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
  *(_QWORD *)&v155 = &v175;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
  v108 = v179;
  if (v179)
  {
    v109 = (unint64_t *)&v179->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
}

void sub_1AE022868(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1AE022880()
{
  uint64_t v0;
  void **v1[200];

  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&STACK[0x2A0]);
  v1[0] = (void **)(v0 - 192);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)(v0 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 144);
  JUMPOUT(0x1AE0228D4);
}

void sub_1AE022890()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  void **v2[200];

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  v2[0] = (void **)(v1 - 192);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](v2);
  v2[0] = (void **)(v1 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 144);
  JUMPOUT(0x1AE0228D4);
}

void quasar::SystemCombinationDecoder::RecogChain::~RecogChain(quasar::SystemCombinationDecoder::RecogChain *this)
{
  void **v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void quasar::SystemCombinationDecoder::initializeDecoderChainOutput(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  char v22;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_1E5D440B8;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v6 + 24));
  *(_QWORD *)&v16[0] = v7;
  *((_QWORD *)&v16[0] + 1) = v6;
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,void>(a2, v16, a3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
  if (*((_QWORD *)&v16[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)*a3);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(char *)(v11 + 199) < 0)
  {
    if (!*(_QWORD *)(v11 + 184))
      return;
  }
  else if (!*(_BYTE *)(v11 + 199))
  {
    return;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v16);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 544, v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
  if (*((_QWORD *)&v16[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD *)(*a3 + 544);
  std::string::basic_string[abi:ne180100]<0>(v21, "version");
  LODWORD(v16[0]) = quasar::getType((quasar *)1);
  std::to_string((std::string *)((char *)v16 + 8), 1);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild(v15, (uint64_t)v21, (uint64_t)v16, 1);
  quasar::PTree::~PTree((quasar::PTree *)v16);
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_1AE022B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 33) < 0)
    operator delete(*(void **)(v3 - 56));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::clearAsyncTasks(quasar::SystemCombinationDecoder *this)
{
  std::thread *v2;
  std::thread *v3;
  std::thread *v4;

  v2 = (std::thread *)*((_QWORD *)this + 70);
  v3 = (std::thread *)*((_QWORD *)this + 71);
  if (v2 == v3)
  {
    *((_BYTE *)this + 552) = 0;
  }
  else
  {
    do
    {
      if (v2->__t_)
        std::thread::join(v2);
      ++v2;
    }
    while (v2 != v3);
    v4 = (std::thread *)*((_QWORD *)this + 71);
    v2 = (std::thread *)*((_QWORD *)this + 70);
    *((_BYTE *)this + 552) = 0;
    while (v4 != v2)
      std::thread::~thread(v4 - 1);
  }
  *((_QWORD *)this + 71) = v2;
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  *((_QWORD *)this + 73) = (char *)this + 592;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 74) = 0;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy((uint64_t)this + 608, *((_QWORD **)this + 77));
  *((_QWORD *)this + 76) = (char *)this + 616;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = 0;
}

uint64_t quasar::SystemCombinationDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  std::thread *v11;
  std::thread *v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string __p;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (*(_BYTE *)(a1 + 713) && *((_DWORD *)*a4 + 1))
  {
    if (quasar::gLogLevel >= 4)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Skipping run for post-first utterances of Decoder: ", 51);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_29;
    }
    return 0;
  }
  if (*(_BYTE *)(*a3 + 581))
  {
    if (quasar::gLogLevel >= 4)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Last frame of utterance has been processed, running system selection", 68);
LABEL_15:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
    }
  }
  else
  {
    if (*(_BYTE *)(*((_QWORD *)*a4 + 3) + 48))
    {
      if (quasar::gLogLevel >= 4)
      {
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Last frame of utterance has not been processed, returning success without running system selection", 98);
LABEL_29:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
      }
      return 0;
    }
    if (quasar::gLogLevel >= 4)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Eager not enabled, running system selection", 43);
      goto LABEL_15;
    }
  }
  v11 = *(std::thread **)(a1 + 560);
  v12 = *(std::thread **)(a1 + 568);
  while (v11 != v12)
  {
    if (v11->__t_)
      std::thread::join(v11);
    ++v11;
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  v13 = *(unsigned __int8 *)(a1 + 552);
  if (*(_BYTE *)(a1 + 552) && quasar::gLogLevel >= 2)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Secondary decoder chains threw an exception. Skipping system combination.", 73);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v20);
    std::mutex::unlock((std::mutex *)(a1 + 488));
    return 2;
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  if (v13)
    return 2;
  if (quasar::gLogLevel >= 5)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Done with workerthreads", 23);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
  }
  if (*(char *)(a1 + 487) < 0)
    v16 = *(_QWORD *)(a1 + 472);
  else
    v16 = *(unsigned __int8 *)(a1 + 487);
  if (v16)
  {
    quasar::SystemCombinationDecoder::selectSpecifiedChain(a1, a2, a3, (uint64_t)a4);
    v14 = 0;
  }
  else
  {
    v14 = quasar::SystemCombinationDecoder::selectChain(a1, a2, a3, a4);
  }
  *(_BYTE *)(a1 + 552) = 0;
  v17 = *(_QWORD *)(a1 + 568);
  v18 = *(_QWORD *)(a1 + 560);
  while (v17 != v18)
    std::thread::~thread((std::thread *)(v17 - 8));
  *(_QWORD *)(a1 + 568) = v18;
  std::__tree<std::string>::destroy(a1 + 584, *(char **)(a1 + 592));
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1 + 608, *(_QWORD **)(a1 + 616));
  *(_QWORD *)(a1 + 608) = a1 + 616;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  return v14;
}

void sub_1AE02301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemCombinationDecoder::selectSpecifiedChain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 608, (const void **)(a1 + 464));
  if (a1 + 616 != v8)
  {
    v9 = v8;
    if (quasar::gLogLevel >= 4)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Output of the secondary decoder chain (", 39);
      v11 = *(char *)(a1 + 487);
      if (v11 >= 0)
        v12 = a1 + 464;
      else
        v12 = *(_QWORD *)(a1 + 464);
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a1 + 487);
      else
        v13 = *(_QWORD *)(a1 + 472);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") was selected.", 15);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
    }
    v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 584, (const void **)(a1 + 464));
    if (a1 + 592 == v15)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v21, "Could not find frame duration of selected secondary decoder chain.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
    }
    v16 = v15;
    v17 = *(_DWORD *)(*a3 + 576);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
    v19 = *(_QWORD *)(v9 + 64);
    if (v18 * v17 < (*(_DWORD *)(v16 + 56) * *(_DWORD *)(v19 + 576)))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v21, "decoderChainOutput->uttNumFrames * decoderPassData.featureMatrix->FrameDurationMs() >= selectedDecoderChainOutput->uttNumFrames * selectedFrameDuration->second");
    }
    else
    {
      if (*(unsigned __int8 *)(*a3 + 580) == *(unsigned __int8 *)(v19 + 580))
      {
        quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(a1, a2, a3, a4);
        quasar::SystemCombinationDecoder::alignResultChoices(a1, *(uint64_t **)(*a3 + 352), *(uint64_t **)(*(_QWORD *)(v9 + 64) + 352));
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 352), (uint64_t *)(*(_QWORD *)(v9 + 64) + 352));
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 392), (uint64_t *)(*(_QWORD *)(v9 + 64) + 392));
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v21, "decoderChainOutput->processedLastFrame == selectedDecoderChainOutput->processedLastFrame");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
  }
  if (quasar::gLogLevel >= 4)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Output of the primary decoder chain was selected.", 49);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
  }
  return 0;
}

void sub_1AE023340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t quasar::SystemCombinationDecoder::selectChain(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t **v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::vector<std::wstring> *v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  _BOOL4 v64;
  char v65;
  _QWORD *v66;
  _QWORD *v67;
  void *__p;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void **v91;

  quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(a1, a2, a3, (uint64_t)a4);
  v8 = (_QWORD *)*a3;
  v9 = *(uint64_t ***)(*a3 + 352);
  v10 = *(_QWORD *)(a1 + 608);
  v11 = *(uint64_t **)(v10 + 64);
  v12 = (uint64_t **)v11[44];
  if (v11[28])
  {
    v13 = v8[28];
    v8 += 28;
    if (!v13)
    {
      v8 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8, v11 + 28);
      v11 = *(uint64_t **)(v10 + 64);
    }
  }
  if (v11[30])
  {
    v8 = (_QWORD *)(*a3 + 240);
    if (!*v8)
    {
      v8 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8, v11 + 30);
      v11 = *(uint64_t **)(v10 + 64);
    }
  }
  if (v11[32] && !*(_QWORD *)(*a3 + 256))
    v8 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 256), v11 + 32);
  v15 = *v12;
  v14 = v12[1];
  if (v9[1] == *v9)
  {
    if (v14 != v15)
      goto LABEL_26;
    if (quasar::gLogLevel >= 1)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Both the primary and secondary result choices are empty", 55);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v74);
    }
    return 2;
  }
  if (v14 == v15)
  {
    if (quasar::gLogLevel < 4)
      return 0;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v74 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"No result choices were available for the secondary chain. Selecting the primary chain", 85);
LABEL_42:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v74);
    return 0;
  }
  if (quasar::gLogLevel >= 5)
  {
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v74 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Result choices for the primary chain:", 37);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v74);
  }
  quasar::SystemCombinationDecoder::printResultChoices((uint64_t)v8, (uint64_t)v9);
  if (quasar::gLogLevel >= 5)
  {
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v74 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Result choices for the secondary chain ", 39);
    v18 = *(char *)(v10 + 55);
    if (v18 >= 0)
      v19 = v10 + 32;
    else
      v19 = *(_QWORD *)(v10 + 32);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(v10 + 55);
    else
      v20 = *(_QWORD *)(v10 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v74);
  }
  quasar::SystemCombinationDecoder::printResultChoices(v16, (uint64_t)v12);
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v21 = *v9;
  v22 = v9[1];
  v23 = 0xAAAAAAAAAAAAAAABLL * (v22 - *v9);
  v24 = *(int *)(a1 + 632);
  if (v23 >= v24)
  {
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v71, 0, v21, &v21[3 * (int)v24], v24);
  }
  else
  {
    if (quasar::gLogLevel < 5)
    {
      v25 = 0;
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Number of primary chain alternatives was less than the number of hypotheses requested for selection. The last choice will be repeated", 133);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v74);
      v25 = v72;
      v21 = *v9;
      v22 = v9[1];
      v23 = 0xAAAAAAAAAAAAAAABLL * (v22 - *v9);
    }
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v71, v25, v21, v22, v23);
    v41 = v9[1];
    if (0x5555555555555555 * (v41 - *v9) + *(int *)(a1 + 632))
    {
      v42 = 0;
      v43 = v72;
      do
      {
        if ((unint64_t)v43 >= v73)
        {
          v43 = (_QWORD *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v71, v41 - 3);
        }
        else
        {
          *v43 = 0;
          v43[1] = 0;
          v43[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v43, *(v41 - 3), *(v41 - 2), 0x6DB6DB6DB6DB6DB7 * ((*(v41 - 2) - *(v41 - 3)) >> 5));
          v43 += 3;
        }
        v72 = v43;
        ++v42;
        v41 = v9[1];
      }
      while (*(int *)(a1 + 632) + 0x5555555555555555 * (v41 - *v9) > v42);
    }
  }
  v44 = *v12;
  v45 = v12[1];
  v46 = 0xAAAAAAAAAAAAAAABLL * (v45 - *v12);
  v47 = *(int *)(a1 + 636);
  if (v46 >= v47)
  {
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v71, v72, v44, &v44[3 * (int)v47], *(int *)(a1 + 636));
    v48 = (uint64_t **)*v9;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Number of secondary chain alternatives was less than the number of hypotheses requested for selection. The last choice will be repeated", 135);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v74);
      v44 = *v12;
      v45 = v12[1];
      v46 = 0xAAAAAAAAAAAAAAABLL * (v45 - *v12);
    }
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v71, v72, v44, v45, v46);
    v48 = (uint64_t **)*v9;
    if (0x5555555555555555 * (v9[1] - *v9) + *(int *)(a1 + 632))
    {
      v49 = 0;
      v50 = v72;
      do
      {
        v51 = v12[1];
        if ((unint64_t)v50 >= v73)
        {
          v50 = (_QWORD *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v71, v51 - 3);
        }
        else
        {
          *v50 = 0;
          v50[1] = 0;
          v50[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v50, *(v51 - 3), *(v51 - 2), 0x6DB6DB6DB6DB6DB7 * ((*(v51 - 2) - *(v51 - 3)) >> 5));
          v50 += 3;
        }
        v72 = v50;
        ++v49;
        v48 = (uint64_t **)*v9;
      }
      while (*(int *)(a1 + 632) + 0x5555555555555555 * (v9[1] - *v9) > v49);
    }
  }
  if (quasar::SystemCombinationDecoder::isResultChoiceUncombinable(a1, v48))
  {
    if (quasar::gLogLevel >= 4)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Output of primary decoder chain was selected because it contains uncombinable word tags", 87);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v74);
    }
    *(_QWORD *)&v74 = &v71;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    return 0;
  }
  __p = 0;
  v69 = 0;
  v70 = 0;
  if (quasar::SystemCombinationDecoder::extractFeatures(a1, &v71, &__p))
  {
    v53 = *a3;
    if (!*(_QWORD *)(*a3 + 272))
    {
      v54 = operator new(0x30uLL);
      v54[2] = 0;
      *v54 = &unk_1E5D45820;
      v54[1] = 0;
      v54[4] = 0;
      v54[5] = 0;
      v54[3] = 0;
      *(_QWORD *)&v74 = v54 + 3;
      *((_QWORD *)&v74 + 1) = v54;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v53 + 272, &v74);
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = *(_QWORD *)(a1 + 704);
      *(_QWORD *)&v75 = 0;
      v74 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v74, *(__int128 **)(v58 + 32), *(__int128 **)(v58 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v58 + 40) - *(_QWORD *)(v58 + 32)) >> 3));
      v59 = *(std::vector<std::wstring> **)(*a3 + 272);
      std::vector<std::string>::__vdeallocate(v59);
      *(_OWORD *)&v59->__begin_ = v74;
      v59->__end_cap_.__value_ = (std::wstring *)v75;
      v74 = 0uLL;
      *(_QWORD *)&v75 = 0;
      v91 = (void **)&v74;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v91);
    }
    v60 = operator new(0x30uLL);
    v60[2] = 0;
    *v60 = &unk_1E5D45900;
    v60[1] = 0;
    v60[4] = 0;
    v60[5] = 0;
    v60[3] = 0;
    *(_QWORD *)&v74 = v60 + 3;
    *((_QWORD *)&v74 + 1) = v60;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 288, &v74);
    v40 = *((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v40);
      }
    }
    v63 = *(char **)(*a3 + 288);
    if (v63 != (char *)&__p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v63, (char *)__p, (uint64_t)v69, (v69 - (_BYTE *)__p) >> 2);
    if (*(char *)(a1 + 671) < 0)
    {
      if (*(_QWORD *)(a1 + 656))
        goto LABEL_88;
    }
    else if (*(_BYTE *)(a1 + 671))
    {
LABEL_88:
      v64 = quasar::SystemCombinationDecoder::runSystemSelection(a1, (uint64_t *)&__p);
      v65 = 1;
      goto LABEL_96;
    }
    if (quasar::gLogLevel >= 4)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"No selection model was provided, output of primary decoder chain was selected.", 78);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v74);
    }
    v65 = 0;
    v64 = 0;
    v40 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Feature extraction for system selection failed. Selecting the primary chain.", 76);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v74);
    }
    v65 = 0;
    v64 = 0;
    v40 = 2;
  }
LABEL_96:
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v74 = &v71;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if ((v65 & 1) != 0)
  {
    if (!v64)
    {
      if (quasar::gLogLevel < 4)
        return 0;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Output of the primary decoder chain was selected.", 49);
      goto LABEL_42;
    }
LABEL_26:
    v26 = *(_QWORD *)(a1 + 608);
    if (quasar::gLogLevel >= 4)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Output of the secondary decoder chain ", 38);
      v28 = *(_QWORD *)(a1 + 608);
      v31 = *(_QWORD *)(v28 + 32);
      v29 = v28 + 32;
      v30 = v31;
      v32 = *(char *)(v29 + 23);
      if (v32 >= 0)
        v33 = v29;
      else
        v33 = v30;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(v29 + 23);
      else
        v34 = *(_QWORD *)(v29 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" was selected.", 14);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v74);
    }
    if (v9[1] != *v9 && v12[1] != *v12)
    {
      v36 = *(_QWORD *)(a1 + 584);
      if ((quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4) & 1) == 0)
      {
        v37 = *(_DWORD *)(*a3 + 576);
        v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
        v39 = *(_QWORD *)(v26 + 64);
        if (v38 * v37 != *(_DWORD *)(v36 + 56) * *(_DWORD *)(v39 + 576))
        {
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"primary (", 9);
          v66 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") != secondary (", 16);
          v67 = (_QWORD *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v67, ")");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v74);
        }
        if (*(unsigned __int8 *)(*a3 + 580) != *(unsigned __int8 *)(v39 + 580))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "decoderChainOutput->processedLastFrame == selectedDecoderChainOutput->processedLastFrame");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
        }
      }
    }
    quasar::SystemCombinationDecoder::alignResultChoices(a1, *(uint64_t **)(*a3 + 352), *(uint64_t **)(*(_QWORD *)(v26 + 64) + 352));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 352), (uint64_t *)(*(_QWORD *)(v26 + 64) + 352));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 392), (uint64_t *)(*(_QWORD *)(v26 + 64) + 392));
    return 0;
  }
  return v40;
}

void sub_1AE023F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  quasar::SystemCombinationDecoder::populateResultChoices(a1, a2, a3, a4);
  v8 = *(_QWORD **)(a1 + 608);
  v9 = (_QWORD *)(a1 + 616);
  if (v8 != v9)
  {
    do
    {
      quasar::SystemCombinationDecoder::populateResultChoices(v7, a2, v8 + 8, a4);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
}

void quasar::SystemCombinationDecoder::alignResultChoices(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *DestToks;
  void *v8[26];

  v3 = *a2;
  if (*a2 != a2[1])
  {
    v4 = *a3;
    v5 = a3[1];
    if (*a3 != v5)
    {
      v6 = 2 * (*(_BYTE *)(a1 + 712) == 0);
      do
      {
        quasar::Align::Align(v8, v3, v4, v6);
        DestToks = (uint64_t *)quasar::Align::getDestToks((quasar::Align *)v8);
        if ((uint64_t *)v4 != DestToks)
          std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *DestToks, DestToks[1], 0x6DB6DB6DB6DB6DB7 * ((DestToks[1] - *DestToks) >> 5));
        quasar::Align::~Align(v8);
        v4 += 24;
      }
      while (v4 != v5);
    }
  }
}

void sub_1AE0240A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Align::~Align(&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemCombinationDecoder::isResultChoiceUncombinable(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;

  if (*(_QWORD *)(a1 + 672) != *(_QWORD *)(a1 + 680))
  {
    v2 = *a2;
    v3 = a2[1];
    if (*a2 != v3)
    {
      while (2)
      {
        v5 = *(uint64_t **)(a1 + 672);
        v6 = *(uint64_t **)(a1 + 680);
        while (v5 != v6)
        {
          if (quasar::endsWith(v2, v5))
            return 1;
          v5 += 3;
        }
        v2 += 28;
        if (v2 != v3)
          continue;
        break;
      }
    }
  }
  return 0;
}

void quasar::SystemCombinationDecoder::printResultChoices(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  uint64_t v38;
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v2 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v3 = a2;
    v4 = 0;
    v5 = v39;
    v6 = MEMORY[0x1E0DE4F60];
    v7 = *MEMORY[0x1E0DE4F60];
    v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v34 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      if (v2[1] == *v2)
      {
        if (quasar::gLogLevel >= 5)
        {
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Result choice ", 14);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" was empty", 10);
          ++v4;
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
      }
      else
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Result choice ", 14);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (size = ", 9);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
        v10 = *v2;
        if (v2[1] - *v2 == 224)
        {
          v11 = 0;
        }
        else
        {
          v33 = v4;
          v13 = v7;
          v14 = v3;
          v15 = v5;
          v16 = v6;
          v17 = 0;
          v18 = 0;
          do
          {
            v19 = v10 + v17;
            v20 = *(char *)(v19 + 23);
            if (v20 >= 0)
              v21 = v19;
            else
              v21 = *(_QWORD *)v19;
            if (v20 >= 0)
              v22 = *(unsigned __int8 *)(v19 + 23);
            else
              v22 = *(_QWORD *)(v19 + 8);
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v21, v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (", 2);
            v24 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"), ", 3);
            ++v18;
            v10 = *v2;
            v11 = 0x6DB6DB6DB6DB6DB7 * ((v2[1] - *v2) >> 5) - 1;
            v17 += 224;
          }
          while (v11 > v18);
          v6 = v16;
          v5 = v15;
          v3 = v14;
          v7 = v13;
          v4 = v33;
        }
        v25 = v10 + 224 * v11;
        v26 = *(char *)(v25 + 23);
        if (v26 >= 0)
          v27 = v25;
        else
          v27 = *(_QWORD *)v25;
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(v25 + 23);
        else
          v28 = *(_QWORD *)(v25 + 8);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v27, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (", 2);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")\n", 2);
        if (quasar::gLogLevel >= 5)
        {
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::stringbuf::str();
          if ((v37 & 0x80u) == 0)
            v31 = __p;
          else
            v31 = (void **)__p[0];
          if ((v37 & 0x80u) == 0)
            v32 = v37;
          else
            v32 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v31, v32);
          if ((char)v37 < 0)
            operator delete(__p[0]);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
        v38 = v7;
        *(_QWORD *)((char *)&v39[-1] + *(_QWORD *)(v7 - 24)) = v35;
        v39[0] = v34;
        if (v40 < 0)
          operator delete((void *)v39[8]);
        ++v4;
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](&v41);
      }
      v2 += 3;
    }
    while (v2 != *(uint64_t **)(v3 + 8));
  }
}

void sub_1AE0244B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0)
    operator delete(__p);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a52);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL quasar::SystemCombinationDecoder::extractFeatures(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD **v15;
  unint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD **v30;
  unint64_t v31;
  _QWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  _QWORD *v42;
  uint64_t v44;
  unint64_t v45;
  _OWORD v48[17];
  void **v49;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = *(int *)(a1 + 636) + (uint64_t)*(int *)(a1 + 632);
  if (v4 == v5)
  {
    v44 = *(int *)(a1 + 636) + (uint64_t)*(int *)(a1 + 632);
    v45 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    std::vector<std::vector<float>>::vector(v48, v4);
    v6 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + 24 * v8);
        if (*(_QWORD *)(v6 + 24 * v8 + 8) != v9)
        {
          v10 = 0;
          do
          {
            v11 = v9 + 224 * v10;
            v12 = *(_QWORD *)(v11 + 120);
            if (*(_QWORD *)(v11 + 128) == v12)
            {
              v27 = *(_QWORD *)&v48[0] + 24 * v8;
              v28 = (_DWORD *)(v9 + 224 * v10 + 40);
              v30 = (_DWORD **)(v27 + 8);
              v29 = *(_DWORD **)(v27 + 8);
              v32 = (_QWORD *)(v27 + 16);
              v31 = *(_QWORD *)(v27 + 16);
              if ((unint64_t)v29 >= v31)
              {
                v34 = *(_DWORD **)v27;
                v35 = ((uint64_t)v29 - *(_QWORD *)v27) >> 2;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v32, v38);
                  v29 = *v30;
                  v34 = *(_DWORD **)v27;
                }
                else
                {
                  v39 = 0;
                }
                v40 = &v39[4 * v35];
                *(_DWORD *)v40 = *v28;
                v33 = v40 + 4;
                while (v29 != v34)
                {
                  v41 = *--v29;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *(_QWORD *)v27 = v40;
                *v30 = v33;
                *v32 = &v39[4 * v38];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *v29 = *v28;
                v33 = v29 + 1;
              }
              *v30 = v33;
              v6 = *a2;
              v9 = *(_QWORD *)(*a2 + 24 * v8);
            }
            else
            {
              do
              {
                v13 = *(_QWORD *)&v48[0] + 24 * v8;
                v15 = (_DWORD **)(v13 + 8);
                v14 = *(_DWORD **)(v13 + 8);
                v17 = (_QWORD *)(v13 + 16);
                v16 = *(_QWORD *)(v13 + 16);
                if ((unint64_t)v14 >= v16)
                {
                  v19 = *(_DWORD **)v13;
                  v20 = ((uint64_t)v14 - *(_QWORD *)v13) >> 2;
                  v21 = v20 + 1;
                  if ((unint64_t)(v20 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v22 = v16 - (_QWORD)v19;
                  if (v22 >> 1 > v21)
                    v21 = v22 >> 1;
                  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                    v23 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v23 = v21;
                  if (v23)
                  {
                    v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v17, v23);
                    v14 = *v15;
                    v19 = *(_DWORD **)v13;
                  }
                  else
                  {
                    v24 = 0;
                  }
                  v25 = &v24[4 * v20];
                  *(_DWORD *)v25 = *(_DWORD *)(v12 + 24);
                  v18 = v25 + 4;
                  while (v14 != v19)
                  {
                    v26 = *--v14;
                    *((_DWORD *)v25 - 1) = v26;
                    v25 -= 4;
                  }
                  *(_QWORD *)v13 = v25;
                  *v15 = v18;
                  *v17 = &v24[4 * v23];
                  if (v19)
                    operator delete(v19);
                }
                else
                {
                  *v14 = *(_DWORD *)(v12 + 24);
                  v18 = v14 + 1;
                }
                *v15 = v18;
                v12 += 32;
                v6 = *a2;
                v9 = *(_QWORD *)(*a2 + 24 * v8);
              }
              while (v12 != *(_QWORD *)(v9 + 224 * v10 + 128));
            }
            ++v10;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v6 + 24 * v8 + 8) - v9) >> 5) > v10);
          v7 = a2[1];
        }
        ++v8;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v8);
    }
    kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(*(int **)(a1 + 704), (uint64_t *)v48, a3);
    v49 = (void **)v48;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v49);
    v5 = v44;
    v4 = v45;
  }
  else if (quasar::gLogLevel >= 1)
  {
    memset(v48, 0, sizeof(v48));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Received ", 9);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"hypotheses for feature extraction, expected ", 44);
    std::ostream::operator<<();
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v48);
  }
  return v4 == v5;
}

void sub_1AE0248D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 96) = &a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 96));
  _Unwind_Resume(a1);
}

BOOL quasar::SystemCombinationDecoder::runSystemSelection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  float *v11;
  uint64_t v12;
  float Output;
  float v14;
  std::string v16;
  void *v17[3];
  std::string *v18;

  v4 = (unint64_t)(a2[1] - *a2) >> 2;
  memset(v17, 0, sizeof(v17));
  kaldi::Vector<float>::Resize(v17, v4, 0);
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 - *a2;
  if (v6 != *a2)
  {
    v8 = 0;
    v9 = v7 >> 2;
    v10 = v17[0];
    if (v9 <= 1)
      v9 = 1;
    do
    {
      v10[v8] = *(_DWORD *)(v5 + 4 * v8);
      ++v8;
    }
    while (v9 != v8);
  }
  v11 = *(float **)(a1 + 696);
  v12 = *(_QWORD *)(a1 + 704);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(__int128 **)(v12 + 32), *(__int128 **)(v12 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 3));
  Output = kaldi::quasar::LogisticRegressionModel::GetOutput(v11, (uint64_t)v17, (unsigned __int8 **)&v16);
  v18 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v14 = *(float *)(a1 + 640);
  kaldi::Vector<float>::Destroy((uint64_t)v17);
  return Output > v14;
}

void sub_1AE024A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::populateResultChoices(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  if (*(_QWORD *)(*a3 + 352))
  {
    *(_BYTE *)(*a3 + 440) = 1;
  }
  else
  {
    quasar::Decoder::calculateNBest(a2, a3, *(_DWORD *)(*(_QWORD *)a4 + 16));
    if (!*(_QWORD *)(*a3 + 352))
    {
      v5 = *a3 + 352;
      v6 = operator new(0x30uLL);
      v6[2] = 0;
      *v6 = &unk_1E5D456D0;
      v6[1] = 0;
      v6[4] = 0;
      v6[5] = 0;
      *((_QWORD *)&v10 + 1) = v6;
      v6[3] = 0;
      *(_QWORD *)&v10 = v6 + 3;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v5, &v10);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::thread *v2;
  std::thread *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::thread *)**a1;
  if (v2)
  {
    v4 = (std::thread *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1AF44D190](a2, 0x1020C40681C42E3);
  }
  return result;
}

uint64_t kaldi::quasar::SystemSelectionFeatureExtractor::SystemSelectionFeatureExtractor(uint64_t a1, int a2, uint64_t a3, float a4)
{
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  __int128 v11;
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = a2;
  v7 = (_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&v11, "count");
  std::string::basic_string[abi:ne180100]<0>(v12, "mean");
  std::string::basic_string[abi:ne180100]<0>(v13, "std");
  std::string::basic_string[abi:ne180100]<0>(v14, "min");
  std::string::basic_string[abi:ne180100]<0>(v15, "max");
  std::string::basic_string[abi:ne180100]<0>(v16, "25pct");
  std::string::basic_string[abi:ne180100]<0>(v17, "50pct");
  std::string::basic_string[abi:ne180100]<0>(v18, "75pct");
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v8 = (std::string *)operator new(0xC0uLL);
  *(_QWORD *)(a1 + 24) = v8 + 8;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = 0;
  *(_QWORD *)(a1 + 16) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a1 + 24, &v11, &v19, v8);
  do
  {
    if (SHIBYTE(v18[v9 + 2]) < 0)
      operator delete((void *)v18[v9]);
    v9 -= 3;
  }
  while (v9 != -24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(float *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 60) = 1;
  kaldi::quasar::SystemSelectionFeatureExtractor::PopulateFeatureList(a1, a3);
  return a1;
}

void sub_1AE024E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,quasar::RunAsyncParams&,void>@<X0>(const quasar::RunAsyncParams *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x338uLL);
  result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<quasar::RunAsyncParams&,std::allocator<quasar::RunAsyncParams>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE024EEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<quasar::RunAsyncParams&,std::allocator<quasar::RunAsyncParams>,0>(_QWORD *a1, const quasar::RunAsyncParams *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42B48;
  a1[1] = 0;
  quasar::RunAsyncParams::RunAsyncParams((quasar::RunAsyncParams *)(a1 + 3), a2);
  return a1;
}

void sub_1AE024F38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

quasar::RunAsyncParams *quasar::RunAsyncParams::RunAsyncParams(quasar::RunAsyncParams *this, const quasar::RunAsyncParams *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 39) = *(_OWORD *)((char *)a2 + 39);
  *(_OWORD *)((char *)this + 24) = v10;
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v11;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v12;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v13;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *((_OWORD *)this + 8) = v14;
  }
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v15 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v15;
  }
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v16 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *((_OWORD *)this + 11) = v16;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v17;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 14);
    *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
    *((_OWORD *)this + 14) = v18;
  }
  v19 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v20 = *(_OWORD *)((char *)a2 + 248);
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((char *)this + 272, *((_QWORD **)a2 + 34), *((_QWORD **)a2 + 35), (uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 4);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((char *)this + 296, *((_QWORD **)a2 + 37), *((_QWORD **)a2 + 38), (uint64_t)(*((_QWORD *)a2 + 38) - *((_QWORD *)a2 + 37)) >> 4);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  v21 = *((_QWORD *)a2 + 41);
  *((_QWORD *)this + 41) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_BYTE *)this + 336) = *((_BYTE *)a2 + 336);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)this + 43, (const void ***)a2 + 43);
  quasar::LeftContext::LeftContext((quasar::RunAsyncParams *)((char *)this + 368), (const quasar::RunAsyncParams *)((char *)a2 + 368));
  *((_BYTE *)this + 504) = *((_BYTE *)a2 + 504);
  if (*((char *)a2 + 535) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 512), *((const std::string::value_type **)a2 + 64), *((_QWORD *)a2 + 65));
  }
  else
  {
    v24 = *((_OWORD *)a2 + 32);
    *((_QWORD *)this + 66) = *((_QWORD *)a2 + 66);
    *((_OWORD *)this + 32) = v24;
  }
  quasar::RightContext::RightContext((quasar::RunAsyncParams *)((char *)this + 536), (const quasar::RunAsyncParams *)((char *)a2 + 536));
  *((_WORD *)this + 312) = *((_WORD *)a2 + 312);
  *((_QWORD *)this + 79) = *((_QWORD *)a2 + 79);
  v25 = *((_QWORD *)a2 + 80);
  *((_QWORD *)this + 80) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (*((char *)a2 + 671) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 27, *((const std::string::value_type **)a2 + 81), *((_QWORD *)a2 + 82));
  }
  else
  {
    v28 = *(_OWORD *)((char *)a2 + 648);
    *((_QWORD *)this + 83) = *((_QWORD *)a2 + 83);
    *(_OWORD *)((char *)this + 648) = v28;
  }
  if (*((char *)a2 + 695) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 28, *((const std::string::value_type **)a2 + 84), *((_QWORD *)a2 + 85));
  }
  else
  {
    v29 = *((_OWORD *)a2 + 42);
    *((_QWORD *)this + 86) = *((_QWORD *)a2 + 86);
    *((_OWORD *)this + 42) = v29;
  }
  if (*((char *)a2 + 719) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 29, *((const std::string::value_type **)a2 + 87), *((_QWORD *)a2 + 88));
  }
  else
  {
    v30 = *(_OWORD *)((char *)a2 + 696);
    *((_QWORD *)this + 89) = *((_QWORD *)a2 + 89);
    *(_OWORD *)((char *)this + 696) = v30;
  }
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  v31 = *((_QWORD *)a2 + 91);
  *((_QWORD *)this + 91) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *((_DWORD *)this + 184) = *((_DWORD *)a2 + 184);
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>((_QWORD *)this + 93, *((const void **)a2 + 93), *((_QWORD *)a2 + 94), (uint64_t)(*((_QWORD *)a2 + 94) - *((_QWORD *)a2 + 93)) >> 2);
  std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100]((uint64_t *)this + 96, (uint64_t)a2 + 768);
  *((_QWORD *)this + 99) = *((_QWORD *)a2 + 99);
  return this;
}

void sub_1AE0253D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20)
{
  uint64_t v20;
  quasar::RightContext *v21;
  void **v22;
  uint64_t v23;
  quasar::LeftContext *v24;
  void **v25;
  void **v26;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;

  if (*(char *)(v20 + 695) < 0)
    operator delete(*v22);
  if (*(char *)(v20 + 671) < 0)
    operator delete(*v26);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20 + 632);
  quasar::RightContext::~RightContext(v21);
  if (*(char *)(v20 + 535) < 0)
    operator delete(*v25);
  quasar::LeftContext::~LeftContext(v24);
  std::__tree<std::string>::destroy(v23, *(char **)(v20 + 352));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20 + 320);
  a20 = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = a16;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (*(char *)(v20 + 271) < 0)
    operator delete(*a9);
  if (*(char *)(v20 + 247) < 0)
    operator delete(*a10);
  if (*(char *)(v20 + 223) < 0)
    operator delete(*a12);
  if (*(char *)(v20 + 199) < 0)
    operator delete(*a13);
  if (*(char *)(v20 + 175) < 0)
    operator delete(*a14);
  if (*(char *)(v20 + 151) < 0)
    operator delete(*a15);
  if (*(char *)(v20 + 127) < 0)
    operator delete(*a17);
  if (*(char *)(v20 + 103) < 0)
    operator delete(*a18);
  if (*(char *)(v20 + 79) < 0)
    operator delete(*a19);
  v28 = *(unint64_t **)(v20 + 16);
  if (v28)
  {
    v29 = v28 + 1;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      (*(void (**)(unint64_t *))(*v28 + 16))(v28);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void sub_1AE0255E0()
{
  JUMPOUT(0x1AE0254BCLL);
}

void sub_1AE0255E8()
{
  JUMPOUT(0x1AE0254C8);
}

void sub_1AE0255F0()
{
  JUMPOUT(0x1AE0254E0);
}

void sub_1AE0255F8()
{
  JUMPOUT(0x1AE0254F0);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, _QWORD **a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>, char *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,std::allocator<quasar::SpeechRequestData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1AE02569C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,std::allocator<quasar::SpeechRequestData>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD **a5, _OWORD *a6, uint64_t *a7, char *a8, char *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = &unk_1E5D431A0;
  a1[1] = 0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1AE02571C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD **a6, _OWORD *a7, uint64_t *a8, char *a9, char *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v10 = (std::__shared_weak_count *)a8[1];
  v16 = *a8;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, a4, a5, a6, a7, &v16, *a9, *a10, 4uLL);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1AE0257E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>(pthread_t *a1, uint64_t a2)
{
  std::__thread_struct *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;

  v4 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v4);
  v5 = operator new();
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v5 = v4;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v5 + 56, a2 + 48);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v5 + 96) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v5 + 112) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = (uint64_t *)v5;
  v13 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>, (void *)v5);
  if (v13)
  {
    std::__throw_system_error(v13, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v14 = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](&v14);
  }
}

void sub_1AE025920(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
  MEMORY[0x1AF44D190](v1, 0x1020C403B413AE3);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v16;
  _QWORD v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v16 = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v16;
  *v16 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v16[1];
  v4 = v16[6];
  v18 = v16[5];
  v19 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)v16[4];
  v17[0] = v16[3];
  v17[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::SystemCombinationDecoder::runSyncCheck(v3, &v18, (uint64_t)v17, (uint64_t)(v16 + 7), v16 + 11, v16 + 13);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](&v16);
  return 0;
}

void sub_1AE025AC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count **v16;
  _Unwind_Exception *v19;

  if (v15)
    kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(v15);
  std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>(v16, a1, a2, (uint64_t)&a15);
  v19 = a15;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(v19);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 13));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 11));
    v3 = (uint64_t *)v2[10];
    if (v3 == v2 + 7)
    {
      v4 = 4;
      v3 = v2 + 7;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 5));
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 1));
        std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
        MEMORY[0x1AF44D190](v2, 0x1020C403B413AE3);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string const&,int &>(uint64_t **a1, const void **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string const&,int &>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string const&,int &>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v8 + 14) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AE025D1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>(uint64_t **a1, const void **a2, __int128 *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__construct_node<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__construct_node<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&,0>((std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE025E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  this[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 8);
  this[1].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4A8uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AE025F50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43248;
  a1[1] = 0;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1AE025FB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a3[1];
  v14 = *a3;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v13 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v14, &v13);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1AE026094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<float>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

double TextStats::increment(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  double result;

  v2 = *(float64x2_t *)a1;
  *(float64x2_t *)(a1 + 16) = vaddq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)(a1 + 16));
  *(double *)(a1 + 32) = *(double *)(a2 + 32) + *(double *)(a1 + 32);
  *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)a2, v2);
  *(float64x2_t *)(a1 + 40) = vaddq_f64(*(float64x2_t *)(a2 + 40), *(float64x2_t *)(a1 + 40));
  *(float64x2_t *)(a1 + 56) = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 72), *(float64x2_t *)(a1 + 72));
  *(float64x2_t *)(a1 + 88) = vaddq_f64(*(float64x2_t *)(a2 + 88), *(float64x2_t *)(a1 + 88));
  result = *(double *)(a2 + 104) + *(double *)(a1 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

_QWORD *operator<<(_QWORD *a1, double *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  double v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  std::locale v19;

  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sentences, ", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words, ", 8);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" OOVs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  if (a2[3] + a2[2] > 0.0)
  {
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" zeroprobs, ", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"logprob= ", 9);
    std::ostream::operator<<();
    v11 = a2[3] - a2[4] - a2[1] + a2[2];
    if (v11 <= 0.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl= undefined", 15);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl= ", 6);
      exp(*a2 / v11 * -2.30258509);
      std::ostream::operator<<();
    }
    v12 = v11 - a2[2];
    if (v12 <= 0.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl1= undefined", 16);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl1= ", 7);
      exp(*a2 / v12 * -2.30258509);
      std::ostream::operator<<();
    }
    if (a2[11] > 0.0)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v13 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      std::ostream::flush();
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" words,", 7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank1= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank5= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank10= ", 9);
      std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v15 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      std::ostream::flush();
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" words+sents,", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank1wSent= ", 13);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank5wSent= ", 13);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank10wSent= ", 14);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" qloss= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" absloss= ", 10);
      std::ostream::operator<<();
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v17 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  return a1;
}

void sub_1AE026610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(40 * (v4 - 1) + 48);
  v6 = 0;
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    v7 = *a1 + v6;
    *(_DWORD *)(v7 + 40) = -1;
    *(_OWORD *)(v7 + 8) = 0uLL;
    *(_OWORD *)(v7 + 24) = 0uLL;
    v6 += 40;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 40 * ~(-1 << *(_DWORD *)v4) + 48);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = v3 + 2;
  v5 = *v3;
  v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v9 = -1 << v6;
    v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    v10 = v4[10 * v7 + 8];
    if (v10 == -1)
    {
LABEL_10:
      result = 0;
    }
    else
    {
      v11 = ~(_DWORD)v9;
      while (v10 != a2)
      {
        LODWORD(v7) = (v7 + 1) & v11;
        v10 = v4[10 * v7 + 8];
        if (v10 == -1)
          goto LABEL_10;
      }
      result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    v12 = 0;
    v7 = v5 >> 5;
    v13 = v3 + 10;
    while (1)
    {
      v14 = *v13;
      v13 += 10;
      if (v14 == a2)
        break;
      if (v7 == ++v12)
        goto LABEL_14;
    }
    result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 40);
  do
  {
    v8 = *v7;
    v7 += 10;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[10 * v16 + 10];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AE026A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 40 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 40);
  return result;
}

void sub_1AE026AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,ZeroArray<double>>::~Trie(uint64_t a1)
{
  uint64_t v2;
  int v4;
  _BYTE v5[24];
  uint64_t v6;

  LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::LHashIter((uint64_t)v5, (_DWORD **)a1, 0);
  v4 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::next((uint64_t)v5, &v4))
    Trie<unsigned int,ZeroArray<double>>::~Trie();
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8000313F17);
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear((_QWORD *)a1, 0);
  return a1;
}

_QWORD *Trie<unsigned int,ZeroArray<double>>::findPrefixTrie(_DWORD **a1, unsigned int *a2, _DWORD *a3)
{
  _QWORD *PrefixTrie;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  PrefixTrie = a1;
  if (a2
    && (v6 = *a2, v6 != -1)
    && (v10 = 0, LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(a1, v6, &v10)))
  {
    v7 = *PrefixTrie + 40 * v10 + 8;
    v9 = 0;
    PrefixTrie = (_QWORD *)Trie<unsigned int,ZeroArray<double>>::findPrefixTrie(v7, a2 + 1, &v9);
    *a3 = v9 + 1;
  }
  else
  {
    *a3 = 0;
  }
  return PrefixTrie;
}

void NgramProbArrayTrie::clear(NgramProbArrayTrie *this)
{
  unint64_t v2;

  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear((_QWORD *)this + 3, 0);
  if (*((_DWORD *)this + 5))
  {
    v2 = 0;
    do
      *(_QWORD *)ZeroArray<double>::operator[]((int *)this + 8, v2++) = 0;
    while (v2 < *((unsigned int *)this + 5));
  }
}

void NgramProbArrayTrie::NgramProbArrayTrie(NgramProbArrayTrie *this, Vocab *a2, int a3, int a4)
{
  *(_QWORD *)this = &unk_1E5D16BA8;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (!a4)
    *((_DWORD *)this + 5) = 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(a2 - 1) + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v9 + 32));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(v9 - 1) + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v9 + 32)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v9 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v10 + 32));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(unsigned int *)((char *)v4 + v12 + 4) = *(unsigned int *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v11 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(unsigned int *)((char *)v4 + v12 - 4) + 32));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (unsigned int *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v8 + 32));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v9 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(v11 - 2) + 32));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a1 + 32));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a2 + 32));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * v11 + 32)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *a1 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(a2 - 1) + 32)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v9 + 32)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v8 + 32)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v10 + 32)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v12 + 32)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v13 + 32)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * a1[++v6] + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v12 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v11 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = (int *)&a1[v6];
    v14 = (int *)a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v16 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v17 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = (unsigned int *)(v13 - 1);
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(a2 - 1) + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v10 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v9 + 32)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v13 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(unsigned int *)((char *)a1 + v14 + 4) + 32));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a4 + 32), *(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a3 + 32));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a2 + 32));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(_QWORD *)a5 + 8 + 40 * *a1 + 32));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a5 + 32), *(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a4 + 32));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a4 + 32), *(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a3 + 32));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a2 + 32));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(_QWORD *)a6 + 8 + 40 * *a1 + 32));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *v14 + 32), *(unsigned int *)(*(_QWORD *)a4 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  int64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v16 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v9 = ((uint64_t)a4 - result) >> 1;
      v10 = v9 + 1;
      v11 = (unsigned int *)(result + 4 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * v11[1] + 32)) < 0)
      {
        ++v11;
        v10 = v12;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v5 + 32));
      if ((result & 0x80000000) == 0)
      {
        v13 = *v5;
        do
        {
          v14 = v11;
          *v5 = *v11;
          if (v16 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = (unsigned int *)(v6 + 4 * v15);
          if (2 * v10 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * v11[1] + 32)) < 0)
          {
            ++v11;
            v15 = 2 * v10 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * v13 + 32));
          v5 = v14;
          v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *v14 = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * *v9 + 32), *(unsigned int *)(*(_QWORD *)a2 + 8 + 40 * a1[v6 + 2] + 32)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unsigned int *)(result + 4 * (v4 >> 1));
    v9 = (unsigned int *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v8 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *(unsigned int *)(a2 - 4) + 32));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unsigned int *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * *v8 + 32), *(unsigned int *)(*(_QWORD *)a3 + 8 + 40 * v10 + 32));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t ZeroArray<double>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<double>::alloc((uint64_t)a1, v3, 1);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

BOOL kaldi::ReadScriptFile(uint64_t a1, int a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  _BOOL8 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 ScriptFile;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *p_p;
  std::string::size_type size;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string __p;
  _QWORD v25[34];
  uint64_t v26;
  char v27;

  v27 = 0;
  v26 = 0;
  if ((kaldi::Input::OpenInternal(&v26, a1, 1, &v27) & 1) != 0)
  {
    if (v27)
    {
      v6 = 0;
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Error: script file appears to be binary: ", 41);
        if (*(char *)(a1 + 23) < 0)
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          v22 = *(std::string *)a1;
        kaldi::PrintableRxfilename((uint64_t)&v22, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
LABEL_54:
        v6 = 0;
      }
    }
    else
    {
      v9 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v26);
      ScriptFile = kaldi::ReadScriptFile(v9, a2, a3);
      v6 = ScriptFile;
      if (a2)
      {
        if (kaldi::g_kaldi_verbose_level >= -1 && !ScriptFile)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[script file was: ", 18);
          if (*(char *)(a1 + 23) < 0)
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
          else
            v21 = *(std::string *)a1;
          kaldi::PrintableRxfilename((uint64_t)&v21, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &__p;
          else
            v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v18 = __p.__r_.__value_.__l.__size_;
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v17, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v21.__r_.__value_.__l.__data_);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          goto LABEL_54;
        }
      }
    }
  }
  else
  {
    v6 = 0;
    if (a2 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Error opening script file: ", 27);
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v23 = *(std::string *)a1;
      kaldi::PrintableRxfilename((uint64_t)&v23, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &__p;
      else
        v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v14 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v13, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      goto LABEL_54;
    }
  }
  kaldi::Input::~Input((kaldi::Input *)&v26);
  return v6;
}

void sub_1AE028268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a35);
  kaldi::Input::~Input((kaldi::Input *)(v35 - 48));
  _Unwind_Resume(a1);
}

BOOL kaldi::ReadScriptFile(_QWORD *a1, int a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  int v6;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  int v11;
  void **v12;
  std::string::size_type size;
  std::string::size_type v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string v24;
  std::string __str;
  std::locale v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  char v30[9];

  v6 = 1;
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v27 = 0;
  v28 = 0;
  v29 = 0;
  do
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(&v26, v7);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v26);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&v27, v9);
    v11 = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5;
    if (v11)
      break;
    if (v29 >= 0)
      v12 = (void **)&v27;
    else
      v12 = v27;
    if (!*(_BYTE *)v12)
    {
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty ", 6);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"'th line in script file", 23);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      }
      break;
    }
    memset(&__str, 0, sizeof(__str));
    memset(&v24, 0, sizeof(v24));
    kaldi::SplitStringOnFirstSpace((uint64_t)&v27, (uint64_t)&__str, (uint64_t)&v24);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_14;
    v14 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v24.__r_.__value_.__l.__size_;
    if (v14)
    {
      std::vector<std::pair<std::string,std::string>>::resize(a3, 1 - 0x5555555555555555 * (((char *)a3->__end_ - (char *)a3->__begin_) >> 4));
      std::string::operator=(&a3->__end_[-1].first, &__str);
      std::string::operator=(&a3->__end_[-1].second, &v24);
      v15 = 1;
    }
    else
    {
LABEL_14:
      v15 = 0;
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid ", 8);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'th line in script file", 23);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":\"", 2);
        if (v29 >= 0)
          v19 = (void **)&v27;
        else
          v19 = v27;
        if (v29 >= 0)
          v20 = HIBYTE(v29);
        else
          v20 = v28;
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        v30[0] = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v30, 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        v15 = 0;
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ++v6;
  }
  while ((v15 & 1) != 0);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  return v11 != 0;
}

void sub_1AE028610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 97) < 0)
    operator delete(*(void **)(v22 - 120));
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::resize(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::size_type __sz)
{
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::size_type v4;
  BOOL v5;
  std::vector<std::pair<std::string, std::string>>::size_type v6;
  std::pair<std::string, std::string> *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 4);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::string,std::string>>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
    this->__end_ = v7;
  }
}

uint64_t kaldi::ClassifyRspecifier(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string __str;
  std::string v26;
  void **v27;

  if (!a2)
  {
LABEL_4:
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    goto LABEL_4;
  }
  **(_BYTE **)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (a3)
LABEL_5:
    *(_DWORD *)a3 = 0;
LABEL_6:
  v6 = std::string::find(this, 58, 0);
  if (v6 == -1)
    return 0;
  v7 = v6;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = this;
  else
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v10 = v9->__r_.__value_.__s.__data_[size - 1];
  if ((v10 & 0x80000000) != 0)
  {
    if (__maskrune(v10, 0x4000uLL))
    {
LABEL_14:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Trailing whitespace not allowd in rspecifier (found \"", 53);
        v12 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v12 >= 0)
          v13 = this;
        else
          v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v12 >= 0)
          v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        else
          v14 = this->__r_.__value_.__l.__size_;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"). ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Will treat this as kNoRspecifier.", 33);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x4000) != 0)
  {
    goto LABEL_14;
  }
  std::string::basic_string(&v26, this, 0, v7, (std::allocator<char> *)&__str);
  std::string::basic_string[abi:ne180100](&__str, (uint64_t *)this, v7 + 1);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  kaldi::SplitStringToVector(&v26, ", ", 0, (uint64_t)&v22);
  v19 = v22;
  if (v23 == v22)
  {
LABEL_68:
    v17 = 0;
  }
  else
  {
    v17 = 0;
    if ((unint64_t)((v23 - v22) / 24) <= 1)
      v20 = 1;
    else
      v20 = (v23 - v22) / 24;
    do
    {
      v21 = (const char *)v19;
      if (*(char *)(v19 + 23) < 0)
        v21 = *(const char **)v19;
      if (strcmp(v21, "b") && strcmp(v21, "t"))
      {
        if (!strcmp(v21, "o"))
        {
          if (a3)
            *(_BYTE *)a3 = 1;
        }
        else if (!strcmp(v21, "no"))
        {
          if (a3)
            *(_BYTE *)a3 = 0;
        }
        else if (!strcmp(v21, "p"))
        {
          if (a3)
            *(_BYTE *)(a3 + 3) = 1;
        }
        else if (!strcmp(v21, "np"))
        {
          if (a3)
            *(_BYTE *)(a3 + 3) = 0;
        }
        else if (!strcmp(v21, "s"))
        {
          if (a3)
            *(_BYTE *)(a3 + 1) = 1;
        }
        else if (!strcmp(v21, "ns"))
        {
          if (a3)
            *(_BYTE *)(a3 + 1) = 0;
        }
        else if (!strcmp(v21, "cs"))
        {
          if (a3)
            *(_BYTE *)(a3 + 2) = 1;
        }
        else if (!strcmp(v21, "ncs"))
        {
          if (a3)
            *(_BYTE *)(a3 + 2) = 0;
        }
        else if (!strcmp(v21, "ark"))
        {
          if ((_DWORD)v17)
            goto LABEL_68;
          v17 = 1;
        }
        else
        {
          if (strcmp(v21, "scp") | v17)
            goto LABEL_68;
          v17 = 2;
        }
      }
      v19 += 24;
      --v20;
    }
    while (v20);
    if (a2 && (v17 - 1) <= 1)
      std::string::operator=((std::string *)a2, &__str);
  }
  v27 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v17;
}

void sub_1AE028AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 96) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__append(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::size_type __n)
{
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  std::pair<std::string, std::string> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 4) >= __n)
  {
    if (__n)
    {
      v13 = 48 * ((48 * __n - 48) / 0x30) + 48;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::pair<std::string, std::string> *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 4);
    v9 = v8 + __n;
    if (v8 + __n > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)p_end_cap;
    if (v11)
      v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 48 * ((48 * __n - 48) / 0x30) + 48;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
}

void sub_1AE028C9C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *quasar::git_version::get@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "none");
}

uint64_t quasar::tennessee::archive::ImmutableArchive::ReadIntoStringStream(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v2);
  std::ostream::operator<<();
  result = v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AE028D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::archive::ImmutableArchive::GetAsByteBuffer@<X0>(quasar::tennessee::archive::ImmutableArchive *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[13];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  quasar::tennessee::archive::ImmutableArchive::ReadIntoStringStream((uint64_t)this);
  std::stringbuf::str();
  v5 = operator new();
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(v5 + 16) = v9;
  *a2 = v5;
  v10[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[2] = v6;
  v10[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1AE028E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

quasar::tennessee::archive::FileSystemDirectoryMutableArchive *quasar::tennessee::archive::FileSystemDirectoryMutableArchive::FileSystemDirectoryMutableArchive(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::path *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_QWORD *)this = off_1E5D3CA98;
  v3 = (std::__fs::filesystem::path *)((char *)this + 8);
  std::__fs::filesystem::__canonical((std::__fs::filesystem::path *)((char *)this + 8), a2, 0);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
      goto LABEL_3;
LABEL_7:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  if (!*((_QWORD *)this + 2))
    goto LABEL_7;
LABEL_3:
  if (!std::__fs::filesystem::path::__root_directory(v3).__size_)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  std::__fs::filesystem::__status(v3, 0);
  if (v6 != 2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    v5 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(&v6, (uint64_t *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is not a directory", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  return this;
}

void sub_1AE028FE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenStreamForReading(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this@<X0>, std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__fs::filesystem::path v27;

  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v27);
  std::__fs::filesystem::__status(&v27, 0);
  if (LOBYTE(__p[0]) != 1)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(__p, (uint64_t *)&v27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v4 = (_QWORD *)operator new();
  v5 = MEMORY[0x1E0DE4FA8];
  v6 = MEMORY[0x1E0DE4FA8] + 64;
  v4[53] = MEMORY[0x1E0DE4FA8] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *v4 = v7;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v7 - 24)) = v8;
  v4[1] = 0;
  v9 = (std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24));
  std::ios_base::init(v9, v4 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *v4 = v5 + 24;
  v4[53] = v6;
  MEMORY[0x1AF44CA64](v4 + 2);
  if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v27.__pn_.__r_.__value_.__l.__data_, v27.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v27.__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)&v11 = *((_QWORD *)&v27.__pn_.__r_.__value_.__l + 2);
  }
  std::ifstream::open();
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *a3 = v4;
  if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__pn_.__r_.__value_.__l.__data_);
}

void sub_1AE0291FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (*(char *)(v15 - 65) < 0)
    operator delete(*(void **)(v15 - 88));
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath@<X0>(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this@<X0>, std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  uint64_t result;
  std::__fs::filesystem::path::__string_view v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (std::__fs::filesystem::path::__root_directory(a2).__size_)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this + 8, a3);
  v7 = std::__fs::filesystem::path::__root_directory(a3);
  result = (uint64_t)v7.__data_;
  if (!v7.__size_)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  return result;
}

void sub_1AE029360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenFileInVirtualMemoryForReading(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uintmax_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__fs::filesystem::path v28;

  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(a1, a2, &v28);
  std::__fs::filesystem::__status(&v28, 0);
  if (v11 != 1)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    v10 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(&v11, (uint64_t *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is not a regular file.", 23);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  v8 = std::__fs::filesystem::__file_size(&v28, 0);
  if (!v8)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  v9 = operator new();
  quasar::tennessee::memory_mapping::VirtualMemoryFile::VirtualMemoryFile(v9, &v28, a3, v8, a4);
  *a5 = v9;
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
}

void sub_1AE0294DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

BOOL quasar::tennessee::archive::FileSystemDirectoryMutableArchive::Exists(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  uint64_t v2;
  BOOL v3;
  std::__fs::filesystem::path __p;
  unsigned __int8 v6;

  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &__p);
  std::__fs::filesystem::__status(&__p, 0);
  v2 = v6;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (v2)
    v3 = v2 == 255;
  else
    v3 = 1;
  return !v3;
}

void sub_1AE029580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uintmax_t quasar::tennessee::archive::FileSystemDirectoryMutableArchive::Size(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  uintmax_t v2;
  std::__fs::filesystem::path v4;

  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v4);
  v2 = std::__fs::filesystem::__file_size(&v4, 0);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1AE0295E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenStreamForWriting(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this@<X0>, std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__fs::filesystem::path v27;

  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v27);
  std::__fs::filesystem::path::parent_path[abi:ne180100](&v27, (uint64_t)__p);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__p, 0);
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  v4 = (_QWORD *)operator new();
  v5 = MEMORY[0x1E0DE4FB0];
  v6 = MEMORY[0x1E0DE4FB0] + 64;
  v4[52] = MEMORY[0x1E0DE4FB0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v4 = v7;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24));
  std::ios_base::init(v9, v4 + 1);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *v4 = v5 + 24;
  v4[52] = v6;
  MEMORY[0x1AF44CA64](v4 + 1);
  if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v27.__pn_.__r_.__value_.__l.__data_, v27.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v27.__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)&v11 = *((_QWORD *)&v27.__pn_.__r_.__value_.__l + 2);
  }
  std::ofstream::open();
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *a3 = v4;
  if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__pn_.__r_.__value_.__l.__data_);
}

void sub_1AE02979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (*(char *)(v15 - 65) < 0)
    operator delete(*(void **)(v15 - 88));
  _Unwind_Resume(a1);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::~FileSystemDirectoryMutableArchive(void **this)
{
  *this = off_1E5D3CA98;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D3CA98;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

uint64_t printVersion(const char *a1)
{
  printf("SRILM release %s", "1.7.1");
  printf(" (with third-party contributions)");
  printf("\n\nProgram version %s\n", a1);
  puts("\nSupport for compressed files is included.");
  return puts("\nThis software is subject to the SRILM Community Research License Version\n1.0 (the \"License\"); you may not use this software except in compliance\n"
           "with the License.  A copy of the License is included in the SRILM root\n"
           "directory in the \"License\" file.  Software distributed under the License\n"
           "is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, either\n"
           "express or implied.  See the License for the specific language governing\n"
           "rights and limitations under the License.\n"
           "\n"
           "This software is Copyright (c) 1995-2014 SRI International.  All rights\n"
           "reserved.\n"
           "\n"
           "Portions of this software are\n"
           "Copyright (c) 2002-2005 Jeff Bilmes\n"
           "Copyright (c) 2009-2013 Tanel Alumae\n"
           "Copyright (c) 2012-2013 Microsoft Corp.\n"
           "\n"
           "SRILM also includes open-source software as listed in the\n"
           "ACKNOWLEDGEMENTS file in the SRILM root directory.\n"
           "\n"
           "If this software was obtained under a commercial license agreement with\n"
           "SRI then the provisions therein govern the use of the software and the\n"
           "above notice does not apply.\n");
}

void crashIntoDebugger(void)
{
  abort();
}

void assertFailed(const char *a1, const char *a2, uint64_t a3)
{
  tknPrintf("Error: Assertion violation in file '%s', line %llu: %s\n", (uint64_t)a2, a2, a3, a1);
  crashIntoDebugger();
}

const char *conditionalAssert(const char *result, const char *a2, uint64_t a3)
{
  if (g_bCrashOnError)
    assertFailed(result, a2, a3);
  return result;
}

uint64_t getDirSep(void)
{
  return 47;
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  size_t v3;
  __darwin_ct_rune_t v6;
  __darwin_ct_rune_t v7;
  __int32 v8;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  int v12;

  if (!n)
    return 0;
  v3 = n;
  while (1)
  {
    v7 = *a1++;
    v6 = v7;
    v8 = *a2;
    if (!v7 || v8 == 0)
      break;
    v10 = __tolower(v6);
    v11 = __tolower(*a2);
    if (v10 < v11)
      return -1;
    if (v10 > v11)
      return 1;
    ++a2;
    if (!--v3)
      return 0;
  }
  if (v6 | v8)
    v12 = -1;
  else
    v12 = 0;
  if (v6)
    return 1;
  else
    return v12;
}

void sub_1AE029ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AE029B60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

kaldi::LinearResample *kaldi::LinearResample::LinearResample(kaldi::LinearResample *this, uint64_t a2, int a3, float a4, int a5)
{
  void **v6;
  int v7;
  int v8;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((_DWORD *)this + 3) = a5;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 11) = 0;
  v6 = (void **)((char *)this + 88);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v7 = kaldi::Gcd<int>(a2, a3);
  v8 = *((_DWORD *)this + 1) / v7;
  *((_DWORD *)this + 4) = *(_DWORD *)this / v7;
  *((_DWORD *)this + 5) = v8;
  kaldi::LinearResample::SetIndexesAndWeights(this);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  kaldi::Vector<float>::Resize(v6, 0, 0);
  return this;
}

void sub_1AE029C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy(v3);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void kaldi::LinearResample::SetIndexesAndWeights(kaldi::LinearResample *this)
{
  uint64_t v2;
  double v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  uint64_t v11;
  float v12;

  std::vector<int>::resize((std::vector<unsigned int> *)this + 1, *((int *)this + 5));
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)this + 6, *((int *)this + 5));
  if (*((int *)this + 5) >= 1)
  {
    v2 = 0;
    v3 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    do
    {
      v4 = (double)(int)v2 / (double)*((int *)this + 1);
      v5 = vcvtpd_s64_f64((v4 - v3) * (double)*(int *)this);
      v6 = vcvtmd_s64_f64((v3 + v4) * (double)*(int *)this) - v5;
      v7 = v6 + 1;
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v2) = v5;
      kaldi::Vector<float>::Resize((void **)(*((_QWORD *)this + 6) + 24 * v2), v7, 0);
      if ((v6 & 0x80000000) == 0)
      {
        v8 = 0;
        v9 = (double)*(int *)this;
        v10 = (float)*(int *)this;
        v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 24 * v2);
        do
        {
          v12 = (double)(int)(v5 + v8) / v9 - v4;
          *(float *)(v11 + 4 * v8++) = kaldi::LinearResample::FilterFunc(this, v12) / v10;
        }
        while (v7 != v8);
      }
      ++v2;
    }
    while (v2 < *((int *)this + 5));
  }
}

uint64_t kaldi::LinearResample::GetNumOutputSamples(kaldi::LinearResample *this, uint64_t a2, char a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  float v11;

  v6 = *(_DWORD *)this;
  v7 = *((_DWORD *)this + 1);
  v8 = kaldi::Gcd<int>(*(unsigned int *)this, v7);
  v9 = v6 / v8 * v8 * (v7 / v8);
  v10 = v9 / *(_DWORD *)this * a2;
  if ((a3 & 1) == 0)
  {
    v11 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    v10 -= (int)vcvtms_s32_f32((float)v9 * v11);
  }
  if (v10 < 1)
    return 0;
  else
    return v10 / (v9 / *((_DWORD *)this + 1))
         - (v10 / (v9 / *((_DWORD *)this + 1)) * (v9 / *((_DWORD *)this + 1)) == v10)
         + 1;
}

float kaldi::LinearResample::FilterFunc(kaldi::LinearResample *this, float a2)
{
  double v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;

  v3 = fabsf(a2);
  v4 = (double)*((int *)this + 3);
  v5 = *((float *)this + 2);
  v6 = v5;
  v7 = 0.0;
  if (v4 / (v6 + v6) > v3)
    v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  if (a2 == 0.0)
    v8 = v5 + v5;
  else
    v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  return v7 * v8;
}

void kaldi::LinearResample::Resample(uint64_t a1, uint64_t a2, char a3, void **a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t NumOutputSamples;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *(int *)(a2 + 8);
  v9 = (_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 72) + v8;
  NumOutputSamples = kaldi::LinearResample::GetNumOutputSamples((kaldi::LinearResample *)a1, v22, a3);
  kaldi::Vector<float>::Resize(a4, (NumOutputSamples - *(_DWORD *)(a1 + 80)), 0);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11 < NumOutputSamples)
  {
    for (i = *(_QWORD *)(a1 + 80); i != NumOutputSamples; ++i)
    {
      v13 = *(int *)(a1 + 20);
      v14 = i / v13;
      LODWORD(v13) = i % v13;
      v15 = *(_QWORD *)(a1 + 48) + 24 * (int)v13;
      v16 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * (int)v13)
          + v14 * *(unsigned int *)(a1 + 16)
          - *(_QWORD *)(a1 + 72);
      v17 = *(unsigned int *)(v15 + 8);
      if ((v16 & 0x80000000) != 0 || (int)v17 + (int)v16 > (int)v8)
      {
        if ((int)v17 >= 1)
        {
          v18 = *(float **)v15;
          v19 = 0.0;
          while (1)
          {
            if ((v16 & 0x80000000) != 0)
            {
              v21 = v16 + *(_DWORD *)(a1 + 96);
              if (v21 >= 0)
              {
                v20 = *(float *)(*(_QWORD *)(a1 + 88) + 4 * v21);
                goto LABEL_12;
              }
            }
            else if ((int)v16 < (int)v8)
            {
              v20 = *(float *)(*(_QWORD *)a2 + 4 * v16);
LABEL_12:
              v19 = v19 + (float)(*v18 * v20);
            }
            LODWORD(v16) = v16 + 1;
            ++v18;
            if (!--v17)
              goto LABEL_17;
          }
        }
        v19 = 0.0;
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v23 = *(_QWORD *)a2 + 4 * v16;
        LODWORD(v24) = v17;
        v19 = kaldi::VecVec<float>((uint64_t)&v23, (const float **)v15);
        v11 = *(_QWORD *)(a1 + 80);
      }
LABEL_17:
      *((float *)*a4 + (int)i - (int)v11) = v19;
    }
  }
  if ((a3 & 1) != 0)
  {
    *v9 = 0;
    v9[1] = 0;
    kaldi::Vector<float>::Resize((void **)(a1 + 88), 0, 0);
  }
  else
  {
    kaldi::LinearResample::SetRemainder(a1, a2);
    *(_QWORD *)(a1 + 72) = v22;
    *(_QWORD *)(a1 + 80) = NumOutputSamples;
  }
}

void kaldi::LinearResample::SetRemainder(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (const void **)(a1 + 88);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  kaldi::Vector<float>::Resize((void **)&v16, *(unsigned int *)(a1 + 96), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, v4);
  LODWORD(v5) = vcvtps_s32_f32((float)(*(_DWORD *)(a1 + 12) * *(_DWORD *)a1) / *(float *)(a1 + 8));
  kaldi::Vector<float>::Resize((void **)v4, v5, 0);
  v6 = *(int *)(a1 + 96);
  if ((int)v6 >= 1)
  {
    v7 = -v6;
    v8 = *(int *)(a2 + 8);
    v9 = v17;
    v10 = v16;
    v11 = *(_DWORD **)a2;
    v12 = 4 * *(unsigned int *)(a1 + 96);
    v13 = v8 + (int)v17;
    while (1)
    {
      v14 = v11;
      v15 = v7 + v8;
      if (v7 + v8 >= 0)
        goto LABEL_6;
      if (v13 + v7 >= 0)
        break;
LABEL_7:
      if (!(_DWORD)++v7)
        goto LABEL_8;
    }
    v15 += v9;
    v14 = v10;
LABEL_6:
    *(_DWORD *)((char *)*v4 + 4 * v7 + v12) = v14[v15];
    goto LABEL_7;
  }
LABEL_8:
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1AE02A1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ArbitraryResample::ArbitraryResample(uint64_t a1, int a2, uint64_t *a3, int a4, float a5, float a6)
{
  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a5;
  *(float *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  kaldi::ArbitraryResample::SetIndexes(a1, (uint64_t)a3);
  kaldi::ArbitraryResample::SetWeights((kaldi::ArbitraryResample *)a1, a3);
  return a1;
}

void sub_1AE02A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  a10 = (void **)(v10 + 40);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = *(void **)(v10 + 16);
  if (v12)
  {
    *(_QWORD *)(v10 + 24) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void kaldi::ArbitraryResample::SetIndexes(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;

  v4 = *(int *)(a2 + 8);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 16), v4);
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 40), v4);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = (double)*(int *)(a1 + 12) / (*(float *)(a1 + 8) + *(float *)(a1 + 8));
    do
    {
      v7 = *(float *)(*(_QWORD *)a2 + 4 * v5);
      v8 = *(float *)(a1 + 4);
      v9 = vcvtps_s32_f32(v8 * (float)(v7 - v6));
      v10 = vcvtms_s32_f32(v8 * (float)(v7 + v6));
      v11 = v9 & ~(v9 >> 31);
      if (*(_DWORD *)a1 <= v10)
        v10 = *(_DWORD *)a1 - 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v5) = v11;
      kaldi::Vector<float>::Resize((void **)(*(_QWORD *)(a1 + 40) + 24 * v5++), (v10 - v11 + 1), 0);
    }
    while (v5 != v4);
  }
}

void kaldi::ArbitraryResample::SetWeights(kaldi::ArbitraryResample *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float *v10;
  float v11;

  v2 = *((_QWORD *)this + 5);
  if ((int)(-1431655765 * ((*((_QWORD *)this + 6) - v2) >> 3)) >= 1)
  {
    v4 = 0;
    v5 = *a2;
    v6 = -1431655765 * ((*((_QWORD *)this + 6) - v2) >> 3);
    do
    {
      v7 = v2 + 24 * v4;
      v8 = *(unsigned int *)(v7 + 8);
      if ((int)v8 >= 1)
      {
        v9 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v4);
        v10 = *(float **)v7;
        do
        {
          v11 = *((float *)this + 1);
          *v10++ = kaldi::ArbitraryResample::FilterFunc(this, *(float *)(v5 + 4 * v4) - (float)((float)v9++ / v11))
                 / v11;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != v6);
  }
}

void kaldi::ArbitraryResample::Resample(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const float *v10[4];
  void *v11[3];

  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumRows(a3);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumCols(a3);
  v6 = kaldi::MatrixBase<float>::NumRows(a3);
  memset(v11, 0, sizeof(v11));
  kaldi::Vector<float>::Resize(v11, v6, 0);
  if ((int)(-1431655765 * ((a1[6] - a1[5]) >> 3)) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = kaldi::MatrixBase<float>::NumRows(a2);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v10, a2, 0, v9, *(_DWORD *)(a1[2] + 4 * v8), *(_DWORD *)(a1[5] + v7 + 8));
      kaldi::VectorBase<float>::AddMatVec((uint64_t)v11, v10, CblasNoTrans, a1[5] + v7, 1.0, 0.0);
      kaldi::MatrixBase<float>::CopyColFromVec(a3, (uint64_t)v11, v8);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v10);
      ++v8;
      v7 += 24;
    }
    while (v8 < (int)(-1431655765 * ((a1[6] - a1[5]) >> 3)));
  }
  kaldi::Vector<float>::Destroy((uint64_t)v11);
}

void sub_1AE02A54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Vector<float>::Destroy((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::ArbitraryResample::FilterFunc(kaldi::ArbitraryResample *this, float a2)
{
  double v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;

  v3 = fabsf(a2);
  v4 = (double)*((int *)this + 3);
  v5 = *((float *)this + 2);
  v6 = v5;
  v7 = 0.0;
  if (v4 / (v6 + v6) > v3)
    v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  if (a2 == 0.0)
    v8 = v5 + v5;
  else
    v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  return v7 * v8;
}

void kaldi::Resampler::Resample(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  kaldi::LinearResample *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  kaldi::LinearResample *v12;
  void **v13;

  v8 = *(kaldi::LinearResample **)a1;
  if (!*(_QWORD *)a1)
  {
    v8 = (kaldi::LinearResample *)operator new();
    kaldi::LinearResample::LinearResample(v8, (int)*(float *)(a1 + 8), (int)*(float *)(a1 + 12), *(float *)(a1 + 16), *(_DWORD *)(a1 + 20));
    v9 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v8;
    if (v9)
    {
      std::default_delete<kaldi::LinearResample>::operator()[abi:ne180100](a1, v9);
      v8 = *(kaldi::LinearResample **)a1;
    }
  }
  kaldi::LinearResample::Resample((uint64_t)v8, a2, a4, (void **)a3);
  v10 = *(unsigned int *)(a3 + 8);
  if ((int)v10 >= 1)
  {
    v11 = *(float **)a3;
    do
    {
      *v11 = truncf(*v11);
      ++v11;
      --v10;
    }
    while (v10);
  }
  if ((a4 & 1) != 0)
  {
    v12 = *(kaldi::LinearResample **)a1;
    v13 = (void **)(*(_QWORD *)a1 + 88);
    *((_QWORD *)v12 + 9) = 0;
    *((_QWORD *)v12 + 10) = 0;
    kaldi::Vector<float>::Resize(v13, 0, 0);
  }
}

void sub_1AE02A728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B0C40587FD9DDLL);
  _Unwind_Resume(a1);
}

std::string *quasar::corrective_reranking::OverridesDictionary::OverridesDictionary(std::string *this, const quasar::corrective_reranking::OverridesConfig *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t i;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  quasar::PTree::PTree((quasar::PTree *)&this[3]);
  quasar::PTree::PTree((quasar::PTree *)&this[5].__r_.__value_.__r.__words[2]);
  std::string::basic_string[abi:ne180100]<0>(v11, ".");
  std::string::basic_string[abi:ne180100]<0>(v12, "!");
  std::string::basic_string[abi:ne180100]<0>(v13, "?");
  std::string::basic_string[abi:ne180100]<0>(v14, ",");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[8].__r_.__value_.__l.__size_, (unsigned __int8 *)v11, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0)
      operator delete((void *)v14[i]);
  }
  v9 = *((unsigned __int8 *)a2 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a2 + 1);
  if (v9)
    quasar::corrective_reranking::OverridesDictionary::loadMetaTokensFile((quasar::corrective_reranking::OverridesDictionary *)this);
  else
    quasar::corrective_reranking::OverridesDictionary::loadOverrides((quasar::corrective_reranking::OverridesDictionary *)this);
  return this;
}

void sub_1AE02A914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::OverridesDictionary::loadMetaTokensFile(quasar::corrective_reranking::OverridesDictionary *this)
{
  quasar::PTree *ChildOptional;
  uint64_t i;
  __int128 *v4;
  uint64_t j;
  quasar::PTree *v6;
  uint64_t k;
  __int128 *v8;
  uint64_t m;
  uint64_t v10;
  uint64_t n;
  uint64_t v12;
  uint64_t ii;
  void *__p;
  void *v15;
  char *v16;
  _BYTE v17[64];
  _BYTE v18[64];
  void **p_p;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  _QWORD v28[3];
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 23) < 0)
  {
    if (!*((_QWORD *)this + 1))
      return;
  }
  else if (!*((_BYTE *)this + 23))
  {
    return;
  }
  quasar::PTree::PTree((quasar::PTree *)v18);
  quasar::PTree::readJsonFromFile((uint64_t)v18, (__int128 *)this);
  quasar::PTree::PTree((quasar::PTree *)v17);
  std::string::basic_string[abi:ne180100]<0>(&v27, "targets");
  std::string::basic_string[abi:ne180100]<0>(v28, "delete");
  std::string::basic_string[abi:ne180100]<0>(v29, "all");
  v21 = 0uLL;
  v22 = 0;
  LOBYTE(v15) = 0;
  *(_QWORD *)&v21 = operator new(0x48uLL);
  *((_QWORD *)&v21 + 1) = v21;
  v22 = v21 + 72;
  *((_QWORD *)&v21 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (__int128 *)&v27, &v30, (std::string *)v21);
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)v18, (uint64_t *)&v21);
  __p = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v29[i + 2]) < 0)
      operator delete((void *)v29[i]);
  }
  if (ChildOptional)
  {
    v4 = (__int128 *)quasar::PTree::begin(ChildOptional);
    for (j = quasar::PTree::end(ChildOptional); v4 != (__int128 *)j; v4 = (__int128 *)((char *)v4 + 88))
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v27, v4);
      quasar::PTree::addChild((quasar::PTree *)v17, (const quasar::PTree *)v28);
      quasar::PTree::~PTree((quasar::PTree *)v28);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v27, "targets");
  std::string::basic_string[abi:ne180100]<0>(v28, "select");
  std::string::basic_string[abi:ne180100]<0>(v29, "all");
  v21 = 0uLL;
  v22 = 0;
  __p = &v21;
  LOBYTE(v15) = 0;
  *(_QWORD *)&v21 = operator new(0x48uLL);
  *((_QWORD *)&v21 + 1) = v21;
  v22 = v21 + 72;
  *((_QWORD *)&v21 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (__int128 *)&v27, &v30, (std::string *)v21);
  v6 = (quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)v18, (uint64_t *)&v21);
  __p = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v29[k + 2]) < 0)
      operator delete((void *)v29[k]);
  }
  if (v6)
  {
    v8 = (__int128 *)quasar::PTree::begin(v6);
    for (m = quasar::PTree::end(v6); v8 != (__int128 *)m; v8 = (__int128 *)((char *)v8 + 88))
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v27, v8);
      quasar::PTree::addChild((quasar::PTree *)v17, (const quasar::PTree *)v28);
      quasar::PTree::~PTree((quasar::PTree *)v28);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  quasar::PTree::PTree((quasar::PTree *)&v27);
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_meta_token");
  LODWORD(v21) = quasar::getType((quasar *)1);
  std::to_string((std::string *)((char *)&v21 + 8), 1);
  v24 = 0;
  v25 = 0;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)&v27, (uint64_t)&__p, (uint64_t)&v21, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v21);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prefixes");
  quasar::PTree::PTree((quasar::PTree *)&v21);
  quasar::PTree::putChild((uint64_t)&v27, (uint64_t)&__p, (uint64_t)&v21, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v21);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v21, "phrases");
  quasar::PTree::putChild((uint64_t)&v27, (uint64_t)&v21, (uint64_t)v17, 1);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  std::string::basic_string[abi:ne180100]<0>(&v21, "fullText");
  quasar::PTree::putChild((uint64_t)this + 72, (uint64_t)&v21, (uint64_t)&v27, 1);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  std::string::basic_string[abi:ne180100]<0>(&v21, "targets");
  std::string::basic_string[abi:ne180100]<0>(&v23, "forcedDeleteAll");
  __p = 0;
  v15 = 0;
  v16 = 0;
  p_p = &__p;
  v20 = 0;
  __p = operator new(0x30uLL);
  v15 = __p;
  v16 = (char *)__p + 48;
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, &v21, &v26, (std::string *)__p);
  v10 = quasar::PTree::getChildOptional((uint64_t)v18, (uint64_t *)&__p);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (n = 0; n != -6; n -= 3)
  {
    if (SHIBYTE((&v25)[n]) < 0)
      operator delete(*(void **)((char *)&v23 + n * 8));
  }
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "deleteAll");
    quasar::PTree::putChild((uint64_t)this + 136, (uint64_t)&v21, v10, 1);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "targets");
  std::string::basic_string[abi:ne180100]<0>(&v23, "forcedDeleteTargetless");
  __p = 0;
  v15 = 0;
  v16 = 0;
  p_p = &__p;
  v20 = 0;
  __p = operator new(0x30uLL);
  v15 = __p;
  v16 = (char *)__p + 48;
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, &v21, &v26, (std::string *)__p);
  v12 = quasar::PTree::getChildOptional((uint64_t)v18, (uint64_t *)&__p);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (ii = 0; ii != -6; ii -= 3)
  {
    if (SHIBYTE((&v25)[ii]) < 0)
      operator delete(*(void **)((char *)&v23 + ii * 8));
  }
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "deleteTargetless");
    quasar::PTree::putChild((uint64_t)this + 136, (uint64_t)&v21, v12, 1);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
  }
  quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict(this, (quasar::corrective_reranking::OverridesDictionary *)((char *)this + 72), (quasar::PTree *)&v21);
  *((_DWORD *)this + 18) = v21;
  std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)&v21 + 8));
  if ((__int128 *)((char *)this + 72) != &v21)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)this + 104, v24, v25, 0x2E8BA2E8BA2E8BA3 * (((char *)v25 - (char *)v24) >> 3));
  *((_BYTE *)this + 128) = BYTE8(v26);
  quasar::PTree::~PTree((quasar::PTree *)&v21);
  quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict(this, (quasar::corrective_reranking::OverridesDictionary *)((char *)this + 136), (quasar::PTree *)&v21);
  *((_DWORD *)this + 34) = v21;
  std::string::operator=((std::string *)this + 6, (const std::string *)((char *)&v21 + 8));
  if ((__int128 *)((char *)this + 136) != &v21)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)this + 168, v24, v25, 0x2E8BA2E8BA2E8BA3 * (((char *)v25 - (char *)v24) >> 3));
  *((_BYTE *)this + 192) = BYTE8(v26);
  quasar::PTree::~PTree((quasar::PTree *)&v21);
  quasar::PTree::~PTree((quasar::PTree *)&v27);
  quasar::PTree::~PTree((quasar::PTree *)v17);
  quasar::PTree::~PTree((quasar::PTree *)v18);
}

void sub_1AE02B0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)(v39 - 144));
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::OverridesDictionary::loadOverrides(quasar::corrective_reranking::OverridesDictionary *this)
{
  int *v2;
  int v3;
  std::string v4;
  std::string *v5;
  std::string *v6;
  char v7;

  if (*((char *)this + 71) < 0)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_8;
  }
  else if (!*((_BYTE *)this + 71))
  {
    goto LABEL_8;
  }
  v2 = (int *)((char *)this + 72);
  quasar::PTree::readJsonFromFile((uint64_t)this + 72, (__int128 *)this + 3);
  quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict(this, (quasar::corrective_reranking::OverridesDictionary *)((char *)this + 72), (quasar::PTree *)&v3);
  *((_DWORD *)this + 18) = v3;
  std::string::operator=((std::string *)((char *)this + 80), &v4);
  if (v2 != &v3)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)this + 104, v5, v6, 0x2E8BA2E8BA2E8BA3 * (((char *)v6 - (char *)v5) >> 3));
  *((_BYTE *)this + 128) = v7;
  quasar::PTree::~PTree((quasar::PTree *)&v3);
LABEL_8:
  if (*((char *)this + 47) < 0)
  {
    if (!*((_QWORD *)this + 4))
      return;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return;
  }
  quasar::PTree::readJsonFromFile((uint64_t)this + 136, (__int128 *)((char *)this + 24));
  quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict(this, (quasar::corrective_reranking::OverridesDictionary *)((char *)this + 136), (quasar::PTree *)&v3);
  *((_DWORD *)this + 34) = v3;
  std::string::operator=((std::string *)this + 6, &v4);
  if ((int *)((char *)this + 136) != &v3)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)this + 168, v5, v6, 0x2E8BA2E8BA2E8BA3 * (((char *)v6 - (char *)v5) >> 3));
  *((_BYTE *)this + 192) = v7;
  quasar::PTree::~PTree((quasar::PTree *)&v3);
}

void sub_1AE02B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::OverridesDictionary::~OverridesDictionary(void **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 25));
  quasar::PTree::~PTree((quasar::PTree *)(this + 17));
  quasar::PTree::~PTree((quasar::PTree *)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::corrective_reranking::OverridesDictionary::findSlotOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __int128 *a4@<X8>)
{
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t ChildWithoutSplit;
  uint64_t v11;
  uint64_t ChildOptional;
  quasar::PTree *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int Bool;
  int v23;
  uint64_t String;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  std::string __p;
  __int128 v35;
  unint64_t v36;

  v35 = 0uLL;
  v36 = 0;
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCaseOrEmpty(v8, v9, &__p);
  ChildWithoutSplit = quasar::PTree::getChildWithoutSplit(a1 + 72, (unsigned __int8 **)&__p);
  v11 = ChildWithoutSplit;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_60;
  }
  else if (!ChildWithoutSplit)
  {
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "applicable_intents");
  ChildOptional = quasar::PTree::getChildOptional(v11, (uint64_t)&__p);
  v13 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_33;
  }
  else if (!ChildOptional)
  {
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&__p, "is_meta_token");
    Bool = quasar::PTree::getBool(v11, (__int128 *)&__p);
    v23 = Bool;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v23)
      {
LABEL_35:
        std::string::basic_string[abi:ne180100]<0>(&__p, "override");
        String = quasar::PTree::getString(v11, (__int128 *)&__p);
        v25 = *(char *)(String + 23);
        if (v25 < 0)
        {
          if (*(_QWORD *)(String + 8) != 8)
          {
LABEL_46:
            v30 = 0;
LABEL_47:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v30)
              {
LABEL_59:
                *a4 = v35;
                *((_QWORD *)a4 + 2) = v36;
                a4 = &v35;
                goto LABEL_60;
              }
            }
            else if (!v30)
            {
              goto LABEL_59;
            }
            __p.__r_.__value_.__s.__data_[0] = 1;
            v31 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1) >= v36)
            {
              v32 = std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<char const(&)[9],BOOL>((uint64_t *)&v35, "fullText", (std::string::value_type *)&__p);
            }
            else
            {
              std::allocator<quasar::corrective_reranking::Override>::construct[abi:ne180100]<quasar::corrective_reranking::Override,char const(&)[9],BOOL>((int)&v36, *((std::string **)&v35 + 1), "fullText", (std::string::value_type *)&__p);
              v32 = v31 + 32;
            }
            *((_QWORD *)&v35 + 1) = v32;
            goto LABEL_59;
          }
          String = *(_QWORD *)String;
        }
        else if (v25 != 8)
        {
          goto LABEL_46;
        }
        v30 = *(_QWORD *)String == 0x747865546C6C7566;
        goto LABEL_47;
      }
    }
    else if (Bool)
    {
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "override");
    v26 = quasar::PTree::getString(v11, (__int128 *)&__p);
    v33 = 0;
    v27 = *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1) >= v36)
    {
      v29 = std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<std::string const&,BOOL>((uint64_t *)&v35, (__int128 *)v26, &v33);
    }
    else
    {
      if (*(char *)(v26 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v35 + 1), *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
      }
      else
      {
        v28 = *(_OWORD *)v26;
        *(_QWORD *)(*((_QWORD *)&v35 + 1) + 16) = *(_QWORD *)(v26 + 16);
        *(_OWORD *)v27 = v28;
      }
      *(_BYTE *)(v27 + 24) = 0;
      v29 = v27 + 32;
    }
    *((_QWORD *)&v35 + 1) = v29;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_59;
  }
  v14 = quasar::PTree::begin(v13);
  v15 = quasar::PTree::end(v13);
  while (v14 != v15)
  {
    v16 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v14 + 24));
    v17 = v16[23];
    if ((v17 & 0x80u) == 0)
      v18 = v16[23];
    else
      v18 = *((_QWORD *)v16 + 1);
    v19 = a3[23];
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)a3 + 1);
    if (v18 == v19)
    {
      if (v20 >= 0)
        v21 = a3;
      else
        v21 = *(unsigned __int8 **)a3;
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v16, v21, *((_QWORD *)v16 + 1)))
          goto LABEL_33;
      }
      else
      {
        if (!v16[23])
          goto LABEL_33;
        while (*v16 == *v21)
        {
          ++v16;
          ++v21;
          if (!--v17)
            goto LABEL_33;
        }
      }
    }
    v14 += 88;
  }
LABEL_60:
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1AE02B870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::OverridesDictionary::findPhraseOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, __int128 *a4@<X8>)
{
  int v8;
  char *v9;
  uint64_t v10;
  std::string::size_type size;
  quasar::PTree *v12;
  unsigned __int8 *v13;
  uint64_t i;
  uint64_t String;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t ChildWithoutSplit;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  void *__p[2];
  char v26;
  std::string v27;
  __int128 v28;
  unint64_t v29;

  v28 = 0uLL;
  v29 = 0;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCaseOrEmpty(v9, v10, &v27);
  size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v27.__r_.__value_.__l.__size_;
  if (size)
  {
    v12 = (quasar::PTree *)(a1 + 136);
    if (a3)
    {
      v13 = (unsigned __int8 *)quasar::PTree::begin(v12);
      for (i = quasar::PTree::end(v12); v13 != (unsigned __int8 *)i; v13 += 88)
      {
        if (quasar::startsWith(v13, (unsigned __int8 *)a2))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "override");
          String = quasar::PTree::getString((uint64_t)(v13 + 24), (__int128 *)__p);
          v24 = 1;
          v16 = *((_QWORD *)&v28 + 1);
          if (*((_QWORD *)&v28 + 1) >= v29)
          {
            v18 = std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<std::string const&,BOOL>((uint64_t *)&v28, (__int128 *)String, &v24);
          }
          else
          {
            if (*(char *)(String + 23) < 0)
            {
              std::string::__init_copy_ctor_external(*((std::string **)&v28 + 1), *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
            }
            else
            {
              v17 = *(_OWORD *)String;
              *(_QWORD *)(*((_QWORD *)&v28 + 1) + 16) = *(_QWORD *)(String + 16);
              *(_OWORD *)v16 = v17;
            }
            *(_BYTE *)(v16 + 24) = 1;
            v18 = v16 + 32;
          }
          *((_QWORD *)&v28 + 1) = v18;
          if (v26 < 0)
            operator delete(__p[0]);
        }
      }
    }
    else
    {
      ChildWithoutSplit = quasar::PTree::getChildWithoutSplit((uint64_t)v12, (unsigned __int8 **)&v27);
      if (!ChildWithoutSplit)
        goto LABEL_33;
      std::string::basic_string[abi:ne180100]<0>(__p, "override");
      v20 = quasar::PTree::getString(ChildWithoutSplit, (__int128 *)__p);
      v24 = 1;
      v21 = *((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1) >= v29)
      {
        v23 = std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<std::string const&,BOOL>((uint64_t *)&v28, (__int128 *)v20, &v24);
      }
      else
      {
        if (*(char *)(v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v28 + 1), *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v20;
          *(_QWORD *)(*((_QWORD *)&v28 + 1) + 16) = *(_QWORD *)(v20 + 16);
          *(_OWORD *)v21 = v22;
        }
        *(_BYTE *)(v21 + 24) = 1;
        v23 = v21 + 32;
      }
      *((_QWORD *)&v28 + 1) = v23;
      if (v26 < 0)
        operator delete(__p[0]);
    }
  }
  *a4 = v28;
  *((_QWORD *)a4 + 2) = v29;
  a4 = &v28;
LABEL_33:
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_1AE02BB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  a17 = &a23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

BOOL quasar::corrective_reranking::OverridesDictionary::slotOverrideStartsWith(uint64_t a1, uint64_t a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  std::string::size_type size;
  quasar::PTree *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _BOOL8 v10;
  _BOOL8 v11;
  char v12;
  std::string __p;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (char *)a2;
  else
    v4 = *(char **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCaseOrEmpty(v4, v5, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size
    || (v7 = (quasar::PTree *)(a1 + 72),
        v8 = (unsigned __int8 *)quasar::PTree::begin((quasar::PTree *)(a1 + 72)),
        v9 = quasar::PTree::end(v7),
        v8 == (unsigned __int8 *)v9))
  {
    v11 = 0;
  }
  else
  {
    do
    {
      v10 = quasar::startsWith(v8, (unsigned __int8 *)&__p);
      v11 = v10;
      v8 += 88;
      v12 = v8 == (unsigned __int8 *)v9 || v10;
    }
    while ((v12 & 1) == 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1AE02BC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict(quasar::corrective_reranking::OverridesDictionary *this@<X0>, const quasar::PTree *a2@<X1>, quasar::PTree *a3@<X8>)
{
  _QWORD *v5;
  std::vector<std::string>::pointer p_p;
  uint64_t value_high;
  _QWORD *v8;
  quasar::PTree *v9;
  uint64_t ChildOptional;
  uint64_t v11;
  quasar *Bool;
  quasar::PTree *Child;
  uint64_t v14;
  quasar::PTree *v15;
  uint64_t v16;
  uint64_t v17;
  quasar::PTree *v18;
  uint64_t String;
  char *v20;
  size_t v21;
  std::string *v22;
  char *v23;
  uint64_t v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  char *v29;
  char v30;
  std::vector<std::string>::pointer end;
  std::string *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  const void **v39;
  const void **v40;
  std::vector<std::string>::pointer v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  std::string *v49;
  quasar::PTree *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::vector<std::string>::pointer v54;
  __int128 v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::vector<std::string>::pointer begin;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  std::vector<std::string>::pointer v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  std::vector<std::string> __p;
  _BYTE __v[48];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void *v92;
  char v93;
  _BYTE v94[152];
  _BYTE v95[15];
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v87);
    quasar::PTree::writeJson(a2, &v87, 1);
    if (quasar::gLogLevel >= 6)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"expandSlotOverrideDict input: ", 30);
      std::stringbuf::str();
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
        p_p = (std::vector<std::string>::pointer)&__p;
      else
        p_p = __p.__begin_;
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
        value_high = HIBYTE(__p.__end_cap_.__value_);
      else
        value_high = (uint64_t)__p.__end_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, value_high);
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        operator delete(__p.__begin_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__v);
    }
    v87.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words
                              + *(_QWORD *)(v87.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    v87.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    if (v93 < 0)
      operator delete(v92);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](v94);
  }
  quasar::PTree::PTree(a3);
  v69 = quasar::PTree::begin(a2);
  v66 = quasar::PTree::end(a2);
  if (v69 != v66)
  {
    v8 = (_QWORD *)((char *)this + 200);
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__v, "prefixes");
      v9 = (quasar::PTree *)(v69 + 24);
      ChildOptional = quasar::PTree::getChildOptional(v69 + 24, (uint64_t)__v);
      v11 = ChildOptional;
      if ((__v[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__v);
        if (v11)
        {
LABEL_19:
          std::string::basic_string[abi:ne180100]<0>(__v, "is_meta_token");
          Bool = (quasar *)quasar::PTree::getBool((uint64_t)v9, (__int128 *)__v);
          if ((__v[23] & 0x80000000) != 0)
            operator delete(*(void **)__v);
          memset(&__p, 0, sizeof(__p));
          std::string::basic_string[abi:ne180100]<0>(__v, "phrases");
          Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v9, (__int128 *)__v);
          if ((__v[23] & 0x80000000) != 0)
            operator delete(*(void **)__v);
          v70 = quasar::PTree::begin(Child);
          v14 = quasar::PTree::end(Child);
          if (v70 != v14)
          {
            v67 = v14;
            do
            {
              std::string::basic_string[abi:ne180100]<0>(__v, "prefixes");
              v15 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v9, (__int128 *)__v);
              if ((__v[23] & 0x80000000) != 0)
                operator delete(*(void **)__v);
              v16 = quasar::PTree::begin(v15);
              v17 = quasar::PTree::end(v15);
              if (v16 != v17)
              {
                v18 = (quasar::PTree *)(v70 + 24);
                do
                {
                  String = quasar::PTree::getString((quasar::PTree *)(v16 + 24));
                  v20 = (char *)String;
                  if (*(char *)(String + 23) >= 0)
                    v21 = *(unsigned __int8 *)(String + 23);
                  else
                    v21 = *(_QWORD *)(String + 8);
                  std::string::basic_string[abi:ne180100]((uint64_t)&v87, v21 + 1);
                  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v22 = &v87;
                  else
                    v22 = (std::string *)v87.__r_.__value_.__r.__words[0];
                  if (v21)
                  {
                    if (v20[23] >= 0)
                      v23 = v20;
                    else
                      v23 = *(char **)v20;
                    memmove(v22, v23, v21);
                  }
                  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 32;
                  v24 = quasar::PTree::getString(v18);
                  v25 = *(char *)(v24 + 23);
                  if (v25 >= 0)
                    v26 = (const std::string::value_type *)v24;
                  else
                    v26 = *(const std::string::value_type **)v24;
                  if (v25 >= 0)
                    v27 = *(unsigned __int8 *)(v24 + 23);
                  else
                    v27 = *(_QWORD *)(v24 + 8);
                  v28 = std::string::append(&v87, v26, v27);
                  v29 = (char *)v28->__r_.__value_.__r.__words[0];
                  *(_QWORD *)v95 = v28->__r_.__value_.__l.__size_;
                  *(_QWORD *)&v95[7] = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
                  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
                  v28->__r_.__value_.__l.__size_ = 0;
                  v28->__r_.__value_.__r.__words[2] = 0;
                  v28->__r_.__value_.__r.__words[0] = 0;
                  end = __p.__end_;
                  if (__p.__end_ >= __p.__end_cap_.__value_)
                  {
                    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
                    v34 = v33 + 1;
                    if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v34)
                      v34 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                      v35 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v35 = v34;
                    *(_QWORD *)&__v[32] = &__p.__end_cap_;
                    if (v35)
                      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__p.__end_cap_, v35);
                    else
                      v36 = 0;
                    v37 = &v36[24 * v33];
                    *(_QWORD *)__v = v36;
                    *(_QWORD *)&__v[8] = v37;
                    *(_QWORD *)&__v[24] = &v36[24 * v35];
                    *(_QWORD *)v37 = v29;
                    *((_QWORD *)v37 + 1) = *(_QWORD *)v95;
                    *(_QWORD *)(v37 + 15) = *(_QWORD *)&v95[7];
                    v37[23] = v30;
                    *(_QWORD *)&__v[16] = v37 + 24;
                    std::vector<std::string>::__swap_out_circular_buffer(&__p, (std::__split_buffer<std::string> *)__v);
                    v32 = __p.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                  }
                  else
                  {
                    __p.__end_->__r_.__value_.__l.__data_ = v29;
                    end->__r_.__value_.__l.__size_ = *(_QWORD *)v95;
                    *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v95[7];
                    *((_BYTE *)&end->__r_.__value_.__s + 23) = v30;
                    v32 = end + 1;
                  }
                  __p.__end_ = v32;
                  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v87.__r_.__value_.__l.__data_);
                  v38 = (unsigned __int8 *)quasar::PTree::getString(v18);
                  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, v38))
                  {
                    v39 = (const void **)quasar::PTree::getString((quasar::PTree *)(v16 + 24));
                    v40 = (const void **)quasar::PTree::getString(v18);
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39, v40, (uint64_t)&v87);
                    v41 = __p.__end_;
                    if (__p.__end_ >= __p.__end_cap_.__value_)
                    {
                      v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
                      v44 = v43 + 1;
                      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v44)
                        v44 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                        v45 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v45 = v44;
                      *(_QWORD *)&__v[32] = &__p.__end_cap_;
                      if (v45)
                        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__p.__end_cap_, v45);
                      else
                        v46 = 0;
                      v47 = &v46[24 * v43];
                      *(_QWORD *)__v = v46;
                      *(_QWORD *)&__v[8] = v47;
                      *(_QWORD *)&__v[24] = &v46[24 * v45];
                      v48 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
                      *((_QWORD *)v47 + 2) = *((_QWORD *)&v87.__r_.__value_.__l + 2);
                      *(_OWORD *)v47 = v48;
                      memset(&v87, 0, sizeof(v87));
                      *(_QWORD *)&__v[16] = v47 + 24;
                      std::vector<std::string>::__swap_out_circular_buffer(&__p, (std::__split_buffer<std::string> *)__v);
                      v49 = __p.__end_;
                      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                      __p.__end_ = v49;
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v87.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v42 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
                      __p.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
                      __p.__end_ = v41 + 1;
                    }
                  }
                  v16 += 88;
                }
                while (v16 != v17);
              }
              v70 += 88;
            }
            while (v70 != v67);
          }
          std::string::basic_string[abi:ne180100]<0>(__v, "phrases");
          v50 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v9, (__int128 *)__v);
          if ((__v[23] & 0x80000000) != 0)
            operator delete(*(void **)__v);
          v51 = quasar::PTree::begin(v50);
          v52 = quasar::PTree::end(v50);
          if (v51 == v52)
          {
            v56 = __p.__end_;
          }
          else
          {
            do
            {
              v53 = quasar::PTree::getString((quasar::PTree *)(v51 + 24));
              v54 = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                v56 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)v53);
              }
              else
              {
                if (*(char *)(v53 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(__p.__end_, *(const std::string::value_type **)v53, *(_QWORD *)(v53 + 8));
                }
                else
                {
                  v55 = *(_OWORD *)v53;
                  __p.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v53 + 16);
                  *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
                }
                v56 = v54 + 1;
              }
              __p.__end_ = v56;
              v51 += 88;
            }
            while (v51 != v52);
          }
          begin = __p.__begin_;
          while (2)
          {
            if (begin == v56)
            {
              *(_QWORD *)__v = &__p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              goto LABEL_110;
            }
            quasar::PTree::PTree((quasar::PTree *)__v);
            std::string::basic_string[abi:ne180100]<0>(v95, "override");
            quasar::PTree::PTree(&v87, v69);
            quasar::PTree::putChild((uint64_t)__v, (uint64_t)v95, (uint64_t)&v87, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v87);
            if (v96 < 0)
              operator delete(*(void **)v95);
            std::string::basic_string[abi:ne180100]<0>(v95, "is_meta_token");
            LODWORD(v87.__r_.__value_.__l.__data_) = quasar::getType(Bool);
            std::to_string((std::string *)&v87.__r_.__value_.__r.__words[1], (int)Bool);
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 1;
            quasar::PTree::putChild((uint64_t)__v, (uint64_t)v95, (uint64_t)&v87, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v87);
            if (v96 < 0)
              operator delete(*(void **)v95);
            std::string::basic_string[abi:ne180100]<0>(&v87, "applicable_intents");
            v61 = quasar::PTree::getChildOptional((uint64_t)v9, (uint64_t)&v87);
            v62 = v61;
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v87.__r_.__value_.__l.__data_);
              if (!v62)
              {
LABEL_108:
                quasar::PTree::putChild((uint64_t)a3, (uint64_t)begin, (uint64_t)__v, 0);
                quasar::PTree::~PTree((quasar::PTree *)__v);
                ++begin;
                continue;
              }
            }
            else if (!v61)
            {
              goto LABEL_108;
            }
            break;
          }
          std::string::basic_string[abi:ne180100]<0>(&v87, "applicable_intents");
          quasar::PTree::putChild((uint64_t)__v, (uint64_t)&v87, v62, 1);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          goto LABEL_108;
        }
      }
      else if (ChildOptional)
      {
        goto LABEL_19;
      }
      v57 = quasar::PTree::begin(v9);
      v58 = quasar::PTree::end(v9);
      while (v57 != v58)
      {
        quasar::PTree::PTree((quasar::PTree *)__v);
        std::string::basic_string[abi:ne180100]<0>(&__p, "override");
        quasar::PTree::PTree(&v87, v69);
        quasar::PTree::putChild((uint64_t)__v, (uint64_t)&__p, (uint64_t)&v87, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v87);
        if (SHIBYTE(__p.__end_cap_.__value_) < 0)
          operator delete(__p.__begin_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "is_meta_token");
        LODWORD(v87.__r_.__value_.__l.__data_) = quasar::getType(0);
        std::to_string((std::string *)&v87.__r_.__value_.__r.__words[1], 0);
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 1;
        quasar::PTree::putChild((uint64_t)__v, (uint64_t)&__p, (uint64_t)&v87, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v87);
        if (SHIBYTE(__p.__end_cap_.__value_) < 0)
          operator delete(__p.__begin_);
        v59 = quasar::PTree::getString((quasar::PTree *)(v57 + 24));
        quasar::PTree::putChild((uint64_t)a3, v59, (uint64_t)__v, 0);
        quasar::PTree::~PTree((quasar::PTree *)__v);
        v57 += 88;
      }
LABEL_110:
      v69 += 88;
    }
    while (v69 != v66);
  }
  if (quasar::gLogLevel > 5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v87);
    quasar::PTree::writeJson(a3, &v87, 1);
    if (quasar::gLogLevel >= 6)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"expandSlotOverrideDict output: ", 31);
      std::stringbuf::str();
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
        v64 = (std::vector<std::string>::pointer)&__p;
      else
        v64 = __p.__begin_;
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
        v65 = HIBYTE(__p.__end_cap_.__value_);
      else
        v65 = (uint64_t)__p.__end_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        operator delete(__p.__begin_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__v);
    }
    v87.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words
                              + *(_QWORD *)(v87.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    v87.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    if (v93 < 0)
      operator delete(v92);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](v94);
  }
}

void sub_1AE02C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, quasar::PTree *a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::__split_buffer<std::wstring> *a14, quasar::PTree *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__pa, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,...)
{
  va_list va;

  va_start(va, a59);
  if (SHIBYTE(a21) < 0)
    operator delete(__pa);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a22);
  std::ostringstream::~ostringstream((uint64_t)va);
  quasar::PTree::~PTree(a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<char const(&)[9],BOOL>(uint64_t *a1, char *a2, std::string::value_type *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - *a1;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a1 + 2), v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[32 * v4];
  v16 = &v10[32 * v9];
  std::allocator<quasar::corrective_reranking::Override>::construct[abi:ne180100]<quasar::corrective_reranking::Override,char const(&)[9],BOOL>((_DWORD)a1 + 16, v14, a2, a3);
  v15 = &v14[1].__r_.__value_.__s.__data_[8];
  std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AE02CA88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Override>::construct[abi:ne180100]<quasar::corrective_reranking::Override,char const(&)[9],BOOL>(int a1, std::string *a2, char *__s, std::string::value_type *a4)
{
  std::string::value_type v6;
  int v7;
  void *__p[2];
  std::string::size_type v9;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v6 = *a4;
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v7 = SHIBYTE(v9);
    a2[1].__r_.__value_.__s.__data_[0] = v6;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v9;
    a2[1].__r_.__value_.__s.__data_[0] = v6;
  }
}

void sub_1AE02CB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<std::string const&,BOOL>(uint64_t *a1, __int128 *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  std::string *v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  v14 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v19;
  }
  else
  {
    v15 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
  }
  v12[32 * v5 + 24] = v14;
  v19 = (std::string *)((char *)v13 + 32);
  std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1AE02CD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void LMClient::LMClient(LMClient *this, Vocab *a2, const char *a3)
{
  LM *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  const char *v8;
  const char *v9;
  Vocab *v10;
  Vocab *v11;
  LM *v12;
  uint64_t v13;
  int v14;
  hostent *v15;
  in_addr_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  char *v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  int *v47;
  char *v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  size_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int *v60;
  char *v61;
  size_t v62;
  _QWORD *v63;
  in_addr_t __dst;
  char __str[2];
  char v66[256];
  sockaddr v67;
  uint64_t v68;

  v3 = (LM *)MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v3;
  v68 = *MEMORY[0x1E0C80C00];
  LM::LM(v3, v10);
  *(_QWORD *)v13 = &off_1E5D17910;
  *(_DWORD *)(v13 + 152) = v7;
  *(_DWORD *)(v13 + 416) = -1;
  *(_DWORD *)(v13 + 420) = v5;
  Ngram::Ngram((Ngram *)(v13 + 424), v11, v5);
  *((_QWORD *)v12 + 79) = 0;
  *((_QWORD *)v12 + 78) = 0;
  *((_DWORD *)v12 + 160) = 0;
  *((_DWORD *)v12 + 170) = 0;
  *(_OWORD *)((char *)v12 + 664) = 0u;
  if (v9)
  {
    v14 = sscanf(v9, "%u@%255s", (char *)v12 + 412, (char *)v12 + 156);
    if (v14 != 2)
    {
      if (v14 == 1)
      {
        strcpy((char *)v12 + 156, "localhost");
      }
      else
      {
        if (sscanf(v9, "%64s", (char *)v12 + 156) != 1)
          strcpy((char *)v12 + 156, "localhost");
        *((_DWORD *)v12 + 103) = 2525;
      }
    }
  }
  else
  {
    strcpy((char *)v12 + 156, "localhost");
    *((_DWORD *)v12 + 103) = 2525;
  }
  if ((*((char *)v12 + 156) & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)v12 + 156) + 60) & 0x400) != 0)
  {
    v16 = inet_addr((const char *)v12 + 156);
    __dst = v16;
LABEL_14:
    *(_DWORD *)&v67.sa_len = 512;
    *(_QWORD *)&v67.sa_data[6] = 0;
    *(_DWORD *)&v67.sa_data[2] = v16;
    *(_WORD *)v67.sa_data = bswap32(*((unsigned __int16 *)v12 + 206)) >> 16;
    v17 = socket(2, 1, 0);
    *((_DWORD *)v12 + 104) = v17;
    if (v17 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"socket: server ", 15);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"@", 1);
      v35 = strlen((const char *)v12 + 156);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v12 + 156, v35);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
      v38 = __error();
      v39 = srilm_ts_strerror(*v38);
      v40 = strlen(v39);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v41);
    }
    else
    {
      if (connect(v17, &v67, 0x10u) != -1)
      {
        v18 = recv(*((_DWORD *)v12 + 104), v66, 0xFFuLL, 0);
        if (v18 == -1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
          v51 = (_QWORD *)std::ostream::operator<<();
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"@", 1);
          v53 = strlen((const char *)v12 + 156);
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v12 + 156, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": could not read banner\n", 24);
          close(*((_DWORD *)v12 + 104));
          *((_DWORD *)v12 + 104) = -1;
          exit(1);
        }
        if (!*((_BYTE *)v12 + 8) && (Debug::debugAll || *((_DWORD *)v12 + 3)))
        {
          v66[v18] = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
          v19 = (_QWORD *)std::ostream::operator<<();
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"@", 1);
          v21 = strlen((const char *)v12 + 156);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v12 + 156, v21);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
          v24 = strlen(v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v66, v24);
        }
        snprintf(__str, 0x1388uLL, "%s\n", "_R_E_M_O_T_E_L_M_V=2");
        v25 = strlen(__str);
        if (send(*((_DWORD *)v12 + 104), __str, v25, 0) == -1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"send: server ", 13);
          v55 = (_QWORD *)std::ostream::operator<<();
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"@", 1);
          v57 = strlen((const char *)v12 + 156);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v12 + 156, v57);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
          v60 = __error();
          v61 = srilm_ts_strerror(*v60);
          v62 = strlen(v61);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
        }
        else
        {
          if (recv(*((_DWORD *)v12 + 104), __str, 0x1387uLL, 0) != -1
            && *(unsigned __int16 *)__str == 19279)
          {
            *((_DWORD *)v12 + 154) = -1;
            *(_DWORD *)Array<unsigned int>::operator[]((int *)v12 + 156, 0) = -1;
            *((_QWORD *)v12 + 81) = 0;
            *((_DWORD *)v12 + 164) = 0;
            *(_DWORD *)Array<unsigned int>::operator[]((int *)v12 + 166, 0) = -1;
            *((_DWORD *)v12 + 172) = 0;
            *((_DWORD *)v12 + 173) = 0;
            return;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
          v29 = (_QWORD *)std::ostream::operator<<();
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"@", 1);
          v31 = strlen((const char *)v12 + 156);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v12 + 156, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": protocol version 2 not supported\n", 35);
        }
        close(*((_DWORD *)v12 + 104));
        *((_DWORD *)v12 + 104) = -1;
        exit(1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"connect: server ", 16);
      v42 = (_QWORD *)std::ostream::operator<<();
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"@", 1);
      v44 = strlen((const char *)v12 + 156);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v12 + 156, v44);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      v47 = __error();
      v48 = srilm_ts_strerror(*v47);
      v49 = strlen(v48);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v50);
      close(*((_DWORD *)v12 + 104));
    }
    exit(1);
  }
  v15 = gethostbyname((const char *)v12 + 156);
  if (v15)
  {
    memcpy(&__dst, *(const void **)v15->h_addr_list, v15->h_length);
    v16 = __dst;
    goto LABEL_14;
  }
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server host ", 12);
  v27 = strlen((const char *)v12 + 156);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v12 + 156, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" not found\n", 11);
}

void sub_1AE02D44C(_Unwind_Exception *a1)
{
  LM *v1;

  LM::~LM(v1);
  _Unwind_Resume(a1);
}

void LMClient::~LMClient(LMClient *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E5D17910;
  v2 = *((_DWORD *)this + 104);
  if (v2 != -1)
    close(v2);
  v3 = *((_QWORD *)this + 84);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 79);
  if (v4)
    MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
  *((_QWORD *)this + 53) = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 576);
  LM::~LM((LMClient *)((char *)this + 424));
  LM::~LM(this);
}

{
  LMClient::~LMClient(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t LMClient::wordProb(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  const unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  float *v14;
  float v15;
  char *v16;
  unsigned int *v17;
  const char *v18;
  const char *v19;
  int v20;
  int v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  char *v39;
  _QWORD *v40;
  double v41;
  char __s[2];
  char v43[253];
  char __str[5000];
  uint64_t v45;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v45 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v2 + 416) == -1)
    exit(1);
  v5 = (unsigned int *)v4;
  v6 = v3;
  v7 = v2;
  v8 = Vocab::length(v4, v3);
  v9 = *(_DWORD *)(v7 + 152);
  v10 = v9 - 1;
  if (v8 < v9 - 1)
    v10 = v8;
  if (v9)
    v11 = v10;
  else
    v11 = v8;
  if (v11 >= *(_DWORD *)(v7 + 420))
  {
    v14 = 0;
  }
  else
  {
    v12 = v5[v11];
    v5[v11] = -1;
    result = Ngram::insertProb((Ngram *)(v7 + 424), v6, v5);
    v14 = (float *)result;
    v15 = *(float *)result;
    v5[v11] = v12;
    if (v15 != 0.0)
      return result;
  }
  v16 = &__str[snprintf(__str, 0x1388uLL, "%s ", "W")];
  if ((int)v11 - 1 >= 0)
  {
    v17 = &v5[(v11 - 1)];
    do
    {
      v18 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24), *v17);
      v16 += snprintf(v16, (char *)&v45 - v16, "%s ", v18);
      --v17;
      LODWORD(v11) = v11 - 1;
    }
    while ((_DWORD)v11);
  }
  v19 = (const char *)(*(uint64_t (**)(_QWORD, const unsigned int *))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24), v6);
  v20 = snprintf(v16, (char *)&v45 - v16, "%s\n", v19);
  if (send(*(_DWORD *)(v7 + 416), __str, &v16[v20] - __str, 0) == -1)
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "send: server ");
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "@");
    v29 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, (char *)(v7 + 156));
    v30 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, ": ");
    v31 = __error();
    v32 = srilm_ts_strerror(*v31);
    v33 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, v32);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v33);
    close(*(_DWORD *)(v7 + 416));
    *(_DWORD *)(v7 + 416) = -1;
    exit(1);
  }
  v21 = recv(*(_DWORD *)(v7 + 416), __s, 0xFFuLL, 0);
  if (v21 == -1)
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "recv: server ");
    v34 = (_QWORD *)std::ostream::operator<<();
    v35 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "@");
    v36 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, (char *)(v7 + 156));
    v37 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, ": ");
    v38 = __error();
    v39 = srilm_ts_strerror(*v38);
    v40 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, v39);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
    close(*(_DWORD *)(v7 + 416));
    exit(1);
  }
  __s[v21] = 0;
  if (*(unsigned __int16 *)__s != 19279 || (v41 = 0.0, result = parseLogP(v43, &v41), !(_DWORD)result))
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "server ");
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "@");
    v25 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)(v7 + 156));
    v26 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, ": unexpected return: ");
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, __s);
    close(*(_DWORD *)(v7 + 416));
    exit(1);
  }
  if (v14)
  {
    v22 = v41;
    *v14 = v22;
  }
  return result;
}

void sub_1AE02D900(_Unwind_Exception *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + 4 * v3) = v1;
  _Unwind_Resume(a1);
}

uint64_t LMClient::contextID(LMClient *this, uint64_t a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  const unsigned int *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int *v9;
  const unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  Vocab *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  const unsigned int *v18;
  const char *v19;
  char *v20;
  unsigned int *v21;
  int v22;
  unsigned int v23;
  const char *v24;
  int v25;
  int v26;
  const unsigned int *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  char *v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int *v49;
  char *v50;
  size_t v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  char __s[2];
  char v56[253];
  char __str[5000];
  uint64_t v58;

  v4 = MEMORY[0x1E0C80A78](this, a2);
  v58 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v4 + 416) == -1)
    exit(1);
  v8 = v7;
  v9 = (unsigned int *)v6;
  v10 = v5;
  v11 = v4;
  v12 = Vocab::length(v6, v5);
  v14 = *(_DWORD *)(v11 + 152);
  v15 = v14 - 1;
  if (v12 < v14 - 1)
    v15 = v12;
  if (v14)
    v16 = v15;
  else
    v16 = v12;
  v17 = v9[v16];
  v9[v16] = -1;
  v53 = v17;
  if (v16 < *(_DWORD *)(v11 + 420)
    && (Vocab::setCompareVocab(0, v13), *(_DWORD *)(v11 + 616) == (_DWORD)v10)
    && !Vocab::compare((Vocab *)v9, (const unsigned int *)(*(_QWORD *)(v11 + 632) - 4 * *(int *)(v11 + 624)), v18))
  {
    *v8 = *(_DWORD *)(v11 + 656);
    result = *(_QWORD *)(v11 + 648);
  }
  else
  {
    v19 = "C2";
    if ((_DWORD)v10 == -1)
      v19 = "C1";
    v20 = &__str[snprintf(__str, 0x1388uLL, "%s ", v19)];
    if ((int)v16 - 1 >= 0)
    {
      v21 = &v9[(v16 - 1)];
      v22 = v16;
      do
      {
        v23 = *v21--;
        v24 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 24) + 32))(*(_QWORD *)(v11 + 24), v23);
        v20 += snprintf(v20, (char *)&v58 - v20, "%s ", v24);
        --v22;
      }
      while (v22 > 0);
    }
    if ((_DWORD)v10 == -1)
    {
      v25 = snprintf(v20, __str - v20 + 5000, "\n");
    }
    else
    {
      (*(void (**)(_QWORD, const unsigned int *))(**(_QWORD **)(v11 + 24) + 32))(*(_QWORD *)(v11 + 24), v10);
      v25 = snprintf(v20, __str - v20 + 5000, "%s\n");
    }
    if (send(*(_DWORD *)(v11 + 416), __str, &v20[v25] - __str, 0) == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"send: server ", 13);
      v35 = (_QWORD *)std::ostream::operator<<();
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"@", 1);
      v37 = strlen((const char *)(v11 + 156));
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v11 + 156, v37);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
      v40 = __error();
      v41 = srilm_ts_strerror(*v40);
      v42 = strlen(v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v43);
      close(*(_DWORD *)(v11 + 416));
      *(_DWORD *)(v11 + 416) = -1;
      exit(1);
    }
    v17 = v53;
    v26 = recv(*(_DWORD *)(v11 + 416), __s, 0xFFuLL, 0);
    if (v26 < 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"recv: server ", 13);
      v44 = (_QWORD *)std::ostream::operator<<();
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"@", 1);
      v46 = strlen((const char *)(v11 + 156));
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v11 + 156, v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      v49 = __error();
      v50 = srilm_ts_strerror(*v49);
      v51 = strlen(v50);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
      close(*(_DWORD *)(v11 + 416));
      exit(1);
    }
    __s[v26] = 0;
    v54 = 0;
    if (*(unsigned __int16 *)__s != 19279 || sscanf(v56, "%lu %u", &v54, v8) != 2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"@", 1);
      v31 = strlen((const char *)(v11 + 156));
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v11 + 156, v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": unexpected return: ", 21);
      v34 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)__s, v34);
      close(*(_DWORD *)(v11 + 416));
      exit(1);
    }
    if (v16 >= *(_DWORD *)(v11 + 420))
    {
      result = v54;
    }
    else
    {
      *(_DWORD *)(v11 + 616) = (_DWORD)v10;
      *(_DWORD *)Array<unsigned int>::operator[]((int *)(v11 + 624), v16) = -1;
      Vocab::copy(*(_QWORD *)(v11 + 632) - 4 * *(int *)(v11 + 624), v9, v27);
      result = v54;
      *(_QWORD *)(v11 + 648) = v54;
      *(_DWORD *)(v11 + 656) = *v8;
    }
  }
  v9[v16] = v17;
  return result;
}

void sub_1AE02DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(v13 + 4 * v14) = a13;
  _Unwind_Resume(a1);
}

float LMClient::contextBOW(LMClient *this, const unsigned int *a2)
{
  uint64_t v2;
  const unsigned int *v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  Vocab *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const unsigned int *v14;
  char *v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  const char *v19;
  int v20;
  int v21;
  float v22;
  const unsigned int *v23;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  char *v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int *v45;
  char *v46;
  size_t v47;
  _QWORD *v48;
  double v49;
  char __s[2];
  char v51[253];
  char __str[5000];
  _QWORD v53[2];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v53[0] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v2 + 416) == -1)
    exit(1);
  v5 = v4;
  v6 = (unsigned int *)v3;
  v7 = v2;
  v8 = Vocab::length((uint64_t)v3, v3);
  v10 = *(_DWORD *)(v7 + 152);
  v11 = v10 - 1;
  if (v8 < v10 - 1)
    v11 = v8;
  if (v10)
    v12 = v11;
  else
    v12 = v8;
  v13 = v6[v12];
  v6[v12] = -1;
  if (v12 < *(_DWORD *)(v7 + 420)
    && (Vocab::setCompareVocab(0, v9), *(_DWORD *)(v7 + 688) == v5)
    && !Vocab::compare((Vocab *)v6, (const unsigned int *)(*(_QWORD *)(v7 + 672) - 4 * *(int *)(v7 + 664)), v14))
  {
    v22 = *(float *)(v7 + 692);
  }
  else
  {
    v15 = &__str[snprintf(__str, 0x1388uLL, "%s ", "B")];
    if ((int)v12 - 1 >= 0)
    {
      v16 = &v6[(v12 - 1)];
      v17 = v12;
      do
      {
        v18 = *v16--;
        v19 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24), v18);
        v15 += snprintf(v15, (char *)v53 - v15, "%s ", v19);
        --v17;
      }
      while (v17 > 0);
    }
    v20 = snprintf(v15, (char *)v53 - v15, "%u\n", v5);
    if (send(*(_DWORD *)(v7 + 416), __str, &v15[v20] - __str, 0) == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
      v31 = (_QWORD *)std::ostream::operator<<();
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"@", 1);
      v33 = strlen((const char *)(v7 + 156));
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v7 + 156, v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": send ", 7);
      v36 = __error();
      v37 = srilm_ts_strerror(*v36);
      v38 = strlen(v37);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v39);
      close(*(_DWORD *)(v7 + 416));
      *(_DWORD *)(v7 + 416) = -1;
      exit(1);
    }
    v21 = recv(*(_DWORD *)(v7 + 416), __s, 0xFFuLL, 0);
    if (v21 < 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"recv: server ", 13);
      v40 = (_QWORD *)std::ostream::operator<<();
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"@", 1);
      v42 = strlen((const char *)(v7 + 156));
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v7 + 156, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
      v45 = __error();
      v46 = srilm_ts_strerror(*v45);
      v47 = strlen(v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v48);
      close(*(_DWORD *)(v7 + 416));
      exit(1);
    }
    __s[v21] = 0;
    if (*(unsigned __int16 *)__s != 19279 || (v49 = 0.0, !parseLogP(v51, &v49)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"server ", 7);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"@", 1);
      v27 = strlen((const char *)(v7 + 156));
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v7 + 156, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": unexpected return: ", 21);
      v30 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__s, v30);
      close(*(_DWORD *)(v7 + 416));
      exit(1);
    }
    v22 = v49;
    if (v12 < *(_DWORD *)(v7 + 420))
    {
      *(_DWORD *)Array<unsigned int>::operator[]((int *)(v7 + 664), v12) = -1;
      Vocab::copy(*(_QWORD *)(v7 + 672) - 4 * *(int *)(v7 + 664), v6, v23);
      *(_DWORD *)(v7 + 688) = v5;
      *(float *)(v7 + 692) = v22;
    }
  }
  v6[v12] = v13;
  return v22;
}

void sub_1AE02E220(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

uint64_t LMClient::addUnkWords(LMClient *this)
{
  return 1;
}

sdapi::SimpleStringMapper *sdapi::SimpleStringMapper::SimpleStringMapper(sdapi::SimpleStringMapper *this, const quasar::PTree *a2)
{
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  uint64_t String;
  __int128 v8;
  std::string::size_type size;
  std::vector<std::wstring> *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  __int128 *v17;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::string *v36;
  std::string *v37;
  unint64_t v38;
  std::string v39;
  std::string v40;
  std::string *v41;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v4 = quasar::PTree::begin(a2);
  for (i = quasar::PTree::end(a2); v4 != i; v4 += 88)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      v40.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v6;
    }
    String = quasar::PTree::getString((quasar::PTree *)(v4 + 24));
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v8 = *(_OWORD *)String;
      v39.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v8;
    }
    v36 = 0;
    v37 = 0;
    v38 = 0;
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v39.__r_.__value_.__l.__size_;
    if (size)
    {
      v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v36, (__int128 *)&v39);
    }
    else
    {
      v11 = quasar::PTree::begin((quasar::PTree *)(v4 + 24));
      v12 = quasar::PTree::end((quasar::PTree *)(v4 + 24));
      while (v11 != v12)
      {
        v13 = quasar::PTree::getString((quasar::PTree *)(v11 + 24));
        if (*(char *)(v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        }
        else
        {
          v14 = *(_OWORD *)v13;
          *(_QWORD *)&v20 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)__p = v14;
        }
        v15 = v37;
        if ((unint64_t)v37 >= v38)
        {
          v17 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v36, (__int128 *)__p);
        }
        else
        {
          if (SBYTE7(v20) < 0)
          {
            std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v16 = *(_OWORD *)__p;
            v37->__r_.__value_.__r.__words[2] = v20;
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          v17 = (__int128 *)&v15[1];
        }
        v37 = (std::string *)v17;
        if (SBYTE7(v20) < 0)
          operator delete(__p[0]);
        v11 += 88;
      }
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(this, (unsigned __int8 *)&v40))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"text mapper entries must be unique", 34);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v41 = &v40;
    v10 = (std::vector<std::wstring> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (unsigned __int8 *)&v40, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 40);
    if (v10 != (std::vector<std::wstring> *)&v36)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v10, v36, (__int128 *)v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
    __p[0] = &v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1AE02E51C()
{
  JUMPOUT(0x1AE02E570);
}

void sub_1AE02E524(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 176) = v14;
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1AE02E550);
}

void sub_1AE02E54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  a9 = (void **)(v10 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

std::string *sdapi::SimpleStringMapper::map@<X0>(_QWORD *a1@<X0>, std::vector<std::string>::value_type *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  unsigned __int8 *v5;

  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v5)
    return (std::string *)std::vector<std::string>::vector(a3, 1uLL, a2);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, *((__int128 **)v5 + 5), *((__int128 **)v5 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 3));
}

void sdapi::SdapiG2P::overrideParams(sdapi::SdapiUtil *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t Child;
  __int128 v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t String;
  int v20;
  uint64_t v21;
  uint64_t v22;
  std::recursive_mutex *SharedMutex;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  std::string v42;
  std::string v43;
  char v44;

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  Child = quasar::PTree::getChild(a3, (__int128 *)__p);
  v41 = *(_DWORD *)Child;
  if (*(char *)(Child + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(Child + 8), *(_QWORD *)(Child + 16));
  }
  else
  {
    v7 = *(_OWORD *)(Child + 8);
    v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(Child + 24);
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
  }
  memset(&v43, 0, sizeof(v43));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v43, *(_QWORD *)(Child + 32), *(_QWORD *)(Child + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Child + 40) - *(_QWORD *)(Child + 32)) >> 3));
  v44 = *(_BYTE *)(Child + 56);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  v8 = quasar::PTree::begin((quasar::PTree *)&v41);
  for (i = quasar::PTree::end((quasar::PTree *)&v41); v8 != i; v8 += 88)
  {
    if (quasar::gLogLevel >= 4)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Overriding parameter: ", 22);
      v11 = strlen(a4);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a4, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      v14 = *(char *)(v8 + 23);
      if (v14 >= 0)
        v15 = v8;
      else
        v15 = *(_QWORD *)v8;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v8 + 23);
      else
        v16 = *(_QWORD *)(v8 + 8);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" = ", 3);
      String = quasar::PTree::getString((quasar::PTree *)(v8 + 24));
      v20 = *(char *)(String + 23);
      if (v20 >= 0)
        v21 = String;
      else
        v21 = *(_QWORD *)String;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(String + 23);
      else
        v22 = *(_QWORD *)(String + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    SDParamSetParam_GetHandle();
    switch(SDParamSetParam_GetType())
    {
      case 2:
        if ((quasar::PTree::getBool((quasar::PTree *)(v8 + 24)) & 1) != 0
          || (quasar::PTree::getBool((quasar::PTree *)(v8 + 24)) & 1) == 0)
        {
          SDParamSetParam_SetBoolValue();
        }
        else
        {
          quasar::PTree::getBool((quasar::PTree *)(v8 + 24));
          SDParamSetParam_SetBoolValue();
        }
        break;
      case 3:
        quasar::PTree::getInt<int>(v8 + 24);
        SDParamSetParam_SetIntValue();
        break;
      case 4:
        quasar::PTree::getDouble((quasar::PTree *)(v8 + 24));
        SDParamSetParam_SetDoubleValue();
        break;
      case 5:
        quasar::PTree::getString((quasar::PTree *)(v8 + 24));
        SDParamSetParam_SetStringValue();
        break;
      default:
        quasar::PTree::getString((quasar::PTree *)(v8 + 24));
        SDParamSetParam_SetEnumValue();
        break;
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&v41);
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1AE02E934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, __int128 __p, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27)
{
  const char *v27;
  uint64_t v28;
  const quasar::PTree::BadPath *exception_ptr;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;

  quasar::PTree::~PTree((quasar::PTree *)(v28 - 152));
  if (a2 == 1)
  {
    exception_ptr = (const quasar::PTree::BadPath *)__cxa_get_exception_ptr(a1);
    quasar::PTree::BadPath::BadPath((quasar::PTree::BadPath *)(v28 - 152), exception_ptr);
    __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Overrides JSON does not contain section for '", 45);
      v33 = strlen(v27);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v27, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"'.  Skipping.", 13);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
    quasar::PTree::BadPath::~BadPath((std::exception *)(v28 - 152));
    __cxa_end_catch();
    JUMPOUT(0x1AE02E90CLL);
  }
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

quasar::PTree::BadPath *quasar::PTree::BadPath::BadPath(quasar::PTree::BadPath *this, const quasar::PTree::BadPath *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)this = off_1E5D3B920;
  v3 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

void sub_1AE02EB08(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiG2P::SdapiG2P(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, uint64_t *a6, uint64_t *a7, __int128 *a8)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  sdapi::SdapiUtil *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::recursive_mutex *SharedMutex;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Child;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t String;
  __int128 v48;
  sdapi::SdapiUtil *Handle;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  sdapi::SdapiUtil *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  sdapi::SdapiUtil *v57;
  uint64_t v58;
  void **v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  std::string v64;
  std::string v65;
  std::string v66;
  void *v67[2];
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *__p;
  std::string v73;
  std::string v74;
  char v75;
  void *v76;
  std::string v77;
  _BYTE v78[32];
  _BYTE v79[64];
  std::exception v80[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;

  v13 = (std::__shared_weak_count *)a6[1];
  v98 = *a6;
  v99 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)a7[1];
  v96 = *a7;
  v97 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (sdapi::SdapiUtil *)quasar::G2P::G2P(a1, &v98, &v96, a8, 4);
  v20 = v97;
  if (v97)
  {
    v21 = (unint64_t *)&v97->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v99;
  if (v99)
  {
    v24 = (unint64_t *)&v99->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E5D34258;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(v19);
  std::recursive_mutex::lock(SharedMutex);
  if (quasar::gLogLevel >= 5)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Json config filename=", 21);
    v28 = *(char *)(a2 + 23);
    if (v28 >= 0)
      v29 = a2;
    else
      v29 = *(_QWORD *)a2;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a2 + 23);
    else
      v30 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v80);
  }
  quasar::PTree::PTree((quasar::PTree *)v79);
  if (*(char *)(a2 + 23) >= 0)
    v31 = (const char *)a2;
  else
    v31 = *(const char **)a2;
  if (access(v31, 0))
  {
    if (quasar::gLogLevel >= 4)
    {
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      memset(v80, 0, sizeof(v80));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Overrides JSON does not exist in datapack; falling back to default overrides.",
        77);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v80);
    }
    quasar::PTree::PTree((quasar::PTree *)v80);
    std::string::basic_string[abi:ne180100]<0>(&v76, "pronguess_paramset_name");
    std::string::basic_string[abi:ne180100]<0>(&__p, "non_acoustic_default");
    quasar::PTree::PTree(v67, &__p);
    quasar::PTree::putChild((uint64_t)v80, (uint64_t)&v76, (uint64_t)v67, 1);
    quasar::PTree::~PTree((quasar::PTree *)v67);
    if (v73.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v77.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v76);
    std::string::basic_string[abi:ne180100]<0>(&v76, "search_paramset_name");
    std::string::basic_string[abi:ne180100]<0>(&__p, "dictation_cs50");
    quasar::PTree::PTree(v67, &__p);
    quasar::PTree::putChild((uint64_t)v80, (uint64_t)&v76, (uint64_t)v67, 1);
    quasar::PTree::~PTree((quasar::PTree *)v67);
    if (v73.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v77.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v76);
    std::string::basic_string[abi:ne180100]<0>(&v76, "lattice_nbest_paramset_name");
    std::string::basic_string[abi:ne180100]<0>(&__p, "dictation");
    quasar::PTree::PTree(v67, &__p);
    quasar::PTree::putChild((uint64_t)v80, (uint64_t)&v76, (uint64_t)v67, 1);
    quasar::PTree::~PTree((quasar::PTree *)v67);
    if (v73.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (v77.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v76);
    std::string::basic_string[abi:ne180100]<0>(v67, "napg_params");
    quasar::PTree::putChild((uint64_t)v79, (uint64_t)v67, (uint64_t)v80, 1);
    if ((char)v68 < 0)
      operator delete(v67[0]);
    quasar::PTree::~PTree((quasar::PTree *)v80);
  }
  else
  {
    quasar::PTree::readJsonFromFile((uint64_t)v79, (__int128 *)a2);
  }
  v32 = SDParamSetHolder_NewFromFile();
  *(_QWORD *)(a1 + 304) = v32;
  if (v32 == -1)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Failed to load paramset holder", 30);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  if (quasar::gLogLevel >= 5)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Loaded paramset holder file:  ", 30);
    v34 = *(char *)(a3 + 23);
    if (v34 >= 0)
      v35 = a3;
    else
      v35 = *(_QWORD *)a3;
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(a3 + 23);
    else
      v36 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v80);
  }
  if (!quasar::filesystem::exists(a4))
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::operator+<char>();
    if ((v68 & 0x80u) == 0)
      v60 = v67;
    else
      v60 = (void **)v67[0];
    if ((v68 & 0x80u) == 0)
      v61 = v68;
    else
      v61 = (uint64_t)v67[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v60, v61);
    if ((char)v68 < 0)
      operator delete(v67[0]);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  v37 = SDVoc_New();
  *(_QWORD *)(a1 + 312) = v37;
  if (v37 == -1)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Could not laod Empty voc", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  if (!quasar::filesystem::exists(a5))
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::operator+<char>();
    if ((v68 & 0x80u) == 0)
      v62 = v67;
    else
      v62 = (void **)v67[0];
    if ((v68 & 0x80u) == 0)
      v63 = v68;
    else
      v63 = (uint64_t)v67[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v62, v63);
    if ((char)v68 < 0)
      operator delete(v67[0]);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  v38 = SDVoc_New();
  *(_QWORD *)(a1 + 320) = v38;
  if (v38 == -1)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Could not load PG voc", 21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  quasar::PTree::PTree((quasar::PTree *)&v76);
  std::string::basic_string[abi:ne180100]<0>(v80, "overrides");
  Child = quasar::PTree::getChild((uint64_t)v79, (__int128 *)v80);
  LODWORD(v76) = *(_DWORD *)Child;
  std::string::operator=(&v77, (const std::string *)(Child + 8));
  if (&v76 != (void **)Child)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v78, *(std::string **)(Child + 32), *(std::string **)(Child + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Child + 40) - *(_QWORD *)(Child + 32)) >> 3));
  v78[24] = *(_BYTE *)(Child + 56);
  if (SHIBYTE(v80[2].__vftable) < 0)
    operator delete(v80[0].__vftable);
  std::string::basic_string[abi:ne180100]<0>(v67, "title_format");
  v40 = quasar::PTree::getChild((uint64_t)&v76, (__int128 *)v67);
  LODWORD(v80[0].__vftable) = *(_DWORD *)v40;
  if (*(char *)(v40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v80[1], *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  }
  else
  {
    v41 = *(_OWORD *)(v40 + 8);
    v80[3] = *(std::exception *)(v40 + 24);
    *(_OWORD *)&v80[1].__vftable = v41;
  }
  v81 = 0uLL;
  *(_QWORD *)&v82 = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)&v81, *(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v40 + 40) - *(_QWORD *)(v40 + 32)) >> 3));
  BYTE8(v82) = *(_BYTE *)(v40 + 56);
  if ((char)v68 < 0)
    operator delete(v67[0]);
  std::allocate_shared[abi:ne180100]<sdapi::SimpleStringMapper,std::allocator<sdapi::SimpleStringMapper>,quasar::PTree &,void>((const quasar::PTree *)v80, v67);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 328, (__int128 *)v67);
  v42 = (std::__shared_weak_count *)v67[1];
  if (v67[1])
  {
    v43 = (unint64_t *)((char *)v67[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)v80);
  std::string::basic_string[abi:ne180100]<0>(v80, "napg_params");
  v45 = quasar::PTree::getChild((uint64_t)v79, (__int128 *)v80);
  LODWORD(__p) = *(_DWORD *)v45;
  if (*(char *)(v45 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
  }
  else
  {
    v46 = *(_OWORD *)(v45 + 8);
    v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 24);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v46;
  }
  memset(&v74, 0, sizeof(v74));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v74, *(_QWORD *)(v45 + 32), *(_QWORD *)(v45 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v45 + 40) - *(_QWORD *)(v45 + 32)) >> 3));
  v75 = *(_BYTE *)(v45 + 56);
  if (SHIBYTE(v80[2].__vftable) < 0)
    operator delete(v80[0].__vftable);
  std::string::basic_string[abi:ne180100]<0>(v80, "pronguess_paramset_name");
  String = quasar::PTree::getString((uint64_t)&__p, (__int128 *)v80);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v48 = *(_OWORD *)String;
    v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v48;
  }
  if (SHIBYTE(v80[2].__vftable) < 0)
    operator delete(v80[0].__vftable);
  Handle = (sdapi::SdapiUtil *)SDParamSet_GetHandle();
  if (!(_DWORD)Handle)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Pronguess paramset value is not valid.", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  v50 = v70;
  *(void **)(a1 + 344) = v67[0];
  *(_QWORD *)(a1 + 352) = v50;
  sdapi::SdapiG2P::overrideParams(Handle, (uint64_t)v67, (uint64_t)&v76, "pronguess_overrides");
  std::string::basic_string[abi:ne180100]<0>(v80, "search_paramset_name");
  v51 = quasar::PTree::getString((uint64_t)&__p, (__int128 *)v80);
  if (*(char *)(v51 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v51, *(_QWORD *)(v51 + 8));
  }
  else
  {
    v52 = *(_OWORD *)v51;
    v65.__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v52;
  }
  if (SHIBYTE(v80[2].__vftable) < 0)
    operator delete(v80[0].__vftable);
  v53 = (sdapi::SdapiUtil *)SDParamSet_GetHandle();
  if (!(_DWORD)v53)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Search paramset value is not valid.", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  v54 = v71;
  *(void **)(a1 + 360) = v67[0];
  *(_QWORD *)(a1 + 368) = v54;
  sdapi::SdapiG2P::overrideParams(v53, (uint64_t)v67, (uint64_t)&v76, "search_overrides");
  std::string::basic_string[abi:ne180100]<0>(v80, "lattice_nbest_paramset_name");
  v55 = quasar::PTree::getString((uint64_t)&__p, (__int128 *)v80);
  if (*(char *)(v55 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
  }
  else
  {
    v56 = *(_OWORD *)v55;
    v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(v55 + 16);
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v56;
  }
  if (SHIBYTE(v80[2].__vftable) < 0)
    operator delete(v80[0].__vftable);
  v57 = (sdapi::SdapiUtil *)SDParamSet_GetHandle();
  if (!(_DWORD)v57)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Lattice-nbest paramset value is not valid.", 42);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  v58 = v69;
  *(void **)(a1 + 376) = v67[0];
  *(_QWORD *)(a1 + 384) = v58;
  sdapi::SdapiG2P::overrideParams(v57, (uint64_t)v67, (uint64_t)&v76, "lattice_nbest_overrides");
  *(_QWORD *)(a1 + 400) = SDState_GetHandle();
  *(_QWORD *)(a1 + 408) = SDState_GetHandle();
  *(_QWORD *)(a1 + 392) = -1;
  SDState_GetAllowedWordCollations();
  SDState_GetAllowedWordCollations();
  if (SDApi_HasErrored())
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    memset(v80, 0, sizeof(v80));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Sdapi has errored. Dying.", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v80);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  quasar::PTree::~PTree((quasar::PTree *)&v76);
  quasar::PTree::~PTree((quasar::PTree *)v79);
  std::recursive_mutex::unlock(SharedMutex);
  return a1;
}

void sub_1AE02FB2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::exception a23)
{
  quasar::PTree::BadPath::~BadPath(&a23);
  __cxa_end_catch();
  JUMPOUT(0x1AE02FBE4);
}

void sub_1AE02FB40()
{
  JUMPOUT(0x1AE02FBF4);
}

void sub_1AE02FB48(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  const quasar::PTree::BadPath *exception_ptr;
  std::exception v69[52];

  if (a66 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    exception_ptr = (const quasar::PTree::BadPath *)__cxa_get_exception_ptr(a1);
    quasar::PTree::BadPath::BadPath((quasar::PTree::BadPath *)v69, exception_ptr);
    __cxa_begin_catch(a1);
    quasar::PTree::BadPath::~BadPath(v69);
    __cxa_end_catch();
    JUMPOUT(0x1AE02F080);
  }
  JUMPOUT(0x1AE02FBDCLL);
}

void sub_1AE02FB9C(_Unwind_Exception *a1)
{
  quasar::G2P *v1;
  std::recursive_mutex *v2;
  uint64_t v3;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v6 < 0)
    operator delete(v5);
  if (v8 < 0)
    operator delete(v7);
  if (v10 < 0)
    operator delete(v9);
  quasar::PTree::~PTree((quasar::PTree *)&v11);
  quasar::PTree::~PTree((quasar::PTree *)&v12);
  quasar::PTree::~PTree((quasar::PTree *)&v13);
  std::recursive_mutex::unlock(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  quasar::G2P::~G2P(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiG2P::~SdapiG2P(sdapi::SdapiG2P *this)
{
  std::recursive_mutex *SharedMutex;

  *(_QWORD *)this = &off_1E5D34258;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  SDVoc_Delete();
  SDVoc_Delete();
  SDParamSetHolder_Delete();
  std::recursive_mutex::unlock(SharedMutex);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  quasar::G2P::~G2P(this);
}

{
  sdapi::SdapiG2P::~SdapiG2P(this);
  JUMPOUT(0x1AF44D190);
}

void sdapi::SdapiG2P::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::recursive_mutex *SharedMutex;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::vector<char>::pointer p_p;
  uint64_t value_high;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  unsigned int HumanReadableProns;
  const char *begin;
  char *v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  std::vector<std::string>::pointer p_s;
  uint64_t size;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  std::vector<std::string>::pointer v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  std::string *v45;
  unint64_t v46;
  std::vector<char> __p;
  char v48;
  std::string v49;
  void *v50[2];
  void *v51;
  std::string __s;
  int v53;
  std::string *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE __v[48];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::vector<std::string> v72;

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *(_QWORD **)(a1 + 328);
  if (v7)
    sdapi::SimpleStringMapper::map(v7, (std::vector<std::string>::value_type *)a2, &v72);
  else
    std::vector<std::string>::vector(&v72, 1uLL, (const std::vector<std::string>::value_type *)a2);
  if (quasar::gLogLevel >= 5)
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Generating pronunciations for orthography=", 42);
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", spoken-form=", 14);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)", ";
    __s.__r_.__value_.__l.__size_ = 2;
    quasar::join<std::vector<std::string>>((uint64_t *)&v72, (uint64_t *)&__s);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
      p_p = (std::vector<char>::pointer)&__p;
    else
      p_p = __p.__begin_;
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
      value_high = HIBYTE(__p.__end_cap_.__value_);
    else
      value_high = (uint64_t)__p.__end_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, value_high);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v72.__end_ - (char *)v72.__begin_) >> 3) >= 4)
    v16 = 4;
  else
    v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72.__end_ - (char *)v72.__begin_) >> 3);
  if (v16)
  {
    v17 = 0;
    v46 = v16;
    do
    {
      v55 = *(_QWORD *)(a1 + 312);
      v56 = SDWord_New();
      v54 = 0;
      v18 = &v72.__begin_[v17];
      if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
        v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
      v54 = v18;
      v53 = 0;
      if (SDRecog_GuessPronsNonAcoustic() == 1)
      {
        HumanReadableProns = SDWord_GetHumanReadableProns();
        std::vector<char>::vector(&__p, HumanReadableProns);
        SDWord_GetHumanReadableProns();
        begin = __p.__begin_;
        std::string::basic_string[abi:ne180100]<0>(&__s, __p.__begin_);
        v50[0] = 0;
        v50[1] = 0;
        v51 = 0;
        while (1)
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__s.__r_.__value_.__l.__size_)
            {
LABEL_56:
              std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(a3, a3[1], (uint64_t)v50[0], (uint64_t)v50[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v50[1] - (char *)v50[0]) >> 3));
              *(_QWORD *)__v = v50;
              std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              v16 = v46;
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              if (__p.__begin_)
              {
                __p.__end_ = __p.__begin_;
                operator delete(__p.__begin_);
              }
              break;
            }
            std::string::__init_copy_ctor_external(&v49, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
              goto LABEL_56;
            v49 = __s;
          }
          *(_DWORD *)__v = 1;
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)&__v[8], v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
          else
            *(std::string *)&__v[8] = v49;
          *(_DWORD *)&__v[32] = 0;
          v21 = (char *)v50[1];
          if (v50[1] >= v51)
          {
            v24 = (void *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>((uint64_t *)v50, (uint64_t)__v);
          }
          else
          {
            *(_DWORD *)v50[1] = *(_DWORD *)__v;
            v22 = (std::string *)(v21 + 8);
            if ((__v[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)&__v[8], *(std::string::size_type *)&__v[16]);
            }
            else
            {
              v23 = *(_OWORD *)&__v[8];
              *((_QWORD *)v21 + 3) = *(_QWORD *)&__v[24];
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
            }
            *((_DWORD *)v21 + 8) = *(_DWORD *)&__v[32];
            v24 = v21 + 40;
          }
          v50[1] = v24;
          if ((__v[31] & 0x80000000) != 0)
            operator delete(*(void **)&__v[8]);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (quasar::gLogLevel >= 5)
          {
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            memset(__v, 0, sizeof(__v));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_s = &__s;
            else
              p_s = (std::vector<std::string>::pointer)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            else
              size = __s.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)p_s, size);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
          }
          begin += strlen(begin) + 1;
          MEMORY[0x1AF44C914](&__s, begin);
        }
      }
      SDWord_DeleteList();
      ++v17;
    }
    while (v17 != v16);
  }
  v28 = *a3;
  v27 = a3[1];
  if (*a3 != v27)
  {
    memset(&__s, 0, sizeof(__s));
    do
    {
      quasar::PronChoice::PronChoice(&__p, v28);
      if (quasar::gLogLevel >= 5)
      {
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Orthography=", 12);
        v30 = *(char *)(a2 + 23);
        if (v30 >= 0)
          v31 = a2;
        else
          v31 = *(_QWORD *)a2;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(a2 + 23);
        else
          v32 = *(_QWORD *)(a2 + 8);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", Prons=", 8);
        quasar::PronChoice::toString((uint64_t *)v50, (quasar::PronChoice *)&__p);
        if (SHIBYTE(v51) >= 0)
          v35 = v50;
        else
          v35 = (void **)v50[0];
        if (SHIBYTE(v51) >= 0)
          v36 = HIBYTE(v51);
        else
          v36 = (uint64_t)v50[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        if (SHIBYTE(v51) < 0)
          operator delete(v50[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
      }
      quasar::PronChoice::toString((uint64_t *)v50, (quasar::PronChoice *)&__p);
      v37 = (std::vector<std::string>::pointer)__s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__l.__size_ >= __s.__r_.__value_.__r.__words[2])
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3) > v40)
          v40 = 0x5555555555555556
              * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        *(_QWORD *)&__v[32] = (char *)&__s.__r_.__value_.__l + 16;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__s.__r_.__value_.__r.__words[2], v41);
        else
          v42 = 0;
        v43 = &v42[24 * v39];
        *(_QWORD *)__v = v42;
        *(_QWORD *)&__v[8] = v43;
        *(_QWORD *)&__v[24] = &v42[24 * v41];
        v44 = *(_OWORD *)v50;
        *((_QWORD *)v43 + 2) = v51;
        *(_OWORD *)v43 = v44;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)&__v[16] = v43 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__s, (std::__split_buffer<std::string> *)__v);
        v45 = (std::string *)__s.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
        if (SHIBYTE(v51) < 0)
          operator delete(v50[0]);
      }
      else
      {
        v38 = *(_OWORD *)v50;
        *(_QWORD *)(__s.__r_.__value_.__l.__size_ + 16) = v51;
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)&v37[1];
      }
      if (v48 < 0)
        operator delete(__p.__end_);
      v28 += 40;
    }
    while (v28 != v27);
    (*(void (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, &__s);
    *(_QWORD *)__v = &__s;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  if (SDApi_HasErrored())
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Sdapi has errored. Dying.", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  *(_QWORD *)__v = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1AE0303E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__pa,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,void *a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,std::__split_buffer<std::wstring> *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::recursive_mutex *v56;
  uint64_t v57;

  if (SHIBYTE(a33) < 0)
    operator delete(__pa);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a56);
  __pa = (void *)(v57 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = a25;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::recursive_mutex::unlock(v56);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiG2P::getG2PVersion(sdapi::SdapiG2P *this)
{
  return 1;
}

void sdapi::SdapiG2P::batchDoG2P()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = 3 * __n;
    v8 = &end[__n];
    v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_1AE0306C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<sdapi::SimpleStringMapper,std::allocator<sdapi::SimpleStringMapper>,quasar::PTree &,void>@<X0>(const quasar::PTree *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__shared_ptr_emplace[abi:ne180100]<quasar::PTree &,std::allocator<sdapi::SimpleStringMapper>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE030724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__shared_ptr_emplace[abi:ne180100]<quasar::PTree &,std::allocator<sdapi::SimpleStringMapper>,0>(_QWORD *a1, const quasar::PTree *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42368;
  a1[1] = 0;
  sdapi::SimpleStringMapper::SimpleStringMapper((sdapi::SimpleStringMapper *)(a1 + 3), a2);
  return a1;
}

void sub_1AE030770(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a1 + 24);
}

uint64_t quasar::SeevaBatchDecoder::SeevaBatchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D366D8;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_QWORD *)(v3 + 528) = &unk_1E5D33A48;
  *(_QWORD *)(v3 + 536) = 0x203F000000;
  *(_QWORD *)(v3 + 544) = 0x200000002;
  *(_BYTE *)(v3 + 552) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 560), "/cpu:0");
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_WORD *)(a1 + 608) = 1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 612) = 0;
  *(_QWORD *)(a1 + 628) = 0;
  *(_QWORD *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 633) = 0;
  kaldi::quasar::SeevaInferenceTensorNames::SeevaInferenceTensorNames((kaldi::quasar::SeevaInferenceTensorNames *)(a1 + 672));
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 992) = 1065353216;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1AE0308C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  v3 = v2;
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v3);
  if (*(char *)(v1 + 527) < 0)
    operator delete(*(void **)(v1 + 504));
  if (*(char *)(v1 + 495) < 0)
    operator delete(*(void **)(v1 + 472));
  if (*(char *)(v1 + 471) < 0)
    operator delete(*(void **)(v1 + 448));
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::SeevaBatchDecoder::~SeevaBatchDecoder(quasar::SeevaBatchDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E5D366D8;
  v2 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 960);
  if (*((char *)this + 951) < 0)
    operator delete(*((void **)this + 116));
  if (*((char *)this + 927) < 0)
    operator delete(*((void **)this + 113));
  if (*((char *)this + 903) < 0)
    operator delete(*((void **)this + 110));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  v3 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v6)
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 816, v6);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 101, 0);
  *((_QWORD *)this + 84) = &unk_1E5D33DD0;
  if (*((char *)this + 799) < 0)
    operator delete(*((void **)this + 97));
  if (*((char *)this + 775) < 0)
    operator delete(*((void **)this + 94));
  if (*((char *)this + 751) < 0)
    operator delete(*((void **)this + 91));
  if (*((char *)this + 727) < 0)
    operator delete(*((void **)this + 88));
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  *((_QWORD *)this + 66) = &unk_1E5D33A48;
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  if (*((char *)this + 583) < 0)
    operator delete(*((void **)this + 70));
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::SeevaBatchDecoder::~SeevaBatchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::SeevaBatchDecoder::registerParams(quasar::SeevaBatchDecoder *this, quasar::SystemConfig *a2)
{
  void **v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  void *__p[2];
  char v9;
  std::string v10;

  kaldi::quasar::SeevaInferenceConfig::Register((uint64_t)this + 528, (uint64_t)a2);
  kaldi::quasar::SeevaInferenceTensorNames::Register((uint64_t)this + 672, (uint64_t)a2);
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v10 = *(std::string *)((char *)a2 + 8);
  v4 = (void **)((char *)this + 928);
  if (*((char *)this + 951) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 118) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&v10, "seeva-batch");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 143, 0, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva inference graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 448, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the vocab file that describes model output token");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 472, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "vocab-is-binary");
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab file is binary");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 496, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "model-format-version");
  std::string::basic_string[abi:ne180100]<0>(__p, "model format version");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 500, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "feature transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 504, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "lm-rescore-chain");
  std::string::basic_string[abi:ne180100]<0>(__p, "the LM rescore decoder chain");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 848, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "use-second-rescore");
  std::string::basic_string[abi:ne180100]<0>(__p, "use the LM rescoring decoder");
  v5 = (char *)this + 873;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 873, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "remove-unk");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove the unknown word during rescoring");
  v6 = (char *)this + 872;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 872, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "unk-word");
  std::string::basic_string[abi:ne180100]<0>(__p, "map the OOV word to this word");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 880, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "e2e-word-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "map the E2E word to Quasar");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 904, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "lm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "lm weight for LM rescoring");
  v7 = (_DWORD *)((char *)this + 952);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)v7, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *v6 = 0;
  *v7 = 1045220557;
  *v5 = 0;
}

void sub_1AE0310AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaInferenceTensorNames::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "source-input-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "source input tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "source-catf-input-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "source catf input tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "length-pen-wt-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "length penalty weight tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 56, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-list-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "nbest list tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-score-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "nbest score tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 104, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AE031328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SeevaBatchDecoder::finishInit(quasar::SeevaBatchDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  char *extbuf;
  kaldi::quasar::Vocab *v5;
  kaldi::nnet1::Nnet *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::locale::id *v21;
  const std::locale::facet *v22;
  unsigned __int8 v23;
  _QWORD *v24;
  unint64_t v25;
  std::vector<std::wstring> *v26;
  kaldi::quasar::ComputeEngineConfigItf *v27;
  std::vector<std::string> v29;
  std::locale v30;
  std::string *v31;
  uint64_t v32;
  std::string v33;
  kaldi::quasar::ComputeEngineConfigItf *v34;
  std::locale::__imp *locale;
  std::vector<std::string> *v36;
  std::fstream __p;
  void (__cdecl **v38)(std::fstream *__hidden);
  std::fstream v39;
  _QWORD v40[21];

  v40[19] = *MEMORY[0x1E0C80C00];
  std::fstream::basic_fstream(&v39, (const std::string *)((char *)this + 472), 8u);
  v2 = operator new();
  kaldi::quasar::Vocab::Vocab(v2, &v39, *((unsigned __int8 *)this + 496), 1);
  __p.__sb_.__extbuf_ = 0;
  v3 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v2;
  if (v3)
  {
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 816, v3);
    extbuf = __p.__sb_.__extbuf_;
    __p.__sb_.__extbuf_ = 0;
    if (extbuf)
      std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)extbuf);
  }
  v5 = (kaldi::quasar::Vocab *)*((_QWORD *)this + 102);
  kaldi::quasar::Vocab::EosWord(v5, (std::string *)&__p);
  *((_DWORD *)this + 200) = kaldi::quasar::Vocab::GetWordId((uint64_t)v5, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0)
    operator delete(__p.__sb_.__extbuf_);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v39 + *((_QWORD *)v39.__sb_.__extbuf_ - 3)), *(_DWORD *)&v39.__sb_.__extbuf_min_[*((_QWORD *)v39.__sb_.__extbuf_ - 3) + 8] | 4);
  if ((*((char *)this + 527) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 527))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (*((_QWORD *)this + 64))
  {
LABEL_12:
    v6 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v6);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 101, v6);
    kaldi::nnet1::Nnet::Read(*((_QWORD *)this + 101), (uint64_t)this + 504);
  }
LABEL_13:
  kaldi::quasar::CreateComputeEngineConfig((uint64_t)this + 448, (uint64_t *)&v34);
  kaldi::quasar::SeevaInferenceConfig::PassToCEConfig((uint64_t)this + 528, v34);
  (*(void (**)(std::fstream *__return_ptr))(*(_QWORD *)v34 + 24))(&__p);
  v7 = __p.__sb_.__extbuf_;
  __p.__sb_.__extbuf_ = 0;
  v8 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p.__sb_.__extbuf_;
    __p.__sb_.__extbuf_ = 0;
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *((_QWORD *)this + 103);
  memset(&__p, 0, 24);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::fstream *))(*(_QWORD *)v10 + 56))(&v33, v10, &__p);
  v11 = v33.__r_.__value_.__r.__words[0];
  v33.__r_.__value_.__r.__words[0] = 0;
  v12 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v33.__r_.__value_.__r.__words[0];
    v33.__r_.__value_.__r.__words[0] = 0;
    if (v13)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v13 + 8))(v13);
  }
  if (__p.__sb_.__extbuf_)
  {
    __p.__sb_.__extbufnext_ = __p.__sb_.__extbuf_;
    operator delete(__p.__sb_.__extbuf_);
  }
  (*(void (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 104) + 104))(*((_QWORD *)this + 104), 0, *((float *)this + 134));
  if (*((char *)this + 607) < 0)
  {
    if (!*((_QWORD *)this + 74))
      goto LABEL_30;
  }
  else if (!*((_BYTE *)this + 607))
  {
    goto LABEL_30;
  }
  memset(&__p, 0, 24);
  kaldi::SplitStringToIntegers<int>((uint64_t)this + 584, ",", 1, (std::vector<unsigned int> *)&__p);
  (*(void (**)(std::string *__return_ptr, _QWORD, std::fstream *, _QWORD))(**((_QWORD **)this + 103) + 16))(&v33, *((_QWORD *)this + 103), &__p, 0);
  v14 = v33.__r_.__value_.__r.__words[0];
  v33.__r_.__value_.__r.__words[0] = 0;
  v15 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v33.__r_.__value_.__r.__words[0];
    v33.__r_.__value_.__r.__words[0] = 0;
    if (v16)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v16 + 8))(v16);
  }
  if (__p.__sb_.__extbuf_)
  {
    __p.__sb_.__extbufnext_ = __p.__sb_.__extbuf_;
    operator delete(__p.__sb_.__extbuf_);
  }
LABEL_30:
  if (*((char *)this + 871) < 0)
  {
    if (!*((_QWORD *)this + 107))
      goto LABEL_36;
  }
  else if (!*((_BYTE *)this + 871))
  {
    goto LABEL_36;
  }
  v17 = operator new();
  quasar::FstLmScorer::FstLmScorer(v17, (uint64_t)this + 928);
  v18 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_36:
  if (*((char *)this + 927) < 0)
    v19 = *((_QWORD *)this + 114);
  else
    v19 = *((unsigned __int8 *)this + 927);
  if (v19)
  {
    std::fstream::basic_fstream(&__p, (const std::string *)((char *)this + 904), 8u);
    memset(&v33, 0, sizeof(v33));
    v20 = (char *)this + 960;
    v21 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p.__sb_.__extbuf_ - 3)));
      v22 = std::locale::use_facet(&v30, v21);
      v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v30);
      v24 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)&v33, v23);
      if ((*((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 32) & 5) != 0)
        break;
      v30.__locale_ = 0;
      v31 = 0;
      v32 = 0;
      kaldi::SplitStringToVector(&v33, " \t", 1, (uint64_t)&v30);
      v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30.__locale_) >> 3);
      if (v25 >= 2)
      {
        std::vector<std::string>::vector(&v29, v25 - 1);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,0>((std::string *)v30.__locale_ + 1, v31, v29.__begin_);
        locale = v30.__locale_;
        v26 = (std::vector<std::wstring> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v20, (unsigned __int8 *)v30.__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&locale)+ 40);
        if (v26 != (std::vector<std::wstring> *)&v29)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v26, v29.__begin_, (__int128 *)v29.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v29.__end_ - (char *)v29.__begin_) >> 3));
        v36 = &v29;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
      }
      v29.__begin_ = (std::vector<std::string>::pointer)&v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((_QWORD *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    MEMORY[0x1AF44CA70](__p.__sb_.__extbuf_min_);
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v38);
  }
  v27 = v34;
  v34 = 0;
  if (v27)
    (*(void (**)(kaldi::quasar::ComputeEngineConfigItf *))(*(_QWORD *)v27 + 8))(v27);
  MEMORY[0x1AF44CA70](v39.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v40);
}

void sub_1AE031954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  std::fstream::~fstream((void (__cdecl ***)(std::fstream *__hidden))&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaBatchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  kaldi::OnlineFeatureMatrix *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  __int128 *v38;
  std::string::size_type v39;
  __int128 v40;
  __int128 *v41;
  std::string::size_type v42;
  __int128 v43;
  uint64_t p_size;
  unint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  float *v57;
  float *v58;
  std::string *j;
  std::string *v60;
  unsigned __int8 *v61;
  std::__shared_weak_count *size;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 *v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  float *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int v82;
  uint64_t v83;
  unsigned __int8 v84;
  int v85;
  void *__dst[3];
  uint64_t v87[3];
  void *__p;
  _QWORD *v89;
  uint64_t v90;
  float *v91;
  float *v92;
  uint64_t v93;
  std::string *v94;
  std::string *v95;
  uint64_t v96;
  void *v97;
  _BYTE *v98;
  uint64_t v99;
  void **v100;
  void **v101;
  uint64_t v102;
  std::string **v103;
  uint64_t v104;
  uint64_t v105;
  std::string *v106;
  std::string *v107;
  std::string *v108;
  int32x2_t v109;
  __int128 v110;
  __int128 v111;
  char v112;
  int v113[4];
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  unsigned int v118;
  kaldi::OnlineFeatureMatrix *v119;
  std::__shared_weak_count *v120;
  std::string v121[2];
  __int128 v122[14];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v6 = *(kaldi::OnlineFeatureMatrix **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v119 = *(kaldi::OnlineFeatureMatrix **)a2;
  v120 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = 0;
  v118 = *((_DWORD *)v6 + 6);
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v6, v9, 1))
  {
    kaldi::OnlineFeatureMatrix::GetFrame(v6, v9, (uint64_t *)v121);
    v109.i32[0] = 0;
    std::deque<std::vector<float>>::emplace_back<int const&,int>(&v115, (int *)&v118, (int *)&v109);
    v10 = (int)v118;
    if (v118)
    {
      v11 = 0;
      v12 = 0;
      v13 = v121[0].__r_.__value_.__r.__words[0];
      v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v115 + 1)
                                  + 8 * ((*((_QWORD *)&v117 + 1) + (_QWORD)v117 - 1) / 0xAAuLL))
                      + 24 * ((*((_QWORD *)&v117 + 1) + (_QWORD)v117 - 1) % 0xAAuLL));
      do
      {
        *(_DWORD *)(v14 + 4 * v12++) = *(_DWORD *)(v13 + (v11 >> 30));
        v11 += 0x100000000;
      }
      while (v10 != v12);
    }
    v9 = (v9 + 1);
  }
  v15 = v9;
  if ((int)v9 < *(_DWORD *)(a1 + 540))
  {
    LODWORD(v15) = v9;
    do
    {
      std::deque<std::vector<float>>::push_back(&v115, *(_QWORD *)(*((_QWORD *)&v115 + 1) + 8 * ((*((_QWORD *)&v117 + 1) + (_QWORD)v117 - 1) / 0xAAuLL))+ 24 * ((*((_QWORD *)&v117 + 1) + (_QWORD)v117 - 1) % 0xAAuLL));
      v15 = (v15 + 1);
    }
    while ((int)v15 < *(_DWORD *)(a1 + 540));
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v113, v15, v118, 0, 0);
  v16 = (void **)*((_QWORD *)&v115 + 1);
  if ((_DWORD)v15)
  {
    v17 = 0;
    v18 = v118;
    v19 = v117;
    v20 = *(_QWORD *)v113;
    if (v118 <= 1)
      v21 = 1;
    else
      v21 = v118;
    v22 = v114;
    do
    {
      if (v18)
      {
        v23 = 0;
        v24 = 0;
        v25 = *((_QWORD *)v16[(v19 + v17) / 0xAAuLL] + 3 * ((v19 + v17) % 0xAAuLL));
        do
        {
          *(_DWORD *)(v20 + 4 * v22 * (int)v17 + (v23 >> 30)) = *(_DWORD *)(v25 + 4 * v24++);
          v23 += 0x100000000;
        }
        while (v21 != v24);
      }
      ++v17;
    }
    while (v17 != v15);
  }
  v26 = (void **)v116;
  if ((void **)v116 == v16)
  {
    v26 = v16;
  }
  else
  {
    v27 = &v16[(unint64_t)v117 / 0xAA];
    v28 = (unint64_t)*v27;
    v29 = (unint64_t)*v27 + 24 * ((unint64_t)v117 % 0xAA);
    v30 = (unint64_t)v16[(*((_QWORD *)&v117 + 1) + (_QWORD)v117) / 0xAAuLL]
        + 24 * ((*((_QWORD *)&v117 + 1) + (_QWORD)v117) % 0xAAuLL);
    if (v29 != v30)
    {
      do
      {
        v31 = *(void **)v29;
        if (*(_QWORD *)v29)
        {
          *(_QWORD *)(v29 + 8) = v31;
          operator delete(v31);
          v28 = (unint64_t)*v27;
        }
        v29 += 24;
        if (v29 - v28 == 4080)
        {
          v32 = (unint64_t)v27[1];
          ++v27;
          v28 = v32;
          v29 = v32;
        }
      }
      while (v29 != v30);
      v16 = (void **)*((_QWORD *)&v115 + 1);
      v26 = (void **)v116;
    }
  }
  *((_QWORD *)&v117 + 1) = 0;
  v33 = (char *)v26 - (char *)v16;
  if ((unint64_t)((char *)v26 - (char *)v16) >= 0x11)
  {
    do
    {
      operator delete(*v16);
      v16 = (void **)(*((_QWORD *)&v115 + 1) + 8);
      *((_QWORD *)&v115 + 1) = v16;
      v33 = v116 - (_QWORD)v16;
    }
    while ((_QWORD)v116 - (_QWORD)v16 > 0x10uLL);
  }
  if (v33 >> 3 == 1)
  {
    v34 = 85;
  }
  else
  {
    if (v33 >> 3 != 2)
      goto LABEL_38;
    v34 = 170;
  }
  *(_QWORD *)&v117 = v34;
LABEL_38:
  v83 = a1;
  if (*(_QWORD *)(a1 + 808))
  {
    memset(&v121[0].__r_.__value_.__r.__words[1], 0, 33);
    v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D34170;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)v121, v113);
    v111 = 0u;
    v110 = 0u;
    v109 = (int32x2_t)&unk_1E5D34170;
    v112 = 0;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 808), (uint64_t)v121, &v109, -1, 0);
    (*(void (**)(std::string **__return_ptr, _QWORD, int32x2_t *))(**(_QWORD **)(a1 + 824) + 32))(&v106, *(_QWORD *)(a1 + 824), &v109);
    v35 = v106;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v109);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v121);
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, int *))(**(_QWORD **)(a1 + 824) + 40))(v121, *(_QWORD *)(a1 + 824), v113);
    v35 = (std::string *)v121[0].__r_.__value_.__r.__words[0];
  }
  v109 = 0;
  v110 = 0uLL;
  v36 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, (__int128 *)(v83 + 680), (uint64_t)v35);
  v37 = v36;
  *(_QWORD *)&v110 = v36;
  if (*(float *)(v83 + 536) > 0.0)
  {
    v38 = (__int128 *)(v83 + 728);
    v39 = *(_QWORD *)(v83 + 832);
    if ((unint64_t)v36 >= *((_QWORD *)&v110 + 1))
    {
      v37 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, v38, *(_QWORD *)(v83 + 832));
    }
    else
    {
      if (*(char *)(v83 + 751) < 0)
      {
        std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)(v83 + 728), *(_QWORD *)(v83 + 736));
      }
      else
      {
        v40 = *v38;
        v36->__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 744);
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v40;
      }
      v37[1].__r_.__value_.__r.__words[0] = v39;
      v37 = (std::string *)((char *)v37 + 32);
    }
    *(_QWORD *)&v110 = v37;
  }
  if ((*(char *)(v83 + 607) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v83 + 607))
      goto LABEL_61;
LABEL_54:
    v41 = (__int128 *)(v83 + 704);
    v42 = *(_QWORD *)(v83 + 840);
    if ((unint64_t)v37 >= *((_QWORD *)&v110 + 1))
    {
      p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, v41, *(_QWORD *)(v83 + 840));
    }
    else
    {
      if (*(char *)(v83 + 727) < 0)
      {
        std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)(v83 + 704), *(_QWORD *)(v83 + 712));
      }
      else
      {
        v43 = *v41;
        v37->__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 720);
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v43;
      }
      v37[1].__r_.__value_.__r.__words[0] = v42;
      p_size = (uint64_t)&v37[1].__r_.__value_.__l.__size_;
    }
    *(_QWORD *)&v110 = p_size;
    goto LABEL_61;
  }
  if (*(_QWORD *)(v83 + 592))
    goto LABEL_54;
LABEL_61:
  if (*(char *)(v83 + 775) < 0)
    std::string::__init_copy_ctor_external(v121, *(const std::string::value_type **)(v83 + 752), *(_QWORD *)(v83 + 760));
  else
    v121[0] = *(std::string *)(v83 + 752);
  if (*(char *)(v83 + 799) < 0)
    std::string::__init_copy_ctor_external(&v121[1], *(const std::string::value_type **)(v83 + 776), *(_QWORD *)(v83 + 784));
  else
    v121[1] = *(std::string *)(v83 + 776);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v103 = &v106;
  LOBYTE(v104) = 0;
  v106 = (std::string *)operator new(0x30uLL);
  v107 = v106;
  v108 = v106 + 2;
  v45 = 0;
  v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (__int128 *)v121, v122, v106);
  do
  {
    if (SHIBYTE(v121[v45 / 0x18 + 1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121[v45 / 0x18 + 1].__r_.__value_.__l.__data_);
    v45 -= 24;
  }
  while (v45 != -48);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v46 = *(_QWORD *)(v83 + 824);
  memset(v121, 0, 24);
  (*(void (**)(uint64_t, int32x2_t *, std::string **, std::string *, std::string ***))(*(_QWORD *)v46 + 128))(v46, &v109, &v106, v121, &v103);
  v100 = (void **)v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  v82 = (*(uint64_t (**)(std::string *, _QWORD))((*v103)->__r_.__value_.__r.__words[0] + 160))(*v103, 0);
  v47 = (*(uint64_t (**)(std::string *, uint64_t))((*v103)->__r_.__value_.__r.__words[0] + 160))(*v103, 1);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  (*(void (**)(std::string *, void ***))((*v103)->__r_.__value_.__r.__words[0] + 48))(*v103, &v100);
  v98 = 0;
  v99 = 0;
  v97 = 0;
  (*(void (**)(std::string *, void **))(v103[1]->__r_.__value_.__r.__words[0] + 56))(v103[1], &v97);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  if (*(char *)(v83 + 871) < 0)
  {
    if (*(_QWORD *)(v83 + 856))
      goto LABEL_73;
  }
  else if (*(_BYTE *)(v83 + 871))
  {
LABEL_73:
    __p = 0;
    v89 = 0;
    v90 = 0;
    memset(v87, 0, sizeof(v87));
    std::vector<float>::vector(__dst, v47);
    v48 = (char *)v97 + 4 * v47 * (v82 - 1);
    if (v98 != v48)
      memmove(__dst[0], v48, v98 - v48);
    if (v47 >= 1)
    {
      v49 = 0;
      for (i = 0; i != v47; ++i)
      {
        kaldi::quasar::GetKthNBest(&v100, *(_DWORD *)(v83 + 800), v82, v47, i, &v121[0].__r_.__value_.__l.__data_);
        std::vector<std::vector<int>>::emplace_back<std::vector<int>>((uint64_t *)&__p, (uint64_t)v121);
        if (v121[0].__r_.__value_.__r.__words[0])
        {
          v121[0].__r_.__value_.__l.__size_ = v121[0].__r_.__value_.__r.__words[0];
          operator delete(v121[0].__r_.__value_.__l.__data_);
        }
        v52 = *(v89 - 3);
        v51 = *(v89 - 2);
        v85 = 0;
        std::vector<float>::vector(v121, (v51 - v52) >> 2, &v85);
        if (v51 != v52)
        {
          v53 = (_DWORD *)v121[0].__r_.__value_.__r.__words[0];
          if ((unint64_t)((v51 - v52) >> 2) <= 1)
            v54 = 1;
          else
            v54 = (v51 - v52) >> 2;
          v55 = (char *)v97 + v49;
          do
          {
            *v53++ = *v55;
            v55 += v47;
            --v54;
          }
          while (v54);
        }
        std::vector<std::vector<float>>::emplace_back<std::vector<float>>(v87, (uint64_t)v121);
        if (v121[0].__r_.__value_.__r.__words[0])
        {
          v121[0].__r_.__value_.__l.__size_ = v121[0].__r_.__value_.__r.__words[0];
          operator delete(v121[0].__r_.__value_.__l.__data_);
        }
        v49 += 4;
      }
    }
    quasar::RescoreWithLMs(*(_QWORD *)(v83 + 1000), *(kaldi::quasar::Vocab **)(v83 + 816), (_QWORD *)(v83 + 960), (__int128 *)(v83 + 848), (__int128 *)(v83 + 880), *(_BYTE *)(v83 + 872), *(_BYTE *)(v83 + 873), *(_DWORD *)(v83 + 500), *(float *)(v83 + 952), (uint64_t *)&__p, v87, (float **)__dst, (uint64_t *)&v94, (uint64_t)&v91);
    if (quasar::gLogLevel >= 5)
    {
      memset(v122, 0, sizeof(v122));
      memset(v121, 0, sizeof(v121));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v121);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"LM-SCORE-DEBUG: select beam ", 28);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v121);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
    v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
    goto LABEL_107;
  }
  kaldi::quasar::GetKthNBest(&v100, *(_DWORD *)(v83 + 800), v82, v47, 0, &v121[0].__r_.__value_.__l.__data_);
  __p = 0;
  v89 = 0;
  v90 = 0;
  LODWORD(v87[0]) = 0;
  std::vector<float>::resize((uint64_t)&__p, (uint64_t)(v121[0].__r_.__value_.__l.__size_ - v121[0].__r_.__value_.__r.__words[0]) >> 2, v87);
  if (v121[0].__r_.__value_.__l.__size_ != v121[0].__r_.__value_.__r.__words[0])
  {
    v56 = (uint64_t)(v121[0].__r_.__value_.__l.__size_ - v121[0].__r_.__value_.__r.__words[0]) >> 2;
    v57 = (float *)v97;
    v58 = (float *)__p;
    if (v56 <= 1)
      v56 = 1;
    do
    {
      *v58++ = -*v57;
      v57 += v47;
      --v56;
    }
    while (v56);
  }
  quasar::printOneBest(*(kaldi::quasar::Vocab **)(v83 + 816), *(_DWORD *)(v83 + 500), (uint64_t *)v121, (uint64_t *)&__p, (uint64_t *)&v94, (uint64_t)&v91);
  if (*(_QWORD *)(v83 + 984))
  {
    v60 = v94;
    for (j = v95; v60 != j; ++v60)
    {
      v61 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v83 + 960), (unsigned __int8 *)v60);
      if (v61)
        std::string::operator=(v60, *((const std::string **)v61 + 5));
    }
  }
  if (__p)
  {
    v89 = __p;
    operator delete(__p);
  }
  if (v121[0].__r_.__value_.__r.__words[0])
  {
    v121[0].__r_.__value_.__l.__size_ = v121[0].__r_.__value_.__r.__words[0];
    operator delete(v121[0].__r_.__value_.__l.__data_);
  }
LABEL_107:
  LODWORD(__p) = 1;
  std::allocate_shared[abi:ne180100]<std::vector<std::vector<quasar::Token>>,std::allocator<std::vector<std::vector<quasar::Token>>>,int,void>((int *)&__p, v121);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 352, (__int128 *)v121);
  size = (std::__shared_weak_count *)v121[0].__r_.__value_.__l.__size_;
  if (v121[0].__r_.__value_.__l.__size_)
  {
    v63 = (unint64_t *)(v121[0].__r_.__value_.__l.__size_ + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v65 = (uint64_t)v94;
  if (v95 != v94)
  {
    v66 = 0;
    v67 = 0;
    do
    {
      v68 = (__int128 *)(v65 + v66);
      v69 = *v68;
      v121[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
      *(_OWORD *)&v121[0].__r_.__value_.__l.__data_ = v69;
      *((_QWORD *)v68 + 1) = 0;
      *((_QWORD *)v68 + 2) = 0;
      *(_QWORD *)v68 = 0;
      LODWORD(__p) = 0;
      LODWORD(__p) = expf(-v91[v67]);
      v70 = *(_QWORD *)(*(_QWORD *)(*a3 + 352) + 8);
      LODWORD(v87[0]) = 0;
      v85 = 0;
      LODWORD(__dst[0]) = 0;
      v84 = 0;
      v71 = *(_QWORD *)(v70 - 16);
      if (v71 >= *(_QWORD *)(v70 - 8))
      {
        v72 = std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>((uint64_t *)(v70 - 24), (uint64_t)v121, (int *)v87, (int *)__dst, &v85, (float *)&__p, &v84);
      }
      else
      {
        std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>(v70 - 8, *(std::string **)(v70 - 16), (uint64_t)v121, (int *)v87, (int *)__dst, &v85, (float *)&__p, &v84);
        v72 = v71 + 224;
        *(_QWORD *)(v70 - 16) = v71 + 224;
      }
      *(_QWORD *)(v70 - 16) = v72;
      if (SHIBYTE(v121[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121[0].__r_.__value_.__l.__data_);
      ++v67;
      v65 = (uint64_t)v94;
      v66 += 24;
    }
    while (v67 < 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3));
  }
  LODWORD(v87[0]) = 1;
  __p = (void *)0x7FEFFFFFFFFFFFFFLL;
  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,int,double,void>((int *)v87, &__p, v121);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 392, (__int128 *)v121);
  v73 = (std::__shared_weak_count *)v121[0].__r_.__value_.__l.__size_;
  if (v121[0].__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v121[0].__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v91;
  v77 = *a3;
  if (v91 != v92)
    *(double *)(*(_QWORD *)(*(_QWORD *)(v77 + 392) + 8) - 8) = *(v92 - 1);
  *(_DWORD *)(v77 + 576) = v9;
  *(_WORD *)(v77 + 580) = 257;
  if (v76)
  {
    v92 = v76;
    operator delete(v76);
  }
  v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
  v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
  v121[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
  (*(void (**)(std::string *))(v35->__r_.__value_.__r.__words[0] + 8))(v35);
  kaldi::Matrix<float>::~Matrix((uint64_t)v113);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&v115);
  v78 = v120;
  if (v120)
  {
    v79 = (unint64_t *)&v120->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  return 0;
}

void sub_1AE0327DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  void **a67;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  *(_QWORD *)(v67 + 104) = v68;
  a67 = (void **)&a46;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a67);
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a52);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&a57);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::emplace_back<std::vector<int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1AE032BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::emplace_back<std::vector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1AE032D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaBatchDecoder::affectsRecognitionResults(quasar::SeevaBatchDecoder *this)
{
  return 1;
}

kaldi::quasar::SeevaInferenceTensorNames *kaldi::quasar::SeevaInferenceTensorNames::SeevaInferenceTensorNames(kaldi::quasar::SeevaInferenceTensorNames *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &unk_1E5D33DD0;
  v2 = (_QWORD *)((char *)this + 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "SeevaModel/__QNNI__source_input");
  std::string::basic_string[abi:ne180100]<0>(v2, "SeevaModel/__QNNI__source_catf_input");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 7, "SeevaModel/__QNNI__length_penalty_weight");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 10, "SeevaModel/__QNNO__nbest_list");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 13, "SeevaModel/__QNNO__nbest_score");
  return this;
}

void sub_1AE032DF4(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[103] < 0)
    operator delete(*v5);
  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v3;
  const std::string *v4;
  std::string *v6;

  v3 = this;
  v4 = __str;
  if (__str != a2)
  {
    v6 = this;
    do
    {
      std::string::operator=(v6++, v4++);
      ++v3;
    }
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<std::vector<quasar::Token>>,std::allocator<std::vector<std::vector<quasar::Token>>>,int,void>@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<std::vector<std::vector<quasar::Token>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE032F00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<std::vector<std::vector<quasar::Token>>>,0>(_QWORD *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D456D0;
  std::vector<std::vector<quasar::Token>>::vector(a1 + 3, *a2);
  return a1;
}

void sub_1AE032F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,int,double,void>@<X0>(int *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<int,double,std::allocator<std::vector<double>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AE032FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<int,double,std::allocator<std::vector<double>>,0>(_QWORD *a1, int *a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D458C8;
  std::vector<double>::vector(a1 + 3, *a2, a3);
  return a1;
}

void sub_1AE033000(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::ConvertToFST::create(quasar::lm *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X8>)
{
  int v8;
  _QWORD *v10;
  _QWORD *v11;
  quasar::lm *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *Featurizer;
  _QWORD *v16;
  _QWORD *v17;
  quasar::lm *v18;
  quasar::lm *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v8 = (int)a1;
  *a5 = 0;
  if (((_DWORD)a1 - 2) >= 2)
  {
    if ((_DWORD)a1 != 1)
    {
      quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 81);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Unknown ConvertToFST implementation: ", 37);
      std::ostream::operator<<();
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
      return;
    }
    if (a4[4])
    {
      quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 53);
      v13 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Arc sorting not supported when using ", 37);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
    }
    else
    {
      quasar::lm::nullstream(a1);
    }
    v33 = operator new();
    v23 = v33;
    v34 = (std::__shared_weak_count *)a3[1];
    v45 = *a3;
    v46 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::ConvertToFST(v33, a2, &v45, *a4, a4[1], a4[2], a4[3]);
    v28 = v46;
    if (!v46)
      goto LABEL_43;
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldaxr(v37);
    while (__stlxr(v30 - 1, v37));
    goto LABEL_41;
  }
  if (*a4)
  {
    quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 62);
    v10 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Explicit modeling of <s> and </s> is not supported when using ", 62);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
  }
  else
  {
    v12 = (quasar::lm *)quasar::lm::nullstream(a1);
  }
  if (a4[1])
  {
    quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 64);
    v16 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Retention of disambiguation symbols is not supported when using ", 64);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
  }
  else
  {
    v18 = (quasar::lm *)quasar::lm::nullstream(v12);
  }
  if (a4[2])
  {
    v19 = (quasar::lm *)quasar::lm::nullstream(v18);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 66);
    v20 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Retention of redundant states is not supported when using ", 58);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
  }
  if (v8 == 3)
  {
    if (a4[3])
    {
      quasar::lm::LogMessage::LogMessage(&v45, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 73);
      v31 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Attaching symbol table is not supported when using ", 51);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v45);
    }
    else
    {
      quasar::lm::nullstream(v19);
    }
    v38 = operator new();
    v23 = v38;
    v39 = a4[4];
    v40 = (std::__shared_weak_count *)a3[1];
    v45 = *a3;
    v46 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::ConvertToFST(v38, a4 + 8, a2, a4 + 40, v39 != 0, &v45);
    v28 = v46;
    if (!v46)
      goto LABEL_43;
    v43 = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldaxr(v43);
    while (__stlxr(v30 - 1, v43));
    goto LABEL_41;
  }
  if (v8 != 2)
    return;
  v22 = operator new();
  v23 = v22;
  v24 = a4[4];
  v25 = (std::__shared_weak_count *)a3[1];
  v45 = *a3;
  v46 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::ConvertToFST(v22, a2, a4 + 40, v24 != 0, &v45, a4[3]);
  v28 = v46;
  if (v46)
  {
    v29 = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_41:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_43:
  v44 = *a5;
  *a5 = v23;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
}

void sub_1AE033480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1AF44D190](v10, 0x10E1C403A835E41);
  *v9 = 0;
  _Unwind_Resume(a1);
}

void sub_1AE033554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  JUMPOUT(0x1AE033548);
}

void sub_1AE033564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  JUMPOUT(0x1AE033548);
}

uint64_t quasar::lm::arpa2fst::ConvertToFST::create(quasar::lm *a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19[2];
  uint64_t v20;
  unsigned __int8 v21[2];
  __int16 v22;
  char v23;
  uint64_t v24;

  v23 = 0;
  quasar::lm::fst_builder::Options<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Options((uint64_t)&v24);
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  v12 = (std::__shared_weak_count *)a3[1];
  v19[0] = *a3;
  v19[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  quasar::lm::arpa2fst::ConvertToFST::create(a1, a2, v19, v21, &v20);
  v15 = v20;
  v20 = 0;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v15;
}

void sub_1AE033658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::arpa2fst::ConvertToFST::ConvertToFST(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  quasar::lm *v7;
  _QWORD *Featurizer;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE v12[16];
  void *__p[2];
  char v14;

  *a1 = &unk_1E5D3A860;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(__p, a2, 0);
  if (v14 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = (quasar::lm *)strcmp((const char *)v6, "<eps>");
  if ((_DWORD)v7)
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 115);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"The symbol with key 0 should be ", 32);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<eps>", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    quasar::lm::nullstream(v7);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v5, a3);
  return a1;
}

void sub_1AE03377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

_QWORD *quasar::PlaceholderOptions::options@<X0>(quasar::PlaceholderOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *result = (char *)this + 16;
  result[1] = (char *)this + 160;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::PlaceholderBlock::init(quasar::PlaceholderBlock *this)
{
  std::string *v2;
  __int128 v3;
  std::string v4;
  void *__p[2];
  std::string::size_type v6;

  std::string::basic_string[abi:ne180100]<0>(&v4, "PlaceholderBlock");
  v2 = std::string::append(&v4, " config:");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(_QWORD **__return_ptr, _QWORD))this + 1, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1AE03389C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'quasar::PlaceholderBlock::init(quasar::PlaceholderBlock *this)
{
  quasar::PlaceholderBlock::init((quasar::PlaceholderBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::PlaceholderBlock::processBody(quasar::PlaceholderBlock *this)
{
  uint64_t *Value;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  size_t v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  std::string *v34;
  int v35;
  uint64_t size;
  std::string *v37;
  int v38;
  char *v39;
  int64_t v40;
  char *v41;
  int v42;
  std::string *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  quasar::PlaceholderBlock *v50;
  __int128 __b;
  uint64_t v52;
  void *__p[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  Value = (uint64_t *)quasar::ProcessingInput::getValue((quasar::PlaceholderBlock *)((char *)this + 640));
  v74 = 0;
  v75 = 0;
  v73 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v73, *Value, Value[1], 0x8F5C28F5C28F5C29 * ((Value[1] - *Value) >> 3));
  v3 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::PlaceholderBlock *)((char *)this + 696));
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v70, *v3, v3[1], 0x8F5C28F5C28F5C29 * ((v3[1] - *v3) >> 3));
  v50 = this;
  if (!*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 3))
    goto LABEL_89;
  v4 = quasar::gLogLevel;
  if (v73 == v74 && quasar::gLogLevel >= 1)
  {
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty nbest input received", 26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    v4 = quasar::gLogLevel;
  }
  if (v70 == v71 && v4 >= 1)
  {
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty nbest (token) input received", 34);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  v5 = quasar::OptionValue<std::string>::value((_QWORD *)this + 21);
  v6 = v70;
  if (v71 == v70)
    goto LABEL_57;
  v7 = 0;
  do
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v54 = 0;
    v8 = v6 + 200 * v7;
    v10 = *(_QWORD *)(v8 + 136);
    v9 = *(_QWORD *)(v8 + 144);
    if (v10 == v9)
      goto LABEL_56;
    do
    {
      v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v10 + 23);
      else
        v12 = *(_QWORD *)(v10 + 8);
      v13 = *(unsigned __int8 *)(v5 + 23);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(v5 + 8);
      if (v12 == v13)
      {
        if (v14 >= 0)
          v15 = (char *)v5;
        else
          v15 = *(char **)v5;
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v10, v15, *(_QWORD *)(v10 + 8)))
            goto LABEL_51;
LABEL_27:
          v18 = __p[0];
          v17 = __p[1];
          if (*(int *)quasar::OptionValue<int>::value((_QWORD *)v50 + 61) <= (unint64_t)((v17 - v18) >> 3))
          {
            if (*(char *)(v10 + 23) < 0)
              v22 = *(_QWORD *)(v10 + 8);
            else
              v22 = *(unsigned __int8 *)(v10 + 23);
            std::string::basic_string[abi:ne180100](&__b, v22, 46);
            if (*(char *)(v10 + 23) < 0)
              operator delete(*(void **)v10);
            v29 = __b;
            *(_QWORD *)(v10 + 16) = v52;
            *(_OWORD *)v10 = v29;
          }
          else
          {
            v19 = *(int *)(v10 + 128);
            v20 = (char *)__p[1];
            if (__p[1] >= (void *)v54)
            {
              v23 = (char *)__p[0];
              v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v26 = v54 - (unint64_t)__p[0];
              if ((uint64_t)(v54 - (unint64_t)__p[0]) >> 2 > v25)
                v25 = v26 >> 2;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
              {
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v54, v27);
                v23 = (char *)__p[0];
                v20 = (char *)__p[1];
              }
              else
              {
                v28 = 0;
              }
              v30 = &v28[8 * v24];
              *(_QWORD *)v30 = v19;
              v21 = v30 + 8;
              while (v20 != v23)
              {
                v31 = *((_QWORD *)v20 - 1);
                v20 -= 8;
                *((_QWORD *)v30 - 1) = v31;
                v30 -= 8;
              }
              __p[0] = v30;
              __p[1] = v21;
              *(_QWORD *)&v54 = &v28[8 * v27];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *(_QWORD *)__p[1] = v19;
              v21 = v20 + 8;
            }
            __p[1] = v21;
          }
          goto LABEL_51;
        }
        if (!*(_BYTE *)(v10 + 23))
          goto LABEL_27;
        v16 = 0;
        while (*(unsigned __int8 *)(v10 + v16) == v15[v16])
        {
          if (v11 == ++v16)
            goto LABEL_27;
        }
      }
LABEL_51:
      v10 += 136;
    }
    while (v10 != v9);
    v32 = __p[1];
    if (__p[0] != __p[1])
    {
      quasar::PlaceholderBlock::insertPlaceholderMetainfo((uint64_t)v50, (quasar::MetaInfo::Impl **)(v73 + 200 * v7 + 192), (quasar ***)__p);
      v32 = __p[0];
    }
    if (v32)
    {
      __p[1] = v32;
      operator delete(v32);
    }
LABEL_56:
    ++v7;
    v6 = v70;
  }
  while (0x8F5C28F5C28F5C29 * ((v71 - v70) >> 3) > v7);
LABEL_57:
  if (v74 == v73)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v34 = *(std::string **)(v73 + 136);
  v33 = *(char **)(v73 + 144);
  if (v34 != (std::string *)v33)
  {
    v35 = 0;
    do
    {
      if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
      {
        v37 = (std::string *)v34->__r_.__value_.__r.__words[0];
        size = v34->__r_.__value_.__l.__size_;
      }
      else
      {
        size = HIBYTE(v34->__r_.__value_.__r.__words[2]);
        v37 = v34;
      }
      v38 = *(char *)(v5 + 23);
      if (v38 >= 0)
        v39 = (char *)v5;
      else
        v39 = *(char **)v5;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(v5 + 23);
      else
        v40 = *(_QWORD *)(v5 + 8);
      if (v40)
      {
        if (size >= v40)
        {
          v41 = (char *)v37 + size;
          v42 = *v39;
          v43 = v37;
          do
          {
            v44 = size - v40;
            if (v44 == -1)
              break;
            v45 = (char *)memchr(v43, v42, v44 + 1);
            if (!v45)
              break;
            v46 = v45;
            if (!memcmp(v45, v39, v40))
            {
              if (v46 != v41)
              {
                v47 = v46 - (char *)v37;
                if (v46 - (char *)v37 != -1)
                  goto LABEL_78;
              }
              break;
            }
            v43 = (std::string *)(v46 + 1);
            size = v41 - (v46 + 1);
          }
          while (size >= v40);
        }
      }
      else
      {
        v47 = 0;
LABEL_78:
        if (v35 >= *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)v50 + 61))
        {
          if (*(char *)(v5 + 23) >= 0)
            v48 = *(unsigned __int8 *)(v5 + 23);
          else
            v48 = *(_QWORD *)(v5 + 8);
          std::string::replace(v34, v47, v48, v48, 46);
        }
        ++v35;
      }
      v34 = (std::string *)((char *)v34 + 136);
    }
    while (v34 != (std::string *)v33);
  }
LABEL_89:
  v49 = *(_QWORD *)(*(_QWORD *)v50 - 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens");
  quasar::ProcessingBlock::send((uint64_t)v50 + v49, (const void **)__p, (uint64_t)&v70, 1);
  if (SBYTE7(v54) < 0)
    operator delete(__p[0]);
  quasar::ProcessingBlock::send((uint64_t)v50 + *(_QWORD *)(*(_QWORD *)v50 - 24), (uint64_t)&v73, 0);
  __p[0] = &v70;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v73;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AE033E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  __p = (void *)(v20 - 144);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v20 - 120);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::PlaceholderBlock::insertPlaceholderMetainfo(uint64_t a1, quasar::MetaInfo::Impl **a2, quasar ***a3)
{
  quasar **v5;
  quasar **v6;
  quasar *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  int Type;
  std::string v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[64];
  _BYTE v22[72];

  quasar::PTree::PTree((quasar::PTree *)v22);
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "begin");
      v7 = *v5;
      Type = quasar::getType(*v5);
      std::to_string(&v16, (unint64_t)v7);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 1;
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "size");
      v8 = quasar::OptionValue<std::string>::value((_QWORD *)(a1 + 328));
      quasar::PTree::PTree(&Type, v8);
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v12 < 0)
        operator delete(__p[0]);
      quasar::PTree::addChild((quasar::PTree *)v22, (const quasar::PTree *)v21);
      quasar::PTree::~PTree((quasar::PTree *)v21);
      ++v5;
    }
    while (v5 != v6);
  }
  quasar::PTree::PTree((quasar::PTree *)v21);
  quasar::PTree::PTree((quasar::PTree *)&Type);
  std::string::basic_string[abi:ne180100]<0>(v13, "text");
  v9 = quasar::OptionValue<std::string>::value((_QWORD *)(a1 + 168));
  quasar::PTree::PTree(__p, v9);
  quasar::PTree::putChild((uint64_t)&Type, (uint64_t)v13, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "positions");
  quasar::PTree::putChild((uint64_t)&Type, (uint64_t)__p, (uint64_t)v22, 1);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "placeholders");
  quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
  if (v12 < 0)
    operator delete(__p[0]);
  quasar::MetaInfo::update(a2, (const quasar::PTree *)v21);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)v21);
  quasar::PTree::~PTree((quasar::PTree *)v22);
}

void sub_1AE034144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  quasar::PTree::~PTree((quasar::PTree *)&a28);
  quasar::PTree::~PTree((quasar::PTree *)&a36);
  quasar::PTree::~PTree((quasar::PTree *)(v36 - 152));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::PlaceholderBlock::processBody(quasar::PlaceholderBlock *this)
{
  quasar::PlaceholderBlock::processBody((quasar::PlaceholderBlock *)((char *)this - 632));
}

uint64_t quasar::PlaceholderBlock::minConfigVersion(quasar::PlaceholderBlock *this)
{
  return 246;
}

uint64_t `virtual thunk to'quasar::PlaceholderBlock::minConfigVersion(quasar::PlaceholderBlock *this)
{
  return 246;
}

void quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AE0342F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D35FF8;
  v2 = (char **)((char *)this + 752);
  *((_QWORD *)this + 94) = off_1E5D360F8;
  *((_QWORD *)this + 79) = &off_1E5D36058;
  v3 = (void **)((char *)this + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  v3 = (void **)((char *)this + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  *(_QWORD *)this = off_1E5D042F0;
  *((_QWORD *)this + 94) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D35FF8;
  v2 = (char **)((char *)this + 752);
  *((_QWORD *)this + 94) = off_1E5D360F8;
  *((_QWORD *)this + 79) = &off_1E5D36058;
  v3 = (void **)((char *)this + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  v3 = (void **)((char *)this + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  *(_QWORD *)this = off_1E5D042F0;
  *((_QWORD *)this + 94) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](this, 0x10F3C4062FB1BEFLL);
}

const char *quasar::PlaceholderBlock::blockType(quasar::PlaceholderBlock *this)
{
  return "PlaceholderBlock";
}

_QWORD *quasar::PlaceholderBlock::inputs@<X0>(quasar::PlaceholderBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 640;
  result[1] = (char *)this + 696;
  *a2 = result;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::PlaceholderBlock::inputs@<X0>(quasar::PlaceholderBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void `non-virtual thunk to'quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  _QWORD *v2;
  char **v3;
  void **v4;

  v2 = (_QWORD *)((char *)this - 632);
  *((_QWORD *)this - 79) = off_1E5D35FF8;
  *((_QWORD *)this + 15) = off_1E5D360F8;
  v3 = (char **)((char *)this + 120);
  *(_QWORD *)this = &off_1E5D36058;
  v4 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v4 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  *v2 = off_1E5D042F0;
  *((_QWORD *)this + 15) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this - 624));
  quasar::ProcessingBlock::~ProcessingBlock(v3);
}

{
  _QWORD *v2;
  char **v3;
  void **v4;

  v2 = (_QWORD *)((char *)this - 632);
  *((_QWORD *)this - 79) = off_1E5D35FF8;
  *((_QWORD *)this + 15) = off_1E5D360F8;
  v3 = (char **)((char *)this + 120);
  *(_QWORD *)this = &off_1E5D36058;
  v4 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v4 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  *v2 = off_1E5D042F0;
  *((_QWORD *)this + 15) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this - 624));
  quasar::ProcessingBlock::~ProcessingBlock(v3);
  MEMORY[0x1AF44D190](v2, 0x10F3C4062FB1BEFLL);
}

void `virtual thunk to'quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D35FF8;
  *((_QWORD *)v1 + 94) = off_1E5D360F8;
  *((_QWORD *)v1 + 79) = &off_1E5D36058;
  v2 = (void **)(v1 + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[719] < 0)
    operator delete(*((void **)v1 + 87));
  v2 = (void **)(v1 + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[663] < 0)
    operator delete(*((void **)v1 + 80));
  *(_QWORD *)v1 = off_1E5D042F0;
  *((_QWORD *)v1 + 94) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 94);
}

{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D35FF8;
  *((_QWORD *)v1 + 94) = off_1E5D360F8;
  *((_QWORD *)v1 + 79) = &off_1E5D36058;
  v2 = (void **)(v1 + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[719] < 0)
    operator delete(*((void **)v1 + 87));
  v2 = (void **)(v1 + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[663] < 0)
    operator delete(*((void **)v1 + 80));
  *(_QWORD *)v1 = off_1E5D042F0;
  *((_QWORD *)v1 + 94) = &unk_1E5D04378;
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 94);
  MEMORY[0x1AF44D190](v1, 0x10F3C4062FB1BEFLL);
}

const char *`virtual thunk to'quasar::PlaceholderBlock::blockType(quasar::PlaceholderBlock *this)
{
  return "PlaceholderBlock";
}

uint64_t TResGraphMaker::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 344))
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (v3 != v2 + 88 && v3 != 0)
        MEMORY[0x1AF44D160]();
    }
    v5 = *(void **)(v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v2 + 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    this = MEMORY[0x1AF44D190](v2, 0x1030C404962A615);
  }
  *(_QWORD *)(v1 + 16) = 0;
  return this;
}

void TResGraphMaker::add(TResGraphMaker *this, const TGraph *a2, int a3)
{
  TResGraphMaker *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OutEdge;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  const TGraph *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[3];

  v4 = this;
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)v5;
  }
  else
  {
    v5 = operator new();
    v6 = 0;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v5 + 88;
    *(_BYTE *)(v5 + 344) = 1;
    *(_OWORD *)(v5 + 72) = xmmword_1AE1418C0;
    *((_QWORD *)v4 + 2) = v5;
    *(_QWORD *)(v5 + 48) = 0;
  }
  v7 = (*(_QWORD *)(v5 + 8) - v6) >> 4;
  v8 = (uint64_t *)*((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11) - (_QWORD)v8;
  v10 = v9 >> 3;
  if (v9)
  {
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v9 >> 3;
    do
    {
      v12 = *v8++;
      if (!*(_BYTE *)(v12 + 32))
        ++v7;
      --v11;
    }
    while (v11);
  }
  v62 = -1;
  std::vector<unsigned long>::vector(__p, v10, &v62);
  v13 = *((_QWORD *)v4 + 2);
  *((_QWORD *)__p[0] + *(_QWORD *)(*((_QWORD *)a2 + 8) + 40)) = *(_QWORD *)(v13 + 56);
  v14 = *(_QWORD *)(v13 + 56);
  std::vector<quasar::PreTokenToPostTokenItnMap>::resize(v13, v7 - (v14 != 0));
  v15 = (_QWORD *)*((_QWORD *)v4 + 2);
  v16 = *((_QWORD *)a2 + 9);
  v17 = __p[0];
  *((_QWORD *)__p[0] + *(_QWORD *)(v16 + 40)) = ((uint64_t)(v15[1] - *v15) >> 4) - 1;
  v18 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v18)
  {
    v19 = 0;
    v54 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
    v55 = a2;
    v57 = v14 + 1;
    v61 = (uint64_t *)v4;
    do
    {
      v20 = *(_QWORD *)(v18 + 8 * v19);
      if (!*(_BYTE *)(v20 + 32))
      {
        v21 = *(_QWORD *)(v20 + 40);
        if (v17[v21] == -1)
          v17[v21] = v57++;
        v58 = v15[3];
        v59 = v15[4];
        OutEdge = TVertex::getOutEdge(v20);
        if (OutEdge)
        {
LABEL_17:
          v23 = *(_QWORD *)(OutEdge + 24);
          v24 = *(_QWORD *)(v23 + 40);
          v25 = __p[0];
          v26 = *((_QWORD *)__p[0] + v24);
          if (v26 == -1)
          {
            *((_QWORD *)__p[0] + v24) = v57;
            v26 = v25[*(_QWORD *)(v23 + 40)];
            ++v57;
          }
          v27 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 80);
          v28 = v25[*(_QWORD *)(v20 + 40)];
          v29 = *(int *)(OutEdge + 48);
          if (v29 > 6)
            v30 = 1;
          else
            v30 = dword_1AE193894[v29];
          v60 = v30;
          TWord::getWordSpec(*(TWord **)(OutEdge + 56));
          v32 = v31;
          TLocaleInfo::unicodeToMultiByte(v61[1], **(unsigned int ***)(OutEdge + 56), v61[2] + 64);
          v33 = v61[2];
          LOBYTE(v62) = 0;
          TBuffer<char>::insert(v33 + 64, *(_QWORD *)(v33 + 80), (char *)&v62, 1uLL);
          v34 = (_QWORD *)v61[2];
          v35 = v34[4];
          v36 = v34[5];
          if (v35 >= v36)
          {
            v38 = v34[3];
            v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v38) >> 3);
            v40 = v39 + 1;
            if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 3);
            if (2 * v41 > v40)
              v40 = 2 * v41;
            if (v41 >= 0x555555555555555)
              v42 = 0xAAAAAAAAAAAAAAALL;
            else
              v42 = v40;
            if (v42)
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v34 + 5), v42);
            else
              v43 = 0;
            v44 = &v43[24 * v39];
            *(_DWORD *)v44 = v27;
            *((_DWORD *)v44 + 1) = v28;
            *((_DWORD *)v44 + 2) = v26;
            *((_DWORD *)v44 + 3) = v60;
            *((_QWORD *)v44 + 2) = v32;
            v46 = (char *)v34[3];
            v45 = (char *)v34[4];
            v47 = v44;
            if (v45 == v46)
            {
              v4 = (TResGraphMaker *)v61;
            }
            else
            {
              v4 = (TResGraphMaker *)v61;
              do
              {
                v48 = *(_OWORD *)(v45 - 24);
                *((_QWORD *)v47 - 1) = *((_QWORD *)v45 - 1);
                *(_OWORD *)(v47 - 24) = v48;
                v47 -= 24;
                v45 -= 24;
              }
              while (v45 != v46);
              v45 = (char *)v34[3];
            }
            v37 = v44 + 24;
            v34[3] = v47;
            v34[4] = v44 + 24;
            v34[5] = &v43[24 * v42];
            if (v45)
              operator delete(v45);
          }
          else
          {
            *(_DWORD *)v35 = v27;
            *(_DWORD *)(v35 + 4) = v28;
            *(_DWORD *)(v35 + 8) = v26;
            *(_DWORD *)(v35 + 12) = v60;
            v37 = (char *)(v35 + 24);
            *(_QWORD *)(v35 + 16) = v32;
            v4 = (TResGraphMaker *)v61;
          }
          v34[4] = v37;
          while (1)
          {
            OutEdge = *(_QWORD *)(OutEdge + 8);
            if (!OutEdge)
              break;
            if (!*(_BYTE *)(OutEdge + 32))
              goto LABEL_17;
          }
        }
        v15 = (_QWORD *)*((_QWORD *)v4 + 2);
        v17 = __p[0];
        v49 = (int *)(*v15 + 16 * *((_QWORD *)__p[0] + *(_QWORD *)(v20 + 40)));
        v49[2] = -1431655765 * ((v59 - v58) >> 3);
        v49[3] = 1431655765 * ((v59 - v58) >> 3) - 1431655765 * ((v15[4] - v15[3]) >> 3);
        v50 = *(_QWORD *)(v20 + 16);
        a2 = v55;
        if (v50)
          v51 = v50 + a3 - v54;
        else
          v51 = -1;
        *v49 = v51;
        v52 = *(_QWORD *)(v20 + 24);
        if (v52)
          v53 = v52 + a3 - v54;
        else
          v53 = -1;
        v49[1] = v53;
      }
      ++v19;
      v18 = *((_QWORD *)a2 + 10);
    }
    while (v19 < (*((_QWORD *)a2 + 11) - v18) >> 3);
    v16 = *((_QWORD *)a2 + 9);
  }
  v15[7] = v17[*(_QWORD *)(v16 + 40)];
  __p[1] = v17;
  operator delete(v17);
}

void sub_1AE034DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::DataFeedItem::regexsyms(uint64_t a1@<X8>)
{
  uint64_t i;
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v4, "[");
  std::string::basic_string[abi:ne180100]<0>(v5, "]");
  std::string::basic_string[abi:ne180100]<0>(v6, "(");
  std::string::basic_string[abi:ne180100]<0>(v7, ")");
  std::string::basic_string[abi:ne180100]<0>(v8, "|");
  std::unordered_set<std::string>::unordered_set(a1, (unsigned __int8 *)v4, 5);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete((void *)v8[i]);
  }
}

void sub_1AE034F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 119) < 0)
      operator delete(*(void **)(v1 + v3 + 96));
    v3 -= 24;
    if (v3 == -120)
      _Unwind_Resume(exception_object);
  }
}

float *quasar::DataFeedItem::setPrior(float *this, float a2)
{
  *this = a2;
  return this;
}

std::string *quasar::DataFeedItem::setField(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (const void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

void quasar::DataFeedItem::getField(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void quasar::DataFeedItem::signatureStrWithoutPrior(quasar::DataFeedItem *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3;
  size_t v4;
  std::string *v5;
  const void *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  char *v11;
  char v12;
  std::vector<std::string>::pointer end;
  std::string::size_type v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  char *v22;
  char *v23;
  BOOL v24;
  std::string v26;
  std::vector<std::string> v27;
  std::__split_buffer<std::string> __v;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  memset(&v27, 0, sizeof(v27));
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      if (v2[55] >= 0)
        v4 = v2[55];
      else
        v4 = *((_QWORD *)v2 + 5);
      std::string::basic_string[abi:ne180100]((uint64_t)&v26, v4 + 1);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v26;
      else
        v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if (v4)
      {
        if (v2[55] >= 0)
          v6 = v2 + 32;
        else
          v6 = (const void *)*((_QWORD *)v2 + 4);
        memmove(v5, v6, v4);
      }
      *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 58;
      v7 = v2[79];
      if (v7 >= 0)
        v8 = v2 + 56;
      else
        v8 = (const std::string::value_type *)*((_QWORD *)v2 + 7);
      if (v7 >= 0)
        v9 = v2[79];
      else
        v9 = *((_QWORD *)v2 + 8);
      v10 = std::string::append(&v26, v8, v9);
      v11 = (char *)v10->__r_.__value_.__r.__words[0];
      v29[0] = v10->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
      v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      end = v27.__end_;
      if (v27.__end_ >= v27.__end_cap_.__value_)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) > v17)
          v17 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
        if (v18)
          v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v27.__end_cap_, v18);
        else
          v19 = 0;
        v20 = v19 + v16;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        v21 = v29[0];
        v20->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v20->__r_.__value_.__l.__size_ = v21;
        *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v29 + 7);
        *((_BYTE *)&v20->__r_.__value_.__s + 23) = v12;
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
        v15 = v27.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      }
      else
      {
        v14 = v29[0];
        v27.__end_->__r_.__value_.__l.__data_ = v11;
        end->__r_.__value_.__l.__size_ = v14;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v29 + 7);
        *((_BYTE *)&end->__r_.__value_.__s + 23) = v12;
        v15 = end + 1;
      }
      v27.__end_ = v15;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v22 = (char *)*((_QWORD *)v2 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)*((_QWORD *)v2 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v2;
          v2 = v23;
        }
        while (!v24);
      }
      v2 = v23;
    }
    while (v23 != v3);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v27, " ", (uint64_t)a2);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1AE0352F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, void **a10, char *a11, std::__split_buffer<std::wstring> *a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*a10);
  a11 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

BOOL quasar::operator<(quasar::DataFeedItem *a1, quasar::DataFeedItem *a2)
{
  int v3;
  void *v4;
  unsigned __int8 v5;
  size_t v6;
  void **v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  int v11;
  _BOOL8 v12;
  _QWORD v14[2];
  unsigned __int8 v15;
  void *__p[2];
  unsigned __int8 v17;

  if (*(float *)a1 != *(float *)a2)
    return *(float *)a1 < *(float *)a2;
  quasar::DataFeedItem::signatureStrWithoutPrior(a1, __p);
  quasar::DataFeedItem::signatureStrWithoutPrior(a2, v14);
  v3 = (char)v15;
  v4 = (void *)v14[0];
  v5 = v17;
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (size_t)__p[1];
  if ((v17 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v8 = v15;
  else
    v8 = v14[1];
  if ((v15 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = (_QWORD *)v14[0];
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  if (v11)
    v12 = v11 < 0;
  else
    v12 = v6 < v8;
  if (v3 < 0)
  {
    operator delete(v4);
    if ((v17 & 0x80) != 0)
LABEL_25:
      operator delete(__p[0]);
  }
  else if ((v5 & 0x80) != 0)
  {
    goto LABEL_25;
  }
  return v12;
}

void sub_1AE035448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::operator>(quasar::DataFeedItem *a1, quasar::DataFeedItem *a2)
{
  unsigned __int8 v3;
  int v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  void **v9;
  size_t v10;
  int v11;
  _BOOL8 v12;
  _QWORD v14[2];
  unsigned __int8 v15;
  void *__p[2];
  unsigned __int8 v17;

  if (*(float *)a1 != *(float *)a2)
    return *(float *)a1 > *(float *)a2;
  quasar::DataFeedItem::signatureStrWithoutPrior(a1, __p);
  quasar::DataFeedItem::signatureStrWithoutPrior(a2, v14);
  v3 = v17;
  v4 = (char)v15;
  v5 = (void *)v14[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = v14[1];
  if ((v15 & 0x80u) == 0)
    v7 = v14;
  else
    v7 = (_QWORD *)v14[0];
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (size_t)__p[1];
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  if (v11)
    v12 = v11 < 0;
  else
    v12 = v6 < v8;
  if (v4 < 0)
  {
    operator delete(v5);
    if ((v17 & 0x80) != 0)
LABEL_25:
      operator delete(__p[0]);
  }
  else if ((v3 & 0x80) != 0)
  {
    goto LABEL_25;
  }
  return v12;
}

void sub_1AE035544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::DataFeedItem::addOSym(quasar::DataFeedItem *this)
{
  uint64_t **v1;
  char *v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;

  v1 = (uint64_t **)((char *)this + 8);
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      quasar::DataFeedItem::addOsym((const std::string *)(v2 + 56));
      v11 = (__int128 *)(v2 + 32);
      v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1, (const void **)v2 + 4, (uint64_t)&std::piecewise_construct, &v11);
      v5 = v4 + 7;
      if (*((char *)v4 + 79) < 0)
        operator delete((void *)*v5);
      *(_OWORD *)v5 = v9;
      v5[2] = v10;
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1AE035634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DataFeedItem::addOsym(const std::string *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  BOOL v5;
  std::vector<std::string>::pointer i;
  std::string *begin;
  std::vector<std::string>::pointer v8;
  __int128 v9;
  std::string *v10;
  uint64_t v11;
  std::vector<std::string>::pointer end;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  __int128 *v20;
  void *__p[2];
  std::string::size_type v23;
  void *v24[2];
  uint64_t v25;
  std::vector<std::string> v26;
  std::vector<std::string> v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  std::__split_buffer<std::string> __v;

  quasar::DataFeedItem::regexsyms((uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(&__v, " ");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__v, &v28);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  memset(&v27, 0, sizeof(v27));
  memset(&v26, 0, sizeof(v26));
  v2 = v28;
  v3 = v29;
  if (v28 == v29)
  {
    v20 = 0;
    v19 = 0;
    v10 = 0;
    goto LABEL_37;
  }
  do
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v30, (unsigned __int8 *)v2))
    {
LABEL_7:
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v26.__end_, v27.__begin_, (__int128 *)v27.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3));
      begin = v27.__begin_;
      for (i = v27.__end_; i != begin; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v27.__end_ = begin;
      goto LABEL_13;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "prior=");
    v4 = quasar::startsWith((unsigned __int8 *)v2, (unsigned __int8 *)&__v);
    v5 = v4;
    if (SHIBYTE(__v.__end_) < 0)
    {
      operator delete(__v.__first_);
      if (v5)
        goto LABEL_7;
    }
    else if (v4)
    {
      goto LABEL_7;
    }
    v24[0] = 0;
    v24[1] = 0;
    v25 = 0;
    v11 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v4);
    quasar::QsrText::encodeTokenQsrText(v11, v2, (uint64_t)v24);
    std::operator+<char>();
    end = v27.__end_;
    if (v27.__end_ >= v27.__end_cap_.__value_)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) > v14)
        v14 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
      if (v15)
        v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v27.__end_cap_, v15);
      else
        v16 = 0;
      v17 = v16 + v13;
      __v.__first_ = v16;
      __v.__begin_ = v17;
      __v.__end_cap_.__value_ = &v16[v15];
      v17->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v23 = 0;
      *(_OWORD *)__p = 0uLL;
      __v.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
      v18 = v27.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v27.__end_ = v18;
    }
    else
    {
      v27.__end_->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v27.__end_ = end + 1;
    }
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
LABEL_13:
    v8 = v26.__end_;
    if (v26.__end_ >= v26.__end_cap_.__value_)
    {
      v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, (__int128 *)v2);
    }
    else
    {
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26.__end_, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v9 = *(_OWORD *)v2;
        v26.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v10 = v8 + 1;
    }
    v26.__end_ = v10;
    v2 += 24;
  }
  while (v2 != v3);
  v19 = v27.__begin_;
  v20 = (__int128 *)v27.__end_;
LABEL_37:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v10, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)" ";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v26, (uint64_t *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v30);
}

void sub_1AE0359B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char ***a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char **a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  a17 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a23 = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::DataFeed(uint64_t a1, __int128 *a2, int a3, int a4, __int128 *a5, __int128 **a6, float a7)
{
  __int128 v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v14 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v14;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  *(_DWORD *)(a1 + 72) = quasar::DataFeed::nameToDataFeedType(a2);
  *(_DWORD *)(a1 + 76) = a3;
  *(_DWORD *)(a1 + 80) = a4;
  *(float *)(a1 + 84) = a7;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_BYTE *)(a1 + 152) = 1;
  quasar::DataFeed::initializeEnumerators(a1, a5, (uint64_t *)a6);
  return a1;
}

void sub_1AE035BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::nameToDataFeedType(_QWORD *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v3 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 5:
        if (*(_DWORD *)a1 != 1735290739 || *((_BYTE *)a1 + 4) != 115)
          goto LABEL_67;
        return 3;
      case 6:
        if (*(_DWORD *)a1 != 1969384545 || *((_WORD *)a1 + 2) != 29549)
          goto LABEL_67;
        return 2;
      case 7:
        if (*(_DWORD *)a1 != 1769239137 || *(_DWORD *)((char *)a1 + 3) != 1937011561)
          goto LABEL_67;
        return 1;
      case 0xD:
        if (*a1 != 0x72615F73676E6F73 || *(_QWORD *)((char *)a1 + 5) != 0x737473697472615FLL)
        {
          if (v2 != 13)
            goto LABEL_67;
          if (*a1 != 0x5F73747369747261 || *(_QWORD *)((char *)a1 + 5) != 0x73676E6F735F7374)
            goto LABEL_67;
        }
        return 4;
      case 0xE:
        goto LABEL_40;
      default:
        goto LABEL_67;
    }
  }
  v5 = a1[1];
  if (v5 == 5)
  {
    if (*(_DWORD *)*a1 == 1735290739 && *(_BYTE *)(*a1 + 4) == 115)
      return 3;
    v5 = a1[1];
  }
  else if (v5 == 7 && *(_DWORD *)*a1 == 1769239137 && *(_DWORD *)(*a1 + 3) == 1937011561)
  {
    return 1;
  }
  if (v5 == 6)
  {
    if (*(_DWORD *)*a1 == 1969384545 && *(_WORD *)(*a1 + 4) == 29549)
      return 2;
    v5 = a1[1];
  }
  if (v5 != 13)
    goto LABEL_38;
  if (*(_QWORD *)*a1 == 0x72615F73676E6F73 && *(_QWORD *)(*a1 + 5) == 0x737473697472615FLL)
    return 4;
  v5 = a1[1];
  if (v5 != 13)
  {
LABEL_38:
    if (v5 == 14)
    {
      v3 = (uint64_t *)*a1;
LABEL_40:
      v11 = *v3;
      v12 = *(uint64_t *)((char *)v3 + 6);
      if (v11 == 0x615F736D75626C61 && v12 == 0x737473697472615FLL)
        return 5;
    }
    goto LABEL_67;
  }
  if (*(_QWORD *)*a1 == 0x5F73747369747261 && *(_QWORD *)(*a1 + 5) == 0x73676E6F735F7374)
    return 4;
  if ((v2 & 0x80) != 0)
    goto LABEL_38;
LABEL_67:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "artists_albums"))
    return 5;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "playlists"))
    return 8;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "radiostations"))
    return 10;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "composers"))
    return 6;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "genres"))
    return 7;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "podcasts"))
    return 9;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "movie_titles"))
    return 11;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "tvshow_titles"))
    return 12;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "audiobooks"))
    return 13;
  return 0;
}

void quasar::DataFeed::initializeEnumerators(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  const void *v7;
  uint64_t v8;
  size_t v9;
  std::string *p_p;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  unsigned __int8 *v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  __int128 v22;
  std::string::size_type v23;
  __int128 *v24;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v7 = (const void *)(a1 + 24);
    v8 = a1 + 112;
    do
    {
      if (*(char *)(a1 + 47) >= 0)
        v9 = *(unsigned __int8 *)(a1 + 47);
      else
        v9 = *(_QWORD *)(a1 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (*(char *)(a1 + 47) >= 0)
          v11 = v7;
        else
          v11 = *(const void **)(a1 + 24);
        memmove(p_p, v11, v9);
      }
      *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v9) = 46;
      v12 = *(char *)(v3 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)v3;
      else
        v13 = *(const std::string::value_type **)v3;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v3 + 23);
      else
        v14 = *(_QWORD *)(v3 + 8);
      v15 = std::string::append(&__p, v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v23 = v15->__r_.__value_.__r.__words[2];
      v22 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::allocate_shared[abi:ne180100]<quasar::PMRegexEnumerator,std::allocator<quasar::PMRegexEnumerator>,char const(&)[6],std::string const&,std::string&,void>("Regex", a2, &v22, &__p);
      v24 = (__int128 *)v3;
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, &v24);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v17 + 40), (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (SHIBYTE(v23) < 0)
        operator delete((void *)v22);
      v3 += 24;
    }
    while (v3 != v4);
  }
}

void sub_1AE036208()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    JUMPOUT(0x1AE03624CLL);
  JUMPOUT(0x1AE036250);
}

void sub_1AE036210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x1AE036228);
}

void sub_1AE03623C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x1AE03624CLL);
  JUMPOUT(0x1AE036250);
}

quasar::DataFeed *quasar::DataFeed::DataFeed(quasar::DataFeed *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 3, "unknown");
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)((char *)this + 76) = 0x1F400000001;
  *((_DWORD *)this + 21) = -1110651699;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1065353216;
  *((_BYTE *)this + 152) = 1;
  return this;
}

void sub_1AE0362DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::DataFeed(uint64_t a1, _DWORD *a2, std::string *a3)
{
  uint64_t *v4;
  __int128 *v5;

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 72) = *a2;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = (__int128 *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_BYTE *)(a1 + 152) = 1;
  if ((quasar::DataFeed::loadSystemConfig((quasar::DataFeed *)a1, a3) & 1) != 0)
    quasar::DataFeed::initializeEnumerators(a1, v5, v4);
  else
    *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

void sub_1AE036390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v12;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v13);
  if (*(char *)(v10 + 111) < 0)
    operator delete(*v11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*(void **)(v10 + 24));
  a10 = (void **)v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::loadSystemConfig(quasar::DataFeed *this, std::string *a2)
{
  uint64_t PtreeOptional;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string __p;
  std::string v21;
  std::string v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-match-building");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)&__p);
  v5 = PtreeOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5)
      return 0;
  }
  else if (!PtreeOptional)
  {
    return 0;
  }
  *((_DWORD *)this + 21) = -1110651699;
  *(_QWORD *)((char *)this + 76) = 0x1F400000000;
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-match-building");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 210, 0, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::DataFeed::dataFeedTypeToName((_DWORD *)this + 18, &v21);
  v6 = std::string::insert(&v21, 0, "phonetic-match-building.on-device-data-sources.");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "limit");
  std::to_string(&v21, 500);
  v10 = std::string::insert(&v21, 0, "Limit on the number of items, default=");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 80, (uint64_t)&v22, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prior-exp-decay-factor");
  std::to_string(&v21, -0.1);
  v12 = std::string::insert(&v21, 0, "Exponential decay factor, default=");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 84, (uint64_t)&v22, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prior-power-scale");
  std::to_string(&v21, 1.0);
  v14 = std::string::insert(&v21, 0, "Prior scale of the priors, default=");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 76, (uint64_t)&v22, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::DataFeed::dataFeedTypeToName((_DWORD *)this + 18, &v22);
  v16 = std::string::insert(&v22, 0, "phonetic-match-building.on-device-data-sources.");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-match-building.");
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "process-feeds-config-file");
  std::string::basic_string[abi:ne180100]<0>(&v22, "Configuration file for feed processing rules");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 88, (uint64_t)&v22, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-match-building");
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::DataFeed::dataFeedTypeToName((_DWORD *)this + 18, &__p);
  v18 = (void **)((char *)this + 24);
  if (*((char *)this + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 5) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  quasar::DataFeed::dataFeedTypeToFields((_DWORD *)this + 18, (std::string **)&__p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)this + 2);
  *((std::string *)this + 2) = __p;
  memset(&__p, 0, sizeof(__p));
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return 1;
}

void sub_1AE036AD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AE036AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *quasar::DataFeed::dataFeedTypeToName@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  char *v5;

  v4 = *a1 - 1;
  if (v4 > 0xC)
    v5 = "unknown";
  else
    v5 = off_1E5D49190[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void quasar::DataFeed::dataFeedTypeToFields(_DWORD *a1@<X0>, std::string **a2@<X8>)
{
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *__p[2];
  char v20;
  _QWORD v21[3];
  __int128 v22;

  *(_QWORD *)&v22 = *MEMORY[0x1E0C80C00];
  switch(*a1)
  {
    case 1:
      std::string::basic_string[abi:ne180100]<0>(__p, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v3 = (std::string *)operator new(0x18uLL);
      *a2 = v3;
      a2[1] = v3;
      a2[2] = v3 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v3);
      goto LABEL_24;
    case 2:
      std::string::basic_string[abi:ne180100]<0>(__p, "album_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v13 = (std::string *)operator new(0x18uLL);
      *a2 = v13;
      a2[1] = v13;
      a2[2] = v13 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v13);
      goto LABEL_24;
    case 3:
      std::string::basic_string[abi:ne180100]<0>(__p, "song_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v5 = (std::string *)operator new(0x18uLL);
      *a2 = v5;
      a2[1] = v5;
      a2[2] = v5 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v5);
      goto LABEL_24;
    case 4:
      std::string::basic_string[abi:ne180100]<0>(__p, "song_name");
      std::string::basic_string[abi:ne180100]<0>(v21, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v6 = (std::string *)operator new(0x30uLL);
      *a2 = v6;
      a2[1] = v6;
      a2[2] = v6 + 2;
      v7 = 0;
      a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, &v22, v6);
      do
      {
        if (SHIBYTE(v21[v7 + 2]) < 0)
          operator delete((void *)v21[v7]);
        v7 -= 3;
      }
      while (v7 != -6);
      return;
    case 5:
      std::string::basic_string[abi:ne180100]<0>(__p, "album_name");
      std::string::basic_string[abi:ne180100]<0>(v21, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v8 = (std::string *)operator new(0x30uLL);
      *a2 = v8;
      a2[1] = v8;
      a2[2] = v8 + 2;
      v9 = 0;
      a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, &v22, v8);
      do
      {
        if (SHIBYTE(v21[v9 + 2]) < 0)
          operator delete((void *)v21[v9]);
        v9 -= 3;
      }
      while (v9 != -6);
      return;
    case 6:
      std::string::basic_string[abi:ne180100]<0>(__p, "composer_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v14 = (std::string *)operator new(0x18uLL);
      *a2 = v14;
      a2[1] = v14;
      a2[2] = v14 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v14);
      goto LABEL_24;
    case 7:
      std::string::basic_string[abi:ne180100]<0>(__p, "genre_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v15 = (std::string *)operator new(0x18uLL);
      *a2 = v15;
      a2[1] = v15;
      a2[2] = v15 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v15);
      goto LABEL_24;
    case 8:
      std::string::basic_string[abi:ne180100]<0>(__p, "playlist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v16 = (std::string *)operator new(0x18uLL);
      *a2 = v16;
      a2[1] = v16;
      a2[2] = v16 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v16);
      goto LABEL_24;
    case 9:
      std::string::basic_string[abi:ne180100]<0>(__p, "podcast_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v17 = (std::string *)operator new(0x18uLL);
      *a2 = v17;
      a2[1] = v17;
      a2[2] = v17 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v17);
      goto LABEL_24;
    case 0xA:
      std::string::basic_string[abi:ne180100]<0>(__p, "radiostation_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v10 = (std::string *)operator new(0x18uLL);
      *a2 = v10;
      a2[1] = v10;
      a2[2] = v10 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v10);
      goto LABEL_24;
    case 0xB:
      std::string::basic_string[abi:ne180100]<0>(__p, "movie_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v18 = (std::string *)operator new(0x18uLL);
      *a2 = v18;
      a2[1] = v18;
      a2[2] = v18 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v18);
      goto LABEL_24;
    case 0xC:
      std::string::basic_string[abi:ne180100]<0>(__p, "show_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v11 = (std::string *)operator new(0x18uLL);
      *a2 = v11;
      a2[1] = v11;
      a2[2] = v11 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v11);
      goto LABEL_24;
    case 0xD:
      std::string::basic_string[abi:ne180100]<0>(__p, "audiobook_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v12 = (std::string *)operator new(0x18uLL);
      *a2 = v12;
      a2[1] = v12;
      a2[2] = v12 + 1;
      v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, (__int128 *)v21, v12);
LABEL_24:
      a2[1] = v4;
      if (v20 < 0)
        operator delete(__p[0]);
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      break;
  }
}

void sub_1AE0370A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *quasar::DataFeed::getFieldNames@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (((char *)this[7] - (char *)this[6]) >> 3));
}

BOOL quasar::DataFeed::appendItem(quasar::DataFeed *this, const void ***a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v2 = *((_QWORD *)this + 1);
  v3 = (uint64_t)(v2 - *(_QWORD *)this) >> 5;
  v4 = *((int *)this + 20);
  if (v3 < v4)
  {
    if (v2 >= *((_QWORD *)this + 2))
    {
      v6 = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)this, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)v2 = *(_DWORD *)a2;
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v2 + 8), a2 + 1);
      v6 = v2 + 32;
      *((_QWORD *)this + 1) = v2 + 32;
    }
    *((_QWORD *)this + 1) = v6;
  }
  return v3 < v4;
}

void sub_1AE037298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL quasar::DataFeed::full(quasar::DataFeed *this)
{
  return *((int *)this + 20) <= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5);
}

uint64_t quasar::DataFeed::getLimit(quasar::DataFeed *this)
{
  return *((unsigned int *)this + 20);
}

void quasar::DataFeed::sortItemsByPriorDesc(quasar::DataFeed *this)
{
  quasar::DataFeedItem *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  v1 = (quasar::DataFeedItem *)*((_QWORD *)this + 1);
  v2 = 126 - 2 * __clz(((uint64_t)v1 - *(_QWORD *)this) >> 5);
  if (v1 == *(quasar::DataFeedItem **)this)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(*(int **)this, v1, (uint64_t)&v4, v3, 1);
}

void quasar::DataFeed::sortItemsByPriorAsc(quasar::DataFeed *this)
{
  quasar::DataFeedItem *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  v1 = (quasar::DataFeedItem *)*((_QWORD *)this + 1);
  v2 = 126 - 2 * __clz(((uint64_t)v1 - *(_QWORD *)this) >> 5);
  if (v1 == *(quasar::DataFeedItem **)this)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(*(int **)this, v1, (uint64_t)&v4, v3, 1);
}

float **quasar::DataFeed::normalizePriors(float **this)
{
  float *v1;
  float *v2;
  float v3;
  float *v4;
  float v5;

  v1 = *this;
  v2 = this[1];
  if (*this != v2)
  {
    v3 = 0.0;
    v4 = *this;
    do
    {
      v5 = *v4;
      v4 += 8;
      v3 = v3 + v5;
    }
    while (v4 != v2);
    while (v1 != v2)
    {
      *v1 = *v1 / v3;
      v1 += 8;
    }
  }
  return this;
}

void quasar::DataFeed::expDecayPriors(quasar::DataFeed *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  const float *v4;
  unint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float *v8;
  int32x2_t v9;
  float32x2_t v10;
  float v11;
  uint64x2_t v12;
  float v13;
  float v14;
  int32x2_t v15;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    v3 = 0;
    v4 = (const float *)((char *)this + 84);
    v5 = (unint64_t)(v2 - v1 - 32) >> 5;
    v12 = (uint64x2_t)vdupq_n_s64(v5);
    v6 = (v5 + 2) & 0xFFFFFFFFFFFFFFELL;
    v7 = vld1_dup_f32(v4);
    v8 = (float *)(v1 + 32);
    do
    {
      v15 = vmovn_s64((int64x2_t)vcgeq_u64(v12, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v3), (int8x16_t)xmmword_1AE140A90)));
      v9.i32[0] = v3;
      v9.i32[1] = v3 + 1;
      v10 = vmul_f32(v7, vcvt_f32_s32(v9));
      v13 = v10.f32[0];
      v14 = expf(v10.f32[1]);
      v11 = expf(v13);
      if ((v15.i8[0] & 1) != 0)
        *(v8 - 8) = v11;
      if ((v15.i8[4] & 1) != 0)
        *v8 = v14;
      v3 += 2;
      v8 += 16;
    }
    while (v6 != v3);
  }
}

void quasar::DataFeed::powerScalePriors(float **this)
{
  float *v1;
  float *v2;
  double v3;
  float v4;

  v1 = *this;
  v2 = this[1];
  if (*this != v2)
  {
    v3 = (double)*((int *)this + 19);
    do
    {
      v4 = pow(*v1, v3);
      *v1 = v4;
      v1 += 8;
    }
    while (v1 != v2);
  }
}

void quasar::DataFeed::addOSym(quasar::DataFeedItem **this)
{
  quasar::DataFeedItem *v1;
  quasar::DataFeedItem *v2;

  v1 = *this;
  v2 = this[1];
  while (v1 != v2)
  {
    quasar::DataFeedItem::addOSym(v1);
    v1 = (quasar::DataFeedItem *)((char *)v1 + 32);
  }
}

void quasar::DataFeed::applyRegexEnumerations(quasar::DataFeed *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::string __p;
  _BYTE __str[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;

  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  if (v1 != v2)
  {
    v4 = (_QWORD *)((char *)this + 112);
    do
    {
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)v1);
      if (v5)
      {
        v7 = *(_QWORD *)this;
        v6 = *((_QWORD *)this + 1);
        if (*(_QWORD *)this != v6)
        {
          v8 = v5;
          do
          {
            v9 = *((_QWORD *)v8 + 5);
            quasar::DataFeedItem::getField(v7, (const void **)v1, &__p);
            quasar::PMRegexEnumerator::getEnumerationsRegexFormat(v9, &__p, (std::string *)__str);
            v34 = (__int128 *)v1;
            v10 = (uint64_t **)(v7 + 8);
            v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)v1, (uint64_t)&std::piecewise_construct, &v34);
            std::string::operator=((std::string *)(v11 + 7), (const std::string *)__str);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v7 = (uint64_t)(v10 + 3);
          }
          while (v7 != v6);
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Enumerator is not available for field [", 39);
        v13 = *(char *)(v1 + 23);
        if (v13 >= 0)
          v14 = v1;
        else
          v14 = *(_QWORD *)v1;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v1 + 23);
        else
          v15 = *(_QWORD *)(v1 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
}

void sub_1AE03769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::writeTSV(uint64_t a1, uint64_t a2)
{
  std::string *end;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t v9;
  uint64_t v10;
  std::locale::id *v11;
  _QWORD *v12;
  const void **v13;
  const void **v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::vector<std::string> v25;
  const char *v26;
  uint64_t v27;
  std::locale v28;
  void *__p[2];
  __int128 v30[16];
  uint64_t v31;
  _BYTE v32[120];
  uint64_t v33;
  _QWORD v34[20];

  v34[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v31);
  std::string::basic_string[abi:ne180100]<0>(__p, "Prior");
  memset(&v25, 0, sizeof(v25));
  v26 = (const char *)&v25;
  LOBYTE(v27) = 0;
  v25.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v25.__end_ = v25.__begin_;
  v25.__end_cap_.__value_ = v25.__begin_ + 1;
  end = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25.__end_cap_, (__int128 *)__p, (__int128 *)((char *)v30 + 8), v25.__begin_);
  v25.__end_ = end;
  if (SBYTE7(v30[0]) < 0)
  {
    operator delete(__p[0]);
    end = v25.__end_;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v25, end, *(std::string **)(a1 + 48), *(__int128 **)(a1 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  if (v33)
  {
    v26 = "\t";
    v27 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v25, (uint64_t *)&v26);
    if ((SBYTE7(v30[0]) & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((SBYTE7(v30[0]) & 0x80u) == 0)
      v6 = BYTE7(v30[0]);
    else
      v6 = (uint64_t)__p[1];
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v5, v6);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet(&v28, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v28);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v30[0]) < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v10)
    {
      v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\t", 1);
        v13 = *(const void ***)(a1 + 48);
        v14 = *(const void ***)(a1 + 56);
        while (v13 != v14)
        {
          quasar::DataFeedItem::getField(v9, v13, (std::string *)__p);
          if ((SBYTE7(v30[0]) & 0x80u) == 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          if ((SBYTE7(v30[0]) & 0x80u) == 0)
            v16 = BYTE7(v30[0]);
          else
            v16 = (uint64_t)__p[1];
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\t", 1);
          if (SBYTE7(v30[0]) < 0)
            operator delete(__p[0]);
          v13 += 3;
        }
        std::ios_base::getloc((const std::ios_base *)&v32[*(_QWORD *)(v31 - 24) - 8]);
        v18 = std::locale::use_facet((const std::locale *)__p, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        v9 += 32;
      }
      while (v9 != v10);
    }
  }
  else
  {
    if (quasar::gLogLevel < 1)
      goto LABEL_38;
    memset(v30, 0, sizeof(v30));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to write: '", 35);
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  if (v33 && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v32[*(_QWORD *)(v31 - 24) - 8], *(_DWORD *)&v32[*(_QWORD *)(v31 - 24) + 24] | 4);
LABEL_38:
  __p[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v31 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v32[*(_QWORD *)(v31 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v32);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v34);
}

void sub_1AE037AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, std::locale a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::ofstream::~ofstream(&a52);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::readTSV(std::vector<std::wstring> *a1, uint64_t a2, std::vector<std::wstring> *a3, uint64_t a4, int a5, int a6)
{
  std::wstring *end;
  std::wstring *begin;
  std::wstring *v14;
  unint64_t v15;
  std::locale::id *v16;
  double v17;
  char *v18;
  char *v19;
  const std::locale::facet *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  float v26;
  float v27;
  std::string *v28;
  std::string *v29;
  int v30;
  std::string *v31;
  uint64_t *v32;
  std::vector<std::wstring>::pointer v33;
  std::vector<std::wstring>::pointer v34;
  __int128 v35;
  __int128 v36;
  std::vector<std::wstring>::pointer v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *p_str;
  std::string::size_type v42;
  _QWORD *v43;
  std::wstring *v44;
  std::vector<std::wstring>::pointer v45;
  std::wstring *v46;
  std::wstring *v47;
  char *v48;
  char *v49;
  std::vector<std::wstring>::pointer v50;
  std::vector<std::wstring>::pointer v51;
  uint64_t p_size;
  quasar::DataFeedItem *v53;
  quasar::DataFeedItem *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t size;
  _QWORD *v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  std::vector<std::wstring> *v70;
  std::vector<std::wstring> *v71;
  unsigned int v72;
  std::locale v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  std::string *v90;
  __int128 *v91;
  _OWORD v92[2];
  int v93;
  std::vector<std::wstring> v94;
  std::string __str;
  void *__p[2];
  char v97;
  std::string *v98;
  _QWORD v99[2];
  _BYTE v100[120];
  uint64_t v101;
  _QWORD v102[21];

  v102[19] = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v99);
  memset(&v94, 0, sizeof(v94));
  memset(v92, 0, sizeof(v92));
  v93 = 1065353216;
  begin = a1->__begin_;
  end = a1->__end_;
  if (end != a1->__begin_)
  {
    do
    {
      v14 = (std::wstring *)((char *)end - 32);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&end[-1], (_QWORD *)end[-1].__r_.__value_.__l.__size_);
      end = v14;
    }
    while (v14 != begin);
  }
  a1->__end_ = begin;
  if (&a1[2] != a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 2, (std::string *)a3->__begin_, (__int128 *)a3->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a3->__end_ - (char *)a3->__begin_) >> 3));
  if (v101)
  {
    v15 = a5;
    v72 = -1;
    v16 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v17 = (double)a6;
    v18 = "#";
    v19 = " ";
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(_QWORD *)(v99[0] - 24)));
        v20 = std::locale::use_facet(v73, v16);
        v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v73);
        v22 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v99, (uint64_t)&__str, v21);
        if ((*((_BYTE *)v22 + *(_QWORD *)(*v22 - 24) + 32) & 5) != 0
          || v15 <= ((char *)a1->__end_ - (char *)a1->__begin_) >> 5)
        {
          quasar::DataFeed::applyRegexEnumerations((quasar::DataFeed *)a1);
          v53 = (quasar::DataFeedItem *)a1->__begin_;
          v54 = (quasar::DataFeedItem *)a1->__end_;
          while (v53 != v54)
          {
            quasar::DataFeedItem::addOSym(v53);
            v53 = (quasar::DataFeedItem *)((char *)v53 + 32);
          }
          if (v101 && !std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)v99 + *(_QWORD *)(v99[0] - 24)), *(_DWORD *)&v100[*(_QWORD *)(v99[0] - 24) + 16] | 4);
          v55 = 1;
          goto LABEL_80;
        }
        std::string::basic_string[abi:ne180100]<0>(v73, v18);
        v23 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v73);
        v24 = v23;
        if ((SBYTE7(v74) & 0x80000000) == 0)
          break;
        operator delete(v73[0].__locale_);
        if (!v24)
          goto LABEL_13;
      }
      if (!v23)
      {
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(v73, "\t");
        quasar::splitAndTrim(&__str, (char *)v73, (uint64_t *)&v90);
        if (SBYTE7(v74) < 0)
          operator delete(v73[0].__locale_);
        if (v94.__end_ == v94.__begin_)
        {
          v71 = a3;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v94, v90, v91, 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3));
          v34 = v94.__begin_;
          v33 = v94.__end_;
          if (v94.__begin_ == v94.__end_)
          {
            v37 = v94.__begin_;
          }
          else
          {
            do
            {
              std::string::basic_string[abi:ne180100]<0>(v73, v19);
              std::string::basic_string[abi:ne180100]<0>(__p, "_");
              quasar::replaceAll((uint64_t)v34, (uint64_t)v73, (char *)__p);
              if (v97 < 0)
                operator delete(__p[0]);
              if (SBYTE7(v74) < 0)
                operator delete(v73[0].__locale_);
              if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v73, (const std::string::value_type *)v34->__r_.__value_.__l.__data_, v34->__r_.__value_.__l.__size_);
              }
              else
              {
                v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                *(_QWORD *)&v74 = *((_QWORD *)&v34->__r_.__value_.__l + 2);
                *(_OWORD *)&v73[0].__locale_ = v35;
              }
              if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34->__r_.__value_.__l.__data_);
              v36 = *(_OWORD *)&v73[0].__locale_;
              v34->__r_.__value_.__r.__words[2] = v74;
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
              ++v34;
            }
            while (v34 != v33);
            v37 = v94.__begin_;
            v34 = v94.__end_;
          }
          v44 = (std::wstring *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v37, (uint64_t)v34, (unsigned __int8 **)a4);
          if (v44 == v94.__end_)
          {
            if (quasar::gLogLevel >= 1)
            {
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              *(_OWORD *)&v73[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Could not find prior field '", 28);
              v67 = *(char *)(a4 + 23);
              if (v67 >= 0)
                v63 = (unsigned __int8 *)a4;
              else
                v63 = *(unsigned __int8 **)a4;
              if (v67 >= 0)
                size = *(unsigned __int8 *)(a4 + 23);
              else
                size = *(_QWORD *)(a4 + 8);
LABEL_77:
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, size);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"' in the header", 15);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
            }
LABEL_78:
            v73[0].__locale_ = (std::locale::__imp *)&v90;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
            goto LABEL_79;
          }
          v69 = a4;
          v72 = -1431655765 * ((unint64_t)((char *)v44 - (char *)v94.__begin_) >> 3);
          v45 = v71->__begin_;
          v46 = v71->__end_;
          if (v71->__begin_ != v46)
          {
            while (1)
            {
              v47 = (std::wstring *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v94.__begin_, (uint64_t)v94.__end_, (unsigned __int8 **)v45);
              if (v47 == v94.__end_)
                break;
              v48 = v18;
              v49 = v19;
              v50 = v94.__begin_;
              v73[0].__locale_ = (std::locale::__imp *)v45;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)v45++, (uint64_t)&std::piecewise_construct, (__int128 **)v73)+ 10) = -1431655765 * ((unint64_t)((char *)v47 - (char *)v50) >> 3);
              v19 = v49;
              v18 = v48;
              if (v45 == v46)
                goto LABEL_49;
            }
            if (quasar::gLogLevel >= 1)
            {
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              *(_OWORD *)&v73[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Could not find field '", 22);
              v62 = SHIBYTE(v45->__r_.__value_.__r.__words[2]);
              if (v62 >= 0)
                v63 = (unsigned __int8 *)v45;
              else
                v63 = (unsigned __int8 *)v45->__r_.__value_.__r.__words[0];
              if (v62 >= 0)
                size = HIBYTE(v45->__r_.__value_.__r.__words[2]);
              else
                size = v45->__r_.__value_.__l.__size_;
              goto LABEL_77;
            }
            goto LABEL_78;
          }
LABEL_49:
          a4 = v69;
          a3 = v71;
        }
        else
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3) == v25)
          {
            if ((v72 & 0x80000000) != 0 || v25 <= v72)
            {
              if (quasar::gLogLevel >= 1)
              {
                v88 = 0u;
                v89 = 0u;
                v86 = 0u;
                v87 = 0u;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v74 = 0u;
                v75 = 0u;
                *(_OWORD *)&v73[0].__locale_ = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Prior field out of bound: ", 26);
                std::ostream::operator<<();
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
              }
              goto LABEL_78;
            }
            v68 = a4;
            v26 = std::stof(&v90[v72], 0);
            v27 = pow(v26, v17);
            v74 = 0uLL;
            v73[1].__locale_ = (std::locale::__imp *)&v74;
            *(float *)&v73[0].__locale_ = v27;
            v70 = a3;
            v28 = (std::string *)a3->__begin_;
            v29 = (std::string *)a3->__end_;
            while (v28 != v29)
            {
              v98 = v28;
              v30 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)v28, (uint64_t)&std::piecewise_construct, (__int128 **)&v98)+ 10);
              v31 = v90;
              v98 = v28;
              v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v73[1], (const void **)&v28->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v98);
              std::string::operator=((std::string *)(v32 + 7), &v31[v30]);
              ++v28;
            }
            v51 = a1->__end_;
            if (v51 >= a1->__end_cap_.__value_)
            {
              p_size = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)a1, (uint64_t)v73);
              a4 = v68;
              a3 = v70;
              v19 = " ";
            }
            else
            {
              v51->__r_.__value_.__s.__data_[0] = (std::wstring::value_type)v73[0].__locale_;
              std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v51->__r_.__value_.__l.__size_, (const void ***)&v73[1]);
              a3 = v70;
              v19 = " ";
              p_size = (uint64_t)&v51[1].__r_.__value_.__l.__size_;
              a1->__end_ = (std::vector<std::wstring>::pointer)((char *)v51 + 32);
              a4 = v68;
            }
            a1->__end_ = (std::vector<std::wstring>::pointer)p_size;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73[1], (_QWORD *)v74);
          }
          else if (quasar::gLogLevel >= 5)
          {
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            *(_OWORD *)&v73[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Expecting ", 10);
            v38 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" fields, but found ", 19);
            v39 = (_QWORD *)std::ostream::operator<<();
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" at '", 5);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v42 = __str.__r_.__value_.__l.__size_;
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)p_str, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"'", 1);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
          }
        }
        v73[0].__locale_ = (std::locale::__imp *)&v90;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    *(_OWORD *)&v73[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unable to open the file to read: '", 34);
    v57 = *(char *)(a2 + 23);
    if (v57 >= 0)
      v58 = a2;
    else
      v58 = *(_QWORD *)a2;
    if (v57 >= 0)
      v59 = *(unsigned __int8 *)(a2 + 23);
    else
      v59 = *(_QWORD *)(a2 + 8);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
  }
LABEL_79:
  v55 = 0;
LABEL_80:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v92);
  v73[0].__locale_ = (std::locale::__imp *)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  v99[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v99 + *(_QWORD *)(v99[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v100);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v102);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v55;
}

void sub_1AE03856C(_Unwind_Exception *a1)
{
  uint64_t v2;
  void **v3[5];
  void *v4[5];
  char v5;
  void **v6;
  uint64_t v7;

  v6 = (void **)&v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  v3[0] = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v3);
  std::ifstream::~ifstream(&v7);
  if (v5 < 0)
    operator delete(v4[3]);
  _Unwind_Resume(a1);
}

void sub_1AE038698(_Unwind_Exception *a1)
{
  _QWORD v2[5];
  void *v3[5];
  char v4;
  uint64_t v5;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  v2[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v2);
  std::ifstream::~ifstream(&v5);
  if (v4 < 0)
    operator delete(v3[3]);
  _Unwind_Resume(a1);
}

void sub_1AE0386A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale(&a15);
  JUMPOUT(0x1AE0386ACLL);
}

uint64_t quasar::DataFeed::readNT(std::vector<std::wstring> *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  std::wstring *end;
  std::wstring *begin;
  std::wstring *v13;
  double v14;
  std::locale::id *v15;
  const std::locale::facet *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  BOOL v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  float v23;
  std::locale::id *v24;
  float v25;
  std::string *v26;
  std::string *v27;
  uint64_t v28;
  const std::string *v29;
  uint64_t *v30;
  std::vector<std::wstring>::pointer v31;
  uint64_t p_size;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  quasar::DataFeedItem *v40;
  quasar::DataFeedItem *v41;
  unint64_t v42;
  std::locale v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  const std::string *v60[3];
  std::string __str;
  const void **p_data;
  _QWORD v63[2];
  _BYTE v64[120];
  uint64_t v65;
  _QWORD v66[21];

  v66[19] = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v63);
  begin = a1->__begin_;
  end = a1->__end_;
  if (end != a1->__begin_)
  {
    do
    {
      v13 = (std::wstring *)((char *)end - 32);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&end[-1], (_QWORD *)end[-1].__r_.__value_.__l.__size_);
      end = v13;
    }
    while (v13 != begin);
  }
  a1->__end_ = begin;
  if (&a1[2] != (std::vector<std::wstring> *)a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 2, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  if (v65)
  {
    v42 = a5;
    v14 = (double)a6;
    v15 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(v63[0] - 24)));
        v16 = std::locale::use_facet(v43, v15);
        v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v43);
        v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v63, (uint64_t)&__str, v17);
        if ((*((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 32) & 5) != 0
          || v42 <= ((char *)a1->__end_ - (char *)a1->__begin_) >> 5)
        {
          quasar::DataFeed::applyRegexEnumerations((quasar::DataFeed *)a1);
          v41 = (quasar::DataFeedItem *)a1->__begin_;
          v40 = (quasar::DataFeedItem *)a1->__end_;
          while (v41 != v40)
          {
            quasar::DataFeedItem::addOSym(v41);
            v41 = (quasar::DataFeedItem *)((char *)v41 + 32);
          }
          if (v65 && !std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)v63 + *(_QWORD *)(v63[0] - 24)), *(_DWORD *)&v64[*(_QWORD *)(v63[0] - 24) + 16] | 4);
          v38 = 1;
          goto LABEL_42;
        }
        std::string::basic_string[abi:ne180100]<0>(v43, "#");
        v19 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v43);
        v20 = v19;
        if ((SBYTE7(v44) & 0x80000000) == 0)
          break;
        operator delete(v43[0].__locale_);
        if (!v20)
          goto LABEL_13;
      }
      if (!v19)
      {
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(v43, "prior=");
        v21 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v43);
        v22 = v21;
        if (SBYTE7(v44) < 0)
        {
          operator delete(v43[0].__locale_);
          if (!v22)
            goto LABEL_20;
        }
        else if (!v21)
        {
          goto LABEL_20;
        }
        std::string::basic_string((std::string *)v43, &__str, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v60);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v43[0].__locale_;
        __str.__r_.__value_.__r.__words[2] = v44;
LABEL_20:
        std::string::basic_string[abi:ne180100]<0>(v43, "\t");
        quasar::splitAndTrim(&__str, (char *)v43, (uint64_t *)v60);
        if (SBYTE7(v44) < 0)
          operator delete(v43[0].__locale_);
        if (v60[1] == v60[0])
        {
          if (quasar::gLogLevel >= 1)
          {
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v52 = 0u;
            v53 = 0u;
            v50 = 0u;
            v51 = 0u;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            *(_OWORD *)&v43[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Prior field out of bound: ", 26);
            std::ostream::operator<<();
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v43);
          }
          v43[0].__locale_ = (std::locale::__imp *)v60;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
          goto LABEL_41;
        }
        v23 = std::stof(v60[0], 0);
        v24 = v15;
        v44 = 0uLL;
        v43[1].__locale_ = (std::locale::__imp *)&v44;
        v25 = pow(v23, v14);
        *(float *)&v43[0].__locale_ = v25;
        v27 = *(std::string **)a3;
        v26 = *(std::string **)(a3 + 8);
        if (*(std::string **)a3 != v26)
        {
          v28 = 1;
          do
          {
            v29 = v60[0];
            p_data = (const void **)&v27[v28 - 1].__r_.__value_.__l.__data_;
            v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v43[1], p_data, (uint64_t)&std::piecewise_construct, (__int128 **)&p_data);
            std::string::operator=((std::string *)(v30 + 7), &v29[v28++]);
          }
          while (&v27[v28 - 1] != v26);
        }
        v31 = a1->__end_;
        if (v31 >= a1->__end_cap_.__value_)
        {
          p_size = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)a1, (uint64_t)v43);
        }
        else
        {
          v31->__r_.__value_.__s.__data_[0] = (std::wstring::value_type)v43[0].__locale_;
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v31->__r_.__value_.__l.__size_, (const void ***)&v43[1]);
          p_size = (uint64_t)&v31[1].__r_.__value_.__l.__size_;
          a1->__end_ = (std::vector<std::wstring>::pointer)((char *)v31 + 32);
        }
        v15 = v24;
        a1->__end_ = (std::vector<std::wstring>::pointer)p_size;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v43[1], (_QWORD *)v44);
        v43[0].__locale_ = (std::locale::__imp *)v60;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)&v43[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Unable to open the file to read: '", 34);
    v34 = *(char *)(a2 + 23);
    if (v34 >= 0)
      v35 = a2;
    else
      v35 = *(_QWORD *)a2;
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(a2 + 23);
    else
      v36 = *(_QWORD *)(a2 + 8);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v43);
  }
LABEL_41:
  v38 = 0;
LABEL_42:
  v63[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v63 + *(_QWORD *)(v63[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v64);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v66);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v38;
}

void sub_1AE038CDC(_Unwind_Exception *a1)
{
  void **v2;
  void *v3[5];
  char v4;
  uint64_t v5;

  v2 = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::ifstream::~ifstream(&v5);
  if (v4 < 0)
    operator delete(v3[3]);
  _Unwind_Resume(a1);
}

void sub_1AE038CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  void *v5[5];
  char v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  __cxa_end_catch();
  v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::ifstream::~ifstream(&v7);
  if (v6 < 0)
    operator delete(v5[3]);
  _Unwind_Resume(a1);
}

void sub_1AE038D00(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE038DC8);
}

void sub_1AE038D40()
{
  JUMPOUT(0x1AE038DC8);
}

void sub_1AE038D48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1AE038DB0);
}

void sub_1AE038D78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  JUMPOUT(0x1AE038DB0);
}

void sub_1AE038D88()
{
  JUMPOUT(0x1AE038DB0);
}

uint64_t quasar::DataFeed::merge(__int128 ***this, const quasar::DataFeed *a2)
{
  __int128 **v4;
  __int128 **v5;
  __int128 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  __int128 **v9;
  __int128 **v10;
  __int128 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  __int128 **v14;
  unint64_t v15;
  __int128 **v16;
  uint64_t *i;
  void *v19[2];
  char v20;
  void *__p;
  __int128 **v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  void **v27;

  v24 = 0u;
  v25 = 0u;
  v26 = 1065353216;
  v4 = *this;
  v5 = this[1];
  if (*this != v5)
  {
    v6 = (__int128 *)(v4 + 2);
    do
    {
      quasar::DataFeedItem::signatureStrWithoutPrior((quasar::DataFeedItem *)v4, &__p);
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v24, (unsigned __int8 *)&__p);
      if (v7)
      {
        *((float *)v7 + 10) = *((float *)v7 + 10) + *(float *)v4;
      }
      else
      {
        v19[0] = &__p;
        v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v24, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v19);
        *((_DWORD *)v8 + 10) = *(_DWORD *)v4;
        if (v4 != (__int128 **)(v8 + 40))
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v8 + 6, v4[1], v6);
      }
      if (SHIBYTE(v23) < 0)
        operator delete(__p);
      v4 += 4;
      v6 += 2;
    }
    while (v4 != v5);
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(&__p, *(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 5);
  v9 = (__int128 **)__p;
  v10 = v22;
  if (__p != v22)
  {
    v11 = (__int128 *)((char *)__p + 16);
    do
    {
      quasar::DataFeedItem::signatureStrWithoutPrior((quasar::DataFeedItem *)v9, v19);
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v24, (unsigned __int8 *)v19);
      if (v12)
      {
        *((float *)v12 + 10) = *((float *)v12 + 10) + *(float *)v9;
      }
      else
      {
        v27 = v19;
        v13 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v24, (unsigned __int8 *)v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v27);
        *((_DWORD *)v13 + 10) = *(_DWORD *)v9;
        if (v9 != (__int128 **)(v13 + 40))
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v13 + 6, v9[1], v11);
      }
      if (v20 < 0)
        operator delete(v19[0]);
      v9 += 4;
      v11 += 2;
    }
    while (v9 != v10);
  }
  v19[0] = &__p;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  v15 = (unint64_t)*this;
  v14 = this[1];
  if (v14 != *this)
  {
    do
    {
      v16 = v14 - 4;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v14 - 3), *(v14 - 2));
      v14 = v16;
    }
    while (v16 != (__int128 **)v15);
  }
  this[1] = (__int128 **)v15;
  for (i = (uint64_t *)v25; i; i = (uint64_t *)*i)
  {
    if (v15 >= (unint64_t)this[2])
    {
      v15 = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)this, (uint64_t)(i + 5));
    }
    else
    {
      *(_DWORD *)v15 = *((_DWORD *)i + 10);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v15 + 8), (const void ***)i + 6);
      v15 += 32;
      this[1] = (__int128 **)v15;
    }
    this[1] = (__int128 **)v15;
  }
  return std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::~__hash_table((uint64_t)&v24);
}

void sub_1AE039028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void quasar::DataFeedFactory::loadDataFeedFromFile(__int128 *a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, __int128 **a7@<X7>, std::vector<std::wstring> *a8@<X8>, uint64_t a9, __int128 *a10)
{
  uint64_t v17;
  int v18;
  _WORD *v19;
  uint64_t v21;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char NT;
  char v28;
  int v29;
  char TSV;
  char v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  quasar::DataFeed::DataFeed((uint64_t)a8, a1, a3, a2, a10, a7, 0.0);
  if (*(char *)(a4 + 23) < 0)
  {
    v21 = *(_QWORD *)(a4 + 8);
    if (v21 != 2)
    {
      if (v21 != 3)
        goto LABEL_19;
      if (**(_WORD **)a4 != 21332 || *(_BYTE *)(*(_QWORD *)a4 + 2) != 86)
        goto LABEL_19;
LABEL_38:
      TSV = quasar::DataFeed::readTSV(a8, a5, (std::vector<std::wstring> *)a7, a6, a2, a3);
      if (quasar::gLogLevel < 1)
        v31 = 1;
      else
        v31 = TSV;
      if ((v31 & 1) == 0)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"An error occurred when reading TSV from: ", 41);
        v33 = *(char *)(a5 + 23);
        if (v33 >= 0)
          v34 = a5;
        else
          v34 = *(_QWORD *)a5;
        if (v33 >= 0)
          v35 = *(unsigned __int8 *)(a5 + 23);
        else
          v35 = *(_QWORD *)(a5 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v36);
      }
      return;
    }
    v19 = *(_WORD **)a4;
  }
  else
  {
    v18 = *(unsigned __int8 *)(a4 + 23);
    v19 = (_WORD *)a4;
    if (v18 != 2)
    {
      if (v18 != 3)
        goto LABEL_19;
      if (*(_WORD *)a4 != 21332 || *(_BYTE *)(a4 + 2) != 86)
        goto LABEL_19;
      goto LABEL_38;
    }
  }
  if (*v19 != 21582)
  {
LABEL_19:
    if (quasar::gLogLevel < 1)
      return;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Invalid DataFeed type ", 22);
    v24 = *(char *)(a4 + 23);
    if (v24 >= 0)
      v25 = a4;
    else
      v25 = *(_QWORD *)a4;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a4 + 23);
    else
      v26 = *(_QWORD *)(a4 + 8);
    goto LABEL_26;
  }
  NT = quasar::DataFeed::readNT(a8, a5, (uint64_t)a7, v17, a2, a3);
  if (quasar::gLogLevel < 1)
    v28 = 1;
  else
    v28 = NT;
  if ((v28 & 1) == 0)
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"An error occurred when reading NT from: ", 40);
    v29 = *(char *)(a5 + 23);
    if (v29 >= 0)
      v25 = a5;
    else
      v25 = *(_QWORD *)a5;
    if (v29 >= 0)
      v26 = *(unsigned __int8 *)(a5 + 23);
    else
      v26 = *(_QWORD *)(a5 + 8);
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v36);
  }
}

void sub_1AE039354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  quasar::DataFeed::~DataFeed(v9);
  _Unwind_Resume(a1);
}

void quasar::DataFeedFactory::mergeDataFeedsByName(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _QWORD *i;
  int *v9;
  quasar::DataFeedItem *v10;
  float v11;
  float *v12;
  float v13;
  float *v14;
  unint64_t v15;
  uint64_t v16;
  std::string __p;
  std::string *p_p;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*(char *)(v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 24), *(_QWORD *)(v3 + 32));
      }
      else
      {
        v5 = *(_OWORD *)(v3 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a2, (unsigned __int8 *)&__p))
      {
        p_p = &__p;
        v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        quasar::DataFeed::merge((__int128 ***)v6 + 5, (const quasar::DataFeed *)v3);
      }
      else
      {
        p_p = &__p;
        v7 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        quasar::DataFeed::operator=((uint64_t)(v7 + 40), v3);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v3 += 160;
    }
    while (v3 != v4);
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    {
      v9 = (int *)i[5];
      v10 = (quasar::DataFeedItem *)i[6];
      if (v9 != (int *)v10)
      {
        v11 = 0.0;
        v12 = (float *)i[5];
        do
        {
          v13 = *v12;
          v12 += 8;
          v11 = v11 + v13;
        }
        while (v12 != (float *)v10);
        v14 = (float *)i[5];
        do
        {
          *v14 = *v14 / v11;
          v14 += 8;
        }
        while (v14 != (float *)v10);
      }
      v15 = 126 - 2 * __clz((v10 - (quasar::DataFeedItem *)v9) >> 5);
      if (v10 == (quasar::DataFeedItem *)v9)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(v9, v10, (uint64_t)&__p, v16, 1);
    }
  }
}

void sub_1AE039524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  }
  else
  {
    std::vector<quasar::DataFeedItem>::__assign_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *> *>>((_QWORD *)(a1 + 112), *(uint64_t **)(a2 + 128), 0);
  }
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

void quasar::DataFeedFactory::fillSpokenFormSection(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  __int128 v4;
  std::string *v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  std::string::size_type size;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *p_str;
  std::string *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  __int128 *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  unsigned __int8 *v29;
  const std::string *v30;
  const std::string *i;
  uint64_t v32;
  std::string *v33;
  char v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  _QWORD *v43;
  int v44;
  const std::string::value_type *v45;
  uint64_t v46;
  _QWORD *v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  quasar::SpokenFormLine *v64;
  quasar::SpokenFormLine *v65;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string *v70;
  uint64_t v71;
  void *v72;
  char v73;
  uint64_t v74;
  void *v75;
  char v76;
  uint64_t v77;
  __int128 __p;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::string __str;
  const std::string *v96;
  const std::string *v97;
  uint64_t v98;
  std::string *v99;
  std::string *v100;
  unint64_t v101;
  std::string v102;
  std::string v103;
  char *v104;
  quasar::SpokenFormLine *v105;
  uint64_t v106;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((quasar::SpokenFormLine *)&v104, *(quasar::SpokenFormLine **)(a1 + 24), *(quasar::SpokenFormLine **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
  v3 = v104;
  v64 = v105;
  if (v104 == (char *)v105)
    goto LABEL_149;
  do
  {
    v65 = (quasar::SpokenFormLine *)v3;
    if (v3[31] < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v3 + 1), *((_QWORD *)v3 + 2));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 3);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v4;
    }
    std::string::basic_string[abi:ne180100]<0>(&v102, "");
    v99 = 0;
    v100 = 0;
    v101 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitAndTrim(&v103, (char *)&__p, (uint64_t *)&v70);
    if (SBYTE7(v79) < 0)
      operator delete((void *)__p);
    v5 = v70;
    v6 = v71;
    while (v5 != (std::string *)v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "$");
      v7 = quasar::startsWith((unsigned __int8 *)v5, (unsigned __int8 *)&__p);
      v8 = v7;
      if (SBYTE7(v79) < 0)
      {
        operator delete((void *)__p);
        if (!v8)
          goto LABEL_63;
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        quasar::splitAndTrim(v5, (char *)&__p, (uint64_t *)&v96);
        if (SBYTE7(v79) < 0)
          operator delete((void *)__p);
        if ((char *)v97 - (char *)v96 == 48)
        {
          if (SHIBYTE(v96->__r_.__value_.__r.__words[2]) < 0)
            size = v96->__r_.__value_.__l.__size_;
          else
            size = HIBYTE(v96->__r_.__value_.__r.__words[2]);
          std::string::basic_string(&__str, v96, 1uLL, size - 1, (std::allocator<char> *)&v69);
          v10 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = v102.__r_.__value_.__l.__size_;
            if (!v102.__r_.__value_.__l.__size_)
              goto LABEL_38;
LABEL_23:
            if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v12 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
            else
              v12 = v11;
            v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v13 = __str.__r_.__value_.__l.__size_;
            if (v12 == v13)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (!memcmp(v102.__r_.__value_.__l.__data_, p_str, v11))
                  goto LABEL_54;
              }
              else
              {
                v15 = &v102;
                while (v15->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
                {
                  v15 = (std::string *)((char *)v15 + 1);
                  p_str = (std::string *)((char *)p_str + 1);
                  if (!--v10)
                    goto LABEL_54;
                }
              }
            }
            if (quasar::gLogLevel >= 5)
            {
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              v87 = 0u;
              v88 = 0u;
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"More than one lists detected in ", 32);
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v17 = &v103;
              else
                v17 = (std::string *)v103.__r_.__value_.__r.__words[0];
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v18 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              else
                v18 = v103.__r_.__value_.__l.__size_;
              v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
              v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", only first list [", 19);
              if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v21 = &v102;
              else
                v21 = (std::string *)v102.__r_.__value_.__r.__words[0];
              if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v22 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
              else
                v22 = v102.__r_.__value_.__l.__size_;
              v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] will be used.", 15);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
            }
          }
          else
          {
            if (*((_BYTE *)&v102.__r_.__value_.__s + 23))
            {
              v11 = v102.__r_.__value_.__l.__size_;
              goto LABEL_23;
            }
LABEL_38:
            std::string::operator=(&v102, &__str);
          }
LABEL_54:
          v24 = (__int128 *)&v96[1];
          v25 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v24);
          }
          else
          {
            if (SHIBYTE(v96[1].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v100, v96[1].__r_.__value_.__l.__data_, v96[1].__r_.__value_.__l.__size_);
            }
            else
            {
              v26 = *v24;
              v100->__r_.__value_.__r.__words[2] = v96[1].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
            }
            v27 = v25 + 1;
          }
          v100 = v27;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_QWORD *)&__p = &v96;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_63;
      }
      if (v7)
        goto LABEL_13;
LABEL_63:
      ++v5;
    }
    *(_QWORD *)&__p = &v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v28 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = v102.__r_.__value_.__l.__size_;
    if (!v28 || v99 == v100)
    {
      v52 = a3[1];
      if (v52 >= a3[2])
      {
        v53 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine const&>(a3, v65);
        v54 = a3;
      }
      else
      {
        quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a3[1], v65);
        v53 = v52 + 112;
        v54 = a3;
        a3[1] = v52 + 112;
      }
      v54[1] = v53;
    }
    else
    {
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&v102);
      if (v29)
      {
        quasar::DataFeed::DataFeed((quasar::DataFeed *)&v70, (const quasar::DataFeed *)(v29 + 40));
        v96 = 0;
        v97 = 0;
        v98 = 0;
        std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(&v96, (uint64_t)v70, v71, (v71 - (uint64_t)v70) >> 5);
        v30 = v96;
        for (i = v97; v30 != i; v30 = (const std::string *)((char *)v30 + 32))
        {
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
          else
            __str = v103;
          v32 = (uint64_t)v99;
          v33 = v100;
          if (v99 == v100)
            goto LABEL_108;
          v34 = 0;
          do
          {
            quasar::DataFeedItem::getField((uint64_t)v30, (const void **)v32, &v69);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
            else
              v35 = v69.__r_.__value_.__l.__size_;
            if (v35)
            {
              std::operator+<char>();
              v36 = std::string::append(&v67, ".");
              v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              v68.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              v38 = *(char *)(v32 + 23);
              if (v38 >= 0)
                v39 = (const std::string::value_type *)v32;
              else
                v39 = *(const std::string::value_type **)v32;
              if (v38 >= 0)
                v40 = *(unsigned __int8 *)(v32 + 23);
              else
                v40 = *(_QWORD *)(v32 + 8);
              v41 = std::string::append(&v68, v39, v40);
              v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              *(_QWORD *)&v79 = *((_QWORD *)&v41->__r_.__value_.__l + 2);
              __p = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              quasar::replaceAll((uint64_t)&__str, (uint64_t)&__p, (char *)&v69);
              if (SBYTE7(v79) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v68.__r_.__value_.__l.__data_);
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v67.__r_.__value_.__l.__data_);
            }
            else
            {
              if (quasar::gLogLevel >= 5)
              {
                v93 = 0u;
                v94 = 0u;
                v91 = 0u;
                v92 = 0u;
                v89 = 0u;
                v90 = 0u;
                v87 = 0u;
                v88 = 0u;
                v85 = 0u;
                v86 = 0u;
                v83 = 0u;
                v84 = 0u;
                v81 = 0u;
                v82 = 0u;
                v79 = 0u;
                v80 = 0u;
                __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Field '", 7);
                v44 = *(char *)(v32 + 23);
                if (v44 >= 0)
                  v45 = (const std::string::value_type *)v32;
                else
                  v45 = *(const std::string::value_type **)v32;
                if (v44 >= 0)
                  v46 = *(unsigned __int8 *)(v32 + 23);
                else
                  v46 = *(_QWORD *)(v32 + 8);
                v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"' does not exist in data feed, skipping.", 40);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
              }
              v34 = 1;
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            v32 += 24;
            if (v35)
              v48 = v32 == (_QWORD)v33;
            else
              v48 = 1;
          }
          while (!v48);
          if ((v34 & 1) == 0)
          {
LABEL_108:
            LODWORD(v68.__r_.__value_.__l.__data_) = v30->__r_.__value_.__l.__data_;
            quasar::SpokenFormLine::SpokenFormLine(&__p, &v68, &__str);
            v49 = a3[1];
            if (v49 >= a3[2])
            {
              v50 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(a3, (const quasar::SpokenFormLine *)&__p);
              v51 = a3;
            }
            else
            {
              quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a3[1], (const quasar::SpokenFormLine *)&__p);
              v50 = v49 + 112;
              v51 = a3;
              a3[1] = v49 + 112;
            }
            v51[1] = v50;
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
            if (SBYTE7(v83) < 0)
              operator delete((void *)v82);
            if (SBYTE7(v81) < 0)
              operator delete((void *)v80);
            if (SHIBYTE(v79) < 0)
              operator delete(*((void **)&__p + 1));
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_QWORD *)&__p = &v96;
        std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&v77);
        if (v76 < 0)
          operator delete(v75);
        *(_QWORD *)&__p = &v74;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v73 < 0)
          operator delete(v72);
        *(_QWORD *)&__p = &v70;
        std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
      else if (quasar::gLogLevel >= 5)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Data feed [", 11);
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v102;
        else
          v56 = (std::string *)v102.__r_.__value_.__r.__words[0];
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        else
          v57 = v102.__r_.__value_.__l.__size_;
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"] is not supplied, skipping the spoken form '", 45);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v103;
        else
          v60 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          v61 = v103.__r_.__value_.__l.__size_;
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
    }
    *(_QWORD *)&__p = &v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v3 = (char *)v65 + 112;
  }
  while ((quasar::SpokenFormLine *)((char *)v65 + 112) != v64);
LABEL_149:
  *(_QWORD *)&__p = &v104;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1AE039E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  __p = a15;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::DataFeedFactory::loadFeedsDataFile(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::locale::id *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  BOOL v7;
  BOOL v8;
  int *v9;
  int *v10;
  int *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  std::locale::__imp *begin;
  std::vector<std::wstring>::pointer end;
  int v27;
  int *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int *v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  std::string v55;
  _QWORD v56[3];
  char v57;
  std::locale v58;
  void *v59;
  char v60;
  __int128 *v61[3];
  void *__p[2];
  __int128 v63;
  void *v64[2];
  __int128 v65;
  void *v66[2];
  void *v67[2];
  __int128 v68;
  __int128 v69;
  void *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  std::string *v79;
  __int128 *v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  _OWORD v87[2];
  int v88;
  std::vector<std::wstring> v89;
  std::string __str;
  void **v91;
  void **v92;
  void **v93;
  _QWORD v94[2];
  _QWORD v95[51];
  _QWORD v96[21];

  v96[19] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v94);
  memset(&v89, 0, sizeof(v89));
  memset(v87, 0, sizeof(v87));
  v88 = 1065353216;
  memset(&v86, 0, sizeof(v86));
  memset(&v85, 0, sizeof(v85));
  memset(&v84, 0, sizeof(v84));
  std::string::basic_string[abi:ne180100]<0>(&v83, "prior");
  memset(&v82, 0, sizeof(v82));
  memset(&v81, 0, sizeof(v81));
  if (v95[15])
  {
    v3 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(v94[0] - 24)));
        v4 = std::locale::use_facet(&v58, v3);
        v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
        std::locale::~locale(&v58);
        v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v94, (uint64_t)&__str, v5);
        if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
          goto LABEL_113;
        std::string::basic_string[abi:ne180100]<0>(__p, "#");
        v7 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p);
        v8 = v7;
        if ((SBYTE7(v63) & 0x80000000) == 0)
          break;
        operator delete(__p[0]);
        if (!v8)
          goto LABEL_8;
      }
      if (!v7)
      {
LABEL_8:
        std::string::basic_string[abi:ne180100]<0>(__p, "\t");
        quasar::splitAndTrim(&__str, (char *)__p, (uint64_t *)&v79);
        if (SBYTE7(v63) < 0)
          operator delete(__p[0]);
        if (v89.__begin_ != v89.__end_)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "name");
          v58.__locale_ = (std::locale::__imp *)__p;
          v9 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v86, &v79[v9[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "type");
          v58.__locale_ = (std::locale::__imp *)__p;
          v10 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v85, &v79[v10[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "url");
          v58.__locale_ = (std::locale::__imp *)__p;
          v11 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v84, &v79[v11[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
          if (quasar::gLogLevel >= 5)
          {
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            v69 = 0u;
            *(_OWORD *)v70 = 0u;
            *(_OWORD *)v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            *(_OWORD *)v66 = 0u;
            v63 = 0u;
            *(_OWORD *)v64 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found feed: ", 12);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v13 = &v86;
            else
              v13 = (std::string *)v86.__r_.__value_.__r.__words[0];
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            else
              size = v86.__r_.__value_.__l.__size_;
            v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = &v85;
            else
              v17 = (std::string *)v85.__r_.__value_.__r.__words[0];
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            else
              v18 = v85.__r_.__value_.__l.__size_;
            v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v84;
            else
              v21 = (std::string *)v84.__r_.__value_.__r.__words[0];
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            else
              v22 = v84.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "limit");
          v23 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v24 = v23;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v24)
              goto LABEL_47;
          }
          else if (!v23)
          {
LABEL_47:
            v29 = 0x7FFFFFFF;
            goto LABEL_48;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "limit");
          v91 = __p;
          v28 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v91);
          v29 = std::stoi(&v79[v28[10]], 0, 10);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
LABEL_48:
          std::string::basic_string[abi:ne180100]<0>(__p, "min_popularity");
          v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v31 = v30;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v31)
              goto LABEL_54;
          }
          else if (!v30)
          {
LABEL_54:
            v33 = 0;
            goto LABEL_55;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "min_popularity");
          v92 = __p;
          v32 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v92);
          v33 = std::stoi(&v79[v32[10]], 0, 10);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
LABEL_55:
          std::string::basic_string[abi:ne180100]<0>(__p, "power_scale");
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v35 = v34;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v35)
              goto LABEL_61;
          }
          else if (!v34)
          {
LABEL_61:
            v37 = 1;
            goto LABEL_62;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "power_scale");
          v93 = __p;
          v36 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v93);
          v37 = std::stoi(&v79[v36[10]], 0, 10);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
LABEL_62:
          MEMORY[0x1AF44C914](&v83, "prior");
          std::string::basic_string[abi:ne180100]<0>(__p, "prior_field");
          v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v39 = v38;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v39)
              goto LABEL_68;
          }
          else if (!v38)
          {
            goto LABEL_68;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "prior_field");
          v58.__locale_ = (std::locale::__imp *)__p;
          v40 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v83, &v79[v40[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
LABEL_68:
          MEMORY[0x1AF44C914](&v82, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "text_fields");
          v41 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v42 = v41;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v42)
              goto LABEL_74;
          }
          else if (!v41)
          {
            goto LABEL_74;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "text_fields");
          v58.__locale_ = (std::locale::__imp *)__p;
          v43 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v82, &v79[v43[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
LABEL_74:
          MEMORY[0x1AF44C914](&v81, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "date_field");
          v44 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          v45 = v44;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v45)
            {
LABEL_80:
              std::string::basic_string[abi:ne180100]<0>(__p, ",");
              quasar::splitAndTrim(&v82, (char *)__p, (uint64_t *)v61);
              if (SBYTE7(v63) < 0)
                operator delete(__p[0]);
              quasar::filesystem::Path::Path(&v58, (__int128 *)a1);
              quasar::filesystem::Path::parent_path((quasar::filesystem::Path *)&v58, __p);
              quasar::filesystem::Path::operator/((uint64_t)__p, (uint64_t)&v84, v56);
              __p[0] = &unk_1E5D343A0;
              if (SHIBYTE(v63) < 0)
                operator delete(__p[1]);
              kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v56, &v55);
              quasar::FeedsDataItem::FeedsDataItem((std::string *)__p, (__int128 *)&v86, v29, v33, v37, (__int128 *)&v85, (__int128 *)&v55, (__int128 *)&v83, v61, (__int128 *)&v81);
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v55.__r_.__value_.__l.__data_);
              v47 = a2[1];
              if (v47 >= a2[2])
              {
                v48 = std::vector<quasar::FeedsDataItem>::__push_back_slow_path<quasar::FeedsDataItem const&>(a2, (const quasar::FeedsDataItem *)__p);
              }
              else
              {
                quasar::FeedsDataItem::FeedsDataItem((std::string *)a2[1], (const quasar::FeedsDataItem *)__p);
                v48 = v47 + 160;
                a2[1] = v47 + 160;
              }
              a2[1] = v48;
              if (SHIBYTE(v71) < 0)
                operator delete(v70[1]);
              v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
              if (SHIBYTE(v68) < 0)
                operator delete(v67[1]);
              if (SHIBYTE(v67[0]) < 0)
                operator delete(v66[0]);
              if (SHIBYTE(v65) < 0)
                operator delete(v64[1]);
              if (SBYTE7(v63) < 0)
                operator delete(__p[0]);
              v56[0] = &unk_1E5D343A0;
              if (v57 < 0)
                operator delete((void *)v56[1]);
              v58.__locale_ = (std::locale::__imp *)&unk_1E5D343A0;
              if (v60 < 0)
                operator delete(v59);
              __p[0] = v61;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_104;
            }
          }
          else if (!v44)
          {
            goto LABEL_80;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "date_field");
          v58.__locale_ = (std::locale::__imp *)__p;
          v46 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
          std::string::operator=(&v81, &v79[v46[10]]);
          if (SBYTE7(v63) < 0)
            operator delete(__p[0]);
          goto LABEL_80;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v89, v79, v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3));
        begin = (std::locale::__imp *)v89.__begin_;
        end = v89.__end_;
        if (v89.__begin_ != v89.__end_)
        {
          v27 = 0;
          do
          {
            v58.__locale_ = begin;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (__int128 **)&v58)+ 10) = v27++;
            begin = (std::locale::__imp *)((char *)begin + 24);
          }
          while (begin != (std::locale::__imp *)end);
        }
LABEL_104:
        __p[0] = &v79;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    *(_OWORD *)v66 = 0u;
    v63 = 0u;
    *(_OWORD *)v64 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read: '", 34);
    v50 = *(char *)(a1 + 23);
    if (v50 >= 0)
      v51 = a1;
    else
      v51 = *(_QWORD *)a1;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a1 + 23);
    else
      v52 = *(_QWORD *)(a1 + 8);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
LABEL_113:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
  __p[0] = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v94[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v94 + *(_QWORD *)(v94[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v95);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v96);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AE03ADAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  void **v48[35];
  void *v49[5];
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62[5];
  char v63;
  void **v64[86];

  v48[0] = v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v48);
  if (v50 < 0)
    operator delete(v49[3]);
  if (v52 < 0)
    operator delete(v51);
  if (v54 < 0)
    operator delete(v53);
  if (v56 < 0)
    operator delete(v55);
  if (v58 < 0)
    operator delete(v57);
  if (v60 < 0)
    operator delete(v59);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v61);
  v48[0] = v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v48);
  std::ifstream::~ifstream(v64);
  if (v63 < 0)
    operator delete(v62[3]);
  std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100](v64);
  _Unwind_Resume(a1);
}

void quasar::FeedsDataItem::~FeedsDataItem(void **this)
{
  void **v2;

  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::DataFeedFactory::loadFeedsDataFile(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  _QWORD *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  void *v31[2];
  __int128 v32;
  _OWORD v33[2];
  void *__p[2];
  __int128 v35;
  _OWORD v36[10];
  char *v37;
  char *v38;
  _QWORD v39[3];
  char v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  quasar::filesystem::Path::Path(v39, a1);
  quasar::DataFeedFactory::loadFeedsDataFile((uint64_t)a1, (uint64_t *)&v37);
  v6 = v38;
  if (v37 != v38)
  {
    v7 = v37 + 87;
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        memset(v36, 0, sizeof(v36));
        *(_OWORD *)__p = 0u;
        v35 = 0u;
        memset(v33, 0, sizeof(v33));
        *(_OWORD *)v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Loading from ", 13);
        if (*v7 < 0)
        {
          std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v7 - 23), *(_QWORD *)(v7 - 15));
        }
        else
        {
          v9 = *(_OWORD *)(v7 - 23);
          v29.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 7);
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
        }
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v29;
        else
          v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          size = v29.__r_.__value_.__l.__size_;
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ... ", 5);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
      }
      if (*(v7 - 64) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v7 - 87), *(_QWORD *)(v7 - 79));
      }
      else
      {
        v13 = *(_OWORD *)(v7 - 87);
        v29.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 71);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
      }
      v14 = *(_DWORD *)(v7 - 63);
      v15 = *(_DWORD *)(v7 - 55);
      if (*(v7 - 24) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v7 - 47), *(_QWORD *)(v7 - 39));
      }
      else
      {
        v16 = *(_OWORD *)(v7 - 47);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 31);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
      }
      if (*v7 < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v7 - 23), *(_QWORD *)(v7 - 15));
      }
      else
      {
        v17 = *(_OWORD *)(v7 - 23);
        v27.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 7);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      }
      if (v7[24] < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v7 + 1), *(_QWORD *)(v7 + 9));
      }
      else
      {
        v18 = *(_OWORD *)(v7 + 1);
        v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 17);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
      }
      memset(&v25, 0, sizeof(v25));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, *(__int128 **)(v7 + 25), *(__int128 **)(v7 + 33), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 33) - *(_QWORD *)(v7 + 25)) >> 3));
      if (v7[72] < 0)
      {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v7 + 49), *(_QWORD *)(v7 + 57));
      }
      else
      {
        v19 = *(_OWORD *)(v7 + 49);
        v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 65);
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
      }
      quasar::DataFeedFactory::loadDataFeedFromFile((__int128 *)&v29, v14, v15, (uint64_t)&v28, (uint64_t)&v27, (uint64_t)&v26, (__int128 **)&v25, (std::vector<std::wstring> *)&v30, v23, a2);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v20 = a3[1];
      if (v20 >= a3[2])
      {
        v21 = std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed const&>(a3, (const quasar::DataFeed *)&v30);
      }
      else
      {
        quasar::DataFeed::DataFeed((quasar::DataFeed *)a3[1], (const quasar::DataFeed *)&v30);
        v21 = v20 + 160;
        a3[1] = v20 + 160;
      }
      a3[1] = v21;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)v36);
      if (SHIBYTE(v35) < 0)
        operator delete(__p[1]);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      if (SHIBYTE(v32) < 0)
        operator delete(v31[1]);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      v22 = v7 + 73;
      v7 += 160;
    }
    while (v22 != v6);
  }
  *(_QWORD *)&v30 = &v37;
  std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v39[0] = &unk_1E5D343A0;
  if (v40 < 0)
    operator delete((void *)v39[1]);
}

void sub_1AE03B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  *(_QWORD *)(v48 - 120) = &unk_1E5D343A0;
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  _Unwind_Resume(a1);
}

void std::vector<quasar::DataFeedItem>::__assign_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<quasar::DataFeedItem>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = v18 - 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v18 - 24, *(_QWORD **)(v18 - 16));
      v18 = v19;
    }
    while (v19 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1AE03B748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AE03B750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::DataFeedItem>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 32;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 *v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = (__int128 *)(a2 + 16);
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      if (v5 != a4)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a4 + 8), *(__int128 **)(v5 + 8), v7);
      v5 += 32;
      a4 += 32;
      v7 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8 + 5, v4 + 5);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1AE03B910(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1AE03B92C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1AE03B990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1AE03BA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *quasar::FeedsDataItem::FeedsDataItem(std::string *this, __int128 *a2, int a3, int a4, int a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 **a9, __int128 *a10)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v17 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v17;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = a4;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a5;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v18 = *a6;
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a6 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v18;
  }
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v19 = *a7;
    this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a7 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v19;
  }
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v20 = *a8;
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a8 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v20;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *a9, a9[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a9[1] - (char *)*a9) >> 3));
  v21 = (std::string *)((char *)this + 136);
  if (*((char *)a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a10, *((_QWORD *)a10 + 1));
  }
  else
  {
    v22 = *a10;
    this[6].__r_.__value_.__l.__size_ = *((_QWORD *)a10 + 2);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  return this;
}

void sub_1AE03BBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;

  v15 = v14;
  a10 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 111) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 63) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine const&>(uint64_t *a1, const quasar::SpokenFormLine *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  quasar::SpokenFormLine *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::SpokenFormLine *)&v10[112 * v4];
  v16 = &v10[112 * v9];
  quasar::SpokenFormLine::SpokenFormLine(v14, a2);
  v15 = (char *)v14 + 112;
  std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(&v13);
  return v11;
}

void sub_1AE03BD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PMRegexEnumerator,std::allocator<quasar::PMRegexEnumerator>,char const(&)[6],std::string const&,std::string&,void>@<X0>(char *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::string const&,std::string&,std::allocator<quasar::PMRegexEnumerator>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AE03BD98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::string const&,std::string&,std::allocator<quasar::PMRegexEnumerator>,0>(_QWORD *a1, char *a2, __int128 *a3, __int128 *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D43050;
  a1[1] = 0;
  std::allocator<quasar::PMRegexEnumerator>::construct[abi:ne180100]<quasar::PMRegexEnumerator,char const(&)[6],std::string const&,std::string&>((int)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AE03BE00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::PMRegexEnumerator>::construct[abi:ne180100]<quasar::PMRegexEnumerator,char const(&)[6],std::string const&,std::string&>(int a1, uint64_t a2, char *__s, __int128 *a4, __int128 *a5)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::PMRegexEnumerator::PMRegexEnumerator(a2, (__int128 *)__p, a4, a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1AE03BED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v14[2];
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  std::map<std::string,std::string>::map[abi:ne180100](v11 + 1, (const void ***)(a2 + 8));
  v15 += 4;
  std::vector<quasar::DataFeedItem>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<quasar::DataFeedItem>::~__split_buffer(v14);
  return v12;
}

void sub_1AE03BFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::DataFeedItem>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::DataFeedItem>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v8 = a3 - 2;
    do
    {
      *(_DWORD *)(v7 - 32) = *((_DWORD *)v8 - 4);
      *(_QWORD *)(v7 - 24) = *(v8 - 1);
      v9 = *v8;
      *(_QWORD *)(v7 - 16) = *v8;
      v10 = v7 - 16;
      v11 = v8[1];
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(v8 - 1) = v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v10;
      }
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 8;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v3 + 8));
      v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **std::__split_buffer<quasar::DataFeedItem>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::DataFeedItem>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::DataFeedItem>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(int *a1, quasar::DataFeedItem *a2, uint64_t a3, uint64_t a4, char a5)
{
  quasar::DataFeedItem *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  quasar::DataFeedItem *v13;
  quasar::DataFeedItem *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  char v19;
  int v20;
  int *v21;
  quasar::DataFeedItem *v22;
  int *v23;

  v7 = a2;
  v8 = a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - (quasar::DataFeedItem *)v8;
    v11 = (v7 - (quasar::DataFeedItem *)v8) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        if (quasar::operator>((quasar::DataFeedItem *)((char *)v7 - 32), (quasar::DataFeedItem *)v8))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v23, (uint64_t *)&v22);
        return;
      case 3uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, v8 + 8, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      case 4uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, v8 + 8, v8 + 16, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      case 5uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, v8 + 8, v8 + 16, v8 + 24, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      default:
        if (v10 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != (int *)v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>((quasar::DataFeedItem *)v8, (int *)v7, (int *)v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (quasar::DataFeedItem *)((char *)v7 - 32);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(&v8[8 * (v11 >> 1)], v8, v13);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v22;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v8, &v8[8 * (v11 >> 1)], v13);
          v14 = v22;
          v15 = 32 * v12 - 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v23 + 8, (int *)((char *)v23 + v15), (quasar::DataFeedItem *)((char *)v22 - 64));
          v16 = 32 * v12 + 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v23 + 16, (int *)((char *)v23 + v16), (quasar::DataFeedItem *)((char *)v14 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((int *)((char *)v23 + v15), &v23[8 * v12], (quasar::DataFeedItem *)((char *)v23 + v16));
          v21 = &v23[8 * v12];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v23, (uint64_t *)&v21);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = quasar::operator>((quasar::DataFeedItem *)(v23 - 8), (quasar::DataFeedItem *)v23);
        v7 = v22;
        if (!v17)
        {
          v8 = (int *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>((uint64_t)v23, v22);
          goto LABEL_20;
        }
LABEL_12:
        v18 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(v23, v7);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v23, (uint64_t)v18);
        v8 = v18 + 8;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v18 + 8, (uint64_t)v7))
        {
          if (v20)
          {
            v23 = v18 + 8;
            goto LABEL_18;
          }
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(v23, v18, a3, -v9, a5 & 1);
          v8 = v18 + 8;
LABEL_20:
          a5 = 0;
          v23 = v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v22 = (quasar::DataFeedItem *)v18;
          v8 = v23;
          v7 = (quasar::DataFeedItem *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(int **a1, uint64_t *a2)
{
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *a1;
  v3 = *a2;
  v10 = **a1;
  v4 = *a1 + 2;
  v5 = v2 + 4;
  v6 = (_QWORD *)*((_QWORD *)v2 + 2);
  v11 = (_QWORD *)*((_QWORD *)v2 + 1);
  v12 = v6;
  v13 = *((_QWORD *)v2 + 3);
  if (v13)
  {
    v6[2] = &v12;
    *v4 = v5;
    *v5 = 0;
    *((_QWORD *)v2 + 3) = 0;
  }
  else
  {
    v11 = &v12;
  }
  *v2 = *(_DWORD *)v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v4, (_QWORD *)(v3 + 8));
  *(_DWORD *)v3 = v10;
  v7 = v3 + 16;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
  *(_QWORD *)(v3 + 8) = v11;
  v8 = v12;
  *(_QWORD *)(v3 + 16) = v12;
  v9 = v13;
  *(_QWORD *)(v3 + 24) = v13;
  if (v9)
  {
    v8[2] = v7;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v8);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(_QWORD *a1, _DWORD *a2)
{
  quasar::DataFeedItem *v4;
  uint64_t v5;
  quasar::DataFeedItem *v6;
  quasar::DataFeedItem *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  if (a1 != (_QWORD *)a2)
  {
    v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (_QWORD *)a2)
    {
      v5 = 0;
      v6 = (quasar::DataFeedItem *)a1;
      do
      {
        v7 = v4;
        if (quasar::operator>(v4, v6))
        {
          v8 = (_QWORD *)((char *)v6 + 48);
          v9 = (_QWORD *)*((_QWORD *)v6 + 6);
          v18 = *(_DWORD *)v7;
          v19 = (_QWORD *)*((_QWORD *)v6 + 5);
          v20 = v9;
          v21 = *((_QWORD *)v6 + 7);
          if (v21)
          {
            v9[2] = &v20;
            *((_QWORD *)v6 + 5) = v8;
            *v8 = 0;
            *((_QWORD *)v6 + 7) = 0;
          }
          else
          {
            v19 = &v20;
          }
          v10 = v5;
          while (1)
          {
            v11 = (char *)a1 + v10;
            *(_DWORD *)((char *)a1 + v10 + 32) = *(_DWORD *)((char *)a1 + v10);
            v12 = (_QWORD *)((char *)a1 + v10 + 8);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)a1 + v10 + 40, v12);
            if (!v10)
              break;
            v10 -= 32;
            if (!quasar::operator>((quasar::DataFeedItem *)&v18, (quasar::DataFeedItem *)(v11 - 32)))
            {
              v13 = (uint64_t)a1 + v10 + 32;
              goto LABEL_13;
            }
          }
          v13 = (uint64_t)a1;
LABEL_13:
          *(_DWORD *)v13 = v18;
          v14 = v13 + 16;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, *(_QWORD **)(v13 + 16));
          v15 = v20;
          *((_QWORD *)v11 + 1) = v19;
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v21;
          *(_QWORD *)(v13 + 24) = v21;
          if (v16)
          {
            v17 = 0;
            v15[2] = v14;
            v19 = &v20;
            v20 = 0;
            v21 = 0;
          }
          else
          {
            *((_QWORD *)v11 + 1) = v14;
            v17 = v20;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, v17);
        }
        v4 = (quasar::DataFeedItem *)((char *)v7 + 32);
        v5 += 32;
        v6 = v7;
      }
      while ((_DWORD *)((char *)v7 + 32) != a2);
    }
  }
}

void sub_1AE03C718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(_QWORD *a1, _DWORD *a2)
{
  quasar::DataFeedItem *v3;
  quasar::DataFeedItem *v4;
  _QWORD *v5;
  quasar::DataFeedItem *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != (_QWORD *)a2)
  {
    v3 = (quasar::DataFeedItem *)a1;
    v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (_QWORD *)a2)
    {
      v5 = a1 + 7;
      do
      {
        v6 = v4;
        if (quasar::operator>(v4, v3))
        {
          v7 = (_QWORD *)((char *)v3 + 48);
          v8 = (_QWORD *)*((_QWORD *)v3 + 6);
          v15 = *(_DWORD *)v6;
          v16 = (_QWORD *)*((_QWORD *)v3 + 5);
          v17 = v8;
          v18 = *((_QWORD *)v3 + 7);
          if (v18)
          {
            v8[2] = &v17;
            *((_QWORD *)v3 + 5) = v7;
            *v7 = 0;
            *((_QWORD *)v3 + 7) = 0;
          }
          else
          {
            v16 = &v17;
          }
          v9 = v5;
          do
          {
            *((_DWORD *)v9 - 6) = *((_DWORD *)v9 - 14);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 - 2), v9 - 6);
            v10 = quasar::operator>((quasar::DataFeedItem *)&v15, (quasar::DataFeedItem *)(v9 - 11));
            v9 -= 4;
          }
          while (v10);
          *((_DWORD *)v9 - 6) = v15;
          v11 = v9 - 1;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v9 - 2), (_QWORD *)*(v9 - 1));
          v12 = v17;
          *(v9 - 2) = v16;
          *(v9 - 1) = v12;
          v13 = v18;
          *v9 = v18;
          if (v13)
          {
            v14 = 0;
            v12[2] = v11;
            v16 = &v17;
            v17 = 0;
            v18 = 0;
          }
          else
          {
            *(v9 - 2) = v11;
            v14 = v17;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v14);
        }
        v4 = (quasar::DataFeedItem *)((char *)v6 + 32);
        v5 += 4;
        v3 = v6;
      }
      while ((_DWORD *)((char *)v6 + 32) != a2);
    }
  }
}

void sub_1AE03C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, quasar::DataFeedItem *a3)
{
  BOOL v5;
  uint64_t result;
  quasar::DataFeedItem **v7;
  quasar::DataFeedItem **v8;
  quasar::DataFeedItem *v9;
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;

  v10 = (quasar::DataFeedItem *)a2;
  v11 = (quasar::DataFeedItem *)a1;
  v9 = a3;
  v5 = quasar::operator>((quasar::DataFeedItem *)a2, (quasar::DataFeedItem *)a1);
  result = quasar::operator>(a3, (quasar::DataFeedItem *)a2);
  if (!v5)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
    if (!quasar::operator>(v10, v11))
      return 1;
    v7 = &v11;
    v8 = &v10;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (!quasar::operator>(v9, v10))
      return 1;
    v7 = &v10;
    v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)v7, (uint64_t *)v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v9);
  return 1;
}

quasar::DataFeedItem *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(uint64_t a1, quasar::DataFeedItem *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  int *v7;
  _BOOL4 v8;
  quasar::DataFeedItem *v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  quasar::DataFeedItem *v15;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  quasar::DataFeedItem *v21;
  quasar::DataFeedItem *v22;

  v21 = a2;
  v22 = (quasar::DataFeedItem *)a1;
  v17 = *(_DWORD *)a1;
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 16);
  v5 = *(_QWORD **)(a1 + 16);
  v18 = *(_QWORD **)(a1 + 8);
  v19 = v5;
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
  {
    v5[2] = &v19;
    *v3 = v4;
    *v4 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    v18 = &v19;
  }
  if (quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)((char *)a2 - 32)))
  {
    v6 = (int *)a1;
    do
    {
      v6 += 8;
      v22 = (quasar::DataFeedItem *)v6;
    }
    while (!quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v6));
  }
  else
  {
    v7 = (int *)(a1 + 32);
    do
    {
      v6 = v7;
      v22 = (quasar::DataFeedItem *)v7;
      if (v7 >= (int *)v21)
        break;
      v8 = quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v7);
      v7 = v6 + 8;
    }
    while (!v8);
  }
  v9 = v21;
  if (v6 < (int *)v21)
  {
    do
    {
      v9 = (quasar::DataFeedItem *)((char *)v9 - 32);
      v21 = v9;
    }
    while (quasar::operator>((quasar::DataFeedItem *)&v17, v9));
    v6 = (int *)v22;
  }
  if (v6 < (int *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v22, (uint64_t *)&v21);
      do
        v22 = (quasar::DataFeedItem *)((char *)v22 + 32);
      while (!quasar::operator>((quasar::DataFeedItem *)&v17, v22));
      do
        v21 = (quasar::DataFeedItem *)((char *)v21 - 32);
      while (quasar::operator>((quasar::DataFeedItem *)&v17, v21));
      v6 = (int *)v22;
    }
    while (v22 < v21);
  }
  if (v6 - 8 != (int *)a1)
  {
    *(_DWORD *)a1 = *(v6 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (_QWORD *)v6 - 3);
  }
  v11 = (_QWORD *)*((_QWORD *)v6 - 2);
  v10 = v6 - 4;
  *(v10 - 4) = v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v10 - 2), v11);
  *((_QWORD *)v10 - 1) = v18;
  v12 = v19;
  *(_QWORD *)v10 = v19;
  v13 = v20;
  *((_QWORD *)v10 + 1) = v20;
  if (v13)
  {
    v14 = 0;
    v12[2] = v10;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *((_QWORD *)v10 - 1) = v10;
    v14 = v19;
  }
  v15 = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v14);
  return v15;
}

void sub_1AE03CB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(_QWORD *a1, quasar::DataFeedItem *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  quasar::DataFeedItem *v7;
  quasar::DataFeedItem *v8;
  _BOOL4 v9;
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  quasar::DataFeedItem *v23;
  quasar::DataFeedItem *v24;

  v19 = *(_DWORD *)a1;
  v3 = a1 + 1;
  v4 = a1 + 2;
  v5 = (_QWORD *)a1[2];
  v20 = (_QWORD *)a1[1];
  v21 = v5;
  v22 = a1[3];
  v23 = a2;
  if (v22)
  {
    v5[2] = &v21;
    *v3 = v4;
    *v4 = 0;
    a1[3] = 0;
  }
  else
  {
    v20 = &v21;
  }
  v6 = 0;
  do
  {
    v24 = (quasar::DataFeedItem *)&a1[v6 + 4];
    v6 += 4;
  }
  while (quasar::operator>(v24, (quasar::DataFeedItem *)&v19));
  v7 = v23;
  if (v6 == 4)
  {
    v10 = (quasar::DataFeedItem *)(a1 + 4);
    do
    {
      if (v10 >= v7)
        break;
      v7 = (quasar::DataFeedItem *)((char *)v7 - 32);
      v23 = v7;
    }
    while (!quasar::operator>(v7, (quasar::DataFeedItem *)&v19));
  }
  else
  {
    v8 = (quasar::DataFeedItem *)((char *)v23 - 32);
    do
    {
      v23 = v8;
      v9 = quasar::operator>(v8, (quasar::DataFeedItem *)&v19);
      v8 = (quasar::DataFeedItem *)((char *)v8 - 32);
    }
    while (!v9);
    v10 = v24;
  }
  v11 = v10;
  if (v10 < v23)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v24, (uint64_t *)&v23);
      do
        v24 = (quasar::DataFeedItem *)((char *)v24 + 32);
      while (quasar::operator>(v24, (quasar::DataFeedItem *)&v19));
      do
        v23 = (quasar::DataFeedItem *)((char *)v23 - 32);
      while (!quasar::operator>(v23, (quasar::DataFeedItem *)&v19));
      v11 = v24;
    }
    while (v24 < v23);
  }
  v12 = (char *)v11 - 32;
  if ((_QWORD *)((char *)v11 - 32) != a1)
  {
    *(_DWORD *)a1 = *((_DWORD *)v11 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (_QWORD *)v11 - 3);
  }
  v14 = (_QWORD *)*((_QWORD *)v11 - 2);
  v13 = (_QWORD *)((char *)v11 - 16);
  *((_DWORD *)v13 - 4) = v19;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v20;
  v15 = v21;
  *v13 = v21;
  v16 = v22;
  v13[1] = v22;
  if (v16)
  {
    v17 = 0;
    v15[2] = v13;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(v13 - 1) = v13;
    v17 = v21;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v17);
  return v12;
}

void sub_1AE03CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, uint64_t a2)
{
  _BOOL8 v4;
  int *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  int v16;
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;

  v20 = (_QWORD *)a2;
  v21 = a1;
  v4 = 1;
  switch((a2 - (uint64_t)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v20 = (_QWORD *)(a2 - 32);
      if (quasar::operator>((quasar::DataFeedItem *)(a2 - 32), (quasar::DataFeedItem *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v21, (uint64_t *)&v20);
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, a1 + 24, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    default:
      v5 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a1 + 16));
      v6 = a1 + 24;
      if (a1 + 24 == (int *)a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!quasar::operator>((quasar::DataFeedItem *)v6, (quasar::DataFeedItem *)v5))
  {
LABEL_17:
    v5 = (int *)v6;
    v6 += 4;
    if (v6 == v20)
      return 1;
  }
  v16 = *(_DWORD *)v6;
  v8 = v6 + 2;
  v9 = (_QWORD *)v6[2];
  v17 = (_QWORD **)v6[1];
  v18 = v9;
  v19 = v6[3];
  if (v19)
  {
    v9[2] = &v18;
    v6[1] = v8;
    *v8 = 0;
    v6[3] = 0;
  }
  else
  {
    v17 = &v18;
  }
  do
  {
    v10 = v5;
    v5[8] = *v5;
    v11 = (uint64_t)(v5 + 2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 10), (_QWORD *)v5 + 1);
    if (v5 == v21)
      break;
    v5 -= 8;
  }
  while (quasar::operator>((quasar::DataFeedItem *)&v16, (quasar::DataFeedItem *)(v10 - 8)));
  *v10 = v16;
  v12 = v10 + 4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, *((_QWORD **)v10 + 2));
  *((_QWORD *)v10 + 1) = v17;
  v13 = v18;
  *((_QWORD *)v10 + 2) = v18;
  v14 = v19;
  *((_QWORD *)v10 + 3) = v19;
  if (v14)
  {
    v13[2] = v12;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *((_QWORD *)v10 + 1) = v12;
  }
  if (++v7 != 8)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
    goto LABEL_17;
  }
  v4 = v6 + 4 == v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
  return v4;
}

void sub_1AE03CF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, quasar::DataFeedItem *a4)
{
  quasar::DataFeedItem *v8;
  quasar::DataFeedItem *v9;
  quasar::DataFeedItem *v10;
  int *v11;

  v10 = (quasar::DataFeedItem *)a2;
  v11 = a1;
  v8 = a4;
  v9 = (quasar::DataFeedItem *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a2, (quasar::DataFeedItem *)a3);
  if (quasar::operator>(a4, (quasar::DataFeedItem *)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v9, (uint64_t *)&v8);
    if (quasar::operator>(v9, (quasar::DataFeedItem *)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
      if (quasar::operator>(v10, (quasar::DataFeedItem *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v11, (uint64_t *)&v10);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, int *a4, quasar::DataFeedItem *a5)
{
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;
  quasar::DataFeedItem *v12;
  quasar::DataFeedItem *v13;
  int *v14;

  v13 = (quasar::DataFeedItem *)a2;
  v14 = a1;
  v11 = (quasar::DataFeedItem *)a4;
  v12 = (quasar::DataFeedItem *)a3;
  v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a2, a3, (quasar::DataFeedItem *)a4);
  if (quasar::operator>(a5, (quasar::DataFeedItem *)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (quasar::operator>(v11, (quasar::DataFeedItem *)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v12, (uint64_t *)&v11);
      if (quasar::operator>(v12, (quasar::DataFeedItem *)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v13, (uint64_t *)&v12);
        if (quasar::operator>(v13, (quasar::DataFeedItem *)a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v14, (uint64_t *)&v13);
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>(quasar::DataFeedItem *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  quasar::DataFeedItem *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  quasar::DataFeedItem *v13;
  unint64_t v14;
  int *v17;
  quasar::DataFeedItem *v18;

  v18 = a1;
  if (a1 != (quasar::DataFeedItem *)a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_QWORD *)((char *)a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((uint64_t)v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = (quasar::DataFeedItem *)v6;
      do
      {
        if (quasar::operator>(v13, v18))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((uint64_t)v18, a4, v9, v18);
        }
        v13 = (quasar::DataFeedItem *)(v17 + 8);
        v17 = (int *)v13;
      }
      while (v13 != (quasar::DataFeedItem *)a3);
      v7 = v18;
      v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 33)
    {
      v14 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,quasar::DataFeedItem *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 -= 8;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      v9 = ((uint64_t)a4 - a1) >> 4;
      v10 = v9 + 1;
      v11 = (_QWORD *)(a1 + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && quasar::operator>((quasar::DataFeedItem *)(a1 + 32 * (v9 + 1)), (quasar::DataFeedItem *)(v11 + 4)))
      {
        v11 += 4;
        v10 = v12;
      }
      if (!quasar::operator>((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)v5))
      {
        v22 = *(_DWORD *)v5;
        v13 = v5 + 2;
        v14 = (_QWORD *)v5[2];
        v23 = (_QWORD *)v5[1];
        v24 = v14;
        v25 = v5[3];
        if (v25)
        {
          v14[2] = &v24;
          v5[1] = v13;
          *v13 = 0;
          v5[3] = 0;
        }
        else
        {
          v23 = &v24;
        }
        do
        {
          v15 = v11;
          v16 = v11 + 1;
          *(_DWORD *)v5 = *(_DWORD *)v11;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 1), v11 + 1);
          if (v7 < v10)
            break;
          v17 = (2 * v10) | 1;
          v11 = (_QWORD *)(a1 + 32 * v17);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v17;
          }
          else if (quasar::operator>((quasar::DataFeedItem *)(a1 + 32 * v17), (quasar::DataFeedItem *)(v11 + 4)))
          {
            v11 += 4;
          }
          else
          {
            v10 = v17;
          }
          v5 = v15;
        }
        while (!quasar::operator>((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)&v22));
        *(_DWORD *)v15 = v22;
        v18 = v15 + 2;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, (_QWORD *)v15[2]);
        v15[1] = v23;
        v19 = v24;
        v15[2] = v24;
        v20 = v25;
        v15[3] = v25;
        if (v20)
        {
          v21 = 0;
          v19[2] = v18;
          v23 = &v24;
          v24 = 0;
          v25 = 0;
        }
        else
        {
          *v16 = v18;
          v21 = v24;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23, v21);
      }
    }
  }
}

void sub_1AE03D3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, a13);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;

  if (a4 >= 2)
  {
    v19 = *(_DWORD *)a1;
    v7 = (_QWORD *)(a1 + 16);
    v8 = *(_QWORD **)(a1 + 16);
    v20 = *(_QWORD ***)(a1 + 8);
    v21 = v8;
    v22 = *(_QWORD *)(a1 + 24);
    if (v22)
    {
      v8[2] = &v21;
      *(_QWORD *)(a1 + 8) = v7;
      *v7 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    else
    {
      v20 = &v21;
    }
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((_DWORD *)a1, a3, a4);
    v10 = v9;
    v11 = (_QWORD *)(v9 + 8);
    if (v9 == a2 - 32)
    {
      *(_DWORD *)v9 = v19;
      v16 = (_QWORD *)(v9 + 16);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9 + 8, *(_QWORD **)(v9 + 16));
      *(_QWORD *)(v10 + 8) = v20;
      v17 = v21;
      *v16 = v21;
      v18 = v22;
      *(_QWORD *)(v10 + 24) = v22;
      if (v18)
      {
        v17[2] = v16;
        v20 = &v21;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        *v11 = v16;
      }
    }
    else
    {
      *(_DWORD *)v9 = *(_DWORD *)(a2 - 32);
      v12 = v9 + 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(v9 + 8, (_QWORD *)(a2 - 24));
      *(_DWORD *)(a2 - 32) = v19;
      v13 = a2 - 16;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 - 24, *(_QWORD **)(a2 - 16));
      v14 = v21;
      *(_QWORD *)(a2 - 24) = v20;
      v15 = v22;
      *(_QWORD *)(a2 - 16) = v14;
      *(_QWORD *)(a2 - 8) = v15;
      if (v15)
      {
        v14[2] = v13;
        v20 = &v21;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        *(_QWORD *)(a2 - 24) = v13;
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, v12, a3, (v12 - a1) >> 5);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21);
  }
}

void sub_1AE03D590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)&a1[8 * v5 + 8];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && quasar::operator>((quasar::DataFeedItem *)&a1[8 * v5 + 8], (quasar::DataFeedItem *)&a1[8 * v5 + 16]))
    {
      v8 += 32;
      v9 = v10;
    }
    *a1 = *(_DWORD *)v8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(a1 + 2), (_QWORD *)(v8 + 8));
    a1 = (_DWORD *)v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (_QWORD *)(a1 + 32 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 32);
    if (quasar::operator>((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)(a2 - 32)))
    {
      v10 = (_QWORD *)(a2 - 16);
      v11 = *(_QWORD **)(a2 - 16);
      v17 = *(_DWORD *)(a2 - 32);
      v18 = *(_QWORD **)(a2 - 24);
      v19 = v11;
      v20 = *(_QWORD *)(a2 - 8);
      if (v20)
      {
        v11[2] = &v19;
        *(_QWORD *)(a2 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a2 - 8) = 0;
      }
      else
      {
        v18 = &v19;
      }
      do
      {
        v12 = v8;
        v13 = v8 + 1;
        *v9 = *(_DWORD *)v8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 + 2), v8 + 1);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD *)(a1 + 32 * v7);
        v9 = v12;
      }
      while (quasar::operator>((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)&v17));
      *(_DWORD *)v12 = v17;
      v14 = v12 + 2;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (_QWORD *)v12[2]);
      v15 = v19;
      v12[1] = v18;
      v12[2] = v15;
      v16 = v20;
      v12[3] = v20;
      if (v16)
      {
        v15[2] = v14;
        v18 = &v19;
        v19 = 0;
        v20 = 0;
        v15 = 0;
      }
      else
      {
        *v13 = v14;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v15);
    }
  }
}

void sub_1AE03D790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(int *a1, quasar::DataFeedItem *a2, uint64_t a3, uint64_t a4, char a5)
{
  quasar::DataFeedItem *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  quasar::DataFeedItem *v13;
  quasar::DataFeedItem *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  char v19;
  int v20;
  int *v21;
  quasar::DataFeedItem *v22;
  int *v23;

  v7 = a2;
  v8 = a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - (quasar::DataFeedItem *)v8;
    v11 = (v7 - (quasar::DataFeedItem *)v8) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        if (quasar::operator<((quasar::DataFeedItem *)((char *)v7 - 32), (quasar::DataFeedItem *)v8))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v23, (uint64_t *)&v22);
        return;
      case 3uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, v8 + 8, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      case 4uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, v8 + 8, v8 + 16, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      case 5uLL:
        v22 = (quasar::DataFeedItem *)((char *)v7 - 32);
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, v8 + 8, v8 + 16, v8 + 24, (quasar::DataFeedItem *)((char *)v7 - 32));
        return;
      default:
        if (v10 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != (int *)v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>((quasar::DataFeedItem *)v8, (int *)v7, (int *)v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (quasar::DataFeedItem *)((char *)v7 - 32);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(&v8[8 * (v11 >> 1)], v8, v13);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v22;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v8, &v8[8 * (v11 >> 1)], v13);
          v14 = v22;
          v15 = 32 * v12 - 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v23 + 8, (int *)((char *)v23 + v15), (quasar::DataFeedItem *)((char *)v22 - 64));
          v16 = 32 * v12 + 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v23 + 16, (int *)((char *)v23 + v16), (quasar::DataFeedItem *)((char *)v14 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((int *)((char *)v23 + v15), &v23[8 * v12], (quasar::DataFeedItem *)((char *)v23 + v16));
          v21 = &v23[8 * v12];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v23, (uint64_t *)&v21);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = quasar::operator<((quasar::DataFeedItem *)(v23 - 8), (quasar::DataFeedItem *)v23);
        v7 = v22;
        if (!v17)
        {
          v8 = (int *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>((uint64_t)v23, v22);
          goto LABEL_20;
        }
LABEL_12:
        v18 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(v23, v7);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v23, (uint64_t)v18);
        v8 = v18 + 8;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v18 + 8, (uint64_t)v7))
        {
          if (v20)
          {
            v23 = v18 + 8;
            goto LABEL_18;
          }
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(v23, v18, a3, -v9, a5 & 1);
          v8 = v18 + 8;
LABEL_20:
          a5 = 0;
          v23 = v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v22 = (quasar::DataFeedItem *)v18;
          v8 = v23;
          v7 = (quasar::DataFeedItem *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(_QWORD *a1, _DWORD *a2)
{
  quasar::DataFeedItem *v4;
  uint64_t v5;
  quasar::DataFeedItem *v6;
  quasar::DataFeedItem *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  if (a1 != (_QWORD *)a2)
  {
    v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (_QWORD *)a2)
    {
      v5 = 0;
      v6 = (quasar::DataFeedItem *)a1;
      do
      {
        v7 = v4;
        if (quasar::operator<(v4, v6))
        {
          v8 = (_QWORD *)((char *)v6 + 48);
          v9 = (_QWORD *)*((_QWORD *)v6 + 6);
          v18 = *(_DWORD *)v7;
          v19 = (_QWORD *)*((_QWORD *)v6 + 5);
          v20 = v9;
          v21 = *((_QWORD *)v6 + 7);
          if (v21)
          {
            v9[2] = &v20;
            *((_QWORD *)v6 + 5) = v8;
            *v8 = 0;
            *((_QWORD *)v6 + 7) = 0;
          }
          else
          {
            v19 = &v20;
          }
          v10 = v5;
          while (1)
          {
            v11 = (char *)a1 + v10;
            *(_DWORD *)((char *)a1 + v10 + 32) = *(_DWORD *)((char *)a1 + v10);
            v12 = (_QWORD *)((char *)a1 + v10 + 8);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)a1 + v10 + 40, v12);
            if (!v10)
              break;
            v10 -= 32;
            if (!quasar::operator<((quasar::DataFeedItem *)&v18, (quasar::DataFeedItem *)(v11 - 32)))
            {
              v13 = (uint64_t)a1 + v10 + 32;
              goto LABEL_13;
            }
          }
          v13 = (uint64_t)a1;
LABEL_13:
          *(_DWORD *)v13 = v18;
          v14 = v13 + 16;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, *(_QWORD **)(v13 + 16));
          v15 = v20;
          *((_QWORD *)v11 + 1) = v19;
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v21;
          *(_QWORD *)(v13 + 24) = v21;
          if (v16)
          {
            v17 = 0;
            v15[2] = v14;
            v19 = &v20;
            v20 = 0;
            v21 = 0;
          }
          else
          {
            *((_QWORD *)v11 + 1) = v14;
            v17 = v20;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, v17);
        }
        v4 = (quasar::DataFeedItem *)((char *)v7 + 32);
        v5 += 32;
        v6 = v7;
      }
      while ((_DWORD *)((char *)v7 + 32) != a2);
    }
  }
}

void sub_1AE03DBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(_QWORD *a1, _DWORD *a2)
{
  quasar::DataFeedItem *v3;
  quasar::DataFeedItem *v4;
  _QWORD *v5;
  quasar::DataFeedItem *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != (_QWORD *)a2)
  {
    v3 = (quasar::DataFeedItem *)a1;
    v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (_QWORD *)a2)
    {
      v5 = a1 + 7;
      do
      {
        v6 = v4;
        if (quasar::operator<(v4, v3))
        {
          v7 = (_QWORD *)((char *)v3 + 48);
          v8 = (_QWORD *)*((_QWORD *)v3 + 6);
          v15 = *(_DWORD *)v6;
          v16 = (_QWORD *)*((_QWORD *)v3 + 5);
          v17 = v8;
          v18 = *((_QWORD *)v3 + 7);
          if (v18)
          {
            v8[2] = &v17;
            *((_QWORD *)v3 + 5) = v7;
            *v7 = 0;
            *((_QWORD *)v3 + 7) = 0;
          }
          else
          {
            v16 = &v17;
          }
          v9 = v5;
          do
          {
            *((_DWORD *)v9 - 6) = *((_DWORD *)v9 - 14);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 - 2), v9 - 6);
            v10 = quasar::operator<((quasar::DataFeedItem *)&v15, (quasar::DataFeedItem *)(v9 - 11));
            v9 -= 4;
          }
          while (v10);
          *((_DWORD *)v9 - 6) = v15;
          v11 = v9 - 1;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v9 - 2), (_QWORD *)*(v9 - 1));
          v12 = v17;
          *(v9 - 2) = v16;
          *(v9 - 1) = v12;
          v13 = v18;
          *v9 = v18;
          if (v13)
          {
            v14 = 0;
            v12[2] = v11;
            v16 = &v17;
            v17 = 0;
            v18 = 0;
          }
          else
          {
            *(v9 - 2) = v11;
            v14 = v17;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v14);
        }
        v4 = (quasar::DataFeedItem *)((char *)v6 + 32);
        v5 += 4;
        v3 = v6;
      }
      while ((_DWORD *)((char *)v6 + 32) != a2);
    }
  }
}

void sub_1AE03DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, quasar::DataFeedItem *a3)
{
  BOOL v5;
  uint64_t result;
  quasar::DataFeedItem **v7;
  quasar::DataFeedItem **v8;
  quasar::DataFeedItem *v9;
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;

  v10 = (quasar::DataFeedItem *)a2;
  v11 = (quasar::DataFeedItem *)a1;
  v9 = a3;
  v5 = quasar::operator<((quasar::DataFeedItem *)a2, (quasar::DataFeedItem *)a1);
  result = quasar::operator<(a3, (quasar::DataFeedItem *)a2);
  if (!v5)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
    if (!quasar::operator<(v10, v11))
      return 1;
    v7 = &v11;
    v8 = &v10;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (!quasar::operator<(v9, v10))
      return 1;
    v7 = &v10;
    v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)v7, (uint64_t *)v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v9);
  return 1;
}

quasar::DataFeedItem *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(uint64_t a1, quasar::DataFeedItem *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  int *v7;
  _BOOL4 v8;
  quasar::DataFeedItem *v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  quasar::DataFeedItem *v15;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  quasar::DataFeedItem *v21;
  quasar::DataFeedItem *v22;

  v21 = a2;
  v22 = (quasar::DataFeedItem *)a1;
  v17 = *(_DWORD *)a1;
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 16);
  v5 = *(_QWORD **)(a1 + 16);
  v18 = *(_QWORD **)(a1 + 8);
  v19 = v5;
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
  {
    v5[2] = &v19;
    *v3 = v4;
    *v4 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    v18 = &v19;
  }
  if (quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)((char *)a2 - 32)))
  {
    v6 = (int *)a1;
    do
    {
      v6 += 8;
      v22 = (quasar::DataFeedItem *)v6;
    }
    while (!quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v6));
  }
  else
  {
    v7 = (int *)(a1 + 32);
    do
    {
      v6 = v7;
      v22 = (quasar::DataFeedItem *)v7;
      if (v7 >= (int *)v21)
        break;
      v8 = quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v7);
      v7 = v6 + 8;
    }
    while (!v8);
  }
  v9 = v21;
  if (v6 < (int *)v21)
  {
    do
    {
      v9 = (quasar::DataFeedItem *)((char *)v9 - 32);
      v21 = v9;
    }
    while (quasar::operator<((quasar::DataFeedItem *)&v17, v9));
    v6 = (int *)v22;
  }
  if (v6 < (int *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v22, (uint64_t *)&v21);
      do
        v22 = (quasar::DataFeedItem *)((char *)v22 + 32);
      while (!quasar::operator<((quasar::DataFeedItem *)&v17, v22));
      do
        v21 = (quasar::DataFeedItem *)((char *)v21 - 32);
      while (quasar::operator<((quasar::DataFeedItem *)&v17, v21));
      v6 = (int *)v22;
    }
    while (v22 < v21);
  }
  if (v6 - 8 != (int *)a1)
  {
    *(_DWORD *)a1 = *(v6 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (_QWORD *)v6 - 3);
  }
  v11 = (_QWORD *)*((_QWORD *)v6 - 2);
  v10 = v6 - 4;
  *(v10 - 4) = v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v10 - 2), v11);
  *((_QWORD *)v10 - 1) = v18;
  v12 = v19;
  *(_QWORD *)v10 = v19;
  v13 = v20;
  *((_QWORD *)v10 + 1) = v20;
  if (v13)
  {
    v14 = 0;
    v12[2] = v10;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *((_QWORD *)v10 - 1) = v10;
    v14 = v19;
  }
  v15 = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v14);
  return v15;
}

void sub_1AE03DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(_QWORD *a1, quasar::DataFeedItem *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  quasar::DataFeedItem *v7;
  quasar::DataFeedItem *v8;
  _BOOL4 v9;
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  quasar::DataFeedItem *v23;
  quasar::DataFeedItem *v24;

  v19 = *(_DWORD *)a1;
  v3 = a1 + 1;
  v4 = a1 + 2;
  v5 = (_QWORD *)a1[2];
  v20 = (_QWORD *)a1[1];
  v21 = v5;
  v22 = a1[3];
  v23 = a2;
  if (v22)
  {
    v5[2] = &v21;
    *v3 = v4;
    *v4 = 0;
    a1[3] = 0;
  }
  else
  {
    v20 = &v21;
  }
  v6 = 0;
  do
  {
    v24 = (quasar::DataFeedItem *)&a1[v6 + 4];
    v6 += 4;
  }
  while (quasar::operator<(v24, (quasar::DataFeedItem *)&v19));
  v7 = v23;
  if (v6 == 4)
  {
    v10 = (quasar::DataFeedItem *)(a1 + 4);
    do
    {
      if (v10 >= v7)
        break;
      v7 = (quasar::DataFeedItem *)((char *)v7 - 32);
      v23 = v7;
    }
    while (!quasar::operator<(v7, (quasar::DataFeedItem *)&v19));
  }
  else
  {
    v8 = (quasar::DataFeedItem *)((char *)v23 - 32);
    do
    {
      v23 = v8;
      v9 = quasar::operator<(v8, (quasar::DataFeedItem *)&v19);
      v8 = (quasar::DataFeedItem *)((char *)v8 - 32);
    }
    while (!v9);
    v10 = v24;
  }
  v11 = v10;
  if (v10 < v23)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v24, (uint64_t *)&v23);
      do
        v24 = (quasar::DataFeedItem *)((char *)v24 + 32);
      while (quasar::operator<(v24, (quasar::DataFeedItem *)&v19));
      do
        v23 = (quasar::DataFeedItem *)((char *)v23 - 32);
      while (!quasar::operator<(v23, (quasar::DataFeedItem *)&v19));
      v11 = v24;
    }
    while (v24 < v23);
  }
  v12 = (char *)v11 - 32;
  if ((_QWORD *)((char *)v11 - 32) != a1)
  {
    *(_DWORD *)a1 = *((_DWORD *)v11 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (_QWORD *)v11 - 3);
  }
  v14 = (_QWORD *)*((_QWORD *)v11 - 2);
  v13 = (_QWORD *)((char *)v11 - 16);
  *((_DWORD *)v13 - 4) = v19;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v20;
  v15 = v21;
  *v13 = v21;
  v16 = v22;
  v13[1] = v22;
  if (v16)
  {
    v17 = 0;
    v15[2] = v13;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(v13 - 1) = v13;
    v17 = v21;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v17);
  return v12;
}

void sub_1AE03E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, uint64_t a2)
{
  _BOOL8 v4;
  int *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  int v16;
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;

  v20 = (_QWORD *)a2;
  v21 = a1;
  v4 = 1;
  switch((a2 - (uint64_t)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v20 = (_QWORD *)(a2 - 32);
      if (quasar::operator<((quasar::DataFeedItem *)(a2 - 32), (quasar::DataFeedItem *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v21, (uint64_t *)&v20);
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, a1 + 24, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    default:
      v5 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a1 + 16));
      v6 = a1 + 24;
      if (a1 + 24 == (int *)a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!quasar::operator<((quasar::DataFeedItem *)v6, (quasar::DataFeedItem *)v5))
  {
LABEL_17:
    v5 = (int *)v6;
    v6 += 4;
    if (v6 == v20)
      return 1;
  }
  v16 = *(_DWORD *)v6;
  v8 = v6 + 2;
  v9 = (_QWORD *)v6[2];
  v17 = (_QWORD **)v6[1];
  v18 = v9;
  v19 = v6[3];
  if (v19)
  {
    v9[2] = &v18;
    v6[1] = v8;
    *v8 = 0;
    v6[3] = 0;
  }
  else
  {
    v17 = &v18;
  }
  do
  {
    v10 = v5;
    v5[8] = *v5;
    v11 = (uint64_t)(v5 + 2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 10), (_QWORD *)v5 + 1);
    if (v5 == v21)
      break;
    v5 -= 8;
  }
  while (quasar::operator<((quasar::DataFeedItem *)&v16, (quasar::DataFeedItem *)(v10 - 8)));
  *v10 = v16;
  v12 = v10 + 4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, *((_QWORD **)v10 + 2));
  *((_QWORD *)v10 + 1) = v17;
  v13 = v18;
  *((_QWORD *)v10 + 2) = v18;
  v14 = v19;
  *((_QWORD *)v10 + 3) = v19;
  if (v14)
  {
    v13[2] = v12;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *((_QWORD *)v10 + 1) = v12;
  }
  if (++v7 != 8)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
    goto LABEL_17;
  }
  v4 = v6 + 4 == v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
  return v4;
}

void sub_1AE03E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, quasar::DataFeedItem *a4)
{
  quasar::DataFeedItem *v8;
  quasar::DataFeedItem *v9;
  quasar::DataFeedItem *v10;
  int *v11;

  v10 = (quasar::DataFeedItem *)a2;
  v11 = a1;
  v8 = a4;
  v9 = (quasar::DataFeedItem *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a2, (quasar::DataFeedItem *)a3);
  if (quasar::operator<(a4, (quasar::DataFeedItem *)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v9, (uint64_t *)&v8);
    if (quasar::operator<(v9, (quasar::DataFeedItem *)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
      if (quasar::operator<(v10, (quasar::DataFeedItem *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v11, (uint64_t *)&v10);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, int *a4, quasar::DataFeedItem *a5)
{
  quasar::DataFeedItem *v10;
  quasar::DataFeedItem *v11;
  quasar::DataFeedItem *v12;
  quasar::DataFeedItem *v13;
  int *v14;

  v13 = (quasar::DataFeedItem *)a2;
  v14 = a1;
  v11 = (quasar::DataFeedItem *)a4;
  v12 = (quasar::DataFeedItem *)a3;
  v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a2, a3, (quasar::DataFeedItem *)a4);
  if (quasar::operator<(a5, (quasar::DataFeedItem *)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (quasar::operator<(v11, (quasar::DataFeedItem *)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v12, (uint64_t *)&v11);
      if (quasar::operator<(v12, (quasar::DataFeedItem *)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v13, (uint64_t *)&v12);
        if (quasar::operator<(v13, (quasar::DataFeedItem *)a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v14, (uint64_t *)&v13);
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>(quasar::DataFeedItem *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  quasar::DataFeedItem *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  quasar::DataFeedItem *v13;
  unint64_t v14;
  int *v17;
  quasar::DataFeedItem *v18;

  v18 = a1;
  if (a1 != (quasar::DataFeedItem *)a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_QWORD *)((char *)a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((uint64_t)v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = (quasar::DataFeedItem *)v6;
      do
      {
        if (quasar::operator<(v13, v18))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((uint64_t)v18, a4, v9, v18);
        }
        v13 = (quasar::DataFeedItem *)(v17 + 8);
        v17 = (int *)v13;
      }
      while (v13 != (quasar::DataFeedItem *)a3);
      v7 = v18;
      v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 33)
    {
      v14 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::DataFeedItem *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 -= 8;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      v9 = ((uint64_t)a4 - a1) >> 4;
      v10 = v9 + 1;
      v11 = (_QWORD *)(a1 + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && quasar::operator<((quasar::DataFeedItem *)(a1 + 32 * (v9 + 1)), (quasar::DataFeedItem *)(v11 + 4)))
      {
        v11 += 4;
        v10 = v12;
      }
      if (!quasar::operator<((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)v5))
      {
        v22 = *(_DWORD *)v5;
        v13 = v5 + 2;
        v14 = (_QWORD *)v5[2];
        v23 = (_QWORD *)v5[1];
        v24 = v14;
        v25 = v5[3];
        if (v25)
        {
          v14[2] = &v24;
          v5[1] = v13;
          *v13 = 0;
          v5[3] = 0;
        }
        else
        {
          v23 = &v24;
        }
        do
        {
          v15 = v11;
          v16 = v11 + 1;
          *(_DWORD *)v5 = *(_DWORD *)v11;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 1), v11 + 1);
          if (v7 < v10)
            break;
          v17 = (2 * v10) | 1;
          v11 = (_QWORD *)(a1 + 32 * v17);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v17;
          }
          else if (quasar::operator<((quasar::DataFeedItem *)(a1 + 32 * v17), (quasar::DataFeedItem *)(v11 + 4)))
          {
            v11 += 4;
          }
          else
          {
            v10 = v17;
          }
          v5 = v15;
        }
        while (!quasar::operator<((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)&v22));
        *(_DWORD *)v15 = v22;
        v18 = v15 + 2;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, (_QWORD *)v15[2]);
        v15[1] = v23;
        v19 = v24;
        v15[2] = v24;
        v20 = v25;
        v15[3] = v25;
        if (v20)
        {
          v21 = 0;
          v19[2] = v18;
          v23 = &v24;
          v24 = 0;
          v25 = 0;
        }
        else
        {
          *v16 = v18;
          v21 = v24;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23, v21);
      }
    }
  }
}

void sub_1AE03E8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, a13);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;

  if (a4 >= 2)
  {
    v19 = *(_DWORD *)a1;
    v7 = (_QWORD *)(a1 + 16);
    v8 = *(_QWORD **)(a1 + 16);
    v20 = *(_QWORD ***)(a1 + 8);
    v21 = v8;
    v22 = *(_QWORD *)(a1 + 24);
    if (v22)
    {
      v8[2] = &v21;
      *(_QWORD *)(a1 + 8) = v7;
      *v7 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    else
    {
      v20 = &v21;
    }
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((_DWORD *)a1, a3, a4);
    v10 = v9;
    v11 = (_QWORD *)(v9 + 8);
    if (v9 == a2 - 32)
    {
      *(_DWORD *)v9 = v19;
      v16 = (_QWORD *)(v9 + 16);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9 + 8, *(_QWORD **)(v9 + 16));
      *(_QWORD *)(v10 + 8) = v20;
      v17 = v21;
      *v16 = v21;
      v18 = v22;
      *(_QWORD *)(v10 + 24) = v22;
      if (v18)
      {
        v17[2] = v16;
        v20 = &v21;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        *v11 = v16;
      }
    }
    else
    {
      *(_DWORD *)v9 = *(_DWORD *)(a2 - 32);
      v12 = v9 + 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(v9 + 8, (_QWORD *)(a2 - 24));
      *(_DWORD *)(a2 - 32) = v19;
      v13 = a2 - 16;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 - 24, *(_QWORD **)(a2 - 16));
      v14 = v21;
      *(_QWORD *)(a2 - 24) = v20;
      v15 = v22;
      *(_QWORD *)(a2 - 16) = v14;
      *(_QWORD *)(a2 - 8) = v15;
      if (v15)
      {
        v14[2] = v13;
        v20 = &v21;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        *(_QWORD *)(a2 - 24) = v13;
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, v12, a3, (v12 - a1) >> 5);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21);
  }
}

void sub_1AE03EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)&a1[8 * v5 + 8];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && quasar::operator<((quasar::DataFeedItem *)&a1[8 * v5 + 8], (quasar::DataFeedItem *)&a1[8 * v5 + 16]))
    {
      v8 += 32;
      v9 = v10;
    }
    *a1 = *(_DWORD *)v8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(a1 + 2), (_QWORD *)(v8 + 8));
    a1 = (_DWORD *)v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (_QWORD *)(a1 + 32 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 32);
    if (quasar::operator<((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)(a2 - 32)))
    {
      v10 = (_QWORD *)(a2 - 16);
      v11 = *(_QWORD **)(a2 - 16);
      v17 = *(_DWORD *)(a2 - 32);
      v18 = *(_QWORD **)(a2 - 24);
      v19 = v11;
      v20 = *(_QWORD *)(a2 - 8);
      if (v20)
      {
        v11[2] = &v19;
        *(_QWORD *)(a2 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a2 - 8) = 0;
      }
      else
      {
        v18 = &v19;
      }
      do
      {
        v12 = v8;
        v13 = v8 + 1;
        *v9 = *(_DWORD *)v8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 + 2), v8 + 1);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD *)(a1 + 32 * v7);
        v9 = v12;
      }
      while (quasar::operator<((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)&v17));
      *(_DWORD *)v12 = v17;
      v14 = v12 + 2;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (_QWORD *)v12[2]);
      v15 = v19;
      v12[1] = v18;
      v12[2] = v15;
      v16 = v20;
      v12[3] = v20;
      if (v16)
      {
        v15[2] = v14;
        v18 = &v19;
        v19 = 0;
        v20 = 0;
        v15 = 0;
      }
      else
      {
        *v13 = v14;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v15);
    }
  }
}

void sub_1AE03EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AE03EF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;
  char *v13;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  v13 = v8 + 56;
  *((_OWORD *)v13 - 1) = 0u;
  *((_QWORD *)v13 - 1) = v13;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE03F038(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AE03F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xC8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::DataFeed>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AE03F380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::DataFeed>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  quasar::DataFeed::DataFeed((quasar::DataFeed *)&this[1]);
  return this;
}

void sub_1AE03F3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 159) < 0)
    operator delete(*(void **)(a2 + 136));
  v3 = (void **)(a2 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<quasar::FeedsDataItem>::__push_back_slow_path<quasar::FeedsDataItem const&>(uint64_t *a1, const quasar::FeedsDataItem *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xCCCCCCCCCCCCCCLL)
    v9 = 0x199999999999999;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[160 * v4];
  v16 = &v10[160 * v9];
  quasar::FeedsDataItem::FeedsDataItem(v14, a2);
  v15 = &v14[6].__r_.__value_.__s.__data_[16];
  std::vector<quasar::FeedsDataItem>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer(&v13);
  return v11;
}

void sub_1AE03F644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *quasar::FeedsDataItem::FeedsDataItem(std::string *this, const quasar::FeedsDataItem *a2)
{
  __int128 v4;
  std::string::size_type v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v8;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  v9 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 19);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1AE03F7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 111) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 87) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::FeedsDataItem>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 160);
      *(_QWORD *)(v7 - 144) = *(_QWORD *)(a3 - 144);
      *(_OWORD *)(v7 - 160) = v8;
      *(_QWORD *)(a3 - 152) = 0;
      *(_QWORD *)(a3 - 144) = 0;
      *(_QWORD *)(a3 - 160) = 0;
      v9 = *(_QWORD *)(a3 - 136);
      *(_DWORD *)(v7 - 128) = *(_DWORD *)(a3 - 128);
      *(_QWORD *)(v7 - 136) = v9;
      v10 = *(_OWORD *)(a3 - 120);
      *(_QWORD *)(v7 - 104) = *(_QWORD *)(a3 - 104);
      *(_OWORD *)(v7 - 120) = v10;
      *(_QWORD *)(a3 - 112) = 0;
      *(_QWORD *)(a3 - 104) = 0;
      *(_QWORD *)(a3 - 120) = 0;
      v11 = *(_OWORD *)(a3 - 96);
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = v11;
      *(_QWORD *)(a3 - 96) = 0;
      *(_QWORD *)(a3 - 88) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v12 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v12;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v13 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = v13;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v19 + 1) - 160;
      *((_QWORD *)&v19 + 1) -= 160;
      a3 -= 160;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](v3, v1);
      v1 += 160;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::FeedsDataItem>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::FeedsDataItem>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 160;
    std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](v4, i - 160);
  }
}

uint64_t std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed const&>(uint64_t *a1, const quasar::DataFeed *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  quasar::DataFeed *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xCCCCCCCCCCCCCCLL)
    v9 = 0x199999999999999;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::DataFeed *)&v10[160 * v4];
  v16 = &v10[160 * v9];
  quasar::DataFeed::DataFeed(v14, a2);
  v15 = (char *)v14 + 160;
  std::vector<quasar::DataFeed>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::DataFeed>::~__split_buffer(&v13);
  return v11;
}

void sub_1AE03FBB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::DataFeed>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void TIntegrityChecker::operator()(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  char v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v10;

  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 3) != 2)
    goto LABEL_8;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) != a2)
  {
    if ((v3 & 4) == 0)
    {
      loggableUnicode(*(unsigned int **)(a2 + 16), __p);
      if (v10 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      tknPrintf("Error: %s : Non-terminal is used but not defined\n", v4, v5);
      goto LABEL_13;
    }
LABEL_8:
    v6 = 0;
    goto LABEL_16;
  }
  loggableUnicode(*(unsigned int **)(a2 + 16), __p);
  if (v10 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  tknPrintf("Error: %s : Top symbol cannot be used on right hand side of rules\n", v7, v8);
LABEL_13:
  if (v10 < 0)
    operator delete(__p[0]);
  v6 = 1;
LABEL_16:
  a1[8] |= v6;
}

void sub_1AE03FCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TGrammarCompiler::TGrammarCompiler(TGrammarCompiler *this, const TLocaleInfo *a2)
{
  TGrammar *v4;
  TLexerLexicon *v5;

  *(_QWORD *)this = &off_1E5D16A78;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = (TGrammar *)operator new();
  TGrammar::TGrammar(v4, a2);
  *((_QWORD *)this + 7) = v4;
  v5 = (TLexerLexicon *)operator new();
  TLexerLexicon::TLexerLexicon(v5, a2);
  TLexerLexicon::addString(v5, 96, 17, 0);
  TLexerLexicon::addString(v5, 34, 2, 1);
  TLexerLexicon::addString(v5, 39, 2, 2);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"<", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"<", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)">", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)">", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"=", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"!", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"|", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"&", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"*", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"/", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"-", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"+", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"%", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"^", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)":", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"!", 26);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)".", 3);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)",", 8);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"$", 9);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)";", 10);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"=", 11);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"{", 14);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"}", 13);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"[", 15);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"]", 16);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"|", 12);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"?", 25);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"(", 6);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)")", 7);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"i", 18);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"e", 19);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"f", 20);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)dword_1AE1939D4, 21);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)dword_1AE1939EC, 21);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)dword_1AE1939FC, 23);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"R", 24);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"e", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"n", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"g", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"l", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"g", 5);
  TLexerLexicon::addLiteral((uint64_t)v5, (uint64_t)"l", 5);
  TLexerLexicon::addRegExp((uint64_t)v5, (__int32 *)"\\", 4);
  TLexerLexicon::addRegExp((uint64_t)v5, (__int32 *)"[", 1);
  TLexerLexicon::doneAdding((TRegExp **)v5);
  *((_QWORD *)this + 8) = v5;
}

void sub_1AE040110(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  MEMORY[0x1AF44D190](v2, 0x30C40773F8FACLL);
  v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void TGrammarCompiler::~TGrammarCompiler(TGrammarCompiler *this)
{
  TGrammar *v2;
  TLexerLexicon *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  void *v11;

  *(_QWORD *)this = &off_1E5D16A78;
  v2 = (TGrammar *)*((_QWORD *)this + 7);
  if (v2)
  {
    TGrammar::~TGrammar(v2);
    MEMORY[0x1AF44D190]();
  }
  v3 = (TLexerLexicon *)*((_QWORD *)this + 8);
  if (v3)
  {
    TLexerLexicon::~TLexerLexicon(v3);
    MEMORY[0x1AF44D190]();
  }
  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        MEMORY[0x1AF44D190](v7, 0x1092C40D41393B2);
        v5 = *((_QWORD *)this + 1);
        v4 = *((_QWORD *)this + 2);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  v9 = (_BYTE *)*((_QWORD *)this + 5);
  if (v9 == v8)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 5);
    if (v9)
    {
LABEL_18:
      *((_QWORD *)this + 5) = v8;
      operator delete(v8);
    }
  }
  else
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)&v8[8 * v10])
      {
        MEMORY[0x1AF44D160](*(_QWORD *)&v8[8 * v10], 0x1000C8052888210);
        v8 = (_BYTE *)*((_QWORD *)this + 4);
        v9 = (_BYTE *)*((_QWORD *)this + 5);
      }
      ++v10;
    }
    while (v10 < (v9 - v8) >> 3);
    if (v8)
      goto LABEL_18;
  }
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 2) = v11;
    operator delete(v11);
  }
}

{
  TGrammarCompiler::~TGrammarCompiler(this);
  JUMPOUT(0x1AF44D190);
}

void TGrammarCompiler::registerFunction(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v14 = (_QWORD *)operator new();
  TFunctionDescr::TFunctionDescr(v14, a2, a3, a4, a5, a6, a7);
  v15 = a1[3];
  v16 = (_QWORD *)a1[2];
  if ((unint64_t)v16 >= v15)
  {
    v18 = a1[1];
    v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = v14;
    v17 = v24 + 8;
    v27 = (char *)a1[1];
    v26 = (char *)a1[2];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)a1[1];
    }
    a1[1] = v24;
    a1[2] = v17;
    a1[3] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = v14;
    v17 = v16 + 1;
  }
  a1[2] = v17;
}

void sub_1AE040410(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1092C40D41393B2);
  _Unwind_Resume(a1);
}

void TGrammarCompiler::loadRule(uint64_t *a1, TLexer *a2, uint64_t a3)
{
  uint64_t Token;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int32 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  void *v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  int v39;
  _DWORD *v40;
  const __int32 *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  void *v61;
  const char *v62;
  _QWORD *v63;
  int v64;
  void **v65;
  uint64_t v66;
  void **v67;
  void *v68;
  const char *v69;
  _QWORD *v70;
  char *v71;
  const char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  void *p_p;
  const char *v77;
  _QWORD *exception;
  uint64_t v79;
  void *v80;
  const char *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::exception_vtbl *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89[2];
  char v90;
  std::exception v91[2];
  char v92;
  char v93;
  void *__p;
  __int128 v95;
  _BYTE v96[7];
  char v97;
  char v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  unint64_t v104;
  uint64_t *v105;
  _QWORD *v106[130];
  _BYTE v107[64];
  void *v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  Token = nextToken(a2, (uint64_t)a2);
  if (*(_QWORD *)Token != 1)
  {
    loggableToken((uint64_t)a2);
    if (v95 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    tknPrintf("Error: %sExpected a rule symbol\n", v75, p_p);
    if (SHIBYTE(v95) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(v108, "");
    TException::TException(&__p, (__int128 *)v108);
    __p = &unk_1E5D16AB0;
    if (v97 >= 0)
      v77 = (const char *)&v95;
    else
      v77 = (const char *)v95;
    conditionalAssert(v77, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 855);
    TException::~TException((std::exception *)&__p);
    if (SBYTE7(v109) < 0)
      operator delete(v108[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(exception, (__int128 *)&__p);
    *exception = &unk_1E5D16AB0;
  }
  v88 = *(_QWORD *)(Token + 16);
  v87 = TGrammar::addNonTerminal(a1[7], *(__int32 **)(Token + 8), 1);
  if (*(_QWORD *)nextToken(a2, v7) != 11)
  {
    loggableToken((uint64_t)a2);
    if (v95 >= 0)
      v80 = &__p;
    else
      v80 = __p;
    tknPrintf("Error: %sExpected '=' after LHS\n", v79, v80);
    if (SHIBYTE(v95) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(v108, "");
    TException::TException(&__p, (__int128 *)v108);
    __p = &unk_1E5D16AB0;
    if (v97 >= 0)
      v81 = (const char *)&v95;
    else
      v81 = (const char *)v95;
    conditionalAssert(v81, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 867);
    TException::~TException((std::exception *)&__p);
    if (SBYTE7(v109) < 0)
      operator delete(v108[0]);
    v82 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(v82, (__int128 *)&__p);
    *v82 = &unk_1E5D16AB0;
  }
  v9 = 0;
  v10 = 0;
  v106[1] = 0;
  v106[0] = 0;
  v105 = (uint64_t *)v106;
  v103 = 0;
  v102 = 0;
  v104 = 0;
  v139 = 0u;
  v138 = 0u;
  v137 = 0u;
  v136 = 0u;
  v135 = 0u;
  v134 = 0u;
  v133 = 0u;
  v132 = 0u;
  v131 = 0u;
  v130 = 0u;
  v129 = 0u;
  v128 = 0u;
  v127 = 0u;
  v126 = 0u;
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  *(_OWORD *)v108 = 0u;
  v100 = 0;
  v99 = 0;
  v101 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        v11 = nextToken(a2, v8);
        v12 = v11;
        v13 = *(_QWORD *)v11;
        if (*(uint64_t *)v11 > 11)
          break;
        if (v13 == 1)
        {
          v108[v9] = TGrammar::addNonTerminal(a1[7], *(__int32 **)(v11 + 8), 0);
          __p = *(void **)(v12 + 8);
          std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(&v105, (const __int32 **)&__p, (uint64_t *)&__p);
        }
        else
        {
          if (v13 != 2)
            goto LABEL_117;
          __p = v96;
          v95 = xmmword_1AE1418C0;
          v98 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v11 + 8), (uint64_t)&__p, 0, 0);
          v14 = a1[7];
          if (*((_QWORD *)&v95 + 1) >= (unint64_t)v95)
          {
            if (v98)
            {
              LODWORD(v91[0].__vftable) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v95 + 1), (int *)v91, 1uLL);
              v15 = (__int32 *)__p;
              --*((_QWORD *)&v95 + 1);
            }
            else
            {
              v15 = (__int32 *)__p;
              if ((_QWORD)v95)
                *((_DWORD *)__p + v95 - 1) = 0;
            }
          }
          else
          {
            v15 = (__int32 *)__p;
            *((_DWORD *)__p + *((_QWORD *)&v95 + 1)) = 0;
          }
          v108[v9] = TGrammar::addTerminal(v14, v15);
          if (v98 && __p != v96 && __p)
            MEMORY[0x1AF44D160]();
        }
LABEL_20:
        if (a3 && *(_QWORD *)v12 != 1)
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD, BOOL, void **))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(v12 + 8), *(_QWORD *)v12 == 17, &v99))
          {
            if (v101 >= 0)
              v71 = (char *)&v99;
            else
              v71 = (char *)v99;
            std::string::basic_string[abi:ne180100]<0>(v91, v71);
            TException::TException(&__p, (__int128 *)v91);
            __p = &unk_1E5D16BC8;
            if (v97 >= 0)
              v72 = (const char *)&v95;
            else
              v72 = (const char *)v95;
            conditionalAssert(v72, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 910);
            TException::~TException((std::exception *)&__p);
            if (v92 < 0)
              operator delete(v91[0].__vftable);
            v73 = __cxa_allocate_exception(0x20uLL);
            if (v101 >= 0)
              v74 = (char *)&v99;
            else
              v74 = (char *)v99;
            std::string::basic_string[abi:ne180100]<0>(&__p, v74);
            TException::TException(v73, (__int128 *)&__p);
            *v73 = &unk_1E5D16BC8;
          }
          v17 = HIBYTE(v101);
          if (v101 < 0)
            v17 = v100;
          if (v17)
          {
            loggableToken((uint64_t)a2);
            v19 = &__p;
            if (v95 < 0)
              v19 = __p;
            v20 = &v99;
            if (v101 < 0)
              v20 = v99;
            tknPrintf("Warning: %s%s\n", v18, v19, v20);
            if (SHIBYTE(v95) < 0)
              operator delete(__p);
          }
        }
        v107[v9] = 0;
        v21 = (_QWORD *)nextToken(a2, v16);
        v22 = (_QWORD *)*((_QWORD *)a2 + 3);
        if (*v21 == 25)
        {
          v106[v10 + 66] = v22;
          v106[v10++ + 2] = (_QWORD *)v9;
        }
        else if (v22)
        {
          *((_QWORD *)a2 + 3) = (char *)v22 - 1;
        }
        ++v9;
      }
      if (v13 == 17)
      {
        v108[v9] = TGrammar::addTerminal(a1[7], *(__int32 **)(v11 + 8));
        goto LABEL_20;
      }
      if (v13 != 12 && v13 != 14)
      {
LABEL_117:
        loggableToken((uint64_t)a2);
        v64 = SHIBYTE(v95);
        v65 = (void **)__p;
        loggableUnicode(*(unsigned int **)(v12 + 8), v91);
        v67 = &__p;
        if (v64 < 0)
          v67 = v65;
        if (v92 >= 0)
          v68 = v91;
        else
          v68 = v91[0].__vftable;
        tknPrintf("Error: %sUnexpected RHS symbol '%s'\n", v66, v67, v68);
        if (v92 < 0)
          operator delete(v91[0].__vftable);
        if (SHIBYTE(v95) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(v91, "");
        TException::TException(&__p, (__int128 *)v91);
        __p = &unk_1E5D16AB0;
        if (v97 >= 0)
          v69 = (const char *)&v95;
        else
          v69 = (const char *)v95;
        conditionalAssert(v69, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 985);
        TException::~TException((std::exception *)&__p);
        if (v92 < 0)
          operator delete(v91[0].__vftable);
        v70 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v70, (__int128 *)&__p);
        *v70 = &unk_1E5D16AB0;
      }
      v24 = 0;
      if (v9)
      {
        while (v107[v24])
        {
          if (v9 == ++v24)
            goto LABEL_106;
        }
      }
      if (v24 == v9)
      {
LABEL_106:
        loggableToken((uint64_t)a2);
        if (v95 >= 0)
          v61 = &__p;
        else
          v61 = __p;
        tknPrintf("Error: %sRight hand side must consist of at least one non-optional symbol\n", v60, v61);
        if (SHIBYTE(v95) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(v91, "");
        TException::TException(&__p, (__int128 *)v91);
        __p = &unk_1E5D16AB0;
        if (v97 >= 0)
          v62 = (const char *)&v95;
        else
          v62 = (const char *)v95;
        conditionalAssert(v62, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 951);
        TException::~TException((std::exception *)&__p);
        if (v92 < 0)
          operator delete(v91[0].__vftable);
        v63 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v63, (__int128 *)&__p);
        *v63 = &unk_1E5D16AB0;
      }
      v25 = TGrammar::addRule(a1[7], v88, (uint64_t)v87, v108, v107, v9);
      v26 = v25;
      v27 = (char *)v103;
      if ((unint64_t)v103 >= v104)
      {
        v29 = ((_BYTE *)v103 - (_BYTE *)v102) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = (uint64_t)(v104 - (_QWORD)v102) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if (v104 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v30;
        if (v8)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v104, v8);
        else
          v31 = 0;
        v32 = &v31[8 * v29];
        *(_QWORD *)v32 = v26;
        v28 = v32 + 8;
        v33 = (char *)v103;
        v34 = (char *)v102;
        if (v103 != v102)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          v33 = (char *)v102;
        }
        v102 = v32;
        v103 = v28;
        v104 = (unint64_t)&v31[8 * v8];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v103 = v25;
        v28 = v27 + 8;
      }
      v103 = v28;
      if (!v10)
        break;
      *((_QWORD *)a2 + 3) = v106[--v10 + 66];
      v36 = v106[v10 + 2];
      v9 = (size_t)v36 + 1;
      v107[(_QWORD)v36] = 1;
    }
    v9 = 0;
  }
  while (*(_QWORD *)v12 != 14);
  v37 = *((_QWORD *)a2 + 3);
  if (v37)
    *((_QWORD *)a2 + 3) = v37 - 1;
  __p = v96;
  v95 = xmmword_1AE1418C0;
  v98 = 1;
  compileCode(a2, &__p, (uint64_t)&v105, a1 + 1);
  v38 = *((_QWORD *)&v95 + 1);
  v39 = DWORD2(v95) + 1;
  if ((unint64_t)(*((_QWORD *)&v95 + 1) + 1) >= 0x7FFFFFFF)
  {
    loggableToken((uint64_t)a2);
    if (v92 >= 0)
      v84 = v91;
    else
      v84 = v91[0].__vftable;
    tknPrintf("Error: %sRule is too large\n", v83, v84);
    if (v92 < 0)
      operator delete(v91[0].__vftable);
    std::string::basic_string[abi:ne180100]<0>(v89, "");
    TException::TException(v91, (__int128 *)v89);
    v91[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v93 >= 0)
      v85 = (std::exception_vtbl *)&v91[1];
    else
      v85 = v91[1].__vftable;
    conditionalAssert((const char *)v85, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 1007);
    TException::~TException(v91);
    if (v90 < 0)
      operator delete(v89[0]);
    v86 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v91, "");
    TException::TException(v86, (__int128 *)v91);
    *v86 = &unk_1E5D16AB0;
  }
  v40 = (_DWORD *)operator new[]();
  *v40 = v39;
  if (*((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    if (v98)
    {
      LODWORD(v91[0].__vftable) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v95 + 1), (int *)v91, 1uLL);
      v41 = (const __int32 *)__p;
      --*((_QWORD *)&v95 + 1);
    }
    else
    {
      v41 = (const __int32 *)__p;
      if ((_QWORD)v95)
        *((_DWORD *)__p + v95 - 1) = 0;
    }
  }
  else
  {
    v41 = (const __int32 *)__p;
    *((_DWORD *)__p + *((_QWORD *)&v95 + 1)) = 0;
  }
  wmemcpy(v40 + 1, v41, v38);
  v42 = a1[6];
  v43 = (_QWORD *)a1[5];
  if ((unint64_t)v43 >= v42)
  {
    v45 = a1[4];
    v46 = ((uint64_t)v43 - v45) >> 3;
    if ((unint64_t)(v46 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v47 = v42 - v45;
    v48 = v47 >> 2;
    if (v47 >> 2 <= (unint64_t)(v46 + 1))
      v48 = v46 + 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 6), v49);
    else
      v50 = 0;
    v51 = &v50[8 * v46];
    v52 = &v50[8 * v49];
    *(_QWORD *)v51 = v40;
    v44 = v51 + 8;
    v54 = (char *)a1[4];
    v53 = (char *)a1[5];
    if (v53 != v54)
    {
      do
      {
        v55 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *((_QWORD *)v51 - 1) = v55;
        v51 -= 8;
      }
      while (v53 != v54);
      v53 = (char *)a1[4];
    }
    a1[4] = (uint64_t)v51;
    a1[5] = (uint64_t)v44;
    a1[6] = (uint64_t)v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v43 = v40;
    v44 = v43 + 1;
  }
  a1[5] = (uint64_t)v44;
  v56 = (uint64_t *)v102;
  if (v103 != v102)
  {
    v57 = ((_BYTE *)v103 - (_BYTE *)v102) >> 3;
    if (v57 <= 1)
      v57 = 1;
    do
    {
      v58 = *v56++;
      *(_QWORD *)(v58 + 40) = v40;
      --v57;
    }
    while (v57);
  }
  if (v98)
  {
    if (__p != v96 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
  if (SHIBYTE(v101) < 0)
    operator delete(v99);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  std::__tree<int>::destroy((uint64_t)&v105, v106[0]);
}

void sub_1AE04116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::exception a27)
{
  void *v27;
  int v28;
  std::exception_vtbl *v29;
  void *v31;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v28)
  {
LABEL_6:
    if (LOBYTE(STACK[0x490]) && a27.__vftable != v29 && a27.__vftable)
      MEMORY[0x1AF44D160]();
    if (SLOBYTE(STACK[0x4AF]) < 0)
      operator delete((void *)STACK[0x498]);
    v31 = (void *)STACK[0x4B0];
    if (STACK[0x4B0])
    {
      STACK[0x4B8] = (unint64_t)v31;
      operator delete(v31);
    }
    std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_1AE0412A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  void *v35;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x4AF]) < 0)
        operator delete((void *)STACK[0x498]);
      v35 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v35;
        operator delete(v35);
      }
      std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void sub_1AE0412F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v30;
  int v31;
  void *v34;
  uint64_t v35;
  void *v36;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        v34 = __cxa_begin_catch(a1);
        loggableToken(v29);
        (*(void (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        tknPrintf("Error : %s%s\n", v35);
        if (a29 < 0)
          operator delete(__p);
        __cxa_rethrow();
      }
      if (SLOBYTE(STACK[0x4AF]) < 0)
        operator delete((void *)STACK[0x498]);
      v36 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v36;
        operator delete(v36);
      }
      std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_1AE041350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::exception a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  void *v35;
  uint64_t v36;
  void *v37;

  TException::~TException(&a27);
  if (a25 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v35 = __cxa_begin_catch(a1);
    loggableToken(v32);
    (*(void (**)(void *))(*(_QWORD *)v35 + 16))(v35);
    tknPrintf("Error : %s%s\n", v36);
    if (a32 < 0)
      operator delete(a27.__vftable);
    __cxa_rethrow();
  }
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  v37 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v37;
    operator delete(v37);
  }
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_1AE041398()
{
  JUMPOUT(0x1AE0413A0);
}

#error "1AE041468: call analysis failed (funcsize=31)"

void sub_1AE0413E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v33;
  uint64_t v34;

  if (LOBYTE(STACK[0x490]))
    TClitics::isValidRoot((uint64_t *)&a24, v30);
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    loggableToken(v29);
    (*(void (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    tknPrintf("Error : %s%s\n", v34);
    if (a29 < 0)
      operator delete(a24);
    __cxa_rethrow();
  }
  JUMPOUT(0x1AE0414C0);
}

void sub_1AE041404()
{
  JUMPOUT(0x1AE0414ECLL);
}

void sub_1AE04140C()
{
  JUMPOUT(0x1AE041414);
}

void sub_1AE041484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v30;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  v30 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v30;
    operator delete(v30);
  }
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_1AE0414AC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE0414ECLL);
}

void sub_1AE04176C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

_QWORD *compileCode(TLexer *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  nextToken(a1, (uint64_t)a2);
  while (1)
  {
    result = (_QWORD *)nextToken(a1, v8);
    if (*result == 13)
      break;
    v10 = *((_QWORD *)a1 + 3);
    if (v10)
      *((_QWORD *)a1 + 3) = v10 - 1;
    compileInstruction(a1, a2, a3, a4);
  }
  return result;
}

void TGrammarCompiler::loadRules(uint64_t *a1, TLexer *a2, uint64_t a3)
{
  while (*((_QWORD *)a2 + 3) < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
    TGrammarCompiler::loadRule(a1, a2, a3);
}

void sub_1AE041D00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AE041D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1AE041D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16)
{
  TException::~TException(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void TGrammarCompiler::registerRules(uint64_t a1, TInputStream *this, uint64_t a3)
{
  _QWORD *exception;
  __int128 v7[7];

  if (*((_BYTE *)this + 8))
  {
    if (TInputStream::verifyVersion(this, "GrammarFormatVersion", 2uLL, 2uLL, 2uLL))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "");
      TException::TException(exception, v7);
      *exception = &unk_1E5D16668;
    }
    TLexer::TLexer((TLexer *)v7, this, 1uLL, *(const TLexerLexicon **)(a1 + 64), 0);
    TGrammarCompiler::loadRules((uint64_t *)a1, (TLexer *)v7, a3);
    TLexer::~TLexer((TLexer *)v7);
  }
}

void sub_1AE041E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

TLexerLexicon *TGrammarCompiler::finalize(TGrammarCompiler *this)
{
  uint64_t v2;
  TLexerLexicon *result;
  std::exception_vtbl *v4;
  _QWORD *exception;
  void *__p[2];
  char v7;
  std::exception v8[3];
  char v9;
  uint64_t v10;
  char v11;

  v2 = *((_QWORD *)this + 7);
  v10 = v2;
  v11 = 0;
  TGrammar::forEachNonTerminal<TIntegrityChecker>(v2, &v10);
  TGrammar::forEachTerminal<TIntegrityChecker>(v2, &v10);
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v8, (__int128 *)__p);
    v8[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
    if (v9 >= 0)
      v4 = (std::exception_vtbl *)&v8[1];
    else
      v4 = v8[1].__vftable;
    conditionalAssert((const char *)v4, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 1080);
    TException::~TException(v8);
    if (v7 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    TException::TException(exception, (__int128 *)v8);
    *exception = &unk_1E5D16BC8;
  }
  TGrammar::finalize(*((TGrammar **)this + 7));
  result = (TLexerLexicon *)*((_QWORD *)this + 8);
  if (result)
  {
    TLexerLexicon::~TLexerLexicon(result);
    result = (TLexerLexicon *)MEMORY[0x1AF44D190]();
  }
  *((_QWORD *)this + 8) = 0;
  return result;
}

void sub_1AE041FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TGrammarCompiler::getAttributeValue(uint64_t a1, __int32 *a2, TAllocator *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  __int32 *v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v22;
  TLocaleInfo *v23;
  TLocaleInfo *v24;
  __int32 *v25;
  __int128 v26;
  _BYTE v27[1024];
  char v28;
  int v29;

  if (!wcscmp(a2, dword_1AE1939D4))
  {
    v25 = (__int32 *)v27;
    v26 = xmmword_1AE1418C0;
    v28 = 1;
    v10 = *(_QWORD *)(a1 + 8);
    if ((v11 & 1) == 0
    {
      v23 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v23);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v23;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v10, (uint64_t)&v25, 0);
    if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
      v12 = -1;
    else
      v12 = 4 * (*((_QWORD *)&v26 + 1) + 1);
    v13 = (__int32 *)TAllocator::allocate(a3, v12);
    if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
    {
      if (v28)
      {
        v29 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), &v29, 1uLL);
        v14 = v25;
        --*((_QWORD *)&v26 + 1);
      }
      else
      {
        v14 = v25;
        if ((_QWORD)v26)
          v25[(_QWORD)v26 - 1] = 0;
      }
    }
    else
    {
      v14 = v25;
      v25[*((_QWORD *)&v26 + 1)] = 0;
    }
    wcscpy(v13, v14);
    if (a4)
      *a4 = 1;
    if (!v28)
      return 1;
    v22 = v25;
    if (v25 == (__int32 *)v27)
      return 1;
LABEL_41:
    if (v22)
      MEMORY[0x1AF44D160](v22, 0x1000C8052888210);
    return 1;
  }
  if (!wcscmp(a2, dword_1AE1939EC))
  {
    v25 = (__int32 *)v27;
    v26 = xmmword_1AE1418C0;
    v28 = 1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if ((v17 & 1) == 0
    {
      v24 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v24);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16 + v15, (uint64_t)&v25, 0);
    if ((unint64_t)(*((_QWORD *)&v26 + 1) + 1) >> 62)
      v18 = -1;
    else
      v18 = 4 * (*((_QWORD *)&v26 + 1) + 1);
    v19 = (__int32 *)TAllocator::allocate(a3, v18);
    if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
    {
      if (v28)
      {
        v29 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), &v29, 1uLL);
        v20 = v25;
        --*((_QWORD *)&v26 + 1);
      }
      else
      {
        v20 = v25;
        if ((_QWORD)v26)
          v25[(_QWORD)v26 - 1] = 0;
      }
    }
    else
    {
      v20 = v25;
      v25[*((_QWORD *)&v26 + 1)] = 0;
    }
    wcscpy(v19, v20);
    if (a4)
      *a4 = 1;
    if (!v28)
      return 1;
    v22 = v25;
    if (v25 == (__int32 *)v27)
      return 1;
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    v9 = *(_QWORD *)(v8 + 16) + 8 * *(_QWORD *)(a1 + 32);
  else
    v9 = a1 + 48;
  if ((*(_BYTE *)(*(_QWORD *)v9 + 8) & 4) != 0 || wcscmp(a2, dword_1AE1939FC))
    return getAttributeValue(a2, *(const __int32 ****)(a1 + 40), a4);
  if (a4)
    *a4 = 1;
  return 1;
}

void sub_1AE0423D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x1AF44D190](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t getAttributeValue(__int32 *a1, const __int32 ***a2, _BYTE *a3)
{
  const __int32 **v5;
  const __int32 ***v6;
  uint64_t v7;
  const __int32 **v8;

  if (a3)
    *a3 = 0;
  if (!a2)
    return 1;
  v5 = *a2;
  if (!*a2)
    return 1;
  v6 = a2 + 1;
  v7 = 1;
  while (wcscmp(a1, *v5))
  {
    v8 = *v6++;
    v5 = v8;
    if (!v8)
      return v7;
  }
  if (a3)
    *a3 = 1;
  return (uint64_t)(*(v6 - 1))[1];
}

uint64_t TGrammarCompiler::compareData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __int32 ***v3;
  uint64_t *v4;
  const __int32 **v5;
  uint64_t v6;
  const __int32 ***v7;
  const __int32 *v8;
  const __int32 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t AttributeValue;
  const __int32 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *(const __int32 ****)(a2 + 40);
  v4 = *(uint64_t **)(a3 + 40);
  if (v3)
  {
    v5 = *v3;
    if (*v3)
    {
      v6 = 0;
      v7 = v3 + 1;
      while (1)
      {
        v8 = v5[1];
        if (!v8)
          goto LABEL_7;
        if (v8 != (const __int32 *)1)
          break;
        if (*v5[2])
          goto LABEL_7;
LABEL_8:
        v9 = *v7++;
        v5 = v9;
        if (!v9)
          goto LABEL_13;
      }
      if (!v5[2])
        goto LABEL_8;
LABEL_7:
      ++v6;
      goto LABEL_8;
    }
  }
  v6 = 0;
LABEL_13:
  if (v4)
  {
    v10 = *v4;
    if (*v4)
    {
      v11 = 0;
      v12 = v4 + 1;
      while (1)
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (v13)
        {
          if (v13 == 1)
          {
            if (!**(_DWORD **)(v10 + 16))
              goto LABEL_28;
          }
          else if (!*(_QWORD *)(v10 + 16))
          {
            goto LABEL_28;
          }
        }
        AttributeValue = getAttributeValue(*(__int32 **)v10, v3, 0);
        v16 = *(v12 - 1);
        if (AttributeValue != *(_QWORD *)(v16 + 8))
          goto LABEL_32;
        if (AttributeValue)
        {
          if (AttributeValue == 1)
          {
            if (wcscmp(v15, *(const __int32 **)(v16 + 16)))
              goto LABEL_32;
          }
          else if (*(const __int32 **)(v16 + 16) != v15)
          {
LABEL_32:
            v18 = 0;
            goto LABEL_33;
          }
        }
        ++v11;
LABEL_28:
        v17 = *v12++;
        v10 = v17;
        if (!v17)
          goto LABEL_31;
      }
    }
  }
  v11 = 0;
LABEL_31:
  v18 = 1;
LABEL_33:
  if (v6 == v11)
    return v18;
  else
    return 0;
}

_QWORD *TGrammarCompiler::logData(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(uint64_t **)(a2 + 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"{ ", 2);
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = v4 + 1;
      do
      {
        v7 = *(_QWORD *)(v5 + 8);
        v8 = operator<<(a3, *(unsigned int **)v5);
        if (v7 == 1)
        {
          v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" = \"", 4);
          v8 = operator<<(v9, *(unsigned int **)(*(v6 - 1) + 16));
          v10 = "\"; ";
          v11 = 3;
        }
        else
        {
          v10 = " = [non-serializable object]; ";
          v11 = 30;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
        v12 = *v6++;
        v5 = v12;
      }
      while (v12);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"}", 1);
}

void TGrammarCompiler::makeData(uint64_t a1, uint64_t a2)
{
  TLocaleInfo *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t AttributeValue;
  unint64_t v6;
  __int32 v7;
  unsigned int *v8;
  unsigned __int8 v9;
  _BOOL4 v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  const __int32 *v21;
  __int32 *v22;
  size_t v23;
  size_t v24;
  unsigned int *v25;
  unsigned __int8 v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned int *v39;
  const __int32 *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  const __int32 *v45;
  size_t v46;
  uint64_t *v47;
  TLocaleInfo *v48;
  TAllocator *v49;
  const __int32 **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  TAllocator *v81;
  unsigned __int8 v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  __int32 *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  uint64_t *v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  char *v112;
  char *v113;
  size_t v114;
  size_t v115;
  uint64_t v116;
  BOOL v117;
  TLocaleInfo *v118;
  TLocaleInfo *v119;
  TLocaleInfo *v120;
  TLocaleInfo *v121;
  const __int32 *v122;
  unsigned int v123;
  unsigned __int8 v124;
  unsigned int v125;
  uint64_t i;
  unsigned int v127;
  unsigned __int8 v128;
  TLocaleInfo *v129;
  size_t v130;
  __int32 *v131;
  unsigned int *v132;
  int v133;
  unsigned __int8 v134;
  TLocaleInfo *v135;
  unsigned int v136;
  uint64_t j;
  unsigned int v138;
  unsigned __int8 v139;
  const __int32 *v140;
  size_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t GlobalLocaleInfo;
  unsigned int v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  TLocaleInfo *v192;
  unsigned int v193;
  uint64_t v194;
  TLocaleInfo *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const __int32 *v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  uint64_t v204;
  __int32 *v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  TLocaleInfo *v209;
  unint64_t v210;
  size_t v212;
  uint64_t v213;
  TLocaleInfo *v214;
  _QWORD *v215;
  uint64_t v216;
  TLocaleInfo *v217;
  int v218;
  void **v219;
  uint64_t v220;
  void **v221;
  void **v222;
  int v223;
  void **v224;
  uint64_t v225;
  unsigned int v226;
  __int32 *v227;
  TLocaleInfo *v228;
  TLocaleInfo *v229;
  __int32 *v230;
  unint64_t v231;
  int *v232;
  void *__p;
  uint64_t *v234;
  uint64_t *v235;
  void *v236;
  __int128 v237;
  _BYTE v238[1024];
  char v239;
  void *v240[2];
  char v241;
  _OWORD __src[128];
  uint64_t v243;

  v2 = (TLocaleInfo *)a2;
  v243 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 424) = 0;
  v232 = *(int **)(*(_QWORD *)(a2 + 408) + 40);
  v4 = (uint64_t)(v232 + 1);
  v3 = *v232;
  memset(__src, 0, 512);
  __p = 0;
  v234 = 0;
  v235 = 0;
  std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, 0);
  v231 = v3;
  if (v3 < 2)
    goto LABEL_440;
  while (2)
  {
    v7 = *(_DWORD *)v4;
    switch(*(_DWORD *)v4)
    {
      case 1:
        v20 = *(_DWORD *)(v4 + 4);
        v21 = (const __int32 *)(v4 + 8);
        v22 = (__int32 *)(v4 + 8 + 4 * wcslen((const __int32 *)(v4 + 8)) + 4);
        v23 = wcslen(v22);
        if ((unint64_t)*(v234 - 2) >= 2)
          goto LABEL_451;
        v24 = v23;
        v25 = (unsigned int *)*(v234 - 1);
        v234 -= 2;
        v236 = 0;
        if ((v26 & 1) == 0
        {
          v119 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v119);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v119;
        }
        AttributeValue = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v25, (unsigned int **)&v236);
        v27 = AttributeValue;
        v28 = *((_QWORD *)v2 + 51);
        v29 = *(_QWORD *)(v28 + 8);
        v30 = v29 - 1;
        if (v29 - 1 < (unint64_t)AttributeValue)
          goto LABEL_16;
        AttributeValue = wcscmp(v21, (const __int32 *)"R");
        if (!(_DWORD)AttributeValue)
        {
          if (v20)
            v67 = v30 + ~(unint64_t)v27;
          else
            v67 = v27;
LABEL_128:
          if (v67 != v30)
          {
            AttributeValue = *((_QWORD *)v2 + v67 + 1);
            if (AttributeValue)
            {
              AttributeValue = TGrammarCompiler::getAttributeValue(AttributeValue, v22, *((TAllocator **)v2 + 52), 0);
              v32 = AttributeValue;
              v31 = (void *)v6;
              goto LABEL_17;
            }
          }
LABEL_16:
          v31 = &unk_1AE193C3C;
          v32 = 1;
          goto LABEL_17;
        }
        if (v29 == 1)
          goto LABEL_16;
        v228 = v2;
        v67 = 0;
        v68 = 0;
        v69 = v29 - 2;
        do
        {
          if (v20)
            v70 = v69;
          else
            v70 = v67;
          v71 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v70);
          if ((*(_BYTE *)(v71 + 8) & 4) == 0)
          {
            AttributeValue = wcscmp(v21, *(const __int32 **)(v71 + 16));
            if (!(_DWORD)AttributeValue)
            {
              if (v68 == v27)
              {
                v2 = v228;
                goto LABEL_128;
              }
              ++v68;
            }
          }
          ++v67;
          --v69;
        }
        while (v30 != v67);
        v31 = &unk_1AE193C3C;
        v32 = 1;
        v2 = v228;
LABEL_17:
        v33 = v234;
        if (v234 < v235)
        {
LABEL_27:
          *v33 = v32;
          v33[1] = (uint64_t)v31;
          v37 = v33 + 2;
        }
        else
        {
          v34 = ((char *)v234 - (_BYTE *)__p) >> 4;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = (char *)v235 - (_BYTE *)__p;
          if (((char *)v235 - (_BYTE *)__p) >> 3 > v35)
            v35 = v36 >> 3;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v35;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v6);
          else
            AttributeValue = 0;
          v95 = (uint64_t *)(AttributeValue + 16 * v34);
          *v95 = v32;
          v95[1] = (uint64_t)v31;
          v103 = (char *)__p;
          v96 = (char *)v234;
          v98 = v95;
          if (v234 != __p)
          {
            do
            {
              *((_OWORD *)v98 - 1) = *((_OWORD *)v96 - 1);
              v98 -= 2;
              v96 -= 16;
            }
            while (v96 != v103);
LABEL_140:
            v96 = (char *)__p;
          }
LABEL_141:
          v37 = v95 + 2;
          __p = v98;
          v234 = v95 + 2;
          v235 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v96)
            operator delete(v96);
        }
        v4 = (uint64_t)&v22[v24 + 1];
LABEL_144:
        v234 = v37;
LABEL_178:
        if (v231 <= (v4 - (uint64_t)v232) >> 2)
        {
LABEL_440:
          if (*(_QWORD *)&__src[0])
          {
            v210 = 0;
            while (*((_QWORD *)__src + v210++))
              ;
            v212 = 8 * v210;
            if (v210 >> 61)
              v213 = -1;
            else
              v213 = 8 * v210;
            v214 = v2;
            v215 = TAllocator::allocate(*((TAllocator **)v2 + 52), v213);
            memcpy(v215, __src, v212);
            *(_QWORD *)v214 = v215;
          }
          goto LABEL_447;
        }
        continue;
      case 2:
        v17 = v4 + 4;
        v18 = v234;
        if (v234 >= v235)
        {
          v55 = ((char *)v234 - (_BYTE *)__p) >> 4;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v57 = (char *)v235 - (_BYTE *)__p;
          if (((char *)v235 - (_BYTE *)__p) >> 3 > v56)
            v56 = v57 >> 3;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
            v58 = 0xFFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v58);
          else
            v59 = 0;
          v87 = &v59[16 * v55];
          *(_QWORD *)v87 = 1;
          *((_QWORD *)v87 + 1) = v17;
          v89 = (char *)__p;
          v88 = (char *)v234;
          v90 = v87;
          if (v234 != __p)
          {
            do
            {
              *((_OWORD *)v90 - 1) = *((_OWORD *)v88 - 1);
              v90 -= 16;
              v88 -= 16;
            }
            while (v88 != v89);
            v88 = (char *)__p;
          }
          v19 = (uint64_t *)(v87 + 16);
          __p = v90;
          v234 = (uint64_t *)(v87 + 16);
          v235 = (uint64_t *)&v59[16 * v58];
          if (v88)
            operator delete(v88);
        }
        else
        {
          *v234 = 1;
          v18[1] = v17;
          v19 = v18 + 2;
        }
        v234 = v19;
        AttributeValue = wcslen((const __int32 *)v4);
        v4 += 4 * AttributeValue + 4;
        goto LABEL_178;
      case 3:
        v38 = *(v234 - 2);
        v39 = (unsigned int *)*(v234 - 1);
        v234 -= 2;
        v40 = (const __int32 *)*(v234 - 1);
        v41 = *(v234 - 2);
        v234 -= 2;
        v42 = *(unsigned int *)(v4 + 4);
        if (v41 > 1)
        {
          v43 = v40 != 0;
          if (v38 == 1)
          {
            v44 = *v39 == 0;
            goto LABEL_150;
          }
LABEL_149:
          v44 = v39 == 0;
LABEL_150:
          v104 = !v44;
          switch((int)v42)
          {
            case 10:
            case 16:
              if (v43 != v104)
                v86 = (__int32 *)&unk_1AE193A18;
              else
                v86 = (__int32 *)&unk_1AE193A20;
              goto LABEL_160;
            case 11:
            case 17:
              if (v43 != v104)
                v86 = (__int32 *)&unk_1AE193A20;
              else
                v86 = (__int32 *)&unk_1AE193A18;
              goto LABEL_160;
            default:
              tknPrintf("Error: invalid operator used on objects\n", v6);
              goto LABEL_451;
          }
        }
        if (v38 >= 2)
        {
          if (v41 == 1)
            v60 = *v40 == 0;
          else
            v60 = v40 == 0;
          v43 = !v60;
          goto LABEL_149;
        }
        v81 = (TAllocator *)*((_QWORD *)v2 + 52);
        switch((int)v42)
        {
          case 1:
            v236 = 0;
            if ((v82 & 1) == 0
            {
              v209 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v209);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v209;
            }
            v83 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v39, (unsigned int **)&v236);
            AttributeValue = wcslen(v40);
            v84 = v83 - AttributeValue;
            if (v83 > AttributeValue)
            {
              v85 = TAllocator::allocate(v81, 4 * v83 + 4);
              memset_pattern16(v85, "0", 4 * v84);
              AttributeValue = (unint64_t)wcscpy((__int32 *)v85 + v84, v40);
              v40 = (const __int32 *)v85;
            }
            v86 = (__int32 *)v40;
            goto LABEL_160;
          case 2:
            v114 = wcslen(v40);
            v115 = v114 + wcslen((const __int32 *)v39) + 1;
            if (v115 >> 62)
              v116 = -1;
            else
              v116 = 4 * v115;
            v86 = (__int32 *)TAllocator::allocate(v81, v116);
            wcscpy(v86, v40);
            AttributeValue = (unint64_t)wcscpy(&v86[v114], (const __int32 *)v39);
            goto LABEL_160;
          case 14:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
            if ((int)AttributeValue <= 0)
              v86 = (__int32 *)&unk_1AE193A18;
            else
              v86 = (__int32 *)&unk_1AE193A20;
            goto LABEL_160;
          case 15:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
            v117 = (AttributeValue & 0x80000000) != 0;
            goto LABEL_197;
          case 16:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
            if ((_DWORD)AttributeValue)
              v86 = (__int32 *)&unk_1AE193A18;
            else
              v86 = (__int32 *)&unk_1AE193A20;
            goto LABEL_160;
          case 17:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
LABEL_182:
            if ((_DWORD)AttributeValue)
              v86 = (__int32 *)&unk_1AE193A20;
            else
              v86 = (__int32 *)&unk_1AE193A18;
            goto LABEL_160;
          case 18:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
            v117 = (int)AttributeValue < 1;
LABEL_197:
            if (v117)
              v86 = (__int32 *)&unk_1AE193A20;
            else
              v86 = (__int32 *)&unk_1AE193A18;
            goto LABEL_160;
          case 19:
            AttributeValue = wcscmp(v40, (const __int32 *)v39);
            if ((AttributeValue & 0x80000000) != 0)
              v86 = (__int32 *)&unk_1AE193A18;
            else
              v86 = (__int32 *)&unk_1AE193A20;
            goto LABEL_160;
          default:
            goto LABEL_211;
        }
        do
        {
LABEL_211:
          v122 = v40;
          v123 = *v40;
          if (!*v40)
            break;
          ++v40;
          if (!v122[1])
            break;
          if ((v124 & 1) == 0
          {
            v121 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v121);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v121;
          }
          AttributeValue = v123 - 48;
          if ((int)v123 < 48)
            break;
          if (v123 > 0x39)
          {
            if (v123 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v123);
          }
        }
        while (!(_DWORD)AttributeValue);
        v125 = 0;
        for (i = 0; ; ++i)
        {
          v127 = v122[i];
          if ((v128 & 1) == 0)
          {
            if ((_DWORD)AttributeValue)
            {
              v129 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v129);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v129;
            }
          }
          if ((int)v127 < 48)
            break;
          if (v127 >= 0x3A)
          {
            if (v127 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v127);
            if ((_DWORD)AttributeValue == -1)
              break;
          }
          ++v125;
        }
        v226 = v125;
        if (i <= 1)
          v130 = 1;
        else
          v130 = i;
        v131 = (__int32 *)&unk_1AE193A18;
        if ((_DWORD)i)
          v131 = (__int32 *)v122;
        v227 = v131;
        do
        {
          v132 = v39;
          v133 = *v39;
          if (!*v39)
            break;
          ++v39;
          if (!v132[1])
            break;
          if ((v134 & 1) == 0
          {
            v135 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v135);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v135;
          }
          AttributeValue = (v133 - 48);
          if (v133 < 48)
            break;
          if (v133 > 0x39)
          {
            if (v133 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v133);
          }
        }
        while (!(_DWORD)AttributeValue);
        v136 = 0;
        for (j = 0; ; ++j)
        {
          v138 = v132[j];
          if ((v139 & 1) == 0)
          {
            if ((_DWORD)AttributeValue)
            {
              v229 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v229);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v229;
            }
          }
          if ((int)v138 < 48)
            break;
          if (v138 >= 0x3A)
          {
            if (v138 < 0x660)
              break;
            AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v138);
            if ((_DWORD)AttributeValue == -1)
              break;
          }
          ++v136;
        }
        v140 = (const __int32 *)&unk_1AE193A18;
        if ((_DWORD)j)
          v140 = (const __int32 *)v132;
        v230 = (__int32 *)v140;
        if (j <= 1)
          v141 = 1;
        else
          v141 = j;
        break;
      case 4:
        v15 = *(int *)(v4 + 12);
        if ((_DWORD)v15)
          v16 = (char *)__p + 16 * (((unint64_t)((char *)v234 - (_BYTE *)__p) >> 4) - v15);
        else
          v16 = 0;
        v73 = (*(uint64_t (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v4 + 4) + 24))(v16, *(int *)(v4 + 12), *(_QWORD *)(*(_QWORD *)(v4 + 4) + 48), *(_QWORD *)(*(_QWORD *)(v4 + 4) + 56), *((_QWORD *)v2 + 52));
        if (!v73)
          goto LABEL_451;
        v74 = v72;
        std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, (((char *)v234 - (_BYTE *)__p) >> 4) - v15);
        v4 += 16;
        v75 = v234;
        if (v234 < v235)
        {
          *v234 = v73;
          v75[1] = v74;
          v76 = v75 + 2;
          goto LABEL_101;
        }
        v77 = ((char *)v234 - (_BYTE *)__p) >> 4;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v79 = (char *)v235 - (_BYTE *)__p;
        if (((char *)v235 - (_BYTE *)__p) >> 3 > v78)
          v78 = v79 >> 3;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
          v6 = 0xFFFFFFFFFFFFFFFLL;
        else
          v6 = v78;
        if (v6)
          AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v6);
        else
          AttributeValue = 0;
        v99 = (uint64_t *)(AttributeValue + 16 * v77);
        *v99 = v73;
        v99[1] = v74;
        v101 = (char *)__p;
        v100 = (char *)v234;
        v102 = v99;
        if (v234 != __p)
        {
          do
          {
            *((_OWORD *)v102 - 1) = *((_OWORD *)v100 - 1);
            v102 -= 2;
            v100 -= 16;
          }
          while (v100 != v101);
          v100 = (char *)__p;
        }
        v37 = v99 + 2;
        __p = v102;
        v234 = v99 + 2;
        v235 = (uint64_t *)(AttributeValue + 16 * v6);
        if (v100)
          operator delete(v100);
        goto LABEL_144;
      case 5:
        v45 = (const __int32 *)(v4 + 4);
        v46 = wcslen(v45);
        v47 = v234 - 2;
        v48 = v2;
        v49 = (TAllocator *)*((_QWORD *)v2 + 52);
        v50 = *(const __int32 ***)&__src[0];
        if (*(_QWORD *)&__src[0])
        {
          v51 = 0;
          do
          {
            AttributeValue = wcscmp(*v50, v45);
            if (!(_DWORD)AttributeValue)
            {
              *(_OWORD *)(*((_QWORD *)__src + v51) + 8) = *(_OWORD *)v47;
LABEL_100:
              v2 = v48;
              v4 = (uint64_t)&v45[v46 + 1];
              v76 = v234 - 2;
LABEL_101:
              v234 = v76;
              goto LABEL_178;
            }
            v52 = v51 + 1;
            v50 = (const __int32 **)*((_QWORD *)__src + ++v51);
          }
          while (v50);
        }
        else
        {
          v52 = 0;
        }
        AttributeValue = (unint64_t)TAllocator::allocate(v49, 24);
        *(_QWORD *)AttributeValue = v45;
        v80 = (unint64_t *)__src + v52;
        *(_OWORD *)(AttributeValue + 8) = *(_OWORD *)v47;
        *v80 = AttributeValue;
        v80[1] = 0;
        goto LABEL_100;
      case 6:
        v22 = (__int32 *)(v4 + 4);
        v24 = wcslen(v22);
        AttributeValue = getAttributeValue(v22, (const __int32 ***)__src, 0);
        v32 = AttributeValue;
        v31 = (void *)v6;
        v33 = v234;
        if (v234 < v235)
          goto LABEL_27;
        v64 = ((char *)v234 - (_BYTE *)__p) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v66 = (char *)v235 - (_BYTE *)__p;
        if (((char *)v235 - (_BYTE *)__p) >> 3 > v65)
          v65 = v66 >> 3;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
          v6 = 0xFFFFFFFFFFFFFFFLL;
        else
          v6 = v65;
        if (v6)
          AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v6);
        else
          AttributeValue = 0;
        v95 = (uint64_t *)(AttributeValue + 16 * v64);
        *v95 = v32;
        v95[1] = (uint64_t)v31;
        v97 = (char *)__p;
        v96 = (char *)v234;
        v98 = v95;
        if (v234 == __p)
          goto LABEL_141;
        do
        {
          *((_OWORD *)v98 - 1) = *((_OWORD *)v96 - 1);
          v98 -= 2;
          v96 -= 16;
        }
        while (v96 != v97);
        goto LABEL_140;
      case 7:
        v234 -= 2;
        v4 += 4;
        goto LABEL_178;
      case 8:
        goto LABEL_39;
      case 9:
      case 0xA:
        if (*(v234 - 2) == 1)
        {
          v236 = 0;
          v8 = (unsigned int *)*(v234 - 1);
          if ((v9 & 1) == 0
          {
            v118 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v118);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v118;
          }
          AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (unsigned int **)&v236);
          v10 = AttributeValue != 0;
          v7 = *(_DWORD *)v4;
        }
        else
        {
          v10 = *(v234 - 1) != 0;
        }
        if (v10 == (v7 != 10))
          goto LABEL_177;
LABEL_39:
        v4 += 4 * *(int *)(v4 + 4);
        goto LABEL_178;
      case 0xB:
        goto LABEL_451;
      case 0xC:
        v11 = v234;
        if (*(v234 - 2) == 1)
        {
          v236 = 0;
          v12 = (unsigned int *)*(v234 - 1);
          if ((v13 & 1) == 0
          {
            v120 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v120);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v120;
          }
          AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v12, (unsigned int **)&v236);
          v14 = (int)AttributeValue;
          v11 = v234;
        }
        else
        {
          v14 = *(v234 - 1) != 0;
        }
        v53 = v11 - 2;
        v234 = v11 - 2;
        if (v14)
          v54 = &unk_1AE193A18;
        else
          v54 = &unk_1AE193A20;
        if (v53 >= v235)
        {
          v61 = ((char *)v53 - (_BYTE *)__p) >> 4;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v63 = (char *)v235 - (_BYTE *)__p;
          if (((char *)v235 - (_BYTE *)__p) >> 3 > v62)
            v62 = v63 >> 3;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v62;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v6);
          else
            AttributeValue = 0;
          v91 = (_QWORD *)(AttributeValue + 16 * v61);
          *v91 = 1;
          v91[1] = v54;
          v93 = (char *)__p;
          v92 = (char *)v234;
          v94 = (char *)v91;
          if (v234 != __p)
          {
            do
            {
              *((_OWORD *)v94 - 1) = *((_OWORD *)v92 - 1);
              v94 -= 16;
              v92 -= 16;
            }
            while (v92 != v93);
            v92 = (char *)__p;
          }
          v11 = v91 + 2;
          __p = v94;
          v234 = v91 + 2;
          v235 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v92)
            operator delete(v92);
        }
        else
        {
          *(v11 - 2) = 1;
          *(v11 - 1) = (uint64_t)v54;
        }
        v234 = v11;
        goto LABEL_177;
      default:
        goto LABEL_178;
    }
    break;
  }
  switch((int)v42)
  {
    case 3:
      v142 = v42;
      v143 = *v227;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v144 = v143 - 48;
      if ((int)v143 < 48)
        goto LABEL_265;
      if (v143 <= 0x39)
        goto LABEL_264;
      if (v143 >= 0x660)
      {
        AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v143);
        v144 = AttributeValue;
LABEL_264:
        if (!v144)
          goto LABEL_323;
      }
LABEL_265:
      v145 = *v230;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v146 = v145 - 48;
      if ((int)v145 < 48)
        goto LABEL_270;
      if (v145 <= 0x39)
        goto LABEL_269;
      if (v145 >= 0x660)
      {
        AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v145);
        v146 = AttributeValue;
LABEL_269:
        if (!v146)
          goto LABEL_323;
      }
LABEL_270:
      v147 = *v230;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v149 = v147 - 48;
      if ((int)v147 < 48)
        goto LABEL_285;
      if (v147 <= 0x39)
        goto LABEL_274;
      if (v147 < 0x660)
        goto LABEL_285;
      GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v147);
      v149 = GlobalLocaleInfo;
LABEL_274:
      if (v149 != 1)
        goto LABEL_285;
      v150 = (unsigned int *)(v230 + 1);
      do
      {
        v151 = v150;
        v152 = *v150;
        v153 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
        GlobalLocaleInfo = v152 - 48;
        if ((int)v152 < 48)
          break;
        if (v152 > 0x39)
        {
          if (v152 < 0x660)
            break;
          GlobalLocaleInfo = TLocaleInfo::getDigitExtended(v153, v152);
        }
        v150 = v151 + 1;
      }
      while (!(_DWORD)GlobalLocaleInfo);
      v154 = *v151;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      if ((int)v154 < 48
        || v154 >= 0x3A
        && (v154 < 0x660
         || (GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v154), (_DWORD)GlobalLocaleInfo == -1)))
      {
        v187 = v141 + v130;
        v86 = (__int32 *)TAllocator::allocate(v81, 4 * (v141 + v130));
        AttributeValue = (unint64_t)wcsncpy(v86, v227, v130);
        if ((_DWORD)v141 != 1)
        {
          if (v136 <= 1)
            v188 = 1;
          else
            v188 = v136;
          v189 = (v188 - 1);
          v190 = v226;
          if (v226 <= 1)
            v190 = 1;
          do
          {
            v86[v190++] = 48;
            --v189;
          }
          while (v189);
        }
        goto LABEL_419;
      }
LABEL_285:
      v155 = *v227;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      v156 = v155 - 48;
      if ((int)v155 < 48)
        goto LABEL_298;
      if (v155 <= 0x39)
        goto LABEL_289;
      if (v155 < 0x660)
        goto LABEL_298;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v155);
      v156 = AttributeValue;
LABEL_289:
      if (v156 != 1)
      {
LABEL_298:
        v42 = v142;
        goto LABEL_391;
      }
      v157 = (unsigned int *)(v227 + 1);
      do
      {
        v158 = v157;
        v159 = *v157;
        v160 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v159 - 48;
        if ((int)v159 < 48)
          break;
        if (v159 > 0x39)
        {
          if (v159 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v160, v159);
        }
        v157 = v158 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v161 = *v158;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v161 < 48)
        goto LABEL_412;
      if (v161 < 0x3A)
        goto LABEL_298;
      if (v161 < 0x660
        || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v161),
            v42 = v142,
            (_DWORD)AttributeValue == -1))
      {
LABEL_412:
        v187 = v141 + v130;
        v86 = (__int32 *)TAllocator::allocate(v81, 4 * (v141 + v130));
        AttributeValue = (unint64_t)wcsncpy(v86, v230, v141);
        if ((_DWORD)v130 != 1)
        {
          v200 = v226;
          if (v226 <= 1)
            v200 = 1;
          v201 = (v200 - 1);
          if (v136 <= 1)
            v202 = 1;
          else
            v202 = v136;
          do
          {
            v86[v202++] = 48;
            --v201;
          }
          while (v201);
        }
LABEL_419:
        v86[v187 - 1] = 0;
        goto LABEL_160;
      }
      goto LABEL_391;
    case 4:
      v162 = v130 - v141;
      if (v130 < v141
        || (_DWORD)v130 == (_DWORD)v141
        && (AttributeValue = wcsncmp(v227, v140, v130), (AttributeValue & 0x80000000) != 0))
      {
        AttributeValue = (unint64_t)TAllocator::allocate(v81, 8);
        v86 = (__int32 *)AttributeValue;
        *(_QWORD *)AttributeValue = 48;
        goto LABEL_160;
      }
      v178 = v42;
      v179 = *v230;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v180 = v179 - 48;
      if ((int)v179 < 48)
        goto LABEL_370;
      if (v179 <= 0x39)
        goto LABEL_361;
      if (v179 < 0x660)
        goto LABEL_370;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v179);
      v180 = AttributeValue;
LABEL_361:
      if (v180 != 1)
        goto LABEL_370;
      v181 = (unsigned int *)(v230 + 1);
      do
      {
        v182 = v181;
        v183 = *v181;
        v184 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v183 - 48;
        if ((int)v183 < 48)
          break;
        if (v183 > 0x39)
        {
          if (v183 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v184, v183);
        }
        v181 = v182 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v185 = *v182;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v185 < 48)
        goto LABEL_431;
      if (v185 >= 0x3A)
      {
        if (v185 < 0x660
          || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v185),
              v42 = v178,
              (_DWORD)AttributeValue == -1))
        {
LABEL_431:
          v86 = (__int32 *)TAllocator::allocate(v81, 4 * (v162 + 2));
          AttributeValue = (unint64_t)wcsncpy(v86, v227, (v162 + 1));
          v86[v162 + 1] = 0;
          goto LABEL_160;
        }
      }
      else
      {
LABEL_370:
        v42 = v178;
      }
      goto LABEL_391;
    case 5:
      if (v130 < v141
        || (v225 = v42, (_DWORD)v130 == (_DWORD)v141)
        && (AttributeValue = wcsncmp(v227, v140, v130), (AttributeValue & 0x80000000) != 0))
      {
        v86 = v227;
        goto LABEL_160;
      }
      v163 = *v230;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v164 = v163 - 48;
      if ((int)v163 < 48)
        goto LABEL_371;
      if (v163 <= 0x39)
        goto LABEL_330;
      if (v163 < 0x660)
        goto LABEL_371;
      AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v163);
      v164 = AttributeValue;
LABEL_330:
      if (v164 != 1)
      {
LABEL_371:
        if (j > 1 || v130 < 3)
          goto LABEL_391;
        v186 = *v230;
        AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        if ((int)v186 > 47)
        {
          if (v186 <= 0x39)
          {
            AttributeValue = v186 - 48;
LABEL_386:
            switch((_DWORD)AttributeValue)
            {
              case 2:
                goto LABEL_389;
              case 4:
                v227 += (v130 - 2);
                v207 = *v227;
                AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                v208 = v207 - 48;
                if ((int)v207 < 48)
                  goto LABEL_394;
                if (v207 > 0x39)
                {
                  if (v207 < 0x660)
                    goto LABEL_394;
                  AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v207);
                  v208 = AttributeValue;
                }
                v227 += v208 == 0;
                goto LABEL_394;
              case 5:
LABEL_389:
                v227 += (v130 - 1);
LABEL_394:
                v240[0] = 0;
                v191 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                v192 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v191, (unsigned int *)v227, (unsigned int **)v240);
                v193 = v192;
                v194 = TLocaleInfo::getGlobalLocaleInfo(v192);
                v195 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v194, (unsigned int *)v230, (unsigned int **)v240);
                switch((int)v225)
                {
                  case 3:
                    v196 = v195 * (unint64_t)v193;
                    break;
                  case 4:
                    if (!(_DWORD)v195)
                      goto LABEL_451;
                    v196 = v193 / v195;
                    break;
                  case 5:
                    if (!(_DWORD)v195)
                      goto LABEL_451;
                    v196 = v193 % v195;
                    break;
                  case 6:
                    v196 = v195 + (unint64_t)v193;
                    break;
                  case 7:
                    if (v193 < v195)
                      goto LABEL_451;
                    v196 = v193 - (unint64_t)v195;
                    break;
                  default:
                    goto LABEL_451;
                }
                v236 = v238;
                v237 = xmmword_1AE1418C0;
                v239 = 1;
                v197 = TLocaleInfo::getGlobalLocaleInfo(v195);
                TLocaleInfo::valueToString(v197, v196, (uint64_t)&v236, 0);
                if ((unint64_t)(*((_QWORD *)&v237 + 1) + 1) >> 62)
                  v198 = -1;
                else
                  v198 = 4 * (*((_QWORD *)&v237 + 1) + 1);
                v86 = (__int32 *)TAllocator::allocate(v81, v198);
                v199 = (const __int32 *)TBuffer<wchar_t>::c_str((uint64_t)&v236);
                AttributeValue = (unint64_t)wcscpy(v86, v199);
                if (v239)
                {
                  AttributeValue = (unint64_t)v236;
                  if (v236 != v238)
                  {
                    if (v236)
                      AttributeValue = MEMORY[0x1AF44D160]();
                  }
                }
                goto LABEL_160;
            }
            goto LABEL_390;
          }
          if (v186 > 0x65F)
          {
            AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v186);
            goto LABEL_386;
          }
        }
LABEL_390:
        LODWORD(v130) = i;
        goto LABEL_391;
      }
      v165 = (unsigned int *)(v230 + 1);
      do
      {
        v166 = v165;
        v167 = *v165;
        v168 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        AttributeValue = v167 - 48;
        if ((int)v167 < 48)
          break;
        if (v167 > 0x39)
        {
          if (v167 < 0x660)
            break;
          AttributeValue = TLocaleInfo::getDigitExtended(v168, v167);
        }
        v165 = v166 + 1;
      }
      while (!(_DWORD)AttributeValue);
      v169 = *v166;
      AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      v42 = v225;
      if ((int)v169 < 48
        || v169 >= 0x3A
        && (v169 < 0x660
         || (AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v169),
             v42 = v225,
             (_DWORD)AttributeValue == -1)))
      {
        if ((_DWORD)v141 == 1)
        {
LABEL_323:
          v86 = (__int32 *)&unk_1AE193A18;
        }
        else
        {
          v170 = 0;
          if (v136 <= 1)
            v171 = 1;
          else
            v171 = v136;
          v172 = v171 - 1;
          v173 = 4 * (v171 - 1);
          v174 = v226;
          if (v226 <= 1uLL)
            v174 = 1;
          v175 = (uint64_t)&v227[v174 - v172];
          while (1)
          {
            v176 = *(_DWORD *)(v175 + 4 * v170);
            AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
            v177 = v176 - 48;
            if ((int)v176 < 48)
              break;
            if (v176 > 0x39)
            {
              if (v176 < 0x660)
                break;
              AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v176);
              v177 = AttributeValue;
            }
            if (v177)
              break;
            ++v170;
            v173 -= 4;
            v86 = (__int32 *)&unk_1AE193A18;
            if (v172 == (_DWORD)v170)
              goto LABEL_160;
          }
          v203 = v136;
          if (v136 <= 1uLL)
            v203 = 1;
          if (v226 <= 1uLL)
            v204 = 1;
          else
            v204 = v226;
          v205 = (__int32 *)TAllocator::allocate(v81, 4 * (v203 - v170));
          v86 = v205;
          if (v136 <= 1)
            v206 = 1;
          else
            v206 = v136;
          AttributeValue = (unint64_t)wcsncpy(v205, &v227[v204 + v173 / 0xFFFFFFFFFFFFFFFCLL], (v206 - 1) - v170);
          v86[(unint64_t)v173 / 4] = 0;
        }
LABEL_160:
        v105 = v234;
        if (v234 >= v235)
        {
          v107 = ((char *)v234 - (_BYTE *)__p) >> 4;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v109 = (char *)v235 - (_BYTE *)__p;
          if (((char *)v235 - (_BYTE *)__p) >> 3 > v108)
            v108 = v109 >> 3;
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
            v6 = 0xFFFFFFFFFFFFFFFLL;
          else
            v6 = v108;
          if (v6)
            AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v235, v6);
          else
            AttributeValue = 0;
          v110 = (_QWORD *)(AttributeValue + 16 * v107);
          *v110 = 1;
          v110[1] = v86;
          v112 = (char *)__p;
          v111 = (char *)v234;
          v113 = (char *)v110;
          if (v234 != __p)
          {
            do
            {
              *((_OWORD *)v113 - 1) = *((_OWORD *)v111 - 1);
              v113 -= 16;
              v111 -= 16;
            }
            while (v111 != v112);
            v111 = (char *)__p;
          }
          v106 = v110 + 2;
          __p = v113;
          v234 = v110 + 2;
          v235 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v111)
            operator delete(v111);
        }
        else
        {
          *v234 = 1;
          v105[1] = (uint64_t)v86;
          v106 = v105 + 2;
        }
        v234 = v106;
LABEL_177:
        v4 += 8;
        goto LABEL_178;
      }
LABEL_391:
      if (v130 >= 0xA)
      {
        v216 = v42;
        loggableUnicode((unsigned int *)v227, &v236);
        v217 = v2;
        v218 = SHIBYTE(v237);
        v219 = (void **)v236;
        loggableUnicode((unsigned int *)v230, v240);
        v221 = &v236;
        if (v218 < 0)
          v221 = v219;
        if (v241 >= 0)
          v222 = v240;
        else
          v222 = (void **)v240[0];
      }
      else
      {
        if (v141 < 0xA)
        {
          LODWORD(v225) = v42;
          goto LABEL_394;
        }
        v216 = v42;
        loggableUnicode((unsigned int *)v227, &v236);
        v217 = v2;
        v223 = SHIBYTE(v237);
        v224 = (void **)v236;
        loggableUnicode((unsigned int *)v230, v240);
        v221 = &v236;
        if (v223 < 0)
          v221 = v224;
        if (v241 >= 0)
          v222 = v240;
        else
          v222 = (void **)v240[0];
      }
      tknPrintf("Warning: (%s,%s,%llu)  : Operand out of bounds, overflow\n", v220, v221, v222, v216);
      v2 = v217;
      if (v241 < 0)
        operator delete(v240[0]);
      if (SHIBYTE(v237) < 0)
        operator delete(v236);
LABEL_451:
      *((_BYTE *)v2 + 424) = 1;
LABEL_447:
      if (__p)
      {
        v234 = (uint64_t *)__p;
        operator delete(__p);
      }
      return;
    case 8:
      v86 = (__int32 *)&unk_1AE193A20;
      if (v130 <= v141)
      {
        if ((_DWORD)v130 != (_DWORD)v141)
          goto LABEL_323;
        AttributeValue = wcsncmp(v227, v140, v130);
        if ((int)AttributeValue <= 0)
          goto LABEL_323;
      }
      goto LABEL_160;
    case 9:
      v86 = (__int32 *)&unk_1AE193A20;
      if (v130 < v141)
        goto LABEL_160;
      if ((_DWORD)v130 == (_DWORD)v141)
      {
        AttributeValue = wcsncmp(v227, v140, v130);
        if ((AttributeValue & 0x80000000) != 0)
          goto LABEL_160;
      }
      goto LABEL_323;
    case 10:
      if ((_DWORD)v130 != (_DWORD)v141)
        goto LABEL_323;
      AttributeValue = wcsncmp(v227, v140, v130);
      if ((_DWORD)AttributeValue)
        goto LABEL_323;
      v86 = (__int32 *)&unk_1AE193A20;
      goto LABEL_160;
    case 11:
      v86 = (__int32 *)&unk_1AE193A20;
      if ((_DWORD)v130 != (_DWORD)v141)
        goto LABEL_160;
      AttributeValue = wcsncmp(v227, v140, v130);
      goto LABEL_182;
    case 12:
      v86 = (__int32 *)&unk_1AE193A20;
      if (v130 < v141)
        goto LABEL_160;
      if ((_DWORD)v130 == (_DWORD)v141)
      {
        AttributeValue = wcsncmp(v227, v140, v130);
        if ((int)AttributeValue < 1)
          goto LABEL_160;
      }
      goto LABEL_323;
    case 13:
      v86 = (__int32 *)&unk_1AE193A20;
      if (v130 <= v141)
      {
        if ((_DWORD)v130 != (_DWORD)v141)
          goto LABEL_323;
        AttributeValue = wcsncmp(v227, v140, v130);
        if ((AttributeValue & 0x80000000) != 0)
          goto LABEL_323;
      }
      goto LABEL_160;
    default:
      goto LABEL_391;
  }
}

void sub_1AE044178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  if (a31 < 0)
    operator delete(a26);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void std::vector<TGrammarCompiler::TArgument>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<TGrammarCompiler::TArgument>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *TGrammarCompiler::makeClientData(uint64_t *a1, __int128 *a2, uint64_t a3, TAllocator *this)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;

  if ((unint64_t)(a3 + 1) >> 61)
    v8 = -1;
  else
    v8 = 8 * (a3 + 1);
  v9 = TAllocator::allocate(this, v8);
  v10 = v9;
  if (a3)
  {
    v11 = v9;
    v12 = a3;
    do
    {
      v13 = TAllocator::allocate(this, 24);
      v14 = *a1++;
      *v13 = v14;
      v15 = *a2++;
      *(_OWORD *)(v13 + 1) = v15;
      *v11++ = v13;
      --v12;
    }
    while (v12);
  }
  v10[a3] = 0;
  return v10;
}

_QWORD *TFunctionDescr::TFunctionDescr(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  MEMORY[0x1AF44C9E0]();
  a1[3] = a3;
  a1[4] = a4;
  a1[5] = a5;
  a1[6] = a6;
  a1[7] = a7;
  return a1;
}

void sub_1AE044424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t compileInstruction(TLexer *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *Token;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  _QWORD *exception;
  uint64_t v37;
  void **v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  const char *v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  const char *v47;
  _QWORD *v48;
  uint64_t v49;
  void **v50;
  const char *v51;
  _QWORD *v52;
  int v53;
  void **v54;
  uint64_t v55;
  void **v56;
  void **v57;
  const char *v58;
  _QWORD *v59;
  uint64_t v60;
  void **v61;
  const char *v62;
  _QWORD *v63;
  void *v64[2];
  char v65;
  void *__p[2];
  char v67;
  char v68;

  Token = (uint64_t *)nextToken(a1, (uint64_t)a2);
  v9 = *Token;
  if (*Token > 17)
  {
    if (v9 != 20)
    {
      if (v9 != 18)
      {
LABEL_40:
        loggableToken((uint64_t)a1);
        if (v67 >= 0)
          v34 = __p;
        else
          v34 = (void **)__p[0];
        tknPrintf("Error: %sExpected an attribute or a condition\n", v33, v34);
        if (v67 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (__int128 *)v64);
        __p[0] = &unk_1E5D16AB0;
        if (v68 >= 0)
          v35 = (const char *)&__p[1];
        else
          v35 = (const char *)__p[1];
        conditionalAssert(v35, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 712);
        TException::~TException((std::exception *)__p);
        if (v65 < 0)
          operator delete(v64[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(exception, (__int128 *)__p);
        *exception = &unk_1E5D16AB0;
      }
      v12 = *((_QWORD *)a1 + 3);
      if (v12)
        *((_QWORD *)a1 + 3) = v12 - 1;
      nextToken(a1, (uint64_t)Token);
      if (*(_QWORD *)nextToken(a1, v13) != 6)
      {
        loggableToken((uint64_t)a1);
        if (v67 >= 0)
          v38 = __p;
        else
          v38 = (void **)__p[0];
        tknPrintf("Error: %sExpected '(' after 'if'\n", v37, v38);
        if (v67 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (__int128 *)v64);
        __p[0] = &unk_1E5D16AB0;
        if (v68 >= 0)
          v39 = (const char *)&__p[1];
        else
          v39 = (const char *)__p[1];
        conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 566);
        TException::~TException((std::exception *)__p);
        if (v65 < 0)
          operator delete(v64[0]);
        v40 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v40, (__int128 *)__p);
        *v40 = &unk_1E5D16AB0;
      }
      compileExpression(a1, a2, a3, a4);
      if (*(_QWORD *)nextToken(a1, v14) != 7)
      {
        loggableToken((uint64_t)a1);
        if (v67 >= 0)
          v50 = __p;
        else
          v50 = (void **)__p[0];
        tknPrintf("Error: %s() mismatch\n", v49, v50);
        if (v67 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (__int128 *)v64);
        __p[0] = &unk_1E5D16AB0;
        if (v68 >= 0)
          v51 = (const char *)&__p[1];
        else
          v51 = (const char *)__p[1];
        conditionalAssert(v51, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 577);
        TException::~TException((std::exception *)__p);
        if (v65 < 0)
          operator delete(v64[0]);
        v52 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v52, (__int128 *)__p);
        *v52 = &unk_1E5D16AB0;
      }
      LODWORD(__p[0]) = 9;
      TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
      v15 = a2[2];
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)a2, v15, (int *)__p, 1uLL);
      v17 = (_QWORD *)nextToken(a1, v16);
      v18 = *((_QWORD *)a1 + 3);
      if (v18)
        *((_QWORD *)a1 + 3) = v18 - 1;
      if (*v17 == 14)
        compileCode(a1, a2, a3, a4);
      else
        compileInstruction(a1, a2, a3, a4);
      if (*(_QWORD *)nextToken(a1, v19) == 19)
      {
        LODWORD(__p[0]) = 8;
        TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
        v28 = a2[2];
        LODWORD(__p[0]) = 0;
        TBuffer<wchar_t>::insert((uint64_t)a2, v28, (int *)__p, 1uLL);
        *(_DWORD *)(*a2 + 4 * v15) = *((_DWORD *)a2 + 4) - v15 + 1;
        v30 = (_QWORD *)nextToken(a1, v29);
        v31 = *((_QWORD *)a1 + 3);
        if (v31)
          *((_QWORD *)a1 + 3) = v31 - 1;
        if (*v30 == 14)
          compileCode(a1, a2, a3, a4);
        else
          compileInstruction(a1, a2, a3, a4);
        v27 = a2[2];
        *(_DWORD *)(*a2 + 4 * v28) = v27 - v28 + 1;
      }
      else
      {
        v27 = a2[2];
        *(_DWORD *)(*a2 + 4 * v15) = v27 - v15 + 1;
        v32 = *((_QWORD *)a1 + 3);
        if (v32)
          *((_QWORD *)a1 + 3) = v32 - 1;
      }
      LODWORD(__p[0]) = 7;
      return TBuffer<wchar_t>::insert((uint64_t)a2, v27, (int *)__p, 1uLL);
    }
    if (*(_QWORD *)nextToken(a1, (uint64_t)Token) != 10)
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0)
        v46 = __p;
      else
        v46 = (void **)__p[0];
      tknPrintf("Error: %sMissing ';'\n", v45, v46);
      if (v67 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (__int128 *)v64);
      __p[0] = &unk_1E5D16AB0;
      if (v68 >= 0)
        v47 = (const char *)&__p[1];
      else
        v47 = (const char *)__p[1];
      conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 694);
      TException::~TException((std::exception *)__p);
      if (v65 < 0)
        operator delete(v64[0]);
      v48 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v48, (__int128 *)__p);
      *v48 = &unk_1E5D16AB0;
    }
    LODWORD(__p[0]) = 11;
LABEL_27:
    v27 = a2[2];
    return TBuffer<wchar_t>::insert((uint64_t)a2, v27, (int *)__p, 1uLL);
  }
  if (v9 == 1)
  {
    v20 = *((_QWORD *)a1 + 3);
    if (v20)
      *((_QWORD *)a1 + 3) = v20 - 1;
    v21 = nextToken(a1, (uint64_t)Token);
    __p[0] = *(void **)(v21 + 8);
    if (a3 + 8 != std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)__p))
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0)
        v42 = __p;
      else
        v42 = (void **)__p[0];
      tknPrintf("Error: %sIllegal array assignment.\n", v41, v42);
      if (v67 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (__int128 *)v64);
      __p[0] = &unk_1E5D16AB0;
      if (v68 >= 0)
        v43 = (const char *)&__p[1];
      else
        v43 = (const char *)__p[1];
      conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 646);
      TException::~TException((std::exception *)__p);
      if (v65 < 0)
        operator delete(v64[0]);
      v44 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v44, (__int128 *)__p);
      *v44 = &unk_1E5D16AB0;
    }
    if (*(_QWORD *)nextToken(a1, v22) != 11)
    {
      loggableToken((uint64_t)a1);
      v53 = v67;
      v54 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v21 + 8), v64);
      if (v53 >= 0)
        v56 = __p;
      else
        v56 = v54;
      if (v65 >= 0)
        v57 = v64;
      else
        v57 = (void **)v64[0];
      tknPrintf("Error: %sExpected '=' after %s\n", v55, v56, v57);
      if (v65 < 0)
        operator delete(v64[0]);
      if (v67 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (__int128 *)v64);
      __p[0] = &unk_1E5D16AB0;
      if (v68 >= 0)
        v58 = (const char *)&__p[1];
      else
        v58 = (const char *)__p[1];
      conditionalAssert(v58, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 654);
      TException::~TException((std::exception *)__p);
      if (v65 < 0)
        operator delete(v64[0]);
      v59 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v59, (__int128 *)__p);
      *v59 = &unk_1E5D16AB0;
    }
    compileExpression(a1, a2, a3, a4);
    if (*(_QWORD *)nextToken(a1, v23) != 10)
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0)
        v61 = __p;
      else
        v61 = (void **)__p[0];
      tknPrintf("Error: %sMissing ';'\n", v60, v61);
      if (v67 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (__int128 *)v64);
      __p[0] = &unk_1E5D16AB0;
      if (v68 >= 0)
        v62 = (const char *)&__p[1];
      else
        v62 = (const char *)__p[1];
      conditionalAssert(v62, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 665);
      TException::~TException((std::exception *)__p);
      if (v65 < 0)
        operator delete(v64[0]);
      v63 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v63, (__int128 *)__p);
      *v63 = &unk_1E5D16AB0;
    }
    LODWORD(__p[0]) = 5;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
    v24 = 0;
    v25 = *(int **)(v21 + 8);
    while (v25[v24++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], v25, v24 - 1);
    LODWORD(__p[0]) = 0;
    goto LABEL_27;
  }
  if (v9 != 14)
    goto LABEL_40;
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    *((_QWORD *)a1 + 3) = v10 - 1;
  return compileCode(a1, a2, a3, a4);
}

void sub_1AE044ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t compileExpression(TLexer *a1, _QWORD *Token, uint64_t a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int OperatorId;
  _BYTE *v17;
  int v18;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __int32 *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  size_t v36;
  const __int32 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v55;
  int *v56;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int v62;
  int v63;
  std::exception_vtbl *v64;
  uint64_t v65;
  std::exception *v66;
  void **v67;
  std::exception_vtbl *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  std::exception_vtbl *v72;
  _QWORD *exception;
  uint64_t v74;
  void *v75;
  std::exception_vtbl *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::exception_vtbl *v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::exception_vtbl *v84;
  _QWORD *v85;
  int v86;
  std::exception_vtbl *v87;
  uint64_t v88;
  std::exception *v89;
  void **v90;
  std::exception_vtbl *v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  std::exception_vtbl *v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  std::exception_vtbl *v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102;
  std::exception_vtbl *v103;
  _QWORD *v104;
  uint64_t v105;
  void *v106;
  std::exception_vtbl *v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  std::exception_vtbl *v111;
  _QWORD *v112;
  uint64_t v113;
  void *v114;
  std::exception_vtbl *v115;
  _QWORD *v116;
  uint64_t v117;
  void *v118;
  std::exception_vtbl *v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  std::exception_vtbl *v123;
  _QWORD *v124;
  uint64_t v125;
  void *v126;
  std::exception_vtbl *v127;
  _QWORD *v128;
  uint64_t v129;
  void *v130;
  std::exception_vtbl *v131;
  _QWORD *v132;
  uint64_t v133;
  void *v134;
  std::exception_vtbl *v135;
  _QWORD *v136;
  uint64_t v137;
  void *v138;
  std::exception_vtbl *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char v144;
  uint64_t v145;
  void *__p[2];
  char v147;
  std::exception v148[2];
  char v149;
  char v150;
  _BYTE v151[2048];
  uint64_t v152;

  v5 = Token;
  v7 = 0;
  v152 = *MEMORY[0x1E0C80C00];
  do
  {
    v8 = &v151[v7];
    *(_DWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    v7 += 16;
  }
  while (v7 != 2048);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v141 = a3 + 8;
  while (2)
  {
    v144 = v9;
    while (1)
    {
      result = nextToken(a1, (uint64_t)Token);
      v14 = (_QWORD *)result;
      v15 = *(_QWORD *)result;
      if (*(_QWORD *)result != 5)
        break;
      if ((v10 & 1) == 0)
      {
        loggableToken((uint64_t)a1);
        if (v149 >= 0)
          v71 = v148;
        else
          v71 = v148[0].__vftable;
        tknPrintf("Error: %sExpected an operand\n", v70, v71);
        if (v149 < 0)
          operator delete(v148[0].__vftable);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v148, (__int128 *)__p);
        v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v150 >= 0)
          v72 = (std::exception_vtbl *)&v148[1];
        else
          v72 = v148[1].__vftable;
        conditionalAssert((const char *)v72, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 363);
        TException::~TException(v148);
        if (v147 < 0)
          operator delete(__p[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v148, "");
        TException::TException(exception, (__int128 *)v148);
        *exception = &unk_1E5D16AB0;
      }
      OperatorId = getOperatorId(*(const __int32 **)(result + 8));
      v17 = &v151[16 * v11];
      if (v11 >= 1)
      {
        while (1)
        {
          v18 = *((_DWORD *)v17 - 4);
          if (v18 > OperatorId)
            break;
          if ((v18 & 0xFFFFFFFE) == 0x14)
          {
            *(_DWORD *)(*v5 + 4 * *((_QWORD *)v17 - 1) + 4) = *((_DWORD *)v5 + 4) - *((_QWORD *)v17 - 1);
          }
          else
          {
            LODWORD(v148[0].__vftable) = 3;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = *((_DWORD *)v17 - 4);
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          }
          v17 -= 16;
          if (v11-- <= 1)
          {
            v11 = 0;
            v17 = v151;
            break;
          }
        }
      }
      *(_DWORD *)v17 = OperatorId;
      Token = (_QWORD *)v5[2];
      *(_QWORD *)&v151[16 * v11 + 8] = Token;
      if (OperatorId == 20)
      {
        LODWORD(v148[0].__vftable) = 9;
        TBuffer<wchar_t>::insert((uint64_t)v5, (unint64_t)Token, (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 0;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 7;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
      }
      else if (OperatorId == 21)
      {
        LODWORD(v148[0].__vftable) = 10;
        TBuffer<wchar_t>::insert((uint64_t)v5, (unint64_t)Token, (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 0;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 7;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
      }
      if (v11 >= 127)
      {
        loggableToken((uint64_t)a1);
        if (v149 >= 0)
          v75 = v148;
        else
          v75 = v148[0].__vftable;
        tknPrintf("Error: %sExpression contains too many operators\n", v74, v75);
        if (v149 < 0)
          operator delete(v148[0].__vftable);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v148, (__int128 *)__p);
        v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v150 >= 0)
          v76 = (std::exception_vtbl *)&v148[1];
        else
          v76 = v148[1].__vftable;
        conditionalAssert((const char *)v76, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 411);
        TException::~TException(v148);
        if (v147 < 0)
          operator delete(__p[0]);
        v77 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v148, "");
        TException::TException(v77, (__int128 *)v148);
        *v77 = &unk_1E5D16AB0;
      }
      v10 = 0;
      ++v11;
    }
    switch(v15)
    {
      case 1:
        goto LABEL_30;
      case 2:
      case 4:
        if ((v10 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v94 = v148;
          else
            v94 = v148[0].__vftable;
          tknPrintf("Error: %sExpected an operator\n", v93, v94);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v95 = (std::exception_vtbl *)&v148[1];
          else
            v95 = v148[1].__vftable;
          conditionalAssert((const char *)v95, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 350);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v96 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v96, (__int128 *)v148);
          *v96 = &unk_1E5D16AB0;
        }
        LODWORD(v148[0].__vftable) = 2;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        v20 = 0;
        v21 = (int *)v14[1];
        v22 = v5[2];
        while (v21[v20++])
          ;
        goto LABEL_25;
      case 3:
      case 5:
      case 7:
      case 8:
        goto LABEL_98;
      case 6:
        if ((v10 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v118 = v148;
          else
            v118 = v148[0].__vftable;
          tknPrintf("Error: %sExpected an operator\n", v117, v118);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v119 = (std::exception_vtbl *)&v148[1];
          else
            v119 = v148[1].__vftable;
          conditionalAssert((const char *)v119, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 421);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v120 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v120, (__int128 *)v148);
          *v120 = &unk_1E5D16AB0;
        }
        compileExpression(a1, v5, a3, a4);
        Token = (_QWORD *)nextToken(a1, v28);
        if (*Token != 7)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v114 = v148;
          else
            v114 = v148[0].__vftable;
          tknPrintf("Error: %s() mismatch\n", v113, v114);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v115 = (std::exception_vtbl *)&v148[1];
          else
            v115 = v148[1].__vftable;
          conditionalAssert((const char *)v115, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 430);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v116 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v116, (__int128 *)v148);
          *v116 = &unk_1E5D16AB0;
        }
        goto LABEL_96;
      case 9:
        if ((v10 & 1) != 0)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v110 = v148;
          else
            v110 = v148[0].__vftable;
          tknPrintf("Error: %sExpected an operator\n", v109, v110);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v111 = (std::exception_vtbl *)&v148[1];
          else
            v111 = v148[1].__vftable;
          conditionalAssert((const char *)v111, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 440);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v112 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v112, (__int128 *)v148);
          *v112 = &unk_1E5D16AB0;
        }
        v142 = nextToken(a1, v13);
        if (*(_QWORD *)v142 != 1)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v106 = v148;
          else
            v106 = v148[0].__vftable;
          tknPrintf("Error: %sExpected a function name after '$'\n", v105, v106);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v107 = (std::exception_vtbl *)&v148[1];
          else
            v107 = v148[1].__vftable;
          conditionalAssert((const char *)v107, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 447);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v108 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v108, (__int128 *)v148);
          *v108 = &unk_1E5D16AB0;
        }
        v145 = 0;
        v30 = *a4;
        v29 = a4[1];
        if (v29 == *a4)
          goto LABEL_108;
        v31 = 0;
        v32 = *(const __int32 **)(v142 + 8);
        while (2)
        {
          v33 = *(_QWORD *)(v30 + 8 * v31);
          v34 = wcslen(v32);
          v36 = v34;
          if (*(char *)(v33 + 23) < 0)
          {
            if (v34 != *(_QWORD *)(v33 + 8))
              goto LABEL_55;
            if (v34 == -1)
LABEL_146:
              std::string::__throw_out_of_range[abi:ne180100]();
            v37 = *(const __int32 **)v33;
            if (!v36)
            {
LABEL_58:
              v145 = *(_QWORD *)(v30 + 8 * v31);
              goto LABEL_60;
            }
          }
          else
          {
            if (v34 != *(unsigned __int8 *)(v33 + 23))
              goto LABEL_55;
            v37 = *(const __int32 **)(v30 + 8 * v31);
            if (v36 == -1)
              goto LABEL_146;
            if (!v36)
              goto LABEL_58;
          }
          v38 = wmemcmp(v37, v32, v36);
          v30 = *a4;
          if (v38)
          {
            v29 = a4[1];
LABEL_55:
            if (++v31 >= (unint64_t)((v29 - v30) >> 3))
            {
LABEL_108:
              v145 = 0;
LABEL_109:
              loggableToken((uint64_t)a1);
              v63 = v149;
              v64 = v148[0].__vftable;
              loggableUnicode(*(unsigned int **)(v142 + 8), __p);
              v66 = v148;
              if (v63 < 0)
                v66 = (std::exception *)v64;
              if (v147 >= 0)
                v67 = __p;
              else
                v67 = (void **)__p[0];
              tknPrintf("Error: %s$%s : Invalid function name\n", v65, v66, v67);
              if (v147 < 0)
                operator delete(__p[0]);
              if (v149 < 0)
                operator delete(v148[0].__vftable);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (__int128 *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
              if (v150 >= 0)
                v68 = (std::exception_vtbl *)&v148[1];
              else
                v68 = v148[1].__vftable;
              conditionalAssert((const char *)v68, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 454);
              TException::~TException(v148);
              if (v147 < 0)
                operator delete(__p[0]);
              v69 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v69, (__int128 *)v148);
              *v69 = &unk_1E5D16BC8;
            }
            continue;
          }
          break;
        }
        v145 = *(_QWORD *)(v30 + 8 * v31);
        if (!v145)
          goto LABEL_109;
LABEL_60:
        if (*(_QWORD *)nextToken(a1, v35) != 6)
        {
          v46 = *((_QWORD *)a1 + 3);
          if (v46)
          {
            v45 = 0;
            *((_QWORD *)a1 + 3) = v46 - 1;
            goto LABEL_75;
          }
LABEL_74:
          v45 = 0;
          goto LABEL_75;
        }
        v41 = *(_QWORD *)nextToken(a1, v40);
        if (v41 == 7)
          goto LABEL_74;
        v42 = 0;
        do
        {
          if (v42)
          {
            if (v41 != 8)
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0)
                v79 = v148;
              else
                v79 = v148[0].__vftable;
              tknPrintf("Error: %sMissing ',' between function parameters\n", v78, v79);
              if (v149 < 0)
                operator delete(v148[0].__vftable);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (__int128 *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
              if (v150 >= 0)
                v80 = (std::exception_vtbl *)&v148[1];
              else
                v80 = v148[1].__vftable;
              conditionalAssert((const char *)v80, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 480);
              TException::~TException(v148);
              if (v147 < 0)
                operator delete(__p[0]);
              v81 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v81, (__int128 *)v148);
              *v81 = &unk_1E5D16AB0;
            }
          }
          else
          {
            v43 = *((_QWORD *)a1 + 3);
            if (v43)
              *((_QWORD *)a1 + 3) = v43 - 1;
          }
          compileExpression(a1, v5, a3, a4);
          v41 = *(_QWORD *)nextToken(a1, v44);
          --v42;
        }
        while (v41 != 7);
        v45 = -v42;
LABEL_75:
        if (v45 < *(_QWORD *)(v145 + 32) || v45 > *(_QWORD *)(v145 + 40))
        {
          loggableToken((uint64_t)a1);
          v86 = v149;
          v87 = v148[0].__vftable;
          loggableUnicode(*(unsigned int **)(v142 + 8), __p);
          v89 = v148;
          if (v86 < 0)
            v89 = (std::exception *)v87;
          if (v147 >= 0)
            v90 = __p;
          else
            v90 = (void **)__p[0];
          tknPrintf("Error: %s$%s : Function takes between %llu and %llu parameters\n", v88, v89, v90, *(_QWORD *)(v145 + 32), *(_QWORD *)(v145 + 40));
          if (v147 < 0)
            operator delete(__p[0]);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v150 >= 0)
            v91 = (std::exception_vtbl *)&v148[1];
          else
            v91 = v148[1].__vftable;
          conditionalAssert((const char *)v91, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 493);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v92 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v92, (__int128 *)v148);
          *v92 = &unk_1E5D16BC8;
        }
        LODWORD(v148[0].__vftable) = 4;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)&v145, 2uLL);
        LODWORD(v148[0].__vftable) = v45;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        goto LABEL_96;
      default:
        if (v15 == 24)
        {
LABEL_30:
          if ((v10 & 1) != 0)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0)
              v98 = v148;
            else
              v98 = v148[0].__vftable;
            tknPrintf("Error: %sExpected a binary operator\n", v97, v98);
            if (v149 < 0)
              operator delete(v148[0].__vftable);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (__int128 *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
            if (v150 >= 0)
              v99 = (std::exception_vtbl *)&v148[1];
            else
              v99 = v148[1].__vftable;
            conditionalAssert((const char *)v99, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 262);
            TException::~TException(v148);
            if (v147 < 0)
              operator delete(__p[0]);
            v100 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v100, (__int128 *)v148);
            *v100 = &unk_1E5D16AB0;
          }
          v25 = (_QWORD *)nextToken(a1, v13);
          if (*v25 == 3)
          {
            LODWORD(v148[0].__vftable) = 2;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 48;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            v27 = 0;
          }
          else
          {
            if (*v25 != 15)
              goto LABEL_90;
            if (*v14 == 1)
            {
              v148[0] = (std::exception)v14[1];
              if (v141 == std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148))
              {
                loggableToken((uint64_t)a1);
                if (v149 >= 0)
                  v130 = v148;
                else
                  v130 = v148[0].__vftable;
                tknPrintf("Error: %sIllegal use of '[]' on an attribute.\n", v129, v130);
                if (v149 < 0)
                  operator delete(v148[0].__vftable);
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                TException::TException(v148, (__int128 *)__p);
                v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
                if (v150 >= 0)
                  v131 = (std::exception_vtbl *)&v148[1];
                else
                  v131 = v148[1].__vftable;
                conditionalAssert((const char *)v131, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 273);
                TException::~TException(v148);
                if (v147 < 0)
                  operator delete(__p[0]);
                v132 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(v148, "");
                TException::TException(v132, (__int128 *)v148);
                *v132 = &unk_1E5D16AB0;
              }
            }
            v26 = nextToken(a1, v24);
            if (*(_QWORD *)v26 == 5 && getOperatorId(*(const __int32 **)(v26 + 8)) == 7)
            {
              v27 = 1;
            }
            else
            {
              v47 = *((_QWORD *)a1 + 3);
              v27 = 0;
              if (v47)
                *((_QWORD *)a1 + 3) = v47 - 1;
            }
            compileExpression(a1, v5, a3, a4);
            v49 = (_QWORD *)nextToken(a1, v48);
            if (*v49 != 16)
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0)
                v126 = v148;
              else
                v126 = v148[0].__vftable;
              tknPrintf("Error: %s[] mismatch\n", v125, v126);
              if (v149 < 0)
                operator delete(v148[0].__vftable);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (__int128 *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
              if (v150 >= 0)
                v127 = (std::exception_vtbl *)&v148[1];
              else
                v127 = v148[1].__vftable;
              conditionalAssert((const char *)v127, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 287);
              TException::~TException(v148);
              if (v147 < 0)
                operator delete(__p[0]);
              v128 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v128, (__int128 *)v148);
              *v128 = &unk_1E5D16AB0;
            }
            v25 = (_QWORD *)nextToken(a1, (uint64_t)v49);
          }
          if (*v25 != 3)
          {
LABEL_90:
            if (*v14 == 24
              || (v148[0] = (std::exception)v14[1],
                  v141 != std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148)))
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0)
                v83 = v148;
              else
                v83 = v148[0].__vftable;
              tknPrintf("Error: %sExpected '.' after reference to array.\n", v82, v83);
              if (v149 < 0)
                operator delete(v148[0].__vftable);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (__int128 *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
              if (v150 >= 0)
                v84 = (std::exception_vtbl *)&v148[1];
              else
                v84 = v148[1].__vftable;
              conditionalAssert((const char *)v84, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 305);
              TException::~TException(v148);
              if (v147 < 0)
                operator delete(__p[0]);
              v85 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v85, (__int128 *)v148);
              *v85 = &unk_1E5D16AB0;
            }
            LODWORD(v148[0].__vftable) = 6;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            v55 = 0;
            v56 = (int *)v14[1];
            while (v56[v55++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], v56, v55 - 1);
            LODWORD(v148[0].__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            v58 = *((_QWORD *)a1 + 3);
            if (v58)
              *((_QWORD *)a1 + 3) = v58 - 1;
            goto LABEL_96;
          }
          if (*v14 == 1)
          {
            v148[0] = (std::exception)v14[1];
            if (v141 == std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148))
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0)
                v134 = v148;
              else
                v134 = v148[0].__vftable;
              tknPrintf("Error: %sIllegal use of '.' on an attribute.\n", v133, v134);
              if (v149 < 0)
                operator delete(v148[0].__vftable);
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (__int128 *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
              if (v150 >= 0)
                v135 = (std::exception_vtbl *)&v148[1];
              else
                v135 = v148[1].__vftable;
              conditionalAssert((const char *)v135, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 321);
              TException::~TException(v148);
              if (v147 < 0)
                operator delete(__p[0]);
              v136 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v136, (__int128 *)v148);
              *v136 = &unk_1E5D16AB0;
            }
          }
          v50 = (_QWORD *)nextToken(a1, v39);
          if ((unint64_t)(*v50 - 21) >= 3 && *v50 != 1)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0)
              v138 = v148;
            else
              v138 = v148[0].__vftable;
            tknPrintf("Error: %sExpected an identifier\n", v137, v138);
            if (v149 < 0)
              operator delete(v148[0].__vftable);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (__int128 *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
            if (v150 >= 0)
              v139 = (std::exception_vtbl *)&v148[1];
            else
              v139 = v148[1].__vftable;
            conditionalAssert((const char *)v139, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 332);
            TException::~TException(v148);
            if (v147 < 0)
              operator delete(__p[0]);
            v140 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v140, (__int128 *)v148);
            *v140 = &unk_1E5D16AB0;
          }
          LODWORD(v148[0].__vftable) = 1;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          LODWORD(v148[0].__vftable) = v27;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          v51 = 0;
          v52 = (int *)v14[1];
          while (v52[v51++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], v52, v51 - 1);
          LODWORD(v148[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          v20 = 0;
          v21 = (int *)v50[1];
          v22 = v5[2];
          while (v21[v20++])
            ;
LABEL_25:
          TBuffer<wchar_t>::insert((uint64_t)v5, v22, v21, v20 - 1);
          LODWORD(v148[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
LABEL_96:
          v9 = 0;
          v10 = 1;
          if ((v144 & 1) != 0)
          {
            LODWORD(v148[0].__vftable) = 12;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 1;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            v9 = 0;
          }
          continue;
        }
        if (v15 == 26)
        {
          if ((v10 & 1) != 0)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0)
              v122 = v148;
            else
              v122 = v148[0].__vftable;
            tknPrintf("Error: %sExpected a binary operator\n", v121, v122);
            if (v149 < 0)
              operator delete(v148[0].__vftable);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (__int128 *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
            if (v150 >= 0)
              v123 = (std::exception_vtbl *)&v148[1];
            else
              v123 = v148[1].__vftable;
            conditionalAssert((const char *)v123, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 251);
            TException::~TException(v148);
            if (v147 < 0)
              operator delete(__p[0]);
            v124 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v124, (__int128 *)v148);
            *v124 = &unk_1E5D16AB0;
          }
          wcscmp(*(const __int32 **)(result + 8), (const __int32 *)"!");
          v10 = 0;
          v9 = 1;
          continue;
        }
LABEL_98:
        v59 = *((_QWORD *)a1 + 3);
        if (v59)
          *((_QWORD *)a1 + 3) = v59 - 1;
        if (v11 >= 1)
        {
          v60 = &v151[16 * v11];
          v61 = v60;
          do
          {
            v62 = *((_DWORD *)v61 - 4);
            v61 -= 16;
            if ((v62 & 0xFFFFFFFE) == 0x14)
            {
              *(_DWORD *)(*v5 + 4 * *((_QWORD *)v60 - 1) + 4) = *((_DWORD *)v5 + 4) - *((_QWORD *)v60 - 1);
            }
            else
            {
              LODWORD(v148[0].__vftable) = 3;
              TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
              LODWORD(v148[0].__vftable) = *((_DWORD *)v60 - 4);
              result = TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            }
            v60 = v61;
          }
          while (v61 > v151);
        }
        if (v144 & 1 | ((v10 & 1) == 0))
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0)
            v102 = v148;
          else
            v102 = v148[0].__vftable;
          tknPrintf("Error: %sMissing operand\n", v101, v102);
          if (v149 < 0)
            operator delete(v148[0].__vftable);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (__int128 *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v150 >= 0)
            v103 = (std::exception_vtbl *)&v148[1];
          else
            v103 = v148[1].__vftable;
          conditionalAssert((const char *)v103, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 535);
          TException::~TException(v148);
          if (v147 < 0)
            operator delete(__p[0]);
          v104 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v104, (__int128 *)v148);
          *v104 = &unk_1E5D16AB0;
        }
        return result;
    }
  }
}

void sub_1AE046B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t getOperatorId(const __int32 *a1)
{
  if (!wcscmp(a1, (const __int32 *)"="))
    return 10;
  if (!wcscmp(a1, (const __int32 *)"!"))
    return 11;
  if (!wcscmp(a1, (const __int32 *)"<"))
    return 9;
  if (!wcscmp(a1, (const __int32 *)">"))
    return 8;
  if (!wcscmp(a1, (const __int32 *)">"))
    return 13;
  if (!wcscmp(a1, (const __int32 *)"<"))
    return 12;
  if (!wcscmp(a1, (const __int32 *)"|"))
    return 21;
  if (!wcscmp(a1, (const __int32 *)"&"))
    return 20;
  if (!wcscmp(a1, (const __int32 *)"+"))
    return 6;
  if (!wcscmp(a1, (const __int32 *)"-"))
    return 7;
  if (!wcscmp(a1, (const __int32 *)"*"))
    return 3;
  if (!wcscmp(a1, (const __int32 *)"/"))
    return 4;
  if (!wcscmp(a1, (const __int32 *)"%"))
    return 5;
  if (!wcscmp(a1, (const __int32 *)":"))
    return 1;
  if (!wcscmp(a1, (const __int32 *)"^"))
    return 2;
  if (!wcscmp(a1, (const __int32 *)"e"))
    return 16;
  if (!wcscmp(a1, (const __int32 *)"n"))
    return 17;
  if (!wcscmp(a1, (const __int32 *)"g"))
    return 14;
  if (!wcscmp(a1, (const __int32 *)"l"))
    return 15;
  if (!wcscmp(a1, (const __int32 *)"g"))
    return 19;
  if (!wcscmp(a1, (const __int32 *)"l"))
    return 18;
  return 10;
}

void TGrammar::forEachNonTerminal<TIntegrityChecker>(uint64_t a1, _BYTE *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_QWORD *)(a1 + 48);
  if (v2 != (_QWORD *)(a1 + 48))
  {
    do
    {
      TIntegrityChecker::operator()(a2, v2[5]);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void TGrammar::forEachTerminal<TIntegrityChecker>(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 152) != v2)
  {
    v5 = 0;
    do
    {
      TIntegrityChecker::operator()(a2, *(_QWORD *)(v2 + 8 * v5++));
      v2 = *(_QWORD *)(a1 + 144);
    }
    while (v5 < (*(_QWORD *)(a1 + 152) - v2) >> 3);
  }
}

void std::vector<TGrammarCompiler::TArgument>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        *v7 = 0;
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v17 = &v16[16 * a2];
    v18 = 16 * a2;
    v19 = v16;
    do
    {
      *(_QWORD *)v19 = 0;
      v19 += 16;
      v18 -= 16;
    }
    while (v18);
    v20 = &v13[16 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
        v16 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

uint64_t kaldi::ReconstructLattice(_QWORD *a1, kaldi::LatticeScoreCache *a2, uint64_t *a3, kaldi::TransitionModel *a4, int a5, _QWORD *a6, int a7, uint64_t a8, float a9, float a10)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __n128 v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  int *v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  float v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  float v51;
  uint64_t **v52;
  uint64_t v53;
  _BOOL4 v54;
  void *v55;
  float v56;
  float v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v62;
  int v64;
  uint64_t v65;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  void *v71[2];
  __int128 v72;
  uint64_t *v73;
  float v74;
  unsigned int v75;
  _QWORD *v76[2];
  void *v77;
  _BYTE *v78;
  uint64_t v79;
  unsigned int v80;
  __n128 v81;
  void *v82;
  void *v83;
  uint64_t v84;
  int v85;
  __n128 v86;
  char v87;
  _OWORD v88[2];
  int v89;
  _OWORD v90[2];
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t (***v95)(_QWORD);
  float v96;
  int v97;
  float v98;
  unsigned __int32 v99;

  v16 = (std::__shared_weak_count *)a3[1];
  v92 = *a3;
  v93 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(&v94, &v92, 0x20000uLL);
  v19 = v93;
  if (v93)
  {
    v20 = (unint64_t *)&v93->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v91 = 0u;
  memset(v90, 0, sizeof(v90));
  (*(void (**)(uint64_t))(*(_QWORD *)a8 + 224))(a8);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 200))(a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 176))(a8, v22);
  memset(v88, 0, sizeof(v88));
  v89 = 1065353216;
  v23 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v24 = (**v95)(v95);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 24))(a8);
  v86.n128_u64[0] = __PAIR64__(v24, v23);
  v86.n128_u64[1] = v25;
  v87 = 0;
  v26 = std::deque<kaldi::Tuple>::push_back(v90, &v86);
  v27 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a8 + 24))(a8, v26);
  v28 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v81.n128_u64[0] = __PAIR64__((**v95)(v95), v28);
  v81.n128_u8[8] = 0;
  v76[0] = &v81;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::__emplace_unique_key_args<kaldi::StateMapKey,std::piecewise_construct_t const&,std::tuple<kaldi::StateMapKey&&>,std::tuple<>>((uint64_t)v88, (int *)&v81, (uint64_t)&std::piecewise_construct, v76)+ 7) = v27;
  v29 = *((_QWORD *)&v91 + 1);
  if (!*((_QWORD *)&v91 + 1))
  {
LABEL_65:
    v58 = 1;
    goto LABEL_71;
  }
  v30 = a9 + 0.0;
  v65 = a8;
  v62 = a7;
  while (1)
  {
    if (a7 < 1)
      goto LABEL_14;
    if ((*(int (**)(uint64_t))(*(_QWORD *)a8 + 160))(a8) > a7)
      break;
    v29 = *((_QWORD *)&v91 + 1);
LABEL_14:
    v31 = (int *)(*(_QWORD *)(*((_QWORD *)&v90[0] + 1) + 8 * ((unint64_t)v91 / 0xCC))
                + 20 * ((unint64_t)v91 % 0xCC));
    v32 = *v31;
    v33 = v31[3];
    v69 = v31[2];
    v70 = v31[1];
    v34 = *((_BYTE *)v31 + 16);
    *((_QWORD *)&v91 + 1) = v29 - 1;
    *(_QWORD *)&v91 = v91 + 1;
    if ((unint64_t)v91 >= 0x198)
    {
      operator delete(**((void ***)&v90[0] + 1));
      *((_QWORD *)&v90[0] + 1) += 8;
      *(_QWORD *)&v91 = v91 - 204;
    }
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a1);
    v35 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v32);
    v36 = *(_QWORD *)(v35 + 48);
    v68 = v35;
    if (*(_QWORD *)(v35 + 56) != v36)
    {
      v37 = 0;
      v64 = -(v34 & 1);
      while (1)
      {
        v38 = v36 + 48 * v37;
        v76[0] = *(_QWORD **)v38;
        v76[1] = *(_QWORD **)(v38 + 8);
        v78 = 0;
        v79 = 0;
        v77 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, *(const void **)(v38 + 16), *(_QWORD *)(v38 + 24), (uint64_t)(*(_QWORD *)(v38 + 24) - *(_QWORD *)(v38 + 16)) >> 2);
        v80 = *(_DWORD *)(v36 + 48 * v37 + 40);
        v39 = v77;
        if (v78 == v77)
        {
          v41 = 0.0;
        }
        else
        {
          v40 = 0;
          v41 = 0.0;
          do
          {
            v42 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v39[v40]);
            v43 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v42);
            v41 = v41 + kaldi::LatticeScoreCache::GetScore(a2, v33 + v40++, v43);
            v39 = v77;
          }
          while (v40 < (v78 - (_BYTE *)v77) >> 2);
        }
        if (HIDWORD(v76[0]))
          v44 = HIDWORD(v76[0]) == a5;
        else
          v44 = 1;
        v45 = v44;
        v46 = v30;
        v47 = v70;
        if (!v44)
        {
          v81.n128_u64[0] = SHIDWORD(v76[0]);
          v48 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, v81.n128_u64);
          if (v48)
            v49 = *((_DWORD *)v48 + 6);
          else
            v49 = 1;
          v50 = v49 + v64;
          if (v77 == v78)
            v51 = 0.0;
          else
            v51 = (float)v50;
          if ((fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc((uint64_t)&v94, v70, HIDWORD(v76[0]), (uint64_t)&v73) & 1) == 0)
          {
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Could not find arc for input_state ", 35);
              v59 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" olabel ", 8);
              v60 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in LM. Failed to reconstruct lattice (incompatible LM?).", 57);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
            }
            if (v77)
            {
              v78 = v77;
              operator delete(v77);
            }
            goto LABEL_70;
          }
          v46 = (float)((float)(v51 * a10) + 0.0) + v74;
          v47 = v75;
        }
        v73 = (uint64_t *)__PAIR64__(v47, v80);
        LOBYTE(v74) = v45;
        v52 = std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::find<kaldi::StateMapKey>(v88, &v73);
        if (v52)
        {
          v53 = *((unsigned int *)v52 + 7);
        }
        else
        {
          v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 200))(a8);
          v81.n128_u64[0] = (unint64_t)&v73;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::__emplace_unique_key_args<kaldi::StateMapKey,std::piecewise_construct_t const&,std::tuple<kaldi::StateMapKey&&>,std::tuple<>>((uint64_t)v88, (int *)&v73, (uint64_t)&std::piecewise_construct, &v81)+ 7) = v53;
          v81.n128_u64[0] = __PAIR64__(v47, v80);
          v81.n128_u32[2] = v53;
          v81.n128_u32[3] = v33 + ((unint64_t)(v78 - (_BYTE *)v77) >> 2);
          LOBYTE(v82) = v45;
          std::deque<kaldi::Tuple>::push_back(v90, &v81);
        }
        v81.n128_u32[0] = fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final((uint64_t)&v94, v47);
        v99 = 2139095040;
        if (v81.n128_f32[0] != INFINITY)
          break;
LABEL_53:
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v81.n128_u64[0] = (unint64_t)v76[0];
        v85 = v53;
        v81.n128_u64[1] = __PAIR64__(LODWORD(v41), LODWORD(v46));
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v82, (char *)v77, (uint64_t)v78, (v78 - (_BYTE *)v77) >> 2);
        (*(void (**)(uint64_t, _QWORD, __n128 *))(*(_QWORD *)a8 + 208))(a8, v69, &v81);
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        if (v77)
        {
          v78 = v77;
          operator delete(v77);
        }
        ++v37;
        v36 = *(_QWORD *)(v68 + 48);
        if (v37 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v68 + 56) - v36) >> 4))
          goto LABEL_64;
      }
      (*(void (**)(__n128 *__return_ptr, _QWORD *, _QWORD))(*a1 + 32))(&v81, a1, v80);
      v98 = v81.n128_f32[1];
      v99 = v81.n128_u32[0];
      v97 = 2139095040;
      v96 = INFINITY;
      if (v81.n128_f32[0] != INFINITY)
      {
        v54 = 1;
        v55 = (void *)v81.n128_u64[1];
        if (v81.n128_u64[1])
          goto LABEL_44;
LABEL_45:
        if (v54)
        {
          v56 = fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final((uint64_t)&v94, v47);
          *(_OWORD *)v71 = 0u;
          v72 = 0u;
          a8 = v65;
          (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v65 + 184))(v65, v53, v71);
          if (v71[1])
          {
            *(void **)&v72 = v71[1];
            operator delete(v71[1]);
          }
          if (v45)
            v57 = -0.0;
          else
            v57 = a10;
          v46 = v57 + (float)(v46 + v56);
        }
        else
        {
          a8 = v65;
        }
        goto LABEL_53;
      }
      v55 = (void *)v81.n128_u64[1];
      if (v98 == v96)
      {
        v54 = v82 != (void *)v81.n128_u64[1];
        if (!v81.n128_u64[1])
          goto LABEL_45;
      }
      else
      {
        v54 = 1;
        if (!v81.n128_u64[1])
          goto LABEL_45;
      }
LABEL_44:
      v82 = v55;
      operator delete(v55);
      goto LABEL_45;
    }
LABEL_64:
    v29 = *((_QWORD *)&v91 + 1);
    a7 = v62;
    if (!*((_QWORD *)&v91 + 1))
      goto LABEL_65;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Number of output lattice states is getting out of hand, aborting conversion", 75);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
  }
LABEL_70:
  v58 = 0;
LABEL_71:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v88);
  std::deque<kaldi::Tuple>::~deque[abi:ne180100](v90);
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v94);
  return v58;
}

void sub_1AE047920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a30);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a67);
  std::deque<kaldi::Tuple>::~deque[abi:ne180100](&STACK[0x200]);
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst((_QWORD *)(v67 - 240));
  _Unwind_Resume(a1);
}

__n128 std::deque<kaldi::Tuple>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<kaldi::Tuple>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  *v8 = result;
  ++a1[5];
  return result;
}

double quasar::ErrorBlamingDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  _DWORD *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _DWORD *v10;
  _DWORD *v11;
  _BYTE *v12;
  double result;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  char *v23;
  char *v24;
  void *__p[2];
  char v26;
  const void *v27[2];
  char v28;

  kaldi::TrainingGraphCompilerOptions::Register((uint64_t)this + 1140, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[111], a2, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v27, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 100), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 97), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 64), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "base-dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 67), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 106), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "optional-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Optional silence phone");
  v23 = (char *)(this + 94);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 94), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "silence-prob");
  std::string::basic_string[abi:ne180100]<0>(__p, "Silence probability (0.0 to 1.0)");
  v22 = this + 63;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 63), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  v21 = (_DWORD *)this + 281;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)this + 1124, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "retry-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Fall-back decoding beam");
  v20 = (_DWORD *)this + 283;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)this + 1132, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "max-total-extra-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max first pass weight for limiting total weight of all extra LMs in the first pass - all-app LM and possibly one more app specific LM");
  v19 = this + 142;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 142), (uint64_t)__p, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 144), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v27, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 103), (uint64_t)__p, 1, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "align-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing word alignment(0 for none)");
  v18 = this + 139;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)(this + 139), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "reconstruct-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing lattice reconstruction(0 for none)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)this + 1116, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  v24 = (char *)(this + 70);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 70), (uint64_t)__p, 1, 14, 0, 143, 0);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)v24, (uint64_t)__p, 1, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  v17 = (char *)(this + 76);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 76), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  v16 = (char *)(this + 73);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 73), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  v15 = (char *)(this + 79);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 79), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  v14 = (char *)(this + 82);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 82), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximal context for RNN style LM, no-op for other style of LMs");
  v4 = this + 140;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)(this + 140), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(__p, "the file extension name of the corresponding NNLM word map file");
  v5 = (char *)(this + 85);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 85), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map FST/NNLM models into memory (requires aligned models)");
  v6 = (char *)this + 508;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)this + 508, (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Negative SmallG FST filename");
  v7 = (char *)(this + 88);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 88), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "raw-smallg-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "SmallG FST (with no phone or word loops for nonterminals) filename");
  v8 = (char *)(this + 91);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 91), (uint64_t)__p, 0, 107, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "extended-report");
  std::string::basic_string[abi:ne180100]<0>(__p, "Set to false if only the concise error-report should be generated.");
  v9 = (char *)this + 497;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)this + 497, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "lm-context-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Language model context length (e.g. 4-gram has length 3)");
  v10 = (_DWORD *)this + 125;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)this + 500, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "overlap-percentage");
  std::string::basic_string[abi:ne180100]<0>(__p, "Required overlap in percent of two regions in reference and hypothesis to be viewed as the same region.");
  v11 = this + 141;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 141), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "json-output-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "True if error reports should be formatted as JSON file.");
  v12 = this + 62;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)v12, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  *v12 = 0;
  *v9 = 1;
  *v21 = 1128792064;
  *v20 = 0;
  MEMORY[0x1AF44C914](v23, "sil");
  *v22 = 1056964608;
  *v19 = 1065353216;
  MEMORY[0x1AF44C914](v24, "");
  MEMORY[0x1AF44C914](v17, "");
  MEMORY[0x1AF44C914](v16, "");
  MEMORY[0x1AF44C914](v15, "");
  MEMORY[0x1AF44C914](v14, "");
  MEMORY[0x1AF44C914](v5, "wordmap");
  *v6 = 1;
  *v4 = 7;
  MEMORY[0x1AF44C914](v7, "");
  MEMORY[0x1AF44C914](v8, "");
  *v10 = 3;
  *v11 = 1065353216;
  *(_QWORD *)&result = 0xA00000000;
  *v18 = 0xA00000000;
  return result;
}

void sub_1AE04881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(exception_object);
}

void quasar::ErrorBlamingDecoder::finishInit(quasar::ErrorBlamingDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  std::locale::id *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  std::locale::__imp *locale;
  unint64_t *v28;
  unint64_t v29;
  kaldi::quasar::LexiconFst *v30;
  fst::SymbolTable *v31;
  uint64_t v32;
  std::locale::__imp *v33;
  std::locale::__imp *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  int v40;
  uint64_t v41;
  char **v42;
  unsigned int NthKey;
  quasar::QsrTextSymbolTable *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::pair<std::string, std::string> *v68;
  uint64_t v69;
  _QWORD *v70;
  void **v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::locale::__imp *v79;
  unint64_t *v80;
  unint64_t v81;
  std::locale::__imp *v82;
  std::locale::__imp *v83;
  int64x2_t *v84;
  uint64_t *MultiChainMultiAudioBuffer;
  _OWORD *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  int64x2_t v99;
  _OWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int64x2_t *v111;
  uint64_t v112;
  uint64_t *v113;
  _OWORD *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  __int128 v126;
  int64x2_t v127;
  _OWORD *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  float *v136;
  float *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _DWORD *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  void *v158[2];
  char v159;
  __int128 v160;
  std::locale v161[2];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _BYTE __str[32];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  std::vector<std::pair<std::string, std::string>> v198;
  _QWORD v199[3];
  _QWORD *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  quasar::ModelLoader::readContextDependency(*((_QWORD *)this + 46), (unsigned __int8 *)this + 776, (uint64_t *)__str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1168, (__int128 *)__str);
  v2 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v3 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*((char *)this + 823) < 0)
  {
    if (!*((_QWORD *)this + 101))
      goto LABEL_15;
  }
  else if (!*((_BYTE *)this + 823))
  {
    goto LABEL_15;
  }
  quasar::ModelLoader::readTransitionModel(*((_QWORD *)this + 46), (unsigned __int8 *)this + 800, 0, (uint64_t *)__str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1184, (__int128 *)__str);
  v5 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_15:
  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 512, 4, 0, (uint64_t *)__str);
  v157 = (_QWORD *)((char *)this + 872);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 872, (__int128 *)__str);
  v8 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 111), (quasar::ErrorBlamingDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  v11 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 111), "<?>");
  v12 = v11;
  if (v11 != -1)
  {
    v13 = *((int *)this + 288);
    if ((_DWORD)v13 && v11 != v13 && quasar::gLogLevel >= 5)
    {
      v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v179 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Silence label is set to ", 24);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" but does not match the auto-determined silence label ", 54);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)". Will use latter.", 18);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
    }
    *((_DWORD *)this + 288) = v12;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 288, (uint64_t)this + 824, (uint64_t)this + 848, (uint64_t *)__str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1032, (__int128 *)__str);
  v16 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (*((char *)this + 871) < 0)
    v19 = *((_QWORD *)this + 107);
  else
    v19 = *((unsigned __int8 *)this + 871);
  if (v19)
    v20 = 1;
  else
    v20 = quasar::gLogLevel < 4;
  if (!v20)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"You have not specified unpronounced-word-file. This will prevent you from using class LM tags ", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"like \\CS-GeoBizName-start and \\CS-GeoBizName-end in the ref transcription for error blamer. ", 92);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
  }
  v158[0] = 0;
  if ((kaldi::Input::OpenInternal(v158, (uint64_t)this + 536, 0, 0) & 1) == 0)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"can not open ", 13);
    v154 = *((char *)this + 559);
    if (v154 >= 0)
      v155 = (char *)this + 536;
    else
      v155 = (char *)*((_QWORD *)this + 67);
    if (v154 >= 0)
      v156 = *((unsigned __int8 *)this + 559);
    else
      v156 = *((_QWORD *)this + 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)v155, v156);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  memset(&v198, 0, sizeof(v198));
  v196 = 0uLL;
  v197 = 0;
  v22 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v23 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v158);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(v161, v22);
    v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(v161);
    v26 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&v196, v25);
    if ((*((_BYTE *)v26 + *(_QWORD *)(*v26 - 24) + 32) & 5) != 0)
      break;
    v161[0].__locale_ = 0;
    v161[1].__locale_ = 0;
    *(_QWORD *)&v162 = 0;
    v194 = 0uLL;
    v195 = 0;
    kaldi::SplitStringOnFirstSpace((uint64_t)&v196, (uint64_t)v161, (uint64_t)&v194);
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__str, (__int128 *)v161, &v194);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v198, (__int128 *)__str);
    if (SHIBYTE(v179) < 0)
      operator delete(*(void **)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (SHIBYTE(v195) < 0)
      operator delete((void *)v194);
    if (SBYTE7(v162) < 0)
      operator delete(v161[0].__locale_);
  }
  kaldi::Input::Close((kaldi::Input *)v158);
  kaldi::quasar::Lexicon::Lexicon(__str, &v198, 1, 0, 0);
  kaldi::quasar::Lexicon::SetPronView((uint64_t)__str, 2u, 0);
  LOBYTE(v160) = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>((float *)this + 126, (uint64_t)this + 752, (unsigned __int8 *)&v160, v161);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 904, (__int128 *)v161);
  locale = v161[1].__locale_;
  if (v161[1].__locale_)
  {
    v28 = (unint64_t *)((char *)v161[1].__locale_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    }
  }
  v30 = (kaldi::quasar::LexiconFst *)*((_QWORD *)this + 113);
  v31 = (fst::SymbolTable *)*((_QWORD *)this + 109);
  v32 = *((_QWORD *)this + 111);
  v33 = *(std::locale::__imp **)(v32 + 96);
  v34 = *(std::locale::__imp **)(v32 + 104);
  v161[0].__locale_ = v33;
  v161[1].__locale_ = v34;
  if (v34)
  {
    v35 = (unint64_t *)((char *)v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  kaldi::quasar::LexiconFst::CreateFst(v30, (const kaldi::quasar::Lexicon *)__str, v31, v33, 0);
  if (v34)
  {
    v37 = (unint64_t *)((char *)v34 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
    }
  }
  quasar::Bitmap::~Bitmap(*((quasar::Bitmap **)this + 113));
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v39);
  if (quasar::gLogLevel >= 4)
  {
    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v167 = 0u;
    v165 = 0u;
    v166 = 0u;
    v163 = 0u;
    v164 = 0u;
    *(_OWORD *)&v161[0].__locale_ = 0u;
    v162 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v161);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Created lexicon FST", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v161);
  }
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)__str);
  if (SHIBYTE(v197) < 0)
    operator delete((void *)v196);
  *(_QWORD *)__str = &v198;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  kaldi::Input::~Input((kaldi::Input *)v158);
  v40 = 0;
  if (quasar::QsrTextSymbolTable::NumSymbols(*((quasar::QsrTextSymbolTable **)this + 111)))
  {
    v41 = 0;
    v42 = (char **)((char *)this + 1088);
    while (1)
    {
      NthKey = quasar::QsrTextSymbolTable::GetNthKey(*((quasar::QsrTextSymbolTable **)this + 111));
      v44 = (quasar::QsrTextSymbolTable *)*((_QWORD *)this + 111);
      quasar::QsrTextSymbolTable::GetNthKey(v44);
      quasar::QsrTextSymbolTable::Find(v44, __str);
      v45 = __str[23];
      if ((__str[23] & 0x80000000) != 0)
        break;
      if (__str[0] == 47)
      {
        v46 = __str[23];
        goto LABEL_74;
      }
LABEL_106:
      if (++v41 >= (unint64_t)quasar::QsrTextSymbolTable::NumSymbols(*((quasar::QsrTextSymbolTable **)this + 111)))
        goto LABEL_107;
    }
    if (**(_BYTE **)__str == 47)
    {
      v46 = *(_QWORD *)&__str[8];
LABEL_74:
      v47 = v46 - 1;
      if ((__str[23] & 0x80) == 0)
      {
        if (__str[v47] != 47)
          goto LABEL_106;
LABEL_79:
        std::string::basic_string((std::string *)v161, (const std::string *)__str, 1uLL, v45 - 2, (std::allocator<char> *)&v198);
        std::string::basic_string[abi:ne180100]<0>(&v198, "WORD-DIS-");
        v48 = quasar::startsWith((unsigned __int8 *)v161, (unsigned __int8 *)&v198);
        v49 = v48;
        if (SHIBYTE(v198.__end_cap_.__value_) < 0)
        {
          operator delete(v198.__begin_);
          if (!v49)
            goto LABEL_84;
        }
        else if (!v48)
        {
LABEL_84:
          v50 = (*(uint64_t (**)(_QWORD, std::locale *))(*(_QWORD *)*v157 + 96))(*v157, v161);
          v51 = v50;
          if (v50 != -1)
          {
            v52 = (unint64_t *)*((_QWORD *)this + 137);
            v53 = *((_QWORD *)this + 138);
            if ((unint64_t)v52 >= v53)
            {
              v55 = ((char *)v52 - *v42) >> 3;
              if ((unint64_t)(v55 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v56 = v53 - (_QWORD)*v42;
              v57 = v56 >> 2;
              if (v56 >> 2 <= (unint64_t)(v55 + 1))
                v57 = v55 + 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v57;
              if (v58)
                v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 1104, v58);
              else
                v59 = 0;
              v60 = (unint64_t *)&v59[8 * v55];
              *v60 = NthKey | ((unint64_t)v51 << 32);
              v54 = v60 + 1;
              v61 = (char *)*((_QWORD *)this + 137);
              v62 = (char *)*((_QWORD *)this + 136);
              if (v61 != v62)
              {
                do
                {
                  v63 = *((_QWORD *)v61 - 1);
                  v61 -= 8;
                  *--v60 = v63;
                }
                while (v61 != v62);
                v61 = *v42;
              }
              *((_QWORD *)this + 136) = v60;
              *((_QWORD *)this + 137) = v54;
              *((_QWORD *)this + 138) = &v59[8 * v58];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *v52 = NthKey | ((unint64_t)v50 << 32);
              v54 = v52 + 1;
            }
            *((_QWORD *)this + 137) = v54;
            ++v40;
          }
          if (SBYTE7(v162) < 0)
            operator delete(v161[0].__locale_);
          if ((__str[23] & 0x80000000) == 0)
            goto LABEL_106;
          goto LABEL_105;
        }
        MEMORY[0x1AF44C914](v161, "<eps>");
        goto LABEL_84;
      }
      if (*(_BYTE *)(*(_QWORD *)__str + v47) == 47)
      {
        v45 = *(_QWORD *)&__str[8];
        goto LABEL_79;
      }
    }
LABEL_105:
    operator delete(*(void **)__str);
    goto LABEL_106;
  }
LABEL_107:
  if (quasar::gLogLevel > 3)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Found ", 6);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" phone words (including word disambig symbols) in base word table", 65);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
  }
  v65 = *v157;
  v66 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v157 + 120))(*v157);
  v67 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 128))(v65, 0);
  if (v66)
  {
    v68 = (std::pair<std::string, std::string> *)v67;
    v69 = 0;
    do
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, std::pair<std::string, std::string> *))(*(_QWORD *)v65 + 88))(__str, v65, v68);
      v198.__begin_ = v68;
      v161[0].__locale_ = (std::locale::__imp *)&v198;
      v70 = std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)this + 1048, (unint64_t *)&v198, (uint64_t)&std::piecewise_construct, (uint64_t **)v161);
      v71 = (void **)(v70 + 3);
      if (*((char *)v70 + 47) < 0)
        operator delete(*v71);
      *(_OWORD *)v71 = *(_OWORD *)__str;
      v71[2] = *(void **)&__str[16];
      if (++v69 < v66)
        v68 = (std::pair<std::string, std::string> *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(v65, v69);
    }
    while (v66 != v69);
  }
  if (*((char *)this + 727) < 0)
  {
    if (!*((_QWORD *)this + 89))
      goto LABEL_127;
  }
  else if (!*((_BYTE *)this + 727))
  {
    goto LABEL_127;
  }
  if (quasar::gLogLevel >= 5)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"inv-g-fst-file is now ignored because it does not work with class LMs. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Please use raw-smallg-fst-file.", 31);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
  }
  *(_OWORD *)__str = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1016, (__int128 *)__str);
  v73 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v74 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_127:
  if (*((char *)this + 751) < 0)
  {
    if (!*((_QWORD *)this + 92))
      goto LABEL_141;
  }
  else if (!*((_BYTE *)this + 751))
  {
    goto LABEL_141;
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(v161, *((_QWORD *)this + 46), (char *)this + 728);
  quasar::ErrorBlamingDecoder::convertFst((uint64_t)v161[0].__locale_, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1016, (__int128 *)__str);
  v76 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v77 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v161[1].__locale_;
  if (v161[1].__locale_)
  {
    v80 = (unint64_t *)((char *)v161[1].__locale_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v79 + 16))(v79);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v79);
    }
  }
LABEL_141:
  v161[0].__locale_ = 0;
  v161[1].__locale_ = 0;
  *(_QWORD *)&v162 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 560), ",", 1, (uint64_t)v161);
  v82 = v161[0].__locale_;
  v83 = v161[1].__locale_;
  if (v161[0].__locale_ != v161[1].__locale_)
  {
    v84 = (int64x2_t *)((char *)this + 920);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v198, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v201[0] = &off_1E5D3DD50;
      v201[1] = this;
      v202 = v201;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder((uint64_t)v82, (uint64_t)&v198, MultiChainMultiAudioBuffer, (uint64_t)v201, &v196);
      v86 = (_OWORD *)*((_QWORD *)this + 116);
      v87 = *((_QWORD *)this + 117);
      if ((unint64_t)v86 >= v87)
      {
        v88 = ((uint64_t)v86 - v84->i64[0]) >> 4;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v90 = v87 - v84->i64[0];
        if (v90 >> 3 > v89)
          v89 = v90 >> 3;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        *(_QWORD *)&v179 = (char *)this + 936;
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 936, v91);
        v94 = &v92[16 * v88];
        *(_OWORD *)v94 = v196;
        v196 = 0uLL;
        v95 = (_QWORD *)*((_QWORD *)this + 116);
        v96 = (_QWORD *)*((_QWORD *)this + 115);
        if (v95 == v96)
        {
          v99 = vdupq_n_s64((unint64_t)v95);
          v97 = &v92[16 * v88];
        }
        else
        {
          v97 = &v92[16 * v88];
          do
          {
            v98 = *((_OWORD *)v95 - 1);
            v95 -= 2;
            *((_OWORD *)v97 - 1) = v98;
            v97 -= 16;
            *v95 = 0;
            v95[1] = 0;
          }
          while (v95 != v96);
          v99 = *v84;
        }
        v100 = v94 + 16;
        *((_QWORD *)this + 115) = v97;
        *((_QWORD *)this + 116) = v94 + 16;
        *(int64x2_t *)&__str[8] = v99;
        v101 = *((_QWORD *)this + 117);
        *((_QWORD *)this + 117) = &v92[16 * v93];
        *(_QWORD *)&__str[24] = v101;
        *(_QWORD *)__str = v99.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__str);
        v102 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
        *((_QWORD *)this + 116) = v100;
        if (v102)
        {
          p_shared_owners = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldaxr(p_shared_owners);
          while (__stlxr(v104 - 1, p_shared_owners));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
      }
      else
      {
        *v86 = v196;
        v196 = 0uLL;
        *((_QWORD *)this + 116) = v86 + 1;
      }
      v105 = v202;
      if (v202 == v201)
        break;
      if (v202)
      {
        v106 = 5;
LABEL_165:
        (*(void (**)(void))(*v105 + 8 * v106))();
      }
      if (SHIBYTE(v198.__end_cap_.__value_) < 0)
        operator delete(v198.__begin_);
      v82 = (std::locale::__imp *)((char *)v82 + 24);
      if (v82 == v83)
        goto LABEL_169;
    }
    v105 = v201;
    v106 = 4;
    goto LABEL_165;
  }
LABEL_169:
  memset(&v198, 0, sizeof(v198));
  v196 = 0uLL;
  v197 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 608, ",", 1, &v198) & 1) == 0)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  v194 = 0uLL;
  v195 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 584), ",", 1, (uint64_t)&v194);
  if (*((char *)this + 679) < 0)
    v107 = *((_QWORD *)this + 83);
  else
    v107 = *((unsigned __int8 *)this + 679);
  if (v107)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 656, ",", 1, (_QWORD *)this + 121) & 1) == 0)
    {
      v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v179 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
    }
    v108 = *((_QWORD *)&v194 + 1);
    v109 = v194;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 3) != (uint64_t)(*((_QWORD *)this + 122)
                                                                                           - *((_QWORD *)this + 121)) >> 2)
    {
      v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v179 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
    }
  }
  else
  {
    *(_DWORD *)__str = 0;
    std::vector<float>::assign((char **)this + 121, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 3), __str);
    v108 = *((_QWORD *)&v194 + 1);
    v109 = v194;
  }
  if (v108 != v109)
  {
    v110 = 0;
    v111 = (int64x2_t *)((char *)this + 944);
    while (1)
    {
      v112 = *(unsigned int *)(*((_QWORD *)this + 121) + 4 * v110);
      std::string::basic_string[abi:ne180100]<0>(v158, "");
      v113 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this
                                                                                 + 51));
      v199[0] = &off_1E5D3DDA8;
      v199[1] = this;
      v199[2] = v112;
      v200 = v199;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(v109 + 24 * v110, (uint64_t)v158, v113, (uint64_t)v199, &v160);
      v114 = (_OWORD *)*((_QWORD *)this + 119);
      v115 = *((_QWORD *)this + 120);
      if ((unint64_t)v114 >= v115)
      {
        v116 = ((uint64_t)v114 - v111->i64[0]) >> 4;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v118 = v115 - v111->i64[0];
        if (v118 >> 3 > v117)
          v117 = v118 >> 3;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
          v119 = 0xFFFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        *(_QWORD *)&v179 = (char *)this + 960;
        v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 960, v119);
        v122 = &v120[16 * v116];
        *(_OWORD *)v122 = v160;
        v160 = 0uLL;
        v123 = (_QWORD *)*((_QWORD *)this + 119);
        v124 = (_QWORD *)*((_QWORD *)this + 118);
        if (v123 == v124)
        {
          v127 = vdupq_n_s64((unint64_t)v123);
          v125 = &v120[16 * v116];
        }
        else
        {
          v125 = &v120[16 * v116];
          do
          {
            v126 = *((_OWORD *)v123 - 1);
            v123 -= 2;
            *((_OWORD *)v125 - 1) = v126;
            v125 -= 16;
            *v123 = 0;
            v123[1] = 0;
          }
          while (v123 != v124);
          v127 = *v111;
        }
        v128 = v122 + 16;
        *((_QWORD *)this + 118) = v125;
        *((_QWORD *)this + 119) = v122 + 16;
        *(int64x2_t *)&__str[8] = v127;
        v129 = *((_QWORD *)this + 120);
        *((_QWORD *)this + 120) = &v120[16 * v121];
        *(_QWORD *)&__str[24] = v129;
        *(_QWORD *)__str = v127.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__str);
        v130 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
        *((_QWORD *)this + 119) = v128;
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
      }
      else
      {
        *v114 = v160;
        v160 = 0uLL;
        *((_QWORD *)this + 119) = v114 + 1;
      }
      v133 = v200;
      if (v200 == v199)
        break;
      if (v200)
      {
        v134 = 5;
LABEL_202:
        (*(void (**)(void))(*v133 + 8 * v134))();
      }
      if (v159 < 0)
        operator delete(v158[0]);
      ++v110;
      v109 = v194;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 3) <= v110)
        goto LABEL_206;
    }
    v133 = v199;
    v134 = 4;
    goto LABEL_202;
  }
LABEL_206:
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 632, ",", 1, &v196) & 1) == 0)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  v135 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 125) = v135;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 992, v135, (char *)v198.__begin_, (char *)v198.__end_, ((char *)v198.__end_ - (char *)v198.__begin_) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 992, *((_QWORD *)this + 125), (char *)v196, *((char **)&v196 + 1), (uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 2);
  v136 = (float *)*((_QWORD *)this + 124);
  v137 = (float *)*((_QWORD *)this + 125);
  if (v136 == v137)
  {
    v138 = *((_QWORD *)this + 126);
    if ((unint64_t)v136 >= v138)
    {
      v139 = v138 - (_QWORD)v136;
      v140 = v139 >> 1;
      if ((unint64_t)(v139 >> 1) <= 1)
        v140 = 1;
      if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
        v141 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v141 = v140;
      v142 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 1008, v141);
      v143 = (char *)*((_QWORD *)this + 125);
      v144 = (char *)*((_QWORD *)this + 124);
      v146 = &v142[v145];
      *v142 = 1065353216;
      v137 = (float *)(v142 + 1);
      while (v143 != v144)
      {
        v147 = *((_DWORD *)v143 - 1);
        v143 -= 4;
        *--v142 = v147;
      }
      *((_QWORD *)this + 124) = v142;
      *((_QWORD *)this + 125) = v137;
      *((_QWORD *)this + 126) = v146;
      if (v144)
        operator delete(v144);
    }
    else
    {
      *v136 = 1.0;
      v137 = v136 + 1;
    }
    *((_QWORD *)this + 125) = v137;
    v136 = (float *)*((_QWORD *)this + 124);
  }
  v148 = (char *)v137 - (char *)v136;
  if ((char *)v137 - (char *)v136 == 4 && *v136 != 1.0)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  v149 = *((_QWORD *)this + 116) - *((_QWORD *)this + 115);
  v150 = v149 >> 4;
  if ((unint64_t)v149 >= 0x11 && v150 != ((char *)v198.__end_ - (char *)v198.__begin_) >> 2)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  v151 = *((_QWORD *)this + 119) - *((_QWORD *)this + 118);
  v152 = v151 >> 4;
  if ((unint64_t)v151 >= 0x11 && v152 != (uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 2)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  if (v152 + v150 != v148 >> 2)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The number of big FST LMs + NN LMs doesn't match the number of weights (FST LMs + NN LMs)", 89);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  *(_QWORD *)__str = &v194;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  if ((_QWORD)v196)
  {
    *((_QWORD *)&v196 + 1) = v196;
    operator delete((void *)v196);
  }
  if (v198.__begin_)
  {
    v198.__end_ = v198.__begin_;
    operator delete(v198.__begin_);
  }
  *(_QWORD *)__str = v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_1AE049E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)&a54);
  if (*(char *)(v59 - 201) < 0)
    operator delete(*(void **)(v59 - 224));
  a54 = (void *)(v59 - 192);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  kaldi::Input::~Input((kaldi::Input *)&a12);
  _Unwind_Resume(a1);
}

void sub_1AE049F04()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  JUMPOUT(0x1AE049F20);
}

void sub_1AE049F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a22 < 0)
    operator delete(__p);
  if (a59 < 0)
    operator delete(a54);
  _Unwind_Resume(a1);
}

void sub_1AE049F34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  v19 = *(_QWORD **)(v18 - 144);
  if (v19 == (_QWORD *)(v18 - 168))
  {
    v20 = 4;
    v19 = (_QWORD *)(v18 - 168);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  if (a17 < 0)
    operator delete(__p);
  __p = (void *)(v18 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v21 = *(void **)(v18 - 224);
  if (v21)
  {
    *(_QWORD *)(v18 - 216) = v21;
    operator delete(v21);
  }
  v22 = *(_QWORD *)(v18 - 192);
  if (v22)
  {
    *(_QWORD *)(v18 - 184) = v22;
    JUMPOUT(0x1AE04A030);
  }
  JUMPOUT(0x1AE04A034);
}

void sub_1AE049F48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 224);
  v1 = *(_QWORD **)(v0 - 112);
  if (v1 == (_QWORD *)(v0 - 136))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 136);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  if (*(char *)(v0 - 169) < 0)
    JUMPOUT(0x1AE04A030);
  JUMPOUT(0x1AE04A034);
}

void sub_1AE049F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;
  void *v20;

  a12 = (void **)(v17 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  v19 = *(void **)(v17 - 224);
  if (v19)
  {
    *(_QWORD *)(v17 - 216) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v17 - 192);
  if (v20)
  {
    *(_QWORD *)(v17 - 184) = v20;
    operator delete(v20);
  }
  *(_QWORD *)(v17 - 192) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 192));
  _Unwind_Resume(a1);
}

void sub_1AE049F64()
{
  JUMPOUT(0x1AE049FA0);
}

void sub_1AE049FE8()
{
  JUMPOUT(0x1AE04A024);
}

void sub_1AE04A064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  std::pair<std::string,std::string>::~pair((uint64_t)&a54);
  if (*(char *)(v54 - 225) < 0)
    operator delete(*(void **)(v54 - 248));
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1AE04A0B4);
}

void sub_1AE04A0A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  JUMPOUT(0x1AE04A0B4);
}

_QWORD *quasar::ErrorBlamingDecoder::convertFst@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  _OWORD v33[2];
  int v34;
  _DWORD *v35;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v33, a1);
    result = operator new(0x28uLL);
    result[2] = 0;
    *result = &unk_1E5D413A8;
    result[1] = 0;
    v5 = (_DWORD *)*((_QWORD *)&v33[0] + 1);
    result[4] = *((_QWORD *)&v33[0] + 1);
    v6 = v5[14];
    result[3] = &unk_1E5D28970;
    *a2 = result + 3;
    a2[1] = result;
    *(_QWORD *)&v33[0] = &unk_1E5D256C0;
    if (!v6)
      return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    return result;
  }
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a2);
  v7 = *a2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 280))(v7, v8);
  v9 = *a2;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 288))(v9, v10);
  LODWORD(v27) = 0;
  (*(void (**)(uint64_t, unint64_t **))(*(_QWORD *)a1 + 128))(a1, &v25);
  while (!v25)
  {
    if ((int)v27 >= (int)v26)
      goto LABEL_20;
LABEL_9:
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 200))(*a2);
    if (v25)
      v12 = (*(uint64_t (**)(unint64_t *))(*v25 + 24))(v25);
    else
      v12 = v27;
    v30 = v12 | (unint64_t)(v11 << 32);
    std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)v33, (int *)&v30, &v30);
    v13 = *a2;
    if (v25)
      v14 = (*(uint64_t (**)(unint64_t *))(*v25 + 24))(v25);
    else
      v14 = v27;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 184))(v13, v11);
    if (v25)
      (*(void (**)(unint64_t *))(*v25 + 32))(v25);
    else
      LODWORD(v27) = v27 + 1;
  }
  if (!(*(unsigned int (**)(unint64_t *))(*v25 + 16))(v25))
    goto LABEL_9;
  if (v25)
    (*(void (**)(unint64_t *))(*v25 + 8))(v25);
LABEL_20:
  v15 = *a2;
  LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v25 = &v30;
  v16 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v33, (int *)&v30, (uint64_t)&std::piecewise_construct, (_DWORD **)&v25);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 176))(v15, *((unsigned int *)v16 + 5));
  v32 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 128))(a1, &v30);
  while (2)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        return (_QWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v33);
      goto LABEL_26;
    }
    if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v30 + 16))(v30))
    {
      if (v30)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 24))();
        goto LABEL_27;
      }
LABEL_26:
      v17 = v32;
LABEL_27:
      LODWORD(v24) = v17;
      v25 = (unint64_t *)&v24;
      v18 = *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v33, (int *)&v24, (uint64_t)&std::piecewise_construct, (_DWORD **)&v25)+ 5);
      v19 = *a2;
      if (v30)
        v20 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 24))(v30);
      else
        v20 = v32;
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 256))(v19, v18, v21);
      if (v30)
        v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 24))(v30);
      else
        v22 = v32;
      v29 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t **))(*(_QWORD *)a1 + 136))(a1, v22, &v25);
LABEL_34:
      if (v25)
      {
        if ((*(unsigned int (**)(unint64_t *))(*v25 + 24))(v25))
        {
          if (v25)
          {
            (*(void (**)(void))(*v25 + 8))();
            goto LABEL_47;
          }
LABEL_45:
          if (v28)
            --*v28;
LABEL_47:
          if (v30)
            (*(void (**)(unint64_t))(*(_QWORD *)v30 + 32))(v30);
          else
            ++v32;
          continue;
        }
        if (v25)
        {
          v23 = (__int128 *)(*(uint64_t (**)(void))(*v25 + 32))();
          goto LABEL_40;
        }
      }
      else if (v29 >= v27)
      {
        goto LABEL_45;
      }
      v23 = (__int128 *)(v26 + 16 * v29);
LABEL_40:
      v24 = *v23;
      v35 = (_DWORD *)&v24 + 3;
      HIDWORD(v24) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v33, (int *)&v24 + 3, (uint64_t)&std::piecewise_construct, &v35)+ 5);
      (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a2 + 208))(*a2, v18, &v24);
      if (v25)
        (*(void (**)(unint64_t *))(*v25 + 40))(v25);
      else
        ++v29;
      goto LABEL_34;
    }
    break;
  }
  if (v30)
    (*(void (**)(void))(*(_QWORD *)v30 + 8))();
  return (_QWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v33);
}

void sub_1AE04A5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ErrorBlamingDecoder::wordAlignLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v8 = *(_DWORD *)(a1 + 1112);
  if (v8 < 1)
    v9 = 0;
  else
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3) * v8 + 1000;
  if (kaldi::WordAlignLattice(a3, a2, *(_QWORD *)(a1 + 1032), v9, a4))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) != -1)
    {
      kaldi::TopSortCompactLatticeIfNeeded(a4);
      return 1;
    }
    if (quasar::gLogLevel >= 2)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Word alignment lattice empty.", 29);
      goto LABEL_11;
    }
  }
  else if (quasar::gLogLevel >= 2)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Word alignment failed.", 22);
LABEL_11:
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v11);
  }
  return 0;
}

void sub_1AE04A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::ErrorBlamingDecoder::reconstructLattice(uint64_t a1, kaldi::TransitionModel *a2, uint64_t *a3, _QWORD *a4, kaldi::LatticeScoreCache *a5, int a6, _QWORD *a7, uint64_t a8, float a9, float a10)
{
  int v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v31[17];
  uint64_t v32[2];

  v20 = *(_DWORD *)(a1 + 1116);
  if (v20 < 1)
    v21 = 0;
  else
    v21 = (*(uint64_t (**)(_QWORD *))(*a4 + 160))(a4) * v20 + 1000;
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  v32[0] = v22;
  v32[1] = (uint64_t)v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = kaldi::ReconstructLattice(a4, a5, v32, a2, a6, a7, v21, a8, a9, a10);
  v27 = v26;
  if (!v23)
    goto LABEL_11;
  v28 = (unint64_t *)&v23->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v27 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if ((v26 & 1) != 0)
    {
LABEL_12:
      kaldi::AddTransitionProbs(a2, a8, *(float *)(a1 + 1140), *(float *)(a1 + 1144));
      return v27;
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Lattice reconstruction failed.", 30);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v31);
  }
  return v27;
}

void sub_1AE04A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::ErrorBlamingDecoder::getWordIds(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _BOOL8 v40;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  std::string::basic_string[abi:ne180100]<0>(__p, " \t\n\r");
  quasar::split(a2, (uint64_t *)__p, 0, (uint64_t)&v59);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  v8 = v59;
  v9 = v60;
  if (v59 != v60)
  {
    while (*(char *)(v8 + 23) < 0)
    {
      if (*(_QWORD *)(v8 + 8))
        goto LABEL_8;
LABEL_43:
      v8 += 24;
      if (v8 == v9)
        goto LABEL_59;
    }
    if (!*(_BYTE *)(v8 + 23))
      goto LABEL_43;
LABEL_8:
    v10 = quasar::SymbolTableList::strToSymbolId(*a1, v8);
    v11 = v10;
    if (v10 == -1)
    {
      if (quasar::gLogLevel >= 2)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word ", 5);
        v13 = *(char *)(v8 + 23);
        if (v13 >= 0)
          v14 = v8;
        else
          v14 = *(_QWORD *)v8;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v8 + 23);
        else
          v15 = *(_QWORD *)(v8 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" not found in symbol table(s).", 30);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
      v17 = a3[1];
      if (v17 < a3[2])
      {
LABEL_32:
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (__int128 *)v8);
        v26 = v17 + 24;
LABEL_42:
        a3[1] = v26;
        goto LABEL_43;
      }
    }
    else
    {
      if (v10)
      {
        v19 = *(_DWORD **)(a4 + 8);
        v18 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v19 >= v18)
        {
          v27 = *(_DWORD **)a4;
          v28 = ((uint64_t)v19 - *(_QWORD *)a4) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v18 - (_QWORD)v27;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v31);
            v27 = *(_DWORD **)a4;
            v19 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v28];
          *(_DWORD *)v33 = v11;
          v20 = v33 + 4;
          while (v19 != v27)
          {
            v34 = *--v19;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          *(_QWORD *)a4 = v33;
          *(_QWORD *)(a4 + 8) = v20;
          *(_QWORD *)(a4 + 16) = &v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = v10;
          v20 = v19 + 1;
        }
        *(_QWORD *)(a4 + 8) = v20;
        if (quasar::gLogLevel >= 5)
        {
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Ref transcription word: ", 24);
          v36 = *(char *)(v8 + 23);
          if (v36 >= 0)
            v37 = v8;
          else
            v37 = *(_QWORD *)v8;
          if (v36 >= 0)
            v38 = *(unsigned __int8 *)(v8 + 23);
          else
            v38 = *(_QWORD *)(v8 + 8);
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", ID: ", 6);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        goto LABEL_43;
      }
      if (quasar::gLogLevel >= 2)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word ", 5);
        v22 = *(char *)(v8 + 23);
        if (v22 >= 0)
          v23 = v8;
        else
          v23 = *(_QWORD *)v8;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v8 + 23);
        else
          v24 = *(_QWORD *)(v8 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" has word ID 0.", 15);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
      v17 = a3[1];
      if (v17 < a3[2])
        goto LABEL_32;
    }
    v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)v8);
    goto LABEL_42;
  }
LABEL_59:
  v40 = *a3 == a3[1];
  __p[0] = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v40;
}

void sub_1AE04AD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ErrorBlamingDecoder::addUnpronuncedWordsToReferenceLattice(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  __n128 v19;
  _BOOL4 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  void *v38;
  void *__p;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  _OWORD v43[2];
  __int128 v44;
  float v45;
  int v46;
  float v47;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 200))(a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 176))(a4, v7);
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  v37 = v8 | (unint64_t)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) << 32);
  LODWORD(v38) = 0;
  std::deque<std::tuple<int,int,int>>::push_back(v43, (uint64_t *)&v37);
  v9 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    while (1)
    {
      v10 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0x155))
                  + 12 * ((unint64_t)v44 % 0x155));
      v11 = v10[1];
      v12 = *v10;
      v13 = v10[2];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v9 - 1;
      if ((unint64_t)v44 >= 0x2AA)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 341;
      }
      v14 = v13;
      v15 = *a3;
      if (v13 < (unint64_t)((a3[1] - *a3) >> 2))
      {
        while (1)
        {
          v16 = *(uint64_t **)(*(_QWORD *)(a1 + 1032) + 40);
          if (!v16)
            goto LABEL_15;
          v17 = *(_DWORD *)(v15 + 4 * v14);
          while (1)
          {
            v18 = *((_DWORD *)v16 + 7);
            if (v17 >= v18)
              break;
LABEL_10:
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_15;
          }
          if (v18 < v17)
            break;
          __p = 0;
          v40 = 0;
          v41 = 0;
          LODWORD(v37) = *(_DWORD *)(v15 + 4 * v14);
          HIDWORD(v37) = *(_DWORD *)(v15 + 4 * v14);
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 200))(a4);
          (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a4 + 208))(a4, v11, &v37);
          v11 = v42;
          if (__p)
          {
            v40 = __p;
            operator delete(__p);
          }
          ++v14;
          v15 = *a3;
          if (v14 >= (a3[1] - *a3) >> 2)
          {
LABEL_15:
            v13 = v14;
            goto LABEL_16;
          }
        }
        ++v16;
        goto LABEL_10;
      }
LABEL_16:
      (*(void (**)(unint64_t *__return_ptr, _QWORD *, uint64_t))(*a2 + 32))(&v37, a2, v12);
      v47 = *((float *)&v37 + 1);
      LODWORD(v32) = v37;
      v46 = 2139095040;
      v45 = INFINITY;
      v19.n128_u32[0] = v37;
      if (*(float *)&v37 != INFINITY)
        break;
      v19.n128_f32[0] = v47;
      v21 = v38;
      if (v47 == v45)
      {
        v20 = __p != v38;
        if (v38)
          goto LABEL_18;
      }
      else
      {
        v20 = 1;
        if (v38)
          goto LABEL_18;
      }
LABEL_19:
      if (v20)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, __n128))(*a2 + 32))(&v34, a2, v12, v19);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 184))(a4, v11, &v34);
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
      }
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * v12) + 48);
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * v12) + 56) - v22;
      if (v23)
      {
        v24 = v23 / 48;
        v25 = v13 + 1;
        if (v24 <= 1)
          v26 = 1;
        else
          v26 = v24;
        v27 = v22 + 24;
        do
        {
          v37 = *(_QWORD *)(v27 - 24);
          v38 = *(void **)(v27 - 16);
          v40 = 0;
          v41 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v27 - 8), *(_QWORD *)v27, (uint64_t)(*(_QWORD *)v27 - *(_QWORD *)(v27 - 8)) >> 2);
          v42 = *(_DWORD *)(v27 + 16);
          v28 = v42;
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 200))(a4);
          v42 = v29;
          (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a4 + 208))(a4, v11, &v37);
          v32 = v28 | (v29 << 32);
          v33 = v25;
          std::deque<std::tuple<int,int,int>>::push_back(v43, &v32);
          if (__p)
          {
            v40 = __p;
            operator delete(__p);
          }
          v27 += 48;
          --v26;
        }
        while (v26);
      }
      v9 = *((_QWORD *)&v44 + 1);
      if (!*((_QWORD *)&v44 + 1))
        return std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v43);
    }
    v20 = 1;
    v21 = v38;
    if (!v38)
      goto LABEL_19;
LABEL_18:
    __p = v21;
    operator delete(v21);
    goto LABEL_19;
  }
  return std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v43);
}

void sub_1AE04B1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void std::deque<std::tuple<int,int,int>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::tuple<int,int,int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void quasar::ErrorBlamingDecoder::printExtendedReportToJson(quasar::ErrorBlamingDecoder *this, unsigned int a2, const kaldi::quasar::ErrorRegion *a3, const kaldi::quasar::ErrorProfile *a4, quasar::PTree *a5)
{
  quasar *v8;
  kaldi::TransitionModel *v9;
  uint64_t v10;
  signed int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  quasar *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  const void *v19;
  int64_t v20;
  signed int v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  int v25;
  quasar *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  quasar *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  float ScoreSum;
  quasar *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  quasar *v40;
  std::string::size_type v41;
  unint64_t v42;
  float v43;
  int v44;
  int v45;
  quasar *v46;
  std::string::size_type v47;
  unint64_t v48;
  float v49;
  int v50;
  int v51;
  quasar *v52;
  int *v53;
  int *v54;
  int *v55;
  int *v56;
  const kaldi::quasar::ErrorRegion *v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  char v61;
  void *size;
  unint64_t v63;
  int v64;
  quasar *v65;
  int v66;
  int v67;
  quasar *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float Score;
  quasar *v77;
  int v78;
  int v79;
  float v80;
  quasar *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v87;
  const kaldi::quasar::ErrorProfile *v88;
  int v89;
  signed int v90;
  uint64_t *v91;
  const kaldi::quasar::ErrorRegion *v92;
  kaldi::LatticeScoreCache *HypoScoreCache;
  kaldi::LatticeScoreCache *RefScoreCache;
  _QWORD *WordConfusionFromErrorRegion;
  char v96;
  uint64_t *v97;
  std::string v98;
  std::string v99[2];
  std::string __p;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  std::string v105;
  void *v106;
  std::string v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  void *v112[2];
  char v113;
  _BYTE v114[72];

  quasar::PTree::PTree((quasar::PTree *)v114);
  v8 = (quasar *)*((unsigned int *)a3 + 11);
  v9 = (kaldi::TransitionModel *)*((_QWORD *)a4 + 33);
  RefScoreCache = (kaldi::LatticeScoreCache *)kaldi::quasar::ErrorProfile::GetRefScoreCache(a4, a2);
  HypoScoreCache = (kaldi::LatticeScoreCache *)kaldi::quasar::ErrorProfile::GetHypoScoreCache(a4, a2);
  v91 = (uint64_t *)((char *)a3 + 248);
  v92 = a3;
  v97 = (uint64_t *)((char *)a3 + 272);
  if (*((_QWORD *)a3 + 11) != *((_QWORD *)a3 + 10))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (RefScoreCache)
      v13 = HypoScoreCache == 0;
    else
      v13 = 1;
    v14 = !v13;
    v87 = v14;
    v88 = a4;
    do
    {
      if (kaldi::quasar::ErrorRegion::HasWordConfusion(a3, v11))
      {
        WordConfusionFromErrorRegion = kaldi::quasar::ErrorRegion::GetWordConfusionFromErrorRegion(a3, v11);
        quasar::PTree::PTree((quasar::PTree *)v112);
        std::string::basic_string[abi:ne180100]<0>(&__p, "HypoStartFrame");
        LODWORD(v106) = quasar::getType(v8);
        std::to_string(&v107, (int)v8);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v8;
        v16 = WordConfusionFromErrorRegion[6] - WordConfusionFromErrorRegion[5];
        if (v16)
        {
          v17 = v16 >> 2;
          if (v17 <= 1)
            v17 = 1;
          v18 = (_QWORD *)(*v97 + 24 * v11 + 8);
          LODWORD(v15) = (_DWORD)v8;
          do
          {
            v15 = (quasar *)(v15 + ((*v18 - *(v18 - 1)) >> 2));
            v18 += 3;
            --v17;
          }
          while (v17);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "HypoEndFrame");
        LODWORD(v106) = quasar::getType(v15);
        std::to_string(&v107, (int)v15);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        v89 = (int)v8;
        v90 = v11;
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v19 = (const void *)WordConfusionFromErrorRegion[2];
        v20 = WordConfusionFromErrorRegion[3] - (_QWORD)v19;
        v21 = v12 - 1;
        v22 = ((uint64_t)(int)v12 << 32) - 0x100000000;
        v23 = (char *)(*((_QWORD *)a3 + 7) + 4 * (int)v12);
        do
        {
          v24 = v12;
          v25 = memcmp(v19, v23, v20);
          ++v21;
          v22 += 0x100000000;
          v23 += 4;
          ++v12;
        }
        while (v25);
        v26 = (quasar *)*((unsigned int *)v92 + 10);
        if (v21 < 1)
        {
          a4 = v88;
        }
        else
        {
          v27 = (_QWORD *)(*v91 + 8);
          v28 = v24;
          a4 = v88;
          do
          {
            v26 = (quasar *)(v26 + ((*v27 - *(v27 - 1)) >> 2));
            v27 += 3;
            --v28;
          }
          while (v28);
        }
        v29 = (v22 >> 32) + (v20 >> 2);
        v30 = v26;
        if (v29 > v22 >> 32)
        {
          v31 = v21;
          v32 = (_QWORD *)(*v91 + 24 * (int)v24 + 8);
          LODWORD(v30) = (_DWORD)v26;
          do
          {
            v30 = (quasar *)(v30 + ((*v32 - *(v32 - 1)) >> 2));
            ++v31;
            v32 += 3;
          }
          while (v29 > v31);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "RefStartFrame");
        a3 = v92;
        LODWORD(v106) = quasar::getType(v26);
        std::to_string(&v107, (int)v26);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RefEndFrame");
        LODWORD(v106) = quasar::getType(v30);
        std::to_string(&v107, (int)v30);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RefLmCost");
        v34 = WordConfusionFromErrorRegion[2];
        v33 = WordConfusionFromErrorRegion[3];
        memset(v99, 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v99, *((const void **)v92 + 25), *((_QWORD *)v92 + 26), (uint64_t)(*((_QWORD *)v92 + 26) - *((_QWORD *)v92 + 25)) >> 2);
        ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v92, v21, ((unint64_t)(v33 - v34) >> 2) + v21, v99);
        LODWORD(v106) = quasar::getType(v36, ScoreSum);
        std::to_string(&v107, ScoreSum);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (v99[0].__r_.__value_.__r.__words[0])
        {
          v99[0].__r_.__value_.__l.__size_ = v99[0].__r_.__value_.__r.__words[0];
          operator delete(v99[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "HypoLmCost");
        v38 = WordConfusionFromErrorRegion[5];
        v37 = WordConfusionFromErrorRegion[6];
        memset(v99, 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v99, *((const void **)v92 + 28), *((_QWORD *)v92 + 29), (uint64_t)(*((_QWORD *)v92 + 29) - *((_QWORD *)v92 + 28)) >> 2);
        v39 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v92, v90, v90 + ((unint64_t)(v37 - v38) >> 2), v99);
        LODWORD(v106) = quasar::getType(v40, v39);
        std::to_string(&v107, v39);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 1;
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        if (v99[0].__r_.__value_.__r.__words[0])
        {
          v99[0].__r_.__value_.__l.__size_ = v99[0].__r_.__value_.__r.__words[0];
          operator delete(v99[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v87)
        {
          kaldi::quasar::ErrorRegion::GetTransitionIds((uint64_t)v92, v89, (int)v15, *((_DWORD *)v92 + 10), v91, &__p.__r_.__value_.__l.__data_);
          v41 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
          {
            v43 = 0.0;
          }
          else
          {
            v42 = 0;
            v43 = 0.0;
            do
            {
              v44 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(v41 + 4 * v42));
              v45 = kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v44);
              v43 = v43 + kaldi::LatticeScoreCache::GetScore(RefScoreCache, v89 + v42++, v45);
              v41 = __p.__r_.__value_.__r.__words[0];
            }
            while (v42 < (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
          }
          v46 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v99, "RefAmCost");
          LODWORD(v106) = quasar::getType(v46, v43);
          std::to_string(&v107, v43);
          v108 = 0;
          v109 = 0;
          v110 = 0;
          v111 = 1;
          quasar::PTree::putChild((uint64_t)v112, (uint64_t)v99, (uint64_t)&v106, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v106);
          if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99[0].__r_.__value_.__l.__data_);
          kaldi::quasar::ErrorRegion::GetTransitionIds((uint64_t)v92, v89, (int)v15, *((_DWORD *)v92 + 11), v97, &v99[0].__r_.__value_.__l.__data_);
          v47 = v99[0].__r_.__value_.__r.__words[0];
          if (v99[0].__r_.__value_.__l.__size_ == v99[0].__r_.__value_.__r.__words[0])
          {
            v49 = 0.0;
          }
          else
          {
            v48 = 0;
            v49 = 0.0;
            do
            {
              v50 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(v47 + 4 * v48));
              v51 = kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v50);
              v49 = v49 + kaldi::LatticeScoreCache::GetScore(HypoScoreCache, v89 + v48++, v51);
              v47 = v99[0].__r_.__value_.__r.__words[0];
            }
            while (v48 < (uint64_t)(v99[0].__r_.__value_.__l.__size_ - v99[0].__r_.__value_.__r.__words[0]) >> 2);
          }
          v52 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&v105, "HypoAmCost");
          LODWORD(v106) = quasar::getType(v52, v49);
          std::to_string(&v107, v49);
          v108 = 0;
          v109 = 0;
          v110 = 0;
          v111 = 1;
          quasar::PTree::putChild((uint64_t)v112, (uint64_t)&v105, (uint64_t)&v106, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v106);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (v99[0].__r_.__value_.__r.__words[0])
          {
            v99[0].__r_.__value_.__l.__size_ = v99[0].__r_.__value_.__r.__words[0];
            operator delete(v99[0].__r_.__value_.__l.__data_);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        quasar::PTree::PTree((quasar::PTree *)&v106);
        v53 = (int *)WordConfusionFromErrorRegion[2];
        v54 = (int *)WordConfusionFromErrorRegion[3];
        while (v53 != v54)
        {
          kaldi::quasar::ErrorProfile::ToWordString(a4, *v53, v99);
          quasar::PTree::PTree(&__p, v99);
          quasar::PTree::addChild((quasar::PTree *)&v106, (const quasar::PTree *)&__p);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99[0].__r_.__value_.__l.__data_);
          ++v53;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "RefWords");
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        quasar::PTree::PTree((quasar::PTree *)&__p);
        v55 = (int *)WordConfusionFromErrorRegion[5];
        v56 = (int *)WordConfusionFromErrorRegion[6];
        while (v55 != v56)
        {
          kaldi::quasar::ErrorProfile::ToWordString(a4, *v55, &v105);
          quasar::PTree::PTree(v99, &v105);
          quasar::PTree::addChild((quasar::PTree *)&__p, (const quasar::PTree *)v99);
          quasar::PTree::~PTree((quasar::PTree *)v99);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          ++v55;
        }
        std::string::basic_string[abi:ne180100]<0>(v99, "HypoWords");
        quasar::PTree::putChild((uint64_t)v112, (uint64_t)v99, (uint64_t)&__p, 1);
        if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99[0].__r_.__value_.__l.__data_);
        quasar::PTree::addChild((quasar::PTree *)v114, (const quasar::PTree *)v112);
        v12 = ((WordConfusionFromErrorRegion[3] - WordConfusionFromErrorRegion[2]) >> 2) + v21;
        v11 = v90 + ((WordConfusionFromErrorRegion[6] - WordConfusionFromErrorRegion[5]) >> 2) - 1;
        quasar::PTree::~PTree((quasar::PTree *)&__p);
        quasar::PTree::~PTree((quasar::PTree *)&v106);
        quasar::PTree::~PTree((quasar::PTree *)v112);
      }
      else
      {
        v15 = (quasar *)(v8
                       + ((*(_QWORD *)(*v97 + 24 * v10 + 8) - *(_QWORD *)(*v97 + 24 * v10)) >> 2));
      }
      v10 = ++v11;
      v8 = v15;
    }
    while (v11 < (unint64_t)((uint64_t)(*((_QWORD *)a3 + 11) - *((_QWORD *)a3 + 10)) >> 2));
  }
  std::string::basic_string[abi:ne180100]<0>(v112, "Confusions");
  quasar::PTree::putChild((uint64_t)a5, (uint64_t)v112, (uint64_t)v114, 1);
  if (v113 < 0)
    operator delete(v112[0]);
  quasar::PTree::PTree((quasar::PTree *)v112);
  if (*((_QWORD *)a3 + 11) != *((_QWORD *)a3 + 10))
  {
    v57 = a3;
    v58 = 0;
    v59 = *((_DWORD *)a3 + 11);
    if (RefScoreCache)
      v60 = HypoScoreCache == 0;
    else
      v60 = 1;
    v61 = !v60;
    v96 = v61;
    do
    {
      kaldi::quasar::ErrorRegion::GetTransitionIds((uint64_t)v57, v59, v59 + ((*(_QWORD *)(*((_QWORD *)v57 + 34) + 24 * v58 + 8) - *(_QWORD *)(*((_QWORD *)v57 + 34) + 24 * v58)) >> 2), *((_DWORD *)v57 + 10), v91, &v99[0].__r_.__value_.__l.__data_);
      size = (void *)v99[0].__r_.__value_.__l.__size_;
      if (v99[0].__r_.__value_.__l.__size_ != v99[0].__r_.__value_.__r.__words[0])
      {
        v63 = 0;
        do
        {
          quasar::PTree::PTree((quasar::PTree *)&v106);
          std::string::basic_string[abi:ne180100]<0>(&v105, "RefModel");
          v64 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(v99[0].__r_.__value_.__r.__words[0] + 4 * v63));
          v65 = (quasar *)kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v64);
          v66 = (int)v65;
          LODWORD(__p.__r_.__value_.__l.__data_) = quasar::getType(v65);
          std::to_string((std::string *)&__p.__r_.__value_.__r.__words[1], v66);
          v101 = 0;
          v102 = 0;
          v103 = 0;
          v104 = 1;
          quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v105, "HypoModel");
          v67 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(*(_QWORD *)(*v97 + 24 * v58) + 4 * v63));
          v68 = (quasar *)kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v67);
          v69 = (int)v68;
          LODWORD(__p.__r_.__value_.__l.__data_) = quasar::getType(v68);
          std::to_string((std::string *)&__p.__r_.__value_.__r.__words[1], v69);
          v101 = 0;
          v102 = 0;
          v103 = 0;
          v104 = 1;
          quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v105, "RefPhone");
          v70 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(v99[0].__r_.__value_.__r.__words[0] + 4 * v63));
          v71 = kaldi::TransitionModel::TransitionStateToPhone(v9, v70);
          kaldi::quasar::ErrorProfile::ToPhoneString(a4, v71, &v98);
          quasar::PTree::PTree(&__p, &v98);
          quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v105, "HypoPhone");
          v72 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(*(_QWORD *)(*v97 + 24 * v58) + 4 * v63));
          v73 = kaldi::TransitionModel::TransitionStateToPhone(v9, v72);
          kaldi::quasar::ErrorProfile::ToPhoneString(a4, v73, &v98);
          quasar::PTree::PTree(&__p, &v98);
          quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if ((v96 & 1) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v105, "RefAmCost");
            v74 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(v99[0].__r_.__value_.__r.__words[0] + 4 * v63));
            v75 = kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v74);
            Score = kaldi::LatticeScoreCache::GetScore(RefScoreCache, v59 + v63, v75);
            LODWORD(__p.__r_.__value_.__l.__data_) = quasar::getType(v77, Score);
            std::to_string((std::string *)&__p.__r_.__value_.__r.__words[1], Score);
            v101 = 0;
            v102 = 0;
            v103 = 0;
            v104 = 1;
            quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)&__p);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v105.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v105, "HypoAmCost");
            v78 = kaldi::TransitionModel::TransitionIdToTransitionState(v9, *(_DWORD *)(*(_QWORD *)(*v97 + 24 * v58) + 4 * v63));
            v79 = kaldi::TransitionModel::TransitionStateToForwardPdf(v9, v78);
            v80 = kaldi::LatticeScoreCache::GetScore(HypoScoreCache, v59 + v63, v79);
            LODWORD(__p.__r_.__value_.__l.__data_) = quasar::getType(v81, v80);
            std::to_string((std::string *)&__p.__r_.__value_.__r.__words[1], v80);
            v101 = 0;
            v102 = 0;
            v103 = 0;
            v104 = 1;
            quasar::PTree::putChild((uint64_t)&v106, (uint64_t)&v105, (uint64_t)&__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)&__p);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v105.__r_.__value_.__l.__data_);
            v82 = v59 + v63;
          }
          else
          {
            v82 = v59 + v63;
          }
          std::to_string(&__p, v82);
          quasar::PTree::putChild((uint64_t)v112, (uint64_t)&__p, (uint64_t)&v106, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          quasar::PTree::~PTree((quasar::PTree *)&v106);
          ++v63;
          size = (void *)v99[0].__r_.__value_.__r.__words[0];
        }
        while (v63 < (uint64_t)(v99[0].__r_.__value_.__l.__size_ - v99[0].__r_.__value_.__r.__words[0]) >> 2);
      }
      v83 = (uint64_t *)(*v97 + 24 * v58);
      v85 = *v83;
      v84 = v83[1];
      if (size)
      {
        v99[0].__r_.__value_.__l.__size_ = (std::string::size_type)size;
        operator delete(size);
      }
      v59 += (unint64_t)(v84 - v85) >> 2;
      ++v58;
      v57 = v92;
    }
    while (v58 < (uint64_t)(*((_QWORD *)v92 + 11) - *((_QWORD *)v92 + 10)) >> 2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v106, "Frames");
  quasar::PTree::putChild((uint64_t)a5, (uint64_t)&v106, (uint64_t)v112, 1);
  if (v107.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v106);
  quasar::PTree::~PTree((quasar::PTree *)v112);
  quasar::PTree::~PTree((quasar::PTree *)v114);
}

void sub_1AE04C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a61 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)(v61 - 232));
  quasar::PTree::~PTree((quasar::PTree *)(v61 - 168));
  _Unwind_Resume(a1);
}

void quasar::ErrorBlamingDecoder::printWords(uint64_t a1, quasar *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, kaldi::LatticeScoreCache *a6, kaldi::quasar::ErrorProfile *a7, quasar::PTree *a8)
{
  _QWORD *v11;
  unint64_t i;
  quasar *v14;
  quasar *v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  kaldi::TransitionModel *v20;
  int v21;
  int v22;
  quasar *v23;
  std::string __p;
  int Type;
  std::string v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34[2];
  char v35;
  _BYTE v36[72];

  if (a3[1] != *a3)
  {
    v11 = a3;
    for (i = 0; i < (uint64_t)(v11[1] - *v11) >> 2; ++i)
    {
      quasar::PTree::PTree((quasar::PTree *)v36);
      std::string::basic_string[abi:ne180100]<0>(v34, "Word");
      kaldi::quasar::ErrorProfile::ToWordString(a7, *(_DWORD *)(*v11 + 4 * i), &__p);
      quasar::PTree::PTree(&Type, &__p);
      quasar::PTree::putChild((uint64_t)v36, (uint64_t)v34, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v35 < 0)
        operator delete(v34[0]);
      std::string::basic_string[abi:ne180100]<0>(v34, "StartFrame");
      Type = quasar::getType(a2);
      std::to_string(&v29, (int)a2);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 1;
      quasar::PTree::putChild((uint64_t)v36, (uint64_t)v34, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v35 < 0)
        operator delete(v34[0]);
      std::string::basic_string[abi:ne180100]<0>(v34, "EndFrame");
      v14 = (quasar *)(((uint64_t)(*(_QWORD *)(*a5 + 24 * i + 8) - *(_QWORD *)(*a5 + 24 * i)) >> 2) + (int)a2);
      Type = quasar::getType(v14);
      std::to_string(&v29, (unint64_t)v14);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 1;
      quasar::PTree::putChild((uint64_t)v36, (uint64_t)v34, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v35 < 0)
        operator delete(v34[0]);
      v15 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v34, "LmCost");
      v16 = *(float *)(*a4 + 4 * i);
      Type = quasar::getType(v15, v16);
      std::to_string(&v29, v16);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 1;
      quasar::PTree::putChild((uint64_t)v36, (uint64_t)v34, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v35 < 0)
      {
        operator delete(v34[0]);
        if (a6)
        {
LABEL_15:
          v17 = *(_QWORD *)(*a5 + 24 * i);
          if (*(_QWORD *)(*a5 + 24 * i + 8) == v17)
          {
            v19 = 0.0;
          }
          else
          {
            v18 = 0;
            v19 = 0.0;
            do
            {
              v20 = (kaldi::TransitionModel *)*((_QWORD *)a7 + 33);
              v21 = kaldi::TransitionModel::TransitionIdToTransitionState(v20, *(_DWORD *)(v17 + 4 * v18));
              v22 = kaldi::TransitionModel::TransitionStateToForwardPdf(v20, v21);
              v19 = v19 + kaldi::LatticeScoreCache::GetScore(a6, (_DWORD)a2 + v18++, v22);
              v17 = *(_QWORD *)(*a5 + 24 * i);
            }
            while (v18 < (*(_QWORD *)(*a5 + 24 * i + 8) - v17) >> 2);
          }
          v23 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v34, "AmCost");
          v11 = a3;
          Type = quasar::getType(v23, v19);
          std::to_string(&v29, v19);
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 1;
          quasar::PTree::putChild((uint64_t)v36, (uint64_t)v34, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v35 < 0)
            operator delete(v34[0]);
        }
      }
      else if (a6)
      {
        goto LABEL_15;
      }
      quasar::PTree::addChild(a8, (const quasar::PTree *)v36);
      a2 = (quasar *)(a2 + ((*(_QWORD *)(*a5 + 24 * i + 8) - *(_QWORD *)(*a5 + 24 * i)) >> 2));
      quasar::PTree::~PTree((quasar::PTree *)v36);
    }
  }
}

void sub_1AE04C758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  quasar::PTree::~PTree((quasar::PTree *)&a20);
  if (a33 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  _Unwind_Resume(a1);
}

void quasar::ErrorBlamingDecoder::printErrorReportToJson(quasar::ErrorBlamingDecoder *this, const kaldi::quasar::ErrorProfile *a2, quasar::PTree *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  kaldi::quasar::ErrorRegion *v15;
  float RefTotalScore;
  quasar *v17;
  float HypoTotalScore;
  quasar *v19;
  float ScoreSum;
  quasar *v21;
  float v22;
  quasar *v23;
  float v24;
  quasar *v25;
  float v26;
  quasar *v27;
  uint64_t v28;
  float v29;
  quasar *v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  float v34;
  quasar *v35;
  quasar *v36;
  kaldi::LatticeScoreCache *RefScoreCache;
  quasar *v38;
  kaldi::LatticeScoreCache *HypoScoreCache;
  _BOOL8 HasErrors;
  __n128 v41;
  _QWORD *i;
  _QWORD *v43;
  int v44;
  quasar *v45;
  unsigned int v46;
  quasar *v47;
  float v48;
  uint64_t v50;
  _QWORD *v52;
  uint64_t *v53;
  kaldi::quasar::ErrorRegion *v54;
  unint64_t v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *__p;
  void *v64;
  uint64_t v65;
  void *v66;
  std::string v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72[2];
  char v73;
  _BYTE v74[64];
  _BYTE v75[72];

  if (*((_QWORD *)a2 + 14) != *((_QWORD *)a2 + 13))
  {
    v4 = 0;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v75);
      v50 = *((_QWORD *)a2 + 16);
      v5 = *((_QWORD *)a2 + 13);
      quasar::PTree::PTree((quasar::PTree *)v74);
      v52 = (_QWORD *)(v5 + 24 * v4 + 8);
      v53 = (uint64_t *)(v5 + 24 * v4);
      v6 = *v53;
      if (*v52 != *v53)
      {
        v55 = 0;
        do
        {
          quasar::PTree::PTree((quasar::PTree *)v72);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefStartFrame");
          v7 = v6 + 328 * v55;
          v9 = *(_DWORD *)(v7 + 40);
          v8 = (unsigned int *)(v7 + 40);
          LODWORD(v66) = quasar::getType((quasar *)v9);
          std::to_string(&v67, v9);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefEndFrame");
          v10 = *(_DWORD *)(v6 + 328 * v55 + 48);
          LODWORD(v66) = quasar::getType((quasar *)v10);
          std::to_string(&v67, v10);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoStartFrame");
          v11 = v6 + 328 * v55;
          v13 = *(_DWORD *)(v11 + 44);
          v12 = (unsigned int *)(v11 + 44);
          LODWORD(v66) = quasar::getType((quasar *)v13);
          std::to_string(&v67, v13);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoEndFrame");
          v14 = *(_DWORD *)(v6 + 328 * v55 + 52);
          LODWORD(v66) = quasar::getType((quasar *)v14);
          std::to_string(&v67, v14);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefTotalCost");
          v15 = (kaldi::quasar::ErrorRegion *)(v6 + 328 * v55);
          RefTotalScore = kaldi::quasar::ErrorRegion::GetRefTotalScore(v15);
          LODWORD(v66) = quasar::getType(v17, RefTotalScore);
          std::to_string(&v67, RefTotalScore);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoTotalCost");
          HypoTotalScore = kaldi::quasar::ErrorRegion::GetHypoTotalScore(v15);
          LODWORD(v66) = quasar::getType(v19, HypoTotalScore);
          std::to_string(&v67, HypoTotalScore);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefAmCost");
          ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, (*(_QWORD *)(v6 + 328 * v55 + 112) - *(_QWORD *)(v6 + 328 * v55 + 104)) >> 2, (_QWORD *)(v6 + 328 * v55 + 104));
          LODWORD(v66) = quasar::getType(v21, ScoreSum);
          std::to_string(&v67, ScoreSum);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoAmCost");
          v22 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, (*(_QWORD *)(v6 + 328 * v55 + 136) - *(_QWORD *)(v6 + 328 * v55 + 128)) >> 2, (_QWORD *)(v6 + 328 * v55 + 128));
          LODWORD(v66) = quasar::getType(v23, v22);
          std::to_string(&v67, v22);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefGraphCost");
          v24 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, (*(_QWORD *)(v6 + 328 * v55 + 160) - *(_QWORD *)(v6 + 328 * v55 + 152)) >> 2, (_QWORD *)(v6 + 328 * v55 + 152));
          LODWORD(v66) = quasar::getType(v25, v24);
          std::to_string(&v67, v24);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoGraphCost");
          v26 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, (*(_QWORD *)(v6 + 328 * v55 + 184) - *(_QWORD *)(v6 + 328 * v55 + 176)) >> 2, (_QWORD *)(v6 + 328 * v55 + 176));
          LODWORD(v66) = quasar::getType(v27, v26);
          std::to_string(&v67, v26);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefLmCost");
          v54 = (kaldi::quasar::ErrorRegion *)(v6 + 328 * v55);
          v28 = v6;
          v29 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, (*((_QWORD *)v54 + 26) - *((_QWORD *)v54 + 25)) >> 2, (_QWORD *)v54 + 25);
          LODWORD(v66) = quasar::getType(v30, v29);
          std::to_string(&v67, v29);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "HypoLmCost");
          v31 = v6 + 328 * v55;
          v33 = *(_QWORD *)(v31 + 224);
          v32 = (const void **)(v31 + 224);
          v34 = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)v15, 0, ((unint64_t)v32[1] - v33) >> 2, v32);
          LODWORD(v66) = quasar::getType(v35, v34);
          std::to_string(&v67, v34);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          quasar::PTree::PTree((quasar::PTree *)&v66);
          v36 = (quasar *)*v8;
          __p = 0;
          v64 = 0;
          v65 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v54 + 25), *((_QWORD *)v54 + 26), (uint64_t)(*((_QWORD *)v54 + 26) - *((_QWORD *)v54 + 25)) >> 2);
          RefScoreCache = (kaldi::LatticeScoreCache *)kaldi::quasar::ErrorProfile::GetRefScoreCache(a2, v4);
          quasar::ErrorBlamingDecoder::printWords((uint64_t)RefScoreCache, v36, (_QWORD *)(v28 + 328 * v55 + 56), &__p, (_QWORD *)(v28 + 328 * v55 + 248), RefScoreCache, a2, (quasar::PTree *)&v66);
          if (__p)
          {
            v64 = __p;
            operator delete(__p);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "RefWords");
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          quasar::PTree::PTree((quasar::PTree *)&__p);
          v38 = (quasar *)*v12;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v60, *v32, (uint64_t)v32[1], ((_BYTE *)v32[1] - (_BYTE *)*v32) >> 2);
          HypoScoreCache = (kaldi::LatticeScoreCache *)kaldi::quasar::ErrorProfile::GetHypoScoreCache(a2, v4);
          quasar::ErrorBlamingDecoder::printWords((uint64_t)HypoScoreCache, v38, (_QWORD *)(v28 + 328 * v55 + 80), &v60, (_QWORD *)(v28 + 328 * v55 + 272), HypoScoreCache, a2, (quasar::PTree *)&__p);
          if (v60)
          {
            v61 = v60;
            operator delete(v60);
          }
          std::string::basic_string[abi:ne180100]<0>(&v60, "HypoWords");
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&v60, (uint64_t)&__p, 1);
          if (SHIBYTE(v62) < 0)
            operator delete(v60);
          HasErrors = kaldi::quasar::ErrorRegion::HasErrors(v54);
          if (HasErrors)
          {
            v41.n128_f64[0] = quasar::PTree::PTree((quasar::PTree *)&v60);
            for (i = *(_QWORD **)(*(_QWORD *)(v28 + 328 * v55 + 16) + 16); i; i = (_QWORD *)*i)
            {
              v43 = (_QWORD *)i[2];
              if ((*(unsigned int (**)(_QWORD *, __n128))(*v43 + 40))(v43, v41) == 7)
                v43 = (_QWORD *)v43[2];
              if (!(*(unsigned int (**)(_QWORD *))(*v43 + 40))(v43))
              {
                (*(void (**)(void **__return_ptr, _QWORD *))*v43)(v56, v43);
                quasar::PTree::PTree(v58, v56);
                if (v57 < 0)
                  operator delete(v56[0]);
                quasar::PTree::addChild((quasar::PTree *)&v60, (const quasar::PTree *)v58);
                quasar::PTree::~PTree((quasar::PTree *)v58);
              }
            }
            std::string::basic_string[abi:ne180100]<0>(v58, "Attributes");
            quasar::PTree::putChild((uint64_t)v72, (uint64_t)v58, (uint64_t)&v60, 1);
            if (v59 < 0)
              operator delete(v58[0]);
            quasar::PTree::~PTree((quasar::PTree *)&v60);
          }
          if (*((_BYTE *)this + 497))
            quasar::ErrorBlamingDecoder::printExtendedReportToJson((quasar::ErrorBlamingDecoder *)HasErrors, v4, v54, a2, (quasar::PTree *)v72);
          quasar::PTree::addChild((quasar::PTree *)v74, (const quasar::PTree *)v72);
          quasar::PTree::~PTree((quasar::PTree *)&__p);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          quasar::PTree::~PTree((quasar::PTree *)v72);
          v6 = *v53;
          ++v55;
        }
        while (0x8F9C18F9C18F9C19 * ((*v52 - *v53) >> 3) > v55);
      }
      std::string::basic_string[abi:ne180100]<0>(v72, "ErrorRegions");
      quasar::PTree::putChild((uint64_t)v75, (uint64_t)v72, (uint64_t)v74, 1);
      if (v73 < 0)
        operator delete(v72[0]);
      quasar::PTree::PTree((quasar::PTree *)v72);
      v44 = *(_DWORD *)(*v53 + 8);
      if (v44 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "PresentInLattice");
        LODWORD(v66) = quasar::getType(0);
        std::to_string(&v67, 0);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
      }
      else if (v44 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "PresentInLattice");
        LODWORD(v66) = quasar::getType((quasar *)1);
        std::to_string(&v67, 1);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RankInLattice");
        LODWORD(v66) = quasar::getType((quasar *)1);
        std::to_string(&v67, 1);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Recoverable");
        LODWORD(v66) = quasar::getType((quasar *)1);
        std::to_string(&v67, 1);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        v45 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__p, "AmScaleFactorToRecover");
        LODWORD(v66) = quasar::getType(v45, COERCE_FLOAT(COERCE_UNSIGNED_INT64(1.0)));
        std::to_string(&v67, 1.0);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "PresentInLattice");
        LODWORD(v66) = quasar::getType((quasar *)1);
        std::to_string(&v67, 1);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RankInLattice");
        v46 = *(_DWORD *)(*v53 + 8);
        LODWORD(v66) = quasar::getType((quasar *)v46);
        std::to_string(&v67, v46);
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v66);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        if (fabsf(*(float *)(*v53 + 12)) == INFINITY)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Recoverable");
          LODWORD(v66) = quasar::getType(0);
          std::to_string(&v67, 0);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Recoverable");
          LODWORD(v66) = quasar::getType((quasar *)1);
          std::to_string(&v67, 1);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v66);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          v47 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__p, "AmScaleFactorToRecover");
          v48 = *(float *)(*v53 + 12);
          LODWORD(v66) = quasar::getType(v47, v48);
          std::to_string(&v67, v48);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 1;
          quasar::PTree::putChild((uint64_t)v72, (uint64_t)&__p, (uint64_t)&v66, 1);
        }
      }
      quasar::PTree::~PTree((quasar::PTree *)&v66);
      if (SHIBYTE(v65) < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&v66, "ReferenceInfo");
      quasar::PTree::putChild((uint64_t)v75, (uint64_t)&v66, (uint64_t)v72, 1);
      if (v67.__r_.__value_.__s.__data_[15] < 0)
        operator delete(v66);
      quasar::PTree::putChild((uint64_t)a3, v50 + 24 * v4, (uint64_t)v75, 1);
      quasar::PTree::~PTree((quasar::PTree *)v72);
      quasar::PTree::~PTree((quasar::PTree *)v74);
      quasar::PTree::~PTree((quasar::PTree *)v75);
      ++v4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3) > v4);
  }
}

void sub_1AE04D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;

  quasar::PTree::~PTree((quasar::PTree *)&a49);
  if (a43 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a57);
  quasar::PTree::~PTree((quasar::PTree *)(v57 - 232));
  quasar::PTree::~PTree((quasar::PTree *)(v57 - 168));
  _Unwind_Resume(a1);
}

uint64_t quasar::ErrorBlamingDecoder::runImpl(_QWORD *a1, quasar::Decodable **a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t RefTranscriptForErrorBlaming;
  __int128 v8;
  std::string::size_type size;
  uint64_t v10;
  quasar::Decodable *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  quasar::Decodable *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  __int32 **v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  quasar::Decodable **v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  quasar::ErrorBlamingDecoder *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *i;
  uint64_t v54;
  uint64_t v55;
  quasar::Decodable *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  float v61;
  uint64_t *v62;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  float *v69;
  float *v70;
  float v71;
  unint64_t v72;
  unint64_t v74;
  void **v75;
  _QWORD *v76;
  int v77;
  float *v78;
  float *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  void *v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  float v121;
  float v122;
  float v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  BOOL WordIds;
  unint64_t *v128;
  unint64_t v129;
  int *v130;
  int *v131;
  char *v132;
  int v133;
  uint64_t *j;
  int v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  quasar::Decodable *v148;
  quasar::Decodable *v149;
  uint64_t v150;
  void *v151;
  int v152;
  uint64_t v153;
  int v154;
  float v155;
  char BestPath;
  char v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  _DWORD *v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _DWORD *v175;
  _DWORD *v176;
  int v177;
  int v178;
  int v179;
  __int128 v180;
  unint64_t *v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  int32x2_t *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  char v190;
  float AmScale;
  float v192;
  uint64_t v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  int v202;
  unint64_t *v203;
  unint64_t v204;
  char v205;
  uint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  kaldi::TransitionModel *v220;
  uint64_t *v221;
  uint64_t v222;
  void *__p[2];
  _OWORD v225[17];
  void *v226[4];
  int v227;
  void *v228;
  uint64_t v229;
  uint64_t v230[2];
  uint64_t v231[2];
  void **v232;
  uint64_t v233;
  void *v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  void *v252;
  uint64_t v253;
  __int128 v254;
  kaldi::DecodableInterface *v255;
  uint64_t v256;
  char v257;
  _QWORD *v258;
  uint64_t v259;
  int32x2_t *v260[2];
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265[3];
  void *v266;
  _DWORD *v267;
  void *v268;
  char *v269;
  char *v270;
  void *v271;
  _QWORD *v272;
  _QWORD v273[6];
  uint64_t v274[2];
  void *v275;
  int *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _OWORD v281[2];
  int v282;
  void *v283;
  std::__shared_weak_count *v284;
  _OWORD v285[3];
  __int128 v286;
  __int128 v287;
  void *v288;
  void *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  uint64_t v292[3];
  void *v293[2];
  char v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  void *v297;
  std::__shared_weak_count *v298;
  std::string v299;
  _OWORD v300[3];
  unsigned int *v301[3];
  std::string v302;
  void **v303;
  _QWORD v304[3];
  _QWORD *v305;
  _QWORD v306[3];
  _QWORD *v307;
  uint64_t v308;

  v308 = *MEMORY[0x1E0C80C00];
  RefTranscriptForErrorBlaming = quasar::SpeechRequestData::getRefTranscriptForErrorBlaming(*a4);
  if (*(char *)(RefTranscriptForErrorBlaming + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)RefTranscriptForErrorBlaming, *(_QWORD *)(RefTranscriptForErrorBlaming + 8));
  }
  else
  {
    v8 = *(_OWORD *)RefTranscriptForErrorBlaming;
    v302.__r_.__value_.__r.__words[2] = *(_QWORD *)(RefTranscriptForErrorBlaming + 16);
    *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v8;
  }
  size = HIBYTE(v302.__r_.__value_.__r.__words[2]);
  if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v302.__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = a1[148];
    if (!v10)
      v10 = quasar::PTree::begin(a2[4]);
    kaldi::quasar::ConvertLmeFsts((uint64_t *)a2 + 40, (uint64_t *)v301);
    memset(v300, 0, sizeof(v300));
    v11 = a2[57];
    v220 = (kaldi::TransitionModel *)v10;
    if (v11)
    {
      if (*((char *)v11 + 71) < 0)
        std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)v11 + 6), *((_QWORD *)v11 + 7));
      else
        v299 = *(std::string *)((_BYTE *)v11 + 2);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v299, "");
    }
    v221 = (uint64_t *)a4;
    v222 = (uint64_t)a1;
    v13 = (uint64_t *)a1[115];
    v14 = (uint64_t *)a1[116];
    if (v13 != v14)
    {
      while (1)
      {
        v15 = *v13;
        v16 = *a3;
        v306[0] = &off_1E5D3DE00;
        v307 = v306;
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v15, (uint64_t **)v11, (uint64_t *)(v16 + 424), (uint64_t)&v299, (uint64_t)v306, 0);
        v17 = v307;
        if (v307 == v306)
          break;
        if (v307)
        {
          v18 = 5;
LABEL_22:
          (*(void (**)(void))(*v17 + 8 * v18))();
        }
        v19 = *((_DWORD *)a2 + 112);
        v20 = *v13;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v20, (uint64_t)__p, &v297);
        LODWORD(v234[0]) = v19;
        v234[1] = v297;
        *(_QWORD *)&v235 = v298;
        if (v298)
        {
          p_shared_owners = (unint64_t *)&v298->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        DWORD2(v235) = -1;
        v272 = 0;
        v273[0] = 0;
        v271 = &v272;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v300, (unsigned int *)v234, (uint64_t *)v301, 1, 0, 0x40000000, 0x20000uLL, (uint64_t)&v271);
        std::__tree<int>::destroy((uint64_t)&v271, v272);
        v23 = (std::__shared_weak_count *)v235;
        if ((_QWORD)v235)
        {
          v24 = (unint64_t *)(v235 + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v298;
        if (v298)
        {
          v27 = (unint64_t *)&v298->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (SBYTE7(v225[0]) < 0)
          operator delete(__p[0]);
        v13 += 2;
        if (v13 == v14)
          goto LABEL_39;
      }
      v17 = v306;
      v18 = 4;
      goto LABEL_22;
    }
LABEL_39:
    v29 = a2[57];
    if (v29)
      v30 = (uint64_t **)((char *)v29 + 24);
    else
      v30 = 0;
    v31 = *(uint64_t **)(v222 + 944);
    v32 = *(uint64_t **)(v222 + 952);
    if (v31 != v32)
    {
      v33 = a2 + 51;
      v34 = (__int32 **)(a2 + 43);
      while (1)
      {
        v35 = *v31;
        v36 = *a3;
        v304[0] = &off_1E5D3DE58;
        v305 = v304;
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v35, v30, (uint64_t *)(v36 + 424), (uint64_t)&v299, (uint64_t)v304, 0);
        v37 = v305;
        if (v305 == v304)
          break;
        if (v305)
        {
          v38 = 5;
LABEL_48:
          (*(void (**)(void))(*v37 + 8 * v38))();
        }
        v39 = *v31;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v39, (uint64_t)__p, v285);
        v40 = *(const void **)&v285[0];
        v272 = 0;
        v273[0] = 0;
        v271 = &v272;
        v41 = a2;
        v42 = (uint64_t)a2[49];
        if (v42)
        {
          std::string::basic_string[abi:ne180100]<0>(v293, "");
          quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v42, (uint64_t)v293, &v295);
          v43 = v295;
        }
        else
        {
          v43 = 0;
        }
        *(_OWORD *)v234 = 0u;
        v235 = 0u;
        LODWORD(v236) = 1065353216;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v300, v40, v301, v33, v34, (uint64_t)&v271, v43, 1u, -1.0, 1, 0x20000uLL, (uint64_t)v234);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v234);
        if (v42)
        {
          v44 = v296;
          if (v296)
          {
            v45 = (unint64_t *)&v296->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (v294 < 0)
            operator delete(v293[0]);
        }
        std::__tree<int>::destroy((uint64_t)&v271, v272);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v285[0] + 1);
        a2 = v41;
        if (*((_QWORD *)&v285[0] + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v285[0] + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (SBYTE7(v225[0]) < 0)
          operator delete(__p[0]);
        v31 += 2;
        if (v31 == v32)
          goto LABEL_68;
      }
      v37 = v304;
      v38 = 4;
      goto LABEL_48;
    }
LABEL_68:
    v50 = (quasar::ErrorBlamingDecoder *)v222;
    if (*(float *)(v222 + 1136) > 0.0)
    {
      v51 = *(_QWORD *)(*v221 + 24);
      v52 = *(uint64_t **)(v51 + 272);
      for (i = *(uint64_t **)(v51 + 280); v52 != i; v52 += 2)
      {
        v54 = *v52;
        v55 = *((unsigned int *)a2 + 112);
        v56 = a2[27];
        if (v56)
        {
          std::set<int>::set[abi:ne180100]((uint64_t *)v234, (uint64_t)v56 + 32);
        }
        else
        {
          v234[1] = 0;
          *(_QWORD *)&v235 = 0;
          v234[0] = &v234[1];
        }
        (*(void (**)(uint64_t, _OWORD *, unsigned int **, uint64_t, uint64_t, uint64_t, uint64_t, void **, quasar::Decodable **, _QWORD))(*(_QWORD *)v54 + 16))(v54, v300, v301, v55, 1, 1, 0x40000000, v234, a2 + 51, *(unsigned int *)(v222 + 48));
        std::__tree<int>::destroy((uint64_t)v234, (_QWORD *)v234[1]);
      }
    }
    if (*(_QWORD *)&v300[0] == *((_QWORD *)&v300[0] + 1))
    {
      if (quasar::gLogLevel >= 2)
      {
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        v237 = 0u;
        v238 = 0u;
        v235 = 0u;
        v236 = 0u;
        *(_OWORD *)v234 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"no first pass LM defined", 24);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
      }
    }
    else
    {
      v57 = v221;
      v58 = *(_QWORD *)(*v221 + 24);
      v59 = *(uint64_t **)(v58 + 272);
      v60 = *(uint64_t **)(v58 + 280);
      v61 = 0.0;
      if (v59 != v60)
      {
        v62 = *(uint64_t **)(v58 + 272);
        do
        {
          v63 = *v62;
          v62 += 2;
          v61 = v61 + *(float *)(v63 + 12);
        }
        while (v62 != v60);
      }
      v64 = *(float *)(v222 + 1136);
      if (v61 >= v64)
      {
        v65 = v64 / v61;
        if (quasar::gLogLevel >= 5)
        {
          v249 = 0u;
          v250 = 0u;
          v247 = 0u;
          v248 = 0u;
          v245 = 0u;
          v246 = 0u;
          v243 = 0u;
          v244 = 0u;
          v241 = 0u;
          v242 = 0u;
          v239 = 0u;
          v240 = 0u;
          v237 = 0u;
          v238 = 0u;
          v235 = 0u;
          v236 = 0u;
          *(_OWORD *)v234 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v234);
          v66 = *(_QWORD *)(*v221 + 24);
          v59 = *(uint64_t **)(v66 + 272);
          v60 = *(uint64_t **)(v66 + 280);
        }
        if (v59 != v60)
        {
          v67 = v59;
          do
          {
            v68 = *v67;
            v67 += 2;
            *(float *)(v68 + 12) = v65 * *(float *)(v68 + 12);
          }
          while (v67 != v60);
        }
        v64 = *(float *)(v222 + 1136);
        v61 = v64;
      }
      v69 = *(float **)(v222 + 1000);
      v70 = *(float **)(v222 + 992);
      if (v69 != v70)
      {
        v71 = 1.0 - v61;
        v72 = v69 - v70;
        if (v72 <= 1)
          v72 = 1;
        do
        {
          *v70 = v71 * *v70;
          ++v70;
          --v72;
        }
        while (v72);
        v64 = *(float *)(v222 + 1136);
      }
      if (v64 > 0.0 && v60 != v59)
      {
        v74 = 0;
        v75 = (void **)(v222 + 992);
        v76 = (_QWORD *)(v222 + 1008);
        do
        {
          v77 = *(_DWORD *)(v59[2 * v74] + 12);
          if ((unint64_t)v69 >= *v76)
          {
            v79 = (float *)*v75;
            v80 = ((char *)v69 - (_BYTE *)*v75) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v82 = *v76 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v222 + 1008, v83);
              v69 = *(float **)(v222 + 1000);
              v79 = *(float **)(v222 + 992);
            }
            else
            {
              v84 = 0;
            }
            v85 = &v84[4 * v80];
            *(_DWORD *)v85 = v77;
            v78 = (float *)(v85 + 4);
            while (v69 != v79)
            {
              v86 = *((_DWORD *)v69-- - 1);
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            *(_QWORD *)(v222 + 992) = v85;
            *(_QWORD *)(v222 + 1000) = v78;
            *(_QWORD *)(v222 + 1008) = &v84[4 * v83];
            if (v79)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)v69 = v77;
            v78 = v69 + 1;
          }
          *(_QWORD *)(v222 + 1000) = v78;
          ++v74;
          v59 = *(uint64_t **)(*(_QWORD *)(*v221 + 24) + 272);
          v69 = v78;
        }
        while (v74 < (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v221 + 24) + 280) - (_QWORD)v59) >> 4);
      }
      v87 = *(_QWORD *)(v222 + 1000);
      v88 = *(_QWORD *)(v222 + 992);
      if ((v87 - v88) >> 2 == (uint64_t)(*((_QWORD *)&v300[0] + 1) - *(_QWORD *)&v300[0]) >> 4)
      {
        memset(v292, 0, sizeof(v292));
        if (v87 != v88)
        {
          v89 = 0;
          do
          {
            v90 = *(_OWORD *)(*(_QWORD *)&v300[0] + 16 * v89);
            *(_OWORD *)v234 = v90;
            if (*((_QWORD *)&v90 + 1))
            {
              v91 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            LODWORD(v235) = *(_DWORD *)(v88 + 4 * v89);
            std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v292, (uint64_t)v234);
            v93 = (std::__shared_weak_count *)v234[1];
            if (v234[1])
            {
              v94 = (unint64_t *)((char *)v234[1] + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            ++v89;
            v88 = *(_QWORD *)(v222 + 992);
          }
          while (v89 < (*(_QWORD *)(v222 + 1000) - v88) >> 2);
        }
        LODWORD(v234[0]) = 0;
        std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>(v292, (int *)v234, &v290);
        v96 = *(_QWORD *)(*a3 + 472);
        *(_OWORD *)v234 = 0u;
        v235 = 0u;
        LODWORD(v236) = 1065353216;
        __p[1] = 0;
        *(_QWORD *)&v225[0] = 0;
        __p[0] = &__p[1];
        quasar::DecoderPassData::getLeftContextLabels((uint64_t)a2, v96, v234, (uint64_t)__p, (char **)&v288);
        std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v234);
        if (v288 != v289)
        {
          if (quasar::gLogLevel >= 2)
          {
            v249 = 0u;
            v250 = 0u;
            v247 = 0u;
            v248 = 0u;
            v245 = 0u;
            v246 = 0u;
            v243 = 0u;
            v244 = 0u;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v237 = 0u;
            v238 = 0u;
            v235 = 0u;
            v236 = 0u;
            *(_OWORD *)v234 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Left context labels not yet implemented.", 40);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
          }
          v12 = 2;
LABEL_128:
          if (v288)
          {
            v289 = v288;
            operator delete(v288);
          }
          v97 = v291;
          if (v291)
          {
            v98 = (unint64_t *)&v291->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v234[0] = v292;
          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
          goto LABEL_141;
        }
        v287 = 0uLL;
        std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(&v290, v234);
        v287 = *(_OWORD *)v234;
        v102 = *(void **)(v222 + 1016);
        v286 = 0uLL;
        memset(v285, 0, sizeof(v285));
        if (v102)
        {
          v103 = *((_DWORD *)a2 + 112);
          v104 = *(std::__shared_weak_count **)(v222 + 1024);
          v283 = v102;
          v284 = v104;
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
            LODWORD(v234[0]) = v103;
            v234[1] = v102;
            *(_QWORD *)&v235 = v104;
            do
              v107 = __ldxr(v105);
            while (__stxr(v107 + 1, v105));
          }
          else
          {
            LODWORD(v234[0]) = v103;
            v234[1] = v102;
            *(_QWORD *)&v235 = 0;
          }
          DWORD2(v235) = -1;
          __p[1] = 0;
          *(_QWORD *)&v225[0] = 0;
          __p[0] = &__p[1];
          kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v285, (unsigned int *)v234, (uint64_t *)v301, 1, 0, 0x40000000, 0x20000uLL, (uint64_t)__p);
          std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
          v108 = (std::__shared_weak_count *)v235;
          if ((_QWORD)v235)
          {
            v109 = (unint64_t *)(v235 + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = v284;
          if (v284)
          {
            v112 = (unint64_t *)&v284->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(*(uint64_t **)&v300[0], v234);
          v114 = *(_OWORD *)v234;
          v234[0] = 0;
          v234[1] = 0;
          v115 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
          v286 = v114;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          v118 = (std::__shared_weak_count *)v234[1];
          if (v234[1])
          {
            v119 = (unint64_t *)((char *)v234[1] + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
        }
        v121 = *(float *)(v222 + 504);
        if (v121 == 0.0)
        {
          v122 = 0.0;
          v123 = 0.0;
        }
        else
        {
          v122 = -logf(*(float *)(v222 + 504));
          v123 = -logf(1.0 - v121);
        }
        memset(v281, 0, sizeof(v281));
        v282 = 1065353216;
        if ((quasar::SymbolTableList::getLmeSymbolIdToNumWords(*(int ***)(*a3 + 472), (uint64_t)v281) & 1) == 0)
        {
          if (quasar::gLogLevel >= 2)
          {
            v249 = 0u;
            v250 = 0u;
            v247 = 0u;
            v248 = 0u;
            v245 = 0u;
            v246 = 0u;
            v243 = 0u;
            v244 = 0u;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v237 = 0u;
            v238 = 0u;
            v235 = 0u;
            v236 = 0u;
            *(_OWORD *)v234 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Failed to map compound LME words. LME data is probably corrupt.", 63);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
          }
          quasar::PTree::PTree((quasar::PTree *)v234);
          std::string::basic_string[abi:ne180100]<0>(&v271, "Failed to map compound LME words. LME data is probably corrupt.");
          quasar::PTree::PTree(__p, &v271);
          quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          if (SHIBYTE(v273[0]) < 0)
            operator delete(v271);
          quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
          quasar::PTree::~PTree((quasar::PTree *)v234);
          v12 = 2;
          goto LABEL_286;
        }
        v279 = 0;
        v278 = 0;
        v280 = 0;
        v276 = 0;
        v275 = 0;
        v277 = 0;
        v124 = *(std::__shared_weak_count **)(*a3 + 480);
        v274[0] = *(_QWORD *)(*a3 + 472);
        v274[1] = (uint64_t)v124;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        WordIds = quasar::ErrorBlamingDecoder::getWordIds(v274, (uint64_t)&v302, &v278, (uint64_t)&v275);
        if (v124)
        {
          v128 = (unint64_t *)&v124->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        if (!WordIds)
        {
          quasar::PTree::PTree((quasar::PTree *)v234);
          v159 = v278;
          v160 = v279;
          while (v159 != v160)
          {
            quasar::PTree::PTree(__p, v159);
            quasar::PTree::addChild((quasar::PTree *)v234, (const quasar::PTree *)__p);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            v159 += 24;
          }
          quasar::PTree::PTree((quasar::PTree *)__p);
          std::string::basic_string[abi:ne180100]<0>(v226, "Could not map all words to symbol ids.");
          quasar::PTree::PTree(&v271, v226);
          quasar::PTree::putChild((uint64_t)__p, v222 + 472, (uint64_t)&v271, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v271);
          if (SHIBYTE(v226[2]) < 0)
            operator delete(v226[0]);
          std::string::basic_string[abi:ne180100]<0>(&v271, "failed-words");
          quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v271, (uint64_t)v234, 1);
          if (SHIBYTE(v273[0]) < 0)
            operator delete(v271);
          quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          quasar::PTree::~PTree((quasar::PTree *)v234);
          v12 = 2;
          goto LABEL_283;
        }
        v269 = 0;
        v268 = 0;
        v270 = 0;
        v130 = (int *)v275;
        v131 = v276;
        if (v275 != v276)
        {
          v132 = 0;
          do
          {
            v133 = *v130;
            for (j = *(uint64_t **)(*(_QWORD *)(v222 + 1032) + 40); j; j = (uint64_t *)*j)
            {
              v135 = *((_DWORD *)j + 7);
              if (v133 >= v135)
              {
                if (v135 >= v133)
                {
                  v57 = v221;
                  goto LABEL_215;
                }
                ++j;
              }
            }
            if (v132 >= v270)
            {
              v137 = (char *)v268;
              v138 = (v132 - (_BYTE *)v268) >> 2;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v140 = v270 - (_BYTE *)v268;
              if ((v270 - (_BYTE *)v268) >> 1 > v139)
                v139 = v140 >> 1;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                v141 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v270, v141);
                v132 = v269;
                v137 = (char *)v268;
              }
              else
              {
                v142 = 0;
              }
              v143 = &v142[4 * v138];
              *(_DWORD *)v143 = v133;
              v136 = v143 + 4;
              if (v132 == v137)
              {
                v57 = v221;
              }
              else
              {
                v57 = v221;
                do
                {
                  v144 = *((_DWORD *)v132 - 1);
                  v132 -= 4;
                  *((_DWORD *)v143 - 1) = v144;
                  v143 -= 4;
                }
                while (v132 != v137);
              }
              v268 = v143;
              v269 = v136;
              v270 = &v142[4 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_DWORD *)v132 = v133;
              v136 = v132 + 4;
              v57 = v221;
            }
            v269 = v136;
            v132 = v136;
LABEL_215:
            ++v130;
          }
          while (v130 != v131);
        }
        fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v266);
        memset(v265, 0, sizeof(v265));
        v264 = 0;
        v263 = 0;
        v252 = 0;
        v145 = (_QWORD *)operator new();
        quasar::Bitmap::~Bitmap(*(quasar::Bitmap **)(v222 + 904));
        v147 = *(_QWORD *)(v146 + 8);
        v145[1] = v147;
        ++*(_DWORD *)(v147 + 56);
        *v145 = &unk_1E5D28970;
        v252 = v145;
        v149 = a2[40];
        v148 = a2[41];
        if (v148 != v149)
        {
          do
          {
            v150 = *((_QWORD *)v149 + 1);
            if (v150)
            {
              fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(__p, v150);
              fst::RemoveWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)__p);
              v234[0] = 0;
              v234[1] = 0;
              *(_QWORD *)&v235 = 0;
              fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)__p, (uint64_t *)(v222 + 1088), (uint64_t *)v234);
              if (v234[0])
              {
                v234[1] = v234[0];
                operator delete(v234[0]);
              }
              fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v252, (uint64_t)__p);
              __p[0] = &unk_1E5D256C0;
              v151 = __p[1];
              if (__p[1])
              {
                v152 = *((_DWORD *)__p[1] + 14) - 1;
                *((_DWORD *)__p[1] + 14) = v152;
                if (!v152)
                  (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
              }
            }
            v149 = (quasar::Decodable *)((char *)v149 + 32);
          }
          while (v149 != v148);
          fst::Closure<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v252, 1);
          fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v252);
        }
        v153 = *(_QWORD *)(v222 + 1168);
        v234[0] = 0;
        v234[1] = 0;
        *(_QWORD *)&v235 = 0;
        std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,void>((uint64_t)v220, v153, &v252, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v263, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        if (v234[0])
        {
          v234[1] = v234[0];
          operator delete(v234[0]);
        }
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v261);
        if (!kaldi::TrainingGraphCompiler::CompileGraphFromText((uint64_t)v263, &v268, &v261))
        {
          if (quasar::gLogLevel >= 1)
          {
            v249 = 0u;
            v250 = 0u;
            v247 = 0u;
            v248 = 0u;
            v245 = 0u;
            v246 = 0u;
            v243 = 0u;
            v244 = 0u;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v237 = 0u;
            v238 = 0u;
            v235 = 0u;
            v236 = 0u;
            *(_OWORD *)v234 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
            v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Failed to create decoding graph.", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)" Hint: Are all the ref words in the pron lexicon?", 49);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v234);
          }
          quasar::PTree::PTree((quasar::PTree *)v234);
          std::string::basic_string[abi:ne180100]<0>(&v271, "Encountered problem while creating decoding graph for reference.");
          quasar::PTree::PTree(__p, &v271);
          quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          if (SHIBYTE(v273[0]) < 0)
            operator delete(v271);
          quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
          quasar::PTree::~PTree((quasar::PTree *)v234);
          v162 = 1;
LABEL_273:
          v261 = &unk_1E5D256C0;
          v165 = v262;
          if (v262)
          {
            v166 = *(_DWORD *)(v262 + 56) - 1;
            *(_DWORD *)(v262 + 56) = v166;
            if (!v166)
              (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
          }
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v263);
          if (v162)
          {
            v12 = 2;
LABEL_278:
            kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)v265);
            v266 = &unk_1E5D25800;
            v167 = v267;
            if (v267)
            {
              v168 = v267[14] - 1;
              v267[14] = v168;
              if (!v168)
                (*(void (**)(_DWORD *))(*(_QWORD *)v167 + 8))(v167);
            }
            if (v268)
            {
              v269 = (char *)v268;
              operator delete(v268);
            }
LABEL_283:
            if (v275)
            {
              v276 = (int *)v275;
              operator delete(v275);
            }
            v234[0] = &v278;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
LABEL_286:
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v281);
            v234[0] = (char *)&v285[1] + 8;
            std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
            v234[0] = v285;
            std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
            v169 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
            if (*((_QWORD *)&v286 + 1))
            {
              v170 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            v172 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
            if (*((_QWORD *)&v287 + 1))
            {
              v173 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
            goto LABEL_128;
          }
          if ((char *)v276 - (_BYTE *)v275 != v269 - (_BYTE *)v268)
          {
            fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v234);
            quasar::ErrorBlamingDecoder::addUnpronuncedWordsToReferenceLattice(v222, &v266, (uint64_t *)&v275, (uint64_t)v234);
            v175 = v234[1];
            ++*((_DWORD *)v234[1] + 14);
            v176 = v267;
            if (v267 && (v177 = v267[14] - 1, (v267[14] = v177) == 0))
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v176 + 8))(v176);
              v267 = v175;
              v234[0] = &unk_1E5D25800;
              v175 = v234[1];
              if (!v234[1])
                goto LABEL_303;
            }
            else
            {
              v267 = v175;
              v234[0] = &unk_1E5D25800;
            }
            v178 = v175[14] - 1;
            v175[14] = v178;
            if (!v178)
              (*(void (**)(_DWORD *))(*(_QWORD *)v175 + 8))(v175);
          }
LABEL_303:
          fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v263);
          if ((quasar::ErrorBlamingDecoder::wordAlignLattice(v222, (uint64_t)v220, (uint64_t)&v266, (uint64_t)&v263) & 1) == 0)
          {
            if (quasar::gLogLevel >= 2)
            {
              v249 = 0u;
              v250 = 0u;
              v247 = 0u;
              v248 = 0u;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              v241 = 0u;
              v242 = 0u;
              v239 = 0u;
              v240 = 0u;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              *(_OWORD *)v234 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Word alignment failed for reference lattice. Aborting error-blaming.", 68);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
            }
            quasar::PTree::PTree((quasar::PTree *)v234);
            std::string::basic_string[abi:ne180100]<0>(&v271, "Encountered problem while word-aligning the reference lattice.");
            quasar::PTree::PTree(__p, &v271);
            quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            if (SHIBYTE(v273[0]) < 0)
              operator delete(v271);
            quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
            quasar::PTree::~PTree((quasar::PTree *)v234);
            v12 = 2;
            goto LABEL_415;
          }
          fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v261);
          v179 = *(_DWORD *)(v222 + 1152);
          v180 = v287;
          v254 = v287;
          if (*((_QWORD *)&v287 + 1))
          {
            v181 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
          }
          v183 = quasar::ErrorBlamingDecoder::reconstructLattice(v222, v220, (uint64_t *)&v254, &v263, (kaldi::LatticeScoreCache *)v265, v179, v281, (uint64_t)&v261, v122, v123);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v254);
          if ((v183 & 1) == 0)
          {
            if (quasar::gLogLevel >= 2)
            {
              v249 = 0u;
              v250 = 0u;
              v247 = 0u;
              v248 = 0u;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              v241 = 0u;
              v242 = 0u;
              v239 = 0u;
              v240 = 0u;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              *(_OWORD *)v234 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Reference lattice reconstruction failed. Aborting error-blaming.", 64);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
            }
            quasar::PTree::PTree((quasar::PTree *)v234);
            std::string::basic_string[abi:ne180100]<0>(&v271, "Encountered problem while reconstructing the reference lattice.");
            quasar::PTree::PTree(__p, &v271);
            quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            if (SHIBYTE(v273[0]) < 0)
              operator delete(v271);
            quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
            quasar::PTree::~PTree((quasar::PTree *)v234);
            v12 = 2;
            goto LABEL_412;
          }
          v184 = *a3;
          v185 = *(int32x2_t **)(*a3 + 160);
          v260[0] = *(int32x2_t **)(*a3 + 152);
          v260[1] = v185;
          if (v185)
          {
            v186 = (unint64_t *)&v185[1];
            do
              v187 = __ldxr(v186);
            while (__stxr(v187 + 1, v186));
            v184 = *a3;
          }
          if (*((_BYTE *)a2 + 552))
          {
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v260, (uint64_t *)(v184 + 168));
            v184 = *a3;
          }
          v259 = 0;
          v258 = 0;
          if (*(_BYTE *)(v184 + 145))
          {
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v258, (uint64_t *)v260);
          }
          else
          {
            _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v234);
            std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v258, (__int128 *)v234);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v234);
            if ((quasar::ErrorBlamingDecoder::wordAlignLattice(v222, (uint64_t)v220, (uint64_t)v260[0], (uint64_t)v258) & 1) == 0)
            {
              if (quasar::gLogLevel >= 2)
              {
                v249 = 0u;
                v250 = 0u;
                v247 = 0u;
                v248 = 0u;
                v245 = 0u;
                v246 = 0u;
                v243 = 0u;
                v244 = 0u;
                v241 = 0u;
                v242 = 0u;
                v239 = 0u;
                v240 = 0u;
                v237 = 0u;
                v238 = 0u;
                v235 = 0u;
                v236 = 0u;
                *(_OWORD *)v234 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Word alignment failed for hypothesis lattice. Aborting error-blaming.", 69);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
              }
              quasar::PTree::PTree((quasar::PTree *)v234);
              std::string::basic_string[abi:ne180100]<0>(&v271, "Encountered problem while word-aligning the hypothesis lattice.");
              quasar::PTree::PTree(__p, &v271);
              quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
              quasar::PTree::~PTree((quasar::PTree *)__p);
              if (SHIBYTE(v273[0]) < 0)
                operator delete(v271);
              quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
              quasar::PTree::~PTree((quasar::PTree *)v234);
              v12 = 2;
              goto LABEL_411;
            }
          }
          fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v252);
          v251 = v180;
          if (*((_QWORD *)&v180 + 1))
          {
            v188 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          v190 = quasar::ErrorBlamingDecoder::reconstructLattice(v222, v220, (uint64_t *)&v251, v258, *(kaldi::LatticeScoreCache **)(*a3 + 488), v179, v281, (uint64_t)&v252, v122, v123);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v251);
          if ((v190 & 1) != 0)
          {
            AmScale = quasar::Decodable::getAmScale(a2[4]);
            if (AmScale == 0.0)
              v192 = 1.0;
            else
              v192 = AmScale;
            v193 = *a3;
            v194 = *(float *)(*a3 + 504) / v192;
            if (v194 != 1.0
              && (COERCE_INT(fabs(v194 + -1.0)) > 2139095039
               || fabsf(v194 + -1.0) > (float)((float)(fabsf(v194) + 1.0) * 0.0001)))
            {
              fst::AcousticLatticeScale(v194, (uint64_t *)v234);
              fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v234, (uint64_t)&v261);
              __p[0] = v234;
              std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              kaldi::LatticeScoreCache::ScaleAcousticScores(v265, *(float *)(*a3 + 504) / v192);
              v193 = *a3;
            }
            if (*(char *)(v193 + 1055) < 0)
              v195 = *(_QWORD *)(v193 + 1040);
            else
              v195 = *(unsigned __int8 *)(v193 + 1055);
            if (!v195)
              goto LABEL_357;
            v272 = 0;
            v271 = 0;
            v273[0] = 0;
            kaldi::SplitStringToFloats<float>(v193 + 1032, ",", 1, &v271);
            if (quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels((uint64_t)a2, a3, *v57, 1, &v261, (uint64_t)&v271, 0, v179, -1.0, 0x20000uLL, 0)&& (quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels((uint64_t)a2, a3, *v57, 1, &v252, (uint64_t)&v271, 0,
                    v179,
                    -1.0,
                    0x20000uLL,
                    0) & 1) != 0)
            {
              if (v271)
              {
                v272 = v271;
                operator delete(v271);
              }
              v193 = *a3;
LABEL_357:
              kaldi::quasar::ErrorBlamer::ErrorBlamer((kaldi::quasar::ErrorBlamer *)v234, *(_DWORD *)(v222 + 500), *(float *)(v222 + 1128), 1.0, *(float *)(v193 + 508), *(float *)(v222 + 1140), *(float *)(v222 + 1144), v220);
              DWORD2(v240) = v179;
              std::string::basic_string[abi:ne180100]<0>(__p, "bigG");
              v272 = 0;
              v271 = 0;
              v273[0] = 0;
              fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v255);
              memset(v226, 0, 24);
              kaldi::quasar::ErrorBlamer::Blame(v234, (uint64_t)__p, (uint64_t)&v261, (uint64_t)&v252, (uint64_t *)&v271, &v255, (uint64_t *)v226, v265, *(uint64_t **)(*a3 + 488));
              v232 = v226;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v232);
              v255 = (kaldi::DecodableInterface *)&unk_1E5D25580;
              v196 = v256;
              if (v256)
              {
                v197 = *(_DWORD *)(v256 + 56) - 1;
                *(_DWORD *)(v256 + 56) = v197;
                if (!v197)
                  (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
              }
              if (v271)
              {
                v272 = v271;
                operator delete(v271);
              }
              if (SBYTE7(v225[0]) < 0)
                operator delete(__p[0]);
              v198 = v286;
              if (!(_QWORD)v286)
                goto LABEL_400;
              fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v255);
              fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v232);
              v199 = *((_QWORD *)&v286 + 1);
              v231[0] = v198;
              v231[1] = *((_QWORD *)&v286 + 1);
              if (*((_QWORD *)&v286 + 1))
              {
                v200 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
                do
                  v201 = __ldxr(v200);
                while (__stxr(v201 + 1, v200));
              }
              v202 = quasar::ErrorBlamingDecoder::reconstructLattice(v222, v220, v231, &v263, (kaldi::LatticeScoreCache *)v265, v179, v281, (uint64_t)&v255, v122, v123);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v231);
              if (!v202)
                goto LABEL_422;
              v230[0] = v198;
              v230[1] = v199;
              if (v199)
              {
                v203 = (unint64_t *)(v199 + 8);
                do
                  v204 = __ldxr(v203);
                while (__stxr(v204 + 1, v203));
              }
              v205 = quasar::ErrorBlamingDecoder::reconstructLattice(v222, v220, v230, v258, *(kaldi::LatticeScoreCache **)(*a3 + 488), v179, v281, (uint64_t)&v232, v122, v123);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v230);
              if ((v205 & 1) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "smallG");
                v272 = 0;
                v271 = 0;
                v273[0] = 0;
                fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v228);
                memset(v226, 0, 24);
                kaldi::quasar::ErrorBlamer::Blame(v234, (uint64_t)__p, (uint64_t)&v255, (uint64_t)&v232, (uint64_t *)&v271, &v228, (uint64_t *)v226, v265, *(uint64_t **)(*a3 + 488));
                v303 = v226;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v303);
                v228 = &unk_1E5D25580;
                v206 = v229;
                if (v229)
                {
                  v207 = *(_DWORD *)(v229 + 56) - 1;
                  *(_DWORD *)(v229 + 56) = v207;
                  if (!v207)
                    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
                }
                if (v271)
                {
                  v272 = v271;
                  operator delete(v271);
                }
                if (SBYTE7(v225[0]) < 0)
                  operator delete(__p[0]);
                v208 = 1;
                v50 = (quasar::ErrorBlamingDecoder *)v222;
              }
              else
              {
LABEL_422:
                if (quasar::gLogLevel >= 2)
                {
                  memset(v225, 0, 256);
                  *(_OWORD *)__p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice reconstruction with smallG failed.", 42);
                  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
                }
                quasar::PTree::PTree((quasar::PTree *)__p);
                std::string::basic_string[abi:ne180100]<0>(v226, "Encountered problem while trying to reconstruct lattices with smallG.");
                quasar::PTree::PTree(&v271, v226);
                quasar::PTree::putChild((uint64_t)__p, v222 + 472, (uint64_t)&v271, 1);
                quasar::PTree::~PTree((quasar::PTree *)&v271);
                if (SHIBYTE(v226[2]) < 0)
                  operator delete(v226[0]);
                quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)__p, 1);
                quasar::PTree::~PTree((quasar::PTree *)__p);
                v208 = 0;
              }
              v232 = (void **)&unk_1E5D25800;
              v209 = v233;
              if (v233)
              {
                v210 = *(_DWORD *)(v233 + 56) - 1;
                *(_DWORD *)(v233 + 56) = v210;
                if (!v210)
                  (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
              }
              v255 = (kaldi::DecodableInterface *)&unk_1E5D25800;
              v211 = v256;
              if (v256)
              {
                v212 = *(_DWORD *)(v256 + 56) - 1;
                *(_DWORD *)(v256 + 56) = v212;
                if (!v212)
                  (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
              }
              if ((v208 & 1) == 0)
              {
                v12 = 2;
              }
              else
              {
LABEL_400:
                memset(v226, 0, sizeof(v226));
                v227 = 1065353216;
                quasar::SymbolTableList::flatten(*(_QWORD **)(*a3 + 472), v226);
                kaldi::quasar::ErrorProfile::SetWordSymbolTable((uint64_t)&v243, (uint64_t)v226);
                kaldi::quasar::ErrorProfile::SetPhoneSymbolTable((uint64_t)&v243, (uint64_t)v50 + 1048);
                if (*((_BYTE *)v50 + 496))
                {
                  quasar::PTree::PTree((quasar::PTree *)__p);
                  quasar::ErrorBlamingDecoder::printErrorReportToJson(v50, (const kaldi::quasar::ErrorProfile *)&v243, (quasar::PTree *)__p);
                  quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), (uint64_t)v50 + 448, (uint64_t)__p, 1);
                  quasar::PTree::~PTree((quasar::PTree *)__p);
                }
                else
                {
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                  kaldi::quasar::ErrorProfile::WriteUtterancesToCsv((uint64_t)&v243, (uint64_t)v225);
                  v213 = *(_QWORD *)(*a3 + 544);
                  std::stringbuf::str();
                  quasar::PTree::PTree(&v271, &v255);
                  quasar::PTree::putChild(v213, v222 + 448, (uint64_t)&v271, 1);
                  quasar::PTree::~PTree((quasar::PTree *)&v271);
                  if (v257 < 0)
                    operator delete(v255);
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                }
                std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)v226);
                v12 = 0;
              }
              kaldi::quasar::ErrorBlamer::~ErrorBlamer((kaldi::quasar::ErrorBlamer *)v234);
              goto LABEL_408;
            }
            if (quasar::gLogLevel >= 2)
            {
              v249 = 0u;
              v250 = 0u;
              v247 = 0u;
              v248 = 0u;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              v241 = 0u;
              v242 = 0u;
              v239 = 0u;
              v240 = 0u;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              *(_OWORD *)v234 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"LM rescoring in error-blamer was not successful.", 48);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
            }
            quasar::PTree::PTree((quasar::PTree *)v234);
            std::string::basic_string[abi:ne180100]<0>(v226, "LM rescoring was not successful.");
            quasar::PTree::PTree(__p, v226);
            quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            if (SHIBYTE(v226[2]) < 0)
              operator delete(v226[0]);
            quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
            quasar::PTree::~PTree((quasar::PTree *)v234);
            if (v271)
            {
              v272 = v271;
              operator delete(v271);
            }
          }
          else
          {
            if (quasar::gLogLevel >= 2)
            {
              v249 = 0u;
              v250 = 0u;
              v247 = 0u;
              v248 = 0u;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              v241 = 0u;
              v242 = 0u;
              v239 = 0u;
              v240 = 0u;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              *(_OWORD *)v234 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Hypothesis lattice reconstruction failed.", 41);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
            }
            quasar::PTree::PTree((quasar::PTree *)v234);
            std::string::basic_string[abi:ne180100]<0>(&v271, "Encountered problem while reconstructing the hypothesis lattice.");
            quasar::PTree::PTree(__p, &v271);
            quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)__p, 1);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            if (SHIBYTE(v273[0]) < 0)
              operator delete(v271);
            quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
            quasar::PTree::~PTree((quasar::PTree *)v234);
          }
          v12 = 2;
LABEL_408:
          v252 = &unk_1E5D25800;
          v214 = v253;
          if (v253)
          {
            v215 = *(_DWORD *)(v253 + 56) - 1;
            *(_DWORD *)(v253 + 56) = v215;
            if (!v215)
              (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
          }
LABEL_411:
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v258);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v260);
LABEL_412:
          v261 = &unk_1E5D25800;
          v216 = v262;
          if (v262)
          {
            v217 = *(_DWORD *)(v262 + 56) - 1;
            *(_DWORD *)(v262 + 56) = v217;
            if (!v217)
              (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
          }
LABEL_415:
          v263 = &unk_1E5D25800;
          v218 = v264;
          if (v264)
          {
            v219 = *(_DWORD *)(v264 + 56) - 1;
            *(_DWORD *)(v264 + 56) = v219;
            if (!v219)
              (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
          }
          goto LABEL_278;
        }
        v234[0] = 0;
        v234[1] = 0;
        *(_QWORD *)&v235 = 0;
        kaldi::AddTransitionProbs(v220, v234, (uint64_t)&v261, *(float *)(v222 + 1140), *(float *)(v222 + 1144));
        if (v234[0])
        {
          v234[1] = v234[0];
          operator delete(v234[0]);
        }
        *(_OWORD *)((char *)v226 + 4) = xmmword_1AE193C50;
        *(void **)((char *)&v226[2] + 4) = (void *)0x400000003F000000;
        LODWORD(v226[0]) = *(_DWORD *)(v222 + 1124);
        kaldi::ScoreCacheFasterDecoder::ScoreCacheFasterDecoder(__p, &v261, v226, 0);
        _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v260);
        std::dynamic_pointer_cast[abi:ne180100]<kaldi::OnlineCacheInput,kaldi::OnlineFeatInputItf>((uint64_t)(a2 + 65), v234);
        kaldi::OnlineCacheInput::GetCachedData((uint64_t)v234[0], v260[0], 0);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v234);
        v154 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a2 + 2) + 24))(*((_QWORD *)*a2 + 2));
        kaldi::OnlineRecordedInput::OnlineRecordedInput((uint64_t)&v271, (uint64_t)v260[0], v154);
        LODWORD(v255) = 27;
        kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)v234, &v255, (uint64_t)&v271, 1);
        quasar::Decodable::createDecodable((uint64_t *)&v255, a2[4], (kaldi::OnlineFeatureMatrix *)v234);
        kaldi::ScoreCacheFasterDecoder::Decode((kaldi::ScoreCacheFasterDecoder *)__p, v255);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v255);
        kaldi::OnlineFeatureMatrix::~OnlineFeatureMatrix((kaldi::OnlineFeatureMatrix *)v234);
        v271 = &off_1E5D2A830;
        kaldi::Matrix<float>::~Matrix((uint64_t)v273);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v271);
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v258);
        if (kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)__p)
          && (kaldi::ScoreCacheFasterDecoder::GetBestPath((uint64_t)__p, (uint64_t)&v258, (kaldi::LatticeScoreCache *)v265, v220) & 1) != 0)
        {
          goto LABEL_237;
        }
        v155 = *(float *)(v222 + 1132);
        if (v155 != 0.0)
        {
          if (quasar::gLogLevel >= 4)
          {
            v249 = 0u;
            v250 = 0u;
            v247 = 0u;
            v248 = 0u;
            v245 = 0u;
            v246 = 0u;
            v243 = 0u;
            v244 = 0u;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v237 = 0u;
            v238 = 0u;
            v235 = 0u;
            v236 = 0u;
            *(_OWORD *)v234 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Retrying utterance with beam ", 29);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v234);
            v155 = *(float *)(v222 + 1132);
          }
          *(float *)v226 = v155;
          *(_OWORD *)((char *)&v225[8] + 4) = *(_OWORD *)((char *)&v226[1] + 4);
          *(_OWORD *)((char *)&v225[7] + 8) = *(_OWORD *)v226;
          kaldi::OnlineRecordedInput::OnlineRecordedInput((uint64_t)&v271, (uint64_t)v260[0], v154);
          LODWORD(v255) = 27;
          kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)v234, &v255, (uint64_t)&v271, 1);
          quasar::Decodable::createDecodable((uint64_t *)&v255, a2[4], (kaldi::OnlineFeatureMatrix *)v234);
          kaldi::ScoreCacheFasterDecoder::Decode((kaldi::ScoreCacheFasterDecoder *)__p, v255);
          if (kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)__p))
          {
            BestPath = kaldi::ScoreCacheFasterDecoder::GetBestPath((uint64_t)__p, (uint64_t)&v258, (kaldi::LatticeScoreCache *)v265, v220);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v255);
            kaldi::OnlineFeatureMatrix::~OnlineFeatureMatrix((kaldi::OnlineFeatureMatrix *)v234);
            v271 = &off_1E5D2A830;
            kaldi::Matrix<float>::~Matrix((uint64_t)v273);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v271);
            if ((BestPath & 1) != 0)
            {
LABEL_237:
              if (v301[1] == v301[0])
              {
                fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v258, (uint64_t)&v266, 1);
              }
              else
              {
                v157 = fst::DeterminizeLatticePhonePrunedWrapper(v220, (void **)&v258, (uint64_t)&v266, 0x2FAF0803A800000, 257, *(float *)(v222 + 1124));
                if (quasar::gLogLevel < 5)
                  v158 = 1;
                else
                  v158 = v157;
                if ((v158 & 1) == 0)
                {
                  v249 = 0u;
                  v250 = 0u;
                  v247 = 0u;
                  v248 = 0u;
                  v245 = 0u;
                  v246 = 0u;
                  v243 = 0u;
                  v244 = 0u;
                  v241 = 0u;
                  v242 = 0u;
                  v239 = 0u;
                  v240 = 0u;
                  v237 = 0u;
                  v238 = 0u;
                  v235 = 0u;
                  v236 = 0u;
                  *(_OWORD *)v234 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Determinization finished earlier than the beam", 46);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v234);
                }
              }
              v162 = 0;
LABEL_269:
              v258 = &unk_1E5D25580;
              v163 = v259;
              if (v259)
              {
                v164 = *(_DWORD *)(v259 + 56) - 1;
                *(_DWORD *)(v259 + 56) = v164;
                if (!v164)
                  (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
              }
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v260);
              kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)__p);
              goto LABEL_273;
            }
          }
          else
          {
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v255);
            kaldi::OnlineFeatureMatrix::~OnlineFeatureMatrix((kaldi::OnlineFeatureMatrix *)v234);
            v271 = &off_1E5D2A830;
            kaldi::Matrix<float>::~Matrix((uint64_t)v273);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v271);
          }
        }
        if (quasar::gLogLevel >= 2)
        {
          v249 = 0u;
          v250 = 0u;
          v247 = 0u;
          v248 = 0u;
          v245 = 0u;
          v246 = 0u;
          v243 = 0u;
          v244 = 0u;
          v241 = 0u;
          v242 = 0u;
          v239 = 0u;
          v240 = 0u;
          v237 = 0u;
          v238 = 0u;
          v235 = 0u;
          v236 = 0u;
          *(_OWORD *)v234 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Problem decoding utterance for forced alignment.", 48);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
        }
        quasar::PTree::PTree((quasar::PTree *)v234);
        std::string::basic_string[abi:ne180100]<0>(&v255, "Encountered problem while force aligning the reference.");
        quasar::PTree::PTree(&v271, &v255);
        quasar::PTree::putChild((uint64_t)v234, v222 + 472, (uint64_t)&v271, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v271);
        if (v257 < 0)
          operator delete(v255);
        quasar::PTree::putChild(*(_QWORD *)(*a3 + 544), v222 + 448, (uint64_t)v234, 1);
        quasar::PTree::~PTree((quasar::PTree *)v234);
        v162 = 1;
        goto LABEL_269;
      }
      if (quasar::gLogLevel >= 2)
      {
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        v237 = 0u;
        v238 = 0u;
        v235 = 0u;
        v236 = 0u;
        *(_OWORD *)v234 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"total number of LMs is ", 23);
        v100 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)", but the number of interpolation weights is ", 45);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
      }
    }
    v12 = 2;
LABEL_141:
    if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v299.__r_.__value_.__l.__data_);
    v234[0] = (char *)&v300[1] + 8;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
    v234[0] = v300;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
    v234[0] = v301;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v234);
    goto LABEL_144;
  }
  if (quasar::gLogLevel >= 2)
  {
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    v235 = 0u;
    v236 = 0u;
    *(_OWORD *)v234 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v234);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"No reference transcription provided.", 36);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v234);
  }
  v12 = 2;
LABEL_144:
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1AE05004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,_DWORD *a63)
{
  _DWORD *a69;
  void *a70;
  uint64_t v70;
  uint64_t v71;
  int v73;
  void *v74;
  int v75;
  _DWORD *v76;
  int v77;
  _DWORD *v78;
  int v79;
  _DWORD *v80;
  int v81;
  _DWORD *v82;
  int v83;
  _DWORD *v84;
  int v85;
  void *v86;
  void *v87;
  void *v88;

  *(_QWORD *)(v71 - 208) = v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 208));
  if (a63)
  {
    v73 = a63[14] - 1;
    a63[14] = v73;
    if (!v73)
      (*(void (**)(_DWORD *))(*(_QWORD *)a63 + 8))(a63);
  }
  v74 = (void *)STACK[0x440];
  if (STACK[0x440])
  {
    STACK[0x448] = (unint64_t)v74;
    operator delete(v74);
  }
  if (a22 < 0)
    operator delete(a17);
  if (a69)
  {
    v75 = a69[14] - 1;
    a69[14] = v75;
    if (!v75)
      (*(void (**)(_DWORD *))(*(_QWORD *)a69 + 8))(a69);
  }
  STACK[0x3A8] = (unint64_t)&unk_1E5D25800;
  v76 = (_DWORD *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    v77 = v76[14] - 1;
    v76[14] = v77;
    if (!v77)
      (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
  }
  kaldi::quasar::ErrorBlamer::~ErrorBlamer((kaldi::quasar::ErrorBlamer *)&a70);
  STACK[0x388] = (unint64_t)&unk_1E5D25800;
  v78 = (_DWORD *)STACK[0x390];
  if (STACK[0x390])
  {
    v79 = v78[14] - 1;
    v78[14] = v79;
    if (!v79)
      (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D0]);
  STACK[0x3E0] = (unint64_t)&unk_1E5D25800;
  v80 = (_DWORD *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    v81 = v80[14] - 1;
    v80[14] = v81;
    if (!v81)
      (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
  }
  STACK[0x3F0] = (unint64_t)&unk_1E5D25800;
  v82 = (_DWORD *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    v83 = v82[14] - 1;
    v82[14] = v83;
    if (!v83)
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
  }
  kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)&STACK[0x400]);
  STACK[0x418] = (unint64_t)&unk_1E5D25800;
  v84 = (_DWORD *)STACK[0x420];
  if (STACK[0x420])
  {
    v85 = v84[14] - 1;
    v84[14] = v85;
    if (!v85)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
  }
  v86 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v86;
    operator delete(v86);
  }
  v87 = (void *)STACK[0x490];
  if (STACK[0x490])
  {
    STACK[0x498] = (unint64_t)v87;
    operator delete(v87);
  }
  a70 = &STACK[0x4A8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x4C0]);
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)&STACK[0x500]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x530]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x540]);
  v88 = (void *)STACK[0x558];
  if (STACK[0x558])
  {
    STACK[0x560] = (unint64_t)v88;
    operator delete(v88);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x570]);
  a70 = &STACK[0x580];
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)&STACK[0x5F0]);
  a70 = &STACK[0x628];
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  _Unwind_Resume(a1);
}

uint64_t fst::RemoveWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v6);
  while (1)
  {
    if (!v6)
    {
      if ((int)v8 >= v7)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x200000000, 0x200000000);
LABEL_7:
      v2 = v8;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
      break;
    if (!v6)
      goto LABEL_7;
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v2, &v5);
    while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
    {
      v4 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      DWORD2(v4) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 88))(v5, &v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    LODWORD(v4) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v2);
    LODWORD(v5) = 2139095040;
    if (*(float *)&v4 != INFINITY)
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v2, 0.0);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    else
      ++v8;
  }
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x200000000, 0x200000000);
}

void sub_1AE050DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t fst::Closure<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, int a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v15);
  while (1)
  {
    if (!v15)
    {
      if ((int)v18 >= v16)
        goto LABEL_15;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15))
      break;
    if (v15)
    {
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    v6 = v18;
LABEL_8:
    v7 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6);
    *(float *)&v12 = v7;
    v19 = 2139095040;
    if (v7 != INFINITY)
    {
      v12 = 0;
      v13 = v7;
      v14 = v5;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, float, float))(*(_QWORD *)a1 + 208))(a1, v6, &v12, v7, v7);
    }
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    else
      ++v18;
  }
  if (v15)
    (*(void (**)(void))(*(_QWORD *)v15 + 8))();
LABEL_15:
  if (!a2)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, (v8 + 1));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v9);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v9, 0.0);
    if (v5 != -1)
    {
      v15 = 0;
      v16 = 0;
      v17 = v5;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v9, &v15);
    }
  }
  v10 = fst::ClosureProperties(v4, a2 == 0, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
}

void sub_1AE051034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<kaldi::OnlineCacheInput,kaldi::OnlineFeatInputItf>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void fst::AcousticLatticeScale(double a1@<D0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  std::vector<std::vector<double>>::vector(a2, 2uLL);
  v5 = *a2;
  v8 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v5, 2uLL, &v8);
  v6 = *a2 + 24;
  v8 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v6, 2uLL, &v8);
  v7 = *a2;
  **(_QWORD **)*a2 = 0x3FF0000000000000;
  *(double *)(*(_QWORD *)(v7 + 24) + 8) = a1;
}

void sub_1AE05114C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ErrorBlamingDecoder::requiresCacheAppendedToFrontend(quasar::ErrorBlamingDecoder *this)
{
  return 1;
}

void quasar::ErrorBlamingDecoder::~ErrorBlamingDecoder(quasar::ErrorBlamingDecoder *this)
{
  quasar::ErrorBlamingDecoder::~ErrorBlamingDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E5D36FD0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1184);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1168);
  v2 = (void *)*((_QWORD *)this + 136);
  if (v2)
  {
    *((_QWORD *)this + 137) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 1048);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1032);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1016);
  v3 = (void *)*((_QWORD *)this + 124);
  if (v3)
  {
    *((_QWORD *)this + 125) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 121);
  if (v4)
  {
    *((_QWORD *)this + 122) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 944);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 920);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 904);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 888);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  if (*((char *)this + 823) < 0)
    operator delete(*((void **)this + 100));
  if (*((char *)this + 799) < 0)
    operator delete(*((void **)this + 97));
  if (*((char *)this + 775) < 0)
    operator delete(*((void **)this + 94));
  if (*((char *)this + 751) < 0)
    operator delete(*((void **)this + 91));
  if (*((char *)this + 727) < 0)
    operator delete(*((void **)this + 88));
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  if (*((char *)this + 583) < 0)
    operator delete(*((void **)this + 70));
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

uint64_t kaldi::OnlineRecordedInput::OnlineRecordedInput(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = &off_1E5D2A830;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a3;
  kaldi::Matrix<float>::Matrix(a1 + 16, a2);
  return a1;
}

void sub_1AE0511D4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::Tuple>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 102;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 204;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<kaldi::Tuple>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xCC;
  v4 = v2 - 204;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AE05171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::__emplace_unique_key_args<kaldi::StateMapKey,std::piecewise_construct_t const&,std::tuple<kaldi::StateMapKey&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *(_QWORD *)a2 && *((unsigned __int8 *)v11 + 24) == *((unsigned __int8 *)a2 + 8))
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v13 = *((_DWORD *)*a4 + 2);
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = v13;
  *((_DWORD *)v11 + 7) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_39:
    *v21 = v11;
    goto LABEL_40;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AE051998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::find<kaldi::StateMapKey>(_QWORD *a1, uint64_t **a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *(int *)a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *(int *)a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (result[2] == *a2 && *((unsigned __int8 *)result + 24) == *((unsigned __int8 *)a2 + 8))
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3DD50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3DD50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 368) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 368));
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_0,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DDA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DDA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 680, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 508), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1120), a3, *(float *)(a1 + 16));
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ErrorBlamingDecoder::finishInit(void)::$_1,std::allocator<quasar::ErrorBlamingDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void std::deque<std::tuple<int,int,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AE051EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3DE00;
  return result;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3DE00;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3DE58;
  return result;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3DE58;
}

void std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::ErrorBlamingDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE0520F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1AE052154(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v9, 0x20000uLL);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1AE0521F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE052248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1AE0522A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v9, 0x20000uLL);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1AE052344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AE0523CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41990;
  kaldi::TrainingGraphCompiler::TrainingGraphCompiler(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1AE05241C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::TokenTransform(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &unk_1E5D35668;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  quasar::StopWatch::StopWatch((quasar::StopWatch *)(a1 + 32), (clockid_t)a2);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  quasar::StopWatch::reset(a1 + 32);
  return a1;
}

void sub_1AE0524C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  va_list va;

  va_start(va, a2);
  v5 = v4;
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 128) = v7;
    operator delete(v7);
  }
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D35668;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 32);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *quasar::ComposeFstTokenTransform::ComposeFstTokenTransform(_QWORD *a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  std::string *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v7 = (std::string *)quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::TokenTransform((uint64_t)a1, a2);
  v7->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D39580;
  v8 = v7 + 6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  a1[21] = 0;
  a1[22] = 0;
  v10 = a4[1];
  a1[23] = *a4;
  a1[24] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void sub_1AE0525F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform(v1);
  _Unwind_Resume(a1);
}

void quasar::ComposeFstTokenTransform::~ComposeFstTokenTransform(void **this)
{
  *this = &off_1E5D39580;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform((uint64_t)this);
}

{
  quasar::ComposeFstTokenTransform::~ComposeFstTokenTransform(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::ComposeFstTokenTransform::initImpl(quasar::ComposeFstTokenTransform *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 23) + 16))(&v5, *((_QWORD *)this + 23), (char *)this + 144);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 168, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t quasar::ComposeFstTokenTransform::applyImpl(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  _DWORD v8[2];
  void *v9;
  uint64_t v10;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v9);
  v4 = *(_QWORD *)(a1 + 168);
  LOBYTE(v8[0]) = 1;
  v8[1] = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a2, v4, (uint64_t)&v9, (uint64_t)v8);
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v9, (uint64_t)a2, 1, 0, 0, -1, 0, INFINITY);
  v8[0] = 2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a2, v8);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 120))(a2);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 280))(a2, v5);
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, 1, -1, INFINITY, 0.00097656);
  v9 = &unk_1E5D256C0;
  result = v10;
  if (v10)
  {
    v7 = *(_DWORD *)(v10 + 56) - 1;
    *(_DWORD *)(v10 + 56) = v7;
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AE052800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  int v13;

  if (a12)
  {
    v13 = a12[14] - 1;
    a12[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::SpaceApplyDefaultFstTokenTransform::SpaceApplyDefaultFstTokenTransform(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::TokenTransform(a1, a2);
  *result = &off_1E5D3B248;
  return result;
}

void quasar::SpaceApplyDefaultFstTokenTransform::~SpaceApplyDefaultFstTokenTransform(quasar::SpaceApplyDefaultFstTokenTransform *this)
{
  quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform((uint64_t)this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::SpaceApplyDefaultFstTokenTransform::applyImpl(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 160))(a2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if ((*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 40))(a2, v4))
    {
      v11 = (uint64_t)&unk_1E5D213B0;
      v14 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      v6 = *a2;
      v5 = a2[1];
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * (int)v4);
      v13 = v5 + 8;
      v10 = *(_OWORD *)*(_QWORD *)(v12 + 24);
      v7 = (*(uint64_t (**)(_QWORD *))(v6 + 200))(a2);
      v9.n128_u64[0] = 0x2000000020;
      v9.n128_u32[2] = 1065353216;
      v9.n128_u32[3] = v7;
      fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v11, &v9);
      return (*(uint64_t (**)(_QWORD *, uint64_t, __int128 *))(*a2 + 208))(a2, v7, &v10);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, float))(*a2 + 184))(a2, v4, INFINITY);
      v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 200))(a2);
      v11 = 0x2000000020;
      LODWORD(v12) = 1065353216;
      HIDWORD(v12) = v8;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a2 + 208))(a2, v4, &v11);
      return (*(uint64_t (**)(_QWORD *, uint64_t, float))(*a2 + 184))(a2, v8, 0.0);
    }
  }
  return result;
}

_QWORD *quasar::RewriteApplyCapitalizeFstTokenTransform::RewriteApplyCapitalizeFstTokenTransform(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::TokenTransform(a1, a2);
  *result = &off_1E5D3B658;
  return result;
}

void quasar::RewriteApplyCapitalizeFstTokenTransform::~RewriteApplyCapitalizeFstTokenTransform(quasar::RewriteApplyCapitalizeFstTokenTransform *this)
{
  quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform((uint64_t)this);
  JUMPOUT(0x1AF44D190);
}

void quasar::RewriteApplyCapitalizeFstTokenTransform::applyImpl(uint64_t a1, uint64_t a2)
{
  int v3;
  void *__p;
  int v5;
  unsigned __int8 v6;

  quasar::LabelTransformer::linearFst2Str(a2, 0, &__p);
  quasar::InverseTextNormalizer::capitalizeFirstLetter((uint64_t)&__p);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = v5;
  quasar::LabelTransformer::str2LinearFst((uint64_t *)&__p, a2, v3);
  if ((char)v6 < 0)
    operator delete(__p);
}

void sub_1AE052AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RewriteApplyDefaultFstTokenTransform::RewriteApplyDefaultFstTokenTransform(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t result;

  result = quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::TokenTransform(a1, a2);
  *(_QWORD *)result = &off_1E5D3B3E8;
  *(_BYTE *)(result + 144) = a3;
  return result;
}

void quasar::RewriteApplyDefaultFstTokenTransform::~RewriteApplyDefaultFstTokenTransform(quasar::RewriteApplyDefaultFstTokenTransform *this)
{
  quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~TokenTransform((uint64_t)this);
  JUMPOUT(0x1AF44D190);
}

void quasar::RewriteApplyDefaultFstTokenTransform::applyImpl(uint64_t a1, uint64_t a2)
{
  quasar::QsrText *v3;
  uint64_t v4;
  int v5;
  void *__p;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;

  if (!*(_BYTE *)(a1 + 144))
  {
    v3 = (quasar::QsrText *)quasar::LabelTransformer::linearFst2Str(a2, 0, v9);
    __p = 0;
    v7 = 0;
    v8 = 0;
    v4 = quasar::QsrText::SingletonInstance(v3);
    quasar::QsrText::decodeQsrText(v4, (uint64_t)v9, (uint64_t)&__p);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = v7;
    quasar::LabelTransformer::str2LinearFst((uint64_t *)&__p, a2, v5);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_1AE052BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::TokenTransform<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::init(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

std::string *quasar::trim_right_copy@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v5;
  char *v6;
  int v7;
  std::string::size_type v8;
  char v10;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v5 = __str;
  else
    v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  v6 = (char *)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v7 = v6[size--];
    if (v7 != 32)
    {
      v8 = size + 1;
      return std::string::basic_string(a2, __str, 0, v8, (std::allocator<char> *)&v10);
    }
  }
  v8 = 0;
  return std::string::basic_string(a2, __str, 0, v8, (std::allocator<char> *)&v10);
}

uint64_t quasar::Hammer::Hammer(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, int a5, char a6, char a7, double a8)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 v23;
  const std::string::value_type *v24;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  std::string __str;
  uint64_t v31;
  std::string *v32;
  unint64_t v33;

  *(_QWORD *)a1 = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 8) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  v14 = (uint64_t *)(a1 + 40);
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 28) = a7;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v17 = 0;
    while (1)
    {
      if (*(char *)(v15 + 23) < 0)
      {
        if (*(_QWORD *)(v15 + 8))
        {
LABEL_10:
          if ((unint64_t)v17 >= v33)
          {
            v17 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v31, (const quasar::Token *)v15);
          }
          else
          {
            quasar::Token::Token(v17, (const quasar::Token *)v15);
            v17 = (std::string *)((char *)v17 + 224);
          }
          v32 = v17;
        }
      }
      else if (*(_BYTE *)(v15 + 23))
      {
        goto LABEL_10;
      }
      v15 += 224;
      if (v15 == v16)
      {
        v18 = v31;
        goto LABEL_17;
      }
    }
  }
  v18 = 0;
  v17 = 0;
LABEL_17:
  if (v14 != &v31)
  {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 40, v18, (uint64_t)v17, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v17 - v18) >> 5));
    v18 = v31;
    v17 = v32;
  }
  *(double *)(a1 + 32) = a8;
  v19 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v17 - v18) >> 5);
  if (v19)
  {
    if (v19 == 1)
    {
      if (*(char *)(v18 + 23) < 0)
      {
        if (!*(_QWORD *)(v18 + 8))
          goto LABEL_54;
      }
      else if (!*(_BYTE *)(v18 + 23))
      {
        goto LABEL_54;
      }
    }
    if (v17 != (std::string *)v18)
    {
      v20 = 0;
      v21 = 1;
      do
      {
        v22 = (__int128 *)(v18 + v20);
        if (*(char *)(v18 + v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
          v18 = v31;
        }
        else
        {
          v23 = *v22;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
        }
        v24 = " ";
        if (*(_BYTE *)(v18 + v20 + 44) || (v24 = "\x1F", v21 != 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v32 - v18) >> 5)))
          std::string::append(&__str, v24);
        if (*(_BYTE *)(v31 + v20 + 45))
        {
          std::operator+<char>();
        }
        else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          __p = __str;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)(a1 + 64), (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v18 = v31;
        v20 += 224;
      }
      while (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v32 - v31) >> 5) > v21++);
    }
    if ((a6 & 1) != 0)
    {
      quasar::trim_right_copy((std::string *)(a1 + 64), &__str);
      std::string::operator=((std::string *)(a1 + 64), &__str);
      quasar::trim_right_copy((std::string *)(*(_QWORD *)(a1 + 48) - 224), &__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = __p;
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 48) - 224), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
LABEL_54:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  return a1;
}

void sub_1AE052FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  void **v24;

  if (a21 < 0)
    operator delete(__p);
  __p = &a22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::Hammer::HammerSausage::~HammerSausage(v24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void quasar::Hammer::HammerSausage::~HammerSausage(void **this)
{
  void **v2;

  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this + 1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t quasar::HammerSeq::HammerSeq(uint64_t a1, uint64_t *a2, _QWORD **a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v9;

  v9 = quasar::Hammer::Hammer(a1, a2, *a3, 1, 1, a6, a7, 1.0);
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  v9 += 88;
  *(_QWORD *)(v9 + 16) = 0;
  std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>((char *)v9, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1AE053108(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Hammer::~Hammer(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::HammerSeq::HammerSeq(uint64_t a1, const std::string *a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9;

  v9 = quasar::Hammer::Hammer(a1, a2, *a3, 1, 1, 1.0, 0, a7);
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  v9 += 88;
  *(_QWORD *)(v9 + 16) = 0;
  std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>((char *)v9, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1AE053170(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Hammer::~Hammer(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::Hammer::Hammer(uint64_t a1, const std::string *a2, _QWORD *a3, int a4, int a5, double a6, uint64_t a7, char a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v10 = a3[1];
  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 28) = a8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  std::string::operator=((std::string *)(a1 + 64), a2);
  *(double *)(a1 + 32) = a6;
  return a1;
}

{
  return quasar::Hammer::Hammer(a1, a2, a3, a4, a5, a6, 0, a8);
}

void sub_1AE053208(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  quasar::Hammer::HammerSausage::~HammerSausage(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::HammerSeqLat::HammerSeqLat(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v21[4];
  _BYTE v22[56];
  uint64_t v23;
  void **v24;

  v11 = (_QWORD *)quasar::HammerSeq::HammerSeq(a1, *(uint64_t **)a2, a3, a4, a5, a6, a7);
  v11[14] = 0;
  v11[15] = 0;
  v14 = v11 + 14;
  v11[16] = 0;
  v15 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      quasar::HammerSeq::HammerSeq((uint64_t)v21, &v15[v16], a3, v12, v13, a6, 0);
      v18 = *(_QWORD *)(a1 + 120);
      if (v18 >= *(_QWORD *)(a1 + 128))
      {
        v19 = std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(v14, (uint64_t)v22);
      }
      else
      {
        std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>(a1 + 128, *(_QWORD **)(a1 + 120), (uint64_t)v22);
        v19 = v18 + 56;
        *(_QWORD *)(a1 + 120) = v18 + 56;
      }
      *(_QWORD *)(a1 + 120) = v19;
      v24 = (void **)&v23;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v24);
      quasar::Hammer::~Hammer(v21);
      ++v17;
      v15 = *(uint64_t **)a2;
      v16 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v17);
  }
  return a1;
}

void sub_1AE053344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  quasar::HammerSeq::~HammerSeq((void **)va);
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::HammerSeq::~HammerSeq(v2);
  _Unwind_Resume(a1);
}

void quasar::Hammer::retrieveConfidence(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = a2[1];
    if (*a2 != v5 && *(_DWORD *)(v2 + 28) == *(_DWORD *)(*a2 + 28) && *(_DWORD *)(v3 - 192) == *(_DWORD *)(v5 - 192))
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *a2;
        v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 5);
        if (v11 <= v9 || *(_DWORD *)(v2 + 224 * v7 + 28) != *(_DWORD *)(v10 + 224 * v9 + 28))
          break;
        v12 = *(_DWORD *)(v2 + 224 * v7 + 32);
        v13 = *(_DWORD *)(v10 + 224 * v9 + 32);
        if (v12 == v13)
        {
          v14 = v2 + 224 * v7;
          v15 = v10 + 224 * v9;
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v14 + 40);
          *(_OWORD *)(v15 + 204) = *(_OWORD *)(v14 + 204);
          ++v9;
        }
        else if (v12 > v13)
        {
          v16 = v9 + 1;
          if (v11 > v9 + 1)
          {
            v17 = 0;
            v18 = (int *)(v10 + 224 * v16 + 32);
            v19 = 2;
            while (1)
            {
              v20 = *v18;
              v18 += 56;
              if (v12 == v20)
                break;
              ++v17;
              ++v19;
              if (v11 <= v16 + v17)
                goto LABEL_20;
            }
            v28 = v2 + 224 * v7;
            v29 = *(_DWORD *)(v28 + 40);
            v32 = *(float32x4_t *)(v28 + 204);
            v30 = 224 * v9;
            v9 += v17 + 2;
            do
            {
              v31 = *a2 + v30;
              *(_DWORD *)(v31 + 40) = v29;
              *(float32x4_t *)(v31 + 204) = v32;
              v30 += 224;
              --v19;
            }
            while (v19);
          }
        }
        else
        {
          v21 = 0;
          v22 = v2 + 224 * v7;
          v23 = *(float *)(v22 + 40);
          v32 = *(float32x4_t *)(v22 + 204);
          v24 = v8;
          v25 = 224 * v8 + 428;
          while (1)
          {
            v8 = v24 + v21;
            if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v2) >> 5) <= (unint64_t)(v24 + v21 + 1))
              break;
            v23 = v23 + *(float *)(v2 + v25 - 164);
            quasar::Token::DecodingSignals::operator+=(&v32, (float32x4_t *)(v2 + v25));
            v2 = *a1;
            v26 = *(_DWORD *)(*a1 + v25 - 172);
            ++v21;
            v25 += 224;
            if (v26 == *(_DWORD *)(*a2 + 224 * v9 + 32))
            {
              v27 = *a2 + 224 * v9;
              *(float *)(v27 + 40) = v23 / (float)(v21 + 1);
              *(float32x4_t *)(v27 + 204) = v32;
              ++v9;
              v8 = v24 + v21;
              break;
            }
          }
        }
LABEL_20:
        v7 = ++v8;
        v2 = *a1;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) > (unint64_t)v8);
    }
  }
}

void quasar::Hammer::stringToFst(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int v10;
  float v11;
  char v12;
  char v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD v18[17];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::locale v27;

  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  if (a2 == 2)
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F80;
    v8->__shared_owners_ = 0;
    v10 = 3;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    if (a2 != 1)
      goto LABEL_6;
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F80;
    v8->__shared_owners_ = 0;
    v10 = 2;
  }
  LODWORD(v8[1].__vftable) = v10;
  v9 = v8 + 1;
  v8[1].__shared_owners_ = 0;
  LODWORD(v8[1].__shared_weak_owners_) = -1;
  BYTE4(v8[1].__shared_weak_owners_) = 0;
  v25 = v8 + 1;
  v26 = v8;
LABEL_6:
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a3);
  v11 = a4;
  v12 = fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v9, a1, (uint64_t)a3, v11);
  if (quasar::gLogLevel < 4)
    v13 = 1;
  else
    v13 = v12;
  if ((v13 & 1) == 0)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unable to parse input string.", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v27, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v18);
  }
  if ((a2 - 1) <= 1)
  {
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols((uint64_t)a3, 0);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols((uint64_t)a3, 0);
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AE0537FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 120);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 104);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(_DWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;
  float v11;

  v11 = a4;
  __p = 0;
  v9 = 0;
  v10 = 0;
  v6 = fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertStringToLabels(a1, a2, (char **)&__p);
  if ((v6 & 1) != 0)
    fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compile((uint64_t)a1, &__p, a3, &v11);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1AE053904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *quasar::vec2str@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  size_t v9;
  size_t v10;
  void **v11;
  const void *v12;
  void **v13;
  std::string::size_type v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  std::string::basic_string[abi:ne180100]<0>(a2, "");
  v4 = *a1;
  if (a1[1] - *a1 == 24)
  {
    v5 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (const void **)(v4 + v6);
      v9 = *(unsigned __int8 *)(v4 + v6 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = v9;
      else
        v10 = (size_t)v8[1];
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 1);
      if ((v21 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if (v10)
      {
        if (*((char *)v8 + 23) >= 0)
          v12 = v8;
        else
          v12 = *v8;
        memmove(v11, v12, v10);
      }
      *(_WORD *)((char *)v11 + v10) = 32;
      if ((v21 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v14 = v21;
      else
        v14 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v13, v14);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      ++v7;
      v4 = *a1;
      v5 = -1 - 0x5555555555555555 * ((a1[1] - *a1) >> 3);
      v6 += 24;
    }
    while (v5 > v7);
  }
  v15 = v4 + 24 * v5;
  v16 = *(char *)(v15 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)v15;
  else
    v17 = *(const std::string::value_type **)v15;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v15 + 23);
  else
    v18 = *(_QWORD *)(v15 + 8);
  return std::string::append(a2, v17, v18);
}

void sub_1AE053A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::stack2str@<X0>(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  for (result = (uint64_t)std::string::basic_string[abi:ne180100]<0>(a2, "");
        ;
        result = std::deque<char>::__maybe_remove_back_spare[abi:ne180100](a1, 1))
  {
    v5 = a1[5];
    if (!v5)
      break;
    std::string::push_back(a2, *(_BYTE *)(*(_QWORD *)(a1[1] + (((unint64_t)(v5 + a1[4] - 1) >> 9) & 0x7FFFFFFFFFFFF8))+ ((v5 + a1[4] - 1) & 0xFFF)));
    --a1[5];
  }
  return result;
}

void sub_1AE053B38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::Align::run(quasar::Align *this)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *__p;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;

  v3 = (char *)this + 80;
  v2 = *((_QWORD *)this + 10);
  *((_DWORD *)this + 32) = 0;
  v4 = (uint64_t *)((char *)this + 32);
  std::vector<quasar::Token>::resize((uint64_t *)this + 4, 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 11) - v2) >> 3));
  if (*((_QWORD *)v3 - 3) != *((_QWORD *)v3 - 2) && *((_QWORD *)this + 10) != *((_QWORD *)this + 11))
  {
    quasar::Align::initDpTables(this);
    quasar::Align::dpEditDistance((uint64_t)this);
    quasar::Align::printSolution(this);
    if (*(_BYTE *)this)
    {
      v53 = 0;
      quasar::Align::MakeMonotonic((uint64_t *)this + 1, (_BYTE *)&v53 + 1, &v53);
      if ((_BYTE)v53 && quasar::gLogLevel >= 4)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Pre-alignment tokens not monotonic.", 35);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
      }
      if (!quasar::Align::applyAlignment((uint64_t)this + 184, (uint64_t *)this + 1, v4, *((_DWORD *)this + 1)))
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        __p = 0;
        v31 = 0;
        v32 = 0;
        kaldi::JoinVectorToString<quasar::Token>((uint64_t *)this + 1, ",", (uint64_t)&v33);
        kaldi::JoinVectorToString<quasar::Token>(v4, ",", (uint64_t)&__p);
        if (quasar::gLogLevel >= 1)
        {
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v36 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
          v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Aligner failed. There is a BUG. FIX THIS!!!", 43);
          v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" alignment=", 11);
          v7 = *((char *)this + 207);
          if (v7 >= 0)
            v8 = (char *)this + 184;
          else
            v8 = (char *)*((_QWORD *)this + 23);
          if (v7 >= 0)
            v9 = *((unsigned __int8 *)this + 207);
          else
            v9 = *((_QWORD *)this + 24);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" src=[", 6);
          if (v35 >= 0)
            v12 = &v33;
          else
            v12 = v33;
          if (v35 >= 0)
            v13 = HIBYTE(v35);
          else
            v13 = v34;
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] dest=[", 8);
          if (v32 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v32 >= 0)
            v17 = HIBYTE(v32);
          else
            v17 = v31;
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"]", 1);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v36);
        }
        quasar::Align::splitTime(0, -1227133513 * ((*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5) - 1, *(_DWORD *)(*((_QWORD *)this + 1) + 28), *(_DWORD *)(*((_QWORD *)this + 2) - 192), v4);
        v19 = *((_QWORD *)this + 4);
        v20 = *((_QWORD *)this + 5);
        while (v19 != v20)
        {
          *(_DWORD *)(v19 + 40) = 0;
          v19 += 224;
        }
        if (SHIBYTE(v32) < 0)
          operator delete(__p);
        if (SHIBYTE(v35) < 0)
          operator delete(v33);
      }
      quasar::Align::RestoreSilence((_QWORD *)this + 1, v4);
      for (i = *((_QWORD *)this + 4); i != *((_QWORD *)this + 5); i += 224)
      {
        if (*(float *)(i + 40) != 0.0)
          goto LABEL_40;
      }
      quasar::Hammer::retrieveConfidence((uint64_t *)this + 1, v4);
    }
LABEL_40:
    v22 = *((_QWORD *)this + 4);
    if (*((_QWORD *)this + 5) != v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = *((_QWORD *)this + 10);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 11) - v26) >> 3) <= v25)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        std::string::operator=((std::string *)(v22 + v24), (const std::string *)(v26 + v23));
        *(_BYTE *)(v22 + v24 + 45) = 0;
        v27 = *((_QWORD *)this + 4);
        v28 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 5) - v27) >> 5);
        v29 = v25 + 1;
        if (*((_QWORD *)this + 14) == v28 - 1)
        {
          if (v29 == v28)
            *(_BYTE *)(v22 + v24 + 44) = 0;
          else
            *(_BYTE *)(v22 + v24 + 44) = (*(_QWORD *)(*((_QWORD *)this + 13) + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1;
        }
        else
        {
          *(_BYTE *)(v22 + v24 + 44) = v29 != v28;
        }
        v24 += 224;
        v23 += 24;
        ++v25;
        v22 = v27;
      }
      while (v28 > v29);
    }
  }
}

void sub_1AE053F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a21);
  _Unwind_Resume(a1);
}

uint64_t quasar::Align::Align(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  std::vector<std::wstring>::pointer begin;
  unint64_t v10;
  std::vector<std::wstring>::pointer v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  void *__p[2];
  char v20;
  std::vector<std::wstring> v21;
  std::vector<std::wstring> v22;
  std::vector<std::wstring> *v23;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(a1 + 8), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(_OWORD *)(a1 + 32) = 0u;
  v18 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  v7 = (__int128 *)*a2;
  v6 = (__int128 *)a2[1];
  if ((__int128 *)*a2 != v6)
  {
    v8 = 0;
    do
    {
      if (v8 >= *(_QWORD *)(a1 + 72))
      {
        v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v18, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v18, v7);
        v8 += 24;
      }
      *(_QWORD *)(a1 + 64) = v8;
      v7 += 14;
    }
    while (v7 != v6);
  }
  memset(&v22, 0, sizeof(v22));
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::splitStringSimple(a3, (uint64_t *)__p, (uint64_t *)&v21);
  std::vector<std::string>::__vdeallocate(&v22);
  v22 = v21;
  memset(&v21, 0, sizeof(v21));
  v23 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  begin = v22.__begin_;
  if (v22.__end_ != v22.__begin_)
  {
    v10 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\x1F");
      quasar::splitStringSimple((uint64_t)&begin[v10], (uint64_t *)__p, (uint64_t *)&v21);
      if (v20 < 0)
        operator delete(__p[0]);
      v11 = v21.__begin_;
      ++v10;
      if (v21.__end_ != v21.__begin_)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = (__int128 *)&v11[v12];
          v15 = *(_QWORD *)(a1 + 88);
          if (v15 >= *(_QWORD *)(a1 + 96))
          {
            v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 80), v14);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 80, v14);
            v16 = v15 + 24;
          }
          *(_QWORD *)(a1 + 88) = v16;
          if (++v13 == 0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_ - (char *)v21.__begin_) >> 3))
          {
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_ - (char *)v22.__begin_) >> 3) != v10)
            {
              LOBYTE(__p[0]) = 1;
              std::vector<BOOL>::push_back(a1 + 104, __p);
            }
          }
          else
          {
            LOBYTE(__p[0]) = 0;
            std::vector<BOOL>::push_back(a1 + 104, __p);
          }
          v11 = v21.__begin_;
          ++v12;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_ - (char *)v21.__begin_) >> 3) > v13);
      }
      __p[0] = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      begin = v22.__begin_;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_ - (char *)v22.__begin_) >> 3) > v10);
  }
  quasar::Align::run((quasar::Align *)a1);
  v21.__begin_ = (std::vector<std::wstring>::pointer)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return a1;
}

void sub_1AE05427C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void **v25;

  a20 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (*(char *)(v24 + 207) < 0)
    operator delete(*(void **)(v24 + 184));
  a24 = a12 + 128;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = a10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*v25)
    operator delete(*v25);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = a12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = a11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::Align::Align(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(a1 + 8), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(a1 + 32), *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  v7 = (__int128 *)*a2;
  v8 = (__int128 *)a2[1];
  if ((__int128 *)*a2 != v8)
  {
    v9 = 0;
    do
    {
      if (v9 >= *(_QWORD *)(a1 + 72))
      {
        v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 56), v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 56, v7);
        v9 += 24;
      }
      *(_QWORD *)(a1 + 64) = v9;
      v7 += 14;
    }
    while (v7 != v8);
  }
  v10 = (__int128 *)*a3;
  v11 = (__int128 *)a3[1];
  if ((__int128 *)*a3 != v11)
  {
    v12 = *(_QWORD *)(a1 + 88);
    do
    {
      if (v12 >= *(_QWORD *)(a1 + 96))
      {
        v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 80), v10);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 80, v10);
        v12 += 24;
      }
      *(_QWORD *)(a1 + 88) = v12;
      v10 += 14;
    }
    while (v10 != v11);
  }
  quasar::Align::run((quasar::Align *)a1);
  return a1;
}

void sub_1AE0544F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (*(char *)(v10 + 207) < 0)
    operator delete(*(void **)(v10 + 184));
  a10 = v11 + 13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v13 = *(void **)(v10 + 104);
  if (v13)
    operator delete(v13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::Align::initDpTables(quasar::Align *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int *v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  char *v45;
  char *v46;
  void *__p;
  char *v48;
  char *v49;

  v2 = 0;
  v42 = (uint64_t *)((char *)this + 160);
  v43 = (uint64_t *)((char *)this + 136);
  do
  {
    v3 = 0;
    __p = 0;
    v48 = 0;
    v49 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      if (v3)
        v4 = 0;
      else
        v4 = v2;
      if (v3)
        v5 = 1;
      else
        v5 = 2;
      if (v2)
        v6 = v4;
      else
        v6 = v3;
      if (v2)
        v7 = v5;
      else
        v7 = 0;
      v8 = v48;
      if (v48 >= v49)
      {
        v10 = (char *)__p;
        v11 = (v48 - (_BYTE *)__p) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          goto LABEL_64;
        v13 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v14);
          v10 = (char *)__p;
          v8 = v48;
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v6;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        __p = v16;
        v48 = v9;
        v49 = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v48 = v6;
        v9 = v8 + 4;
      }
      v48 = v9;
      v18 = v45;
      if (v45 >= v46)
      {
        v20 = (char *)v44;
        v21 = (v45 - (_BYTE *)v44) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
LABEL_64:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = v46 - (_BYTE *)v44;
        if ((v46 - (_BYTE *)v44) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v24);
          v20 = (char *)v44;
          v18 = v45;
        }
        else
        {
          v25 = 0;
        }
        v26 = (int *)&v25[4 * v21];
        *v26 = v7;
        v19 = (char *)(v26 + 1);
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *--v26 = v27;
        }
        v44 = v26;
        v45 = v19;
        v46 = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v45 = v7;
        v19 = v18 + 4;
      }
      v45 = v19;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3) > v3++;
    }
    while (v28);
    v29 = *((_QWORD *)this + 18);
    if (v29 >= *((_QWORD *)this + 19))
    {
      v30 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v43, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v43, (uint64_t)&__p);
      v30 = v29 + 24;
    }
    *((_QWORD *)this + 18) = v30;
    v31 = *((_QWORD *)this + 21);
    if (v31 >= *((_QWORD *)this + 22))
    {
      v32 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v42, (uint64_t)&v44);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v42, (uint64_t)&v44);
      v32 = v31 + 24;
    }
    *((_QWORD *)this + 21) = v32;
    if (v44)
    {
      v45 = (char *)v44;
      operator delete(v44);
    }
    if (__p)
    {
      v48 = (char *)__p;
      operator delete(__p);
    }
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
    v28 = v33 > v2++;
  }
  while (v28);
  v34 = 0;
  v35 = (uint64_t *)*v43;
  v36 = v33 + 1;
  v37 = (_DWORD **)*v43;
  do
  {
    v38 = *v37;
    v37 += 3;
    *v38 = v34++;
  }
  while (v36 != v34);
  v39 = 0;
  v40 = *v35;
  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3) + 1;
  do
  {
    *(_DWORD *)(v40 + 4 * v39) = v39;
    ++v39;
  }
  while (v41 != v39);
}

void sub_1AE054888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Align::dpEditDistance(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v27 = *(_QWORD *)(this + 80);
  v1 = *(_QWORD *)(this + 88) - v27;
  if (v1)
  {
    v2 = this;
    v3 = v1 / 24;
    v4 = *(_QWORD *)(this + 56);
    v29 = *(_QWORD *)(this + 64);
    if ((unint64_t)((v29 - v4) / 24) <= 1)
      v5 = 1;
    else
      v5 = (v29 - v4) / 24;
    if (v3 <= 1)
      v3 = 1;
    v28 = v3;
    v6 = 1;
    while (v29 == v4)
    {
LABEL_39:
      v25 = v6++ == v28;
      if (v25)
        return this;
    }
    v7 = *(_QWORD **)(v2 + 136);
    v8 = v6 - 1;
    v9 = (unsigned __int8 **)(v27 + 24 * (v6 - 1));
    v10 = *v7;
    v11 = 1;
    v30 = v7;
    while (1)
    {
      v12 = *(_DWORD *)(v10 + 4 * v6);
      v13 = *(_DWORD *)(v10 + 4 * v8);
      v10 = v7[3 * v11];
      v14 = *(_DWORD *)(v10 + 4 * v8);
      v15 = v4 + 24 * v11;
      v16 = *(unsigned __int8 *)(v15 - 1);
      v17 = *(_QWORD *)(v15 - 16);
      if ((v16 & 0x80u) == 0)
        v18 = (unsigned __int8 *)*(unsigned __int8 *)(v15 - 1);
      else
        v18 = *(unsigned __int8 **)(v15 - 16);
      v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      v20 = (char)v19;
      if ((char)v19 < 0)
        v19 = v9[1];
      if (v18 == v19)
      {
        v21 = (const void **)(v15 - 24);
        if (v20 >= 0)
          v22 = (unsigned __int8 *)(v27 + 24 * (v6 - 1));
        else
          v22 = *v9;
        if ((v16 & 0x80) != 0)
        {
          this = memcmp(*v21, v22, v17);
          v8 = v6 - 1;
          v7 = v30;
          if (!(_DWORD)this)
            goto LABEL_26;
        }
        else
        {
          if (!(_DWORD)v16)
            goto LABEL_26;
          while (*(unsigned __int8 *)v21 == *v22)
          {
            v21 = (const void **)((char *)v21 + 1);
            ++v22;
            if (!--v16)
              goto LABEL_26;
          }
        }
      }
      ++v13;
LABEL_26:
      v23 = v12 + 1;
      if (v14 + 1 >= v13)
        v24 = v13;
      else
        v24 = v14 + 1;
      if (v12 >= v24)
      {
        *(_DWORD *)(v10 + 4 * v6) = v24;
        if (v23 != v24)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v2 + 160) + 24 * v11);
          *(_DWORD *)(v26 + 4 * v6) = v13 <= v14 + 1;
          goto LABEL_33;
        }
      }
      else
      {
        *(_DWORD *)(v10 + 4 * v6) = v23;
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 160) + 24 * v11) + 4 * v6) = 2;
LABEL_33:
      v25 = v11++ == v5;
      if (v25)
        goto LABEL_39;
    }
  }
  return this;
}

void quasar::Align::printSolution(quasar::Align *this)
{
  std::vector<std::string>::pointer end;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  std::vector<std::string>::pointer v15;
  __int128 v16;
  int v17;
  std::vector<std::string>::pointer v18;
  __int128 v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  void **v23;
  _QWORD v24[6];
  char v25;
  _BYTE __v[48];
  std::string __p;
  std::vector<std::string> v28;

  memset(&v28, 0, sizeof(v28));
  quasar::vec2str((uint64_t *)this + 10, &__p);
  end = v28.__end_;
  if (v28.__end_ >= v28.__end_cap_.__value_)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3);
    v5 = v4 + 1;
    if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) > v5)
      v5 = 0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) >= 0x555555555555555)
      v6 = 0xAAAAAAAAAAAAAAALL;
    else
      v6 = v5;
    *(_QWORD *)&__v[32] = &v28.__end_cap_;
    if (v6)
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v28.__end_cap_, v6);
    else
      v7 = 0;
    v8 = &v7[24 * v4];
    *(_QWORD *)__v = v7;
    *(_QWORD *)&__v[8] = v8;
    *(_QWORD *)&__v[24] = &v7[24 * v6];
    v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v8 = v9;
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)&__v[16] = v8 + 24;
    std::vector<std::string>::__swap_out_circular_buffer(&v28, (std::__split_buffer<std::string> *)__v);
    v10 = v28.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
    v28.__end_ = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v3 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v28.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v3;
    v28.__end_ = end + 1;
  }
  memset(__v, 0, sizeof(__v));
  LODWORD(v11) = -1431655765 * ((*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  LODWORD(v12) = -1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
  v13 = v11 != 0;
  v14 = v12 != 0;
  if (v11 | v12)
  {
    while (1)
    {
      v15 = v28.__end_ - 1;
      if (SHIBYTE(v28.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v15->__r_.__value_.__l.__data_, v28.__end_[-1].__r_.__value_.__l.__size_);
      }
      else
      {
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28.__end_[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      }
      v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 24 * (int)v11) + 4 * (int)v12);
      if (v17 == 2)
        break;
      if (!v17)
      {
        v25 = 73;
        std::deque<char>::push_back(__v, &v25);
        LODWORD(v12) = v12 - 1;
LABEL_22:
        v18 = v28.__end_;
        if (v28.__end_ >= v28.__end_cap_.__value_)
        {
          v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v28.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v28.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          v20 = v18 + 1;
        }
        v28.__end_ = v20;
        ++*((_DWORD *)this + 32);
        goto LABEL_32;
      }
      v21 = v11;
      v22 = (int)v12;
      v11 = (int)v11 - 1;
      v12 = (int)v12 - 1;
      if (v13
        && v14
        && *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24 * v21) + 4 * v22) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24 * v11)
                                                                                                + 4 * v12))
      {
        v25 = 83;
        std::deque<char>::push_back(__v, &v25);
        goto LABEL_22;
      }
      v25 = 67;
      std::deque<char>::push_back(__v, &v25);
LABEL_32:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v13 = v11 != 0;
      v14 = v12 != 0;
      if (!(v11 | v12))
        goto LABEL_37;
    }
    v25 = 68;
    std::deque<char>::push_back(__v, &v25);
    LODWORD(v11) = v11 - 1;
    goto LABEL_22;
  }
LABEL_37:
  std::deque<char>::deque((uint64_t)v24, __v);
  quasar::stack2str(v24, &__p);
  v23 = (void **)((char *)this + 184);
  if (*((char *)this + 207) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 25) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::deque<char>::~deque[abi:ne180100](v24);
  std::deque<char>::~deque[abi:ne180100](__v);
  *(_QWORD *)__v = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
}

void sub_1AE054E34(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__split_buffer<std::wstring> *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__pa,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a20);
  if (a31 < 0)
    operator delete(__pa);
  __pa = (void *)(v31 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<quasar::Token>(uint64_t *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      quasar::operator<<(v16, v6 + v7);
      ++v8;
      v6 = *a1;
      v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
      if (v8 < v9)
      {
        v10 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v10);
        v6 = *a1;
        v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
      }
      v7 += 224;
    }
    while (v8 < v9);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  v15[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v11;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v18);
}

void sub_1AE055038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::Hammer::hammerMapping(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *DestToks;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  void *v34[2];
  _OWORD v35[2];
  void *v36[2];
  _OWORD v37[2];
  void *v38[2];
  __int128 v39;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *v46[2];
  char v47;
  __int128 *v48[3];
  void *v49[2];
  char v50;
  __int128 v51;
  char v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  double v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void **v64[3];

  v7 = (_QWORD *)*a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      v6 -= 56;
      std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v6);
    }
    while ((_QWORD *)v6 != v7);
  }
  a3[1] = (uint64_t)v7;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 87))
      goto LABEL_5;
LABEL_35:
    if ((unint64_t)v7 >= a3[2])
    {
      v20 = std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(a3, (uint64_t)&v60);
    }
    else
    {
      std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)(a3 + 2), v7, (uint64_t)&v60);
      v20 = (uint64_t)(v7 + 7);
      a3[1] = (uint64_t)(v7 + 7);
    }
    a3[1] = v20;
    v11 = 1;
    goto LABEL_71;
  }
  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_35;
LABEL_5:
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v58);
  quasar::Hammer::stringToFst(a1 + 64, *(_DWORD *)(a1 + 16), v31, *(double *)(a1 + 32));
  v8 = *(_QWORD *)a1;
  LOBYTE(v55) = 1;
  HIDWORD(v55) = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v31, v8, (uint64_t)&v58, (uint64_t)&v55);
  v31[0] = &unk_1E5D256C0;
  v9 = v31[1];
  if (v31[1])
  {
    v10 = *((_DWORD *)v31[1] + 14) - 1;
    *((_DWORD *)v31[1] + 14) = v10;
    if (!v10)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v11 = quasar::FstToStrings((uint64_t)&v58, &v55, *(_DWORD *)(a1 + 16), *(int *)(a1 + 24), *(_BYTE *)(a1 + 28));
  if (!(_DWORD)v11)
  {
    if (quasar::gLogLevel >= 1)
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)__p = 0u;
      v41 = 0u;
      *(_OWORD *)v38 = 0u;
      v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)v36 = 0u;
      *(_OWORD *)v34 = 0u;
      memset(v35, 0, sizeof(v35));
      v32 = 0u;
      v33 = 0u;
      *(_OWORD *)v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Hammer rewrite failed.", 22);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v31);
    }
    goto LABEL_68;
  }
  v12 = v55;
  if (v55 == v56)
    goto LABEL_68;
  v13 = a1 + 40;
  while (1)
  {
    std::string::operator=((std::string *)((char *)&v62 + 8), (const std::string *)v12);
    if (SHIBYTE(v63) < 0)
      break;
    v14 = (char *)&v62 + 8;
    if (HIBYTE(v63) != 1)
    {
      if (!HIBYTE(v63))
        goto LABEL_41;
      goto LABEL_20;
    }
LABEL_19:
    if (*v14 == 32)
    {
      std::vector<quasar::Token>::resize((uint64_t *)&v61, 1uLL);
      std::string::basic_string[abi:ne180100]<0>(&v53, " ");
      v24 = *(_DWORD *)(*(_QWORD *)v13 + 28);
      v25 = *(_DWORD *)(*(_QWORD *)v13 + 32);
      v26 = *(_DWORD *)(*(_QWORD *)v13 + 36);
      std::string::basic_string[abi:ne180100]<0>(&v51, "");
      std::string::basic_string[abi:ne180100]<0>(v49, "");
      memset(v48, 0, sizeof(v48));
      std::string::basic_string[abi:ne180100]<0>(v46, "");
      quasar::Token::Token((std::string *)v31, &v53, v24, v25, v26, 0, 0, &v51, 0.0, (__int128 *)v49, v48, 0, (__int128 *)v46, 0, 0);
      quasar::Token::operator=(v61, (__int128 *)v31);
      if (SBYTE7(v41) < 0)
        operator delete(__p[0]);
      if (SBYTE7(v39) < 0)
        operator delete(v38[0]);
      v64[0] = (void **)v37 + 1;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SBYTE7(v37[0]) < 0)
        operator delete(v36[0]);
      v64[0] = (void **)v35 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SBYTE7(v35[0]) < 0)
        operator delete(v34[0]);
      if (SBYTE7(v32) < 0)
        operator delete(v31[0]);
      if (v47 < 0)
        operator delete(v46[0]);
      v46[0] = v48;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (v50 < 0)
        operator delete(v49[0]);
      if (v52 < 0)
        operator delete((void *)v51);
      if (v54 < 0)
        operator delete((void *)v53);
      v23 = a3[1];
      if (v23 < a3[2])
        goto LABEL_65;
      goto LABEL_66;
    }
LABEL_20:
    if (a2)
    {
      quasar::splitStringToTokens((uint64_t)&v62 + 8, (uint64_t *)&v61);
      v15 = a3[1];
      if (v15 >= a3[2])
      {
        v16 = std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(a3, (uint64_t)&v60);
      }
      else
      {
        std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)(a3 + 2), (_QWORD *)a3[1], (uint64_t)&v60);
        v16 = v15 + 56;
        a3[1] = v15 + 56;
      }
      a3[1] = v16;
    }
    else if (*(_BYTE *)(a1 + 20))
    {
      quasar::Align::Align((uint64_t)v31, (uint64_t *)(a1 + 40), (uint64_t)&v62 + 8);
      DestToks = (uint64_t *)quasar::Align::getDestToks((quasar::Align *)v31);
      if (&v61 != (__int128 *)DestToks)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v61, *DestToks, DestToks[1], 0x6DB6DB6DB6DB6DB7 * ((DestToks[1] - *DestToks) >> 5));
      v60 = *(float *)(v12 + 24);
      v18 = a3[1];
      if (v18 >= a3[2])
      {
        v19 = std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(a3, (uint64_t)&v60);
      }
      else
      {
        std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)(a3 + 2), (_QWORD *)a3[1], (uint64_t)&v60);
        v19 = v18 + 56;
        a3[1] = v18 + 56;
      }
      a3[1] = v19;
      quasar::Align::~Align(v31);
    }
    v12 += 32;
    if (v12 == v56)
      goto LABEL_68;
  }
  if ((_QWORD)v63 == 1)
  {
    v14 = (_BYTE *)*((_QWORD *)&v62 + 1);
    goto LABEL_19;
  }
  if ((_QWORD)v63)
    goto LABEL_20;
LABEL_41:
  v21 = *((_QWORD *)&v61 + 1);
  v22 = v61;
  while (v21 != v22)
    quasar::Token::~Token((void **)(v21 - 224));
  *((_QWORD *)&v61 + 1) = v22;
  v23 = a3[1];
  if (v23 < a3[2])
  {
LABEL_65:
    std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)(a3 + 2), (_QWORD *)a3[1], (uint64_t)&v60);
    v27 = v23 + 56;
    a3[1] = v23 + 56;
    goto LABEL_67;
  }
LABEL_66:
  v27 = std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(a3, (uint64_t)&v60);
LABEL_67:
  a3[1] = v27;
LABEL_68:
  v31[0] = &v55;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  v58 = &unk_1E5D256C0;
  v28 = v59;
  if (v59)
  {
    v29 = *(_DWORD *)(v59 + 56) - 1;
    *(_DWORD *)(v59 + 56) = v29;
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
LABEL_71:
  if (SHIBYTE(v63) < 0)
    operator delete(*((void **)&v62 + 1));
  v31[0] = &v61;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  return v11;
}

void sub_1AE0555F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v67;
  int v68;

  *(_QWORD *)(v63 + 8) = v64;
  a15 = v65 - 200;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  *(_QWORD *)(v65 - 176) = &unk_1E5D256C0;
  v67 = *(_DWORD **)(v65 - 168);
  if (v67)
  {
    v68 = v67[14] - 1;
    v67[14] = v68;
    if (!v68)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
  }
  quasar::Hammer::HammerSausage::~HammerSausage((void **)(v65 - 160));
  _Unwind_Resume(a1);
}

uint64_t quasar::Hammer::hammerMappingString(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::string v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;

  std::vector<std::string>::__clear[abi:ne180100](a2);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 87))
      goto LABEL_3;
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(&v67, "");
    v15 = a2[2];
    v16 = a2[1];
    if (v16 >= v15)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
      v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a2) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v19;
      *(_QWORD *)&v47 = a2 + 2;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v21);
      else
        v22 = 0;
      v23 = &v22[24 * v18];
      *(_QWORD *)&v45 = v22;
      *((_QWORD *)&v45 + 1) = v23;
      *((_QWORD *)&v46 + 1) = &v22[24 * v21];
      v24 = v67;
      *((_QWORD *)v23 + 2) = v68;
      *(_OWORD *)v23 = v24;
      v68 = 0;
      v67 = 0uLL;
      *(_QWORD *)&v46 = v23 + 24;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, (std::__split_buffer<std::string> *)&v45);
      v25 = a2[1];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v45);
      v26 = SHIBYTE(v68);
      a2[1] = v25;
      if (v26 < 0)
        operator delete((void *)v67);
    }
    else
    {
      v17 = v67;
      *(_QWORD *)(v16 + 16) = v68;
      *(_OWORD *)v16 = v17;
      a2[1] = v16 + 24;
    }
    return 1;
  }
  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_35;
LABEL_3:
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v65);
  quasar::Hammer::stringToFst(a1 + 64, *(_DWORD *)(a1 + 16), &v45, *(double *)(a1 + 32));
  v4 = *(_QWORD *)a1;
  LOBYTE(v67) = 1;
  DWORD1(v67) = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v45, v4, (uint64_t)&v65, (uint64_t)&v67);
  *(_QWORD *)&v45 = &unk_1E5D256C0;
  v5 = *((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v6 = *(_DWORD *)(*((_QWORD *)&v45 + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v45 + 1) + 56) = v6;
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v67 = 0uLL;
  v68 = 0;
  v7 = quasar::FstToStrings((uint64_t)&v65, (uint64_t *)&v67, *(_DWORD *)(a1 + 16), *(int *)(a1 + 24), *(_BYTE *)(a1 + 28));
  if (!(_DWORD)v7)
  {
    if (quasar::gLogLevel >= 1)
    {
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Hammer rewrite failed.", 22);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v45);
    }
    goto LABEL_76;
  }
  v8 = (__int128 *)v67;
  if ((_QWORD)v67 == *((_QWORD *)&v67 + 1))
    goto LABEL_76;
  while (1)
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v64.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v9;
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v64.__r_.__value_.__l.__size_;
      if (v64.__r_.__value_.__l.__size_ != 1)
      {
        if (!v64.__r_.__value_.__l.__size_)
        {
LABEL_51:
          std::string::basic_string[abi:ne180100]<0>(&v62, "");
          v28 = a2[1];
          v27 = a2[2];
          if (v28 < v27)
          {
LABEL_61:
            v34 = v62;
            *(_QWORD *)(v28 + 16) = v63;
            *(_OWORD *)v28 = v34;
            a2[1] = v28 + 24;
            goto LABEL_74;
          }
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
          v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a2) >> 3);
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0x555555555555555)
            v32 = 0xAAAAAAAAAAAAAAALL;
          else
            v32 = v30;
          *(_QWORD *)&v47 = a2 + 2;
          if (v32)
            goto LABEL_69;
          v37 = 0;
          goto LABEL_72;
        }
        v10 = (std::string *)a2[1];
        if ((unint64_t)v10 < a2[2])
          goto LABEL_28;
        goto LABEL_26;
      }
      v12 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v64.__r_.__value_.__r.__words[2]) != 1)
      {
        if (!*((_BYTE *)&v64.__r_.__value_.__s + 23))
          goto LABEL_51;
        v10 = (std::string *)a2[1];
        if ((unint64_t)v10 < a2[2])
          goto LABEL_25;
        goto LABEL_26;
      }
      v12 = &v64;
    }
    if (v12->__r_.__value_.__s.__data_[0] == 32)
      break;
    v10 = (std::string *)a2[1];
    if ((unint64_t)v10 < a2[2])
    {
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        size = v64.__r_.__value_.__l.__size_;
LABEL_28:
        std::string::__init_copy_ctor_external(v10, v64.__r_.__value_.__l.__data_, size);
      }
      else
      {
LABEL_25:
        v13 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
        v10->__r_.__value_.__r.__words[2] = v64.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
      }
      v14 = (uint64_t)&v10[1];
      a2[1] = (uint64_t)&v10[1];
      goto LABEL_30;
    }
LABEL_26:
    v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v64);
LABEL_30:
    a2[1] = v14;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    v8 += 2;
    if (v8 == *((__int128 **)&v67 + 1))
      goto LABEL_76;
  }
  std::string::basic_string[abi:ne180100]<0>(&v62, " ");
  v28 = a2[1];
  v33 = a2[2];
  if (v28 < v33)
    goto LABEL_61;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
  v35 = v29 + 1;
  if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a2) >> 3);
  if (2 * v36 > v35)
    v35 = 2 * v36;
  if (v36 >= 0x555555555555555)
    v32 = 0xAAAAAAAAAAAAAAALL;
  else
    v32 = v35;
  *(_QWORD *)&v47 = a2 + 2;
  if (v32)
  {
LABEL_69:
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v32);
    goto LABEL_72;
  }
  v37 = 0;
LABEL_72:
  v38 = &v37[24 * v29];
  *(_QWORD *)&v45 = v37;
  *((_QWORD *)&v45 + 1) = v38;
  *((_QWORD *)&v46 + 1) = &v37[24 * v32];
  v39 = v62;
  *((_QWORD *)v38 + 2) = v63;
  *(_OWORD *)v38 = v39;
  v63 = 0;
  v62 = 0uLL;
  *(_QWORD *)&v46 = v38 + 24;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, (std::__split_buffer<std::string> *)&v45);
  v40 = a2[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v45);
  v41 = SHIBYTE(v63);
  a2[1] = v40;
  if (v41 < 0)
    operator delete((void *)v62);
LABEL_74:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
LABEL_76:
  *(_QWORD *)&v45 = &v67;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v65 = &unk_1E5D256C0;
  v42 = v66;
  if (v66)
  {
    v43 = *(_DWORD *)(v66 + 56) - 1;
    *(_DWORD *)(v66 + 56) = v43;
    if (!v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  return v7;
}

void sub_1AE055D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _DWORD *v12;
  int v13;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a9);
  if (*(char *)(v10 - 129) < 0)
    operator delete(*(void **)(v10 - 152));
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  *(_QWORD *)(v10 - 128) = v10 - 88;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 128));
  *(_QWORD *)(v10 - 104) = &unk_1E5D256C0;
  v12 = *(_DWORD **)(v10 - 96);
  if (v12)
  {
    v13 = v12[14] - 1;
    v12[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::HammerSeq::hammerSeqMappingString(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  char v8;
  const std::string *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  int v13;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  std::string::size_type size;
  int v18;
  __int128 *v19;
  char v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::string::size_type v46;
  int v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  void *__p[2];
  uint64_t v61;
  std::string v62;
  _BYTE v63[32];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  std::string::size_type v80;
  void *v81;
  _DWORD *v82;
  __int128 v83;
  uint64_t v84;

  std::vector<std::string>::__clear[abi:ne180100](a2);
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      goto LABEL_3;
LABEL_81:
    std::string::basic_string[abi:ne180100]<0>(&v83, "");
    v43 = a2[2];
    v44 = a2[1];
    if (v44 >= v43)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a2) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a2) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v51;
      *(_QWORD *)&v64 = a2 + 2;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v53);
      else
        v54 = 0;
      v55 = &v54[24 * v50];
      *(_QWORD *)v63 = v54;
      *(_QWORD *)&v63[8] = v55;
      *(_QWORD *)&v63[24] = &v54[24 * v53];
      v56 = v83;
      *((_QWORD *)v55 + 2) = v84;
      *(_OWORD *)v55 = v56;
      v84 = 0;
      v83 = 0uLL;
      *(_QWORD *)&v63[16] = v55 + 24;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, (std::__split_buffer<std::string> *)v63);
      v57 = a2[1];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)v63);
      v58 = SHIBYTE(v84);
      a2[1] = v57;
      if (v58 < 0)
        operator delete((void *)v83);
    }
    else
    {
      v45 = v83;
      *(_QWORD *)(v44 + 16) = v84;
      *(_OWORD *)v44 = v45;
      a2[1] = v44 + 24;
    }
    v20 = 1;
    return v20 & 1;
  }
  if (!*(_BYTE *)(a1 + 87))
    goto LABEL_81;
LABEL_3:
  quasar::Hammer::stringToFst(a1 + 64, *(_DWORD *)(a1 + 16), &v81, *(double *)(a1 + 32));
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v79);
  v4 = *(uint64_t **)(a1 + 88);
  v5 = *(uint64_t **)(a1 + 96);
  if (v4 != v5)
  {
    while (1)
    {
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v62);
      v6 = *v4;
      v63[0] = 1;
      *(_DWORD *)&v63[4] = 0;
      fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v81, v6, (uint64_t)&v62, (uint64_t)v63);
      v83 = 0uLL;
      v84 = 0;
      v7 = quasar::FstToStrings((uint64_t)&v62, (uint64_t *)&v83, *(_DWORD *)(a1 + 16), 1, *(_BYTE *)(a1 + 28));
      v8 = v7;
      if (v7)
        break;
      if (quasar::gLogLevel >= 1)
      {
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v64 = 0u;
        memset(v63, 0, sizeof(v63));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Hammer rewrite failed.", 22);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v63);
      }
LABEL_21:
      *(_QWORD *)v63 = &v83;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D256C0;
      size = v62.__r_.__value_.__l.__size_;
      if (v62.__r_.__value_.__l.__size_)
      {
        v18 = *(_DWORD *)(v62.__r_.__value_.__l.__size_ + 56) - 1;
        *(_DWORD *)(v62.__r_.__value_.__l.__size_ + 56) = v18;
        if (!v18)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      if ((v8 & 1) == 0)
      {
        v20 = 0;
        goto LABEL_88;
      }
      v4 += 2;
      if (v4 == v5)
        goto LABEL_26;
    }
    memset(v63, 0, 24);
    v9 = (const std::string *)v83;
    if ((_QWORD)v83 == *((_QWORD *)&v83 + 1))
      goto LABEL_21;
    while (1)
    {
      std::string::operator=((std::string *)v63, v9);
      quasar::Hammer::stringToFst((uint64_t)v63, *(_DWORD *)(a1 + 16), __p, 1.0);
      v10 = __p[1];
      ++*((_DWORD *)__p[1] + 14);
      v11 = v82;
      if (!v82)
        break;
      v12 = v82[14] - 1;
      v82[14] = v12;
      if (v12)
        break;
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      v82 = v10;
      __p[0] = &unk_1E5D256C0;
      v10 = __p[1];
      if (__p[1])
        goto LABEL_9;
LABEL_12:
      v14 = v62.__r_.__value_.__l.__size_;
      ++*(_DWORD *)(v62.__r_.__value_.__l.__size_ + 56);
      v15 = v80;
      if (v80)
      {
        v16 = *(_DWORD *)(v80 + 56) - 1;
        *(_DWORD *)(v80 + 56) = v16;
        if (!v16)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v15 + 8))(v15);
      }
      v80 = v14;
      v9 = (const std::string *)((char *)v9 + 32);
      if (v9 == *((const std::string **)&v83 + 1))
      {
        if ((v63[23] & 0x80000000) != 0)
          operator delete(*(void **)v63);
        goto LABEL_21;
      }
    }
    v82 = v10;
    __p[0] = &unk_1E5D256C0;
LABEL_9:
    v13 = v10[14] - 1;
    v10[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_12;
  }
LABEL_26:
  v83 = 0uLL;
  v84 = 0;
  if (quasar::FstToStrings((uint64_t)&v79, (uint64_t *)&v83, *(_DWORD *)(a1 + 16), *(int *)(a1 + 24), *(_BYTE *)(a1 + 28)))
  {
    v19 = (__int128 *)v83;
    if ((_QWORD)v83 != *((_QWORD *)&v83 + 1))
    {
      v20 = 0;
      do
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
        }
        else
        {
          v21 = *v19;
          v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v21;
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = v62.__r_.__value_.__l.__size_;
          if (!v62.__r_.__value_.__l.__size_)
            goto LABEL_40;
          if (v62.__r_.__value_.__l.__size_ != 1)
          {
            v22 = (std::string *)a2[1];
            if ((unint64_t)v22 < a2[2])
              goto LABEL_68;
            goto LABEL_57;
          }
          v24 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(v62.__r_.__value_.__r.__words[2]) != 1)
          {
            if (*((_BYTE *)&v62.__r_.__value_.__s + 23))
            {
              v22 = (std::string *)a2[1];
              if ((unint64_t)v22 < a2[2])
                goto LABEL_55;
              goto LABEL_57;
            }
LABEL_40:
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v26 = a2[1];
            v25 = a2[2];
            if (v26 >= v25)
            {
              v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
              v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x555555555555555)
                v30 = 0xAAAAAAAAAAAAAAALL;
              else
                v30 = v28;
              *(_QWORD *)&v64 = a2 + 2;
              if (v30)
                goto LABEL_65;
              v37 = 0;
              goto LABEL_72;
            }
            goto LABEL_52;
          }
          v24 = &v62;
        }
        if (v24->__r_.__value_.__s.__data_[0] != 32)
        {
          v22 = (std::string *)a2[1];
          if ((unint64_t)v22 < a2[2])
          {
            if ((*((_BYTE *)&v62.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_55:
              v33 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
              v22->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v33;
              goto LABEL_69;
            }
            v23 = v62.__r_.__value_.__l.__size_;
LABEL_68:
            std::string::__init_copy_ctor_external(v22, v62.__r_.__value_.__l.__data_, v23);
LABEL_69:
            v34 = (uint64_t)&v22[1];
            a2[1] = (uint64_t)&v22[1];
LABEL_70:
            a2[1] = v34;
            v38 = 1;
            goto LABEL_75;
          }
LABEL_57:
          v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v62);
          goto LABEL_70;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        v26 = a2[1];
        v31 = a2[2];
        if (v26 >= v31)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
          v35 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *a2) >> 3);
          if (2 * v36 > v35)
            v35 = 2 * v36;
          if (v36 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v35;
          *(_QWORD *)&v64 = a2 + 2;
          if (v30)
LABEL_65:
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v30);
          else
            v37 = 0;
LABEL_72:
          v39 = &v37[24 * v27];
          *(_QWORD *)v63 = v37;
          *(_QWORD *)&v63[8] = v39;
          *(_QWORD *)&v63[24] = &v37[24 * v30];
          v40 = *(_OWORD *)__p;
          *((_QWORD *)v39 + 2) = v61;
          *(_OWORD *)v39 = v40;
          __p[1] = 0;
          v61 = 0;
          __p[0] = 0;
          *(_QWORD *)&v63[16] = v39 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, (std::__split_buffer<std::string> *)v63);
          v41 = a2[1];
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)v63);
          v42 = SHIBYTE(v61);
          a2[1] = v41;
          if (v42 < 0)
            operator delete(__p[0]);
          goto LABEL_74;
        }
LABEL_52:
        v32 = *(_OWORD *)__p;
        *(_QWORD *)(v26 + 16) = v61;
        *(_OWORD *)v26 = v32;
        a2[1] = v26 + 24;
LABEL_74:
        v38 = 0;
        v20 = 1;
LABEL_75:
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if ((v38 & 1) == 0)
          goto LABEL_86;
        v19 += 2;
      }
      while (v19 != *((__int128 **)&v83 + 1));
    }
    v20 = 1;
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      memset(v63, 0, sizeof(v63));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Hammer rewrite failed.", 22);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v63);
    }
    v20 = 0;
  }
LABEL_86:
  *(_QWORD *)v63 = &v83;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
LABEL_88:
  v79 = &unk_1E5D256C0;
  v46 = v80;
  if (v80)
  {
    v47 = *(_DWORD *)(v80 + 56) - 1;
    *(_DWORD *)(v80 + 56) = v47;
    if (!v47)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v46 + 8))(v46);
  }
  v81 = &unk_1E5D256C0;
  v48 = v82;
  if (v82)
  {
    v49 = v82[14] - 1;
    v82[14] = v49;
    if (!v49)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
  }
  return v20 & 1;
}

void sub_1AE056618(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, void *__pa, uint64_t a11, std::__split_buffer<std::wstring> *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  int v23;

  if (SHIBYTE(a12) < 0)
    operator delete(__pa);
  if (a18 < 0)
    operator delete(a13);
  a13 = (void *)(v18 - 120);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  *(_QWORD *)(v18 - 152) = &unk_1E5D256C0;
  v20 = *(_DWORD **)(v18 - 144);
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  *(_QWORD *)(v18 - 136) = &unk_1E5D256C0;
  v22 = *(_DWORD **)(v18 - 128);
  if (v22)
  {
    v23 = v22[14] - 1;
    v22[14] = v23;
    if (!v23)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::HammerSeqLat::hammerSeqLatMapping(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  __n128 v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *DestToks;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v54;
  std::string v56[4];
  void *v57[2];
  _OWORD v58[2];
  void *v59[2];
  __int128 v60;
  void *__p[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  char v68;
  __int128 *v69[3];
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void **v99[2];

  v4 = *a3;
  v5 = a3[1];
  while (v5 != v4)
  {
    v5 -= 24;
    v56[0].__r_.__value_.__r.__words[0] = v5;
    std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
  }
  a3[1] = v4;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v97);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v6 = *(_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 120) == v6)
  {
    v19 = 1;
  }
  else
  {
    v7 = 0;
    v8 = 32;
    do
    {
      quasar::Hammer::stringToFst(v6 + v8, *(_DWORD *)(a1 + 16), v56, 1.0);
      std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100](&v94, (uint64_t)v56);
      v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D256C0;
      size = v56[0].__r_.__value_.__l.__size_;
      if (v56[0].__r_.__value_.__l.__size_)
      {
        v10 = *(_DWORD *)(v56[0].__r_.__value_.__l.__size_ + 56) - 1;
        *(_DWORD *)(v56[0].__r_.__value_.__l.__size_ + 56) = v10;
        if (!v10)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v97, v95 - 16);
      ++v7;
      v6 = *(_QWORD *)(a1 + 112);
      v8 += 56;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 120) - v6) >> 3) > v7);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v92);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v90);
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v97, 1, -1, INFINITY, 0.00097656);
    v11.n128_u64[0] = 0x7F8000003A800000;
    v56[0].__r_.__value_.__r.__words[0] = 0x7F8000003A800000;
    LODWORD(v56[0].__r_.__value_.__r.__words[1]) = -1;
    *(std::string::size_type *)((char *)&v56[0].__r_.__value_.__r.__words[1] + 4) = 0;
    v56[0].__r_.__value_.__s.__data_[20] = 0;
    fst::Determinize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v97, (uint64_t)&v92, (int *)v56, v11);
    fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t *)&v92, 0, 0.00097656);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v88);
    v12 = *(uint64_t **)(a1 + 88);
    for (i = *(uint64_t **)(a1 + 96); v12 != i; v12 += 2)
    {
      v14 = *v12;
      v56[0].__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v56[0].__r_.__value_.__r.__words[0]) = 0;
      fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v92, v14, (uint64_t)&v90, (uint64_t)v56);
      v15 = v91;
      ++*(_DWORD *)(v91 + 56);
      v16 = v93;
      if (v93)
      {
        v17 = *(_DWORD *)(v93 + 56) - 1;
        *(_DWORD *)(v93 + 56) = v17;
        if (!v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      v93 = v15;
    }
    v18 = v94;
    v19 = 1;
    if (v94 != v95)
    {
      v20 = a3;
      while (1)
      {
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v86);
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v56[0].__r_.__value_.__s.__data_[0] = 1;
        HIDWORD(v56[0].__r_.__value_.__r.__words[0]) = 0;
        fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v18, (uint64_t)&v90, (uint64_t)&v86, (uint64_t)v56);
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v21 = v18 - v94;
        v22 = *(_QWORD *)(a1 + 112) + 56 * (int)((unint64_t)(v18 - v94) >> 4);
        if (*(char *)(v22 + 55) < 0)
        {
          if (!*(_QWORD *)(v22 + 40))
          {
LABEL_73:
            memset(&v56[0].__r_.__value_.__r.__words[1], 0, 48);
            v36 = v84;
            if ((unint64_t)v84 >= v85)
            {
              v37 = (_QWORD *)std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(&v83, (uint64_t)v56);
            }
            else
            {
              std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)&v85, v84, (uint64_t)v56);
              v37 = v36 + 7;
            }
            v84 = v37;
            if (v56[2].__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v56[1].__r_.__value_.__l.__size_);
            v76 = COERCE_DOUBLE((std::string *)&v56[0].__r_.__value_.__r.__words[1]);
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
            goto LABEL_79;
          }
        }
        else if (!*(_BYTE *)(v22 + 55))
        {
          goto LABEL_73;
        }
        if (!quasar::FstToStrings((uint64_t)&v86, &v80, *(_DWORD *)(a1 + 16), 1, *(_BYTE *)(a1 + 28)))
        {
          if (quasar::gLogLevel >= 1)
          {
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            *(_OWORD *)__p = 0u;
            v62 = 0u;
            *(_OWORD *)v59 = 0u;
            v60 = 0u;
            memset(v58, 0, sizeof(v58));
            *(_OWORD *)v57 = 0u;
            memset(v56, 0, sizeof(v56));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Hammer rewrite failed.", 22);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v56);
          }
          v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
          v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
          std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
          v86 = &unk_1E5D256C0;
          v42 = v87;
          if (v87)
          {
            v43 = *(_DWORD *)(v87 + 56) - 1;
            *(_DWORD *)(v87 + 56) = v43;
            if (!v43)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          }
          v19 = 0;
          break;
        }
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        v23 = v80;
        if (v80 == v81)
          goto LABEL_71;
        v54 = v21 >> 4;
        do
        {
          std::string::operator=((std::string *)((char *)&v78 + 8), (const std::string *)v23);
          if ((SHIBYTE(v79) & 0x80000000) == 0)
          {
            v24 = (char *)&v78 + 8;
            if (HIBYTE(v79) != 1)
            {
              if (!HIBYTE(v79))
                goto LABEL_53;
              goto LABEL_50;
            }
            goto LABEL_29;
          }
          if (!(_QWORD)v79)
          {
LABEL_53:
            v30 = *((_QWORD *)&v77 + 1);
            v31 = v77;
            while (v30 != v31)
              quasar::Token::~Token((void **)(v30 - 224));
            *((_QWORD *)&v77 + 1) = v31;
            v29 = v84;
            if ((unint64_t)v84 >= v85)
              goto LABEL_63;
LABEL_57:
            std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)&v85, v84, (uint64_t)&v76);
            v32 = v29 + 7;
            goto LABEL_64;
          }
          if ((_QWORD)v79 == 1)
          {
            v24 = (_BYTE *)*((_QWORD *)&v78 + 1);
LABEL_29:
            if (*v24 == 32)
            {
              std::vector<quasar::Token>::resize((uint64_t *)&v77, 1uLL);
              std::string::basic_string[abi:ne180100]<0>(v74, " ");
              v25 = *(_DWORD **)(*(_QWORD *)(a1 + 112) + 56 * v54 + 8);
              v26 = v25[7];
              v27 = v25[8];
              v28 = v25[9];
              std::string::basic_string[abi:ne180100]<0>(v72, "");
              std::string::basic_string[abi:ne180100]<0>(v70, "");
              memset(v69, 0, sizeof(v69));
              std::string::basic_string[abi:ne180100]<0>(v67, "");
              quasar::Token::Token(v56, (__int128 *)v74, v26, v27, v28, 0, 0, (__int128 *)v72, 0.0, (__int128 *)v70, v69, 0, (__int128 *)v67, 0, 0);
              quasar::Token::operator=(v77, (__int128 *)v56);
              if (SBYTE7(v62) < 0)
                operator delete(__p[0]);
              if (SBYTE7(v60) < 0)
                operator delete(v59[0]);
              v99[0] = (void **)v58 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v99);
              if (SBYTE7(v58[0]) < 0)
                operator delete(v57[0]);
              v99[0] = (void **)&v56[3].__r_.__value_.__l.__data_;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v99);
              if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v56[2].__r_.__value_.__l.__data_);
              if (SHIBYTE(v56[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v56[0].__r_.__value_.__l.__data_);
              if (v68 < 0)
                operator delete(v67[0]);
              v67[0] = v69;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
              if (v71 < 0)
                operator delete(v70[0]);
              if (v73 < 0)
                operator delete(v72[0]);
              if (v75 < 0)
                operator delete(v74[0]);
              v29 = v84;
              if ((unint64_t)v84 >= v85)
                goto LABEL_63;
              goto LABEL_57;
            }
          }
LABEL_50:
          if (a2)
          {
            quasar::splitStringToTokens((uint64_t)&v78 + 8, (uint64_t *)&v77);
            v29 = v84;
            if ((unint64_t)v84 < v85)
              goto LABEL_57;
LABEL_63:
            v32 = (_QWORD *)std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(&v83, (uint64_t)&v76);
LABEL_64:
            v84 = v32;
            goto LABEL_65;
          }
          if (*(_BYTE *)(a1 + 20))
          {
            quasar::Align::Align((uint64_t)v56, (uint64_t *)(*(_QWORD *)(a1 + 112) + 56 * v54 + 8), (uint64_t)&v78 + 8);
            DestToks = (uint64_t *)quasar::Align::getDestToks((quasar::Align *)v56);
            if (&v77 != (__int128 *)DestToks)
              std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v77, *DestToks, DestToks[1], 0x6DB6DB6DB6DB6DB7 * ((DestToks[1] - *DestToks) >> 5));
            v76 = *(float *)(v23 + 24);
            v34 = v84;
            if ((unint64_t)v84 >= v85)
            {
              v35 = (_QWORD *)std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(&v83, (uint64_t)&v76);
            }
            else
            {
              std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)&v85, v84, (uint64_t)&v76);
              v35 = v34 + 7;
            }
            v84 = v35;
            quasar::Align::~Align((void **)&v56[0].__r_.__value_.__l.__data_);
          }
LABEL_65:
          v23 += 32;
        }
        while (v23 != v81);
        v20 = a3;
        if (SHIBYTE(v79) < 0)
          operator delete(*((void **)&v78 + 1));
LABEL_71:
        v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
LABEL_79:
        v38 = v20[1];
        if (v38 >= v20[2])
        {
          v39 = std::vector<std::vector<quasar::Hammer::HammerSausage>>::__push_back_slow_path<std::vector<quasar::Hammer::HammerSausage> const&>(v20, &v83);
        }
        else
        {
          std::vector<std::vector<quasar::Hammer::HammerSausage>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Hammer::HammerSausage> const&>((uint64_t)v20, &v83);
          v39 = v38 + 24;
        }
        v20[1] = v39;
        v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
        v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
        std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
        v86 = &unk_1E5D256C0;
        v40 = v87;
        if (v87)
        {
          v41 = *(_DWORD *)(v87 + 56) - 1;
          *(_DWORD *)(v87 + 56) = v41;
          if (!v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        v18 += 16;
        if (v18 == v95)
        {
          v19 = 1;
          break;
        }
      }
    }
    v88 = &unk_1E5D256C0;
    v44 = v89;
    if (v89)
    {
      v45 = *(_DWORD *)(v89 + 56) - 1;
      *(_DWORD *)(v89 + 56) = v45;
      if (!v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    v90 = &unk_1E5D256C0;
    v46 = v91;
    if (v91)
    {
      v47 = *(_DWORD *)(v91 + 56) - 1;
      *(_DWORD *)(v91 + 56) = v47;
      if (!v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    v92 = &unk_1E5D256C0;
    v48 = v93;
    if (v93)
    {
      v49 = *(_DWORD *)(v93 + 56) - 1;
      *(_DWORD *)(v93 + 56) = v49;
      if (!v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
  }
  v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
  v97 = &unk_1E5D256C0;
  v50 = v98;
  if (v98)
  {
    v51 = *(_DWORD *)(v98 + 56) - 1;
    *(_DWORD *)(v98 + 56) = v51;
    if (!v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  return v19;
}

void sub_1AE0570E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _DWORD *v23;
  int v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a21);
  a21 = v21 - 248;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = v21 - 224;
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)(v21 - 200) = &unk_1E5D256C0;
  v23 = *(_DWORD **)(v21 - 192);
  if (v23)
  {
    v24 = v23[14] - 1;
    v23[14] = v24;
    if (!v24)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
  }
  *(_QWORD *)(v21 - 184) = &unk_1E5D256C0;
  v25 = *(_DWORD **)(v21 - 176);
  if (v25)
  {
    v26 = v25[14] - 1;
    v25[14] = v26;
    if (!v26)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
  }
  *(_QWORD *)(v21 - 168) = &unk_1E5D256C0;
  v27 = *(_DWORD **)(v21 - 160);
  if (v27)
  {
    v28 = v27[14] - 1;
    v27[14] = v28;
    if (!v28)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
  }
  *(_QWORD *)(v21 - 152) = &unk_1E5D256C0;
  v29 = *(_DWORD **)(v21 - 144);
  if (v29)
  {
    v30 = v29[14] - 1;
    v29[14] = v30;
    if (!v30)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
  }
  a21 = v21 - 136;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)(v21 - 112) = &unk_1E5D256C0;
  v31 = *(_DWORD **)(v21 - 104);
  if (v31)
  {
    v32 = v31[14] - 1;
    v31[14] = v32;
    if (!v32)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  }
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AE0573F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Hammer::HammerSausage>::__push_back_slow_path<quasar::Hammer::HammerSausage const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 56;
  std::vector<quasar::Hammer::HammerSausage>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::Hammer::HammerSausage>::~__split_buffer(&v10);
  return v8;
}

void sub_1AE057518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Hammer::HammerSausage>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *a2 = *(_QWORD *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 5));
  v5 = (std::string *)(a2 + 4);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 32);
    a2[6] = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1AE0575C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Hammer::HammerSausage>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>,std::reverse_iterator<quasar::Hammer::HammerSausage*>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>,std::reverse_iterator<quasar::Hammer::HammerSausage*>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 56);
      a3 -= 56;
      *(_QWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 56;
      *((_QWORD *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,std::reverse_iterator<quasar::Hammer::HammerSausage*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::Hammer::HammerSausage>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::Hammer::HammerSausage>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::Hammer::HammerSausage>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::__shared_ptr_emplace<fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::deque<char>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 9) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1000)
    a2 = 1;
  if (v5 < 0x2000)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<char>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 12));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 12));
  }
  else
  {
    v8 = (char *)(*(_QWORD *)v7 + (v4 & 0xFFF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 12));
    v11 = (char *)(*(_QWORD *)v10 + (v9 & 0xFFF));
  }
  std::deque<char>::__append<std::__deque_iterator<char,char const*,char const&,char const* const*,long,4096l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1AE057958(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<char>::__append<std::__deque_iterator<char,char const*,char const&,char const* const*,long,4096l>,0>(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = &a5[512 * (a4 - a2)] - &a3[*(_QWORD *)a4] + *(_QWORD *)a2;
  return std::deque<char>::__append_with_size[abi:ne180100]<std::__deque_iterator<char,char const*,char const&,char const* const*,long,4096l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<char>::__append_with_size[abi:ne180100]<std::__deque_iterator<char,char const*,char const&,char const* const*,long,4096l>>(_QWORD *a1, _QWORD *a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *result;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  char *v20;
  _BYTE *v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 9) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<char>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 12));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = (_BYTE *)(*v13 + (v11 & 0xFFF));
  v22[0] = v8 + 8 * (v11 >> 12);
  v22[1] = v14;
  result = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)v22, a4);
  while (v14 != (_BYTE *)v16)
  {
    v17 = (_BYTE *)(v13 == result ? v16 : *v13 + 4096);
    if (v14 == v17)
    {
      v17 = v14;
    }
    else
    {
      v18 = v14;
      do
      {
        v19 = *a3++;
        *v18++ = v19;
        if (&a3[-*a2] == (char *)4096)
        {
          v20 = (char *)a2[1];
          ++a2;
          a3 = v20;
        }
      }
      while (v18 != v17);
    }
    a1[5] += v17 - v14;
    if (v13 == result)
      break;
    v21 = (_BYTE *)v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

_QWORD *std::vector<std::vector<quasar::Hammer::HammerSausage>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Hammer::HammerSausage> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<quasar::Hammer::HammerSausage>::__init_with_size[abi:ne180100]<quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AE057B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::Hammer::HammerSausage>>::__push_back_slow_path<std::vector<quasar::Hammer::HammerSausage> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::Hammer::HammerSausage>::__init_with_size[abi:ne180100]<quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<quasar::Hammer::HammerSausage>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Hammer::HammerSausage>>::~__split_buffer(v14);
  return v12;
}

void sub_1AE057C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Hammer::HammerSausage>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::Hammer::HammerSausage>::__init_with_size[abi:ne180100]<quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AE057CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*,quasar::Hammer::HammerSausage*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage&>(a1, v4, v6);
      v6 += 56;
      v4 = v12 + 7;
      v12 += 7;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AE057D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Hammer::HammerSausage>::construct[abi:ne180100]<quasar::Hammer::HammerSausage,quasar::Hammer::HammerSausage&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *a2 = *(_QWORD *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 5));
  v5 = (std::string *)(a2 + 4);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 32);
    a2[6] = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1AE057E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Hammer::HammerSausage>,quasar::Hammer::HammerSausage*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<std::vector<quasar::Hammer::HammerSausage>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Hammer::HammerSausage>>,std::reverse_iterator<std::vector<quasar::Hammer::HammerSausage>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::Hammer::HammerSausage>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::Hammer::HammerSausage>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::Hammer::HammerSausage>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void quasar::printOneBest(kaldi::quasar::Vocab *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  _DWORD *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t Word;
  __int128 v44;
  char v45;
  std::string *v46;
  int data_low;
  int v48;
  std::string::size_type size;
  __int32 *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  float *v66;
  _DWORD *v67;
  float *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  std::string *v79;
  std::string::size_type v80;
  char *v81;
  char *v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  int64_t v90;
  std::string *v91;
  char *v92;
  std::string *v93;
  char *v94;
  unint64_t v95;
  std::string *v96;
  const std::string::value_type *locale;
  std::string::size_type col_high;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  float *v108;
  unint64_t v109;
  _DWORD *v110;
  float *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int64_t v119;
  std::string *v120;
  char *v121;
  std::string *v122;
  _DWORD *v123;
  char *v124;
  std::string::size_type v126;
  std::string *v129;
  int data;
  int v132;
  std::string::size_type v134;
  __int32 *v135;
  char v136;
  std::string *v137;
  std::string::size_type v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  float *v150;
  _DWORD *v151;
  float *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  int v159;
  uint64_t v160;
  _BYTE __v[48];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  std::regex_traits<char> v178[2];
  std::__shared_weak_count *v179;
  std::string v180;

  if (a2 == 1)
  {
    v12 = *a5;
    if (*a5 == a5[1])
    {
      if (v12 >= a5[2])
      {
        v13 = std::vector<std::string>::__emplace_back_slow_path<char const(&)[3]>(a5, "@@");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)*a5, "@@");
        v13 = v12 + 24;
        a5[1] = v12 + 24;
      }
      a5[1] = v13;
      if (a6)
      {
        v14 = *(_QWORD *)(a6 + 16);
        v15 = *(float **)(a6 + 8);
        if ((unint64_t)v15 >= v14)
        {
          v25 = *(float **)a6;
          v26 = ((uint64_t)v15 - *(_QWORD *)a6) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_308;
          v28 = v14 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v29);
            v25 = *(float **)a6;
            v15 = *(float **)(a6 + 8);
          }
          else
          {
            v30 = 0;
          }
          v37 = &v30[4 * v26];
          v38 = &v30[4 * v29];
          *(_DWORD *)v37 = 0;
          v16 = v37 + 4;
          while (v15 != v25)
          {
            v39 = *((_DWORD *)v15-- - 1);
            *((_DWORD *)v37 - 1) = v39;
            v37 -= 4;
          }
          *(_QWORD *)a6 = v37;
          *(_QWORD *)(a6 + 8) = v16;
          *(_QWORD *)(a6 + 16) = v38;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v15 = 0.0;
          v16 = v15 + 1;
        }
        *(_QWORD *)(a6 + 8) = v16;
      }
    }
    v40 = *a3;
    if (a3[1] == *a3)
      return;
    v41 = 0;
    v42 = (unint64_t *)(a5 + 2);
    while (1)
    {
      Word = kaldi::quasar::Vocab::GetWord(a1, *(_DWORD *)(v40 + 4 * v41));
      if (*(char *)(Word + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)Word, *(_QWORD *)(Word + 8));
      }
      else
      {
        v44 = *(_OWORD *)Word;
        v180.__r_.__value_.__r.__words[2] = *(_QWORD *)(Word + 16);
        *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v44;
      }
      v45 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v180.__r_.__value_.__l.__size_ != 3)
          break;
        v46 = (std::string *)v180.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) != 3)
          break;
        v46 = &v180;
      }
      data_low = LOWORD(v46->__r_.__value_.__l.__data_);
      v48 = v46->__r_.__value_.__s.__data_[2];
      if (data_low != 29500 || v48 != 62)
        break;
LABEL_111:
      if (v45 < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      ++v41;
      v40 = *a3;
      if (v41 >= (a3[1] - *a3) >> 2)
        return;
    }
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v178, "@[a-z]*#|#[a-z]*@", 0);
    size = HIBYTE(v180.__r_.__value_.__r.__words[2]);
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = (__int32 *)&v180;
    else
      v51 = (__int32 *)v180.__r_.__value_.__r.__words[0];
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v180.__r_.__value_.__l.__size_;
    v164 = 0uLL;
    LOBYTE(v165) = 0;
    *((_QWORD *)&v165 + 1) = 0;
    *(_QWORD *)&v166 = 0;
    BYTE8(v166) = 0;
    LOBYTE(v167) = 0;
    *((_QWORD *)&v167 + 1) = 0;
    memset(__v, 0, 41);
    v52 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v51, (__int32 *)((char *)v51 + size), (uint64_t)__v, (uint64_t)v178, 0);
    if (*(_QWORD *)__v)
    {
      *(_QWORD *)&__v[8] = *(_QWORD *)__v;
      operator delete(*(void **)__v);
    }
    if ((v52 & 1) != 0)
    {
LABEL_105:
      v76 = v179;
      if (v179)
      {
        p_shared_owners = (unint64_t *)&v179->__shared_owners_;
        do
          v78 = __ldaxr(p_shared_owners);
        while (__stlxr(v78 - 1, p_shared_owners));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      std::locale::~locale(&v178[0].__loc_);
      v45 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      goto LABEL_111;
    }
    v53 = a5[1];
    if (*(char *)(v53 - 1) < 0)
    {
      v54 = *(_QWORD *)(v53 - 16);
      if (v54 <= 1)
      {
LABEL_73:
        if (v53 >= *v42)
        {
          v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *a5) >> 3);
          v58 = v57 + 1;
          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v42 - *a5) >> 3) > v58)
            v58 = 0x5555555555555556 * ((uint64_t)(*v42 - *a5) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v42 - *a5) >> 3) >= 0x555555555555555)
            v59 = 0xAAAAAAAAAAAAAAALL;
          else
            v59 = v58;
          *(_QWORD *)&__v[32] = a5 + 2;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v59);
          else
            v60 = 0;
          v62 = &v60[24 * v57];
          *(_QWORD *)__v = v60;
          *(_QWORD *)&__v[8] = v62;
          *(_QWORD *)&__v[24] = &v60[24 * v59];
          v63 = *(_OWORD *)&v180.__r_.__value_.__l.__data_;
          *((_QWORD *)v62 + 2) = *((_QWORD *)&v180.__r_.__value_.__l + 2);
          *(_OWORD *)v62 = v63;
          memset(&v180, 0, sizeof(v180));
          *(_QWORD *)&__v[16] = v62 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, (std::__split_buffer<std::string> *)__v);
          v56 = a5[1];
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        }
        else
        {
          v55 = *(_OWORD *)&v180.__r_.__value_.__l.__data_;
          *(_QWORD *)(v53 + 16) = *((_QWORD *)&v180.__r_.__value_.__l + 2);
          *(_OWORD *)v53 = v55;
          v56 = v53 + 24;
          memset(&v180, 0, sizeof(v180));
          a5[1] = v56;
        }
        a5[1] = v56;
        if (a6)
        {
          v64 = *a4;
          v66 = *(float **)(a6 + 8);
          v65 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v66 >= v65)
          {
            v68 = *(float **)a6;
            v69 = ((uint64_t)v66 - *(_QWORD *)a6) >> 2;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v71 = v65 - (_QWORD)v68;
            if (v71 >> 1 > v70)
              v70 = v71 >> 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
              v72 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v72);
              v68 = *(float **)a6;
              v66 = *(float **)(a6 + 8);
            }
            else
            {
              v73 = 0;
            }
            v74 = &v73[4 * v69];
            *(_DWORD *)v74 = *(_DWORD *)(v64 + 4 * v41);
            v67 = v74 + 4;
            while (v66 != v68)
            {
              v75 = *((_DWORD *)v66-- - 1);
              *((_DWORD *)v74 - 1) = v75;
              v74 -= 4;
            }
            *(_QWORD *)a6 = v74;
            *(_QWORD *)(a6 + 8) = v67;
            *(_QWORD *)(a6 + 16) = &v73[4 * v72];
            if (v68)
              operator delete(v68);
          }
          else
          {
            *v66 = *(float *)(v64 + 4 * v41);
            v67 = v66 + 1;
          }
          *(_QWORD *)(a6 + 8) = v67;
        }
        goto LABEL_105;
      }
    }
    else
    {
      v54 = *(unsigned __int8 *)(v53 - 1);
      if (v54 < 2)
        goto LABEL_73;
    }
    if (!std::string::compare((const std::string *)(v53 - 24), v54 - 2, 2uLL, "@@"))
    {
      if (*(char *)(v53 - 1) < 0)
        v61 = *(_QWORD *)(v53 - 16);
      else
        v61 = *(unsigned __int8 *)(v53 - 1);
      std::string::resize((std::string *)(v53 - 24), v61 - 2, 0);
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v180;
      else
        v79 = (std::string *)v180.__r_.__value_.__r.__words[0];
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      else
        v80 = v180.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v53 - 24), (const std::string::value_type *)v79, v80);
      if (a6)
        *(float *)(*(_QWORD *)(a6 + 8) - 4) = *(float *)(*a4 + 4 * v41) + *(float *)(*(_QWORD *)(a6 + 8) - 4);
      goto LABEL_105;
    }
    v53 = a5[1];
    goto LABEL_73;
  }
  if (a2)
  {
    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "Unsupported model format version.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v9 = (_QWORD *)*a5;
  if (*a5 == a5[1])
  {
    v10 = a5[2];
    if ((unint64_t)v9 >= v10)
    {
      *(_QWORD *)&__v[32] = a5 + 2;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= 1)
        v18 = 1;
      v19 = v17 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v18;
      v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v19);
      *(_QWORD *)__v = v20;
      *(_QWORD *)&__v[8] = v20;
      *(_QWORD *)&__v[24] = &v20[3 * v21];
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      *(_QWORD *)&__v[16] = v20 + 3;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, (std::__split_buffer<std::string> *)__v);
      v11 = (_QWORD *)a5[1];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
    }
    else
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v11 = v9 + 3;
      a5[1] = (uint64_t)(v9 + 3);
    }
    a5[1] = (uint64_t)v11;
    if (a6)
    {
      v22 = *(_QWORD *)(a6 + 16);
      v23 = *(float **)(a6 + 8);
      if ((unint64_t)v23 < v22)
      {
        *v23 = 0.0;
        v24 = v23 + 1;
LABEL_130:
        *(_QWORD *)(a6 + 8) = v24;
        goto LABEL_131;
      }
      v31 = *(float **)a6;
      v32 = ((uint64_t)v23 - *(_QWORD *)a6) >> 2;
      v33 = v32 + 1;
      if (!((unint64_t)(v32 + 1) >> 62))
      {
        v34 = v22 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v35);
          v31 = *(float **)a6;
          v23 = *(float **)(a6 + 8);
        }
        else
        {
          v36 = 0;
        }
        v81 = &v36[4 * v32];
        v82 = &v36[4 * v35];
        *(_DWORD *)v81 = 0;
        v24 = v81 + 4;
        while (v23 != v31)
        {
          v83 = *((_DWORD *)v23-- - 1);
          *((_DWORD *)v81 - 1) = v83;
          v81 -= 4;
        }
        *(_QWORD *)a6 = v81;
        *(_QWORD *)(a6 + 8) = v24;
        *(_QWORD *)(a6 + 16) = v82;
        if (v31)
          operator delete(v31);
        goto LABEL_130;
      }
LABEL_308:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_131:
  v84 = *a3;
  if (a3[1] != *a3)
  {
    v85 = 0;
    v86 = a5 + 2;
    v160 = a6 + 16;
    do
    {
      v87 = kaldi::quasar::Vocab::GetWord(a1, *(_DWORD *)(v84 + 4 * v85));
      if (*(char *)(v87 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)v87, *(_QWORD *)(v87 + 8));
      }
      else
      {
        v88 = *(_OWORD *)v87;
        v180.__r_.__value_.__r.__words[2] = *(_QWORD *)(v87 + 16);
        *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v88;
      }
      v89 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
      v90 = v180.__r_.__value_.__l.__size_;
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v91 = (std::string *)v180.__r_.__value_.__r.__words[0];
      }
      else
      {
        v90 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
        v91 = &v180;
      }
      if (v90 >= 4)
      {
        v92 = (char *)v91 + v90;
        v93 = v91;
        do
        {
          v94 = (char *)memchr(v93, 126, v90 - 3);
          if (!v94)
            break;
          if (*(_DWORD *)v94 == 808482686)
          {
            if (v94 != v92)
            {
              v95 = v94 - (char *)v91;
              if (v94 - (char *)v91 != -1)
              {
                do
                {
                  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v96 = &v180;
                  else
                    v96 = (std::string *)v180.__r_.__value_.__r.__words[0];
                  std::string::__init_with_size[abi:ne180100]<char *,char *>(v178, (char *)v96, (char *)v96 + v95, v95);
                  if (SHIBYTE(v178[0].__col_) >= 0)
                    locale = (const std::string::value_type *)v178;
                  else
                    locale = (const std::string::value_type *)v178[0].__loc_.__locale_;
                  if (SHIBYTE(v178[0].__col_) >= 0)
                    col_high = HIBYTE(v178[0].__col_);
                  else
                    col_high = (std::string::size_type)v178[0].__ct_;
                  std::string::append((std::string *)(a5[1] - 24), locale, col_high);
                  v100 = (_QWORD *)a5[1];
                  v99 = a5[2];
                  if ((unint64_t)v100 >= v99)
                  {
                    v102 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v100 - *a5) >> 3);
                    v103 = v102 + 1;
                    if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *a5) >> 3);
                    if (2 * v104 > v103)
                      v103 = 2 * v104;
                    if (v104 >= 0x555555555555555)
                      v105 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v105 = v103;
                    *(_QWORD *)&__v[32] = a5 + 2;
                    if (v105)
                      v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v105);
                    else
                      v106 = 0;
                    v107 = &v106[24 * v102];
                    *(_QWORD *)__v = v106;
                    *(_QWORD *)&__v[8] = v107;
                    *(_QWORD *)&__v[24] = &v106[24 * v105];
                    *(_QWORD *)v107 = 0;
                    *((_QWORD *)v107 + 1) = 0;
                    *((_QWORD *)v107 + 2) = 0;
                    *(_QWORD *)&__v[16] = v107 + 24;
                    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, (std::__split_buffer<std::string> *)__v);
                    v101 = (_QWORD *)a5[1];
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                  }
                  else
                  {
                    *v100 = 0;
                    v100[1] = 0;
                    v100[2] = 0;
                    v101 = v100 + 3;
                    a5[1] = (uint64_t)(v100 + 3);
                  }
                  a5[1] = (uint64_t)v101;
                  if (a6)
                  {
                    v108 = *(float **)(a6 + 8);
                    *(v108 - 1) = *(float *)(*a4 + 4 * v85) + *(v108 - 1);
                    v109 = *(_QWORD *)(a6 + 16);
                    if ((unint64_t)v108 >= v109)
                    {
                      v111 = *(float **)a6;
                      v112 = ((uint64_t)v108 - *(_QWORD *)a6) >> 2;
                      v113 = v112 + 1;
                      if ((unint64_t)(v112 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v114 = v109 - (_QWORD)v111;
                      if (v114 >> 1 > v113)
                        v113 = v114 >> 1;
                      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
                        v115 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v115 = v113;
                      if (v115)
                      {
                        v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v160, v115);
                        v111 = *(float **)a6;
                        v108 = *(float **)(a6 + 8);
                      }
                      else
                      {
                        v116 = 0;
                      }
                      v117 = &v116[4 * v112];
                      *(_DWORD *)v117 = 0;
                      v110 = v117 + 4;
                      while (v108 != v111)
                      {
                        v118 = *((_DWORD *)v108-- - 1);
                        *((_DWORD *)v117 - 1) = v118;
                        v117 -= 4;
                      }
                      *(_QWORD *)a6 = v117;
                      *(_QWORD *)(a6 + 8) = v110;
                      *(_QWORD *)(a6 + 16) = &v116[4 * v115];
                      if (v111)
                        operator delete(v111);
                    }
                    else
                    {
                      *v108 = 0.0;
                      v110 = v108 + 1;
                    }
                    *(_QWORD *)(a6 + 8) = v110;
                  }
                  std::string::erase(&v180, 0, v95 + 4);
                  v119 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
                  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    v120 = &v180;
                  }
                  else
                  {
                    v119 = v180.__r_.__value_.__l.__size_;
                    v120 = (std::string *)v180.__r_.__value_.__r.__words[0];
                  }
                  v121 = (char *)v120 + v119;
                  if (v119 >= 4)
                  {
                    v122 = v120;
                    do
                    {
                      v123 = memchr(v122, 126, v119 - 3);
                      if (!v123)
                        break;
                      v124 = (char *)v123;
                      if (*v123 == 808482686)
                        goto LABEL_195;
                      v122 = (std::string *)((char *)v123 + 1);
                      v119 = v121 - (v124 + 1);
                    }
                    while (v119 > 3);
                  }
                  v124 = v121;
LABEL_195:
                  if (SHIBYTE(v178[0].__col_) < 0)
                    operator delete(v178[0].__loc_.__locale_);
                  if (v124 == v121)
                    break;
                  v95 = v124 - (char *)v120;
                }
                while (v95 != -1);
                v89 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
              }
            }
            break;
          }
          v93 = (std::string *)(v94 + 1);
          v90 = v92 - (char *)v93;
        }
        while (v92 - (char *)v93 >= 4);
      }
      if ((v89 & 0x80) == 0)
      {
        switch(v89)
        {
          case 1:
            goto LABEL_230;
          case 3:
            if (LOWORD(v180.__r_.__value_.__l.__data_) == 29500 && v180.__r_.__value_.__s.__data_[2] == 62)
              goto LABEL_263;
            goto LABEL_229;
          case 4:
            if (LODWORD(v180.__r_.__value_.__l.__data_) == 1047736124)
              goto LABEL_263;
LABEL_229:
            if (v89 != 1)
              goto LABEL_241;
LABEL_230:
            if (v180.__r_.__value_.__s.__data_[0] == 32)
              goto LABEL_297;
            goto LABEL_241;
          case 5:
            if (LODWORD(v180.__r_.__value_.__l.__data_) == 1668313916 && v180.__r_.__value_.__s.__data_[4] == 62)
              goto LABEL_263;
            v129 = &v180;
            goto LABEL_237;
          default:
            goto LABEL_241;
        }
      }
      v126 = v180.__r_.__value_.__l.__size_;
      if (v180.__r_.__value_.__l.__size_ == 3)
      {
        if (*(_WORD *)v180.__r_.__value_.__l.__data_ == 29500
          && *(_BYTE *)(v180.__r_.__value_.__r.__words[0] + 2) == 62)
        {
          goto LABEL_263;
        }
        v126 = v180.__r_.__value_.__l.__size_;
      }
      else if (v180.__r_.__value_.__l.__size_ == 5
             && *(_DWORD *)v180.__r_.__value_.__l.__data_ == 1668313916
             && *(_BYTE *)(v180.__r_.__value_.__r.__words[0] + 4) == 62)
      {
        goto LABEL_263;
      }
      if (v126 != 4)
        goto LABEL_223;
      if (*(_DWORD *)v180.__r_.__value_.__l.__data_ != 1047736124)
      {
        v126 = v180.__r_.__value_.__l.__size_;
LABEL_223:
        if (v126 != 1)
          goto LABEL_226;
        if (*v180.__r_.__value_.__l.__data_ != 32)
        {
          v126 = v180.__r_.__value_.__l.__size_;
LABEL_226:
          if (v126 != 5)
            goto LABEL_241;
          v129 = (std::string *)v180.__r_.__value_.__r.__words[0];
LABEL_237:
          data = (int)v129->__r_.__value_.__l.__data_;
          v132 = v129->__r_.__value_.__s.__data_[4];
          if (data != 1802401084 || v132 != 62)
          {
LABEL_241:
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v178, "@[a-z]*#|#[a-z]*@", 0);
            v134 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
            if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v135 = (__int32 *)&v180;
            else
              v135 = (__int32 *)v180.__r_.__value_.__r.__words[0];
            if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v134 = v180.__r_.__value_.__l.__size_;
            v164 = 0uLL;
            LOBYTE(v165) = 0;
            *((_QWORD *)&v165 + 1) = 0;
            *(_QWORD *)&v166 = 0;
            BYTE8(v166) = 0;
            LOBYTE(v167) = 0;
            *((_QWORD *)&v167 + 1) = 0;
            memset(__v, 0, 41);
            v136 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v135, (__int32 *)((char *)v135 + v134), (uint64_t)__v, (uint64_t)v178, 0);
            if (*(_QWORD *)__v)
            {
              *(_QWORD *)&__v[8] = *(_QWORD *)__v;
              operator delete(*(void **)__v);
            }
            if ((v136 & 1) == 0)
            {
              v137 = (v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v180
                   : (std::string *)v180.__r_.__value_.__r.__words[0];
              v138 = (v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v180.__r_.__value_.__r.__words[2])
                   : v180.__r_.__value_.__l.__size_;
              std::string::append((std::string *)(a5[1] - 24), (const std::string::value_type *)v137, v138);
              if (a6)
                *(float *)(*(_QWORD *)(a6 + 8) - 4) = *(float *)(*a4 + 4 * v85)
                                                      + *(float *)(*(_QWORD *)(a6 + 8) - 4);
            }
            v139 = v179;
            if (v179)
            {
              v140 = (unint64_t *)&v179->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            std::locale::~locale(&v178[0].__loc_);
          }
          goto LABEL_297;
        }
        goto LABEL_297;
      }
LABEL_263:
      v142 = (_QWORD *)a5[1];
      if (*((char *)v142 - 1) < 0)
      {
        if (*(v142 - 2))
        {
LABEL_267:
          if ((unint64_t)v142 >= *v86)
          {
            v144 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v142 - *a5) >> 3);
            v145 = v144 + 1;
            if (v144 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((*v86 - *a5) >> 3) > v145)
              v145 = 0x5555555555555556 * ((*v86 - *a5) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((*v86 - *a5) >> 3) >= 0x555555555555555)
              v146 = 0xAAAAAAAAAAAAAAALL;
            else
              v146 = v145;
            *(_QWORD *)&__v[32] = a5 + 2;
            if (v146)
              v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v146);
            else
              v147 = 0;
            v148 = &v147[24 * v144];
            *(_QWORD *)__v = v147;
            *(_QWORD *)&__v[8] = v148;
            *(_QWORD *)&__v[24] = &v147[24 * v146];
            *(_QWORD *)v148 = 0;
            *((_QWORD *)v148 + 1) = 0;
            *((_QWORD *)v148 + 2) = 0;
            *(_QWORD *)&__v[16] = v148 + 24;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, (std::__split_buffer<std::string> *)__v);
            v143 = (_QWORD *)a5[1];
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
          }
          else
          {
            *v142 = 0;
            v142[1] = 0;
            v142[2] = 0;
            v143 = v142 + 3;
            a5[1] = (uint64_t)(v142 + 3);
          }
          a5[1] = (uint64_t)v143;
          if (a6)
          {
            v150 = *(float **)(a6 + 8);
            v149 = *(_QWORD *)(a6 + 16);
            if ((unint64_t)v150 >= v149)
            {
              v152 = *(float **)a6;
              v153 = ((uint64_t)v150 - *(_QWORD *)a6) >> 2;
              v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v155 = v149 - (_QWORD)v152;
              if (v155 >> 1 > v154)
                v154 = v155 >> 1;
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
                v156 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v156 = v154;
              if (v156)
              {
                v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v160, v156);
                v152 = *(float **)a6;
                v150 = *(float **)(a6 + 8);
              }
              else
              {
                v157 = 0;
              }
              v158 = &v157[4 * v153];
              *(_DWORD *)v158 = 0;
              v151 = v158 + 4;
              while (v150 != v152)
              {
                v159 = *((_DWORD *)v150-- - 1);
                *((_DWORD *)v158 - 1) = v159;
                v158 -= 4;
              }
              *(_QWORD *)a6 = v158;
              *(_QWORD *)(a6 + 8) = v151;
              *(_QWORD *)(a6 + 16) = &v157[4 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *v150 = 0.0;
              v151 = v150 + 1;
            }
            *(_QWORD *)(a6 + 8) = v151;
          }
        }
      }
      else if (*((_BYTE *)v142 - 1))
      {
        goto LABEL_267;
      }
LABEL_297:
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      ++v85;
      v84 = *a3;
    }
    while (v85 < (a3[1] - *a3) >> 2);
  }
}

void sub_1AE058F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  _Unwind_Resume(a1);
}

void sub_1AE058F68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AE058F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void sub_1AE058F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7)
{
  uint64_t v7;

  if (*(char *)(v7 - 89) < 0)
    operator delete(*(void **)(v7 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::RescoreWithLMs(uint64_t a1, kaldi::quasar::Vocab *a2, _QWORD *a3, __int128 *a4, __int128 *a5, std::string::value_type a6, std::string::value_type a7, int a8, float a9, uint64_t *a10, _QWORD *a11, float **a12, uint64_t *a13, uint64_t a14)
{
  double Latitude;
  double Weight;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  std::vector<std::string>::pointer end;
  __int128 v37;
  std::string *v38;
  unsigned __int8 *v39;
  float v40;
  uint64_t v41;
  _BOOL4 v42;
  _DWORD *v43;
  void *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  std::string *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _BOOL4 v69;
  std::string *v70;
  std::string *v71;
  _QWORD *v72;
  _QWORD *v73;
  std::string *v74;
  std::string *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  std::string *v96;
  std::string *v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  std::string *v101;
  float *v102;
  uint64_t v103;
  std::string *v104;
  float v105;
  int v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  float *v110;
  float *v111;
  float v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v124;
  uint64_t v125;
  uint64_t i;
  _QWORD *v127;
  int64x2_t v128;
  int LmScoreType;
  int64x2_t v135;
  int64x2_t v136;
  void *v137[2];
  __int128 v138;
  void *v139[2];
  __int128 v140;
  __int128 v141;
  void *v142[2];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _QWORD v155[3];
  int v156;
  void *v157;
  char v158;
  void *v159;
  void *v160;
  __int128 *v161[3];
  void *v162;
  void *v163;
  uint64_t v164;
  int64x2_t v165;
  uint64_t v166;
  int64x2_t v167;
  __int128 v168;
  void *__p[2];
  char v170;
  __int128 v171;
  uint64_t v172;
  std::vector<std::string> v173;
  void *v174;
  void *v175;
  unint64_t v176;
  std::string *__str;
  std::string *v178;
  unint64_t v179;
  _OWORD v180[2];
  int v181;
  uint64_t v182;
  std::string *v183;
  unint64_t v184;
  void *v185;
  char v186;
  int *v187[3];
  char *v188[3];
  __int128 **v189;

  quasar::LmeDataStreams::LmeDataStreams((quasar::LmeDataStreams *)v187);
  v135 = vdupq_n_s64(0x4076800000000000uLL);
  *(int64x2_t *)v137 = v135;
  Latitude = quasar::Location::getLatitude((quasar::Location *)v137);
  *(int64x2_t *)v137 = v135;
  Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v137);
  v18 = std::string::basic_string[abi:ne180100]<0>(&v185, "logprob");
  LmScoreType = quasar::getLmScoreType((uint64_t)v18);
  v20 = *a10;
  v19 = a10[1];
  v182 = 0;
  v183 = 0;
  v184 = 0;
  memset(v180, 0, sizeof(v180));
  v181 = 1065353216;
  v120 = v20;
  v121 = v19;
  v119 = (v19 - v20) / 24;
  if (v19 == v20)
  {
    v178 = 0;
    __str = 0;
    v179 = 0;
    goto LABEL_133;
  }
  v21 = 0;
  if ((unint64_t)((v19 - v20) / 24) <= 1)
    v22 = 1;
  else
    v22 = (v19 - v20) / 24;
  v124 = v22;
  v128 = vdupq_n_s64(0x4076800000000000uLL);
  v127 = a3;
  do
  {
    v125 = v21;
    v23 = (uint64_t *)(*a10 + 24 * v21);
    v154 = 0;
    v155[0] = 0;
    v155[1] = 0;
    quasar::printOneBest(a2, a8, v23, 0, &v154, 0);
    v178 = 0;
    __str = 0;
    v179 = 0;
    v24 = v154;
    v25 = v155[0];
    for (i = v155[0]; v24 != v25; v24 += 24)
    {
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, (unsigned __int8 *)v24);
      v27 = v26;
      if (v26)
      {
        v28 = *((_QWORD *)v26 + 5);
        v29 = *((_QWORD *)v26 + 6);
        if (v29 - v28 != 24)
        {
          v175 = 0;
          v174 = 0;
          v176 = 0;
          if (v28 == v29)
          {
            v57 = 0;
            v56 = 0;
          }
          else
          {
            v34 = 0;
            do
            {
              memset(&v173, 0, sizeof(v173));
              v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (char *)__str) >> 3);
              if (v35 < 5)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&v173, __str, (__int128 *)v178, v35);
              }
              else
              {
                std::vector<std::string>::resize(&v173, 4uLL);
                std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,0>(v178 - 4, v178, v173.__begin_);
              }
              end = v173.__end_;
              if (v173.__end_ >= v173.__end_cap_.__value_)
              {
                v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v173, (__int128 *)v28);
              }
              else
              {
                if (*(char *)(v28 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v173.__end_, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
                }
                else
                {
                  v37 = *(_OWORD *)v28;
                  v173.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v37;
                }
                v38 = end + 1;
              }
              v173.__end_ = v38;
              v171 = 0uLL;
              v172 = 0;
              kaldi::JoinVectorToString((uint64_t *)&v173, " ", 1, &v171);
              v39 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v180, (unsigned __int8 *)&v171);
              if (v39)
              {
                v40 = *((float *)v39 + 10);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "utt");
                quasar::LmInfo::LmInfo((uint64_t)v137, LmScoreType, (__int128 *)__p);
                if (v170 < 0)
                  operator delete(__p[0]);
                quasar::LmeDataStreams::getLmeStreams(v187, (uint64_t)__p);
                v167 = v128;
                *(_QWORD *)&v168 = quasar::Location::knownOrFallback((uint64_t)&v167, Latitude, Weight);
                *((_QWORD *)&v168 + 1) = v41;
                v165 = 0uLL;
                v166 = 0;
                v163 = 0;
                v162 = 0;
                v164 = 0;
                memset(v161, 0, sizeof(v161));
                BYTE2(v118) = 0;
                LOWORD(v118) = 1;
                v42 = quasar::FstLmScorer::computeLmScore(a1, (uint64_t)__p, &v168, a4, (__int128 **)&v173, a7, (uint64_t)v137, &v165, a6, a5, (int **)&v162, v118, 0, v161, 1);
                v189 = v161;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
                if (v162)
                {
                  v163 = v162;
                  operator delete(v162);
                }
                v162 = &v165;
                std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
                v165.i64[0] = (uint64_t)__p;
                std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
                if (v42)
                  v40 = *(float *)v139;
                else
                  v40 = -1000000000.0;
                __p[0] = &v171;
                *((float *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v180, (unsigned __int8 *)&v171, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10) = v40;
                if (v142[0])
                {
                  v142[1] = v142[0];
                  operator delete(v142[0]);
                }
                if (SHIBYTE(v140) < 0)
                  operator delete(v139[1]);
                __p[0] = &v137[1];
                std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              }
              v43 = v175;
              if ((unint64_t)v175 >= v176)
              {
                v45 = ((_BYTE *)v175 - (_BYTE *)v174) >> 3;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v47 = v176 - (_QWORD)v174;
                if ((uint64_t)(v176 - (_QWORD)v174) >> 2 > v46)
                  v46 = v47 >> 2;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v48 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v176, v48);
                v51 = &v49[8 * v45];
                *(float *)v51 = v40;
                *((_DWORD *)v51 + 1) = v34;
                v52 = (char *)v175;
                v53 = (char *)v174;
                v54 = v51;
                if (v175 != v174)
                {
                  do
                  {
                    v55 = *((_QWORD *)v52 - 1);
                    v52 -= 8;
                    *((_QWORD *)v54 - 1) = v55;
                    v54 -= 8;
                  }
                  while (v52 != v53);
                  v52 = (char *)v174;
                }
                v44 = v51 + 8;
                v174 = v54;
                v175 = v51 + 8;
                v176 = (unint64_t)&v49[8 * v50];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *(float *)v175 = v40;
                v43[1] = v34;
                v44 = v43 + 2;
              }
              v175 = v44;
              if (SHIBYTE(v172) < 0)
                operator delete((void *)v171);
              ++v34;
              v137[0] = &v173;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
              v28 += 24;
            }
            while (v28 != v29);
            v56 = v174;
            v57 = v175;
            v25 = i;
          }
          v59 = 126 - 2 * __clz((v57 - v56) >> 3);
          if (v57 == v56)
            v60 = 0;
          else
            v60 = v59;
          std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *,false>((uint64_t)v56, (unint64_t)v57, v60, 1);
          v61 = *((_QWORD *)v27 + 5) + 24 * *((int *)v174 + 1);
          v62 = v178;
          if ((unint64_t)v178 >= v179)
          {
            v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v61);
            a3 = v127;
          }
          else
          {
            if (*(char *)(v61 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v178, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
            }
            else
            {
              v63 = *(_OWORD *)v61;
              v178->__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 16);
              *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
            }
            a3 = v127;
            v64 = v62 + 1;
          }
          v178 = v64;
          if (v174)
          {
            v175 = v174;
            operator delete(v174);
          }
          continue;
        }
        v30 = v178;
        if ((unint64_t)v178 >= v179)
        {
          v58 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v28);
        }
        else
        {
          if (*(char *)(v28 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v178, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
          }
          else
          {
            v31 = *(_OWORD *)v28;
            v178->__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
            *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          }
          v58 = v30 + 1;
        }
      }
      else
      {
        v32 = v178;
        if ((unint64_t)v178 >= v179)
        {
          v58 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v24);
        }
        else
        {
          if (*(char *)(v24 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v178, *(const std::string::value_type **)v24, *(_QWORD *)(v24 + 8));
          }
          else
          {
            v33 = *(_OWORD *)v24;
            v178->__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + 16);
            *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
          }
          v58 = v32 + 1;
        }
      }
      v178 = v58;
    }
    v65 = v183;
    if ((unint64_t)v183 >= v184)
    {
      v66 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(&v182, (__int128 **)&__str);
    }
    else
    {
      v183->__r_.__value_.__r.__words[0] = 0;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v65, (__int128 *)__str, (__int128 *)v178, 0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (char *)__str) >> 3));
      v66 = (uint64_t)&v65[1];
    }
    v183 = (std::string *)v66;
    v137[0] = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
    v137[0] = &v154;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
    v21 = v125 + 1;
  }
  while (v125 + 1 != v124);
  v67 = 0;
  v178 = 0;
  __str = 0;
  v179 = 0;
  v136 = vdupq_n_s64(0x4076800000000000uLL);
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v137, "utt");
    quasar::LmInfo::LmInfo((uint64_t)&v154, LmScoreType, (__int128 *)v137);
    if (SBYTE7(v138) < 0)
      operator delete(v137[0]);
    quasar::LmeDataStreams::getLmeStreams(v187, (uint64_t)v137);
    v165 = v136;
    __p[0] = COERCE_VOID_(quasar::Location::knownOrFallback((uint64_t)&v165, Latitude, Weight));
    __p[1] = v68;
    v175 = 0;
    v174 = 0;
    v176 = 0;
    memset(&v173, 0, sizeof(v173));
    v171 = 0uLL;
    v172 = 0;
    BYTE2(v118) = 0;
    LOWORD(v118) = 1;
    v69 = quasar::FstLmScorer::computeLmScore(a1, (uint64_t)v137, __p, a4, (__int128 **)(v182 + 24 * v67), a7, (uint64_t)&v154, (_QWORD **)&v174, a6, a5, (int **)&v173, v118, 0, (__int128 **)&v171, 1);
    v162 = &v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    if (v173.__begin_)
    {
      v173.__end_ = v173.__begin_;
      operator delete(v173.__begin_);
    }
    v173.__begin_ = (std::vector<std::string>::pointer)&v174;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
    v174 = v137;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
    if (!v69)
      break;
    v70 = v178;
    if ((unint64_t)v178 >= v179)
    {
      v76 = ((char *)v178 - (char *)__str) >> 3;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61)
        goto LABEL_155;
      v78 = v179 - (_QWORD)__str;
      if ((uint64_t)(v179 - (_QWORD)__str) >> 2 > v77)
        v77 = v78 >> 2;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v77;
      v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v179, v79);
      v82 = &v80[8 * v76];
      *(_DWORD *)v82 = v156;
      *((_DWORD *)v82 + 1) = v67;
      v83 = v178;
      v84 = __str;
      v85 = (std::string *)v82;
      if (v178 != __str)
      {
        do
        {
          v86 = v83[-1].__r_.__value_.__r.__words[2];
          v83 = (std::string *)((char *)v83 - 8);
          v85[-1].__r_.__value_.__r.__words[2] = v86;
          v85 = (std::string *)((char *)v85 - 8);
        }
        while (v83 != v84);
        v83 = __str;
      }
      v71 = (std::string *)(v82 + 8);
      __str = v85;
      v178 = (std::string *)(v82 + 8);
      v179 = (unint64_t)&v80[8 * v81];
      if (v83)
        operator delete(v83);
    }
    else
    {
      LODWORD(v178->__r_.__value_.__l.__data_) = v156;
      HIDWORD(v70->__r_.__value_.__r.__words[0]) = v67;
      v71 = (std::string *)&v70->__r_.__value_.__r.__words[1];
    }
    v178 = v71;
    if (quasar::gLogLevel >= 5)
    {
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      *(_OWORD *)v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      *(_OWORD *)v139 = 0u;
      *(_OWORD *)v137 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"LM-SCORE-DEBUG: beam ", 21);
      v87 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)" E2E ", 5);
      v88 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" LM ", 4);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v137);
    }
LABEL_119:
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    if (v158 < 0)
      operator delete(v157);
    v137[0] = v155;
    std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
    if (++v67 == v124)
      goto LABEL_133;
  }
  if (quasar::gLogLevel >= 5)
  {
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    *(_OWORD *)v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)v137 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"LM-SCORE-DEBUG: beam ", 21);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" E2E ", 5);
    v73 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" LM ", 4);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v137);
  }
  if (v67)
  {
    v74 = v178;
    if ((unint64_t)v178 >= v179)
    {
      v89 = ((char *)v178 - (char *)__str) >> 3;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 61)
LABEL_155:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v91 = v179 - (_QWORD)__str;
      if ((uint64_t)(v179 - (_QWORD)__str) >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v179, v92);
      v95 = &v93[8 * v89];
      *(_DWORD *)v95 = -831624408;
      *((_DWORD *)v95 + 1) = v67;
      v96 = v178;
      v97 = __str;
      v98 = (std::string *)v95;
      if (v178 != __str)
      {
        do
        {
          v99 = v96[-1].__r_.__value_.__r.__words[2];
          v96 = (std::string *)((char *)v96 - 8);
          v98[-1].__r_.__value_.__r.__words[2] = v99;
          v98 = (std::string *)((char *)v98 - 8);
        }
        while (v96 != v97);
        v96 = __str;
      }
      v75 = (std::string *)(v95 + 8);
      __str = v98;
      v178 = (std::string *)(v95 + 8);
      v179 = (unint64_t)&v93[8 * v94];
      if (v96)
        operator delete(v96);
    }
    else
    {
      LODWORD(v178->__r_.__value_.__l.__data_) = -831624408;
      HIDWORD(v74->__r_.__value_.__r.__words[0]) = v67;
      v75 = (std::string *)&v74->__r_.__value_.__r.__words[1];
    }
    v178 = v75;
    goto LABEL_119;
  }
  if (quasar::gLogLevel >= 5)
  {
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    *(_OWORD *)v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)v137 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"0-th beam failed", 16);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v137);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v158 < 0)
    operator delete(v157);
  v137[0] = v155;
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
LABEL_133:
  v100 = __str;
  v101 = v178;
  if (__str == v178)
  {
    v106 = 0;
  }
  else
  {
    if (v121 != v120)
    {
      v102 = *a12;
      v103 = v119;
      if (v119 <= 1)
        v103 = 1;
      v104 = __str;
      do
      {
        v105 = *v102++;
        *(float *)&v104->__r_.__value_.__l.__data_ = v105 + (float)(*(float *)&v104->__r_.__value_.__l.__data_ * a9);
        v104 = (std::string *)((char *)v104 + 8);
        --v103;
      }
      while (v103);
    }
    std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *,false>((uint64_t)v100, (unint64_t)v101, 126 - 2 * __clz(((char *)v101 - (char *)v100) >> 3), 1);
    v106 = HIDWORD(__str->__r_.__value_.__r.__words[0]);
  }
  v107 = (uint64_t *)(*a10 + 24 * v106);
  v137[0] = 0;
  v137[1] = 0;
  *(_QWORD *)&v138 = 0;
  v108 = (v107[1] - *v107) >> 2;
  LODWORD(v154) = 0;
  std::vector<float>::resize((uint64_t)v137, v108, &v154);
  if (v107[1] != *v107)
  {
    v109 = (v107[1] - *v107) >> 2;
    v110 = *(float **)(*a11 + 24 * v106);
    v111 = (float *)v137[0];
    if (v109 <= 1)
      v109 = 1;
    do
    {
      v112 = *v110++;
      *v111++ = -v112;
      --v109;
    }
    while (v109);
  }
  quasar::printOneBest(a2, a8, v107, (uint64_t *)v137, a13, a14);
  v113 = (uint64_t *)(v182 + 24 * v106);
  v114 = *a13;
  *a13 = *v113;
  *v113 = v114;
  v115 = a13[1];
  a13[1] = v113[1];
  v113[1] = v115;
  v116 = a13[2];
  a13[2] = v113[2];
  v113[2] = v116;
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
  if (__str)
  {
    v178 = __str;
    operator delete(__str);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v180);
  v137[0] = &v182;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
  if (v186 < 0)
    operator delete(v185);
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)v188, v188[1]);
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
  return v106;
}

void sub_1AE059E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  void *v74;
  void *v75;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a37);
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)&a72);
  v74 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v74;
    operator delete(v74);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x350]);
  a37 = (void *)(v72 - 240);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (*(char *)(v72 - 193) < 0)
    operator delete(*(void **)(v72 - 216));
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(v72 - 168, *(char **)(v72 - 160));
  v75 = *(void **)(v72 - 192);
  if (v75)
  {
    *(_QWORD *)(v72 - 184) = v75;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineSeevaDecoder::OnlineSeevaDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D369F8;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_QWORD *)(v3 + 528) = &unk_1E5D33A48;
  *(_QWORD *)(v3 + 536) = 0x203F000000;
  *(_QWORD *)(v3 + 544) = 0x200000002;
  *(_BYTE *)(v3 + 552) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 560), "/cpu:0");
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_WORD *)(a1 + 608) = 1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 612) = 0;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_QWORD *)(a1 + 633) = 0;
  *(_QWORD *)(a1 + 528) = &unk_1E5D33E08;
  *(_DWORD *)(a1 + 672) = 48;
  *(_BYTE *)(a1 + 676) = 0;
  *(_OWORD *)(a1 + 680) = xmmword_1AE1945F0;
  *(_DWORD *)(a1 + 696) = -1;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_QWORD *)(a1 + 720) = 0x3E4CCCCD3CA3D70ALL;
  *(_OWORD *)(a1 + 728) = xmmword_1AE194600;
  *(_BYTE *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 748) = 1;
  *(_QWORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 57) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  return a1;
}

void sub_1AE05A1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 527) < 0)
    operator delete(*v4);
  quasar::OnlineSeevaDecoder::OnlineSeevaDecoder(v1, v3, v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaDecoder::~OnlineSeevaDecoder(quasar::OnlineSeevaDecoder *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D369F8;
  v2 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 784, v3);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 97, 0);
  *((_QWORD *)this + 66) = &unk_1E5D33A48;
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  if (*((char *)this + 583) < 0)
    operator delete(*((void **)this + 70));
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineSeevaDecoder::~OnlineSeevaDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineSeevaDecoder::registerParams(quasar::OnlineSeevaDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  kaldi::quasar::SeevaStreamInferenceConfig::Register((uint64_t)this + 528, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 143, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "seeva inference graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "the vocab file that describes model output token");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-is-binary");
  std::string::basic_string[abi:ne180100]<0>(v4, "vocab file is binary");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v4, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-format-version");
  std::string::basic_string[abi:ne180100]<0>(v4, "model format version");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 500, (uint64_t)v4, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "feature transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 504, (uint64_t)v4, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AE05A594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineSeevaDecoder::finishInit(quasar::OnlineSeevaDecoder *this)
{
  uint64_t v2;
  kaldi::quasar::Vocab **v3;
  uint64_t v4;
  uint64_t v5;
  kaldi::quasar::Vocab *v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v14;
  uint64_t v15;
  std::string __p;
  std::fstream v17;
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  std::fstream::basic_fstream(&v17, (const std::string *)((char *)this + 472), 8u);
  v2 = operator new();
  kaldi::quasar::Vocab::Vocab(v2, &v17, *((unsigned __int8 *)this + 496), 1);
  v3 = (kaldi::quasar::Vocab **)((char *)this + 784);
  __p.__r_.__value_.__r.__words[0] = 0;
  v4 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = v2;
  if (v4)
  {
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 784, v4);
    v5 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v5)
      std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)&__p, v5);
  }
  v6 = *v3;
  kaldi::quasar::Vocab::EosWord(*v3, &__p);
  *((_DWORD *)this + 193) = kaldi::quasar::Vocab::GetWordId((uint64_t)v6, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 192) = *((_DWORD *)this + 168);
  if ((*((char *)this + 527) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 527))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*((_QWORD *)this + 64))
  {
LABEL_10:
    v7 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v7);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 97, v7);
    kaldi::nnet1::Nnet::Read(*((_QWORD *)this + 97), (uint64_t)this + 504);
  }
LABEL_11:
  kaldi::quasar::CreateComputeEngineConfig((uint64_t)this + 448, (uint64_t *)&__p);
  kaldi::quasar::SeevaInferenceConfig::PassToCEConfig((uint64_t)this + 528, (kaldi::quasar::ComputeEngineConfigItf *)__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(&v14);
  std::make_unique[abi:ne180100]<kaldi::quasar::SeevaStreamInference,std::unique_ptr<kaldi::quasar::ComputeEngineItf>,kaldi::quasar::SeevaStreamInferenceConfig &>(&v14, (_OWORD *)this + 33, &v15);
  v8 = v15;
  v15 = 0;
  v9 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v12)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v12 + 8))(v12);
  MEMORY[0x1AF44CA70](v17.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v18);
}

void sub_1AE05A834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void (__cdecl **a18)(std::fstream *__hidden this))
{
  std::fstream::~fstream(&a18);
  _Unwind_Resume(a1);
}

void sub_1AE05A8EC()
{
  JUMPOUT(0x1AE05A8E4);
}

uint64_t std::make_unique[abi:ne180100]<kaldi::quasar::SeevaStreamInference,std::unique_ptr<kaldi::quasar::ComputeEngineItf>,kaldi::quasar::SeevaStreamInferenceConfig &>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  _OWORD v11[30];
  _QWORD v12[6];
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  uint64_t v25;

  v6 = operator new();
  v7 = *a1;
  *a1 = 0;
  v25 = v7;
  kaldi::quasar::SeevaInferenceConfig::SeevaInferenceConfig((kaldi::quasar::SeevaInferenceConfig *)v12, (const kaldi::quasar::SeevaInferenceConfig *)a2);
  v12[0] = &unk_1E5D33E08;
  v8 = a2[12];
  v22 = a2[11];
  v23 = v8;
  v24[0] = a2[13];
  *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)((char *)a2 + 220);
  v9 = a2[10];
  v20 = a2[9];
  v21 = v9;
  memset(v11, 0, sizeof(v11));
  kaldi::quasar::SeevaStreamInferenceTensorNames::SeevaStreamInferenceTensorNames((kaldi::quasar::SeevaStreamInferenceTensorNames *)v11);
  kaldi::quasar::SeevaStreamInference::SeevaStreamInference(v6, &v25, v12, v11);
  *a3 = v6;
  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames((void **)v11);
  v12[0] = &unk_1E5D33A48;
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete((void *)v12[4]);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AE05AA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;

  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames(&a9);
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(&a70);
  v73 = *(_QWORD *)(v71 - 56);
  *(_QWORD *)(v71 - 56) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  MEMORY[0x1AF44D190](v70, 0x10B3C40BAB8F5BALL);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaDecoder::resetDecoder(quasar::OnlineSeevaDecoder *this)
{
  __n128 v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  _OWORD v26[11];
  void **v27;

  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v23 = 0u;
  v24 = 0u;
  __p = 0;
  v16 = 0;
  v17 = 0;
  kaldi::quasar::TensorFstCreator::Build((uint64_t)v26, (uint64_t *)&__p);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v2 = kaldi::quasar::TensorFstCreator::Make((kaldi::quasar::TensorFstCreator *)v26, (const kaldi::quasar::ComputeEngineItf *)*(_QWORD *)(*((_QWORD *)this + 99) + 8), (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  v4 = v23;
  *(_QWORD *)&v23 = v3;
  if (v4)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 8))(v4, v2);
  v5 = v16;
  v16 = 0;
  v6 = *((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = v5;
  if (v6)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v6 + 8))(v6, v2);
  v7 = v17;
  v17 = 0;
  v8 = v24;
  *(_QWORD *)&v24 = v7;
  if (v8)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 8))(v8, v2);
  *((_QWORD *)&v24 + 1) = v18;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v25);
  v25[0] = v19;
  *(_QWORD *)&v25[1] = v20;
  v20 = 0;
  v19 = 0uLL;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)&v25[1] + 1);
  *(_OWORD *)((char *)&v25[1] + 8) = v21;
  *((_QWORD *)&v25[2] + 1) = v22;
  v22 = 0;
  v21 = 0uLL;
  v27 = (void **)&v21;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v27 = (void **)&v19;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v9 = v17;
  v17 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v16;
  v16 = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
  v11 = __p;
  __p = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  kaldi::quasar::SeevaStreamInference::ResetGraph(*((kaldi::quasar::SeevaStreamInference **)this + 99), (const kaldi::quasar::TensorFst *)&v23);
  if (*((int *)this + 182) >= 1)
  {
    kaldi::quasar::SeevaStreamInference::SetAlignTensors(*((kaldi::quasar::SeevaStreamInference **)this + 99), *((float *)this + 178), *((float *)this + 179));
    if (*((_BYTE *)this + 744))
      kaldi::quasar::SeevaStreamInference::SetStableTokensTensors(*((kaldi::quasar::SeevaStreamInference **)this + 99), *((unsigned int *)this + 184), *((unsigned int *)this + 185));
  }
  __p = (char *)&v25[1] + 8;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v25;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v12 = v24;
  *(_QWORD *)&v24 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v23;
  *(_QWORD *)&v23 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  kaldi::quasar::TensorFstCreator::~TensorFstCreator((kaldi::quasar::TensorFstCreator *)v26);
}

void sub_1AE05AD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  kaldi::quasar::TensorFst::~TensorFst((kaldi::quasar::TensorFst *)&a19);
  kaldi::quasar::TensorFstCreator::~TensorFstCreator((kaldi::quasar::TensorFstCreator *)&a29);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TensorFst::~TensorFst(kaldi::quasar::TensorFst *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v5 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t quasar::OnlineSeevaDecoder::runImpl(quasar::OnlineSeevaDecoder *a1, int32x2_t **a2, uint64_t *a3, uint64_t a4)
{
  quasar::OnlineSeevaDecoder *v7;
  std::__shared_weak_count *v8;
  int32x2_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int32x2_t *v17;
  _BOOL4 IsValidFrame;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  float *v45;
  float *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  __int128 v52;
  std::string *v53;
  std::string *v54;
  char v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t started;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v78;
  quasar::OnlineSeevaDecoder *v79;
  int v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *__p[2];
  uint64_t v86;
  char v87;
  void *v88[3];
  uint64_t *v89[3];
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  std::string *v93;
  unint64_t v94;
  void *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  _BYTE *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  int32x2_t v113;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121[3];
  int v122;
  int v123;
  int32x2_t *v124;
  std::__shared_weak_count *v125;

  v7 = a1;
  quasar::OnlineSeevaDecoder::resetDecoder(a1);
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v124 = *a2;
  v125 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v9[2] + 24))(*(_QWORD *)&v9[2]);
  v13 = 0;
  v80 = 0;
  v14 = v9[3].u32[0];
  v122 = *((_DWORD *)v7 + 184);
  v123 = 0;
  memset(v121, 0, sizeof(v121));
  v81 = 1;
  v79 = v7;
  do
  {
    kaldi::Matrix<float>::Matrix((uint64_t)&v118, *((unsigned int *)v7 + 192), v14, 0, 0);
    v15 = *((_DWORD *)v7 + 192);
    if (v15 < 1)
    {
      v16 = 0;
      v19 = 0;
    }
    else
    {
      v16 = 0;
      v17 = v124;
      while (1)
      {
        IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(v17, v13 + v16, 1);
        if (!IsValidFrame)
          break;
        kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v17, v13 + v16, (uint64_t *)__p);
        kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v118, (uint64_t)__p, v16++);
        v15 = *((_DWORD *)v7 + 192);
        if (v16 >= v15)
          goto LABEL_12;
      }
      v15 = *((_DWORD *)v7 + 192);
LABEL_12:
      v19 = !IsValidFrame;
    }
    if (v16 <= 1)
      v20 = 1;
    else
      v20 = v16;
    if (v15 >= *((_DWORD *)v7 + 135))
      v21 = *((_DWORD *)v7 + 135);
    else
      v21 = v15;
    v13 += v16;
    v82 = v19;
    if (v19 && v13 < v21)
    {
      v22 = v13;
      v23 = v14;
      v24 = v12;
      v25 = a3;
      v26 = a4;
      v27 = v118;
      v28 = v120;
      v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v118);
      v86 = 0;
      __p[0] = (void *)(v27 + 4 * v28 * (v16 - 1));
      __p[1] = (void *)v29;
      v30 = v16;
      a4 = v26;
      a3 = v25;
      v12 = v24;
      v14 = v23;
      v13 = v22;
      v7 = v79;
      if (v16 < v21)
      {
        do
          kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v118, (uint64_t)__p, v30++);
        while (v21 != v30);
      }
      v20 = v21;
    }
    v117 = 0;
    if (*((_QWORD *)v7 + 97))
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v113, (uint64_t)&v118, 0, v20, 0, v119);
      kaldi::CuMatrix<float>::CuMatrix<float>(__p, &v113, 111, 0);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v113);
      v114 = 0u;
      v115 = 0u;
      v113 = (int32x2_t)&unk_1E5D34170;
      v116 = 0;
      kaldi::nnet1::Nnet::Feedforward(*((uint64_t **)v7 + 97), (uint64_t)__p, &v113, -1, 0);
      (*(void (**)(_BYTE **__return_ptr, _QWORD, int32x2_t *))(**(_QWORD **)(*((_QWORD *)v7 + 99) + 8)
                                                                        + 32))(&v110, *(_QWORD *)(*((_QWORD *)v7 + 99) + 8), &v113);
      v31 = (uint64_t)v110;
      v110 = 0;
      v32 = v117;
      v117 = v31;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = (uint64_t)v110;
        v110 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v113);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
    }
    else if (v20 == *((_DWORD *)v7 + 192))
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(*((_QWORD *)v7 + 99) + 8) + 40))(__p, *(_QWORD *)(*((_QWORD *)v7 + 99) + 8), &v118);
      v34 = __p[0];
      __p[0] = 0;
      v35 = v117;
      v117 = (uint64_t)v34;
      if (v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = __p[0];
        __p[0] = 0;
        if (v36)
          (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
      }
    }
    else
    {
      v37 = *(_QWORD *)(*((_QWORD *)v7 + 99) + 8);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v113, (uint64_t)&v118, 0, v20, 0, v119);
      kaldi::CuMatrix<float>::CuMatrix<float>(__p, &v113, 111, 0);
      (*(void (**)(_BYTE **__return_ptr, uint64_t, void **))(*(_QWORD *)v37 + 32))(&v110, v37, __p);
      v38 = (uint64_t)v110;
      v110 = 0;
      v39 = v117;
      v117 = v38;
      if (v39)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v40 = (uint64_t)v110;
        v110 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v113);
    }
    v113 = 0;
    v114 = 0uLL;
    v41 = *((_QWORD *)v7 + 99);
    if (v82)
    {
      kaldi::quasar::SeevaStreamInference::RunInferenceFinal(v41, &v117, v81, (uint64_t)&v113);
      v42 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)&v113 + 160))(**(_QWORD **)&v113, 0);
      v43 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)&v113 + 160))(**(_QWORD **)&v113, 1);
      v110 = 0;
      v111 = 0;
      v112 = 0;
      (*(void (**)(_QWORD, _BYTE **))(***(_QWORD ***)&v113 + 48))(**(_QWORD **)&v113, &v110);
      v109 = 0;
      v108 = 0;
      v107 = 0;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(*(_QWORD *)&v113 + 8) + 56))(*(_QWORD *)(*(_QWORD *)&v113 + 8), &v107);
      kaldi::quasar::GetKthNBest(&v110, *((_DWORD *)v7 + 193), v42, v43, 0, (char **)&v104);
      v102 = 0;
      v101 = 0;
      v103 = 0;
      LODWORD(__p[0]) = 0;
      std::vector<float>::resize((uint64_t)&v101, (v105 - (_BYTE *)v104) >> 2, __p);
      if (v105 != v104)
      {
        v44 = (v105 - (_BYTE *)v104) >> 2;
        v45 = (float *)v107;
        v46 = (float *)v101;
        if (v44 <= 1)
          v44 = 1;
        do
        {
          *v46++ = -*v45;
          v45 += v43;
          --v44;
        }
        while (v44);
      }
      v99 = 0;
      v98 = 0;
      v100 = 0;
      v96 = 0;
      v95 = 0;
      v97 = 0;
      quasar::printOneBest(*((kaldi::quasar::Vocab **)v7 + 98), *((_DWORD *)v7 + 125), (uint64_t *)&v104, (uint64_t *)&v101, &v98, (uint64_t)&v95);
      v47 = *(_DWORD *)(*(_QWORD *)a4 + 8);
      v93 = 0;
      v92 = 0;
      v94 = 0;
      std::vector<quasar::Token>::reserve(&v92, 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
      v48 = v98;
      if (v99 != v98)
      {
        v49 = 0;
        v50 = 0;
        do
        {
          v51 = (__int128 *)(v48 + v49);
          v52 = *v51;
          v86 = *((_QWORD *)v51 + 2);
          *(_OWORD *)__p = v52;
          *((_QWORD *)v51 + 1) = 0;
          *((_QWORD *)v51 + 2) = 0;
          *(_QWORD *)v51 = 0;
          LODWORD(v89[0]) = 0;
          LODWORD(v89[0]) = expf(-*((float *)v95 + v50));
          LODWORD(v88[0]) = 0;
          v91 = 0;
          v90 = 0;
          v53 = v93;
          if ((unint64_t)v93 >= v94)
          {
            v54 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>(&v92, (uint64_t)__p, (int *)v88, (int *)&v91 + 1, (int *)&v91, (float *)v89, &v90);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>((uint64_t)&v94, v93, (uint64_t)__p, (int *)v88, (int *)&v91 + 1, (int *)&v91, (float *)v89, &v90);
            v54 = (std::string *)((char *)v53 + 224);
          }
          v93 = v54;
          if (SHIBYTE(v86) < 0)
            operator delete(__p[0]);
          ++v50;
          v48 = v98;
          v49 += 24;
        }
        while (v50 < 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
      }
      memset(v89, 0, sizeof(v89));
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)v89, (uint64_t)&v92);
      __p[0] = (void *)0x7FEFFFFFFFFFFFFFLL;
      std::vector<double>::vector(v88, 1uLL, __p);
      v55 = v82;
      if (v95 != v96)
        *(double *)v88[0] = *(v96 - 1);
      quasar::RecogResult::RecogResult((quasar::RecogResult *)__p);
      v56 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 32);
      v83 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      v84 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = quasar::RecogResult::setParams((uint64_t)__p, &v83);
      v60 = quasar::Token::resetSpacing(v89);
      v61 = quasar::RecogResult::setResultChoices(v59, (uint64_t)v60);
      v62 = (_QWORD *)quasar::RecogResult::setResultCosts(v61, (uint64_t)v88);
      v63 = quasar::RecogResult::setLmeStatus(v62, (uint64_t *)(*a3 + 584));
      started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v63, v47 * (int)v12);
      quasar::RecogResult::setUtteranceDurationMillis(started, v13 * v12);
      v65 = v84;
      if (v84)
      {
        v66 = (unint64_t *)&v84->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(*a3 + 560) + 40))(*(_QWORD *)(*a3 + 560), __p, 1);
      v68 = *a3;
      *(_DWORD *)(v68 + 576) = v13;
      *(_WORD *)(v68 + 580) = 257;
      quasar::RecogResult::~RecogResult((quasar::RecogResult *)__p);
      if (v88[0])
      {
        v88[1] = v88[0];
        operator delete(v88[0]);
      }
      __p[0] = v89;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v92;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v95)
      {
        v96 = (float *)v95;
        operator delete(v95);
      }
      __p[0] = &v98;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v101)
      {
        v102 = v101;
        operator delete(v101);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      if (v107)
      {
        v108 = v107;
        operator delete(v107);
      }
      v69 = v110;
      if (v110)
        goto LABEL_85;
    }
    else
    {
      if ((int)kaldi::quasar::SeevaStreamInference::RunInference(v41, &v117, v81, (v13 - 1) / *((_DWORD *)v7 + 192), v80, &v123, &v122, &v113) < 1)
      {
        v55 = 0;
        goto LABEL_86;
      }
      v110 = 0;
      v111 = 0;
      v112 = 0;
      (*(void (**)(_QWORD, _BYTE **))(***(_QWORD ***)&v113 + 48))(**(_QWORD **)&v113, &v110);
      if (v110 != v111)
      {
        quasar::printOneBest(*((kaldi::quasar::Vocab **)v7 + 98), *((_DWORD *)v7 + 125), (uint64_t *)&v110, 0, v121, 0);
        v70 = *(_QWORD *)(*a3 + 560);
        v71 = *(unsigned int *)(*(_QWORD *)a4 + 12);
        v108 = 0;
        v107 = 0;
        v109 = 0;
        v105 = 0;
        v104 = 0;
        v106 = 0;
        v102 = 0;
        v101 = 0;
        v103 = 0;
        LOBYTE(__p[0]) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
        LOWORD(v78) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, void **, void **, void **, int, void **))(*(_QWORD *)v70 + 24))(v70, v121, v71, 1, (v13 * v12), 0, &v107, &v104, &v101, v78, __p);
        if (v87 < 0)
          operator delete(__p[1]);
        __p[0] = &v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v104;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v107;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      if (v81)
      {
        v69 = v110;
        v81 = v122 > (unint64_t)((v111 - v110) >> 2);
      }
      else
      {
        v81 = 0;
        v69 = v110;
        if (v110 == v111)
          v72 = 0;
        else
          v72 = v16 + v80;
        v80 = v72;
      }
      v55 = 0;
      if (v69)
      {
LABEL_85:
        v111 = v69;
        operator delete(v69);
      }
    }
LABEL_86:
    __p[0] = &v113;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v73 = v117;
    v117 = 0;
    if (v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v118);
  }
  while ((v55 & 1) == 0);
  __p[0] = v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v74 = v125;
  if (v125)
  {
    v75 = (unint64_t *)&v125->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return 0;
}

void sub_1AE05B834(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TensorFstCreator::~TensorFstCreator(kaldi::quasar::TensorFstCreator *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v9 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[3]>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v11;
}

void sub_1AE05BC34(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  int v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  int v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  unint64_t v30;
  float *v31;
  float v32;
  int v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  int v47;
  int v48;
  float v49;
  int v50;
  float v51;
  int v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  int v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float v89;
  int v90;
  float *v91;
  float *v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  float *v98;
  float *v99;
  int v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v39 = *(float *)(a2 - 8);
        v40 = *(float *)v8;
        if (v39 > *(float *)v8)
        {
          *(float *)v8 = v39;
          *(float *)(a2 - 8) = v40;
          v41 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v41;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v8, v8 + 8, a2 - 8);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (float *)(a2 - 8));
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (float *)(v8 + 24));
        v42 = *(float *)(a2 - 8);
        v43 = *(float *)(v8 + 24);
        if (v42 > v43)
        {
          *(float *)(v8 + 24) = v42;
          *(float *)(a2 - 8) = v43;
          v44 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v44;
          v45 = *(float *)(v8 + 24);
          v46 = *(float *)(v8 + 16);
          if (v45 > v46)
          {
            *(float *)(v8 + 16) = v45;
            *(float *)(v8 + 24) = v46;
            v47 = *(_DWORD *)(v8 + 20);
            v48 = *(_DWORD *)(v8 + 28);
            *(_DWORD *)(v8 + 20) = v48;
            *(_DWORD *)(v8 + 28) = v47;
            v49 = *(float *)(v8 + 8);
            if (v45 > v49)
            {
              *(float *)(v8 + 8) = v45;
              *(float *)(v8 + 16) = v49;
              v50 = *(_DWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v48;
              *(_DWORD *)(v8 + 20) = v50;
              v51 = *(float *)v8;
              if (v45 > *(float *)v8)
              {
                *(float *)v8 = v45;
                *(float *)(v8 + 8) = v51;
                v52 = *(_DWORD *)(v8 + 4);
                *(_DWORD *)(v8 + 4) = v48;
                *(_DWORD *)(v8 + 12) = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v53 = v8 + 8;
          v55 = v8 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v8;
              do
              {
                v58 = v53;
                v59 = *(float *)(v57 + 8);
                v60 = *(float *)v57;
                if (v59 > *(float *)v57)
                {
                  v61 = *(_DWORD *)(v57 + 12);
                  v62 = v56;
                  while (1)
                  {
                    v63 = v8 + v62;
                    *(float *)(v63 + 8) = v60;
                    *(_DWORD *)(v63 + 12) = *(_DWORD *)(v8 + v62 + 4);
                    if (!v62)
                      break;
                    v60 = *(float *)(v63 - 8);
                    v62 -= 8;
                    if (v59 <= v60)
                    {
                      v64 = v8 + v62 + 8;
                      goto LABEL_79;
                    }
                  }
                  v64 = v8;
LABEL_79:
                  *(float *)v64 = v59;
                  *(_DWORD *)(v64 + 4) = v61;
                }
                v53 = v58 + 8;
                v56 += 8;
                v57 = v58;
              }
              while (v58 + 8 != a2);
            }
          }
          else if (!v55)
          {
            v93 = (float *)(v8 + 12);
            do
            {
              v94 = v53;
              v95 = *(float *)(v7 + 8);
              v96 = *(float *)v7;
              if (v95 > *(float *)v7)
              {
                v97 = *(_DWORD *)(v7 + 12);
                v98 = v93;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = v96;
                  v100 = *((_DWORD *)v98 - 2);
                  v98 -= 2;
                  *(_DWORD *)v99 = v100;
                  v96 = *(v99 - 5);
                }
                while (v95 > v96);
                *(v98 - 1) = v95;
                *(_DWORD *)v98 = v97;
              }
              v53 = v94 + 8;
              v93 += 2;
              v7 = v94;
            }
            while (v94 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 8 * v68;
                if (2 * v67 + 2 < (uint64_t)v10 && *(float *)v69 > *(float *)(v69 + 8))
                {
                  v69 += 8;
                  v68 = 2 * v67 + 2;
                }
                v70 = v8 + 8 * v67;
                v71 = *(float *)v69;
                v72 = *(float *)v70;
                if (*(float *)v69 <= *(float *)v70)
                {
                  v73 = *(_DWORD *)(v70 + 4);
                  do
                  {
                    v74 = (float *)v70;
                    v70 = v69;
                    *v74 = v71;
                    v74[1] = *(float *)(v69 + 4);
                    if (v65 < v68)
                      break;
                    v75 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = v8 + 8 * v68;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(float *)v69 > *(float *)(v69 + 8))
                    {
                      v69 += 8;
                      v68 = v76;
                    }
                    v71 = *(float *)v69;
                  }
                  while (*(float *)v69 <= v72);
                  *(float *)v70 = v72;
                  *(_DWORD *)(v70 + 4) = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v79 = *(float *)v8;
              v80 = *(_DWORD *)(v8 + 4);
              v81 = (_DWORD *)v8;
              do
              {
                v82 = v81;
                v81 += 2 * v78 + 2;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77 && *(float *)v81 > *((float *)v81 + 2))
                {
                  v81 += 2;
                  v78 = v84;
                }
                *v82 = *v81;
                v82[1] = v81[1];
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == (_DWORD *)(a2 - 8))
              {
                *(float *)v81 = v79;
                v81[1] = v80;
              }
              else
              {
                *v81 = *(_DWORD *)(a2 - 8);
                v81[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v79;
                *(_DWORD *)(a2 - 4) = v80;
                v85 = (uint64_t)v81 - v8 + 8;
                if (v85 >= 9)
                {
                  v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                  v87 = (float *)(v8 + 8 * v86);
                  v88 = *v87;
                  v89 = *(float *)v81;
                  if (*v87 > *(float *)v81)
                  {
                    v90 = v81[1];
                    do
                    {
                      v91 = (float *)v81;
                      v81 = v87;
                      *v91 = v88;
                      v91[1] = v87[1];
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (float *)(v8 + 8 * v86);
                      v88 = *v87;
                    }
                    while (*v87 > v89);
                    *(float *)v81 = v89;
                    v81[1] = v90;
                  }
                }
              }
              a2 -= 8;
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (_DWORD *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 8 * (v10 >> 1), v7, a2 - 8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7, v7 + 8 * (v10 >> 1), a2 - 8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 8, (uint64_t)(v12 - 2), a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 16, v7 + 8 + 8 * v11, a2 - 24);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((uint64_t)(v12 - 2), (uint64_t)v12, v7 + 8 + 8 * v11);
          v13 = *(float *)v7;
          *(_DWORD *)v7 = *v12;
          *(float *)v12 = v13;
          v14 = *(_DWORD *)(v7 + 4);
          *(_DWORD *)(v7 + 4) = v12[1];
          v12[1] = v14;
        }
        --a3;
        v15 = *(float *)v7;
        if ((a4 & 1) == 0 && *(float *)(v7 - 8) <= v15)
        {
          if (v15 <= *(float *)(a2 - 8))
          {
            v30 = v7 + 8;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 8;
            }
            while (v15 <= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v15 <= v29);
          }
          v31 = (float *)a2;
          if (v8 < a2)
          {
            v31 = (float *)a2;
            do
            {
              v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v15 > v32);
          }
          v33 = *(_DWORD *)(v7 + 4);
          if (v8 < (unint64_t)v31)
          {
            v34 = *(float *)v8;
            v35 = *v31;
            do
            {
              *(float *)v8 = v35;
              *v31 = v34;
              v36 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v31[1];
              *((_DWORD *)v31 + 1) = v36;
              do
              {
                v37 = *(float *)(v8 + 8);
                v8 += 8;
                v34 = v37;
              }
              while (v15 <= v37);
              do
              {
                v38 = *(v31 - 2);
                v31 -= 2;
                v35 = v38;
              }
              while (v15 > v38);
            }
            while (v8 < (unint64_t)v31);
          }
          if (v8 - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v15;
          *(_DWORD *)(v8 - 4) = v33;
          continue;
        }
        v16 = 0;
        v17 = *(_DWORD *)(v7 + 4);
        do
        {
          v18 = *(float *)(v7 + v16 + 8);
          v16 += 8;
        }
        while (v18 > v15);
        v19 = v7 + v16;
        v20 = (float *)a2;
        if (v16 == 8)
        {
          v20 = (float *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 <= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 <= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v16;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v16;
          v24 = v20;
          do
          {
            *(float *)v8 = v23;
            *v24 = v18;
            v25 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v24[1];
            *((_DWORD *)v24 + 1) = v25;
            do
            {
              v26 = *(float *)(v8 + 8);
              v8 += 8;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 8 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v15;
        *(_DWORD *)(v8 - 4) = v17;
        if (v19 < (unint64_t)v20)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7, v8 - 8);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 8;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  int v7;
  float v8;
  int v9;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 <= *(float *)result)
  {
    if (v5 > v3)
    {
      *(float *)a2 = v5;
      *(float *)a3 = v3;
      v7 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v7;
      v8 = *(float *)result;
      if (*(float *)a2 > *(float *)result)
      {
        *(_DWORD *)result = *(_DWORD *)a2;
        *(float *)a2 = v8;
        v9 = *(_DWORD *)(result + 4);
        *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v9;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v6 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v6;
      if (*(float *)a3 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    }
    else
    {
      *(float *)result = v5;
      *(float *)a3 = v4;
      v6 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
    }
    *(_DWORD *)(a3 + 4) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  int v29;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 > *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a2 - 8));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24));
      v19 = *(float *)(a2 - 8);
      v20 = *(float *)(a1 + 24);
      if (v19 > v20)
      {
        *(float *)(a1 + 24) = v19;
        *(float *)(a2 - 8) = v20;
        v21 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v21;
        v22 = *(float *)(a1 + 24);
        v23 = *(float *)(a1 + 16);
        if (v22 > v23)
        {
          *(float *)(a1 + 16) = v22;
          *(float *)(a1 + 24) = v23;
          v24 = *(_DWORD *)(a1 + 20);
          v25 = *(_DWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 20) = v25;
          *(_DWORD *)(a1 + 28) = v24;
          v26 = *(float *)(a1 + 8);
          if (v22 > v26)
          {
            *(float *)(a1 + 8) = v22;
            *(float *)(a1 + 16) = v26;
            v27 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v25;
            *(_DWORD *)(a1 + 20) = v27;
            v28 = *(float *)a1;
            if (v22 > *(float *)a1)
            {
              *(float *)a1 = v22;
              *(float *)(a1 + 8) = v28;
              v29 = *(_DWORD *)(a1 + 4);
              *(_DWORD *)(a1 + 4) = v25;
              *(_DWORD *)(a1 + 12) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16);
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 > *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 <= v14)
        {
          v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(float *)v18 = v13;
      *(_DWORD *)(v18 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    v11 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v12;
      v13 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  int v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  int v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  unint64_t v30;
  float *v31;
  float v32;
  int v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  int v47;
  int v48;
  float v49;
  int v50;
  float v51;
  int v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  int v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float v89;
  int v90;
  float *v91;
  float *v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  float *v98;
  float *v99;
  int v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v39 = *(float *)(a2 - 8);
        v40 = *(float *)v8;
        if (v39 > *(float *)v8)
        {
          *(float *)v8 = v39;
          *(float *)(a2 - 8) = v40;
          v41 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v41;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v8, v8 + 8, a2 - 8);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (float *)(a2 - 8));
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (float *)(v8 + 24));
        v42 = *(float *)(a2 - 8);
        v43 = *(float *)(v8 + 24);
        if (v42 > v43)
        {
          *(float *)(v8 + 24) = v42;
          *(float *)(a2 - 8) = v43;
          v44 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v44;
          v45 = *(float *)(v8 + 24);
          v46 = *(float *)(v8 + 16);
          if (v45 > v46)
          {
            *(float *)(v8 + 16) = v45;
            *(float *)(v8 + 24) = v46;
            v47 = *(_DWORD *)(v8 + 20);
            v48 = *(_DWORD *)(v8 + 28);
            *(_DWORD *)(v8 + 20) = v48;
            *(_DWORD *)(v8 + 28) = v47;
            v49 = *(float *)(v8 + 8);
            if (v45 > v49)
            {
              *(float *)(v8 + 8) = v45;
              *(float *)(v8 + 16) = v49;
              v50 = *(_DWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v48;
              *(_DWORD *)(v8 + 20) = v50;
              v51 = *(float *)v8;
              if (v45 > *(float *)v8)
              {
                *(float *)v8 = v45;
                *(float *)(v8 + 8) = v51;
                v52 = *(_DWORD *)(v8 + 4);
                *(_DWORD *)(v8 + 4) = v48;
                *(_DWORD *)(v8 + 12) = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v53 = v8 + 8;
          v55 = v8 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v8;
              do
              {
                v58 = v53;
                v59 = *(float *)(v57 + 8);
                v60 = *(float *)v57;
                if (v59 > *(float *)v57)
                {
                  v61 = *(_DWORD *)(v57 + 12);
                  v62 = v56;
                  while (1)
                  {
                    v63 = v8 + v62;
                    *(float *)(v63 + 8) = v60;
                    *(_DWORD *)(v63 + 12) = *(_DWORD *)(v8 + v62 + 4);
                    if (!v62)
                      break;
                    v60 = *(float *)(v63 - 8);
                    v62 -= 8;
                    if (v59 <= v60)
                    {
                      v64 = v8 + v62 + 8;
                      goto LABEL_79;
                    }
                  }
                  v64 = v8;
LABEL_79:
                  *(float *)v64 = v59;
                  *(_DWORD *)(v64 + 4) = v61;
                }
                v53 = v58 + 8;
                v56 += 8;
                v57 = v58;
              }
              while (v58 + 8 != a2);
            }
          }
          else if (!v55)
          {
            v93 = (float *)(v8 + 12);
            do
            {
              v94 = v53;
              v95 = *(float *)(v7 + 8);
              v96 = *(float *)v7;
              if (v95 > *(float *)v7)
              {
                v97 = *(_DWORD *)(v7 + 12);
                v98 = v93;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = v96;
                  v100 = *((_DWORD *)v98 - 2);
                  v98 -= 2;
                  *(_DWORD *)v99 = v100;
                  v96 = *(v99 - 5);
                }
                while (v95 > v96);
                *(v98 - 1) = v95;
                *(_DWORD *)v98 = v97;
              }
              v53 = v94 + 8;
              v93 += 2;
              v7 = v94;
            }
            while (v94 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 8 * v68;
                if (2 * v67 + 2 < (uint64_t)v10 && *(float *)v69 > *(float *)(v69 + 8))
                {
                  v69 += 8;
                  v68 = 2 * v67 + 2;
                }
                v70 = v8 + 8 * v67;
                v71 = *(float *)v69;
                v72 = *(float *)v70;
                if (*(float *)v69 <= *(float *)v70)
                {
                  v73 = *(_DWORD *)(v70 + 4);
                  do
                  {
                    v74 = (float *)v70;
                    v70 = v69;
                    *v74 = v71;
                    v74[1] = *(float *)(v69 + 4);
                    if (v65 < v68)
                      break;
                    v75 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = v8 + 8 * v68;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(float *)v69 > *(float *)(v69 + 8))
                    {
                      v69 += 8;
                      v68 = v76;
                    }
                    v71 = *(float *)v69;
                  }
                  while (*(float *)v69 <= v72);
                  *(float *)v70 = v72;
                  *(_DWORD *)(v70 + 4) = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v79 = *(float *)v8;
              v80 = *(_DWORD *)(v8 + 4);
              v81 = (_DWORD *)v8;
              do
              {
                v82 = v81;
                v81 += 2 * v78 + 2;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77 && *(float *)v81 > *((float *)v81 + 2))
                {
                  v81 += 2;
                  v78 = v84;
                }
                *v82 = *v81;
                v82[1] = v81[1];
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == (_DWORD *)(a2 - 8))
              {
                *(float *)v81 = v79;
                v81[1] = v80;
              }
              else
              {
                *v81 = *(_DWORD *)(a2 - 8);
                v81[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v79;
                *(_DWORD *)(a2 - 4) = v80;
                v85 = (uint64_t)v81 - v8 + 8;
                if (v85 >= 9)
                {
                  v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                  v87 = (float *)(v8 + 8 * v86);
                  v88 = *v87;
                  v89 = *(float *)v81;
                  if (*v87 > *(float *)v81)
                  {
                    v90 = v81[1];
                    do
                    {
                      v91 = (float *)v81;
                      v81 = v87;
                      *v91 = v88;
                      v91[1] = v87[1];
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (float *)(v8 + 8 * v86);
                      v88 = *v87;
                    }
                    while (*v87 > v89);
                    *(float *)v81 = v89;
                    v81[1] = v90;
                  }
                }
              }
              a2 -= 8;
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (_DWORD *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 8 * (v10 >> 1), v7, a2 - 8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7, v7 + 8 * (v10 >> 1), a2 - 8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 8, (uint64_t)(v12 - 2), a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(v7 + 16, v7 + 8 + 8 * v11, a2 - 24);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((uint64_t)(v12 - 2), (uint64_t)v12, v7 + 8 + 8 * v11);
          v13 = *(float *)v7;
          *(_DWORD *)v7 = *v12;
          *(float *)v12 = v13;
          v14 = *(_DWORD *)(v7 + 4);
          *(_DWORD *)(v7 + 4) = v12[1];
          v12[1] = v14;
        }
        --a3;
        v15 = *(float *)v7;
        if ((a4 & 1) == 0 && *(float *)(v7 - 8) <= v15)
        {
          if (v15 <= *(float *)(a2 - 8))
          {
            v30 = v7 + 8;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 8;
            }
            while (v15 <= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v15 <= v29);
          }
          v31 = (float *)a2;
          if (v8 < a2)
          {
            v31 = (float *)a2;
            do
            {
              v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v15 > v32);
          }
          v33 = *(_DWORD *)(v7 + 4);
          if (v8 < (unint64_t)v31)
          {
            v34 = *(float *)v8;
            v35 = *v31;
            do
            {
              *(float *)v8 = v35;
              *v31 = v34;
              v36 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v31[1];
              *((_DWORD *)v31 + 1) = v36;
              do
              {
                v37 = *(float *)(v8 + 8);
                v8 += 8;
                v34 = v37;
              }
              while (v15 <= v37);
              do
              {
                v38 = *(v31 - 2);
                v31 -= 2;
                v35 = v38;
              }
              while (v15 > v38);
            }
            while (v8 < (unint64_t)v31);
          }
          if (v8 - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v15;
          *(_DWORD *)(v8 - 4) = v33;
          continue;
        }
        v16 = 0;
        v17 = *(_DWORD *)(v7 + 4);
        do
        {
          v18 = *(float *)(v7 + v16 + 8);
          v16 += 8;
        }
        while (v18 > v15);
        v19 = v7 + v16;
        v20 = (float *)a2;
        if (v16 == 8)
        {
          v20 = (float *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 <= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 <= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v16;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v16;
          v24 = v20;
          do
          {
            *(float *)v8 = v23;
            *v24 = v18;
            v25 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v24[1];
            *((_DWORD *)v24 + 1) = v25;
            do
            {
              v26 = *(float *)(v8 + 8);
              v8 += 8;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 8 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v15;
        *(_DWORD *)(v8 - 4) = v17;
        if (v19 < (unint64_t)v20)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *>(v7, v8 - 8);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 8;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_1 &,std::pair<float,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  int v29;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 > *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a2 - 8));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24));
      v19 = *(float *)(a2 - 8);
      v20 = *(float *)(a1 + 24);
      if (v19 > v20)
      {
        *(float *)(a1 + 24) = v19;
        *(float *)(a2 - 8) = v20;
        v21 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v21;
        v22 = *(float *)(a1 + 24);
        v23 = *(float *)(a1 + 16);
        if (v22 > v23)
        {
          *(float *)(a1 + 16) = v22;
          *(float *)(a1 + 24) = v23;
          v24 = *(_DWORD *)(a1 + 20);
          v25 = *(_DWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 20) = v25;
          *(_DWORD *)(a1 + 28) = v24;
          v26 = *(float *)(a1 + 8);
          if (v22 > v26)
          {
            *(float *)(a1 + 8) = v22;
            *(float *)(a1 + 16) = v26;
            v27 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v25;
            *(_DWORD *)(a1 + 20) = v27;
            v28 = *(float *)a1;
            if (v22 > *(float *)a1)
            {
              *(float *)a1 = v22;
              *(float *)(a1 + 8) = v28;
              v29 = *(_DWORD *)(a1 + 4);
              *(_DWORD *)(a1 + 4) = v25;
              *(_DWORD *)(a1 + 12) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::RescoreWithLMs(quasar::FstLmScorer const*,kaldi::quasar::Vocab const&,std::unordered_map<std::string,std::vector<std::string>> const&,std::string const&,std::string const&,BOOL,BOOL,int,float,std::vector<std::vector<int>> const&,std::vector<std::vector<float>> const&,std::vector<float> const&,std::vector<std::string>&,std::vector<float>&)::$_0 &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16);
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 > *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 <= v14)
        {
          v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(float *)v18 = v13;
      *(_DWORD *)(v18 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

kaldi::quasar::SeevaInferenceConfig *kaldi::quasar::SeevaInferenceConfig::SeevaInferenceConfig(kaldi::quasar::SeevaInferenceConfig *this, const kaldi::quasar::SeevaInferenceConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)this = &unk_1E5D33A48;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v4;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  v8 = (std::string *)((char *)this + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1AE05D1B0(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[111] < 0)
    operator delete(*v4);
  if (v1[79] < 0)
    operator delete(*v3);
  if (v1[55] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

kaldi::quasar::SeevaStreamInferenceTensorNames *kaldi::quasar::SeevaStreamInferenceTensorNames::SeevaStreamInferenceTensorNames(kaldi::quasar::SeevaStreamInferenceTensorNames *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "SeevaModel/__QNNI__source_input") + 3;
  std::string::basic_string[abi:ne180100]<0>(v2, "SeevaModel/__QNNI__length_penalty_weight");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "SeevaModel/__QNNI__coverage_penalty_weight");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "SeevaModel/__QNNI__minimum_input_count");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "SeevaModel/__QNNI__minimum_input_left");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 15, "SeevaModel/__QNNI__minimum_alignment_weight");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, "SeevaModel/__QNNI__minimum_peak_alignment");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 21, "SeevaModel/__QNNI__stable_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 24, "SeevaModel/__QNNI__utt_end_beam");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 27, "SeevaModel/__QNNI__trace_back");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 30, "SeevaModel/decoder/__QNNO__nbest_list");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 33, "SeevaModel/decoder/__QNNO__nbest_score");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 36, "SeevaModel/decoder/__QNNO__graph_reset");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 39, "SeevaModel/decoder/__QNNO__partial_result");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 42, "SeevaModel/decoder/__QNNO__encoder_only");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 45, "SeevaModel/__QNNI__lme_fst_header");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 48, "SeevaModel/__QNNI__lme_fst_states");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 51, "SeevaModel/__QNNI__lme_fst_arcs");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 54, "SeevaModel/__QNNI__lme_score_scale");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 57, "SeevaModel/__QNNI__nonlme_score_scale");
  return this;
}

void sub_1AE05D3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;

  if (*(char *)(v18 + 455) < 0)
    operator delete(*v26);
  if (*(char *)(v18 + 431) < 0)
    operator delete(*v27);
  if (*(char *)(v18 + 407) < 0)
    operator delete(*v25);
  if (*(char *)(v18 + 383) < 0)
    operator delete(*v24);
  if (*(char *)(v18 + 359) < 0)
    operator delete(*v23);
  if (*(char *)(v18 + 335) < 0)
    operator delete(*v22);
  if (*(char *)(v18 + 311) < 0)
    operator delete(*v21);
  if (*(char *)(v18 + 287) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 263) < 0)
    operator delete(*v19);
  if (*(char *)(v18 + 239) < 0)
    operator delete(*a10);
  if (*(char *)(v18 + 215) < 0)
    operator delete(*a11);
  if (*(char *)(v18 + 191) < 0)
    operator delete(*a12);
  if (*(char *)(v18 + 167) < 0)
    operator delete(*a13);
  if (*(char *)(v18 + 143) < 0)
    operator delete(*a14);
  if (*(char *)(v18 + 119) < 0)
    operator delete(*a15);
  if (*(char *)(v18 + 95) < 0)
    operator delete(*a16);
  if (*(char *)(v18 + 71) < 0)
    operator delete(*a17);
  if (*(char *)(v18 + 47) < 0)
    operator delete(*a18);
  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(a1);
}

void sub_1AE05D58C()
{
  JUMPOUT(0x1AE05D4C0);
}

void sub_1AE05D594()
{
  JUMPOUT(0x1AE05D4D4);
}

void sub_1AE05D59C()
{
  JUMPOUT(0x1AE05D4E8);
}

void sub_1AE05D5A4()
{
  JUMPOUT(0x1AE05D4FCLL);
}

void sub_1AE05D5AC()
{
  JUMPOUT(0x1AE05D510);
}

void sub_1AE05D5B4()
{
  JUMPOUT(0x1AE05D524);
}

void sub_1AE05D5BC()
{
  JUMPOUT(0x1AE05D538);
}

void sub_1AE05D5C4()
{
  JUMPOUT(0x1AE05D54CLL);
}

void sub_1AE05D5CC()
{
  JUMPOUT(0x1AE05D560);
}

void sub_1AE05D5D4()
{
  JUMPOUT(0x1AE05D574);
}

uint64_t quasar::PronChoice::PronChoice(uint64_t a1, int a2, uint64_t a3, float a4)
{
  uint64_t v5;
  int v6;
  int v8;
  int v9;
  float v10;
  std::vector<char>::pointer v11;
  const void *v12;
  int v13;
  std::vector<char>::pointer v14;
  std::vector<char>::pointer begin;
  int v16;
  int v17;
  std::vector<char> v19;
  _BYTE v20[40];
  std::vector<char> v21;
  std::vector<char> v22;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(float *)(a1 + 32) = a4;
  v6 = *(_DWORD *)(a3 + 16);
  if (v6)
  {
    if (a2 == 6)
    {
      v16 = 4 * v6;
      v17 = Base64encode_len(4 * v6);
      std::vector<char>::vector(&v19, v17);
      Base64encode(v19.__begin_, *(_QWORD *)(a3 + 8), v16);
      MEMORY[0x1AF44C914](v5, v19.__begin_);
      begin = v19.__begin_;
      if (v19.__begin_)
      {
        v19.__end_ = v19.__begin_;
        goto LABEL_10;
      }
    }
    else if (a2 == 7)
    {
      v8 = v6 + 4;
      v9 = Base64encode_len(v6 + 4);
      std::vector<char>::vector(&v22, v8);
      std::vector<char>::vector(&v21, v9);
      kaldi::Matrix<float>::Matrix((uint64_t)v20, *(_QWORD *)(a3 + 8), 1, *(_DWORD *)(a3 + 16), 1);
      kaldi::QuantizedMatrix<signed char>::QuantizedMatrix((uint64_t)&v19, (uint64_t)v20);
      v10 = *((float *)&v19.__end_ + 1);
      v11 = v22.__begin_;
      v12 = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)&v19);
      v13 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)&v19);
      memcpy(v11, v12, v13);
      v14 = v22.__begin_;
      *(float *)&v14[(int)kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)&v19)] = 1.0 / v10;
      Base64encode(v21.__begin_, (uint64_t)v22.__begin_, v8);
      MEMORY[0x1AF44C914](v5, v21.__begin_);
      kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&v19);
      kaldi::Matrix<float>::~Matrix((uint64_t)v20);
      if (v21.__begin_)
      {
        v21.__end_ = v21.__begin_;
        operator delete(v21.__begin_);
      }
      begin = v22.__begin_;
      if (v22.__begin_)
      {
        v22.__end_ = v22.__begin_;
LABEL_10:
        operator delete(begin);
      }
    }
  }
  return a1;
}

void sub_1AE05D76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void **v23;

  if (*(char *)(v22 + 31) < 0)
    operator delete(*v23);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PronChoice::toString(quasar::PronChoice *this)
{
  _QWORD *v2;
  int v3;
  char *v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  char *v8;
  size_t v9;
  _QWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"1", 1);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"#", 1);
    v3 = *((char *)this + 31);
    if (v3 >= 0)
      v4 = (char *)this + 8;
    else
      v4 = (char *)*((_QWORD *)this + 1);
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)this + 31);
    else
      v5 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    v6 = "#";
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"2", 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"#", 1);
    v8 = quasar::PronTypeToString(*(_DWORD *)this);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\t", 1);
    v11 = *((char *)this + 31);
    if (v11 >= 0)
      v12 = (char *)this + 8;
    else
      v12 = (char *)*((_QWORD *)this + 1);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)this + 31);
    else
      v13 = *((_QWORD *)this + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    v6 = "\t";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v14;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v19);
}

void sub_1AE05D9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::PronChoice::fromString(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  char v5;
  int64_t size;
  std::string *v7;
  _BYTE *v8;
  std::string *v9;
  _BYTE *v10;
  _BOOL4 v11;
  const std::string *v12;
  BOOL v13;
  _BOOL4 v14;
  const char *v15;
  float v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34[2];
  char v35;
  std::string v36;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = (std::string *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v5 >= 0)
    v7 = __str;
  else
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v8 = (char *)v7 + size;
    v9 = v7;
    while (1)
    {
      v10 = memchr(v9, 35, size);
      if (!v10)
        goto LABEL_22;
      if (*v10 == 35)
        break;
      v9 = (std::string *)(v10 + 1);
      size = v8 - (_BYTE *)v9;
      if (v8 - (_BYTE *)v9 < 1)
        goto LABEL_22;
    }
    if (v10 != v8 && v10 - (_BYTE *)v7 != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "1#");
      v11 = quasar::startsWith((unsigned __int8 *)__str, (unsigned __int8 *)__p);
      if (SBYTE7(v18) < 0)
        operator delete(__p[0]);
      if (v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, "#");
        quasar::split((uint64_t)__str, (uint64_t *)&v36, 0, (uint64_t)__p);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v12 = (const std::string *)__p[0];
        v13 = (void *)((char *)__p[1] - (char *)__p[0]) == (void *)72;
        if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)72)
        {
          *(_DWORD *)a2 = 1;
          std::string::operator=(v4, v12 + 1);
LABEL_33:
          v15 = (char *)__p[0] + 48;
          if (*((char *)__p[0] + 71) < 0)
            v15 = *(const char **)v15;
          v16 = atof(v15);
          *(float *)(a2 + 32) = v16;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "2#");
        v14 = quasar::startsWith((unsigned __int8 *)__str, (unsigned __int8 *)__p);
        if (SBYTE7(v18) < 0)
          operator delete(__p[0]);
        if (!v14)
        {
          if (quasar::gLogLevel >= 4)
          {
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            v20 = 0u;
            v21 = 0u;
            v18 = 0u;
            v19 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Version mismatch for PronChoice", 31);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          }
LABEL_40:
          if (quasar::gLogLevel >= 4)
          {
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            v20 = 0u;
            v21 = 0u;
            v18 = 0u;
            v19 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown format for pronunciation string", 39);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          }
          return;
        }
        std::string::basic_string(&v36, __str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v34);
        std::string::basic_string[abi:ne180100]<0>(v34, "\t");
        quasar::split((uint64_t)&v36, (uint64_t *)v34, 0, (uint64_t)__p);
        if (v35 < 0)
          operator delete(v34[0]);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v13 = (void *)((char *)__p[1] - (char *)__p[0]) == (void *)72;
        if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)72)
        {
          *(_DWORD *)a2 = quasar::StringToPronType((uint64_t *)__p[0]);
          std::string::operator=(v4, (const std::string *)__p[0] + 1);
          goto LABEL_33;
        }
      }
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
      if (v13)
        return;
      goto LABEL_40;
    }
  }
LABEL_22:
  *(_DWORD *)a2 = 1;
  std::string::operator=(v4, __str);
}

void sub_1AE05DCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v15);
  _Unwind_Resume(a1);
}

BOOL quasar::PronChoice::compatibleWithEmbeddingDim(int a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  if (a1 == 6)
  {
    v3 = 4 * a3;
  }
  else
  {
    if (a1 != 7)
      return 0;
    v3 = a3 + 4;
  }
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  return v4 == Base64encode_len(v3) - 1;
}

uint64_t quasar::PronChoice::pronToEmbeddingVector(int a1, uint64_t a2, float *a3, int a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  std::vector<char>::pointer v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char *begin;
  std::vector<char> v18;

  if (a1 == 6)
  {
    v13 = 4 * a4;
    if (*(char *)(a2 + 23) >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    if (v14 == Base64encode_len(v13) - 1)
    {
      std::vector<char>::vector(&v18, v13 | 1);
      if (*(char *)(a2 + 23) >= 0)
        v15 = (unsigned __int8 *)a2;
      else
        v15 = *(unsigned __int8 **)a2;
      Base64decode(v18.__begin_, v15);
      begin = v18.__begin_;
      memcpy(a3, v18.__begin_, v13);
      if (!begin)
        return 1;
      v18.__end_ = begin;
      v9 = begin;
      goto LABEL_26;
    }
    return 0;
  }
  if (a1 != 7)
    return 0;
  v7 = *(char *)(a2 + 23) >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  if (v7 != Base64encode_len(a4 + 4) - 1)
    return 0;
  std::vector<char>::vector(&v18, a4 + 5);
  if (*(char *)(a2 + 23) >= 0)
    v8 = (unsigned __int8 *)a2;
  else
    v8 = *(unsigned __int8 **)a2;
  Base64decode(v18.__begin_, v8);
  v9 = v18.__begin_;
  if (a4 >= 1)
  {
    v10 = v18.__begin_;
    v11 = a4;
    do
    {
      v12 = *v10++;
      *a3++ = *(float *)&v9[a4] * (float)v12;
      --v11;
    }
    while (v11);
    goto LABEL_25;
  }
  if (v18.__begin_)
  {
LABEL_25:
    v18.__end_ = v9;
LABEL_26:
    operator delete(v9);
  }
  return 1;
}

void sub_1AE05DF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PronCombinator::operator()(int *a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  std::vector<int>::size_type v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  size_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  std::string *p_s2;
  std::string::size_type size;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::string __s2;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  std::vector<int> v59;
  std::vector<int>::value_type __x[4];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  char *v79;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v8 = (uint64_t)a4;
    if (v5 - v4 == 24)
    {
      v9 = *(_QWORD *)v4;
      if (*((_QWORD *)v4 + 1) != *(_QWORD *)v4)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        do
        {
          if ((uint64_t)v12 >= *a1)
            break;
          v13 = (__int128 *)(v9 + v10);
          if (v11 >= *(_QWORD *)(v8 + 16))
          {
            v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v8, v13);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v8, v13);
            v11 += 24;
          }
          *(_QWORD *)(v8 + 8) = v11;
          ++v12;
          v9 = *(_QWORD *)*a2;
          v10 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)*a2 + 1) - v9) >> 3) > v12);
      }
    }
    else
    {
      v15 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      do
      {
        v16 = *((_QWORD *)v4 + 1);
        if (*(_QWORD *)v4 == v16)
        {
          if (quasar::gLogLevel >= 5)
          {
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            *(_OWORD *)__x = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Empty pronunciations for one of the tokens. Exiting with 0 pron combinations.", 77);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__x);
          }
          std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v8);
          goto LABEL_91;
        }
        v17 = -1431655765 * ((unint64_t)(v16 - *(_QWORD *)v4) >> 3);
        if (v15 >= v79)
        {
          v19 = v77;
          v20 = (v15 - v77) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v79 - v77;
          if ((v79 - v77) >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v79, v23);
            v19 = v77;
            v15 = v78;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = v17;
          v18 = v25 + 4;
          while (v15 != v19)
          {
            v26 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          v77 = v25;
          v78 = v18;
          v79 = &v24[4 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v15 = v17;
          v18 = v15 + 4;
        }
        v78 = v18;
        v4 += 24;
        v15 = v18;
      }
      while (v4 != v5);
      memset(&v59, 0, sizeof(v59));
      v27 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      __x[0] = 0;
      std::vector<int>::resize(&v59, v27, __x);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v28 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v56, (uint64_t)&v59);
      v29 = (uint64_t)v56;
      v57 = (_QWORD *)v28;
      if ((_QWORD *)v28 != v56)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v56) >> 3) < *a1)
        {
          v30 = 0;
          do
          {
            memset(__x, 0, sizeof(__x));
            *(_QWORD *)&v61 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)(v29 + 24 * v30), *(_QWORD *)(v29 + 24 * v30 + 8), (uint64_t)(*(_QWORD *)(v29 + 24 * v30 + 8) - *(_QWORD *)(v29 + 24 * v30)) >> 2);
            v31 = v77;
            if (v78 != v77)
            {
              v32 = 0;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)__x + 4 * v32) + 1 < *(_DWORD *)&v31[4 * v32])
                {
                  memset(&__s2, 0, sizeof(__s2));
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)__x, *(uint64_t *)&__x[2], (uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 2);
                  v33 = (void *)__s2.__r_.__value_.__r.__words[0];
                  *(_DWORD *)(__s2.__r_.__value_.__r.__words[0] + 4 * v32) = *(_DWORD *)(*(_QWORD *)__x + 4 * v32) + 1;
                  v35 = (uint64_t)v56;
                  v34 = v57;
                  if (v56 == v57)
                    goto LABEL_43;
                  v36 = 0;
                  v37 = __s2.__r_.__value_.__l.__size_ - (_QWORD)v33;
                  do
                  {
                    v38 = *(_QWORD *)(v35 + 8) - *(_QWORD *)v35 == v37 && memcmp(*(const void **)v35, v33, v37) == 0;
                    v36 |= v38;
                    v35 += 24;
                  }
                  while ((_QWORD *)v35 != v34);
                  if ((v36 & 1) == 0)
                  {
LABEL_43:
                    if ((unint64_t)v34 >= v58)
                    {
                      v39 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v56, (uint64_t)&__s2);
                    }
                    else
                    {
                      *v34 = 0;
                      v34[1] = 0;
                      v34[2] = 0;
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v34, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_, (uint64_t)(__s2.__r_.__value_.__l.__size_ - __s2.__r_.__value_.__r.__words[0]) >> 2);
                      v39 = (uint64_t)(v34 + 3);
                    }
                    v57 = (_QWORD *)v39;
                    v33 = (void *)__s2.__r_.__value_.__r.__words[0];
                  }
                  if (v33)
                  {
                    __s2.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
                    operator delete(v33);
                  }
                  v8 = (uint64_t)a4;
                }
                if (0xAAAAAAAAAAAAAAABLL * (v57 - v56) >= *a1)
                  break;
                ++v32;
                v31 = v77;
              }
              while (v32 < (v78 - v77) >> 2);
            }
            if (*(_QWORD *)__x)
            {
              *(_QWORD *)&__x[2] = *(_QWORD *)__x;
              operator delete(*(void **)__x);
            }
            ++v30;
            v29 = (uint64_t)v56;
            v28 = (uint64_t)v57;
            v40 = 0xAAAAAAAAAAAAAAABLL * (v57 - v56);
          }
          while (v40 > v30 && v40 < *a1);
        }
        if (v28 != v29)
        {
          v41 = 0;
          while (1)
          {
            v42 = *(_QWORD *)*a2 + 24 * **(int **)(v29 + 24 * v41);
            if (*(char *)(v42 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
              v29 = (uint64_t)v56;
            }
            else
            {
              v43 = *(_OWORD *)v42;
              __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
              *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v43;
            }
            v44 = *(_QWORD *)(v29 + 24 * v41);
            if ((unint64_t)(*(_QWORD *)(v29 + 24 * v41 + 8) - v44) >= 5)
              break;
LABEL_69:
            if (quasar::gLogLevel > 5)
            {
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              *(_OWORD *)__x = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
              v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"pron combination = ", 19);
              if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s2 = &__s2;
              else
                p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
              if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
              else
                size = __s2.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_s2, size);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__x);
            }
            v51 = *(_QWORD *)(v8 + 8);
            if (v51 >= *(_QWORD *)(v8 + 16))
            {
              v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v8, (__int128 *)&__s2);
            }
            else
            {
              if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v8 + 8), __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
              }
              else
              {
                v52 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
                *(_QWORD *)(v51 + 16) = *((_QWORD *)&__s2.__r_.__value_.__l + 2);
                *(_OWORD *)v51 = v52;
              }
              v53 = v51 + 24;
              *(_QWORD *)(v8 + 8) = v51 + 24;
            }
            *(_QWORD *)(v8 + 8) = v53;
            if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s2.__r_.__value_.__l.__data_);
            ++v41;
            v29 = (uint64_t)v56;
            if (0xAAAAAAAAAAAAAAABLL * (v57 - v56) <= v41)
              goto LABEL_86;
          }
          v45 = 24;
          v46 = 1;
          while (2)
          {
            v47 = *(_QWORD *)&(*a2)[v45] + 24 * *(int *)(v44 + 4 * v46);
            if (*(char *)(v47 + 23) < 0)
            {
              if (!*(_QWORD *)(v47 + 8))
                goto LABEL_68;
            }
            else if (!*(_BYTE *)(v47 + 23))
            {
LABEL_68:
              ++v46;
              v44 = *(_QWORD *)(v29 + 24 * v41);
              v45 += 24;
              if (v46 >= (*(_QWORD *)(v29 + 24 * v41 + 8) - v44) >> 2)
                goto LABEL_69;
              continue;
            }
            break;
          }
          quasar::addWord(&__s2, v47, a3);
          v29 = (uint64_t)v56;
          goto LABEL_68;
        }
      }
LABEL_86:
      *(_QWORD *)__x = &v56;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
      if (v59.__begin_)
      {
        v59.__end_ = v59.__begin_;
        operator delete(v59.__begin_);
      }
LABEL_91:
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
    }
  }
}

void sub_1AE05E5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a24);
  v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(_QWORD *)(v25 - 104) = v27;
    operator delete(v27);
  }
  a24 = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void quasar::PronCombinator::operator()(int *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  int v20;
  char *v21;
  char **v22;
  BOOL v23;
  void *__p[2];
  char v27;
  _DWORD *v28;
  uint64_t v29;
  char **v30;
  char *v31[2];

  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  v3 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v3 <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v5 = 0;
    v6 = v3;
    v7 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 3);
    do
    {
      v8 = *a2 + 24 * v5;
      v9 = *(_DWORD **)v8;
      v10 = *(_DWORD **)(v8 + 8);
      while (v9 != v10)
      {
        v28 = v9;
        v11 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v30, v9, (uint64_t)&std::piecewise_construct, &v28);
        std::vector<std::vector<quasar::PronChoice>>::resize((uint64_t *)v11 + 5, v6);
        v28 = v9;
        v12 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v30, v9, (uint64_t)&std::piecewise_construct, &v28)[5];
        v13 = &v12[3 * v5];
        v16 = (_DWORD *)v13[1];
        v14 = v13[2];
        v15 = v13 + 1;
        if ((unint64_t)v16 >= v14)
        {
          v17 = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(&v12[3 * v5], (uint64_t)v9);
        }
        else
        {
          quasar::PronChoice::PronChoice(v16, (uint64_t)v9);
          v17 = (uint64_t)(v16 + 10);
          *v15 = (uint64_t)(v16 + 10);
        }
        *v15 = v17;
        v9 += 10;
      }
      ++v5;
    }
    while (v5 != v7);
    v18 = (uint64_t *)v30;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v18 != (uint64_t *)v31)
    {
      do
      {
        v19 = (char *)quasar::PronTypeToSeparator(*((_DWORD *)v18 + 8));
        v20 = *((_DWORD *)v18 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v19);
        quasar::PronCombinator::combineOnePronType(a1, v20, (uint64_t **)v18 + 5, (uint64_t)__p, (uint64_t *)&v28);
        if (v27 < 0)
          operator delete(__p[0]);
        std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(a3, a3[1], (uint64_t)v28, v29, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (uint64_t)v28) >> 3));
        __p[0] = &v28;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v21 = (char *)v18[1];
        if (v21)
        {
          do
          {
            v22 = (char **)v21;
            v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (char **)v18[2];
            v23 = *v22 == (char *)v18;
            v18 = (uint64_t *)v22;
          }
          while (!v23);
        }
        v18 = (uint64_t *)v22;
      }
      while (v22 != v31);
    }
  }
  std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_1AE05E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,char *a22)
{
  if (a17 < 0)
    operator delete(__p);
  a18 = a11;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void quasar::PronCombinator::combineOnePronType(int *a1@<X0>, int a2@<W1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t *v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t i;
  std::vector<int>::pointer begin;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  uint64_t *v64;
  uint64_t *v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  int v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  const void **v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  void *v101;
  const void **v102;
  char *v103;
  char v104;
  size_t v105;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  const std::string::value_type **v113;
  __int128 v114;
  const void **v115;
  char *v116;
  int *v117;
  float v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  std::string *p_s2;
  std::string::size_type size;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  float *v134;
  float *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  const std::string::value_type *v141;
  std::string::size_type v142;
  int v143;
  const std::string::value_type *v144;
  std::string::size_type v145;
  int v146;
  uint64_t *v147;
  float v148;
  std::string v149;
  std::string __s2;
  void *__p;
  char *v152;
  char *v153;
  std::vector<int> v154;
  std::vector<int>::value_type __x[4];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  __int128 v178;
  unint64_t v179;
  int v180[5];

  v180[0] = a2;
  v178 = 0uLL;
  v179 = 0;
  v8 = *a3;
  v9 = a3[1];
  if (v8 == v9)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v179 = 0;
    v178 = 0uLL;
    goto LABEL_224;
  }
  v14 = *a1;
  v12 = (uint64_t)(a1 + 2);
  v13 = v14;
  v15 = *((_QWORD *)a1 + 2);
  if (v15)
  {
    v16 = a1 + 4;
    do
    {
      v17 = *(_DWORD *)(v15 + 28);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = (int *)v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 4 && v16[7] <= a2)
    {
      v13 = *(_DWORD *)std::map<int,std::pair<int,int>>::at(v12, v180);
      v8 = *a3;
      v9 = a3[1];
    }
  }
  v146 = v13;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  std::vector<std::vector<quasar::PronChoice>>::__init_with_size[abi:ne180100]<std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*>(&v175, v8, v9, 0xAAAAAAAAAAAAAAABLL * (v9 - v8));
  v147 = a5;
  v20 = v175;
  v21 = v176;
  if (v176 != v175)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v20[v22];
      v25 = v20[v22 + 1];
      v26 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v25 - v24) >> 3));
      if (v25 == v24)
        v27 = 0;
      else
        v27 = v26;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v24, v25, (uint64_t)&v172, v27, 1);
      ++v23;
      v20 = v175;
      v21 = v176;
      v22 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v176 - v175) > v23);
    if ((char *)v176 - (char *)v175 == 24)
    {
      v28 = *v175;
      v29 = v175[1] == *v175 || v146 < 1;
      v30 = v147;
      if (!v29)
      {
        v31 = 0;
        v32 = (_DWORD *)*((_QWORD *)&v178 + 1);
        v33 = 1;
        do
        {
          v34 = v28 + v31;
          if ((unint64_t)v32 >= v179)
          {
            v32 = (_DWORD *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>((uint64_t *)&v178, v34);
          }
          else
          {
            quasar::PronChoice::PronChoice(v32, v34);
            v32 += 10;
          }
          *((_QWORD *)&v178 + 1) = v32;
          v28 = *v175;
          v31 += 40;
          v35 = 0xCCCCCCCCCCCCCCCDLL * ((v175[1] - *v175) >> 3) <= v33 || v33 >= v146;
          ++v33;
        }
        while (!v35);
      }
      goto LABEL_189;
    }
  }
  v172 = 0;
  v173 = 0;
  v174 = 0;
  if (v20 != v21)
  {
    while (1)
    {
      v36 = *v20;
      v37 = v20[1];
      if (*v20 == v37)
      {
        if (quasar::gLogLevel >= 5)
        {
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          v160 = 0u;
          v161 = 0u;
          v158 = 0u;
          v159 = 0u;
          v157 = 0u;
          *(_OWORD *)__x = 0u;
          v156 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Empty pronunciations for one of the tokens. Exiting with 0 pron combinations.", 77);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__x);
        }
        v42 = *((_QWORD *)&v178 + 1);
        v41 = v178;
        v43 = v178;
        if (*((_QWORD *)&v178 + 1) != (_QWORD)v178)
        {
          do
          {
            if (*(char *)(v42 - 9) < 0)
              operator delete(*(void **)(v42 - 32));
            v42 -= 40;
          }
          while (v42 != v41);
          v43 = v178;
        }
        *v147 = v43;
        v147[1] = v41;
        v147[2] = v179;
        v178 = 0uLL;
        v179 = 0;
      }
      else
      {
        v38 = -858993459 * ((unint64_t)(v37 - v36) >> 3);
        v39 = v173;
        if (v173 >= v174)
        {
          v44 = v172;
          v45 = (v173 - v172) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v47 = v174 - v172;
          if ((v174 - v172) >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v174, v48);
            v44 = v172;
            v39 = v173;
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[4 * v45];
          *(_DWORD *)v50 = v38;
          v40 = v50 + 4;
          while (v39 != v44)
          {
            v51 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v50 - 1) = v51;
            v50 -= 4;
          }
          v172 = v50;
          v173 = v40;
          v174 = &v49[4 * v48];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_DWORD *)v173 = v38;
          v40 = v39 + 4;
        }
        v173 = v40;
      }
      if (v36 == v37)
        break;
      v20 += 3;
      if (v20 == v21)
        goto LABEL_63;
    }
LABEL_221:
    if (v172)
    {
      v173 = v172;
      operator delete(v172);
    }
    goto LABEL_223;
  }
LABEL_63:
  v52 = v147;
  if (quasar::isPronTypeWordpiece(v180[0]))
  {
    v53 = exp(6.90775528 / (double)(unint64_t)((v173 - v172) >> 2));
    if ((unint64_t)v53 <= 1)
      v54 = 1;
    else
      v54 = (unint64_t)v53;
    std::vector<std::vector<quasar::PronChoice const*>>::vector(__x, 0xAAAAAAAAAAAAAAABLL * (v176 - v175));
    v55 = *(_QWORD *)__x;
    if (*(_QWORD *)&__x[2] != *(_QWORD *)__x)
    {
      v56 = 0;
      do
      {
        if (v54 >= 0xCCCCCCCCCCCCCCCDLL * ((v175[3 * v56 + 1] - v175[3 * v56]) >> 3))
          v57 = 0xCCCCCCCCCCCCCCCDLL * ((v175[3 * v56 + 1] - v175[3 * v56]) >> 3);
        else
          v57 = v54;
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(v55 + 24 * v56, v57);
        if (v57)
        {
          v58 = 0;
          for (i = 0; i != v57; ++i)
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)__x + 24 * v56) + 8 * i) = v175[3 * v56] + v58;
            v58 += 40;
          }
        }
        ++v56;
        v55 = *(_QWORD *)__x;
      }
      while (v56 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 3));
    }
    quasar::cartesianProduct<quasar::PronChoice const*>((const void ***)__x, (__int128 *)&v154);
    __p = 0;
    v152 = 0;
    v153 = 0;
    begin = v154.__begin_;
    if (v154.__end_ == v154.__begin_)
    {
      v61 = 0;
      v77 = 0;
    }
    else
    {
      v61 = 0;
      v62 = 0;
      do
      {
        v63 = &begin[6 * v62];
        v64 = *(uint64_t **)v63;
        v65 = (uint64_t *)*((_QWORD *)v63 + 1);
        v66 = 0.0;
        while (v64 != v65)
        {
          v67 = *v64++;
          v66 = v66 + *(float *)(v67 + 32);
        }
        if (v61 >= (unint64_t)v153)
        {
          v68 = (uint64_t)(v61 - (_QWORD)__p) >> 4;
          if ((unint64_t)(v68 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v69 = (v153 - (_BYTE *)__p) >> 3;
          if (v69 <= v68 + 1)
            v69 = v68 + 1;
          if ((unint64_t)(v153 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
            v70 = 0xFFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v153, v70);
          v73 = &v71[16 * v68];
          *(float *)v73 = v66;
          *((_QWORD *)v73 + 1) = v62;
          v75 = (char *)__p;
          v74 = v152;
          v76 = v73;
          if (v152 != __p)
          {
            do
            {
              *((_OWORD *)v76 - 1) = *((_OWORD *)v74 - 1);
              v76 -= 16;
              v74 -= 16;
            }
            while (v74 != v75);
            v74 = (char *)__p;
          }
          v61 = (unint64_t)(v73 + 16);
          __p = v76;
          v152 = v73 + 16;
          v153 = &v71[16 * v72];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *(float *)v61 = v66;
          *(_QWORD *)(v61 + 8) = v62;
          v61 += 16;
        }
        v152 = (char *)v61;
        ++v62;
        begin = v154.__begin_;
      }
      while (v62 < 0xAAAAAAAAAAAAAAABLL * (((char *)v154.__end_ - (char *)v154.__begin_) >> 3));
      v77 = __p;
      v52 = v147;
    }
    v132 = 126 - 2 * __clz((uint64_t)(v61 - (_QWORD)v77) >> 4);
    if ((void *)v61 == v77)
      v133 = 0;
    else
      v133 = v132;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>((uint64_t)v77, v61, (uint64_t)&__s2, v133, 1);
    quasar::LmeDataFactoryBase::PronSet::PronSet(&__s2);
    v134 = (float *)__p;
    v135 = (float *)v152;
    if (__p != v152)
    {
      do
      {
        if (quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)&__s2) >= (unint64_t)v146)
          break;
        memset(&v149, 0, sizeof(v149));
        v136 = &v154.__begin_[6 * *((_QWORD *)v134 + 1)];
        v137 = *(_QWORD *)v136;
        v138 = *((_QWORD *)v136 + 1);
        if (*(_QWORD *)v136 != v138)
        {
          v139 = 1;
          do
          {
            if ((v139 & 1) == 0)
            {
              v140 = *(char *)(a4 + 23);
              if (v140 >= 0)
                v141 = (const std::string::value_type *)a4;
              else
                v141 = *(const std::string::value_type **)a4;
              if (v140 >= 0)
                v142 = *(unsigned __int8 *)(a4 + 23);
              else
                v142 = *(_QWORD *)(a4 + 8);
              std::string::append(&v149, v141, v142);
            }
            v143 = *(char *)(*(_QWORD *)v137 + 31);
            if (v143 >= 0)
              v144 = (const std::string::value_type *)(*(_QWORD *)v137 + 8);
            else
              v144 = *(const std::string::value_type **)(*(_QWORD *)v137 + 8);
            if (v143 >= 0)
              v145 = *(unsigned __int8 *)(*(_QWORD *)v137 + 31);
            else
              v145 = *(_QWORD *)(*(_QWORD *)v137 + 16);
            std::string::append(&v149, v144, v145);
            v139 = 0;
            v137 += 8;
          }
          while (v137 != v138);
        }
        quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)&__s2, v180[0], (uint64_t)&v149, *v134);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        v134 += 4;
      }
      while (v134 != v135);
    }
    quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)&__s2, 3, v52);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&__s2, (char *)__s2.__r_.__value_.__l.__size_);
    if (__p)
    {
      v152 = (char *)__p;
      operator delete(__p);
    }
    __p = &v154;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v154.__begin_ = __x;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
    goto LABEL_221;
  }
  if (quasar::isPronTypeEmbedding(v180[0]))
  {
    v79 = v172;
    v78 = v173;
    v80 = v172;
    if (v172 != v173)
    {
      v81 = v172 + 4;
      v80 = v172;
      if (v172 + 4 != v173)
      {
        v82 = *(_DWORD *)v172;
        v80 = v172;
        v83 = v172 + 4;
        do
        {
          v85 = *(_DWORD *)v83;
          v83 += 4;
          v84 = v85;
          v86 = v82 < v85;
          if (v82 <= v85)
            v82 = v84;
          if (v86)
            v80 = v81;
          v81 = v83;
        }
        while (v83 != v173);
      }
    }
    v87 = *(unsigned int *)v80;
    if ((int)v87 <= 0)
    {
      v89 = (_DWORD *)*((_QWORD *)&v178 + 1);
    }
    else
    {
      v88 = 0;
      v89 = (_DWORD *)*((_QWORD *)&v178 + 1);
      v90 = v172;
      v91 = v173;
      do
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v89 - v178) >> 3) >= *a1)
          break;
        if (v91 == v90)
        {
          v94 = v79;
          v91 = v90;
        }
        else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v89 - v178) >> 3) >= *a1)
        {
          v94 = v79;
        }
        else
        {
          v92 = 0;
          v93 = 0;
          v94 = v90;
          while (1)
          {
            if (v88 >= *(int *)&v94[4 * v93])
            {
              v94 = v79;
            }
            else
            {
              v95 = v175[v92] + 40 * v88;
              if ((unint64_t)v89 >= v179)
              {
                v89 = (_DWORD *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>((uint64_t *)&v178, v95);
              }
              else
              {
                quasar::PronChoice::PronChoice(v89, v95);
                v89 += 10;
              }
              *((_QWORD *)&v178 + 1) = v89;
              v94 = v172;
              v78 = v173;
            }
            if (++v93 >= (unint64_t)((v78 - v94) >> 2))
              break;
            v92 += 3;
            v90 = v94;
            v91 = v78;
            v79 = v94;
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v89 - v178) >> 3) >= *a1)
              goto LABEL_124;
          }
          v90 = v94;
          v91 = v78;
        }
LABEL_124:
        ++v88;
        v79 = v94;
        v52 = v147;
      }
      while (v88 != v87);
    }
    *v52 = v178;
    v52[1] = (uint64_t)v89;
    v52[2] = v179;
    v179 = 0;
    v178 = 0uLL;
    goto LABEL_221;
  }
  memset(&v154, 0, sizeof(v154));
  __x[0] = 0;
  std::vector<int>::resize(&v154, 0xAAAAAAAAAAAAAAABLL * (v176 - v175), __x);
  __p = 0;
  v152 = 0;
  v153 = 0;
  v96 = (char *)std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&__p, (uint64_t)&v154);
  v97 = (const void **)__p;
  v152 = v96;
  if (v96 == __p)
    goto LABEL_185;
  if (0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)__p) >> 3) < v146)
  {
    v98 = 0;
    do
    {
      memset(__x, 0, sizeof(__x));
      *(_QWORD *)&v156 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, v97[3 * v98], (uint64_t)v97[3 * v98 + 1], ((_BYTE *)v97[3 * v98 + 1] - (_BYTE *)v97[3 * v98]) >> 2);
      v99 = v172;
      if (v173 != v172)
      {
        v100 = 0;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)__x + 4 * v100) + 1 < *(_DWORD *)&v99[4 * v100])
          {
            memset(&__s2, 0, sizeof(__s2));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)__x, *(uint64_t *)&__x[2], (uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 2);
            v101 = (void *)__s2.__r_.__value_.__r.__words[0];
            *(_DWORD *)(__s2.__r_.__value_.__r.__words[0] + 4 * v100) = *(_DWORD *)(*(_QWORD *)__x + 4 * v100) + 1;
            v102 = (const void **)__p;
            v103 = v152;
            if (__p == v152)
              goto LABEL_139;
            v104 = 0;
            v105 = __s2.__r_.__value_.__l.__size_ - (_QWORD)v101;
            do
            {
              v106 = (_BYTE *)v102[1] - (_BYTE *)*v102 == v105 && memcmp(*v102, v101, v105) == 0;
              v104 |= v106;
              v102 += 3;
            }
            while (v102 != (const void **)v103);
            if ((v104 & 1) == 0)
            {
LABEL_139:
              if (v103 >= v153)
              {
                v107 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&__p, (uint64_t)&__s2);
              }
              else
              {
                *(_QWORD *)v103 = 0;
                *((_QWORD *)v103 + 1) = 0;
                *((_QWORD *)v103 + 2) = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v103, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_, (uint64_t)(__s2.__r_.__value_.__l.__size_ - __s2.__r_.__value_.__r.__words[0]) >> 2);
                v107 = (uint64_t)(v103 + 24);
              }
              v152 = (char *)v107;
              v101 = (void *)__s2.__r_.__value_.__r.__words[0];
            }
            if (v101)
            {
              __s2.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
              operator delete(v101);
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v152 - (_BYTE *)__p) >> 3) >= v146)
            break;
          ++v100;
          v99 = v172;
        }
        while (v100 < (v173 - v172) >> 2);
      }
      if (*(_QWORD *)__x)
      {
        *(_QWORD *)&__x[2] = *(_QWORD *)__x;
        operator delete(*(void **)__x);
      }
      ++v98;
      v97 = (const void **)__p;
      v96 = v152;
      v108 = 0xAAAAAAAAAAAAAAABLL * ((v152 - (_BYTE *)__p) >> 3);
    }
    while (v108 > v98 && v108 < v146);
  }
  if (v96 == (char *)v97)
    goto LABEL_185;
  v110 = 0;
  do
  {
    LODWORD(v149.__r_.__value_.__l.__data_) = 0;
    v111 = v175;
    v112 = *v175 + 40 * *(int *)v97[3 * v110];
    LODWORD(v149.__r_.__value_.__l.__data_) = *(_DWORD *)v112;
    v113 = (const std::string::value_type **)(v112 + 8);
    if (*(char *)(v112 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__s2, *v113, *(_QWORD *)(v112 + 16));
      v111 = v175;
      v97 = (const void **)__p;
    }
    else
    {
      v114 = *(_OWORD *)v113;
      __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 24);
      *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v114;
    }
    v148 = 0.0;
    v115 = &v97[3 * v110];
    v116 = (char *)*v115;
    v117 = (int *)v115[1];
    v118 = *(float *)(*v111 + 40 * *(int *)v116 + 32);
    v148 = v118;
    if ((unint64_t)((char *)v117 - v116) < 5)
      goto LABEL_171;
    v119 = 0;
    v120 = 3;
    v121 = 1;
    do
    {
      v122 = *(_DWORD *)&v116[4 * v121];
      v123 = v175[v120] + 40 * v122;
      v124 = v123 + 8;
      v125 = *(char *)(v123 + 31);
      if (v125 < 0)
      {
        if (!*(_QWORD *)(v124 + 8))
          goto LABEL_166;
LABEL_165:
        quasar::addWord(&__s2, v124, a4);
        v118 = v148;
        goto LABEL_166;
      }
      if ((_BYTE)v125)
        goto LABEL_165;
LABEL_166:
      if (v118 != 0.0)
      {
        ++v119;
        v118 = v118 + *(float *)(v175[v120] + 40 * v122 + 32);
        v148 = v118;
      }
      ++v121;
      v116 = (char *)*((_QWORD *)__p + 3 * v110);
      v120 += 3;
    }
    while (v121 < (uint64_t)(*((_QWORD *)__p + 3 * v110 + 1) - (_QWORD)v116) >> 2);
    if (v119 > 0)
      v148 = v118 / (float)v119;
LABEL_171:
    if (quasar::gLogLevel >= 6)
    {
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v157 = 0u;
      *(_OWORD *)__x = 0u;
      v156 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
      v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"pron combination = ", 19);
      if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s2 = &__s2;
      else
        p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
      if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
      else
        size = __s2.__r_.__value_.__l.__size_;
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)p_s2, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)", logWeight = ", 14);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__x);
    }
    v130 = *((_QWORD *)&v178 + 1);
    if (*((_QWORD *)&v178 + 1) >= v179)
    {
      v131 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType &,std::string &,float &>((uint64_t *)&v178, (int *)&v149, (uint64_t)&__s2, (int *)&v148);
    }
    else
    {
      std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType &,std::string &,float &>((uint64_t)&v179, *((uint64_t *)&v178 + 1), (int *)&v149, (uint64_t)&__s2, (int *)&v148);
      v131 = v130 + 40;
    }
    *((_QWORD *)&v178 + 1) = v131;
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s2.__r_.__value_.__l.__data_);
    ++v110;
    v97 = (const void **)__p;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v152 - (_BYTE *)__p) >> 3) > v110);
LABEL_185:
  *(_QWORD *)__x = &__p;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  if (v154.__begin_)
  {
    v154.__end_ = v154.__begin_;
    operator delete(v154.__begin_);
  }
  v30 = v147;
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
LABEL_189:
  *(_OWORD *)v30 = v178;
  v30[2] = v179;
  v179 = 0;
  v178 = 0uLL;
LABEL_223:
  *(_QWORD *)__x = &v175;
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
LABEL_224:
  *(_QWORD *)__x = &v178;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
}

void sub_1AE05F75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void **a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  void *v37;

  a33 = &a27;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a33);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  v37 = *(void **)(v34 + 272);
  if (v37)
  {
    *(_QWORD *)(v34 + 280) = v37;
    operator delete(v37);
  }
  a33 = (void **)(v35 - 168);
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](&a33);
  a33 = (void **)(v35 - 144);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void quasar::cartesianProduct<quasar::PronChoice const*>(const void ***a1@<X0>, __int128 *a2@<X8>)
{
  __int128 *v2;
  const void **v3;
  const void **v4;
  _QWORD *v5;
  _QWORD *v6;
  const void **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *p_p;
  _QWORD *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *__p;
  _QWORD *v41;
  _QWORD *v42;

  v2 = a2;
  v38 = 0uLL;
  v39 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      __p = 0;
      v41 = 0;
      v42 = 0;
      std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(&__p, *v3, (uint64_t)v3[1], ((_BYTE *)v3[1] - (_BYTE *)*v3) >> 3);
      v5 = __p;
      v6 = v41;
      if (__p)
      {
        v41 = __p;
        operator delete(__p);
      }
      if (v6 == v5)
        break;
      v3 += 3;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v3 == a1[1])
    {
      v7 = *a1;
      v8 = (uint64_t *)**a1;
      v9 = (uint64_t *)(*a1)[1];
      if (v8 != v9)
      {
        do
        {
          v10 = *v8;
          v11 = operator new(8uLL);
          __p = v11;
          *v11 = v10;
          v41 = v11 + 1;
          v42 = v11 + 1;
          std::vector<std::vector<quasar::PronChoice const*>>::push_back[abi:ne180100]((uint64_t *)&v38, (uint64_t)&__p);
          if (__p)
          {
            v41 = __p;
            operator delete(__p);
          }
          ++v8;
        }
        while (v8 != v9);
        v7 = *a1;
        v3 = a1[1];
      }
      if (0xAAAAAAAAAAAAAAABLL * (v3 - v7) >= 2)
      {
        v12 = 1;
        do
        {
          __p = 0;
          v41 = 0;
          v42 = 0;
          v13 = *((_QWORD *)&v38 + 1);
          v14 = v38;
          if ((_QWORD)v38 == *((_QWORD *)&v38 + 1))
          {
            v32 = 0;
            v31 = 0;
          }
          else
          {
            do
            {
              v15 = (uint64_t)&(*a1)[3 * v12];
              v16 = *(uint64_t **)v15;
              v17 = *(uint64_t **)(v15 + 8);
              while (v16 != v17)
              {
                v18 = *v16;
                p_p = 0;
                v36 = 0;
                v37 = 0;
                std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(&p_p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
                v19 = v36;
                if ((unint64_t)v36 >= v37)
                {
                  v21 = ((char *)v36 - (_BYTE *)p_p) >> 3;
                  if ((unint64_t)(v21 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v22 = (uint64_t)(v37 - (_QWORD)p_p) >> 2;
                  if (v22 <= v21 + 1)
                    v22 = v21 + 1;
                  if (v37 - (unint64_t)p_p >= 0x7FFFFFFFFFFFFFF8)
                    v23 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v23 = v22;
                  if (v23)
                    v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v37, v23);
                  else
                    v24 = 0;
                  v25 = &v24[8 * v21];
                  *(_QWORD *)v25 = v18;
                  v20 = v25 + 8;
                  v27 = p_p;
                  v26 = v36;
                  if (v36 != p_p)
                  {
                    do
                    {
                      v28 = *--v26;
                      *((_QWORD *)v25 - 1) = v28;
                      v25 -= 8;
                    }
                    while (v26 != v27);
                    v26 = p_p;
                  }
                  p_p = v25;
                  v36 = v20;
                  v37 = (unint64_t)&v24[8 * v23];
                  if (v26)
                    operator delete(v26);
                }
                else
                {
                  *v36 = v18;
                  v20 = v19 + 1;
                }
                v36 = v20;
                v29 = v41;
                if (v41 >= v42)
                {
                  v30 = std::vector<std::vector<quasar::PronChoice const*>>::__push_back_slow_path<std::vector<quasar::PronChoice const*> const&>((uint64_t *)&__p, (uint64_t)&p_p);
                }
                else
                {
                  *v41 = 0;
                  v29[1] = 0;
                  v29[2] = 0;
                  std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(v29, p_p, (uint64_t)v36, ((char *)v36 - (_BYTE *)p_p) >> 3);
                  v30 = (uint64_t)(v29 + 3);
                }
                v41 = (_QWORD *)v30;
                if (p_p)
                {
                  v36 = p_p;
                  operator delete(p_p);
                }
                ++v16;
              }
              v14 += 24;
            }
            while (v14 != v13);
            v31 = __p;
            v32 = (uint64_t)v41;
          }
          std::vector<std::vector<quasar::PronChoice const*>>::__assign_with_size[abi:ne180100]<std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*>((uint64_t)&v38, (uint64_t)v31, v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v31) >> 3));
          p_p = &__p;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          ++v12;
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
      }
    }
    *a2 = v38;
    *((_QWORD *)a2 + 2) = v39;
    v2 = &v38;
  }
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  __p = &v38;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1AE05FC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *p_p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  p_p = (char *)&__p;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = &a15;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PronChoice const*>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<quasar::PronChoice const*>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AE05FDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PronChoice const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice const*>>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice const*>>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice const*>>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice const*>>,std::reverse_iterator<std::vector<quasar::PronChoice const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AE05FFA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<quasar::PronChoice const*>>::__push_back_slow_path<std::vector<quasar::PronChoice const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<quasar::PronChoice const*>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AE0600C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PronChoice const*>>::__assign_with_size[abi:ne180100]<std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AE060250(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AE060258(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*,std::vector<quasar::PronChoice const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::PronChoice const*>::__init_with_size[abi:ne180100]<quasar::PronChoice const**,quasar::PronChoice const**>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AE0602FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice const*>>,std::vector<quasar::PronChoice const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *,std::vector<quasar::PronChoice const*> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::vector<std::vector<quasar::PronChoice>>::__init_with_size[abi:ne180100]<std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AE060414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*,std::vector<quasar::PronChoice>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AE0604DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::vector<quasar::PronChoice>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

_QWORD *std::vector<std::vector<quasar::PronChoice const*>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AE0605F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType &,std::string &,float &>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType &,std::string &,float &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1AE06071C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType &,std::string &,float &>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7;
  int v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = *a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_DWORD *)(a2 + 32) = v8;
  }
}

void sub_1AE0607DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::tennessee::ShouldCheckSorted(quasar::tennessee *this)
{
  int v1;
  unint64_t v2;
  _OWORD v4[17];
  char *v5;
  char v6;
  _OWORD *v7;

  v1 = (int)this;
  v6 = (char)this;
  v5 = &quasar::tennessee::ShouldCheckSorted(BOOL)::result;
  v2 = atomic_load(&quasar::tennessee::shouldCheckSortedFlag);
  if (v2 != -1)
  {
    *(_QWORD *)&v4[0] = &v6;
    *((_QWORD *)&v4[0] + 1) = &v5;
    v7 = v4;
    std::__call_once(&quasar::tennessee::shouldCheckSortedFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::tennessee::ShouldCheckSorted(BOOL)::$_0 &&,BOOL *&&>>);
  }
  if (v1 && !quasar::tennessee::ShouldCheckSorted(BOOL)::result)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Within ShouldCheckSorted, force=true while the function intends to return false.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  return quasar::tennessee::ShouldCheckSorted(BOOL)::result != 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::tennessee::ShouldCheckSorted(BOOL)::$_0 &&,BOOL *&&>>(_QWORD **a1)
{
  _BYTE *v1;
  BOOL *v2;
  char *v3;
  _QWORD *v4;
  int v5;
  void **v6;
  int v7;
  int v8;
  BOOL v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v1 = (_BYTE *)**a1;
  v2 = *(BOOL **)(*a1)[1];
  v3 = getenv("TENNESSEE_ARRAY_CHECK_SORTED");
  if (*v1)
  {
    *v2 = 1;
    if (quasar::gLogLevel < 2)
      return;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tennessee is running with forced additional checks. ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"This message should only be visible during tests.", 49);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    goto LABEL_22;
  }
  if (!v3)
  {
    *v2 = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  v5 = SBYTE7(v18);
  if (SBYTE7(v18) < 0)
  {
    if (__p[1] != (void *)5)
    {
      *v2 = 1;
LABEL_21:
      operator delete(__p[0]);
      goto LABEL_22;
    }
    v6 = (void **)__p[0];
  }
  else
  {
    if (SBYTE7(v18) != 5)
    {
      *v2 = 1;
      goto LABEL_22;
    }
    v6 = __p;
  }
  v7 = *(_DWORD *)v6;
  v8 = *((unsigned __int8 *)v6 + 4);
  v10 = v7 != 1936482662 || v8 != 101;
  *v2 = v10;
  if (v5 < 0)
    goto LABEL_21;
LABEL_22:
  if (*v2)
  {
    if (*v1)
      v11 = 1;
    else
      v11 = quasar::gLogLevel < 2;
    if (!v11)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tennessee is running with additional checks that may slow down runtime. ", 72);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Configure environment variable ", 31);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"TENNESSEE_ARRAY_CHECK_SORTED", 28);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"=", 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"false", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" to disable the checking.", 25);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
  }
}

void sub_1AE060AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Spectrogram::Spectrogram(uint64_t a1, kaldi::FrameExtractionOptions *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  float v7;
  int v8;
  uint64_t v9;
  int8x8_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)(a1 + 16) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 40) = v5;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 75) = *(_DWORD *)((char *)a2 + 59);
  *(_DWORD *)(a1 + 72) = v6;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::FeatureWindowFunction *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 112) = 0;
  v7 = *((float *)a2 + 14);
  if (v7 > 0.0)
    *(float *)(a1 + 80) = logf(v7);
  v8 = kaldi::FrameExtractionOptions::PaddedWindowSize(a2);
  if ((v8 & (v8 - 1)) == 0)
  {
    v9 = operator new();
    v11 = v9;
    if (v8 >= 0)
      v12 = v8;
    else
      v12 = v8 + 1;
    kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v9, v12 >> 1, v10);
    *(_DWORD *)(v11 + 48) = v8;
    *(_QWORD *)(a1 + 112) = v11;
  }
  return a1;
}

void sub_1AE060C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void kaldi::Spectrogram::~Spectrogram(kaldi::Spectrogram *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v2);
    MEMORY[0x1AF44D190](v3, 0x1090C40943DB512);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t kaldi::Spectrogram::Compute(uint64_t a1, uint64_t a2, int32x2_t *a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  float *v15;
  float v16;
  float v17;
  float **v18;
  int32x2_t v19;
  __int32 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  std::vector<int>::pointer begin;
  uint64_t v26;
  uint64_t v27;
  std::vector<int>::pointer v28;
  unint64_t v29;
  uint64_t v30;
  uint64x2_t v31;
  unint64_t v32;
  int v33;
  int *v34;
  int32x2_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  void *__p[2];
  unsigned __int8 v48;
  std::vector<int>::value_type __x[2];
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t v57[2];
  int v58;
  std::vector<int> v59;

  v7 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 16);
  if (!(_DWORD)v7)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"No frames fit in file (#samples is ", 35);
    v44 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, ")");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  v8 = v7;
  kaldi::Matrix<float>::Matrix((uint64_t)v57);
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = kaldi::FrameExtractionOptions::PaddedWindowSize((kaldi::FrameExtractionOptions *)(a1 + 16));
    v10 = v9;
    kaldi::Matrix<float>::Resize(v57, v8, v9, 0, 0);
    v11 = (v10 + 2);
  }
  else
  {
    v12 = kaldi::FrameExtractionOptions::PaddedWindowSize((kaldi::FrameExtractionOptions *)(a1 + 16));
    if (v12 >= 0)
      v13 = v12;
    else
      v13 = v12 + 1;
    v11 = ((v13 >> 1) + 1);
  }
  v45 = v11;
  kaldi::Matrix<float>::Resize(a3, v8, v11, 0, 0);
  if (a4)
    kaldi::ExtractWaveformRemainder(a2, (float *)(a1 + 16), a4);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if ((int)v8 >= 1)
  {
    v14 = 0;
    do
    {
      v53 = 1065353216;
      if (*(_BYTE *)(a1 + 78))
        v15 = (float *)&v53;
      else
        v15 = 0;
      kaldi::ExtractWindow((uint64_t *)a2, v14, a1 + 16, (float **)(a1 + 88), (void **)&v54, v15);
      if (*(_BYTE *)(a1 + 78))
      {
        v16 = *(float *)&v53;
      }
      else
      {
        v16 = kaldi::VecVec<float>((uint64_t)&v54, (const float **)&v54);
        if (v16 < 1.1755e-38)
          v16 = 1.1755e-38;
        v53 = LODWORD(v16);
      }
      v17 = logf(v16);
      if ((LODWORD(v17) & 0x7FFFFFFFu) >= 0x7F800000)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
        kaldi::VectorBase<float>::Write((uint64_t)&v54, __x, 0);
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Non-finite energy found for frame ", 34);
        v40 = (_QWORD *)std::ostream::operator<<();
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)". Waveform is: ", 15);
        std::stringbuf::str();
        if ((v48 & 0x80u) == 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if ((v48 & 0x80u) == 0)
          v43 = v48;
        else
          v43 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        if ((char)v48 < 0)
          operator delete(__p[0]);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
      }
      v18 = *(float ***)(a1 + 112);
      if (v18)
        kaldi::SplitRadixRealFft<float>::Compute(v18, v54, 1);
      else
        kaldi::RealFft<float>((uint64_t)&v54, 1);
      if (*(_BYTE *)(a1 + 76))
      {
        v59.__end_ = 0;
        v59.__end_cap_.__value_ = 0;
        v59.__begin_ = (std::vector<int>::pointer)(*(_QWORD *)v57 + 4 * v58 * v14);
        LODWORD(v59.__end_) = kaldi::MatrixBase<float>::NumCols((uint64_t)v57);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v59, (const void **)&v54);
      }
      else
      {
        kaldi::ComputePowerSpectrum((uint64_t)&v54);
        v59.__end_cap_.__value_ = 0;
        v59.__begin_ = (std::vector<int>::pointer)v54;
        v59.__end_ = (std::vector<int>::pointer)((int)v55 / 2 + 1);
        kaldi::VectorBase<float>::ApplyFloor((uint64_t)&v59, 1.1755e-38);
        kaldi::VectorBase<float>::ApplyLog((uint64_t)&v59);
        v19 = *a3;
        v20 = a3[2].i32[0];
        v21 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
        v51 = 0;
        v52 = 0;
        *(_QWORD *)__x = *(_QWORD *)&v19 + 4 * v20 * v14;
        v50 = v21;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)__x, (const void **)&v59.__begin_);
        if (*(float *)(a1 + 72) > 0.0 && v17 < *(float *)(a1 + 80))
          v17 = *(float *)(a1 + 80);
        **(float **)__x = v17;
      }
      ++v14;
    }
    while ((_DWORD)v8 != v14);
  }
  if (*(_BYTE *)(a1 + 76))
  {
    __x[0] = -1;
    std::vector<int>::vector(&v59, v45, __x);
    if (*(_BYTE *)(a1 + 77))
    {
      if (v45 >= 0)
        v22 = v45;
      else
        v22 = v45 + 1;
      v23 = v22 >> 1;
      v24 = (v22 >> 1) - 1;
      begin = v59.__begin_;
      v59.__begin_[v24] = 1;
      if (v45 >= 4)
      {
        v26 = 0;
        if (v24 <= 1)
          v24 = 1;
        v27 = 2 * v24;
        v28 = begin;
        do
        {
          *v28++ = v26;
          v26 += 2;
        }
        while (v27 != v26);
      }
      if (v23 + 1 < v45 - 1)
      {
        v29 = 0;
        v30 = v45 - (uint64_t)v23;
        v31 = (uint64x2_t)vdupq_n_s64(v30 - 3);
        v32 = (v30 - 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = 2 * v23 - v45 + 3;
        v34 = &begin[v23 + 2];
        do
        {
          v35 = vmovn_s64((int64x2_t)vcgeq_u64(v31, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v29), (int8x16_t)xmmword_1AE140A90)));
          if ((v35.i8[0] & 1) != 0)
            *(v34 - 1) = v33;
          if ((v35.i8[4] & 1) != 0)
            *v34 = v33 + 2;
          v29 += 2;
          v33 += 4;
          v34 += 2;
        }
        while (v32 != v29);
      }
    }
    else
    {
      v36 = v59.__begin_;
      *v59.__begin_ = 0;
      v37 = (v45 - 2);
      v36[(int)v37] = 1;
      if (v45 >= 5)
      {
        v38 = 2;
        do
        {
          v36[v38] = v38;
          ++v38;
        }
        while (v37 != v38);
      }
    }
    kaldi::MatrixBase<float>::CopyCols((uint64_t)a3, (uint64_t *)v57, (uint64_t *)&v59);
    if (v59.__begin_)
    {
      v59.__end_ = v59.__begin_;
      operator delete(v59.__begin_);
    }
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v54);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v57);
}

void sub_1AE061200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1AE061240);
}

void sub_1AE06123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a48);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a51);
  _Unwind_Resume(a1);
}

BOOL kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(_QWORD *a1, float a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double *v24;
  int32x2_t v25;
  double v26;
  double v27;
  __n128 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  float *v34;
  double v35;
  double v36;
  _BOOL8 v37;
  uint64_t v39;
  float v40;
  float v41;
  int v42;
  int32x2_t v43;
  void *__p[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1)
    && !fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Cycles detected in lattice", 26);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
    }
    return 0;
  }
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  if (!v4)
    return 0;
  v5 = v4;
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v45 = 0x7FF0000000000000;
  std::vector<double>::vector(__p, v5, &v45);
  *(_QWORD *)__p[0] = 0;
  v6 = v5;
  if (v5 < 1)
  {
    v8 = INFINITY;
  }
  else
  {
    v7 = 0;
    v8 = INFINITY;
    do
    {
      v9 = (double *)__p[0];
      v10 = *((double *)__p[0] + v7);
      v11 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v7);
      v13 = *(_QWORD *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 32);
      v15 = v12 - v13;
      v14 = v12 == v13;
      if (v12 == v13)
        v16 = 0;
      else
        v16 = v13;
      if (!v14)
      {
        v17 = v15 / 20;
        if (v17 <= 1)
          v17 = 1;
        v18 = (float *)(v16 + 16);
        do
        {
          v19 = *(unsigned int *)v18;
          v20 = v10 + *(v18 - 2) + *(v18 - 1);
          if (v9[v19] > v20)
            v9[v19] = v20;
          v18 += 5;
          --v17;
        }
        while (v17);
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v45, a1, v7);
      if (v10 + *(float *)&v45 + *((float *)&v45 + 1) < v8)
        v8 = v10 + *(float *)&v45 + *((float *)&v45 + 1);
      ++v7;
    }
    while (v7 != v5);
  }
  v21 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
  if (v5 >= 1)
  {
    v22 = v21;
    v23 = v8 + a2;
    v24 = (double *)__p[0];
    v25 = vdup_n_s32(0x7F800000u);
    do
    {
      v26 = v24[(v6 - 1)];
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v45, a1, v6 - 1);
      v27 = *(float *)&v45 + *((float *)&v45 + 1);
      v28.n128_f64[0] = v26 + v27;
      v29 = v27 == INFINITY || v28.n128_f64[0] <= v23;
      if (!v29)
      {
        v43 = v25;
        (*(void (**)(_QWORD *, uint64_t, int32x2_t *, __n128))(*a1 + 184))(a1, v6 - 1, &v43, v28);
      }
      v45 = (uint64_t)&unk_1E5D21340;
      v48 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a1);
      v30 = a1[1];
      v31 = *(_QWORD *)(*(_QWORD *)(v30 + 64) + 8 * (v6 - 1));
      v46 = v31;
      v47 = v30 + 8;
      for (i = v48; ; v48 = i)
      {
        v33 = *(_QWORD *)(v31 + 24);
        if (i >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v31 + 32) - v33) >> 2))
          break;
        v34 = (float *)(v33 + 20 * i);
        v39 = *(_QWORD *)v34;
        v40 = v34[2];
        v41 = v34[3];
        v35 = *((double *)__p[0] + *((int *)v34 + 4));
        v36 = v40 + v41 + v35;
        if (v36 < v27)
          v27 = v40 + v41 + v35;
        if (v26 + v36 > v23)
        {
          v42 = v22;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v45, (uint64_t)&v39);
          i = v48;
          v31 = v46;
        }
        ++i;
      }
      v24 = (double *)__p[0];
      *((double *)__p[0] + (v6 - 1)) = v27;
      v29 = v6-- <= 1;
    }
    while (!v29);
  }
  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
  v37 = (*(int (**)(_QWORD *))(*a1 + 160))(a1) > 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v37;
}

void sub_1AE0615E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a17);
  _Unwind_Resume(a1);
}

BOOL kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(_QWORD *a1, float a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double *v24;
  int32x2_t v25;
  double v26;
  __n128 v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t i;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  _BOOL8 v38;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int32x2_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48[3];
  uint64_t v49;
  void *__p;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;

  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1)
    && !fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Cycles detected in lattice", 26);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    }
    return 0;
  }
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  if (!v4)
    return 0;
  v5 = v4;
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v49 = 0x7FF0000000000000;
  std::vector<double>::vector(v48, v5, &v49);
  *(_QWORD *)v48[0] = 0;
  v6 = v5;
  if (v5 < 1)
  {
    v8 = INFINITY;
  }
  else
  {
    v7 = 0;
    v8 = INFINITY;
    do
    {
      v9 = (double *)v48[0];
      v10 = *((double *)v48[0] + v7);
      v11 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v7);
      v13 = *(_QWORD *)(v11 + 48);
      v12 = *(_QWORD *)(v11 + 56);
      v15 = v12 - v13;
      v14 = v12 == v13;
      if (v12 == v13)
        v16 = 0;
      else
        v16 = v13;
      if (!v14)
      {
        v17 = v15 / 48;
        if (v17 <= 1)
          v17 = 1;
        v18 = (float *)(v16 + 40);
        do
        {
          v19 = *(unsigned int *)v18;
          v20 = v10 + *(v18 - 8) + *(v18 - 7);
          if (v9[v19] > v20)
            v9[v19] = v20;
          v18 += 12;
          --v17;
        }
        while (v17);
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v49, a1, v7);
      if (v10 + *(float *)&v49 + *((float *)&v49 + 1) < v8)
        v8 = v10 + *(float *)&v49 + *((float *)&v49 + 1);
      if (__p)
      {
        v51 = __p;
        operator delete(__p);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  v21 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
  if (v5 >= 1)
  {
    v22 = v21;
    v23 = v8 + a2;
    v24 = (double *)v48[0];
    v25 = vdup_n_s32(0x7F800000u);
    do
    {
      v26 = v24[(v6 - 1)];
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v49, a1, v6 - 1);
      v28 = v49;
      if (__p)
      {
        v51 = __p;
        operator delete(__p);
      }
      v29 = *(float *)&v28 + *((float *)&v28 + 1);
      v27.n128_f64[0] = v26 + v29;
      v30 = v29 == INFINITY || v27.n128_f64[0] <= v23;
      if (!v30)
      {
        v44 = v25;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        (*(void (**)(_QWORD *, uint64_t, int32x2_t *, __n128))(*a1 + 184))(a1, v6 - 1, &v44, v27);
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
      }
      v40 = &unk_1E5D21420;
      v43 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a1);
      v31 = a1[1];
      v32 = *(_QWORD *)(*(_QWORD *)(v31 + 64) + 8 * (v6 - 1));
      v41 = v32;
      v42 = v31 + 8;
      for (i = v43; ; i = ++v43)
      {
        v34 = *(_QWORD *)(v32 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v32 + 56) - v34) >> 4))
          break;
        v35 = v34 + 48 * i;
        v49 = *(_QWORD *)v35;
        __p = *(void **)(v35 + 8);
        v52 = 0;
        v53 = 0;
        v51 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(v35 + 16), *(_QWORD *)(v35 + 24), (uint64_t)(*(_QWORD *)(v35 + 24) - *(_QWORD *)(v35 + 16)) >> 2);
        v54 = *(_DWORD *)(v34 + 48 * i + 40);
        v36 = *((double *)v48[0] + v54);
        v37 = *(float *)&__p + *((float *)&__p + 1) + v36;
        if (v37 < v29)
          v29 = *(float *)&__p + *((float *)&__p + 1) + v36;
        if (v26 + v37 > v23)
        {
          v54 = v22;
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v40, (float *)&v49);
        }
        if (v51)
        {
          v52 = v51;
          operator delete(v51);
        }
        v32 = v41;
      }
      v24 = (double *)v48[0];
      *((double *)v48[0] + (v6 - 1)) = v29;
      v30 = v6-- <= 1;
    }
    while (!v30);
  }
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1);
  v38 = (*(int (**)(_QWORD *))(*a1 + 160))(a1) > 0;
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  return v38;
}

void sub_1AE061A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeStateTimes(_QWORD *a1, std::vector<int> *a2)
{
  int v4;
  unsigned int *begin;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  std::vector<int>::pointer end;
  unsigned int *v17;
  signed int v19;
  unsigned int *v20;
  int v21;
  int v22;
  BOOL v23;
  _QWORD v25[34];

  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Input lattice must be topologically sorted.");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  a2->__end_ = a2->__begin_;
  LODWORD(v25[0]) = -1;
  std::vector<int>::resize(a2, v4, (std::vector<int>::const_reference)v25);
  begin = (unsigned int *)a2->__begin_;
  *a2->__begin_ = 0;
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1[1] + 64);
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 32) - *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 24);
      v9 = v8 ? *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 24) : 0;
      if (v8)
        break;
LABEL_20:
      if (++v6 == v4)
        goto LABEL_21;
    }
    v10 = begin[v6];
    v11 = v8 / 20;
    if ((unint64_t)(v8 / 20) <= 1)
      v11 = 1;
    v12 = (int *)(v9 + 16);
    while (1)
    {
      v13 = *v12;
      v14 = begin[v13];
      if (*(v12 - 4))
        break;
      v15 = v10;
      if (v14 == -1)
        goto LABEL_18;
      if (v14 != v10)
      {
LABEL_14:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Invalid lattice: different paths have a different number of frames");
        goto LABEL_32;
      }
LABEL_19:
      v12 += 5;
      if (!--v11)
        goto LABEL_20;
    }
    v15 = v10 + 1;
    if (v14 != -1)
    {
      if (v14 != v10 + 1)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    begin[v13] = v15;
    goto LABEL_19;
  }
LABEL_21:
  end = a2->__end_;
  v17 = begin + 1;
  if (begin != (unsigned int *)end && v17 != (unsigned int *)end)
  {
    v19 = *begin;
    v20 = begin + 1;
    do
    {
      v22 = *v20++;
      v21 = v22;
      v23 = v19 < v22;
      if (v19 <= v22)
        v19 = v21;
      if (v23)
        begin = v17;
      v17 = v20;
    }
    while (v20 != (unsigned int *)end);
  }
  return *begin;
}

void sub_1AE061C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::CompactLatticeStateTimes(_QWORD *a1, std::vector<int> *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::pointer begin;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _BOOL4 v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t __x;
  void *__p;
  _BYTE *v27;
  float v28;
  int v29;
  float v30;
  int v31;

  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__x, "Input lattice must be topologically sorted.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__x);
  }
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  a2->__end_ = a2->__begin_;
  LODWORD(__x) = -1;
  std::vector<int>::resize(a2, v4, (std::vector<int>::const_reference)&__x);
  *a2->__begin_ = 0;
  if (v4 < 1)
  {
LABEL_36:
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Utterance does not have a final-state.", 38);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    }
    return 0;
  }
  v5 = 0;
  v6 = v4;
  v7 = 0xFFFFFFFFLL;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v5) + 48);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v5) + 56);
    v10 = v9 - v8;
    if (v9 == v8)
      v11 = 0;
    else
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v5) + 48);
    if (v9 != v8)
    {
      begin = a2->__begin_;
      v13 = a2->__begin_[v5];
      v14 = v10 / 48;
      if (v14 <= 1)
        v14 = 1;
      v15 = v11 + 24;
      do
      {
        v16 = *(int *)(v15 + 16);
        if (begin[v16] == -1)
          begin[v16] = v13 + ((*(_QWORD *)v15 - *(_QWORD *)(v15 - 8)) >> 2);
        v15 += 48;
        --v14;
      }
      while (v14);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&__x, a1, v5);
    v30 = *((float *)&__x + 1);
    v31 = __x;
    v29 = 2139095040;
    v28 = INFINITY;
    v17.n128_u32[0] = __x;
    if (*(float *)&__x == INFINITY)
    {
      v17.n128_f32[0] = v30;
      v19 = __p;
      if (v30 != v28)
      {
        v18 = 1;
        if (!__p)
          goto LABEL_20;
LABEL_19:
        v27 = v19;
        operator delete(v19);
        goto LABEL_20;
      }
      v18 = v27 != __p;
      if (__p)
        goto LABEL_19;
    }
    else
    {
      v18 = 1;
      v19 = __p;
      if (__p)
        goto LABEL_19;
    }
LABEL_20:
    if (v18)
    {
      v20 = a2->__begin_[v5];
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, __n128))(*a1 + 32))(&__x, a1, v5, v17);
      v21 = __p;
      v22 = v27;
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v23 = v20 + ((unint64_t)(v22 - v21) >> 2);
      if ((_DWORD)v7 == -1)
      {
        v7 = v23;
      }
      else if ((_DWORD)v23 != (_DWORD)v7)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Utterance does not seem to have a consistent length.", 52);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
        }
        if ((int)v7 <= (int)v23)
          v7 = v23;
        else
          v7 = v7;
      }
    }
    ++v5;
  }
  while (v5 != v6);
  if ((_DWORD)v7 == -1)
    goto LABEL_36;
  return v7;
}

float kaldi::LatticeForwardBackward(_QWORD *a1, uint64_t *a2, double *a3)
{
  double *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  double *v37;
  double v38;
  double v39;
  long double v40;
  float v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float *v47;
  float **v48;
  unint64_t v49;
  _QWORD *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  double v61;
  double *v62;
  float v63;
  float v64;
  _QWORD *v65;
  uint64_t i;
  uint64_t v67;
  int *v68;
  char **v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  char *v73;
  int *v74;
  int v75;
  float j;
  _QWORD *v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  uint64_t v85;
  void *__p[3];
  std::vector<int> v87;
  _QWORD v88[34];
  float v89;
  int v90;
  float v91;

  v3 = a3;
  v4 = a1;
  if (a3)
    *a3 = 0.0;
  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v88, "Input lattice must be topologically sorted.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v88);
  }
  (*(void (**)(_QWORD *))(*v4 + 24))(v4);
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 160))(v4);
  memset(&v87, 0, sizeof(v87));
  v79 = kaldi::LatticeStateTimes(v4, &v87);
  std::vector<double>::vector(__p, v5, &kaldi::kLogZeroDouble);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a2);
  std::vector<std::vector<std::pair<int,float>>>::resize(a2, v79);
  *(_QWORD *)__p[0] = 0;
  if (v5 < 1)
  {
    v62 = (double *)__p[0];
    v8 = -INFINITY;
  }
  else
  {
    v6 = 0;
    v7 = v5;
    v8 = -INFINITY;
    do
    {
      v9 = v7;
      v10 = (double *)__p[0];
      v11 = *((double *)__p[0] + v6);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4[1] + 64) + 8 * v6) + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4[1] + 64) + 8 * v6) + 32) - v12;
      if (v13)
      {
        v14 = v13 / 20;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        v16 = (float *)(v12 + 16);
        do
        {
          v17 = *(int *)v16;
          v18 = v10[v17];
          v19 = v11 - (*(v16 - 2) + *(v16 - 1));
          if (v18 >= v19)
            v20 = v10[v17];
          else
            v20 = v11 - (*(v16 - 2) + *(v16 - 1));
          if (v18 >= v19)
            v21 = v19 - v18;
          else
            v21 = v18 - v19;
          if (v21 >= -36.0436534)
          {
            v22 = exp(v21);
            v20 = v20 + log1p(v22);
          }
          v10[v17] = v20;
          v16 += 5;
          --v15;
        }
        while (v15);
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v4 + 32))(&v85, v4, v6);
      v91 = *((float *)&v85 + 1);
      LODWORD(v88[0]) = v85;
      v90 = 2139095040;
      v89 = INFINITY;
      v7 = v9;
      if (*(float *)&v85 != INFINITY || v91 != v89)
      {
        v23 = v11 - (float)(*(float *)&v85 + *((float *)&v85 + 1));
        v24 = v8 - v23;
        if (v8 >= v23)
        {
          v25 = v23 - v8;
        }
        else
        {
          v8 = v11 - (float)(*(float *)&v85 + *((float *)&v85 + 1));
          v25 = v24;
        }
        if (v25 >= -36.0436534)
        {
          v26 = exp(v25);
          v8 = v8 + log1p(v26);
        }
        if (v87.__begin_[v6] != v79)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Invalid lattice: final state before max_time", 44);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v88);
        }
      }
      ++v6;
    }
    while (v6 != v9);
    v80 = v4;
    v83 = v3;
    do
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*v4 + 32))(v88, v4, v7 - 1);
      v81 = v7;
      v82 = v7 - 1;
      v27 = (float)-(float)(*(float *)v88 + *((float *)v88 + 1));
      v28 = (v7 - 1);
      v29 = *(_QWORD *)(*(_QWORD *)(v4[1] + 64) + 8 * v28);
      v31 = *(_QWORD *)(v29 + 24);
      v30 = *(_QWORD *)(v29 + 32);
      if (v30 == v31)
        v32 = 0;
      else
        v32 = *(_QWORD *)(v29 + 24);
      if (v30 != v31)
      {
        v33 = 0;
        if ((unint64_t)((v30 - v31) / 20) <= 1)
          v34 = 1;
        else
          v34 = (v30 - v31) / 20;
        do
        {
          v35 = (float *)(v32 + 20 * v33);
          v36 = v35 + 3;
          v37 = (double *)__p[0];
          v38 = *((double *)__p[0] + *((int *)v35 + 4)) - (v35[2] + v35[3]);
          v39 = v27 - v38;
          if (v27 >= v38)
            v39 = v38 - v27;
          else
            v27 = *((double *)__p[0] + *((int *)v35 + 4)) - (v35[2] + v35[3]);
          if (v39 >= -36.0436534)
          {
            v40 = exp(v39);
            v27 = v27 + log1p(v40);
          }
          v41 = *v35;
          if (v3 || v41 != 0.0)
          {
            v42 = exp(v38 + v37[v28] - v8);
            v43 = v42;
            if (v41 != 0.0)
            {
              v44 = v28;
              v45 = *a2 + 24 * v87.__begin_[v28];
              v46 = v42;
              v48 = (float **)(v45 + 8);
              v47 = *(float **)(v45 + 8);
              v50 = (_QWORD *)(v45 + 16);
              v49 = *(_QWORD *)(v45 + 16);
              if ((unint64_t)v47 >= v49)
              {
                v52 = *(float **)v45;
                v53 = ((uint64_t)v47 - *(_QWORD *)v45) >> 3;
                v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v55 = v49 - (_QWORD)v52;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v50, v56);
                  v47 = *v48;
                  v52 = *(float **)v45;
                }
                else
                {
                  v57 = 0;
                }
                v58 = (float *)&v57[8 * v53];
                *v58 = v41;
                v58[1] = v46;
                v59 = v58;
                if (v47 != v52)
                {
                  do
                  {
                    v60 = *((_QWORD *)v47 - 1);
                    v47 -= 2;
                    *((_QWORD *)v59 - 1) = v60;
                    v59 -= 2;
                  }
                  while (v47 != v52);
                  v52 = *(float **)v45;
                }
                *(_QWORD *)v45 = v59;
                v51 = v58 + 2;
                *v48 = v58 + 2;
                *v50 = &v57[8 * v56];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *v47 = v41;
                v47[1] = v46;
                v51 = v47 + 2;
              }
              v28 = v44;
              *v48 = v51;
              v3 = v83;
            }
            if (v3)
              *v3 = *v3 - v43 * *v36;
          }
          ++v33;
        }
        while (v33 != v34);
      }
      v4 = v80;
      v7 = v82;
      if (v3)
      {
        v91 = *((float *)v88 + 1);
        LODWORD(v85) = v88[0];
        v90 = 2139095040;
        v89 = INFINITY;
        if (*(float *)v88 != INFINITY || v91 != v89)
        {
          v61 = *((float *)v88 + 1);
          *v3 = *v3 - exp(*((double *)__p[0] + v28) - (*(float *)v88 + *((float *)v88 + 1)) - v8) * v61;
        }
      }
      v62 = (double *)__p[0];
      *((double *)__p[0] + v28) = v27;
    }
    while (v81 > 1);
  }
  v63 = v8;
  v64 = *v62;
  if (v63 != v64
    && (COERCE_INT(fabs(v63 - v64)) > 2139095039
     || fabsf(v63 - v64) > (float)((float)(fabsf(v63) + fabsf(v64)) * 0.00000001))
    && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Total forward probability over lattice = ", 41);
    v65 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", while total backward probability = ", 37);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Non-finite total probability in lattice (", 41);
    v78 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"). Numeric problems with model?", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v88);
  }
  if (v79 >= 1)
  {
    for (i = 0; i != v79; ++i)
    {
      v67 = *a2 + 24 * i;
      v69 = (char **)(v67 + 8);
      v68 = *(int **)(v67 + 8);
      v70 = 126 - 2 * __clz(((uint64_t)v68 - *(_QWORD *)v67) >> 3);
      if (v68 == *(int **)v67)
        v71 = 0;
      else
        v71 = v70;
      std::__introsort<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,false>(*(int **)v67, v68, (uint64_t)v88, v71, 1);
      v72 = *(int **)v67;
      v73 = *v69;
      if (*(_QWORD *)v67 < (unint64_t)*v69)
      {
        v74 = *(int **)v67;
        do
        {
          v75 = *v74;
          *v72 = *v74;
          for (j = *((float *)v74 + 1); ; j = j + *((float *)v74 + 1))
          {
            *((float *)v72 + 1) = j;
            v74 += 2;
            if (v74 >= (int *)v73 || *v74 != v75)
              break;
          }
          v72 += 2 * (j != 0.0);
        }
        while (v74 < (int *)v73);
      }
      std::vector<std::pair<int,float>>::erase(v67, (char *)v72, v73);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  return v64;
}

void sub_1AE06277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::TopSortCompactLatticeIfNeeded(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[34];

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 1);
  if (!result)
  {
    result = fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1);
    if ((result & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Topological sorting failed");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
    }
  }
  return result;
}

uint64_t kaldi::TopSortLatticeIfNeeded(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[34];

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 1);
  if (!result)
  {
    result = fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    if ((result & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Topological sorting failed");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
    }
  }
  return result;
}

void kaldi::ConvertCompactLatticeToPhones(kaldi::TransitionModel *a1, _QWORD *a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *__p;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  int *v68;
  uint64_t v69;
  int v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  float v75;
  int v76;

  v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 160))(a2);
  if (v5 >= 1)
  {
    v6 = 0;
    v55 = v5;
    while (1)
    {
      v71 = (char *)&unk_1E5D21420;
      v74 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
      v7 = a2[1];
      v56 = v6;
      v8 = *(char **)(*(_QWORD *)(v7 + 64) + 8 * v6);
      v72 = v8;
      v73 = (char *)(v7 + 8);
      for (i = v74; ; i = ++v74)
      {
        v10 = *((_QWORD *)v8 + 6);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v8 + 7) - v10) >> 4))
          break;
        v11 = (uint64_t *)(v10 + 48 * i);
        v65 = *v11;
        v66 = (void *)v11[1];
        v68 = 0;
        v69 = 0;
        v67 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, (const void *)v11[2], v11[3], (v11[3] - v11[2]) >> 2);
        v70 = *(_DWORD *)(v10 + 48 * i + 40);
        __p = 0;
        v63 = 0;
        v64 = 0;
        v13 = (int *)v67;
        v12 = v68;
        if (a3)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v64, 1uLL);
          v16 = (char *)__p;
          v17 = v63;
          *(_DWORD *)v15 = (unint64_t)((char *)v12 - (char *)v13) >> 2;
          v18 = (uint64_t)(v15 + 4);
          v19 = v15;
          while (v17 != v16)
          {
            v20 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          __p = v19;
          v63 = v15 + 4;
          v64 = &v15[4 * v14];
          if (v16)
            operator delete(v16);
          v63 = (char *)v18;
          v13 = (int *)v67;
          v12 = v68;
        }
        else
        {
          v18 = 0;
        }
        if (v13 != v12)
        {
          do
          {
            if (kaldi::TransitionModel::IsFinal(a1, *v13))
            {
              v21 = kaldi::TransitionModel::TransitionIdToPhone(a1, *v13);
              v22 = v21;
              v23 = v63;
              if (v63 >= v64)
              {
                v25 = (char *)__p;
                v26 = (v63 - (_BYTE *)__p) >> 2;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v28 = v64 - (_BYTE *)__p;
                if ((v64 - (_BYTE *)__p) >> 1 > v27)
                  v27 = v28 >> 1;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                  v29 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v64, v29);
                  v25 = (char *)__p;
                  v23 = v63;
                }
                else
                {
                  v30 = 0;
                }
                v31 = &v30[4 * v26];
                *(_DWORD *)v31 = v22;
                v24 = v31 + 4;
                while (v23 != v25)
                {
                  v32 = *((_DWORD *)v23 - 1);
                  v23 -= 4;
                  *((_DWORD *)v31 - 1) = v32;
                  v31 -= 4;
                }
                __p = v31;
                v63 = v24;
                v64 = &v30[4 * v29];
                if (v25)
                  operator delete(v25);
              }
              else
              {
                *(_DWORD *)v63 = v21;
                v24 = v23 + 4;
              }
              v63 = v24;
            }
            ++v13;
          }
          while (v13 != v68);
          v18 = (uint64_t)v63;
        }
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v67, (char *)__p, v18, (v18 - (uint64_t)__p) >> 2);
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v71, (float *)&v65);
        if (__p)
        {
          v63 = (char *)__p;
          operator delete(__p);
        }
        if (v67)
        {
          v68 = (int *)v67;
          operator delete(v67);
        }
        v8 = v72;
      }
      v33 = v56;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a2 + 32))(&v65, a2, v56);
      LODWORD(__p) = HIDWORD(v65);
      LODWORD(v71) = v65;
      v76 = 2139095040;
      v75 = INFINITY;
      if (*(float *)&v65 != INFINITY)
        break;
      v35 = v66;
      v34 = v67;
      if (*(float *)&__p != v75 || v67 != v66)
        goto LABEL_41;
LABEL_75:
      if (v35)
      {
        v67 = v35;
        operator delete(v35);
      }
      v6 = v33 + 1;
      if (v6 == v55)
        return;
    }
    v35 = v66;
    v34 = v67;
LABEL_41:
    v71 = 0;
    v72 = 0;
    v73 = 0;
    if (a3)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73, 1uLL);
      v38 = v71;
      v39 = v72;
      *(_DWORD *)v37 = (unint64_t)(v34 - (_BYTE *)v35) >> 2;
      v40 = (uint64_t)(v37 + 4);
      v41 = v37;
      while (v39 != v38)
      {
        v42 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v41 - 1) = v42;
        v41 -= 4;
      }
      v71 = v41;
      v72 = v37 + 4;
      v73 = &v37[4 * v36];
      if (v38)
        operator delete(v38);
      v72 = (char *)v40;
      v35 = v66;
      v34 = v67;
    }
    else
    {
      v40 = 0;
    }
    if (v35 != (_DWORD *)v34)
    {
      do
      {
        if (kaldi::TransitionModel::IsFinal(a1, *v35))
        {
          v43 = kaldi::TransitionModel::TransitionIdToPhone(a1, *v35);
          v44 = v43;
          v45 = v72;
          if (v72 >= v73)
          {
            v47 = v71;
            v48 = (v72 - v71) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v50 = v73 - v71;
            if ((v73 - v71) >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73, v51);
              v47 = v71;
              v45 = v72;
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = v44;
            v46 = v53 + 4;
            while (v45 != v47)
            {
              v54 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            v71 = v53;
            v72 = v46;
            v73 = &v52[4 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_DWORD *)v72 = v43;
            v46 = v45 + 4;
          }
          v72 = v46;
        }
        ++v35;
      }
      while (v35 != v67);
      v40 = (uint64_t)v72;
    }
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v66, v71, v40, (v40 - (uint64_t)v71) >> 2);
    v58 = v65;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, v66, (uint64_t)v67, ((_BYTE *)v67 - (_BYTE *)v66) >> 2);
    v33 = v56;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a2 + 184))(a2, v56, &v58);
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    v35 = v66;
    goto LABEL_75;
  }
}

void sub_1AE062DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::CompactLatticeShortestPath(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  kaldi::CompactLatticeShortestPath(a1, a2, a3, &v3);
}

void kaldi::CompactLatticeShortestPath(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  double v25;
  char *v26;
  unint64_t v27;
  double v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  BOOL v45;
  uint64_t *v46;
  char *v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  const void *v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  unint64_t v85;
  _BYTE __p[24];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char *v100;
  char *v101;
  char *v102;
  void *v103[4];

  if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x4000000000, 1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 24))(a1) == -1)
      return;
    v81 = a3;
    (*(void (**)(_QWORD *))(*a1 + 24))(a1);
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
    std::vector<std::pair<double,int>>::vector(v103, v8 + 1);
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
    v10 = 0;
    for (i = 0; i <= (*(int (**)(_QWORD *))(*a1 + 160))(a1); ++i)
    {
      v12 = (char *)v103[0] + v10;
      *(_QWORD *)v12 = 0x7FF0000000000000;
      *((_DWORD *)v12 + 2) = -1;
      v10 += 16;
    }
    v13 = 0;
    *(_QWORD *)v103[0] = 0;
    v14 = v9;
    while (v13 < (*(int (**)(_QWORD *))(*a1 + 160))(a1))
    {
      v15 = (char *)v103[0];
      v16 = *((double *)v103[0] + 2 * v13);
      v17 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13);
      v19 = *(_QWORD *)(v17 + 48);
      v18 = *(_QWORD *)(v17 + 56);
      v21 = v18 - v19;
      v20 = v18 == v19;
      if (v18 == v19)
        v22 = 0;
      else
        v22 = v19;
      if (!v20)
      {
        v23 = v21 / 48;
        if (v23 <= 1)
          v23 = 1;
        v24 = (float *)(v22 + 40);
        do
        {
          v25 = v16 + *(v24 - 8) + *(v24 - 7);
          v26 = &v15[16 * *(int *)v24];
          if (v25 < *(double *)v26)
          {
            *(double *)v26 = v25;
            *((_DWORD *)v26 + 2) = v13;
          }
          v24 += 12;
          --v23;
        }
        while (v23);
      }
      (*(void (**)(unint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v85, a1, v13);
      v27 = v85;
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v28 = v16 + *(float *)&v27 + *((float *)&v27 + 1);
      v29 = (char *)v103[0] + 16 * v9;
      if (v28 < *(double *)v29)
      {
        *(double *)v29 = v28;
        *((_DWORD *)v29 + 2) = v13;
      }
      ++v13;
    }
    v80 = a4;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    if (v9)
    {
      v30 = 0;
      while (1)
      {
        v9 = *((_DWORD *)v103[0] + 4 * v9 + 2);
        if (v9 == -1)
          break;
        if (v30 >= v102)
        {
          v32 = v100;
          v33 = (v30 - v100) >> 2;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v35 = v102 - v100;
          if ((v102 - v100) >> 1 > v34)
            v34 = v35 >> 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
            v36 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v102, v36);
            v32 = v100;
            v30 = v101;
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[4 * v33];
          *(_DWORD *)v38 = v9;
          v31 = v38 + 4;
          while (v30 != v32)
          {
            v39 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v38 - 1) = v39;
            v38 -= 4;
          }
          v100 = v38;
          v101 = v31;
          v102 = &v37[4 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_DWORD *)v30 = v9;
          v31 = v30 + 4;
        }
        v101 = v31;
        v30 = v31;
        if (!v9)
          goto LABEL_51;
      }
      v79 = v80;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Failure in best-path algorithm for lattice (infinite costs?)", 60);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v85);
      }
      v78 = 0x7FF0000000000000;
      goto LABEL_104;
    }
    v31 = 0;
LABEL_51:
    v43 = v100;
    v44 = v31 - 4;
    v45 = v100 != v31 && v44 > v100;
    v46 = v81;
    if (v45)
    {
      v47 = v100 + 4;
      do
      {
        v48 = *((_DWORD *)v47 - 1);
        *((_DWORD *)v47 - 1) = *(_DWORD *)v44;
        *(_DWORD *)v44 = v48;
        v44 -= 4;
        v49 = v47 >= v44;
        v47 += 4;
      }
      while (!v49);
      v43 = v100;
    }
    if (v31 == v43)
      goto LABEL_100;
    v50 = 0;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      ++v50;
      v51 = v100;
      v52 = v101;
    }
    while (v50 < (v101 - v100) >> 2);
    if (v101 == v100)
    {
LABEL_100:
      v78 = *((_QWORD *)v103[0] + 2 * v14);
      v79 = v80;
LABEL_104:
      *v79 = v78;
      if (v100)
      {
        v101 = v100;
        operator delete(v100);
      }
      if (v103[0])
      {
        v103[1] = v103[0];
        operator delete(v103[0]);
      }
      return;
    }
    v53 = 0;
    while (1)
    {
      v54 = v53;
      if (!v53)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
        v51 = v100;
        v52 = v101;
      }
      ++v53;
      if (v54 + 1 < (v52 - v51) >> 2)
        break;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 32))(&v82, a1, *(unsigned int *)&v51[4 * v54]);
      (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v54, &v82);
      v69 = v83;
      if (v83)
      {
        v84 = v83;
LABEL_98:
        operator delete(v69);
      }
LABEL_99:
      v51 = v100;
      v52 = v101;
      if (v53 >= (v101 - v100) >> 2)
        goto LABEL_100;
    }
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v57 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * *(int *)&v51[4 * v54]) + 48);
    v55 = *v57;
    v56 = v57[1];
    v59 = v56 - *v57;
    v58 = v56 == *v57;
    if (v56 == *v57)
      v60 = 0;
    else
      v60 = v55;
    if (v58)
    {
      v68 = 0;
      v67 = 0;
      v61 = 0;
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = v59 / 48;
      if (v64 <= 1)
        v65 = 1;
      else
        v65 = v64;
      v66 = (_DWORD *)(v60 + 40);
      do
      {
        if (*v66 == *(_DWORD *)&v100[4 * v53])
        {
          if ((v62 & 1) != 0 && *((float *)v66 - 8) + *((float *)v66 - 7) >= *(float *)&v95 + *((float *)&v95 + 1))
          {
            v62 = 1;
          }
          else
          {
            v94 = (void *)*((_QWORD *)v66 - 5);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v95, (uint64_t)(v66 - 8));
            v99 = *v66;
            v62 = 1;
            v61 = v63;
          }
        }
        ++v63;
        v66 += 12;
      }
      while (v65 != v63);
      LODWORD(v55) = (_DWORD)v94;
      v67 = v96;
      v68 = v97;
      v46 = v81;
    }
    v85 = __PAIR64__(HIDWORD(v94), v55);
    *(_QWORD *)__p = v95;
    *(_QWORD *)&__p[16] = 0;
    v87 = 0;
    *(_QWORD *)&__p[8] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[8], v67, v68, (v68 - (uint64_t)v67) >> 2);
    LODWORD(v88) = v53;
    (*(void (**)(uint64_t, unint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v54, &v85);
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    if (v46)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Add ", 4);
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" ilabel ", 8);
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" olabel ", 8);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" usedarcind ", 12);
        v73 = (_QWORD *)std::ostream::operator<<();
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" weight ", 8);
        fst::operator<<<fst::LatticeWeightTpl<float>,int>(v74, (uint64_t)&v95);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85);
      }
      v75 = *(_DWORD *)&v100[4 * v54];
      v92 = 0;
      v93 = 0;
      v91 = 0;
      v85 = __PAIR64__(v94, v75);
      *(_DWORD *)__p = v61;
      v87 = 0;
      *(_OWORD *)&__p[4] = xmmword_1AE194620;
      v88 = 0u;
      v89 = 0u;
      v90 = 0;
      *(_DWORD *)&__p[20] = v99;
      v76 = v46[1];
      if (v76 >= v46[2])
      {
        v77 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(v46, (uint64_t)&v85);
      }
      else
      {
        std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>((uint64_t)v46, (uint64_t)&v85);
        v77 = v76 + 104;
      }
      v46[1] = v77;
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
    }
    v69 = (void *)v96;
    if (!v96)
      goto LABEL_99;
    v97 = (uint64_t)v96;
    goto LABEL_98;
  }
  v40 = a1[1];
  ++*(_DWORD *)(v40 + 56);
  v94 = &unk_1E5D28AB0;
  v95 = v40;
  if (!fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v94))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Was not able to topologically sort lattice (cycles found?)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v85);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Done Topo Sort", 14);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v85);
  }
  kaldi::CompactLatticeShortestPath(&v94, a2, a3, a4);
  v94 = &unk_1E5D25800;
  v41 = v95;
  if (v95)
  {
    v42 = *(_DWORD *)(v95 + 56) - 1;
    *(_DWORD *)(v95 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
}

void sub_1AE0636F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  _DWORD *v15;
  int v16;
  va_list va;

  va_start(va, a14);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  *(_QWORD *)(v14 - 216) = &unk_1E5D25800;
  v15 = *(_DWORD **)(v14 - 208);
  if (v15)
  {
    v16 = v15[14] - 1;
    v15[14] = v16;
    if (!v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  }
  JUMPOUT(0x1AE0637F8);
}

void sub_1AE06374C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v34 - 200);
  if (v35)
  {
    *(_QWORD *)(v34 - 192) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v34 - 168);
  if (v36)
  {
    *(_QWORD *)(v34 - 160) = v36;
    operator delete(v36);
  }
  JUMPOUT(0x1AE0637E8);
}

void sub_1AE06379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AE0637BCLL);
}

void sub_1AE0637AC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 168);
  if (v1)
  {
    *(_QWORD *)(v0 - 160) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1AE0637E8);
}

void sub_1AE0637E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst(uint64_t a1, int a2, _QWORD *a3, char ***a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  float v26;
  unint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  float v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  float v50;
  int v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  unint64_t v66;
  unint64_t v68;
  _DWORD v70[2];
  void *v71;
  void *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  void *v86;
  uint64_t v87;
  unint64_t *v88;
  void *v89;
  void *__p;
  void *v91;
  uint64_t v92;
  int v93;

  if (!(*(unsigned int (**)(_QWORD *))(*a3 + 160))(a3))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Rescoring empty lattice", 23);
LABEL_95:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
    }
    return 0;
  }
  if ((**(unsigned int (***)(uint64_t))a1)(a1) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"the DeterministicOnDemandFst is invalid", 39);
      goto LABEL_95;
    }
    return 0;
  }
  v7 = a3[1];
  ++*(_DWORD *)(v7 + 56);
  v86 = &unk_1E5D28AB0;
  v87 = v7;
  kaldi::TopSortCompactLatticeIfNeeded((uint64_t)&v86);
  (*(void (**)(_QWORD *))(*a3 + 224))(a3);
  v83 = 0u;
  v84 = 0u;
  v85 = 1065353216;
  v82 = 0u;
  memset(v81, 0, sizeof(v81));
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 176))(a3, v8);
  v80 = 0;
  v9 = *(int *)(v87 + 88);
  v80 = v9 + ((**(uint64_t (***)(uint64_t))a1)(a1) << 32);
  v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 24))(a3);
  v88 = &v80;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v83, &v80, (uint64_t)&std::piecewise_construct, &v88)+ 6) = v10;
  std::deque<unsigned long long>::push_back(v81, &v80);
  v11 = *((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v12 = 0;
    v64 = a1;
    while (1)
    {
      v79 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v81[0] + 1) + (((unint64_t)v82 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v82 & 0x1FF));
      v79 = v13;
      *(_QWORD *)&v82 = v82 + 1;
      *((_QWORD *)&v82 + 1) = v11 - 1;
      if ((unint64_t)v82 >= 0x400)
      {
        operator delete(**((void ***)&v81[0] + 1));
        *((_QWORD *)&v81[0] + 1) += 8;
        *(_QWORD *)&v82 = v82 - 512;
        v13 = v79;
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v87 + 64) + 8 * (int)v13);
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      v17 = v15 == v16 ? 0 : *(_QWORD *)(v14 + 48);
      if (v15 != v16)
        break;
LABEL_57:
      v11 = *((_QWORD *)&v82 + 1);
      a1 = v64;
      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_58;
    }
    v18 = 0;
    v68 = HIDWORD(v13);
    v19 = (v15 - v16) / 48;
    if (v19 <= 1)
      v19 = 1;
    v66 = v19;
    while (1)
    {
      v20 = v17 + 48 * v18;
      v23 = *(_DWORD *)(v20 + 4);
      v21 = (int *)(v20 + 4);
      v22 = v23;
      if (*a4)
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v78);
      else
        v78 = 0uLL;
      v24 = *v21;
      if (*v21 < 0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"invalid arc.olabel ", 19);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v88);
        v24 = *v21;
      }
      if (!v24 || v24 == a2)
        break;
      v28 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 24))(v64, v68);
      if ((v28 & 1) != 0)
      {
        v27 = HIDWORD(v74);
        v22 = DWORD1(v74);
        v26 = *((float *)&v74 + 2);
        goto LABEL_28;
      }
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"cannot find arc with label ", 27);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" on state ", 10);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" in the LM FST, wrong input?", 28);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      }
      v40 = v87;
      ++*(_DWORD *)(v87 + 56);
      v41 = (_DWORD *)a3[1];
      if (v41)
      {
        v42 = v41[14] - 1;
        v41[14] = v42;
        if (!v42)
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      }
      a3[1] = v40;
      v34 = 1;
LABEL_50:
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v34)
      {
LABEL_92:
        v60 = 0;
        goto LABEL_98;
      }
      if (++v18 == v66)
        goto LABEL_57;
    }
    v26 = 0.0;
    v27 = v68;
LABEL_28:
    v77 = 0;
    v77 = *(int *)(v17 + 48 * v18 + 40) + (v27 << 32);
    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(&v83, &v77))
    {
      v88 = &v77;
      v29 = *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v83, &v77, (uint64_t)&std::piecewise_construct, &v88)+ 6);
    }
    else
    {
      v29 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
      v88 = &v77;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v83, &v77, (uint64_t)&std::piecewise_construct, &v88)+ 6) = v29;
      std::deque<unsigned long long>::push_back(v81, &v77);
    }
    v30 = v17 + 48 * v18;
    v32 = *(float *)(v30 + 8);
    v31 = *(_DWORD *)(v30 + 12);
    v88 = &v79;
    v33 = *((unsigned int *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v83, &v79, (uint64_t)&std::piecewise_construct, &v88)+ 6);
    *(float *)&v74 = v26 + v32;
    DWORD1(v74) = v31;
    v75 = 0;
    v76 = 0;
    *((_QWORD *)&v74 + 1) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)&v74 + 1, *(const void **)(v17 + 48 * v18 + 16), *(_QWORD *)(v17 + 48 * v18 + 24), (uint64_t)(*(_QWORD *)(v17 + 48 * v18 + 24) - *(_QWORD *)(v17 + 48 * v18 + 16)) >> 2);
    LODWORD(v88) = v22;
    HIDWORD(v88) = v22;
    v89 = (void *)v74;
    v91 = 0;
    v92 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)&v74 + 1), v75, (v75 - *((_QWORD *)&v74 + 1)) >> 2);
    v93 = v29;
    (*(void (**)(_QWORD *, uint64_t, unint64_t **))(*a3 + 208))(a3, v33, &v88);
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    if (*((_QWORD *)&v74 + 1))
    {
      v75 = *((_QWORD *)&v74 + 1);
      operator delete(*((void **)&v74 + 1));
    }
    if (*a4)
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](*a4, &v78);
    v34 = 0;
    if (a5 >= 1 && v12 >= a5)
    {
      (*(void (**)(_QWORD *))(*a3 + 224))(a3);
      v35 = v87;
      ++*(_DWORD *)(v87 + 56);
      v36 = (_DWORD *)a3[1];
      if (v36)
      {
        v37 = v36[14] - 1;
        v36[14] = v37;
        if (!v37)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      }
      a3[1] = v35;
      v34 = 1;
    }
    ++v12;
    goto LABEL_50;
  }
LABEL_58:
  v46 = (uint64_t **)v84;
  if ((_QWORD)v84)
  {
    while (1)
    {
      v47 = (unint64_t)v46[2];
      v48 = *(_QWORD *)(*(_QWORD *)(v87 + 64) + 8 * (int)v47);
      v88 = *(unint64_t **)v48;
      __p = 0;
      v91 = 0;
      v89 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v89, *(const void **)(v48 + 8), *(_QWORD *)(v48 + 16), (uint64_t)(*(_QWORD *)(v48 + 16) - *(_QWORD *)(v48 + 8)) >> 2);
      LODWORD(v78) = HIDWORD(v88);
      LODWORD(v74) = (_DWORD)v88;
      LODWORD(v79) = 2139095040;
      LODWORD(v77) = 2139095040;
      if (*(float *)&v88 == INFINITY && *(float *)&v78 == *(float *)&v77)
      {
        v49 = __p;
        if (__p == v89)
          break;
      }
      if (*a4)
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v74);
      else
        v74 = 0uLL;
      v50 = (*(float (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)a1 + 8))(a1, HIDWORD(v47), &v74);
      *(float *)&v78 = v50;
      LODWORD(v79) = 2139095040;
      if (v50 == INFINITY)
      {
        v51 = 9;
      }
      else
      {
        v52 = v50 + *(float *)&v88;
        if ((LODWORD(v52) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          v54 = v87;
          ++*(_DWORD *)(v87 + 56);
          v55 = (_DWORD *)a3[1];
          if (v55)
          {
            v56 = v55[14] - 1;
            v55[14] = v56;
            if (!v56)
              (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
          }
          a3[1] = v54;
          v51 = 1;
        }
        else
        {
          v53 = *((unsigned int *)v46 + 6);
          *(float *)v70 = v52;
          v70[1] = HIDWORD(v88);
          v71 = 0;
          v72 = 0;
          v73 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v71, v89, (uint64_t)__p, ((_BYTE *)__p - (_BYTE *)v89) >> 2);
          (*(void (**)(_QWORD *, uint64_t, _DWORD *))(*a3 + 184))(a3, v53, v70);
          if (v71)
          {
            v72 = v71;
            operator delete(v71);
          }
          if (*a4)
            std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](*a4, &v74);
          v51 = 0;
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v49 = v89;
      if (v89)
        goto LABEL_83;
LABEL_84:
      if (v51 != 9 && v51)
        goto LABEL_92;
      v46 = (uint64_t **)*v46;
      if (!v46)
        goto LABEL_97;
    }
    v51 = 9;
    if (!__p)
      goto LABEL_84;
LABEL_83:
    __p = v49;
    operator delete(v49);
    goto LABEL_84;
  }
LABEL_97:
  v60 = 1;
LABEL_98:
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v81);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v83);
  v86 = &unk_1E5D25800;
  v61 = v87;
  if (v87)
  {
    v62 = *(_DWORD *)(v87 + 56) - 1;
    *(_DWORD *)(v87 + 56) = v62;
    if (!v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
  return v60;
}

void sub_1AE0640CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,void *a44,void *a45,uint64_t a46)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a43);
  _Unwind_Resume(a1);
}

void std::deque<unsigned long long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned long long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t kaldi::RescoreCompactLatticeWithDeterministicOnDemandCompactLattice(unsigned int (***a1)(_QWORD), int a2, _QWORD *a3, char ***a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  uint64_t v29;
  __n128 v30;
  _BOOL4 v31;
  void *v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  float32x2_t v43;
  void *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t **v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v71;
  unsigned int (***v72)(_QWORD);
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  float v78[2];
  void *v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  __int128 v89;
  void *v90[2];
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD v94[4];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  void *v99;
  uint64_t v100;
  unint64_t *v101;
  void *__p;
  void *v103;
  _BYTE *v104;
  uint64_t v105;
  unsigned int v106;
  float v107;
  float v108;

  if (!(*(unsigned int (**)(_QWORD *))(*a3 + 160))(a3))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"Rescoring empty lattice", 23);
LABEL_125:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
    }
    return 0;
  }
  if ((**a1)(a1) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"the DeterministicOnDemandFst is invalid", 39);
      goto LABEL_125;
    }
    return 0;
  }
  v9 = a3[1];
  ++*(_DWORD *)(v9 + 56);
  v99 = &unk_1E5D28AB0;
  v100 = v9;
  kaldi::TopSortCompactLatticeIfNeeded((uint64_t)&v99);
  (*(void (**)(_QWORD *))(*a3 + 224))(a3);
  v96 = 0u;
  v97 = 0u;
  v98 = 1065353216;
  v95 = 0u;
  memset(v94, 0, sizeof(v94));
  v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 176))(a3, v10);
  v73 = a5;
  v93 = 0;
  v11 = *(int *)(v100 + 88);
  v72 = a1;
  v93 = v11 + (((uint64_t (*)(_QWORD))**a1)(a1) << 32);
  v12 = (*(uint64_t (**)(_QWORD *))(*a3 + 24))(a3);
  v101 = &v93;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v96, &v93, (uint64_t)&std::piecewise_construct, &v101)+ 6) = v12;
  std::deque<unsigned long long>::push_back(v94, &v93);
  v13 = *((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v14 = 0;
    v75 = a2;
    while (1)
    {
      v92 = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(v94[1] + (((unint64_t)v95 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v95 & 0x1FF));
      v92 = v15;
      *(_QWORD *)&v95 = v95 + 1;
      *((_QWORD *)&v95 + 1) = v13 - 1;
      if ((unint64_t)v95 >= 0x400)
      {
        operator delete(*(void **)v94[1]);
        v94[1] += 8;
        *(_QWORD *)&v95 = v95 - 512;
        v15 = v92;
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v100 + 64) + 8 * (int)v15);
      v18 = *(_QWORD *)(v16 + 48);
      v17 = *(_QWORD *)(v16 + 56);
      v19 = v17 == v18 ? 0 : *(_QWORD *)(v16 + 48);
      if (v17 != v18)
        break;
LABEL_82:
      v13 = *((_QWORD *)&v95 + 1);
      if (!*((_QWORD *)&v95 + 1))
        goto LABEL_83;
    }
    v20 = 0;
    v71 = v15;
    v76 = HIDWORD(v15);
    v21 = (v17 - v18) / 48;
    if (v21 <= 1)
      v21 = 1;
    v74 = v21;
    while (1)
    {
      v22 = v19 + 48 * v20;
      v25 = *(_DWORD *)(v22 + 4);
      v24 = (unsigned int *)(v22 + 4);
      v23 = v25;
      *(_OWORD *)v90 = 0u;
      v91 = 0u;
      if (*a4)
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v89);
      else
        v89 = 0uLL;
      v26 = *v24;
      if ((*v24 & 0x80000000) != 0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"invalid arc.olabel ", 19);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v101);
        v26 = *v24;
      }
      if (!v26 || v26 == a2)
        break;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v35 = ((uint64_t (*)(unsigned int (***)(_QWORD), unint64_t, _QWORD, void **, __int128 *))(*v72)[3])(v72, v76, *v24, &v83, &v89);
      v36 = v35;
      if ((v35 & 1) != 0)
      {
        v34 = v88;
        v23 = HIDWORD(v83);
        v90[0] = v84;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v90[1], (char *)v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
      }
      else
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"cannot find arc with label ", 27);
          v37 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" on state ", 10);
          v38 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" in the LM FST, wrong input?", 28);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
        }
        v39 = v100;
        ++*(_DWORD *)(v100 + 56);
        v40 = (_DWORD *)a3[1];
        if (v40)
        {
          v41 = v40[14] - 1;
          v40[14] = v41;
          if (!v41)
            (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
        }
        a3[1] = v39;
        v34 = v76;
      }
      if (v85)
      {
        v86 = v85;
        operator delete(v85);
      }
      if ((v36 & 1) == 0)
      {
        v47 = 1;
        goto LABEL_67;
      }
LABEL_50:
      v82 = 0;
      v82 = *(int *)(v19 + 48 * v20 + 40) + (v34 << 32);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(&v96, &v82))
      {
        v101 = &v82;
        v42 = *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v96, &v82, (uint64_t)&std::piecewise_construct, &v101)+ 6);
      }
      else
      {
        v42 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
        v101 = &v82;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v96, &v82, (uint64_t)&std::piecewise_construct, &v101)+ 6) = v42;
        std::deque<unsigned long long>::push_back(v94, &v82);
      }
      v43 = *(float32x2_t *)(v19 + 48 * v20 + 8);
      v44 = v90[0];
      v101 = &v92;
      v45 = *((unsigned int *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)&v96, &v92, (uint64_t)&std::piecewise_construct, &v101)+ 6);
      v46 = *(_DWORD *)(v19 + 48 * v20);
      v83 = (void *)vadd_f32(v43, (float32x2_t)v44);
      v85 = 0;
      v86 = 0;
      v84 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, *(const void **)(v19 + 48 * v20 + 16), *(_QWORD *)(v19 + 48 * v20 + 24), (uint64_t)(*(_QWORD *)(v19 + 48 * v20 + 24) - *(_QWORD *)(v19 + 48 * v20 + 16)) >> 2);
      v101 = (unint64_t *)__PAIR64__(v23, v46);
      __p = v83;
      v104 = 0;
      v105 = 0;
      v103 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v103, v84, (uint64_t)v85, ((_BYTE *)v85 - (_BYTE *)v84) >> 2);
      v106 = v42;
      (*(void (**)(_QWORD *, uint64_t, unint64_t **))(*a3 + 208))(a3, v45, &v101);
      if (v103)
      {
        v104 = v103;
        operator delete(v103);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      if (*a4)
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](*a4, &v89);
      v47 = 0;
      if (v73 >= 1 && v14 >= v73)
      {
        (*(void (**)(_QWORD *))(*a3 + 224))(a3);
        v48 = v100;
        ++*(_DWORD *)(v100 + 56);
        v49 = (_DWORD *)a3[1];
        if (v49)
        {
          v50 = v49[14] - 1;
          v49[14] = v50;
          if (!v50)
            (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
        }
        a3[1] = v48;
        v47 = 1;
      }
      ++v14;
LABEL_67:
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (v90[1])
      {
        *(void **)&v91 = v90[1];
        operator delete(v90[1]);
      }
      a2 = v75;
      if (v47)
      {
LABEL_122:
        v67 = 0;
        goto LABEL_128;
      }
      if (++v20 == v74)
        goto LABEL_82;
    }
    if (v26 != a2 || v71 != (_DWORD)v93)
    {
LABEL_40:
      v34 = v76;
      goto LABEL_50;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v100 + 64) + 8 * *(int *)(v19 + 48 * v20 + 40));
    v101 = *(unint64_t **)v29;
    v103 = 0;
    v104 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v29 + 8), *(_QWORD *)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 2);
    LODWORD(v82) = HIDWORD(v101);
    LODWORD(v83) = (_DWORD)v101;
    v108 = INFINITY;
    v107 = INFINITY;
    v30.n128_u32[0] = v101;
    if (*(float *)&v101 != INFINITY)
    {
      v31 = 1;
      v32 = __p;
      if (!__p)
        goto LABEL_33;
      goto LABEL_32;
    }
    v30.n128_u32[0] = v82;
    v32 = __p;
    if (*(float *)&v82 == v107)
    {
      v31 = v103 != __p;
      if (!__p)
      {
LABEL_33:
        if (v31)
        {
          v103 = 0;
          v104 = 0;
          v105 = 0;
          v33 = ((uint64_t (*)(unsigned int (***)(_QWORD), unint64_t, _QWORD, unint64_t **, __int128 *, __n128))(*v72)[3])(v72, v76, *v24, &v101, &v89, v30);
          v34 = v76;
          if (v33)
          {
            v34 = v106;
            v23 = HIDWORD(v101);
            v90[0] = __p;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v90[1], (char *)v103, (uint64_t)v104, (v104 - (_BYTE *)v103) >> 2);
          }
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          goto LABEL_50;
        }
        goto LABEL_40;
      }
    }
    else
    {
      v31 = 1;
      if (!__p)
        goto LABEL_33;
    }
LABEL_32:
    v103 = v32;
    operator delete(v32);
    goto LABEL_33;
  }
LABEL_83:
  v54 = (uint64_t **)v97;
  if ((_QWORD)v97)
  {
    while (1)
    {
      v55 = (unint64_t)v54[2];
      v56 = *(_QWORD *)(*(_QWORD *)(v100 + 64) + 8 * (int)v55);
      v101 = *(unint64_t **)v56;
      v103 = 0;
      v104 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v56 + 8), *(_QWORD *)(v56 + 16), (uint64_t)(*(_QWORD *)(v56 + 16) - *(_QWORD *)(v56 + 8)) >> 2);
      LODWORD(v90[0]) = HIDWORD(v101);
      LODWORD(v83) = (_DWORD)v101;
      LODWORD(v89) = 2139095040;
      LODWORD(v92) = 2139095040;
      if (*(float *)&v101 == INFINITY && *(float *)v90 == *(float *)&v92)
      {
        v57 = v103;
        if (v103 == __p)
        {
          v60 = 9;
          if (!v103)
            goto LABEL_112;
LABEL_111:
          v103 = v57;
          operator delete(v57);
          goto LABEL_112;
        }
      }
      if (*a4)
      {
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v90);
      }
      else
      {
        v90[0] = 0;
        v90[1] = 0;
      }
      ((void (*)(void **__return_ptr, unsigned int (***)(_QWORD), unint64_t, void **))(*v72)[1])(&v83, v72, HIDWORD(v55), v90);
      LODWORD(v92) = HIDWORD(v83);
      LODWORD(v89) = (_DWORD)v83;
      LODWORD(v82) = 2139095040;
      v108 = INFINITY;
      if (*(float *)&v83 == INFINITY && *(float *)&v92 == v108)
      {
        v58 = v84;
        if (v85 == v84)
          break;
      }
      if (COERCE_UNSIGNED_INT(fabs(*(float *)&v101 + *(float *)&v83)) >= 0x7F800000)
      {
        v61 = v100;
        ++*(_DWORD *)(v100 + 56);
        v62 = (_DWORD *)a3[1];
        if (v62)
        {
          v63 = v62[14] - 1;
          v62[14] = v63;
          if (!v63)
            (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
        }
        a3[1] = v61;
        v60 = 1;
      }
      else
      {
        v59 = *((unsigned int *)v54 + 6);
        v78[0] = *(float *)&v101 + *(float *)&v83;
        v78[1] = *((float *)&v101 + 1) + *((float *)&v83 + 1);
        v79 = 0;
        v80 = 0;
        v81 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v79, __p, (uint64_t)v103, ((_BYTE *)v103 - (_BYTE *)__p) >> 2);
        (*(void (**)(_QWORD *, uint64_t, float *))(*a3 + 184))(a3, v59, v78);
        if (v79)
        {
          v80 = v79;
          operator delete(v79);
        }
        if (*a4)
          std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](*a4, (__int128 *)v90);
        v60 = 0;
      }
      v58 = v84;
      if (v84)
        goto LABEL_104;
LABEL_105:
      v64 = (std::__shared_weak_count *)v90[1];
      if (v90[1])
      {
        v65 = (unint64_t *)((char *)v90[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v57 = __p;
      if (__p)
        goto LABEL_111;
LABEL_112:
      if (v60 != 9 && v60)
        goto LABEL_122;
      v54 = (uint64_t **)*v54;
      if (!v54)
        goto LABEL_127;
    }
    v60 = 9;
    if (!v84)
      goto LABEL_105;
LABEL_104:
    v85 = v58;
    operator delete(v58);
    goto LABEL_105;
  }
LABEL_127:
  v67 = 1;
LABEL_128:
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v94);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v96);
  v99 = &unk_1E5D25800;
  v68 = v100;
  if (v100)
  {
    v69 = *(_DWORD *)(v100 + 56) - 1;
    *(_DWORD *)(v100 + 56) = v69;
    if (!v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  }
  return v67;
}

void sub_1AE064D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,void *a53,void *a54,uint64_t a55)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a52);
  _Unwind_Resume(a1);
}

void std::deque<unsigned long long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AE0651D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  v5 = operator<<(v4, *(_DWORD **)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  v6 = *(_DWORD **)(a2 + 8);
  if (!v6 || *v6 == -1)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NULL", 4);
  else
    operator<<(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  return a1;
}

void ClassNgram::ClassNgram(ClassNgram *this, Vocab *a2, SubVocab *a3, int a4)
{
  _QWORD *v6;

  Ngram::Ngram(this, a2, a4);
  *v6 = &off_1E5D155D0;
  v6[24] = 0;
  *((_QWORD *)this + 25) = 0;
  Trellis<ClassNgramState>::Trellis((uint64_t)(v6 + 26), 0xC353u, 0);
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 35) = a3;
  *((_BYTE *)this + 288) = 0;
}

void sub_1AE065320(_Unwind_Exception *a1)
{
  LM *v1;
  _DWORD **v2;

  Map2<unsigned int,unsigned int const*,double>::~Map2((_DWORD **)v1 + 25);
  Map2<unsigned int,unsigned int const*,double>::~Map2(v2);
  *(_QWORD *)v1 = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)v1 + 152);
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

void ClassNgram::~ClassNgram(ClassNgram *this)
{
  _DWORD **v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D155D0;
  v2 = (_DWORD **)((char *)this + 192);
  Map2<unsigned int,unsigned int const*,double>::clear((unsigned int **)this + 24);
  Map2<unsigned int,unsigned int const*,double>::clear((unsigned int **)this + 25);
  v3 = *((_QWORD *)this + 32);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8052888210);
  Trellis<ClassNgramState>::~Trellis((uint64_t *)this + 26);
  Map2<unsigned int,unsigned int const*,double>::~Map2((_DWORD **)this + 25);
  Map2<unsigned int,unsigned int const*,double>::~Map2(v2);
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)this + 152);
  LM::~LM(this);
}

{
  ClassNgram::~ClassNgram(this);
  JUMPOUT(0x1AF44D190);
}

char *ClassNgram::contextID(Ngram *this, const unsigned int *a2, const unsigned int *a3, unsigned int *a4)
{
  if (*((_BYTE *)this + 288))
    return Ngram::contextID(this, a2, a3, a4);
  else
    return (char *)LM::contextID(this, a2, (Vocab *)a3, a4);
}

float ClassNgram::contextBOW(Ngram *this, const unsigned int *a2, unsigned int a3)
{
  if (*((_BYTE *)this + 288))
    return Ngram::contextBOW(this, a2, a3);
  else
    return LM::contextBOW(this, a2);
}

BOOL ClassNgram::isNonWord(ClassNgram *this, uint64_t a2)
{
  if (LM::isNonWord(this))
    return 1;
  if (*((_BYTE *)this + 288))
    return 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 32))(*((_QWORD *)this + 35), a2) != 0;
}

float ClassNgram::prefixProb(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  float v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  float *v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  size_t v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  uint64_t v41;
  const unsigned int *v42;
  unsigned int v43;
  int v44;
  float v45;
  unsigned int v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const char *v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  double v56;
  double v57;
  long double v58;
  _DWORD **v59;
  long double *v60;
  float v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const char *v67;
  size_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  float v73;
  float v74;
  float v75;
  double v76;
  BOOL v77;
  double v78;
  double v79;
  long double v80;
  double v81;
  double v82;
  long double v83;
  float v84;
  _DWORD *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  float v90;
  int v92;
  float *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  std::locale v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int *v105;
  uint64_t v106;
  __int128 v107;
  std::locale v108;
  unsigned int v109[2];
  uint64_t v110;
  _DWORD v111[6];
  uint64_t v112;
  uint64_t v113;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v96 = v3;
  v5 = v4;
  v7 = v6;
  v94 = v8;
  v9 = v2;
  v113 = *MEMORY[0x1E0C80C00];
  v95 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 272))(v2, 0);
  v93 = v5;
  if (!v7)
  {
    v25 = *(_DWORD *)(v9 + 240);
    v97 = *(_QWORD *)(v9 + 232);
    *(_DWORD *)(v9 + 220) = v25;
    TrellisSlice<ClassNgramState>::init(*(_QWORD *)(v9 + 208) + 24 * v25);
    LODWORD(v13) = 0;
    v23 = v25;
LABEL_20:
    v26 = (_QWORD *)(v9 + 208);
    v27 = v13;
    v24 = -INFINITY;
    do
    {
      v98 = v23;
      v28 = v27;
      if (v27)
      {
        v99 = *(_DWORD *)(v97 + 4 * (v27 - 1));
        v29 = *(unsigned int *)(v9 + 272);
        *(_DWORD *)(v9 + 272) = v29 + 1;
        *(_DWORD *)Array<unsigned int>::operator[]((int *)(v9 + 248), v29) = v99;
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 272))(v9, v95);
        v99 = v94;
      }
      LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter((uint64_t)v111, (_DWORD **)(*v26 + 24 * (v98 - 1)), 0);
      v30 = 0;
      while (1)
      {
        v31 = (float *)LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::next((uint64_t)v111, &v107);
        if (!v31)
          break;
        v32 = *v31;
        if (!*((_QWORD *)&v107 + 1) || **((_DWORD **)&v107 + 1) == -1)
        {
          v41 = 0;
          v42 = (const unsigned int *)v107;
          while (1)
          {
            v43 = v42[v41];
            if (v43 == -1)
              break;
            v109[++v41] = v43;
            v44 = 49999;
            if (v41 == 49999)
              goto LABEL_40;
          }
          v44 = v41;
LABEL_40:
          v109[v44 + 1] = -1;
          v105 = v109;
          v106 = 0;
          v109[0] = v99;
          v45 = LM::wordProb((LM *)v9, v99, v42);
          if (v45 != -INFINITY)
            v30 = 1;
          v104 = 0;
          Ngram::contextID((Ngram *)v9, 0xFFFFFFFF, v109, &v104);
          v46 = v109[v104];
          v109[v104] = -1;
          if (!*(_BYTE *)(v9 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(v9 + 12) >= 4u))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"POSITION = ", 11);
            v47 = (_QWORD *)std::ostream::operator<<();
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" FROM: ", 7);
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
            operator<<(v48, (uint64_t)&v107);
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" TO: ", 5);
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
            operator<<(v49, (uint64_t)&v105);
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" WORD = ", 8);
            v51 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 32))(*(_QWORD *)(v9 + 24), v99);
            v52 = strlen(v51);
            v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" PROB = ", 8);
            v54 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
            v55 = std::locale::use_facet(&v102, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
            std::locale::~locale(&v102);
            std::ostream::put();
            std::ostream::flush();
          }
          if (v28)
          {
            Trellis<ClassNgramState>::update((uint64_t *)(v9 + 208), (int **)&v107, (int **)&v105, v45);
          }
          else
          {
            if (v24 >= (float)(v32 + v45))
              v56 = (float)(v32 + v45);
            else
              v56 = v24;
            if (v24 >= (float)(v32 + v45))
              v57 = v24;
            else
              v57 = (float)(v32 + v45);
            if (v56 != -INFINITY)
            {
              v58 = exp((v56 - v57) * 2.30258509);
              v57 = v57 + log10(v58 + 1.0);
            }
            v24 = v57;
          }
          v109[v104] = v46;
          LOBYTE(v108.__locale_) = 0;
          v59 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert((_QWORD *)(v9 + 200), v99, &v108);
          LHashIter<unsigned int const*,double>::LHashIter((uint64_t)&v102, v59, 0);
          v101 = 0;
          while (1)
          {
            v60 = (long double *)LHashIter<unsigned int const*,double>::next((uint64_t)&v102, &v101);
            if (!v60)
              break;
            v109[0] = *v101;
            v61 = LM::wordProb((LM *)v9, v109[0], (const unsigned int *)v107);
            v100 = 0;
            Ngram::contextID((Ngram *)v9, 0xFFFFFFFF, v109, &v100);
            v62 = v109[v100];
            v109[v100] = -1;
            v106 = (uint64_t)(v101 + 2);
            if (!*(_BYTE *)(v9 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(v9 + 12) >= 4u))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"POSITION = ", 11);
              v63 = (_QWORD *)std::ostream::operator<<();
              v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" FROM: ", 7);
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
              operator<<(v64, (uint64_t)&v107);
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" TO: ", 5);
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
              operator<<(v65, (uint64_t)&v105);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" WORD = ", 8);
              v67 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 32))(*(_QWORD *)(v9 + 24), v99);
              v68 = strlen(v67);
              v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" PROB = ", 8);
              v70 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" EXPANDPROB = ", 14);
              v71 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
              v72 = std::locale::use_facet(&v108, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
              std::locale::~locale(&v108);
              std::ostream::put();
              std::ostream::flush();
            }
            if (v61 != -INFINITY && *v60 != 0.0)
              v30 = 1;
            if (v28)
            {
              v73 = log10(*v60);
              Trellis<ClassNgramState>::update((uint64_t *)(v9 + 208), (int **)&v107, (int **)&v105, v61 + v73);
            }
            else
            {
              v74 = log10(*v60);
              v75 = (float)(v32 + v61) + v74;
              v76 = v75;
              v77 = v24 < v75;
              if (v24 >= v75)
                v78 = v75;
              else
                v78 = v24;
              if (v77)
                v79 = v76;
              else
                v79 = v24;
              if (v78 != -INFINITY)
              {
                v80 = exp((v78 - v79) * 2.30258509);
                v79 = v79 + log10(v80 + 1.0);
              }
              v24 = v79;
            }
            v109[v100] = v62;
          }
          if (v103)
            MEMORY[0x1AF44D160](v103, 0x50C80EE9192B6);
        }
        else if (**((_DWORD **)&v107 + 1) == v99)
        {
          v105 = (unsigned int *)v107;
          v106 = *((_QWORD *)&v107 + 1) + 4;
          if (!*(_BYTE *)(v9 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(v9 + 12) >= 4u))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"POSITION = ", 11);
            v33 = (_QWORD *)std::ostream::operator<<();
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" FROM: ", 7);
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
            operator<<(v34, (uint64_t)&v107);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" TO: ", 5);
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 328))(*(_QWORD *)(v9 + 24));
            operator<<(v35, (uint64_t)&v105);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" WORD = ", 8);
            v37 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 32))(*(_QWORD *)(v9 + 24), v99);
            v38 = strlen(v37);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
            std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
            v40 = std::locale::use_facet(&v102, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
            std::locale::~locale(&v102);
            std::ostream::put();
            std::ostream::flush();
          }
          if (v28)
          {
            Trellis<ClassNgramState>::update((uint64_t *)(v9 + 208), (int **)&v107, (int **)&v105, 0.0);
          }
          else
          {
            if (v24 >= v32)
              v81 = v32;
            else
              v81 = v24;
            if (v24 >= v32)
              v82 = v24;
            else
              v82 = v32;
            if (v81 != -INFINITY)
            {
              v83 = exp((v81 - v82) * 2.30258509);
              v82 = v82 + log10(v83 + 1.0);
            }
            v24 = v82;
          }
          v30 = 1;
        }
      }
      v27 = v28 - 1;
      if (v28 >= 1 && !v30)
      {
        *(_QWORD *)v109 = v97 + 4 * (v28 - 1);
        v110 = 0;
        *(_DWORD *)(v9 + 220) = v98;
        TrellisSlice<ClassNgramState>::init(*(_QWORD *)(v9 + 208) + 24 * v98);
        v84 = TrellisSlice<ClassNgramState>::sum((_DWORD **)(*v26 + 24 * (v98 - 1)));
        Trellis<ClassNgramState>::setProb(v9 + 208, (int **)v109, v84);
        v85 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 88))(*(_QWORD *)(v9 + 24));
        v86 = 8;
        if (v99 == *v85)
          v86 = 32;
        *(double *)(v96 + v86) = *(double *)(v96 + v86) + 1.0;
      }
      v87 = *(_DWORD *)(v9 + 220) + 1;
      *(_DWORD *)(v9 + 220) = v87;
      TrellisSlice<ClassNgramState>::init(*(_QWORD *)(v9 + 208) + 24 * v87);
      v88 = v98;
      *(_DWORD *)(v9 + 240) = v98;
      if (v112)
      {
        MEMORY[0x1AF44D160](v112, 0x50C80D3D5ADE1);
        v88 = v98;
      }
      v23 = v88 + 1;
    }
    while (v28);
    goto LABEL_98;
  }
  v11 = Vocab::length(v7, v10);
  v12 = v11;
  *(_QWORD *)(v9 + 232) = v7;
  *(_DWORD *)(v9 + 240) = 0;
  v97 = v7;
  if (v11
    && (v13 = v11 - 1,
        v14 = *(_DWORD *)(v7 + 4 * v13),
        v14 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 104))(*(_QWORD *)(v9 + 24))))
  {
    v111[0] = *(_DWORD *)(v7 + 4 * v13);
    v111[1] = -1;
  }
  else
  {
    v111[0] = -1;
    LODWORD(v13) = v12;
  }
  *(_QWORD *)v109 = v111;
  v110 = 0;
  if (v12 >= 2
    && *(_DWORD *)(v9 + 272)
    && (v15 = (_DWORD *)Array<unsigned int>::operator[]((int *)(v9 + 248), 0), *v15 == v111[0]))
  {
    LODWORD(v16) = 1;
    if ((int)v13 >= 1 && *(_DWORD *)(v9 + 272) >= 2u)
    {
      v17 = v13;
      v16 = 1;
      while (1)
      {
        v18 = *(_DWORD *)(v7 + 4 * (v17 - 1));
        v19 = v16;
        if (v18 != *(_DWORD *)Array<unsigned int>::operator[]((int *)(v9 + 248), v16))
          break;
        *(_DWORD *)(v9 + 240) = v19;
        v16 = v19 + 1;
        LODWORD(v13) = v17 - 1;
        if (v17 >= 2)
        {
          --v17;
          if (v16 < *(unsigned int *)(v9 + 272))
            continue;
        }
        goto LABEL_103;
      }
      LODWORD(v13) = v17;
      LODWORD(v16) = v19;
    }
LABEL_103:
    *(_DWORD *)(v9 + 272) = v16;
    *(_DWORD *)(v9 + 220) = v16;
    v92 = v16;
    TrellisSlice<ClassNgramState>::init(*(_QWORD *)(v9 + 208) + 24 * v16);
    v23 = v92;
  }
  else
  {
    v20 = *(_QWORD *)(v9 + 208);
    *(_DWORD *)(v9 + 220) = 0;
    TrellisSlice<ClassNgramState>::init(v20);
    Trellis<ClassNgramState>::setProb(v9 + 208, (int **)v109, 0.0);
    v21 = *(_DWORD *)(v9 + 220) + 1;
    *(_DWORD *)(v9 + 220) = v21;
    TrellisSlice<ClassNgramState>::init(*(_QWORD *)(v9 + 208) + 24 * v21);
    v22 = v111[0];
    *(_DWORD *)Array<unsigned int>::operator[]((int *)(v9 + 248), 0) = v22;
    v23 = 1;
    *(_DWORD *)(v9 + 272) = 1;
  }
  v24 = -INFINITY;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_20;
LABEL_98:
  v89 = *(_DWORD *)(v9 + 240);
  if (v89)
    v90 = TrellisSlice<ClassNgramState>::sum((_DWORD **)(*(_QWORD *)(v9 + 208) + 24 * (v89 - 1)));
  else
    v90 = 0.0;
  *v93 = v90;
  return v24;
}

void sub_1AE066020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29)
{
  uint64_t v29;
  uint64_t v31;

  v31 = *(_QWORD *)(v29 - 168);
  if (v31)
    MEMORY[0x1AF44D160](v31, 0x50C80D3D5ADE1);
  _Unwind_Resume(exception_object);
}

uint64_t Trellis<ClassNgramState>::setProb(uint64_t a1, int **a2, float a3)
{
  unsigned int **v5;
  uint64_t result;
  uint64_t v7;
  float *v8;
  char v9;

  v5 = (unsigned int **)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  v9 = 0;
  result = LHash<ClassNgramState,TrellisNode<ClassNgramState>>::insert(v5, *a2, a2[1], &v9);
  v7 = result;
  *(float *)result = a3;
  if (!v9)
  {
    *(_DWORD *)(result + 4) = -8388608;
    *(_DWORD *)(result + 8) = -8388608;
    result = TrellisNBestList<ClassNgramState>::init(result + 16, *(_DWORD *)(a1 + 20));
    if (!*(_DWORD *)(v7 + 16))
      return result;
    v8 = *(float **)(v7 + 24);
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 16))
  {
    v8 = *(float **)(result + 24);
    if (*v8 < a3)
LABEL_7:
      *v8 = a3;
  }
  return result;
}

void Trellis<ClassNgramState>::update(uint64_t *a1, int **a2, int **a3, float a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  long double v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  __int128 v25;
  int v26;
  char v27;

  v8 = *a1;
  v9 = *((_DWORD *)a1 + 3);
  v10 = TrellisSlice<ClassNgramState>::find((unsigned int **)(*a1 + 24 * (v9 - 1)), a2);
  if (v10)
  {
    v11 = v10;
    v27 = 0;
    v12 = LHash<ClassNgramState,TrellisNode<ClassNgramState>>::insert((unsigned int **)(v8 + 24 * v9), *a3, a3[1], &v27);
    v13 = (float *)v12;
    v14 = *(float *)v11 + a4;
    if (v27)
    {
      v15 = v14;
      v16 = *(float *)v12 < v14;
      if (*(float *)v12 >= v14)
        v17 = v14;
      else
        v17 = *(float *)v12;
      if (v16)
        v18 = v15;
      else
        v18 = *(float *)v12;
      if (v17 != -INFINITY)
      {
        v19 = exp((v17 - v18) * 2.30258509);
        v18 = v18 + log10(v19 + 1.0);
      }
      v20 = v18;
      *v13 = v20;
    }
    else
    {
      *(float *)v12 = v14;
      *(_DWORD *)(v12 + 4) = -8388608;
      *(_DWORD *)(v12 + 8) = -8388608;
      TrellisNBestList<ClassNgramState>::init(v12 + 16, *((_DWORD *)a1 + 5));
    }
    if (*(_DWORD *)(v11 + 16))
    {
      v21 = 0;
      v22 = 0;
      v23 = (uint64_t)(v13 + 4);
      do
      {
        v24 = *(float *)(*(_QWORD *)(v11 + 24) + v21) + a4;
        v25 = *(_OWORD *)a2;
        v26 = v22;
        TrellisNBestList<ClassNgramState>::insert(v23, (uint64_t)&v24);
        ++v22;
        v21 += 32;
      }
      while (v22 < *(unsigned int *)(v11 + 16));
    }
  }
}

float ClassNgram::wordProb(LM *a1, uint64_t a2, const unsigned int *a3)
{
  float result;
  float v4;
  BOOL v5;

  if (*((_BYTE *)a1 + 288))
    return LM::wordProb(a1, a2, a3);
  v4 = ClassNgram::prefixProb((uint64_t)a1, a2);
  v5 = v4 == -INFINITY && -INFINITY == 0.0;
  result = v4 - 0.0;
  if (v5)
    return -INFINITY;
  return result;
}

float ClassNgram::wordProbRecompute(ClassNgram *this, uint64_t a2, const unsigned int *a3)
{
  float result;
  float v4;
  BOOL v5;

  if (*((_BYTE *)this + 288))
  {
    LM::wordProbRecompute(this, a2, a3);
  }
  else
  {
    v4 = ClassNgram::prefixProb((uint64_t)this, a2);
    v5 = v4 == -INFINITY && -INFINITY == 0.0;
    result = v4 - 0.0;
    if (v5)
      return -INFINITY;
  }
  return result;
}

float ClassNgram::sentenceProb(uint64_t a1, unsigned int *a2, double *a3)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  double v13;
  double v14;
  int v15;
  _BYTE v16[12];
  int v17;

  if (*(_BYTE *)(a1 + 288) || !*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    return LM::sentenceProb(a1, (uint64_t)a2, (uint64_t)a3);
  v7 = Vocab::length((uint64_t)a2, a2);
  v8 = v7;
  *(_DWORD *)&v16[8] = 0;
  v17 = 0;
  v15 = 0;
  *(_QWORD *)v16 = v7 + 3;
  if (v7 == -3)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v15, v7 + 2, 0);
    v9 = *(_QWORD *)&v16[4];
    v10 = v15;
  }
  v11 = LM::prepareSentence((LM *)a1, a2, (unsigned int *)(v9 - 4 * v10), v8);
  *(_DWORD *)(a1 + 272) = 0;
  v12 = ClassNgram::prefixProb(a1, *(unsigned int *)(*(_QWORD *)&v16[4] - 4 * v15));
  v13 = a3[3];
  v14 = a3[2] + 1.0;
  *a3 = *a3 + v12;
  a3[2] = v14;
  a3[3] = v13 + (double)v11;
  if (*(_QWORD *)&v16[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v16[4], 0x1000C8052888210);
  return v12;
}

void sub_1AE066518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t ClassNgram::read(ClassNgram *this, File *a2, unsigned int a3)
{
  uint64_t result;

  result = Ngram::read(this, a2, a3);
  if ((_DWORD)result)
    return (*(uint64_t (**)(ClassNgram *, File *))(*(_QWORD *)this + 520))(this, a2);
  return result;
}

uint64_t ClassNgram::write(ClassNgram *this, File *a2)
{
  uint64_t result;

  result = Ngram::write(this, a2);
  if ((_DWORD)result)
  {
    File::fprintf(a2, "\n");
    ClassNgram::writeClasses((Vocab **)this, a2);
    File::fprintf(a2, "\n");
    return 1;
  }
  return result;
}

uint64_t ClassNgram::writeClasses(Vocab **this, File *a2)
{
  _DWORD **v4;
  uint64_t (*v5)(Vocab *, uint64_t);
  unsigned int v6;
  uint64_t (*v7)(Vocab *, const unsigned int *, const unsigned int *);
  _DWORD **v8;
  double *v9;
  const char *v10;
  unsigned int v11;
  const char *v12;
  int v13;
  uint64_t result;
  _DWORD *v15;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  unsigned int v20;

  v20 = 0;
  v4 = (_DWORD **)(this + 24);
  v5 = Vocab::compareIndex(this[3]);
  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v18, v4, (uint64_t)v5);
  while (LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v18, &v20))
  {
    v6 = v20;
    v7 = Vocab::compareIndices(this[3]);
    LOBYTE(v15) = 0;
    v8 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert(v4, v6, &v15);
    LHashIter<unsigned int const*,double>::LHashIter((uint64_t)v16, v8, (uint64_t)v7);
    v15 = 0;
    while (1)
    {
      v9 = (double *)LHashIter<unsigned int const*,double>::next((uint64_t)v16, &v15);
      if (!v9)
        break;
      v10 = (const char *)(*(uint64_t (**)(Vocab *, _QWORD))(*(_QWORD *)this[3] + 32))(this[3], v20);
      File::fprintf(a2, "%s %lf", v10, *v9);
      if (*v15 != -1)
      {
        v11 = 1;
        do
        {
          v12 = (const char *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)this[3] + 32))(this[3]);
          File::fprintf(a2, " %s", v12);
          v13 = v15[v11++];
        }
        while (v13 != -1);
      }
      File::fprintf(a2, "\n");
    }
    if (v17)
      MEMORY[0x1AF44D160](v17, 0x50C80EE9192B6);
  }
  File::fprintf(a2, "\n");
  result = v19;
  if (v19)
    return MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
  return result;
}

void sub_1AE06678C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    MEMORY[0x1AF44D160](a19, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t ClassNgram::readClasses(ClassNgram *this, File *a2)
{
  uint64_t v2;
  File *v3;
  const char **v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char *v8;
  char i;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char *v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int **v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  int v24[8];
  __int128 v25;
  _BYTE v26[399992];
  uint64_t v27;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = (const char **)v3;
  v5 = v2;
  v27 = *MEMORY[0x1E0C80C00];
  v6 = File::getline(v3);
  if (!v6)
    return 1;
  v8 = v6;
  for (i = 1; ; i = 0)
  {
    v25 = 0u;
    memset(v26, 0, 496);
    if ((i & 1) != 0)
    {
      Map2<unsigned int,unsigned int const*,double>::clear((unsigned int **)(v5 + 192));
      Map2<unsigned int,unsigned int const*,double>::clear((unsigned int **)(v5 + 200));
    }
    v10 = Vocab::parseWords((Vocab *)v8, (char *)&v25, (const char **)0xC350, v7);
    if (v10 == 50000)
    {
      v19 = File::position(v4, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"class definition has too many fields\n", 37);
      return 0;
    }
    v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 280) + 16))(*(_QWORD *)(v5 + 280), v25);
    v21 = 1.0;
    if (v10 < 2 || (v12 = parseProb(*((const char **)&v25 + 1), &v21), v13 = v26, !v12))
      v13 = (char *)&v25 + 8;
    v23 = v11;
    if (!(*(unsigned int (**)(_QWORD, char *, int *, uint64_t))(**(_QWORD **)(v5 + 24) + 256))(*(_QWORD *)(v5 + 24), v13, v24, 50000))break;
    v14 = *(_QWORD *)&v21;
    v22 = 0;
    v15 = (unsigned int **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert((_QWORD *)(v5 + 192), v11, (_BYTE *)&v22 + 1);
    *(_QWORD *)LHash<unsigned int const*,double>::insert(v15, v24, &v22) = v14;
    v16 = *(_QWORD *)&v21;
    v22 = 0;
    v17 = (unsigned int **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert((_QWORD *)(v5 + 200), v24[0], (_BYTE *)&v22 + 1);
    *(_QWORD *)LHash<unsigned int const*,double>::insert(v17, (int *)&v23, &v22) = v16;
    v8 = File::getline((File *)v4);
    if (!v8)
      return 1;
  }
  v20 = File::position(v4, MEMORY[0x1E0DE4A50]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"class expansion contains no words\n", 34);
  return 0;
}

uint64_t Trellis<ClassNgramState>::Trellis(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  v5 = a2;
  v6 = (_QWORD *)operator new[]();
  *v6 = 24;
  v6[1] = v5;
  v7 = (uint64_t)(v6 + 2);
  if (a2)
  {
    v8 = v7;
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 8) = 0;
      v8 += 24;
    }
    while (v8 != v7 + 24 * v5);
  }
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 12) = 0;
  TrellisSlice<ClassNgramState>::init(v7);
  return a1;
}

_QWORD *LHash<ClassNgramState,TrellisNode<ClassNgramState>>::~LHash(_QWORD *a1)
{
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::clear(a1, 0);
  return a1;
}

_QWORD *LHash<ClassNgramState,TrellisNode<ClassNgramState>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(48 * (v4 - 1) + 56);
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  v6 = (_QWORD *)(*a1 + 32);
  do
  {
    *((_DWORD *)v6 - 2) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6 += 6;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t TrellisNBestList<ClassNgramState>::init(uint64_t result, unsigned int a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = (unsigned int *)result;
  if (a2)
  {
    if (*(_DWORD *)result < a2)
    {
      v4 = *(_QWORD *)(result + 8);
      if (v4)
        MEMORY[0x1AF44D160](v4, 0x1050C80095E78ADLL);
      result = operator new[]();
      v5 = result;
      do
      {
        *(_DWORD *)v5 = -8388608;
        *(_DWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v5 += 32;
      }
      while (v5 != result + 32 * a2);
      *((_QWORD *)v3 + 1) = result;
    }
    v6 = 0;
    v7 = 0;
    *v3 = a2;
    do
    {
      v8 = *((_QWORD *)v3 + 1) + v6;
      *(_DWORD *)v8 = -8388608;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      ++v7;
      v6 += 32;
    }
    while (v7 < *v3);
  }
  else
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = MEMORY[0x1AF44D160](result, 0x1050C80095E78ADLL);
    *((_QWORD *)v3 + 1) = 0;
    *v3 = 0;
  }
  return result;
}

void LHash<ClassNgramState,TrellisNode<ClassNgramState>>::clear(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a1)
  {
    v4 = 1 << (*(_DWORD *)*a1 & 0x1F);
    v5 = 40;
    v6 = v4;
    do
    {
      v7 = *(_QWORD *)(*a1 + v5);
      if (v7)
        MEMORY[0x1AF44D160](v7, 0x1000C8052888210);
      v5 += 48;
      --v6;
    }
    while (v6);
    BM_free((_QWORD *)*a1, 48 * (v4 - 1) + 56);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<ClassNgramState,TrellisNode<ClassNgramState>>::alloc(a1, a2);
  }
}

_QWORD *TrellisSlice<ClassNgramState>::~TrellisSlice(_QWORD *a1)
{
  uint64_t v2;

  TrellisSlice<ClassNgramState>::init((uint64_t)a1);
  v2 = a1[2];
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1050C80095E78ADLL);
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::clear(a1, 0);
  return a1;
}

uint64_t TrellisSlice<ClassNgramState>::init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  _BYTE v7[24];
  uint64_t v8;

  LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter((uint64_t)v7, (_DWORD **)a1, 0);
  while (1)
  {
    v2 = LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::next((uint64_t)v7, &v6);
    if (!v2)
      break;
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
      MEMORY[0x1AF44D160](v3, 0x1050C80095E78ADLL);
  }
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::clear((_QWORD *)a1, 0);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    MEMORY[0x1AF44D160](v4, 0x1050C80095E78ADLL);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = v8;
  if (v8)
    return MEMORY[0x1AF44D160](v8, 0x50C80D3D5ADE1);
  return result;
}

void sub_1AE066E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x50C80D3D5ADE1);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::next(uint64_t a1, _OWORD *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = *(unsigned int **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v11 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v10 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(&v10, *(int **)(v7 + 16 * v4), *(int **)(v7 + 16 * v4 + 8), &v11);
  v10 = 0;
  v8 = v11;
  *a2 = *(_OWORD *)(*(_QWORD *)a1 + 48 * v11 + 40);
  v9 = *(unsigned int **)a1;
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::clear(&v10, 0);
  return (uint64_t)&v9[12 * v8 + 2];
}

void sub_1AE066F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<ClassNgramState,TrellisNode<ClassNgramState>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

uint64_t LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v14[24];
  uint64_t v15;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)a1 + 40);
  do
  {
    if (*v7)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
    v7 += 6;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(unsigned int *)(a1 + 12);
    LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter((uint64_t)v14, a1);
    v9 = 126 - 2 * __clz(v8);
    if ((_DWORD)v8)
      v10 = v9;
    else
      v10 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v8), (uint64_t)v14, v10, 1);
    if (v15)
      MEMORY[0x1AF44D160](v15, 0x50C80D3D5ADE1);
    v15 = 0;
  }
  *(_QWORD *)(a1 + 24) = operator new[]();
  if (*(_DWORD *)(a1 + 12))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 24) + v11) = *(_OWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(v4 + 4 * v12++) + 40);
      v11 += 16;
    }
    while (v12 < *(unsigned int *)(a1 + 12));
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AE067110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x50C80D3D5ADE1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(_QWORD *)a3 + 8;
        v23 = v22 + 48 * *(a2 - 1);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v23 + 32), *(_QWORD *)(v23 + 40), *(_QWORD *)(v22 + 48 * *v9 + 32), *(_QWORD *)(v22 + 48 * *v9 + 40));
        if ((result & 0x80000000) != 0)
        {
          v24 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v24;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v17 = *(_QWORD *)a3 + 8;
          v18 = v17 + 48 * *(v9 - 1);
          if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40), *(_QWORD *)(v17 + 48 * *v9 + 32), *(_QWORD *)(v17 + 48 * *v9 + 40)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &>(v9, a2, a3);
          if ((v20 & 1) == 0)
            goto LABEL_15;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v9, v19, a3);
          v9 = v19 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(v19 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v9 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v9 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 40));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(unsigned int *)((char *)v4 + v12 + 4) = *(unsigned int *)((char *)v4 + v12);
            if (!v12)
              break;
            v13 = *(_QWORD *)a3 + 8;
            v14 = v13 + 48 * *(unsigned int *)((char *)v4 + v12 - 4);
            result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v13 + 48 * v11 + 32), *(_QWORD *)(v13 + 48 * v11 + 40), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v15 = (unsigned int *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v8 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v8 + 40));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          v13 = *(_QWORD *)a3 + 8;
          v14 = v13 + 48 * *(v11 - 2);
          result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v13 + 48 * v9 + 32), *(_QWORD *)(v13 + 48 * v9 + 40), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a2 + 32), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a2 + 40), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a1 + 32), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a1 + 40));
  v9 = *(_QWORD *)a4 + 8;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(v9 + 48 * *a3 + 32), *(_QWORD *)(v9 + 48 * *a3 + 40), *(_QWORD *)(v9 + 48 * *a2 + 32), *(_QWORD *)(v9 + 48 * *a2 + 40));
  if (v8 < 0)
  {
    v12 = *a1;
    if (v10 < 0)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a3 + 32), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * *a3 + 40), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * v12 + 32), *(_QWORD *)(*(_QWORD *)a4 + 8 + 48 * v12 + 40)) & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        return 2;
      }
    }
  }
  else
  {
    if ((v10 & 0x80000000) == 0)
      return 0;
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    v15 = *(_QWORD *)a4 + 8;
    if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(v15 + 48 * *a2 + 32), *(_QWORD *)(v15 + 48 * *a2 + 40), *(_QWORD *)(v15 + 48 * *a1 + 32), *(_QWORD *)(v15 + 48 * *a1 + 40)) & 0x80000000) != 0)
    {
      v16 = *a1;
      *a1 = *a2;
      *a2 = v16;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *a1 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *a1 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *(a2 - 1) + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *(a2 - 1) + 40)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v9 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v9 + 40)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 40)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 40)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v12 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v12 + 40)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v6 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v13 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v13 + 40)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  int *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v6 = 0;
  v7 = *a1;
  do
  {
    v8 = *(_QWORD *)a3 + 8;
    v9 = v8 + 48 * a1[++v6];
  }
  while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v8 + 48 * v7 + 32), *(_QWORD *)(v8 + 48 * v7 + 40)) & 0x80000000) != 0);
  v10 = &a1[v6];
  v11 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= a2)
        break;
      v13 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v13 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v13 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 40)) & 0x80000000) == 0);
  }
  else
  {
    do
      v12 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v12 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v12 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 40)) & 0x80000000) == 0);
  }
  if (v10 < a2)
  {
    v14 = (int *)&a1[v6];
    v15 = (int *)a2;
    do
    {
      v16 = *v14;
      *v14 = *v15;
      *v15 = v16;
      do
      {
        v17 = v14[1];
        ++v14;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v17 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v17 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 40)) & 0x80000000) != 0);
      do
        v18 = *--v15;
      while (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v18 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v18 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v7 + 40)) & 0x80000000) == 0);
    }
    while (v14 < v15);
    v11 = (unsigned int *)(v14 - 1);
  }
  if (v11 != a1)
    *a1 = *v11;
  *v11 = v7;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)a3 + 8;
      v9 = v8 + 48 * *(a2 - 1);
      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v8 + 48 * *a1 + 32), *(_QWORD *)(v8 + 48 * *a1 + 40)) & 0x80000000) != 0)
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_QWORD *)a3 + 8;
    if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v15 + 48 * *v12 + 32), *(_QWORD *)(v15 + 48 * *v12 + 40), *(_QWORD *)(v15 + 48 * *v11 + 32), *(_QWORD *)(v15 + 48 * *v11 + 40)) & 0x80000000) != 0)
    {
      v16 = *v12;
      v17 = v13;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v17 + 12) = *(unsigned int *)((char *)a1 + v17 + 8);
        if (v17 == -8)
          break;
        v18 = *(_QWORD *)a3 + 8;
        v19 = v18 + 48 * *(unsigned int *)((char *)a1 + v17 + 4);
        v17 -= 4;
        if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(v18 + 48 * v16 + 32), *(_QWORD *)(v18 + 48 * v16 + 40), *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40)) & 0x80000000) == 0)
        {
          v20 = (unsigned int *)((char *)a1 + v17 + 12);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v16;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 4;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a2, a3, a5);
  v10 = *(_QWORD *)a5 + 8;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(v10 + 48 * *a4 + 32), *(_QWORD *)(v10 + 48 * *a4 + 40), *(_QWORD *)(v10 + 48 * *a3 + 32), *(_QWORD *)(v10 + 48 * *a3 + 40));
  if ((result & 0x80000000) != 0)
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    v13 = *(_QWORD *)a5 + 8;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(v13 + 48 * *a3 + 32), *(_QWORD *)(v13 + 48 * *a3 + 40), *(_QWORD *)(v13 + 48 * *a2 + 32), *(_QWORD *)(v13 + 48 * *a2 + 40));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *(_QWORD *)a5 + 8;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(v15 + 48 * *a2 + 32), *(_QWORD *)(v15 + 48 * *a2 + 40), *(_QWORD *)(v15 + 48 * *a1 + 32), *(_QWORD *)(v15 + 48 * *a1 + 40));
      if ((result & 0x80000000) != 0)
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)a6 + 8;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(v12 + 48 * *a5 + 32), *(_QWORD *)(v12 + 48 * *a5 + 40), *(_QWORD *)(v12 + 48 * *a4 + 32), *(_QWORD *)(v12 + 48 * *a4 + 40));
  if ((result & 0x80000000) != 0)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    v15 = *(_QWORD *)a6 + 8;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(v15 + 48 * *a4 + 32), *(_QWORD *)(v15 + 48 * *a4 + 40), *(_QWORD *)(v15 + 48 * *a3 + 32), *(_QWORD *)(v15 + 48 * *a3 + 40));
    if ((result & 0x80000000) != 0)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = *(_QWORD *)a6 + 8;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(v17 + 48 * *a3 + 32), *(_QWORD *)(v17 + 48 * *a3 + 40), *(_QWORD *)(v17 + 48 * *a2 + 32), *(_QWORD *)(v17 + 48 * *a2 + 40));
      if ((result & 0x80000000) != 0)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        v19 = *(_QWORD *)a6 + 8;
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(v19 + 48 * *a2 + 32), *(_QWORD *)(v19 + 48 * *a2 + 40), *(_QWORD *)(v19 + 48 * *a1 + 32), *(_QWORD *)(v19 + 48 * *a1 + 40));
        if ((result & 0x80000000) != 0)
        {
          v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>((uint64_t)a1, (_QWORD *)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)a4 + 8;
        if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(v15 + 48 * *v14 + 32), *(_QWORD *)(v15 + 48 * *v14 + 40), *(_QWORD *)(v15 + 48 * *a1 + 32), *(_QWORD *)(v15 + 48 * *a1 + 40)) & 0x80000000) != 0)
        {
          v16 = *v14;
          *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>((uint64_t)a1, (_QWORD *)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(uint64_t result, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int (*v13)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v9 = ((uint64_t)a4 - result) >> 1;
      v10 = v9 + 1;
      v11 = (unsigned int *)(result + 4 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        v13 = (int (*)(uint64_t, uint64_t, _QWORD, _QWORD))a2[2];
        v14 = *a2 + 8;
        v15 = v14 + 48 * *v11;
        v16 = *(_QWORD *)(v15 + 32);
        v17 = *(_QWORD *)(v15 + 40);
        v18 = v14 + 48 * v11[1];
        if (v13(v16, v17, *(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40)) < 0)
        {
          ++v11;
          v10 = v12;
        }
      }
      v19 = *a2 + 8;
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2[2])(*(_QWORD *)(v19 + 48 * *v11 + 32), *(_QWORD *)(v19 + 48 * *v11 + 40), *(_QWORD *)(v19 + 48 * *v5 + 32), *(_QWORD *)(v19 + 48 * *v5 + 40));
      if ((result & 0x80000000) == 0)
      {
        v20 = *v5;
        do
        {
          v21 = v11;
          *v5 = *v11;
          if (v28 < v10)
            break;
          v22 = (2 * v10) | 1;
          v11 = (unsigned int *)(v6 + 4 * v22);
          if (2 * v10 + 2 < a3)
          {
            v23 = *a2 + 8;
            v24 = v23 + 48 * *v11;
            v25 = *(_QWORD *)(v24 + 32);
            v26 = *(_QWORD *)(v24 + 40);
            v27 = v23 + 48 * v11[1];
            if (((int (*)(uint64_t, uint64_t, _QWORD, _QWORD))a2[2])(v25, v26, *(_QWORD *)(v27 + 32), *(_QWORD *)(v27 + 40)) < 0)
            {
              ++v11;
              v22 = 2 * v10 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2[2])(*(_QWORD *)(*a2 + 8 + 48 * *v11 + 32), *(_QWORD *)(*a2 + 8 + 48 * *v11 + 40), *(_QWORD *)(*a2 + 8 + 48 * v20 + 32), *(_QWORD *)(*a2 + 8 + 48 * v20 + 40));
          v5 = v21;
          v10 = v22;
        }
        while ((result & 0x80000000) == 0);
        *v21 = v20;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *(_QWORD *)a2 + 8;
      v13 = v12 + 48 * *v9;
      v14 = *(_QWORD *)(v13 + 32);
      v15 = *(_QWORD *)(v13 + 40);
      v16 = v12 + 48 * v9[1];
      if ((*(int (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 16))(v14, v15, *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40)) < 0)
      {
        ++v9;
        v10 = v11;
      }
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<ClassNgramState,TrellisNode<ClassNgramState>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unsigned int *)(result + 4 * (v4 >> 1));
    v9 = (unsigned int *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *(unsigned int *)(a2 - 4) + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *(unsigned int *)(a2 - 4) + 40));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unsigned int *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * *v8 + 40), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8 + 48 * v10 + 40));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = operator new[]();
    if (*(_DWORD *)(a1 + 12))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a1 + 24) + v6) = *(_OWORD *)(*(_QWORD *)(a2 + 24) + v6);
        ++v7;
        v6 += 16;
      }
      while (v7 < *(unsigned int *)(a1 + 12));
    }
  }
  return a1;
}

uint64_t LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(unsigned int **a1, int *a2, int *a3, _DWORD *a4)
{
  unsigned int *v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  unsigned int v12;
  int *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;

  v4 = *a1;
  if (!*a1)
    return 0;
  v7 = *v4;
  v5 = v4 + 2;
  v6 = v7;
  v8 = v7 & 0x1F;
  if (v8 > 2)
  {
    if (a2)
    {
      v11 = *a2;
      if (*a2 == -1)
      {
        v15 = 12345;
      }
      else
      {
        v12 = 0;
        v13 = a2 + 1;
        do
        {
          v12 += v11 + (v12 << 12);
          v14 = *v13++;
          v11 = v14;
        }
        while (v14 != -1);
        v15 = 1103515245 * v12 + 12345;
      }
      v23 = (v15 >> (30 - v8)) & ~(-1 << v8);
      if (a3)
        goto LABEL_34;
    }
    else
    {
      LODWORD(v23) = 0;
      if (a3)
      {
LABEL_34:
        v26 = *a3;
        if (*a3 == -1)
        {
          v30 = 12345;
        }
        else
        {
          v27 = 0;
          v28 = a3 + 1;
          do
          {
            v27 += v26 + (v27 << 12);
            v29 = *v28++;
            v26 = v29;
          }
          while (v29 != -1);
          v30 = 1103515245 * v27 + 12345;
        }
        v31 = v30 >> (30 - v8);
        v25 = ~(-1 << v8);
        v24 = v31 & v25;
        goto LABEL_40;
      }
    }
    v24 = 0;
    v25 = ~(-1 << v8);
LABEL_40:
    v9 = (v24 + (_DWORD)v23) & v25;
    v32 = *(int **)&v5[12 * v9 + 8];
    if (!v32)
    {
LABEL_56:
      result = 0;
      goto LABEL_57;
    }
    v33 = ~(-1 << v8);
    while (1)
    {
      if (a2)
      {
        v34 = *v32;
        if (*v32 == -1)
        {
          v35 = 0;
LABEL_53:
          if (a2[v35] == -1 && *(int **)&v5[12 * v9 + 10] == a3)
          {
            result = 1;
            goto LABEL_57;
          }
        }
        else
        {
          v35 = 0;
          v36 = 1;
          while (1)
          {
            v37 = a2[v35];
            if (v37 == -1 || v34 != v37)
              break;
            v35 = v36;
            v34 = v32[v36++];
            if (v34 == -1)
              goto LABEL_53;
          }
        }
      }
      v9 = ((_DWORD)v9 + 1) & v33;
      v32 = *(int **)&v5[12 * v9 + 8];
      if (!v32)
        goto LABEL_56;
    }
  }
  if (v6 >= 0x20)
  {
    v16 = 0;
    v9 = v6 >> 5;
    while (1)
    {
      v17 = *(int **)&v5[12 * v16 + 8];
      if (v17)
      {
        if (!a2)
          goto LABEL_28;
        v18 = *v17;
        if (*v17 != -1)
        {
          v19 = 0;
          v20 = 1;
          while (1)
          {
            v21 = a2[v19];
            if (v21 == -1 || v18 != v21)
              goto LABEL_28;
            v19 = v20;
            v18 = v17[v20++];
            if (v18 == -1)
              goto LABEL_26;
          }
        }
        v19 = 0;
LABEL_26:
        if (a2[v19] != -1)
          goto LABEL_28;
      }
      else if (a2)
      {
        goto LABEL_28;
      }
      if (*(int **)&v5[12 * v16 + 10] == a3)
      {
        result = 1;
        LODWORD(v9) = v16;
        goto LABEL_57;
      }
LABEL_28:
      if (++v16 == v9)
        goto LABEL_29;
    }
  }
  LODWORD(v9) = 0;
LABEL_29:
  result = 0;
LABEL_57:
  *a4 = v9;
  return result;
}

uint64_t *Trellis<ClassNgramState>::~Trellis(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 24;
      v6 = 24 * v4;
      do
      {
        TrellisSlice<ClassNgramState>::~TrellisSlice((_QWORD *)(v5 + v6));
        v6 -= 24;
      }
      while (v6);
    }
    MEMORY[0x1AF44D160](v3, 0x10A0C806B6A53AFLL);
  }
  return a1;
}

uint64_t LHash<ClassNgramState,TrellisNode<ClassNgramState>>::insert(unsigned int **a1, int *a2, int *a3, _BYTE *a4)
{
  int v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int **v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v30;

  if (!*a1)
    LHash<ClassNgramState,TrellisNode<ClassNgramState>>::alloc(a1, 1u);
  v30 = 0;
  v8 = LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(a1, a2, a3, &v30);
  *a4 = v8;
  v9 = *a1;
  if (!v8)
  {
    v10 = *v9;
    v11 = 1 << (v10 & 0x1F);
    v12 = v10 >> 5;
    if (v10 >= 0xE0)
      v13 = (float)((float)(v12 + 2) / 0.8);
    else
      v13 = (v12 + 1);
    if (v13 > v11)
    {
      LHash<ClassNgramState,TrellisNode<ClassNgramState>>::alloc(a1, v13);
      **a1 = v10 & 0xFFFFFFE0 | **a1 & 0x1F;
      if ((**a1 & 0x1F) >= 3)
      {
        v14 = (int **)(v9 + 12);
        v15 = 1 << (v10 & 0x1F);
        do
        {
          v16 = *(v14 - 1);
          if (v16)
          {
            LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(a1, v16, *v14, &v30);
            v17 = (uint64_t)&(*a1)[12 * v30];
            v18 = *(_OWORD *)(v14 - 5);
            v19 = *(_OWORD *)(v14 - 3);
            *(_OWORD *)(v17 + 40) = *(_OWORD *)(v14 - 1);
            *(_OWORD *)(v17 + 24) = v19;
            *(_OWORD *)(v17 + 8) = v18;
          }
          v14 += 6;
          --v15;
        }
        while (v15);
      }
      else
      {
        memcpy(*a1 + 2, v9 + 2, 48 * v12);
      }
      BM_free(v9, 48 * (v11 - 1) + 56);
      LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(a1, a2, a3, &v30);
    }
    Vocab::length((uint64_t)a2, (const unsigned int *)v13);
    v20 = operator new[]();
    v21 = *a2;
    if (*a2 == -1)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
      do
      {
        *(_DWORD *)(v20 + 4 * v22) = v21;
        v22 = v23;
        v21 = a2[v23++];
      }
      while (v21 != -1);
    }
    *(_DWORD *)(v20 + 4 * v22) = -1;
    v24 = 3 * v30;
    v25 = (uint64_t)&(*a1)[12 * v30];
    *(_QWORD *)(v25 + 40) = v20;
    *(_QWORD *)(v25 + 48) = a3;
    v26 = (uint64_t)&(*a1)[4 * v24];
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    v27 = *a1;
    v28 = (uint64_t)&(*a1)[4 * v24];
    *(_QWORD *)(v28 + 32) = 0;
    *(_DWORD *)(v28 + 24) = 0;
    *v27 += 32;
    v9 = *a1;
  }
  return (uint64_t)&v9[12 * v30 + 2];
}

uint64_t TrellisSlice<ClassNgramState>::find(unsigned int **a1, int **a2)
{
  int *v3;
  int *v4;
  int v6;

  v4 = *a2;
  v3 = a2[1];
  v6 = 0;
  if (LHash<ClassNgramState,TrellisNode<ClassNgramState>>::locate(a1, v4, v3, &v6))
    return (uint64_t)&(*a1)[12 * v6 + 2];
  else
    return 0;
}

__n128 TrellisNBestList<ClassNgramState>::insert(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __n128 result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  int v11;
  __int128 v12;
  uint64_t v14;

  v4 = TrellisNBestList<ClassNgramState>::findrank((unsigned int *)a1, a2);
  v6 = *(_DWORD *)a1;
  if (v4 < *(_DWORD *)a1)
  {
    if (v6 + ~v4)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = v4 + 1;
      v9 = (__int128 *)(32 * v4 + 32 * (v6 + ~v4) + v7 - 32);
      v10 = (_OWORD *)(32 * (v6 + ~v4) + 32 * v8 + v7 - 32);
      v11 = v8 - v6;
      do
      {
        v12 = *v9;
        *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)v9 + 12);
        *v10 = v12;
        v10 -= 2;
        v9 -= 2;
      }
      while (!__CFADD__(v11++, 1));
    }
    v14 = *(_QWORD *)(a1 + 8) + 32 * v4;
    result = *(__n128 *)a2;
    *(_OWORD *)(v14 + 12) = *(_OWORD *)(a2 + 12);
    *(__n128 *)v14 = result;
  }
  return result;
}

uint64_t TrellisNBestList<ClassNgramState>::findrank(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;

  v3 = *a1;
  v4 = (v3 - 1);
  if (v4 >= 2)
  {
    result = 0;
    v6 = *((_QWORD *)a1 + 1);
    v7 = *(float *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v10 = (v4 + result) >> 1;
      v11 = *(float *)(v6 + 32 * v10);
      if (v11 <= v7)
      {
        if (v11 != v7)
          goto LABEL_27;
        v12 = *(int **)(v6 + 32 * v10 + 8);
        if (!v12)
        {
          if (v8)
            goto LABEL_27;
          goto LABEL_18;
        }
        if (v8)
        {
          v13 = *v12;
          if (*v12 == -1)
          {
            v14 = 0;
LABEL_17:
            if (*(_DWORD *)(v8 + 4 * v14) != -1)
              goto LABEL_27;
LABEL_18:
            v18 = *(int **)(v6 + 32 * v10 + 16);
            if (!v18)
              goto LABEL_27;
            if (v9)
            {
              v19 = *v18;
              if (*v18 == -1)
                goto LABEL_27;
              v20 = 0;
              v21 = 1;
              while (1)
              {
                v22 = *(_DWORD *)(v9 + 4 * v20);
                if (v22 == -1)
                  break;
                v17 = v19 - v22;
                if (v17)
                  goto LABEL_26;
                v20 = v21;
                v19 = v18[v21++];
                if (v19 == -1)
                  goto LABEL_27;
              }
            }
            goto LABEL_4;
          }
          v14 = 0;
          v15 = 1;
          while (1)
          {
            v16 = *(_DWORD *)(v8 + 4 * v14);
            if (v16 == -1)
              break;
            v17 = v13 - v16;
            if (v17)
            {
LABEL_26:
              if (v17 > 0)
                break;
              goto LABEL_27;
            }
            v14 = v15;
            v13 = v12[v15++];
            if (v13 == -1)
              goto LABEL_17;
          }
        }
      }
LABEL_4:
      result = (v4 + result) >> 1;
      v10 = v4;
LABEL_27:
      v4 = v10;
      if ((int)result + 1 >= v10)
        goto LABEL_30;
    }
  }
  result = 0;
LABEL_30:
  if (result >= v3)
    return result;
  v23 = *((_QWORD *)a1 + 1);
  v24 = *(float *)a2;
  result = result;
  v25 = *(_QWORD *)(a2 + 8);
  v26 = *(_QWORD *)(a2 + 16);
  do
  {
    v27 = *(float *)(v23 + 32 * result);
    if (v27 > v24)
      goto LABEL_33;
    if (v27 != v24)
      return result;
    v28 = *(int **)(v23 + 32 * result + 8);
    if (v28)
    {
      if (!v25)
        goto LABEL_33;
      v29 = *v28;
      if (*v28 != -1)
      {
        v30 = 0;
        v31 = 1;
        while (1)
        {
          v32 = *(_DWORD *)(v25 + 4 * v30);
          if (v32 == -1)
            goto LABEL_33;
          v33 = v29 - v32;
          if (v33)
          {
LABEL_56:
            if (v33 >= 1)
              goto LABEL_33;
            return result;
          }
          v30 = v31;
          v29 = v28[v31++];
          if (v29 == -1)
            goto LABEL_47;
        }
      }
      v30 = 0;
LABEL_47:
      if (*(_DWORD *)(v25 + 4 * v30) != -1)
        return result;
    }
    else if (v25)
    {
      return result;
    }
    v34 = *(int **)(v23 + 32 * result + 16);
    if (!v34)
      return result;
    if (v26)
    {
      v35 = *v34;
      if (*v34 == -1)
        return result;
      v36 = 0;
      v37 = 1;
      while (1)
      {
        v38 = *(_DWORD *)(v26 + 4 * v36);
        if (v38 == -1)
          break;
        v33 = v35 - v38;
        if (v33)
          goto LABEL_56;
        v36 = v37;
        v35 = v34[v37++];
        if (v35 == -1)
          return result;
      }
    }
LABEL_33:
    ++result;
  }
  while (result != v3);
  return v3;
}

float TrellisSlice<ClassNgramState>::sum(_DWORD **a1)
{
  double v1;
  float *v2;
  double v3;
  double v4;
  long double v5;
  __int128 v7;
  _BYTE v8[24];
  uint64_t v9;

  LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::LHashIter((uint64_t)v8, a1, 0);
  v1 = -INFINITY;
  while (1)
  {
    v2 = (float *)LHashIter<ClassNgramState,TrellisNode<ClassNgramState>>::next((uint64_t)v8, &v7);
    if (!v2)
      break;
    v3 = *v2;
    if (v1 >= v3)
      v4 = *v2;
    else
      v4 = v1;
    if (v1 < v3)
      v1 = *v2;
    if (v4 != -INFINITY)
    {
      v5 = exp((v4 - v1) * 2.30258509);
      v1 = v1 + log10(v5 + 1.0);
    }
  }
  if (v9)
    MEMORY[0x1AF44D160](v9, 0x50C80D3D5ADE1);
  return v1;
}

void sub_1AE068D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x50C80D3D5ADE1);
  _Unwind_Resume(exception_object);
}

uint64_t srilm::ngram_count(srilm *this, uint64_t a2, char **a3, srilm::NgramCountContext *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  Vocab *v42;
  Vocab **v43;
  TaggedVocab *v44;
  std::locale::__imp *locale;
  int v46;
  int v47;
  Vocab *v48;
  unsigned int *v49;
  uint64_t v50;
  char *v51;
  Vocab *v52;
  SubVocab *v53;
  Vocab *v54;
  StopNgramStats *v55;
  Vocab *v56;
  Vocab *v57;
  LMStats *v58;
  NgramStats *v59;
  NgramStats *v60;
  uint64_t v61;
  void *v62;
  NgramStats *v63;
  NgramStats *v64;
  NgramStats *v65;
  NgramStats *v66;
  NgramStats *v67;
  NgramStats *v68;
  NgramStats *v69;
  NgramStats *v70;
  NgramStats *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  double *v75;
  uint64_t v76;
  double v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  Vocab *v84;
  unsigned int v85;
  NgramStats *v87;
  uint64_t v88;
  std::locale::__imp *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  NgramStats *v93;
  _QWORD *v94;
  size_t v95;
  _QWORD *v96;
  unsigned int v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  int v103;
  double v104;
  int v105;
  double v106;
  uint64_t v107;
  _BOOL4 v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  NgramStats *v125;
  const char *v126;
  _QWORD *v127;
  double v128;
  uint64_t v129;
  double v130;
  double v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  double v135;
  char v136;
  char v137;
  _QWORD *v138;
  double v139;
  char v140;
  char v141;
  int v142;
  __int128 *v143;
  _QWORD *v144;
  _QWORD *v145;
  int v146;
  const char *v147;
  uint64_t v148;
  _QWORD *v149;
  std::locale::__imp *v150;
  uint64_t v151;
  std::locale::__imp *v152;
  const char *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  const char *v157;
  size_t v158;
  _QWORD *v159;
  const std::locale::facet *v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  uint64_t v165;
  std::locale::__imp *v166;
  uint64_t v167;
  std::locale::__imp *v168;
  uint64_t *v169;
  uint64_t *v170;
  std::locale::__imp *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  std::locale::__imp *v177;
  std::locale::__imp *v178;
  std::locale::__imp *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  _QWORD *v183;
  const std::locale::facet *v184;
  _QWORD *v185;
  const char *v186;
  size_t v187;
  _QWORD *v188;
  const std::locale::facet *v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  std::locale::__imp *v193;
  StopNgram *v194;
  uint64_t v195;
  std::locale::__imp *v196;
  char v197;
  std::locale::__imp *v198;
  uint64_t v199;
  std::locale::__imp *v200;
  std::locale::__imp *v201;
  uint64_t j;
  const char *v203;
  int v204;
  const char *v205;
  _QWORD *v206;
  size_t v207;
  _QWORD *v208;
  NgramStats *v209;
  const char *v210;
  char *v211;
  void **v212;
  const char *v213;
  std::locale::__imp *v214;
  char *v215;
  Vocab **v216;
  int v217;
  std::locale v218[2];
  std::locale::__imp *v219;
  StopNgram *v220;
  std::locale v221;
  char v222;
  uint64_t *v223;
  uint64_t *v224;
  int v225;
  NgramStats *v226;
  int v227;
  double v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  int v238;
  int v239;
  unsigned int v240;
  double v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  int v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  int v254;
  char *v255;
  uint64_t v256;
  char *v257;
  unsigned int v258;
  char *__s;
  int v260;
  char *v261;
  char *v262;
  int v263;
  uint64_t v264;
  char *v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  int v269;
  void *v270;
  void *__p;
  _QWORD v272[2];
  int v273;
  const char *v274;
  int *v275;
  const char *v276;
  int v277;
  const char *v278;
  unsigned int *v279;
  const char *v280;
  int v281;
  const char *v282;
  double *v283;
  const char *v284;
  int v285;
  const char *v286;
  unsigned int *v287;
  const char *v288;
  int v289;
  const char *v290;
  uint64_t *v291;
  const char *v292;
  int v293;
  const char *v294;
  char *v295;
  const char *v296;
  int v297;
  const char *v298;
  unsigned int *v299;
  const char *v300;
  int v301;
  const char *v302;
  uint64_t *v303;
  const char *v304;
  int v305;
  const char *v306;
  char **v307;
  const char *v308;
  int v309;
  const char *v310;
  char *v311;
  const char *v312;
  int v313;
  const char *v314;
  uint64_t *v315;
  const char *v316;
  int v317;
  const char *v318;
  int *v319;
  const char *v320;
  int v321;
  const char *v322;
  char **v323;
  const char *v324;
  int v325;
  const char *v326;
  char **v327;
  const char *v328;
  int v329;
  const char *v330;
  int *v331;
  const char *v332;
  int v333;
  const char *v334;
  char **p_s;
  const char *v336;
  int v337;
  const char *v338;
  __int128 *v339;
  const char *v340;
  int v341;
  const char *v342;
  char *v343;
  const char *v344;
  int v345;
  const char *v346;
  __int128 *v347;
  const char *v348;
  int v349;
  const char *v350;
  char *v351;
  const char *v352;
  int v353;
  const char *v354;
  __int128 *v355;
  const char *v356;
  int v357;
  const char *v358;
  char *v359;
  const char *v360;
  int v361;
  const char *v362;
  __int128 *v363;
  const char *v364;
  int v365;
  const char *v366;
  char *v367;
  const char *v368;
  int v369;
  const char *v370;
  __int128 *v371;
  const char *v372;
  int v373;
  const char *v374;
  char *v375;
  const char *v376;
  int v377;
  const char *v378;
  char **v379;
  const char *v380;
  int v381;
  const char *v382;
  __int128 *v383;
  const char *v384;
  int v385;
  const char *v386;
  __int128 *v387;
  const char *v388;
  int v389;
  const char *v390;
  char *v391;
  const char *v392;
  int v393;
  const char *v394;
  char *v395;
  const char *v396;
  int v397;
  const char *v398;
  __int128 *v399;
  const char *v400;
  int v401;
  const char *v402;
  char *v403;
  const char *v404;
  int v405;
  const char *v406;
  char *v407;
  const char *v408;
  int v409;
  const char *v410;
  unint64_t v411;
  const char *v412;
  int v413;
  const char *v414;
  __int128 *v415;
  const char *v416;
  int v417;
  const char *v418;
  __int128 *v419;
  const char *v420;
  int v421;
  const char *v422;
  char *v423;
  const char *v424;
  int v425;
  const char *v426;
  char *v427;
  const char *v428;
  int v429;
  const char *v430;
  __int128 *v431;
  const char *v432;
  int v433;
  const char *v434;
  char *v435;
  const char *v436;
  int v437;
  const char *v438;
  char *v439;
  const char *v440;
  int v441;
  const char *v442;
  char *v443;
  const char *v444;
  int v445;
  const char *v446;
  __int128 *v447;
  const char *v448;
  int v449;
  const char *v450;
  _QWORD *v451;
  const char *v452;
  int v453;
  const char *v454;
  char *v455;
  const char *v456;
  int v457;
  const char *v458;
  char *v459;
  const char *v460;
  int v461;
  const char *v462;
  __int128 *v463;
  const char *v464;
  int v465;
  const char *v466;
  char *v467;
  const char *v468;
  int v469;
  const char *v470;
  __int128 *v471;
  const char *v472;
  int v473;
  const char *v474;
  char *v475;
  const char *v476;
  int v477;
  const char *v478;
  __int128 *v479;
  const char *v480;
  int v481;
  const char *v482;
  char *v483;
  const char *v484;
  int v485;
  const char *v486;
  __int128 *v487;
  const char *v488;
  int v489;
  const char *v490;
  char *v491;
  const char *v492;
  int v493;
  const char *v494;
  __int128 *v495;
  const char *v496;
  int v497;
  const char *v498;
  char *v499;
  const char *v500;
  int v501;
  const char *v502;
  __int128 *v503;
  const char *v504;
  int v505;
  const char *v506;
  char *v507;
  const char *v508;
  int v509;
  const char *v510;
  __int128 *v511;
  const char *v512;
  int v513;
  const char *v514;
  char *v515;
  const char *v516;
  int v517;
  const char *v518;
  __int128 *v519;
  const char *v520;
  int v521;
  const char *v522;
  char *v523;
  const char *v524;
  int v525;
  const char *v526;
  __int128 *v527;
  const char *v528;
  int v529;
  const char *v530;
  char *v531;
  const char *v532;
  int v533;
  const char *v534;
  __int128 *v535;
  const char *v536;
  int v537;
  const char *v538;
  char *v539;
  const char *v540;
  int v541;
  const char *v542;
  __int128 *v543;
  const char *v544;
  int v545;
  const char *v546;
  char *v547;
  const char *v548;
  int v549;
  const char *v550;
  char *v551;
  const char *v552;
  int v553;
  const char *v554;
  unint64_t v555;
  const char *v556;
  int v557;
  const char *v558;
  __int128 *v559;
  const char *v560;
  int v561;
  const char *v562;
  char *v563;
  const char *v564;
  int v565;
  const char *v566;
  char *v567;
  const char *v568;
  int v569;
  const char *v570;
  char *v571;
  const char *v572;
  int v573;
  const char *v574;
  _QWORD *v575;
  const char *v576;
  int v577;
  const char *v578;
  char *v579;
  const char *v580;
  int v581;
  const char *v582;
  __int128 *v583;
  const char *v584;
  int v585;
  const char *v586;
  char *v587;
  const char *v588;
  int v589;
  const char *v590;
  __int128 *v591;
  const char *v592;
  int v593;
  const char *v594;
  char *v595;
  const char *v596;
  int v597;
  const char *v598;
  __int128 *v599;
  const char *v600;
  int v601;
  const char *v602;
  char *v603;
  const char *v604;
  int v605;
  const char *v606;
  __int128 *v607;
  const char *v608;
  int v609;
  const char *v610;
  char *v611;
  const char *v612;
  int v613;
  const char *v614;
  __int128 *v615;
  const char *v616;
  int v617;
  const char *v618;
  char *v619;
  const char *v620;
  int v621;
  const char *v622;
  __int128 *v623;
  const char *v624;
  int v625;
  const char *v626;
  char *v627;
  const char *v628;
  int v629;
  const char *v630;
  char *v631;
  const char *v632;
  int v633;
  const char *v634;
  unint64_t v635;
  const char *v636;
  int v637;
  const char *v638;
  __int128 *v639;
  const char *v640;
  int v641;
  const char *v642;
  char *v643;
  const char *v644;
  int v645;
  const char *v646;
  char *v647;
  const char *v648;
  int v649;
  const char *v650;
  char *v651;
  const char *v652;
  int v653;
  const char *v654;
  _QWORD *v655;
  const char *v656;
  int v657;
  const char *v658;
  char *v659;
  const char *v660;
  int v661;
  const char *v662;
  __int128 *v663;
  const char *v664;
  int v665;
  const char *v666;
  char *v667;
  const char *v668;
  int v669;
  const char *v670;
  char *v671;
  const char *v672;
  int v673;
  const char *v674;
  unint64_t v675;
  const char *v676;
  int v677;
  const char *v678;
  __int128 *v679;
  const char *v680;
  int v681;
  const char *v682;
  char *v683;
  const char *v684;
  int v685;
  const char *v686;
  char *v687;
  const char *v688;
  int v689;
  const char *v690;
  char *v691;
  const char *v692;
  int v693;
  const char *v694;
  _QWORD *v695;
  const char *v696;
  int v697;
  const char *v698;
  char *v699;
  const char *v700;
  int v701;
  const char *v702;
  __int128 *v703;
  const char *v704;
  int v705;
  const char *v706;
  char *v707;
  const char *v708;
  int v709;
  const char *v710;
  char *v711;
  const char *v712;
  int v713;
  const char *v714;
  unint64_t v715;
  const char *v716;
  int v717;
  const char *v718;
  __int128 *v719;
  const char *v720;
  int v721;
  const char *v722;
  char *v723;
  const char *v724;
  int v725;
  const char *v726;
  char *v727;
  const char *v728;
  int v729;
  const char *v730;
  char *v731;
  const char *v732;
  int v733;
  const char *v734;
  _QWORD *v735;
  const char *v736;
  int v737;
  const char *v738;
  char *v739;
  const char *v740;
  int v741;
  const char *v742;
  __int128 *v743;
  const char *v744;
  int v745;
  const char *v746;
  char *v747;
  const char *v748;
  int v749;
  const char *v750;
  __int128 *v751;
  const char *v752;
  int v753;
  const char *v754;
  char *v755;
  const char *v756;
  int v757;
  const char *v758;
  __int128 *v759;
  const char *v760;
  int v761;
  const char *v762;
  char *v763;
  const char *v764;
  int v765;
  const char *v766;
  __int128 *v767;
  const char *v768;
  int v769;
  const char *v770;
  char *v771;
  const char *v772;
  int v773;
  const char *v774;
  __int128 *v775;
  const char *v776;
  int v777;
  const char *v778;
  char *v779;
  const char *v780;
  int v781;
  const char *v782;
  char *v783;
  const char *v784;
  int v785;
  const char *v786;
  uint64_t *v787;
  const char *v788;
  int v789;
  const char *v790;
  __int128 *v791;
  const char *v792;
  int v793;
  const char *v794;
  char *v795;
  const char *v796;
  int v797;
  const char *v798;
  char *v799;
  const char *v800;
  int v801;
  const char *v802;
  unint64_t v803;
  const char *v804;
  int v805;
  const char *v806;
  __int128 *v807;
  const char *v808;
  int v809;
  const char *v810;
  char *v811;
  const char *v812;
  int v813;
  const char *v814;
  char *v815;
  const char *v816;
  int v817;
  const char *v818;
  char *v819;
  const char *v820;
  int v821;
  const char *v822;
  _QWORD *v823;
  const char *v824;
  int v825;
  const char *v826;
  char *v827;
  const char *v828;
  int v829;
  const char *v830;
  char **v831;
  const char *v832;
  int v833;
  const char *v834;
  int *v835;
  const char *v836;
  int v837;
  const char *v838;
  char **v839;
  const char *v840;
  int v841;
  const char *v842;
  uint64_t *v843;
  const char *v844;
  int v845;
  const char *v846;
  uint64_t *v847;
  const char *v848;
  int v849;
  const char *v850;
  uint64_t *v851;
  const char *v852;
  int v853;
  const char *v854;
  int *v855;
  const char *v856;
  int v857;
  const char *v858;
  int *v859;
  const char *v860;
  int v861;
  const char *v862;
  char *v863;
  const char *v864;
  int v865;
  const char *v866;
  char *v867;
  const char *v868;
  int v869;
  const char *v870;
  uint64_t *v871;
  const char *v872;
  int v873;
  const char *v874;
  uint64_t *v875;
  const char *v876;
  int v877;
  const char *v878;
  int *v879;
  const char *v880;
  int v881;
  const char *v882;
  uint64_t *v883;
  const char *v884;
  int v885;
  const char *v886;
  char **v887;
  const char *v888;
  int v889;
  const char *v890;
  int *v891;
  const char *v892;
  int v893;
  const char *v894;
  uint64_t *v895;
  const char *v896;
  int v897;
  const char *v898;
  double *v899;
  const char *v900;
  int v901;
  const char *v902;
  int *v903;
  const char *v904;
  int v905;
  const char *v906;
  uint64_t *v907;
  const char *v908;
  int v909;
  const char *v910;
  int *v911;
  const char *v912;
  int v913;
  const char *v914;
  double *v915;
  const char *v916;
  int v917;
  const char *v918;
  unsigned int *v919;
  const char *v920;
  int v921;
  const char *v922;
  char **v923;
  const char *v924;
  int v925;
  const char *v926;
  char **v927;
  const char *v928;
  int v929;
  const char *v930;
  char **v931;
  const char *v932;
  int v933;
  const char *v934;
  int *v935;
  const char *v936;
  int v937;
  const char *v938;
  char **v939;
  const char *v940;
  int v941;
  const char *v942;
  char **v943;
  const char *v944;
  int v945;
  const char *v946;
  char *v947;
  const char *v948;
  int v949;
  __int128 v950;
  const char *v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  _QWORD v964[2];
  __int128 v965;
  __int128 v966;
  _QWORD v967[2];
  __int128 v968;
  __int128 v969;
  _QWORD v970[2];
  __int128 v971;
  __int128 v972;
  _QWORD v973[2];
  __int128 v974;
  __int128 v975;
  _QWORD v976[2];
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  _QWORD v989[2];
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  char v1000[16];
  uint64_t v1001;

  v4 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v1001 = *MEMORY[0x1E0C80C00];
  strcpy(v1000, "ngram-count");
  v10 = (char *)operator new(8uLL);
  v270 = v10;
  *(_QWORD *)v10 = v1000;
  v11 = v10 + 8;
  v272[0] = v10 + 8;
  __p = v10 + 8;
  if (v9 < 1)
  {
    v21 = v10 + 8;
  }
  else
  {
    for (i = 0; i != v9; ++i)
    {
      if ((unint64_t)v11 >= v272[0])
      {
        v13 = (v11 - (_BYTE *)v270) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = (uint64_t)(v272[0] - (_QWORD)v270) >> 2;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if (v272[0] - (_QWORD)v270 >= 0x7FFFFFFFFFFFFFF8uLL)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v272, v15);
        else
          v16 = 0;
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = *(_QWORD *)(v8 + 8 * i);
        v11 = v17 + 8;
        v18 = (char *)__p;
        v19 = (char *)v270;
        if (__p != v270)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v17 - 1) = v20;
            v17 -= 8;
          }
          while (v18 != v19);
          v18 = (char *)v270;
        }
        v270 = v17;
        __p = v11;
        v272[0] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v11 = *(_QWORD *)(v8 + 8 * i);
        v11 += 8;
      }
      __p = v11;
    }
    v21 = (char *)v272[0];
    if ((unint64_t)v11 < v272[0])
    {
      *(_QWORD *)v11 = 0;
      v22 = v11 + 8;
      goto LABEL_37;
    }
  }
  v23 = (v11 - (_BYTE *)v270) >> 3;
  if ((unint64_t)(v23 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v24 = v21 - (_BYTE *)v270;
  v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1))
    v25 = v23 + 1;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v272, v26);
  else
    v27 = 0;
  v28 = &v27[8 * v23];
  v29 = &v27[8 * v26];
  *(_QWORD *)v28 = 0;
  v22 = v28 + 8;
  v30 = (char *)__p;
  v31 = (char *)v270;
  if (__p != v270)
  {
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v28 - 1) = v32;
      v28 -= 8;
    }
    while (v30 != v31);
    v30 = (char *)v270;
  }
  v270 = v28;
  __p = v22;
  v272[0] = v29;
  if (v30)
    operator delete(v30);
LABEL_37:
  v267 = 3;
  v989[0] = 0x700000007;
  v240 = 2;
  v235 = 0x3FE0000000000000;
  v234 = 100;
  v233 = 0x3F50624DD2F1A9FCLL;
  v229 = 0x3FE0000000000000;
  v274 = "version";
  v275 = &v269;
  v276 = "print version information";
  v278 = "order";
  v279 = &v267;
  v280 = "max ngram order";
  v282 = "varprune";
  v283 = &v237;
  v284 = "pruning threshold for variable order ngrams";
  v286 = "debug";
  v287 = &v266;
  v288 = "debugging level for LM";
  v290 = "recompute";
  v291 = &v246;
  v292 = "recompute lower-order counts by summation";
  v294 = "sort";
  v295 = (char *)&v245 + 4;
  v296 = "sort ngrams output";
  v298 = "write-order";
  v299 = &v258;
  v300 = "output ngram counts order";
  v302 = "tag";
  v303 = &v268;
  v304 = "file tag to use in messages";
  v306 = "text";
  v307 = &v265;
  v308 = "text file to read";
  v310 = "text-has-weights";
  v311 = (char *)&v264 + 4;
  v312 = "text file contains count weights";
  v314 = "no-sos";
  v315 = &v264;
  v316 = "don't insert start-of-sentence tokens";
  v318 = "no-eos";
  v319 = &v263;
  v320 = "don't insert end-of-sentence tokens";
  v322 = "read";
  v323 = &v262;
  v324 = "counts file to read";
  v326 = "intersect";
  v327 = &v261;
  v328 = "intersect counts with this file";
  v330 = "read-with-mincounts";
  v331 = &v260;
  v332 = "apply minimum counts when reading counts file";
  v334 = "read-google";
  p_s = &__s;
  v336 = "Google counts directory to read";
  v338 = "write";
  v340 = "counts file to write";
  v342 = "write1";
  v343 = (char *)&v995 + 8;
  v344 = "1gram counts file to write";
  v346 = "write2";
  v347 = &v996;
  v348 = "2gram counts file to write";
  v350 = "write3";
  v351 = (char *)&v996 + 8;
  v352 = "3gram counts file to write";
  v354 = "write4";
  v355 = &v997;
  v356 = "4gram counts file to write";
  v358 = "write5";
  v359 = (char *)&v997 + 8;
  v360 = "5gram counts file to write";
  v362 = "write6";
  v363 = &v998;
  v364 = "6gram counts file to write";
  v366 = "write7";
  v367 = (char *)&v998 + 8;
  v368 = "7gram counts file to write";
  v370 = "write8";
  v339 = &v995;
  v371 = &v999;
  v372 = "8gram counts file to write";
  v374 = "write9";
  v375 = (char *)&v999 + 8;
  v376 = "9gram counts file to write";
  v378 = "write-binary";
  v379 = &v257;
  v380 = "binary counts file to write";
  v382 = "gtmin";
  v384 = "lower GT discounting cutoff";
  v386 = "gtmax";
  v388 = "upper GT discounting cutoff";
  v390 = "gt1min";
  v391 = (char *)&v990 + 8;
  v392 = "lower 1gram discounting cutoff";
  v394 = "gt1max";
  v395 = (char *)&v987 + 4;
  v396 = "upper 1gram discounting cutoff";
  v398 = "gt2min";
  v399 = &v991;
  v400 = "lower 2gram discounting cutoff";
  v402 = "gt2max";
  v403 = (char *)&v987 + 8;
  v404 = "upper 2gram discounting cutoff";
  v406 = "gt3min";
  v407 = (char *)&v991 + 8;
  v408 = "lower 3gram discounting cutoff";
  v410 = "gt3max";
  v411 = (unint64_t)&v987 | 0xC;
  v412 = "upper 3gram discounting cutoff";
  v414 = "gt4min";
  v415 = &v992;
  v416 = "lower 4gram discounting cutoff";
  v418 = "gt4max";
  v419 = &v988;
  v420 = "upper 4gram discounting cutoff";
  v422 = "gt5min";
  v423 = (char *)&v992 + 8;
  v424 = "lower 5gram discounting cutoff";
  v426 = "gt5max";
  v427 = (char *)&v988 + 4;
  v428 = "upper 5gram discounting cutoff";
  v430 = "gt6min";
  v431 = &v993;
  v432 = "lower 6gram discounting cutoff";
  v434 = "gt6max";
  v435 = (char *)&v988 + 8;
  v436 = "upper 6gram discounting cutoff";
  v438 = "gt7min";
  v439 = (char *)&v993 + 8;
  v440 = "lower 7gram discounting cutoff";
  v442 = "gt7max";
  v443 = (char *)&v988 + 12;
  v444 = "upper 7gram discounting cutoff";
  v446 = "gt8min";
  v447 = &v994;
  v448 = "lower 8gram discounting cutoff";
  v450 = "gt8max";
  v451 = v989;
  v452 = "upper 8gram discounting cutoff";
  v454 = "gt9min";
  v383 = &v990;
  v455 = (char *)&v994 + 8;
  v456 = "lower 9gram discounting cutoff";
  v458 = "gt9max";
  v387 = &v987;
  v459 = (char *)v989 + 4;
  v460 = "upper 9gram discounting cutoff";
  v462 = "gt";
  v464 = "Good-Turing discount parameter file";
  v466 = "gt1";
  v467 = (char *)&v957 + 8;
  v468 = "Good-Turing 1gram discounts";
  v470 = "gt2";
  v471 = &v958;
  v472 = "Good-Turing 2gram discounts";
  v474 = "gt3";
  v475 = (char *)&v958 + 8;
  v476 = "Good-Turing 3gram discounts";
  v478 = "gt4";
  v479 = &v959;
  v480 = "Good-Turing 4gram discounts";
  v482 = "gt5";
  v483 = (char *)&v959 + 8;
  v484 = "Good-Turing 5gram discounts";
  v486 = "gt6";
  v487 = &v960;
  v488 = "Good-Turing 6gram discounts";
  v490 = "gt7";
  v491 = (char *)&v960 + 8;
  v492 = "Good-Turing 7gram discounts";
  v494 = "gt8";
  v463 = &v957;
  v495 = &v961;
  v496 = "Good-Turing 8gram discounts";
  v498 = "gt9";
  v499 = (char *)&v961 + 8;
  v500 = "Good-Turing 9gram discounts";
  v502 = "cdiscount";
  v504 = "discounting constant";
  v506 = "cdiscount1";
  v507 = (char *)&v982 + 8;
  v508 = "1gram discounting constant";
  v510 = "cdiscount2";
  v511 = &v983;
  v512 = "2gram discounting constant";
  v514 = "cdiscount3";
  v515 = (char *)&v983 + 8;
  v516 = "3gram discounting constant";
  v518 = "cdiscount4";
  v519 = &v984;
  v520 = "4gram discounting constant";
  v522 = "cdiscount5";
  v523 = (char *)&v984 + 8;
  v524 = "5gram discounting constant";
  v526 = "cdiscount6";
  v527 = &v985;
  v528 = "6gram discounting constant";
  v530 = "cdiscount7";
  v531 = (char *)&v985 + 8;
  v532 = "7gram discounting constant";
  v534 = "cdiscount8";
  v535 = &v986;
  v503 = &v982;
  v536 = "8gram discounting constant";
  v538 = "cdiscount9";
  v539 = (char *)&v986 + 8;
  v540 = "9gram discounting constant";
  v542 = "ndiscount";
  v544 = "use natural discounting";
  v546 = "ndiscount1";
  v547 = (char *)&v974 + 4;
  v548 = "1gram natural discounting";
  v550 = "ndiscount2";
  v551 = (char *)&v974 + 8;
  v552 = "2gram natural discounting";
  v554 = "ndiscount3";
  v555 = (unint64_t)&v974 | 0xC;
  v556 = "3gram natural discounting";
  v558 = "ndiscount4";
  v559 = &v975;
  v560 = "4gram natural discounting";
  v562 = "ndiscount5";
  v563 = (char *)&v975 + 4;
  v564 = "5gram natural discounting";
  v566 = "ndiscount6";
  v567 = (char *)&v975 + 8;
  v568 = "6gram natural discounting";
  v570 = "ndiscount7";
  v571 = (char *)&v975 + 12;
  v543 = &v974;
  v572 = "7gram natural discounting";
  v574 = "ndiscount8";
  v575 = v976;
  v576 = "8gram natural discounting";
  v578 = "ndiscount9";
  v694 = "kndiscount8";
  v579 = (char *)v976 + 4;
  v693 = 1;
  v690 = "kndiscount7";
  v691 = (char *)&v969 + 12;
  v692 = "7gram modified Kneser-Ney discounting";
  v687 = (char *)&v969 + 8;
  v688 = "6gram modified Kneser-Ney discounting";
  v689 = 1;
  v686 = "kndiscount6";
  v685 = 1;
  v682 = "kndiscount5";
  v683 = (char *)&v969 + 4;
  v684 = "5gram modified Kneser-Ney discounting";
  v679 = &v969;
  v680 = "4gram modified Kneser-Ney discounting";
  v681 = 1;
  v678 = "kndiscount4";
  v677 = 1;
  v674 = "kndiscount3";
  v675 = (unint64_t)&v968 | 0xC;
  v676 = "3gram modified Kneser-Ney discounting";
  v671 = (char *)&v968 + 8;
  v672 = "2gram modified Kneser-Ney discounting";
  v673 = 1;
  v668 = "1gram modified Kneser-Ney discounting";
  v669 = 1;
  v670 = "kndiscount2";
  v665 = 1;
  v666 = "kndiscount1";
  v667 = (char *)&v968 + 4;
  v662 = "kndiscount";
  v663 = &v968;
  v664 = "use modified Kneser-Ney discounting";
  v628 = "1gram Witten-Bell discounting";
  v661 = 1;
  v658 = "wbdiscount9";
  v659 = (char *)v973 + 4;
  v660 = "9gram Witten-Bell discounting";
  v655 = v973;
  v656 = "8gram Witten-Bell discounting";
  v657 = 1;
  v654 = "wbdiscount8";
  v653 = 1;
  v650 = "wbdiscount7";
  v651 = (char *)&v972 + 12;
  v652 = "7gram Witten-Bell discounting";
  v647 = (char *)&v972 + 8;
  v648 = "6gram Witten-Bell discounting";
  v649 = 1;
  v646 = "wbdiscount6";
  v645 = 1;
  v642 = "wbdiscount5";
  v643 = (char *)&v972 + 4;
  v644 = "5gram Witten-Bell discounting";
  v639 = &v972;
  v640 = "4gram Witten-Bell discounting";
  v641 = 1;
  v638 = "wbdiscount4";
  v637 = 1;
  v634 = "wbdiscount3";
  v635 = (unint64_t)&v971 | 0xC;
  v636 = "3gram Witten-Bell discounting";
  v631 = (char *)&v971 + 8;
  v632 = "2gram Witten-Bell discounting";
  v633 = 1;
  v630 = "wbdiscount2";
  v629 = 1;
  v626 = "wbdiscount1";
  v627 = (char *)&v971 + 4;
  v625 = 1;
  v622 = "wbdiscount";
  v623 = &v971;
  v624 = "use Witten-Bell discounting";
  v620 = "9gram additive smoothing constant";
  v621 = 1;
  v582 = "addsmooth";
  v618 = "addsmooth9";
  v619 = (char *)&v981 + 8;
  v615 = &v981;
  v616 = "8gram additive smoothing constant";
  v617 = -5;
  v614 = "addsmooth8";
  v613 = -5;
  v610 = "addsmooth7";
  v611 = (char *)&v980 + 8;
  v612 = "7gram additive smoothing constant";
  v607 = &v980;
  v608 = "6gram additive smoothing constant";
  v609 = -5;
  v606 = "addsmooth6";
  v605 = -5;
  v602 = "addsmooth5";
  v603 = (char *)&v979 + 8;
  v604 = "5gram additive smoothing constant";
  v599 = &v979;
  v600 = "4gram additive smoothing constant";
  v601 = -5;
  v598 = "addsmooth4";
  v597 = -5;
  v594 = "addsmooth3";
  v595 = (char *)&v978 + 8;
  v596 = "3gram additive smoothing constant";
  v591 = &v978;
  v592 = "2gram additive smoothing constant";
  v593 = -5;
  v590 = "addsmooth2";
  v589 = -5;
  v586 = "addsmooth1";
  v587 = (char *)&v977 + 8;
  v588 = "1gram additive smoothing constant";
  v583 = &v977;
  v584 = "additive smoothing constant";
  v585 = -5;
  v580 = "9gram natural discounting";
  v577 = 1;
  v581 = -5;
  v695 = v970;
  v696 = "8gram modified Kneser-Ney discounting";
  v698 = "kndiscount9";
  v545 = 1;
  v549 = 1;
  v553 = 1;
  v573 = 1;
  v561 = 1;
  v569 = 1;
  v699 = (char *)v970 + 4;
  v700 = "9gram modified Kneser-Ney discounting";
  v702 = "ukndiscount";
  v565 = 1;
  v704 = "use original Kneser-Ney discounting";
  v706 = "ukndiscount1";
  v707 = (char *)&v965 + 4;
  v708 = "1gram original Kneser-Ney discounting";
  v557 = 1;
  v710 = "ukndiscount2";
  v711 = (char *)&v965 + 8;
  v712 = "2gram original Kneser-Ney discounting";
  v714 = "ukndiscount3";
  v715 = (unint64_t)&v965 | 0xC;
  v716 = "3gram original Kneser-Ney discounting";
  v718 = "ukndiscount4";
  v719 = &v966;
  v720 = "4gram original Kneser-Ney discounting";
  v722 = "ukndiscount5";
  v723 = (char *)&v966 + 4;
  v724 = "5gram original Kneser-Ney discounting";
  v726 = "ukndiscount6";
  v727 = (char *)&v966 + 8;
  v728 = "6gram original Kneser-Ney discounting";
  v730 = "ukndiscount7";
  v731 = (char *)&v966 + 12;
  v732 = "7gram original Kneser-Ney discounting";
  v734 = "ukndiscount8";
  v537 = -5;
  v541 = 1;
  v735 = v967;
  v736 = "8gram original Kneser-Ney discounting";
  v738 = "ukndiscount9";
  v521 = -5;
  v529 = -5;
  v533 = -5;
  v703 = &v965;
  v739 = (char *)v967 + 4;
  v740 = "9gram original Kneser-Ney discounting";
  v742 = "kn";
  v744 = "Kneser-Ney discount parameter file";
  v525 = -5;
  v746 = "kn1";
  v747 = (char *)&v952 + 8;
  v748 = "Kneser-Ney 1gram discounts";
  v750 = "kn2";
  v751 = &v953;
  v752 = "Kneser-Ney 2gram discounts";
  v754 = "kn3";
  v755 = (char *)&v953 + 8;
  v756 = "Kneser-Ney 3gram discounts";
  v758 = "kn4";
  v505 = -5;
  v513 = -5;
  v517 = -5;
  v759 = &v954;
  v760 = "Kneser-Ney 4gram discounts";
  v509 = -5;
  v762 = "kn5";
  v763 = (char *)&v954 + 8;
  v764 = "Kneser-Ney 5gram discounts";
  v766 = "kn6";
  v767 = &v955;
  v768 = "Kneser-Ney 6gram discounts";
  v770 = "kn7";
  v771 = (char *)&v955 + 8;
  v772 = "Kneser-Ney 7gram discounts";
  v774 = "kn8";
  v473 = -3;
  v497 = -3;
  v501 = -5;
  v477 = -3;
  v481 = -3;
  v485 = -3;
  v489 = -3;
  v493 = -3;
  v743 = &v952;
  v775 = &v956;
  v776 = "Kneser-Ney 8gram discounts";
  v778 = "kn9";
  v779 = (char *)&v956 + 8;
  v780 = "Kneser-Ney 9gram discounts";
  v782 = "kn-counts-modified";
  v783 = (char *)&v256 + 4;
  v784 = "input counts already modified for KN smoothing";
  v786 = "kn-modify-counts-at-end";
  v787 = &v256;
  v788 = "modify counts after discount estimation rather than before";
  v790 = "interpolate";
  v792 = "use interpolated estimates";
  v794 = "interpolate1";
  v795 = (char *)&v962 + 4;
  v796 = "use interpolated 1gram estimates";
  v798 = "interpolate2";
  v799 = (char *)&v962 + 8;
  v800 = "use interpolated 2gram estimates";
  v802 = "interpolate3";
  v803 = (unint64_t)&v962 | 0xC;
  v804 = "use interpolated 3gram estimates";
  v806 = "interpolate4";
  v453 = -5;
  v457 = -2;
  v469 = -3;
  v807 = &v963;
  v808 = "use interpolated 4gram estimates";
  v465 = -3;
  v810 = "interpolate5";
  v811 = (char *)&v963 + 4;
  v461 = -3;
  v812 = "use interpolated 5gram estimates";
  v814 = "interpolate6";
  v815 = (char *)&v963 + 8;
  v816 = "use interpolated 6gram estimates";
  v818 = "interpolate7";
  v819 = (char *)&v963 + 12;
  v820 = "use interpolated 7gram estimates";
  v822 = "interpolate8";
  v823 = v964;
  v950 = 0u;
  v824 = "use interpolated 8gram estimates";
  v826 = "interpolate9";
  v369 = -3;
  v449 = -2;
  v791 = &v962;
  v827 = (char *)v964 + 4;
  v828 = "use interpolated 9gram estimates";
  v445 = -5;
  v830 = "lm";
  v831 = &v255;
  v441 = -2;
  v832 = "LM to estimate";
  v834 = "write-binary-lm";
  v835 = &v254;
  v836 = "output LM in binary format";
  v437 = -5;
  v838 = "init-lm";
  v839 = &v253;
  v433 = -2;
  v840 = "initial LM for EM estimation";
  v842 = "unk";
  v843 = &v245;
  v844 = "keep <unk> in LM";
  v429 = -5;
  v846 = "map-unk";
  v847 = &v244;
  v425 = -2;
  v848 = "word to map unknown words to";
  v850 = "meta-tag";
  v851 = &v231;
  v852 = "meta tag used to input count-of-count information";
  v421 = -5;
  v854 = "float-counts";
  v855 = &v239;
  v417 = -2;
  v856 = "use fractional counts";
  v858 = "closed-form-doug-paul-hack";
  v859 = &v238;
  v860 = "use a closed-form formula for the Doug Paul Hack";
  v413 = -5;
  v862 = "tagged";
  v863 = (char *)&v243 + 4;
  v409 = -2;
  v864 = "build a tagged LM";
  v866 = "count-lm";
  v867 = (char *)&v236 + 4;
  v868 = "train a count-based LM";
  v405 = -5;
  v870 = "skip";
  v871 = &v236;
  v401 = -2;
  v872 = "build a skip N-gram LM";
  v874 = "skip-init";
  v875 = &v235;
  v876 = "default initial skip probability";
  v397 = -5;
  v878 = "em-iters";
  v879 = &v234;
  v393 = -2;
  v880 = "max number of EM iterations";
  v882 = "em-delta";
  v883 = &v233;
  v884 = "min log likelihood delta for EM";
  v389 = -5;
  v886 = "stop-words";
  v887 = &v232;
  v385 = -2;
  v888 = "stop-word vocabulary for stop-Ngram LM";
  v890 = "maxent";
  v891 = &v230;
  v892 = "Estimate maximum entropy model";
  v381 = -5;
  v894 = "maxent-alpha";
  v895 = &v229;
  v377 = -3;
  v896 = "The L1 regularisation constant for max-ent estimation";
  v898 = "maxent-sigma2";
  v899 = &v228;
  v900 = "The L2 regularisation constant for max-ent estimation (default: 6 for estimation, 0.5 for adaptation)";
  v373 = -3;
  v902 = "maxent-convert-to-arpa";
  v903 = &v227;
  v904 = "Save estimated max-ent model as a regular ARPA backoff model";
  v906 = "tolower";
  v907 = &v243;
  v908 = "map vocabulary to lowercase";
  v910 = "trust-totals";
  v911 = &v242;
  v912 = "trust lower-order counts for estimation";
  v365 = -3;
  v281 = -5;
  v357 = -3;
  v361 = -3;
  v873 = -5;
  v881 = -5;
  v893 = -5;
  v897 = -5;
  v913 = -5;
  v914 = "prune";
  v915 = &v241;
  v916 = "prune redundant probs";
  v992 = xmmword_1AE194A98;
  v993 = unk_1AE194AA8;
  v994 = xmmword_1AE194AB8;
  v991 = unk_1AE194A88;
  v990 = xmmword_1AE194A78;
  v987 = xmmword_1AE194AC8;
  v988 = unk_1AE194AD8;
  v353 = -3;
  v277 = -2;
  v285 = -2;
  v297 = -2;
  v341 = -3;
  v345 = -3;
  v349 = -3;
  v877 = -2;
  v917 = -2;
  v918 = "minprune";
  v919 = &v240;
  v920 = "prune only ngrams at least this long";
  v333 = -3;
  v922 = "vocab";
  v923 = &v252;
  v337 = -3;
  v924 = "vocab file";
  v926 = "vocab-aliases";
  v927 = &v251;
  v928 = "vocab alias file";
  v325 = -3;
  v930 = "nonevents";
  v931 = &v250;
  v329 = 1;
  v932 = "non-event vocabulary";
  v934 = "limit-vocab";
  v935 = &v249;
  v936 = "limit count reading to specified vocabulary";
  __p = v22;
  v938 = "write-vocab";
  v939 = &v248;
  v940 = "write vocab to file";
  v317 = 1;
  v321 = -3;
  v269 = 0;
  v268 = 0;
  v266 = 0;
  v265 = 0;
  v313 = 1;
  v264 = 0;
  v263 = 0;
  v262 = 0;
  v305 = -3;
  v309 = 1;
  v261 = 0;
  v260 = 0;
  __s = 0;
  v258 = 0;
  v998 = 0u;
  v999 = 0u;
  v301 = -3;
  v996 = 0u;
  v997 = 0u;
  v995 = 0u;
  v257 = 0;
  v984 = xmmword_1AE194B10;
  v985 = unk_1AE194B20;
  v986 = xmmword_1AE194B30;
  v983 = unk_1AE194B00;
  v982 = xmmword_1AE194AF0;
  v293 = 1;
  v979 = xmmword_1AE194B10;
  v980 = unk_1AE194B20;
  v981 = xmmword_1AE194B30;
  v978 = unk_1AE194B00;
  v977 = xmmword_1AE194AF0;
  v976[0] = 0;
  v289 = 1;
  v975 = 0u;
  v974 = 0u;
  v973[0] = 0;
  v972 = 0u;
  v971 = 0u;
  v970[0] = 0;
  v969 = 0u;
  v968 = 0u;
  v967[0] = 0;
  v966 = 0u;
  v965 = 0u;
  v256 = 0;
  v231 = 0;
  v230 = 0;
  v228 = 0.0;
  v227 = 0;
  v273 = 1;
  v964[0] = 0;
  v963 = 0u;
  v962 = 0u;
  v236 = 0;
  v232 = 0;
  v251 = 0;
  v242 = 0;
  v241 = 0.0;
  v239 = 0;
  v238 = 0;
  v237 = 0.0;
  v246 = 0;
  v245 = 0;
  v244 = 0;
  v243 = 0;
  v250 = 0;
  v249 = 0;
  v248 = 0;
  v247 = 0;
  v953 = 0u;
  v952 = 0u;
  v255 = 0;
  v254 = 0;
  v253 = 0;
  v252 = 0;
  v960 = 0u;
  v959 = 0u;
  v958 = 0u;
  v957 = 0u;
  v956 = 0u;
  v955 = 0u;
  v954 = 0u;
  v961 = 0u;
  v697 = 1;
  v701 = 1;
  v705 = 1;
  v709 = 1;
  v713 = 1;
  v717 = 1;
  v721 = 1;
  v725 = 1;
  v729 = 1;
  v733 = 1;
  v737 = 1;
  v741 = -3;
  v745 = -3;
  v749 = -3;
  v753 = -3;
  v757 = -3;
  v761 = -3;
  v765 = -3;
  v769 = -3;
  v773 = -3;
  v777 = -3;
  v781 = 1;
  v785 = 1;
  v789 = 1;
  v793 = 1;
  v797 = 1;
  v801 = 1;
  v805 = 1;
  v809 = 1;
  v813 = 1;
  v817 = 1;
  v821 = 1;
  v825 = 1;
  v829 = -3;
  v833 = 1;
  v837 = -3;
  v841 = 1;
  v845 = -3;
  v849 = -3;
  v853 = 1;
  v857 = 1;
  v861 = 1;
  v865 = 1;
  v869 = 1;
  v885 = -3;
  v889 = 1;
  v901 = 1;
  v905 = 1;
  v909 = 1;
  v921 = -3;
  v925 = -3;
  v929 = -3;
  v933 = 1;
  v937 = -3;
  v941 = -3;
  v942 = "write-vocab-index";
  v943 = &v247;
  v944 = "write vocab index map to file";
  v945 = 1;
  v946 = "memuse";
  v947 = (char *)&v246 + 4;
  v948 = "show memory usage";
  v949 = -8;
  v951 = "the default action is to write counts to stdout";
  Opt_Parse(((unint64_t)((_BYTE *)v22 - (_BYTE *)v270) >> 3) - 1, (const char **)v270, (unint64_t)&v273, 170, 0);
  if (v269)
  {
    printVersion(RcsId);
    v34 = 0;
    goto LABEL_62;
  }
  if (v255)
    *(_BYTE *)v6 = 1;
  v35 = HIDWORD(v243) + v239 + v236;
  if (v232)
    ++v35;
  if (v237 != 0.0)
    ++v35;
  if (v35 > 1)
  {
    v36 = "fractional counts, variable, tagged, stop-word Ngram and skip N-gram models are mutually exclusive\n";
    v37 = 99;
LABEL_60:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v36, v37);
LABEL_61:
    v34 = 2;
    goto LABEL_62;
  }
  v38 = v971 + v974;
  if (*(double *)&v982 != -1.0)
    ++v38;
  v33.n128_u64[0] = v977;
  v39 = v38 + v965;
  if (*(double *)&v977 != -1.0)
    ++v39;
  if ((_QWORD)v952)
    v40 = 0;
  else
    v40 = (_DWORD)v968 == 0;
  if (!v40)
    ++v39;
  if ((_QWORD)v957)
    ++v39;
  if (v39 >= 2)
  {
    v36 = "conflicting default discounting options\n";
    v37 = 40;
    goto LABEL_60;
  }
  v43 = (Vocab **)(v6 + 32);
  v42 = *(Vocab **)(v6 + 32);
  if (v42)
  {
    if (HIDWORD(v243))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"option tagged not yet supported when providing external Vocab\n", 62);
      goto LABEL_61;
    }
  }
  else
  {
    if (HIDWORD(v243))
    {
      v44 = (TaggedVocab *)operator new();
      TaggedVocab::TaggedVocab(v44, 0, 0xFFFFEu);
      v221.__locale_ = v44;
    }
    else
    {
      std::make_unique[abi:ne180100]<Vocab>(&v221.__locale_);
    }
    std::shared_ptr<Vocab>::operator=[abi:ne180100]<Vocab,std::default_delete<Vocab>,void>((_QWORD *)(v6 + 32), (uint64_t *)&v221);
    locale = v221.__locale_;
    v221.__locale_ = 0;
    if (locale)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
    v42 = *v43;
  }
  v46 = v245;
  *(_BYTE *)(*(uint64_t (**)(Vocab *, __n128))(*(_QWORD *)v42 + 152))(v42, v33) = v46 != 0;
  v47 = v243;
  *(_BYTE *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)*v43 + 160))(*v43) = v47 != 0;
  if (v244)
  {
    v48 = *v43;
    v49 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)*v43 + 88))(*v43);
    (*(void (**)(Vocab *, _QWORD))(*(_QWORD *)v48 + 64))(v48, *v49);
    LODWORD(v48) = (*(uint64_t (**)(Vocab *, uint64_t))(*(_QWORD *)*v43 + 16))(*v43, v244);
    *(_DWORD *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)*v43 + 88))(*v43) = (_DWORD)v48;
  }
  v50 = v231;
  if (v231)
    *(_QWORD *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)*v43 + 216))(*v43) = v50;
  v51 = v232;
  if (v232)
  {
    v52 = *v43;
    v53 = (SubVocab *)operator new();
    SubVocab::SubVocab(v53, v52, 0);
    v54 = *v43;
    v55 = (StopNgramStats *)operator new();
    StopNgramStats::StopNgramStats(v55, v54, v53, v267);
LABEL_82:
    v226 = v55;
    goto LABEL_83;
  }
  if (HIDWORD(v243))
  {
    v56 = *v43;
    v55 = (StopNgramStats *)operator new();
    TaggedNgramStats::TaggedNgramStats(v55, v56, v267);
    v53 = 0;
    goto LABEL_82;
  }
  if (v239)
  {
    v226 = 0;
  }
  else
  {
    v84 = *v43;
    v85 = v267;
    if ((_DWORD)v236)
      v85 = v267 + 1;
    LODWORD(v221.__locale_) = v85;
    std::make_unique[abi:ne180100]<NgramStats,Vocab &,unsigned int>(v84, (int *)&v221, &v226);
  }
  v53 = 0;
LABEL_83:
  if (v239)
  {
    v57 = *v43;
    v58 = (LMStats *)operator new();
    NgramCounts<double>::NgramCounts(v58, v57, v267);
    if (v239)
    {
      (*(void (**)(LMStats *, _QWORD))(*(_QWORD *)v58 + 16))(v58, v266);
      goto LABEL_88;
    }
  }
  else
  {
    v58 = 0;
  }
  (*(void (**)(NgramStats *, _QWORD))(*(_QWORD *)v226 + 16))(v226, v266);
LABEL_88:
  if (v252)
  {
    File::File((File *)&v221, v252, "r", 1);
    if (v239)
      v59 = v58;
    else
      v59 = v226;
    (*(void (**)(_QWORD, std::locale *))(**((_QWORD **)v59 + 3) + 304))(*((_QWORD *)v59 + 3), &v221);
    if (v239)
      v60 = v58;
    else
      v60 = v226;
    *((_BYTE *)v60 + 32) = 0;
    File::~File((File *)&v221);
  }
  v61 = *(_QWORD *)(v6 + 24);
  if (v61)
  {
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61) & 1) == 0)
    {
      (*(void (**)(std::locale *__return_ptr))(**(_QWORD **)(v6 + 24) + 24))(&v221);
      if (v239)
      {
        if (v222 >= 0)
          v62 = &v221;
        else
          v62 = v221.__locale_;
        v63 = v58;
      }
      else
      {
        v63 = v226;
        if (v222 >= 0)
          v62 = &v221;
        else
          v62 = v221.__locale_;
      }
      (*(void (**)(_QWORD, void *))(**((_QWORD **)v63 + 3) + 16))(*((_QWORD *)v63 + 3), v62);
      if (v222 < 0)
        operator delete(v221.__locale_);
      v61 = *(_QWORD *)(v6 + 24);
    }
    if (v239)
      v64 = v58;
    else
      v64 = v226;
    *((_BYTE *)v64 + 32) = 0;
  }
  if ((_DWORD)v264)
  {
    if (v239)
      v65 = v58;
    else
      v65 = v226;
    *((_BYTE *)v65 + 33) = 0;
  }
  if (v263)
  {
    if (v239)
      v66 = v58;
    else
      v66 = v226;
    *((_BYTE *)v66 + 34) = 0;
  }
  if (v251)
  {
    File::File((File *)&v221, v251, "r", 1);
    if (v239)
      v67 = v58;
    else
      v67 = v226;
    (*(void (**)(_QWORD, std::locale *))(**((_QWORD **)v67 + 3) + 312))(*((_QWORD *)v67 + 3), &v221);
    File::~File((File *)&v221);
  }
  if (v232)
  {
    File::File((File *)&v221, v232, "r", 1);
    (*(void (**)(SubVocab *, std::locale *))(*(_QWORD *)v53 + 304))(v53, &v221);
    File::~File((File *)&v221);
  }
  if (v250)
  {
    if (v239)
      v68 = v58;
    else
      v68 = v226;
    SubVocab::SubVocab((SubVocab *)&v221, *((Vocab **)v68 + 3), 0);
    File::File((File *)&v223, v250, "r", 1);
    Vocab::read((Vocab *)&v221, (File *)&v223);
    if (v239)
      v69 = v58;
    else
      v69 = v226;
    (*(void (**)(_QWORD, std::locale *))(**((_QWORD **)v69 + 3) + 200))(*((_QWORD *)v69 + 3), &v221);
    File::~File((File *)&v223);
    Vocab::~Vocab((Vocab *)&v221);
  }
  if (v261)
  {
    File::File((File *)&v221, v261, "r", 1);
    if (v239)
      NgramCounts<double>::read((uint64_t)v58, (File *)&v221, v267, v249);
    else
      NgramCounts<unsigned long>::read((uint64_t)v226, (File *)&v221, v267, v249);
    if (v239)
      NgramCounts<double>::setCounts((uint64_t)v58, 0.0);
    else
      NgramCounts<unsigned long>::setCounts((uint64_t)v226, 0);
    if (v239)
      v70 = v58;
    else
      v70 = v226;
    *((_BYTE *)v70 + 152) = 1;
    File::~File((File *)&v221);
  }
  if (v262 || *(_DWORD *)(v6 + 88) == 1)
  {
    File::File((File *)&v221, 0, 1);
    if (v262)
      File::reopen((File *)&v221, v262, "r");
    if (v239)
      v71 = v58;
    else
      v71 = v226;
    v72 = *((_DWORD *)v71 + 39);
    if (v260)
    {
      LODWORD(v223) = 0;
      HIDWORD(v223) = v72;
      v224 = 0;
      v225 = 0;
      if (v72)
        Array<unsigned long>::alloc((uint64_t)&v223, v72 - 1, 0);
      if (v72 >= 9)
        v73 = 9;
      else
        v73 = v72;
      if ((_DWORD)v73)
      {
        v74 = &v224[-(int)v223];
        v75 = (double *)&v990 + 1;
        v76 = v73;
        do
        {
          v77 = *v75++;
          *v74++ = (unint64_t)v77;
          --v76;
        }
        while (v76);
      }
      if (v72 >= 0xA)
      {
        v78 = v224;
        v79 = (unint64_t)*(double *)&v990;
        v80 = v72 - v73;
        v81 = v73 - (_DWORD)v223;
        do
        {
          v78[v81++] = v79;
          --v80;
        }
        while (v80);
      }
      if (v262)
      {
        if (v239)
          NgramCounts<double>::readMinCounts((double *)v58, (File *)&v221, v72, (uint64_t)&v224[-(int)v223], 0);
        else
          NgramCounts<unsigned long>::readMinCounts(v226, (File *)&v221, v72, (uint64_t)&v224[-(int)v223], 0);
      }
      else
      {
        v82 = *(_QWORD *)(v6 + 8);
        if (v82)
        {
          if (v239)
            NgramCounts<double>::readMinCounts((double *)v58, v82, v72, (uint64_t)&v224[-(int)v223], 0);
          else
            NgramCounts<unsigned long>::readMinCounts(v226, v82, v72, (uint64_t)&v224[-(int)v223], 0);
        }
      }
      if (v224)
        MEMORY[0x1AF44D160](v224, 0x1000C8000313F17);
    }
    else if (v262)
    {
      if (v239)
        NgramCounts<double>::read((uint64_t)v58, (File *)&v221, v72, v249);
      else
        NgramCounts<unsigned long>::read((uint64_t)v226, (File *)&v221, v72, v249);
    }
    else
    {
      v83 = *(_QWORD *)(v6 + 8);
      if (v83)
      {
        if (v239)
          NgramCounts<double>::read((uint64_t)v58, v83, v72, v249);
        else
          NgramCounts<unsigned long>::read((uint64_t)v226, v83, v72, v249);
      }
    }
    File::~File((File *)&v221);
  }
  if (__s)
  {
    if (!(v239
         ? NgramCounts<double>::readGoogle((uint64_t)v58, __s, v267, v249)
         : NgramCounts<unsigned long>::readGoogle((uint64_t)v226, __s, v267, v249)))
    {
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error reading Google counts from ", 33);
      v95 = strlen(__s);
      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)__s, v95);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v96);
      v34 = 1;
      goto LABEL_492;
    }
  }
  if (v265)
  {
    File::File((File *)&v221, v265, "r", 1);
    if (v239)
      v87 = v58;
    else
      v87 = v226;
    (*(void (**)(NgramStats *, std::locale *, _QWORD))(*(_QWORD *)v87 + 72))(v87, &v221, BYTE4(v264));
    File::~File((File *)&v221);
  }
  v88 = *(_QWORD *)(v6 + 8);
  if (v88 && (*(_DWORD *)(v6 + 88) | 2) == 2)
  {
    while (1)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88))
        goto LABEL_215;
      v89 = *(std::locale::__imp **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8));
      v221.__locale_ = v89;
      v90 = *(_QWORD *)v89;
      if (*(uint64_t *)v89 > 0)
        break;
      v221.__locale_ = 0;
LABEL_213:
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v221, (uint64_t)v89);
LABEL_214:
      v88 = *(_QWORD *)(v6 + 8);
    }
    v91 = (char *)v89 + 80;
    if (*((_QWORD *)v89 + 10) == *((_QWORD *)v89 + 11))
    {
      v91 = (char *)v89 + 32;
      v92 = 14;
      if (v239)
        goto LABEL_208;
    }
    else
    {
      v92 = 15;
      if (v239)
      {
LABEL_208:
        (*(void (**)(LMStats *, char *, double))(*(_QWORD *)v58 + 8 * v92))(v58, v91, (double)v90);
        goto LABEL_212;
      }
    }
    (*(void (**)(void))(*(_QWORD *)v226 + 8 * v92))();
LABEL_212:
    v89 = v221.__locale_;
    v221.__locale_ = 0;
    if (!v89)
      goto LABEL_214;
    goto LABEL_213;
  }
LABEL_215:
  if (HIDWORD(v246))
  {
    MemStats::MemStats((MemStats *)&v221);
    if (v239)
      v93 = v58;
    else
      v93 = v226;
    (*(void (**)(NgramStats *, std::locale *))(*(_QWORD *)v93 + 96))(v93, &v221);
    if (!v266)
      MemStats::clearAllocStats((MemStats *)&v221);
    MemStats::print((uint64_t)&v221, MEMORY[0x1E0DE4A50]);
    if (v266)
      BM_printstats();
  }
  if ((_DWORD)v246)
  {
    if (v239)
      NgramCounts<double>::sumCounts((uint64_t)v58, v267);
    else
      NgramCounts<unsigned long>::sumCounts((uint64_t)v226, v267);
  }
  v97 = v267;
  if (!v267)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"LM order must be positive -- set to 1\n", 38);
    v97 = 1;
    v267 = 1;
  }
  v215 = v51;
  v216 = (Vocab **)(v6 + 32);
  std::vector<std::unique_ptr<Discount>>::vector(&v223, v97);
  v98 = HIDWORD(v236);
  v99 = v230;
  v217 = 0;
  if (HIDWORD(v236) || v230 || !v267)
  {
LABEL_341:
    if (v98 && *(_BYTE *)v6)
    {
      v145 = (_QWORD *)(v6 + 32);
      v146 = v217;
      if (v238)
      {
        v147 = "Closed-form Doug Paul Hack is not supported in combination with a count-based LM.";
        v148 = 81;
LABEL_349:
        v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v147, v148);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v149);
        goto LABEL_490;
      }
      std::make_unique[abi:ne180100]<NgramCountLM,Vocab &,unsigned int &>(*v216, &v267, &v218[0].__locale_);
      v152 = v218[0].__locale_;
      *((_DWORD *)v218[0].__locale_ + 38) = v234;
      *((_QWORD *)v152 + 20) = v233;
      (*(void (**)(std::locale::__imp *, _QWORD))(*(_QWORD *)v152 + 16))(v152, v266);
      if (!v253)
      {
        v153 = "count-lm estimation needs initial model\n";
        v154 = 40;
        goto LABEL_367;
      }
      File::File((File *)&v221, v253, "r", 1);
      if ((*(unsigned int (**)(std::locale::__imp *, std::locale *, _QWORD))(*(_QWORD *)v218[0].__locale_
                                                                                       + 240))(v218[0].__locale_, &v221, v249))
      {
        File::~File((File *)&v221);
        if (v239)
        {
          v153 = "cannot use -float-counts with count-lm\n";
          v154 = 39;
LABEL_367:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v153, v154);
LABEL_436:
          v197 = 0;
          goto LABEL_461;
        }
        if (!NgramCountLM::estimate(v218[0].__locale_, v226))
        {
          v153 = "LM estimation failed\n";
          v154 = 21;
          goto LABEL_367;
        }
        v193 = v218[0].__locale_;
        *((_BYTE *)v218[0].__locale_ + 168) = 0;
        if (v255)
        {
          if (v254)
          {
            File::File((File *)&v221, v255, "wb", 1);
            (*(void (**)(std::locale::__imp *, std::locale *))(*(_QWORD *)v218[0].__locale_ + 256))(v218[0].__locale_, &v221);
LABEL_459:
            File::~File((File *)&v221);
            goto LABEL_460;
          }
LABEL_458:
          File::File((File *)&v221, v255, "w", 1);
          (*(void (**)(std::locale::__imp *, std::locale *))(*(_QWORD *)v218[0].__locale_ + 248))(v218[0].__locale_, &v221);
          goto LABEL_459;
        }
        v218[0].__locale_ = 0;
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v193 + 8))(v193);
        v146 = 1;
LABEL_464:
        if (v248)
        {
          File::File((File *)&v221, v248, "w", 1);
          (*(void (**)(_QWORD, std::locale *, uint64_t))(*(_QWORD *)*v145 + 320))(*v145, &v221, 1);
          File::~File((File *)&v221);
          v146 = 1;
        }
        if (v247)
        {
          File::File((File *)&v221, v247, "w", 1);
          (*(void (**)(_QWORD, std::locale *, _QWORD))(*(_QWORD *)*v145 + 344))(*v145, &v221, 0);
          File::~File((File *)&v221);
          v146 = 1;
        }
        for (j = 1; j != 10; ++j)
        {
          v203 = (const char *)*((_QWORD *)&v995 + j);
          if (v203)
          {
            File::File((File *)&v221, v203, "w", 1);
            if (v239)
              NgramCounts<double>::write((uint64_t)v58, (File *)&v221, j, BYTE4(v245));
            else
              NgramCounts<unsigned long>::write((uint64_t)v226, (File *)&v221, j, BYTE4(v245));
            File::~File((File *)&v221);
            v146 = 1;
          }
        }
        if (!v257)
        {
LABEL_481:
          if ((_QWORD)v995 || !v146)
          {
            if ((_QWORD)v995)
              v205 = (const char *)v995;
            else
              v205 = "-";
            File::File((File *)&v221, v205, "w", 1);
            if (v239)
              NgramCounts<double>::write((uint64_t)v58, (File *)&v221, v258, BYTE4(v245));
            else
              NgramCounts<unsigned long>::write((uint64_t)v226, (File *)&v221, v258, BYTE4(v245));
            File::~File((File *)&v221);
          }
          v210 = (const char *)(v6 + 96);
          if (*(char *)(v6 + 119) < 0)
          {
            if (!*(_QWORD *)(v6 + 104))
              goto LABEL_509;
            v210 = *(const char **)v210;
          }
          else if (!*(_BYTE *)(v6 + 119))
          {
            goto LABEL_509;
          }
          File::File((File *)&v221, v210, "w", 1);
          if (v239)
            NgramCounts<double>::write((uint64_t)v58, (File *)&v221, 0, BYTE4(v245));
          else
            NgramCounts<unsigned long>::write((uint64_t)v226, (File *)&v221, 0, BYTE4(v245));
          File::~File((File *)&v221);
LABEL_509:
          if (!*(_BYTE *)v6)
          {
            File::File((File *)&v221, "", 0, 1, 0);
            if (v239)
              NgramCounts<double>::write((uint64_t)v58, (File *)&v221, 0, BYTE4(v245));
            else
              NgramCounts<unsigned long>::write((uint64_t)v226, (File *)&v221, 0, BYTE4(v245));
            v211 = (char *)File::c_str((File *)&v221);
            std::string::basic_string[abi:ne180100]<0>(v218, v211);
            v212 = (void **)(v6 + 56);
            if (*(char *)(v6 + 79) < 0)
              operator delete(*v212);
            *(_OWORD *)v212 = *(_OWORD *)&v218[0].__locale_;
            *(_QWORD *)(v6 + 72) = v219;
            File::~File((File *)&v221);
          }
          v213 = (const char *)(v6 + 120);
          if (*(char *)(v6 + 143) < 0)
          {
            v34 = 0;
            if (!*(_QWORD *)(v6 + 128) || !*(_BYTE *)v6)
              goto LABEL_491;
            v213 = *(const char **)v213;
          }
          else
          {
            v34 = 0;
            if (!*(_BYTE *)(v6 + 143) || !*(_BYTE *)v6)
              goto LABEL_491;
          }
          File::File((File *)&v221, v213, "w", 1);
          (*(void (**)(_QWORD, std::locale *))(**(_QWORD **)(v6 + 48) + 248))(*(_QWORD *)(v6 + 48), &v221);
          File::~File((File *)&v221);
          v34 = 0;
          goto LABEL_491;
        }
        File::File((File *)&v221, v257, "wb", 1);
        if (v239)
          v204 = NgramCounts<double>::writeBinary((uint64_t)v58, (File *)&v221, v258);
        else
          v204 = NgramCounts<unsigned long>::writeBinary((uint64_t)v226, (File *)&v221, v258);
        if (v204)
        {
          File::~File((File *)&v221);
          v146 = 1;
          goto LABEL_481;
        }
        v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error writing ", 14);
        v207 = strlen(v257);
        v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)v257, v207);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v208);
LABEL_489:
        File::~File((File *)&v221);
        goto LABEL_490;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"format error in init-lm file\n", 29);
LABEL_435:
      File::~File((File *)&v221);
      goto LABEL_436;
    }
    v145 = (_QWORD *)(v6 + 32);
    v146 = v217;
    if (v99 && *(_BYTE *)v6)
    {
      if (v238)
      {
        v147 = "Closed-form Doug Paul Hack is not supported in combination with a maximum-entropy LM.";
        v148 = 85;
        goto LABEL_349;
      }
      std::make_unique[abi:ne180100]<MEModel,Vocab &,unsigned int &>(*v216, &v267, &v218[0].__locale_);
      (*(void (**)(std::locale::__imp *, _QWORD))(*(_QWORD *)v218[0].__locale_ + 16))(v218[0].__locale_, v266);
      if (v253)
      {
        File::File((File *)&v221, v253, "r", 1);
        if (!(*(unsigned int (**)(std::locale::__imp *, std::locale *, _QWORD))(*(_QWORD *)v218[0].__locale_
                                                                                          + 240))(v218[0].__locale_, &v221, 0))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"format error in maxent prior (-init-lm) file\n", 45);
          goto LABEL_435;
        }
        v165 = 368;
        if (!v239)
          v165 = 376;
        v163.n128_u64[0] = v229;
        v164.n128_f64[0] = v228;
        if (v228 == 0.0)
          v164.n128_f64[0] = 0.5;
        (*(void (**)(__n128, __n128))(*(_QWORD *)v218[0].__locale_ + v165))(v163, v164);
        File::~File((File *)&v221);
      }
      else
      {
        v190 = 352;
        if (!v239)
          v190 = 360;
        v161.n128_u64[0] = v229;
        v162.n128_f64[0] = v228;
        if (v228 == 0.0)
          v162.n128_f64[0] = 6.0;
        if (!(*(unsigned int (**)(__n128, __n128))(*(_QWORD *)v218[0].__locale_ + v190))(v161, v162))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Maxent LM estimation failed\n", 28);
          goto LABEL_436;
        }
      }
      if (v227)
      {
        v191 = (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)v218[0].__locale_ + 336))(v218[0].__locale_);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v191 + 16))(v191, v266);
        v192.n128_f64[0] = v241;
        if (v241 != 0.0)
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, double, double))(*(_QWORD *)v191 + 424))(v191, v240, 0, 0, v241, 0.0);
        if (v255)
        {
          if (v254)
          {
            File::File((File *)&v221, v255, "wb", 1);
            (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)v191 + 256))(v191, &v221);
          }
          else
          {
            File::File((File *)&v221, v255, "w", 1);
            (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)v191 + 248))(v191, &v221);
          }
          File::~File((File *)&v221);
        }
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v191 + 8))(v191, v192);
        goto LABEL_460;
      }
      if (!v255)
      {
LABEL_460:
        v146 = 1;
        v197 = 1;
LABEL_461:
        v201 = v218[0].__locale_;
        v218[0].__locale_ = 0;
        if (v201)
          (*(void (**)(std::locale::__imp *))(*(_QWORD *)v201 + 8))(v201);
        if ((v197 & 1) == 0)
          goto LABEL_490;
        goto LABEL_464;
      }
      goto LABEL_458;
    }
    if (!*(_BYTE *)v6)
      goto LABEL_464;
    if (v237 != 0.0)
    {
      std::make_unique[abi:ne180100]<VarNgram,Vocab &,unsigned int &,double &>(*v216, (int *)&v267, &v237, &v221.__locale_);
      v150 = v221.__locale_;
      v221.__locale_ = 0;
      v151 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v150;
      if (!v151)
        goto LABEL_372;
LABEL_370:
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
      v168 = v221.__locale_;
      v221.__locale_ = 0;
      if (v168)
LABEL_371:
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v168 + 8))(v168);
LABEL_372:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 48) + 16))(*(_QWORD *)(v6 + 48), v266);
      if (v253)
      {
        File::File((File *)&v221, v253, "r", 1);
        if (!(*(unsigned int (**)(_QWORD, std::locale *, _QWORD))(**(_QWORD **)(v6 + 48) + 240))(*(_QWORD *)(v6 + 48), &v221, v249))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"format error in init-lm file\n", 29);
          goto LABEL_489;
        }
        File::~File((File *)&v221);
      }
      if (v242)
        *(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 48) + 352))(*(_QWORD *)(v6 + 48)) = 1;
      v218[0].__locale_ = 0;
      v218[1].__locale_ = 0;
      v219 = 0;
      v169 = v223;
      v170 = v224;
      if (v223 != v224)
      {
        v171 = 0;
        do
        {
          v172 = *v169;
          if (v171 >= v219)
          {
            v173 = (v171 - v218[0].__locale_) >> 3;
            if ((unint64_t)(v173 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v174 = (v219 - v218[0].__locale_) >> 2;
            if (v174 <= v173 + 1)
              v174 = v173 + 1;
            if ((unint64_t)(v219 - v218[0].__locale_) >= 0x7FFFFFFFFFFFFFF8)
              v175 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v175 = v174;
            if (v175)
              v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v219, v175);
            else
              v176 = 0;
            v177 = (std::locale::__imp *)&v176[8 * v173];
            *(_QWORD *)v177 = v172;
            v171 = (std::locale::__imp *)((char *)v177 + 8);
            v179 = v218[0].__locale_;
            v178 = v218[1].__locale_;
            if (v218[1].__locale_ != v218[0].__locale_)
            {
              do
              {
                v180 = *((_QWORD *)v178 - 1);
                v178 = (std::locale::__imp *)((char *)v178 - 8);
                *((_QWORD *)v177 - 1) = v180;
                v177 = (std::locale::__imp *)((char *)v177 - 8);
              }
              while (v178 != v179);
              v178 = v218[0].__locale_;
            }
            v218[0].__locale_ = v177;
            v218[1].__locale_ = v171;
            v219 = (std::locale::__imp *)&v176[8 * v175];
            if (v178)
              operator delete(v178);
          }
          else
          {
            *(_QWORD *)v171 = v172;
            v171 = (std::locale::__imp *)((char *)v171 + 8);
          }
          v218[1].__locale_ = v171;
          ++v169;
        }
        while (v169 != v170);
      }
      v181 = 384;
      if (!v239)
        v181 = 376;
      v145 = (_QWORD *)(v6 + 32);
      v146 = v217;
      v182 = (*(uint64_t (**)(void))(**(_QWORD **)(v6 + 48) + v181))();
      if (v182)
      {
        if (v241 != 0.0)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, double, double))(**(_QWORD **)(v6 + 48) + 424))(*(_QWORD *)(v6 + 48), v240, 0, 0, v241, 0.0);
        if (v255)
        {
          if (v254)
          {
            File::File((File *)&v221, v255, "wb", 1);
            (*(void (**)(_QWORD, std::locale *))(**(_QWORD **)(v6 + 48) + 256))(*(_QWORD *)(v6 + 48), &v221);
          }
          else
          {
            File::File((File *)&v221, v255, "w", 1);
            (*(void (**)(_QWORD, std::locale *))(**(_QWORD **)(v6 + 48) + 248))(*(_QWORD *)(v6 + 48), &v221);
          }
          File::~File((File *)&v221);
        }
        v146 = 1;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"LM estimation failed\n", 21);
      }
      if (v218[0].__locale_)
      {
        v218[1] = v218[0];
        operator delete(v218[0].__locale_);
      }
      if (!v182)
        goto LABEL_490;
      goto LABEL_464;
    }
    if ((_DWORD)v236)
    {
      std::make_unique[abi:ne180100]<SkipNgram,Vocab &,unsigned int &>(*v216, &v267, &v221.__locale_);
      v166 = v221.__locale_;
      *((_DWORD *)v221.__locale_ + 48) = v234;
      v167 = v235;
      *((_QWORD *)v166 + 25) = v233;
      *((_QWORD *)v166 + 26) = v167;
      v221.__locale_ = 0;
      v151 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v166;
      if (!v151)
        goto LABEL_372;
      goto LABEL_370;
    }
    if (v215)
    {
      std::make_unique[abi:ne180100]<StopNgram,Vocab &,SubVocab &,unsigned int &>(*v216, v53, (int *)&v267, &v220);
      v194 = v220;
      v220 = 0;
      v221.__locale_ = 0;
      v195 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v194;
      if (!v195)
        goto LABEL_432;
    }
    else
    {
      if (HIDWORD(v243))
      {
        std::make_unique[abi:ne180100]<TaggedNgram,TaggedVocab &,unsigned int &>(*v216, (int *)&v267, &v218[0].__locale_);
        v198 = v218[0].__locale_;
        v218[0].__locale_ = 0;
        v221.__locale_ = 0;
        v199 = *(_QWORD *)(v6 + 48);
        *(_QWORD *)(v6 + 48) = v198;
        if (v199)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
          v200 = v221.__locale_;
          v221.__locale_ = 0;
          if (v200)
            (*(void (**)(std::locale::__imp *))(*(_QWORD *)v200 + 8))(v200);
        }
        v168 = v218[0].__locale_;
        v218[0].__locale_ = 0;
        if (!v168)
          goto LABEL_372;
        goto LABEL_371;
      }
      std::make_unique[abi:ne180100]<Ngram,Vocab &,unsigned int &>(*v216, &v267, &v221.__locale_);
      v214 = v221.__locale_;
      v221.__locale_ = 0;
      v195 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v214;
      if (!v195)
        goto LABEL_372;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
    v196 = v221.__locale_;
    v221.__locale_ = 0;
    if (v196)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v196 + 8))(v196);
    if (!v215)
      goto LABEL_372;
LABEL_432:
    v168 = v220;
    v220 = 0;
    if (!v168)
      goto LABEL_372;
    goto LABEL_371;
  }
  v217 = 0;
  v100 = (_QWORD *)MEMORY[0x1E0DE4A50];
  v101 = 1;
  while (1)
  {
    if (v101 <= 9)
    {
      v102 = *((_DWORD *)&v974 + v101);
      v103 = *((_DWORD *)&v971 + v101);
      v104 = *((double *)&v982 + v101);
      if (v104 == -1.0)
        v105 = v103 + v102;
      else
        v105 = v103 + v102 + 1;
      v106 = *((double *)&v977 + v101);
      v107 = *((_QWORD *)&v952 + v101);
      if (v107)
        v108 = 1;
      else
        v108 = *((_DWORD *)&v968 + v101) != 0;
      v109 = *((_DWORD *)&v965 + v101);
      v110 = *((_QWORD *)&v957 + v101);
      v111 = v105 + v109 + (v106 != -1.0) + v108;
      if (v110)
        ++v111;
      if (v111 >= 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"conflicting discounting options for order ", 42);
        v155 = (_QWORD *)std::ostream::operator<<();
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v155);
        v34 = 2;
        goto LABEL_491;
      }
      if (!v102
        && !v103
        && v104 == -1.0
        && v106 == -1.0
        && !v109
        && !v107
        && !v110
        && !*((_DWORD *)&v968 + v101))
      {
        if ((_DWORD)v974)
        {
          *((_DWORD *)&v974 + v101) = v974;
          goto LABEL_261;
        }
        if ((_DWORD)v971)
        {
          *((_DWORD *)&v971 + v101) = v971;
          goto LABEL_261;
        }
        v112 = v982;
        if (*(double *)&v982 != -1.0)
        {
          v113 = &v982;
LABEL_260:
          *((_QWORD *)v113 + v101) = v112;
          goto LABEL_261;
        }
        v112 = v977;
        if (*(double *)&v977 != -1.0)
        {
          v113 = &v977;
          goto LABEL_260;
        }
        v142 = v965;
        if ((_DWORD)v965)
        {
          v143 = &v965;
        }
        else
        {
          v142 = v968;
          if (!(_DWORD)v968)
            goto LABEL_261;
          v143 = &v968;
        }
        *((_DWORD *)v143 + v101) = v142;
LABEL_261:
        if ((_QWORD)v952)
        {
          *((_QWORD *)&v952 + v101) = v952;
        }
        else if ((_QWORD)v957)
        {
          *((_QWORD *)&v957 + v101) = v957;
        }
      }
    }
    if (v101 <= 9)
      v114 = v101;
    else
      v114 = 0;
    if (*((_DWORD *)&v974 + v114))
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using NaturalDiscount for ", 26);
        v115 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"-grams", 6);
      }
      v116 = operator new();
      v117 = v116;
      v118 = *((_QWORD *)&v990 + v114);
      *(_BYTE *)(v116 + 8) = 0;
      *(_DWORD *)(v116 + 12) = 0;
      *(_QWORD *)(v116 + 16) = v100;
      *(_BYTE *)(v116 + 24) = 0;
      *(_QWORD *)v116 = &unk_1E5D16720;
      *(_DWORD *)(v116 + 28) = 0;
LABEL_276:
      *(_QWORD *)(v116 + 32) = v118;
      goto LABEL_277;
    }
    if (*((_DWORD *)&v971 + v114))
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using WittenBell for ", 21);
        v119 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"-grams", 6);
      }
      v116 = operator new();
      v117 = v116;
      v118 = *((_QWORD *)&v990 + v114);
      *(_BYTE *)(v116 + 8) = 0;
      *(_DWORD *)(v116 + 12) = 0;
      *(_QWORD *)(v116 + 16) = v100;
      *(_BYTE *)(v116 + 24) = 0;
      *(_QWORD *)v116 = &unk_1E5D15988;
      goto LABEL_276;
    }
    if (*((double *)&v982 + v114) != -1.0)
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using ConstDiscount for ", 24);
        v127 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"-grams", 6);
      }
      v117 = operator new();
      v128 = *((double *)&v982 + v114);
      v129 = *((_QWORD *)&v990 + v114);
      *(_BYTE *)(v117 + 8) = 0;
      *(_DWORD *)(v117 + 12) = 0;
      *(_QWORD *)(v117 + 16) = v100;
      *(_BYTE *)(v117 + 24) = 0;
      *(_QWORD *)v117 = &unk_1E5D162C8;
      if (v128 <= 1.0)
        v130 = v128;
      else
        v130 = 1.0;
      if (v128 >= 0.0)
        v131 = v130;
      else
        v131 = 0.0;
LABEL_321:
      *(double *)(v117 + 32) = v131;
      *(_QWORD *)(v117 + 40) = v129;
      goto LABEL_277;
    }
    if (*((double *)&v977 + v114) != -1.0)
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using AddSmooth for ", 20);
        v133 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"-grams", 6);
      }
      v117 = operator new();
      v131 = *((double *)&v977 + v114);
      v129 = *((_QWORD *)&v990 + v114);
      *(_BYTE *)(v117 + 8) = 0;
      *(_DWORD *)(v117 + 12) = 0;
      *(_QWORD *)(v117 + 16) = v100;
      *(_BYTE *)(v117 + 24) = 0;
      *(_QWORD *)v117 = &unk_1E5D17E48;
      if (v131 < 0.0)
        v131 = 0.0;
      goto LABEL_321;
    }
    if (*((_DWORD *)&v965 + v114))
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using KneserNey for ", 20);
        v134 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"-grams", 6);
      }
      v135 = *((double *)&v990 + v114);
      v117 = operator new();
      v136 = BYTE4(v256);
      v137 = v256;
      *(_BYTE *)(v117 + 8) = 0;
      *(_DWORD *)(v117 + 12) = 0;
      *(_QWORD *)(v117 + 16) = v100;
      *(_BYTE *)(v117 + 24) = 0;
      *(_QWORD *)v117 = &unk_1E5D17ED8;
      *(_QWORD *)(v117 + 32) = v135;
      *(_QWORD *)(v117 + 40) = 0;
      *(_BYTE *)(v117 + 48) = v136;
      *(_BYTE *)(v117 + 49) = v137;
    }
    else if (*((_QWORD *)&v952 + v114) || *((_DWORD *)&v968 + v114))
    {
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using ModKneserNey for ", 23);
        v138 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"-grams", 6);
      }
      v139 = *((double *)&v990 + v114);
      v117 = operator new();
      v140 = BYTE4(v256);
      v141 = v256;
      *(_BYTE *)(v117 + 8) = 0;
      *(_DWORD *)(v117 + 12) = 0;
      *(_QWORD *)(v117 + 16) = v100;
      *(_BYTE *)(v117 + 24) = 0;
      *(_QWORD *)(v117 + 32) = v139;
      *(_QWORD *)(v117 + 40) = 0;
      *(_BYTE *)(v117 + 48) = v140;
      *(_BYTE *)(v117 + 49) = v141;
      *(_QWORD *)v117 = &unk_1E5D15F78;
      *(_QWORD *)(v117 + 56) = 0;
      *(_QWORD *)(v117 + 64) = 0;
    }
    else
    {
      if (!*((_QWORD *)&v957 + v114) && !*(_BYTE *)v6)
        goto LABEL_312;
      if (v266)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"using GoodTuring for ", 21);
        v144 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"-grams", 6);
      }
      LODWORD(v218[0].__locale_) = *((double *)&v990 + v114);
      std::make_unique[abi:ne180100]<GoodTuring,unsigned int,unsigned int &>((unsigned int *)v218, (unsigned int *)&v987 + v114, &v221.__locale_);
      v117 = (uint64_t)v221.__locale_;
    }
LABEL_277:
    if (!v266)
      break;
    if (v117)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(_QWORD *)(*v100 - 24)));
      v120 = std::locale::use_facet(&v221, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
      std::locale::~locale(&v221);
      std::ostream::put();
      std::ostream::flush();
      v121 = v266;
      goto LABEL_282;
    }
LABEL_312:
    v98 = HIDWORD(v236);
    v99 = v230;
    if (!HIDWORD(v236) && !v230)
    {
      v101 = (v101 + 1);
      if (v101 <= v267)
        continue;
    }
    goto LABEL_341;
  }
  if (!v117)
    goto LABEL_312;
  v121 = 0;
LABEL_282:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v121);
  if ((_DWORD)v962 || *((_DWORD *)&v962 + v114))
    *(_BYTE *)(v117 + 24) = 1;
  v122 = (const char *)*((_QWORD *)&v952 + v114);
  if (v122 && *(_BYTE *)v6)
  {
    File::File((File *)&v221, v122, "r", 1);
    if (!(*(unsigned int (**)(uint64_t, std::locale *))(*(_QWORD *)v117 + 88))(v117, &v221))
    {
      v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error in reading discount parameter file ", 41);
      v157 = (const char *)*((_QWORD *)&v952 + v114);
      v158 = strlen(v157);
      v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v157, v158);
      std::ios_base::getloc((const std::ios_base *)((char *)v159 + *(_QWORD *)(*v159 - 24)));
      v160 = std::locale::use_facet(v218, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v160->__vftable[2].~facet_0)(v160, 10);
      std::locale::~locale(v218);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_406;
    }
LABEL_292:
    File::~File((File *)&v221);
LABEL_310:
    v132 = v223[(v101 - 1)];
    v223[(v101 - 1)] = v117;
    if (v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
    goto LABEL_312;
  }
  v123 = (const char *)*((_QWORD *)&v957 + v114);
  if (!v123 || !*(_BYTE *)v6)
  {
    v124 = 104;
    if (v239)
    {
      v125 = v58;
    }
    else
    {
      v124 = 96;
      v125 = v226;
    }
    if (!(*(unsigned int (**)(uint64_t, NgramStats *, uint64_t))(*(_QWORD *)v117 + v124))(v117, v125, v101))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error in discount estimator for order ", 38);
      v183 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v183 + *(_QWORD *)(*v183 - 24)));
      v184 = std::locale::use_facet(&v221, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v184->__vftable[2].~facet_0)(v184, 10);
      std::locale::~locale(&v221);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_407;
    }
    v126 = (const char *)*((_QWORD *)&v952 + v114);
    if (v126 || (v126 = (const char *)*((_QWORD *)&v957 + v114)) != 0)
    {
      File::File((File *)&v221, v126, "w", 1);
      (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)v117 + 80))(v117, &v221);
      File::~File((File *)&v221);
      v217 = 1;
    }
    goto LABEL_310;
  }
  File::File((File *)&v221, v123, "r", 1);
  if ((*(unsigned int (**)(uint64_t, std::locale *))(*(_QWORD *)v117 + 88))(v117, &v221))
    goto LABEL_292;
  v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error in reading discount parameter file ", 41);
  v186 = (const char *)*((_QWORD *)&v957 + v114);
  v187 = strlen(v186);
  v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)v186, v187);
  std::ios_base::getloc((const std::ios_base *)((char *)v188 + *(_QWORD *)(*v188 - 24)));
  v189 = std::locale::use_facet(v218, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v189->__vftable[2].~facet_0)(v189, 10);
  std::locale::~locale(v218);
  std::ostream::put();
  std::ostream::flush();
LABEL_406:
  File::~File((File *)&v221);
LABEL_407:
  (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
LABEL_490:
  v34 = 1;
LABEL_491:
  v221.__locale_ = (std::locale::__imp *)&v223;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
LABEL_492:
  if (v58)
    (*(void (**)(LMStats *))(*(_QWORD *)v58 + 8))(v58);
  v209 = v226;
  v226 = 0;
  if (v209)
    (*(void (**)(NgramStats *))(*(_QWORD *)v209 + 8))(v209);
  if (v53)
    (*(void (**)(SubVocab *))(*(_QWORD *)v53 + 8))(v53);
LABEL_62:
  if (v270)
  {
    __p = v270;
    operator delete(v270);
  }
  return v34;
}

void sub_1AE06CB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  unint64_t v18;
  void *v19;

  STACK[0x658] = (unint64_t)&STACK[0x488];
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x658]);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v18 = STACK[0x4F0];
  STACK[0x4F0] = 0;
  if (v18)
    (*(void (**)(unint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a16)
    (*(void (**)(void))(*(_QWORD *)a16 + 8))();
  v19 = (void *)STACK[0x640];
  if (STACK[0x640])
  {
    STACK[0x648] = (unint64_t)v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

Vocab *std::make_unique[abi:ne180100]<Vocab>@<X0>(Vocab **a1@<X8>)
{
  Vocab *v2;
  Vocab *result;

  v2 = (Vocab *)operator new();
  result = Vocab::Vocab(v2, 0, 0xFFFFFFFE);
  *a1 = v2;
  return result;
}

void sub_1AE06CFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40CDF50957);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<NgramStats,Vocab &,unsigned int>(Vocab *a1@<X0>, int *a2@<X1>, LMStats **a3@<X8>)
{
  LMStats *v6;

  v6 = (LMStats *)operator new();
  NgramCounts<unsigned long>::NgramCounts(v6, a1, *a2);
  *(_QWORD *)v6 = &unk_1E5D15880;
  *a3 = v6;
}

void sub_1AE06D040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40C5E9EE53);
  _Unwind_Resume(a1);
}

GoodTuring *std::make_unique[abi:ne180100]<GoodTuring,unsigned int,unsigned int &>@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, GoodTuring **a3@<X8>)
{
  GoodTuring *v6;
  GoodTuring *result;

  v6 = (GoodTuring *)operator new();
  result = GoodTuring::GoodTuring(v6, *a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1AE06D0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40D94D9244);
  _Unwind_Resume(a1);
}

NgramCountLM *std::make_unique[abi:ne180100]<NgramCountLM,Vocab &,unsigned int &>@<X0>(Vocab *a1@<X0>, unsigned int *a2@<X1>, NgramCountLM **a3@<X8>)
{
  NgramCountLM *v6;
  NgramCountLM *result;

  v6 = (NgramCountLM *)operator new();
  result = NgramCountLM::NgramCountLM(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1AE06D138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40D9882F60);
  _Unwind_Resume(a1);
}

MEModel *std::make_unique[abi:ne180100]<MEModel,Vocab &,unsigned int &>@<X0>(Vocab *a1@<X0>, unsigned int *a2@<X1>, MEModel **a3@<X8>)
{
  MEModel *v6;
  MEModel *result;

  v6 = (MEModel *)operator new();
  result = MEModel::MEModel(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1AE06D1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C401E74D383);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<VarNgram,Vocab &,unsigned int &,double &>(Vocab *a1@<X0>, int *a2@<X1>, double *a3@<X2>, VarNgram **a4@<X8>)
{
  VarNgram *v8;

  v8 = (VarNgram *)operator new();
  VarNgram::VarNgram(v8, a1, *a2, *a3);
  *a4 = v8;
}

void sub_1AE06D240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C400E37FE2BLL);
  _Unwind_Resume(a1);
}

SkipNgram *std::make_unique[abi:ne180100]<SkipNgram,Vocab &,unsigned int &>@<X0>(Vocab *a1@<X0>, unsigned int *a2@<X1>, SkipNgram **a3@<X8>)
{
  SkipNgram *v6;
  SkipNgram *result;

  v6 = (SkipNgram *)operator new();
  result = SkipNgram::SkipNgram(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1AE06D2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4011EF2AA1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<StopNgram,Vocab &,SubVocab &,unsigned int &>(Vocab *a1@<X0>, SubVocab *a2@<X1>, int *a3@<X2>, StopNgram **a4@<X8>)
{
  StopNgram *v8;

  v8 = (StopNgram *)operator new();
  StopNgram::StopNgram(v8, a1, a2, *a3);
  *a4 = v8;
}

void sub_1AE06D348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40BDF3DC14);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<TaggedNgram,TaggedVocab &,unsigned int &>(TaggedVocab *a1@<X0>, int *a2@<X1>, TaggedNgram **a3@<X8>)
{
  TaggedNgram *v6;

  v6 = (TaggedNgram *)operator new();
  TaggedNgram::TaggedNgram(v6, a1, *a2);
  *a3 = v6;
}

void sub_1AE06D3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40BDF3DC14);
  _Unwind_Resume(a1);
}

Ngram *std::make_unique[abi:ne180100]<Ngram,Vocab &,unsigned int &>@<X0>(Vocab *a1@<X0>, unsigned int *a2@<X1>, Ngram **a3@<X8>)
{
  Ngram *v6;
  Ngram *result;

  v6 = (Ngram *)operator new();
  result = Ngram::Ngram(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1AE06D440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40BB79CA08);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<Discount>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AE06D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void WittenBell::~WittenBell(WittenBell *this)
{
  JUMPOUT(0x1AF44D190);
}

double WittenBell::discount(WittenBell *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  double result;

  if (!a2)
    return 1.0;
  result = 0.0;
  if (*((double *)this + 4) <= (double)a2)
    return (double)a3 / (double)(a4 + a3);
  return result;
}

double WittenBell::lowerOrderWeight(WittenBell *this, uint64_t a2, unint64_t a3)
{
  return (double)a3 / (double)(a3 + a2);
}

uint64_t WittenBell::nodiscount(WittenBell *this)
{
  return 0;
}

void ConstDiscount::~ConstDiscount(ConstDiscount *this)
{
  JUMPOUT(0x1AF44D190);
}

double ConstDiscount::discount(ConstDiscount *this, unint64_t a2)
{
  double result;

  if (!a2)
    return 1.0;
  result = 0.0;
  if (*((double *)this + 5) <= (double)a2)
    return ((double)a2 - *((double *)this + 4)) / (double)a2;
  return result;
}

double ConstDiscount::lowerOrderWeight(ConstDiscount *this, unint64_t a2, unint64_t a3)
{
  return *((double *)this + 4) * (double)a3 / (double)a2;
}

BOOL ConstDiscount::nodiscount(ConstDiscount *this)
{
  return *((double *)this + 5) <= 1.0 && *((double *)this + 4) == 0.0;
}

void AddSmooth::~AddSmooth(AddSmooth *this)
{
  JUMPOUT(0x1AF44D190);
}

double AddSmooth::discount(AddSmooth *this, unint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7)
{
  double result;

  if (!a2)
    return 1.0;
  result = 0.0;
  if (*((double *)this + 5) <= (double)a2)
  {
    LODWORD(a7) = *((_DWORD *)this + 12);
    return (*((double *)this + 4) / (double)a2 + 1.0)
         / (*((double *)this + 4) * (double)*(unint64_t *)&a7 / (double)a3 + 1.0);
  }
  return result;
}

double AddSmooth::discount(AddSmooth *this, double a2, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = 1.0;
  if (a2 > 0.0)
  {
    v6 = 0.0;
    if (*((double *)this + 5) <= a2)
    {
      LODWORD(a6) = *((_DWORD *)this + 12);
      return (*((double *)this + 4) / a2 + 1.0) / (*((double *)this + 4) * (double)*(unint64_t *)&a6 / a3 + 1.0);
    }
  }
  return v6;
}

BOOL AddSmooth::nodiscount(AddSmooth *this)
{
  return *((double *)this + 5) <= 1.0 && *((double *)this + 4) == 0.0;
}

uint64_t AddSmooth::estimate(AddSmooth *this, Discount **a2)
{
  *((_DWORD *)this + 12) = Discount::vocabSize(a2[3], (Vocab *)a2);
  return 1;
}

uint64_t AddSmooth::estimate(uint64_t a1, Discount **a2)
{
  *(_DWORD *)(a1 + 48) = Discount::vocabSize(a2[3], (Vocab *)a2);
  return 1;
}

void quasar::ParseMultiwordInflectionFromPTree(quasar *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t String;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  std::string *v18;
  int v19;
  void *__p[2];
  std::string::size_type v21;
  _BYTE __v[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (!quasar::PTree::isList(this))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "Error parsing multiword inflections: expected list of words.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v5 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    String = quasar::PTree::getString((quasar::PTree *)(v5 + 24));
    quasar::toLower(String, (uint64_t)__p);
    end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      *(_QWORD *)&__v[32] = &a2->__end_cap_;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a2->__end_cap_, v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      *(_QWORD *)__v = v15;
      *(_QWORD *)&__v[8] = v16;
      *(_QWORD *)&__v[24] = &v15[24 * v14];
      v17 = *(_OWORD *)__p;
      *((_QWORD *)v16 + 2) = v21;
      *(_OWORD *)v16 = v17;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_QWORD *)&__v[16] = v16 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(a2, (std::__split_buffer<std::string> *)__v);
      v18 = a2->__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      v19 = SHIBYTE(v21);
      a2->__end_ = v18;
      if (v19 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      a2->__end_ = end + 1;
    }
  }
}

void sub_1AE06D8F4(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__split_buffer<std::wstring> *a8, uint64_t a9, ...)
{
  va_list __pa;

  va_start(__pa, a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(a1);
}

void quasar::parseMultiWordInflection(quasar *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<std::string> v8;
  _BYTE v9[272];
  std::vector<std::string> *v10;

  v5 = quasar::PTree::end(this);
  if (v5 - quasar::PTree::begin(this) != 176)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "Error parsing multiword inflection, too many inflection alternatives.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  v6 = quasar::PTree::begin(this);
  quasar::ParseMultiwordInflectionFromPTree((quasar *)(v6 + 24), (std::vector<std::string> *)v9);
  v7 = quasar::PTree::begin(this);
  quasar::ParseMultiwordInflectionFromPTree((quasar *)(v7 + 112), &v8);
  std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(a2, (__int128 **)v9, (__int128 **)&v8);
  v10 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v8.__begin_ = (std::vector<std::string>::pointer)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_1AE06DA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

quasar::PTree *quasar::GenderInflector::GenderInflector(quasar::PTree *a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  quasar::PTree *Child;
  uint64_t v7;
  uint64_t i;
  quasar *v9;
  std::string v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  std::string v18;
  __int128 v19;
  uint64_t v20;
  std::string *v21;

  quasar::PTree::PTree(a1);
  v4[9] = 0;
  v4[8] = v4 + 9;
  v5 = (uint64_t **)(v4 + 8);
  v4[10] = 0;
  quasar::PTree::readJsonFromFile((uint64_t)v4, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)MULTIWORD_KEY);
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a1, (__int128 *)__p);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v7 = quasar::PTree::begin(Child);
  for (i = quasar::PTree::end(Child); v7 != i; v7 = (uint64_t)v9 + 64)
  {
    quasar::toLower(v7, (uint64_t)v14);
    v9 = (quasar *)(v7 + 24);
    quasar::parseMultiWordInflection(v9, &v11);
    *(_OWORD *)__p = *(_OWORD *)v14;
    v17 = v15;
    v14[1] = 0;
    v15 = 0;
    v14[0] = 0;
    v18 = v11;
    memset(&v11, 0, sizeof(v11));
    v19 = v12;
    v20 = v13;
    v13 = 0;
    v12 = 0uLL;
    std::__tree<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>>(v5, (const void **)__p, (__int128 *)__p);
    v21 = (std::string *)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    v21 = &v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    v21 = (std::string *)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    v21 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
  }
  return a1;
}

void sub_1AE06DC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  quasar::PTree *v27;
  uint64_t v28;

  std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(v28, *((_QWORD **)v27 + 9));
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>::~pair(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *quasar::GenderVerifierOptions::options@<X0>(quasar::GenderVerifierOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  *a2 = result;
  return result;
}

uint64_t quasar::GenderInflector::isInflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  unsigned __int8 v19;

  quasar::toLower(a3, (uint64_t)v18);
  quasar::toLower(a2, (uint64_t)__p);
  quasar::GenderInflector::getInflections(a1, (uint64_t)__p, &v16);
  if (v15 < 0)
    operator delete(__p[0]);
  v5 = v16;
  v6 = v17;
  if (v16 == v17)
  {
LABEL_22:
    __p[0] = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v12 = 0;
    goto LABEL_24;
  }
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (unint64_t)v18[1];
  if ((v19 & 0x80u) == 0)
    v8 = v18;
  else
    v8 = (void **)v18[0];
  while (1)
  {
    v9 = *(unsigned __int8 *)(v5 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (void *)*(unsigned __int8 *)(v5 + 23);
    else
      v10 = *(void **)(v5 + 8);
    if (v10 != (void *)v7)
      goto LABEL_21;
    if ((v9 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v5 + 23))
      goto LABEL_23;
    v11 = 0;
    while (*(unsigned __int8 *)(v5 + v11) == *((unsigned __int8 *)v8 + v11))
    {
      if (v9 == ++v11)
        goto LABEL_23;
    }
LABEL_21:
    v5 += 24;
    if (v5 == v6)
      goto LABEL_22;
  }
  if (memcmp(*(const void **)v5, v8, *(_QWORD *)(v5 + 8)))
    goto LABEL_21;
LABEL_23:
  __p[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v12 = 1;
LABEL_24:
  if ((char)v19 < 0)
    operator delete(v18[0]);
  return v12;
}

void sub_1AE06DE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void quasar::GenderInflector::getInflections(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Child;
  uint64_t ChildOptional;
  quasar::PTree *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *String;
  unint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)INFLECTIONS_KEY);
  Child = quasar::PTree::getChild(a1, (__int128 *)__p);
  ChildOptional = quasar::PTree::getChildOptional(Child, a2);
  v8 = (quasar::PTree *)ChildOptional;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  v9 = quasar::PTree::begin(v8);
  v10 = quasar::PTree::end(v8);
  while (v9 != v10)
  {
    String = (__int128 *)quasar::PTree::getString((quasar::PTree *)(v9 + 24));
    v12 = a3[1];
    if (v12 >= a3[2])
    {
      v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, String);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, String);
      v13 = v12 + 24;
    }
    a3[1] = v13;
    v9 += 88;
  }
}

void sub_1AE06DF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::GenderInflector::getMultiwordInflections(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  quasar::toLower(a2, (uint64_t)__p);
  v3 = a1 + 64;
  if (std::__tree<std::string>::__count_unique<std::string>(v3, (const void **)__p))
    v4 = std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(v3, (const void **)__p);
  else
    v4 = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1AE06E00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *quasar::GenderVerifierBlock::init(quasar::GenderVerifierBlock *this)
{
  _QWORD *v2;
  quasar::PTree *v3;
  __int128 *v4;
  quasar::PTree *v5;
  const std::string *v6;

  v2 = (_QWORD *)((char *)this + 24);
  v3 = (quasar::PTree *)operator new();
  v4 = (__int128 *)quasar::OptionValue<std::string>::value(v2);
  quasar::GenderInflector::GenderInflector(v3, v4);
  v5 = (quasar::PTree *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v3;
  if (v5)
    std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100]((uint64_t)this + 344, v5);
  v6 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 23);
  return std::string::operator=((std::string *)((char *)this + 352), v6);
}

void sub_1AE06E0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40837A5010);
  _Unwind_Resume(a1);
}

std::string *`virtual thunk to'quasar::GenderVerifierBlock::init(quasar::GenderVerifierBlock *this)
{
  return quasar::GenderVerifierBlock::init((quasar::GenderVerifierBlock *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::GenderVerifierBlock::tokenize(char *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *begin;
  std::vector<std::string>::pointer end;
  std::string::size_type size;
  std::vector<std::string> v6;
  uint64_t *v7;
  std::string v8;

  quasar::getWordBoundarySeparatedString(a1, &v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  begin = (__int128 *)v6.__begin_;
  end = v6.__end_;
  v7 = a2;
  while (begin != (__int128 *)end)
  {
    quasar::copyAndTrim((uint64_t)begin, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v8.__r_.__value_.__l.__size_;
      operator delete(v8.__r_.__value_.__l.__data_);
      if (!size)
        goto LABEL_8;
LABEL_7:
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v7, begin);
      goto LABEL_8;
    }
    if (*((_BYTE *)&v8.__r_.__value_.__s + 23))
      goto LABEL_7;
LABEL_8:
    begin = (__int128 *)((char *)begin + 24);
  }
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_1AE06E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::GenderVerifierBlock::checkMultiWordMatch(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  void *__p[2];
  unsigned __int8 v22;

  v3 = *a2;
  if (a2[1] == *a2)
    return 1;
  v6 = 0;
  v7 = a3;
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v6 + v7)
  {
    v8 = (unsigned __int8 *)(v3 + 24 * v6);
    quasar::toLower(*a1 + 24 * (v6 + v7), (uint64_t)__p);
    v9 = v8[23];
    if ((v9 & 0x80u) == 0)
      v10 = (void *)v8[23];
    else
      v10 = (void *)*((_QWORD *)v8 + 1);
    v11 = v22;
    v12 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v11 = (unint64_t)__p[1];
    if (v10 != (void *)v11)
    {
      v18 = 1;
      if (((char)v22 & 0x80000000) == 0)
        goto LABEL_27;
LABEL_26:
      operator delete(__p[0]);
      goto LABEL_27;
    }
    if ((v22 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v9 & 0x80) != 0)
    {
      v18 = memcmp(*(const void **)v8, v13, *((_QWORD *)v8 + 1)) != 0;
      goto LABEL_25;
    }
    if (v8[23])
    {
      v14 = v9 - 1;
      do
      {
        v16 = *v8++;
        v15 = v16;
        v17 = *(unsigned __int8 *)v13;
        v13 = (void **)((char *)v13 + 1);
        v18 = v15 != v17;
      }
      while (v15 == v17 && v14-- != 0);
LABEL_25:
      if ((v12 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
    v18 = 0;
    if ((char)v22 < 0)
      goto LABEL_26;
LABEL_27:
    if (v18)
      return 0;
    ++v6;
    v3 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v6)
      return 1;
  }
  return 0;
}

uint64_t quasar::GenderVerifierBlock::checkInflection(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t MultiwordInflections;
  char v19;
  _QWORD *v21;
  int v22;
  const void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void **v47[2];
  void **v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v9)
        goto LABEL_32;
      v10 = v4 + 24 * v7;
      v11 = *a2 + 24 * v9;
      v12 = *(unsigned __int8 *)(v10 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = *(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(_QWORD *)(v10 + 8);
      v14 = *(unsigned __int8 *)(v11 + 23);
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(v11 + 8);
      if (v13 == v14)
      {
        if (v15 >= 0)
          v16 = (unsigned __int8 *)(*a2 + 24 * v9);
        else
          v16 = *(unsigned __int8 **)v11;
        if ((v12 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
            goto LABEL_27;
        }
        else
        {
          if (!*(_BYTE *)(v10 + 23))
            goto LABEL_27;
          v17 = (unsigned __int8 *)v10;
          while (*v17 == *v16)
          {
            ++v17;
            ++v16;
            if (!--v12)
              goto LABEL_27;
          }
        }
      }
      MultiwordInflections = quasar::GenderInflector::getMultiwordInflections(a3, v10);
      if (MultiwordInflections)
      {
        v30 = 0uLL;
        *(_QWORD *)&v31 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v47[0] = (void **)&v30;
        v47[1] = (void **)&v48;
        std::tuple<std::vector<std::string> &,std::vector<std::string> &>::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::wstring> **)v47, MultiwordInflections);
        if (!quasar::GenderVerifierBlock::checkMultiWordMatch(a1, (uint64_t *)&v30, v8))
          goto LABEL_24;
        if (quasar::GenderVerifierBlock::checkMultiWordMatch(a2, (uint64_t *)&v48, v9))
        {
          v19 = 0;
          v8 -= 1431655765 * ((*((_QWORD *)&v30 + 1) - (_QWORD)v30) >> 3);
          v9 -= 1431655765 * ((unint64_t)(v49 - (_QWORD)v48) >> 3);
        }
        else
        {
LABEL_24:
          v19 = 1;
        }
        v47[0] = (void **)&v48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v47);
        v48 = (void **)&v30;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
        if ((v19 & 1) == 0)
          goto LABEL_28;
      }
      if ((quasar::GenderInflector::isInflection(a3, v10, v11) & 1) == 0)
      {
        if (quasar::gLogLevel < 5)
          return 0;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Invalid inflection: ", 20);
        v22 = *(char *)(v10 + 23);
        if (v22 >= 0)
          v23 = (const void *)v10;
        else
          v23 = *(const void **)v10;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v10 + 23);
        else
          v24 = *(_QWORD *)(v10 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" -> ", 4);
        v27 = *(char *)(v11 + 23);
        if (v27 >= 0)
          v28 = v11;
        else
          v28 = *(_QWORD *)v11;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v11 + 23);
        else
          v29 = *(_QWORD *)(v11 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        goto LABEL_34;
      }
LABEL_27:
      ++v8;
      ++v9;
LABEL_28:
      v7 = v8;
      v4 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v8)
        goto LABEL_31;
    }
  }
  v9 = 0;
LABEL_31:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v9)
    return 1;
LABEL_32:
  if (quasar::gLogLevel >= 5)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Unmatched words in one of the alternatives", 42);
LABEL_34:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
  }
  return 0;
}

void sub_1AE06E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

std::vector<std::wstring> **std::tuple<std::vector<std::string> &,std::vector<std::string> &>::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,0>(std::vector<std::wstring> **a1, uint64_t a2)
{
  std::vector<std::wstring> *v4;
  std::vector<std::wstring> *v5;

  v4 = *a1;
  if (v4 != (std::vector<std::wstring> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v5 = a1[1];
  if (v5 != (std::vector<std::wstring> *)(a2 + 24))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

void quasar::removeTag(std::string *__str@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3;
  std::string *v4;
  char v5;

  if (*(char *)(a2 + 23) >= 0)
    v3 = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  v4 = std::string::basic_string(a3, __str, v3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  quasar::trim(v4);
}

void sub_1AE06E74C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::getMaleFemaleSentences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  void *v21[2];
  char v22;
  std::string v23;
  void *v24[2];
  char v25;
  std::string v26;
  void *__p[2];
  _QWORD v28[4];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)MALE_TAG);
  v6 = quasar::startsWith((unsigned __int8 *)a1, (unsigned __int8 *)__p);
  if (SHIBYTE(v28[0]) < 0)
    operator delete(__p[0]);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)FEMALE_TAG);
    v9 = quasar::startsWith((unsigned __int8 *)a1, (unsigned __int8 *)__p);
    v10 = v9;
    if (SHIBYTE(v28[0]) < 0)
    {
      operator delete(__p[0]);
      if (v10)
      {
LABEL_9:
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)MALE_TAG);
        v11 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)__p);
        v12 = v11;
        if (SHIBYTE(v28[0]) < 0)
        {
          operator delete(__p[0]);
          if (v12)
            goto LABEL_11;
        }
        else if (v11)
        {
LABEL_11:
          std::string::basic_string[abi:ne180100]<0>(v24, (char *)MALE_TAG);
          quasar::removeTag((std::string *)a2, (uint64_t)v24, &v26);
          std::string::basic_string[abi:ne180100]<0>(v21, (char *)FEMALE_TAG);
          quasar::removeTag((std::string *)a1, (uint64_t)v21, &v23);
          goto LABEL_12;
        }
        if (quasar::gLogLevel >= 5)
        {
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          memset(v28, 0, sizeof(v28));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected male sentence, got: '", 30);
          v19 = *(char *)(a2 + 23);
          if (v19 >= 0)
            v16 = a2;
          else
            v16 = *(_QWORD *)a2;
          if (v19 >= 0)
            v17 = *(unsigned __int8 *)(a2 + 23);
          else
            v17 = *(_QWORD *)(a2 + 8);
          goto LABEL_49;
        }
        return 0;
      }
    }
    else if (v9)
    {
      goto LABEL_9;
    }
    if (quasar::gLogLevel >= 5)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      memset(v28, 0, sizeof(v28));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected female sentence, got: '", 32);
      v18 = *(char *)(a1 + 23);
      if (v18 >= 0)
        v16 = a1;
      else
        v16 = *(_QWORD *)a1;
      if (v18 >= 0)
        v17 = *(unsigned __int8 *)(a1 + 23);
      else
        v17 = *(_QWORD *)(a1 + 8);
      goto LABEL_49;
    }
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)FEMALE_TAG);
  v7 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)__p);
  v8 = v7;
  if (SHIBYTE(v28[0]) < 0)
  {
    operator delete(__p[0]);
    if (v8)
      goto LABEL_6;
LABEL_26:
    if (quasar::gLogLevel >= 5)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      memset(v28, 0, sizeof(v28));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected female sentence, got: '", 32);
      v15 = *(char *)(a2 + 23);
      if (v15 >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a2 + 23);
      else
        v17 = *(_QWORD *)(a2 + 8);
LABEL_49:
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"'", 1);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      return 0;
    }
    return 0;
  }
  if (!v7)
    goto LABEL_26;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)MALE_TAG);
  quasar::removeTag((std::string *)a1, (uint64_t)v24, &v26);
  std::string::basic_string[abi:ne180100]<0>(v21, (char *)FEMALE_TAG);
  quasar::removeTag((std::string *)a2, (uint64_t)v21, &v23);
LABEL_12:
  *(_OWORD *)__p = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  v28[0] = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  memset(&v26, 0, sizeof(v26));
  *(std::string *)&v28[1] = v23;
  memset(&v23, 0, sizeof(v23));
  std::pair<std::string,std::string>::operator=[abi:ne180100](a3, (__int128 *)__p);
  if (SHIBYTE(v28[3]) < 0)
    operator delete((void *)v28[1]);
  if (SHIBYTE(v28[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  return 1;
}

void sub_1AE06EB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::GenderVerifierBlock::isValidInflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void **v6[3];
  uint64_t v7[3];
  std::string v8;
  std::string v9;
  _BYTE __str[32];
  __int128 v11;
  void ***v12;

  v11 = 0u;
  memset(__str, 0, sizeof(__str));
  if ((quasar::getMaleFemaleSentences(a2, a3, (uint64_t)__str) & 1) != 0)
  {
    memset(&v9, 0, sizeof(v9));
    memset(&v8, 0, sizeof(v8));
    std::string::operator=(&v9, (const std::string *)__str);
    std::string::operator=(&v8, (const std::string *)&__str[24]);
    quasar::GenderVerifierBlock::tokenize((char *)&v9, v7);
    quasar::GenderVerifierBlock::tokenize((char *)&v8, (uint64_t *)v6);
    v4 = quasar::GenderVerifierBlock::checkInflection(v7, v6, *(_QWORD *)(a1 + 344));
    v12 = v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    v6[0] = (void **)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(*(void **)&__str[24]);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  return v4;
}

void sub_1AE06ECE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 40) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::pair<std::string,std::string>::~pair((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL quasar::startsWithTag(unsigned __int8 *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, (char *)MALE_TAG);
  if (quasar::startsWith(a1, (unsigned __int8 *)v6))
  {
    v2 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)FEMALE_TAG);
    v2 = quasar::startsWith(a1, (unsigned __int8 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_1AE06EDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::addGenderMetaInfo(quasar::MetaInfo::Impl **a1, uint64_t a2)
{
  _BYTE v4[64];
  void *__p[2];
  char v6;
  _BYTE v7[64];

  quasar::PTree::PTree((quasar::PTree *)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)GENDER_META);
  quasar::PTree::PTree(v4, a2);
  quasar::PTree::putChild((uint64_t)v7, (uint64_t)__p, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0)
    operator delete(__p[0]);
  quasar::MetaInfo::update(a1, (const quasar::PTree *)v7);
  quasar::PTree::~PTree((quasar::PTree *)v7);
}

void sub_1AE06EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  quasar::PTree::~PTree((quasar::PTree *)(v23 - 80));
  _Unwind_Resume(a1);
}

void quasar::GenderVerifierBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  quasar::TranslationPhraseInternal *v9;
  quasar::TranslationPhraseInternal *v10;
  int isValidInflection;
  __int128 v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *i;
  quasar::TranslationPhraseInternal *v20;
  quasar::TranslationPhraseInternal *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *m;
  quasar::TranslationPhraseInternal *v25;
  quasar::TranslationPhraseInternal *v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *j;
  __int128 v30;
  __n128 *v31;
  __n128 *v32;
  __n128 *k;
  std::string v35;
  std::string v36;
  void *__p[2];
  char v38;
  std::string v39[5];
  __int128 *v40;
  __n128 *v41;
  uint64_t v42;
  quasar::MetaInfo::Impl *v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46[5];
  __int128 *v47;
  __n128 *v48;
  _BYTE v49[40];
  quasar::MetaInfo::Impl *v50;
  quasar::TranslationPhraseInternal *v51;
  quasar::TranslationPhraseInternal *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[9];

  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
  {
    if (quasar::gLogLevel >= 5)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"No hypotheses, sending empty list.", 34);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
    v4 = *a3;
    v5 = a3[1];
  }
  v52 = 0;
  v51 = 0;
  v53 = 0;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v46, (const quasar::TranslationPhraseInternal *)(v4 + 200 * v6));
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v44, (quasar::TranslationPhraseInternal *)v46);
      if (!quasar::startsWithTag((unsigned __int8 *)v44))
      {
        v9 = v52;
        if ((unint64_t)v52 >= v53)
        {
          v10 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v51, (const quasar::TranslationPhraseInternal *)v46);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v52, (const quasar::TranslationPhraseInternal *)v46);
          v10 = (quasar::TranslationPhraseInternal *)((char *)v9 + 200);
        }
        v52 = v10;
        ++v7;
        if (quasar::gLogLevel >= 5)
        {
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v54 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Non-gendered sentence, keeping.", 31);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
        }
        goto LABEL_69;
      }
      if ((v8 & 1) == 0)
        break;
      v7 += 2;
      if (quasar::gLogLevel >= 5)
      {
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Already found higher scoring gender alternatives, ignoring new alternatives.", 76);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
      }
      v8 = 1;
LABEL_69:
      if ((char)v45 < 0)
        operator delete(v44[0]);
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v46);
      v6 = v7;
      v4 = *a3;
      if (0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3) <= v7)
        goto LABEL_72;
    }
    if (0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3) <= v7 + 1)
    {
      if (quasar::gLogLevel >= 2)
      {
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Last sentence in NBest list is an unpaired gender alternative, ignoring.", 72);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v54);
      }
      v8 = 0;
      goto LABEL_69;
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal(v39, (const quasar::TranslationPhraseInternal *)(*a3 + 200 * (v7 + 1)));
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)__p, (quasar::TranslationPhraseInternal *)v39);
    if (!quasar::startsWithTag((unsigned __int8 *)__p))
    {
      if (quasar::gLogLevel >= 2)
      {
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Expected gendered sentence, got: '", 34);
        if ((v45 & 0x80u) == 0)
          v14 = v44;
        else
          v14 = (void **)v44[0];
        if ((v45 & 0x80u) == 0)
          v15 = v45;
        else
          v15 = (uint64_t)v44[1];
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'", 1);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v54);
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)v71, (__n128 *)((char *)v47 + 136), v48, (uint64_t)v47);
      v18 = v17;
      for (i = v48;
            i != v18;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v49, (uint64_t)i))
      {
        i = (__n128 *)((char *)i - 136);
      }
      v48 = v18;
      v20 = v52;
      if ((unint64_t)v52 >= v53)
      {
        v21 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v51, (const quasar::TranslationPhraseInternal *)v46);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v52, (const quasar::TranslationPhraseInternal *)v46);
        v21 = (quasar::TranslationPhraseInternal *)((char *)v20 + 200);
      }
      v8 = 0;
      v52 = v21;
      ++v7;
      goto LABEL_66;
    }
    isValidInflection = quasar::GenderVerifierBlock::isValidInflection((uint64_t)a1, (uint64_t)v44, (uint64_t)__p);
    v8 = isValidInflection;
    if (isValidInflection)
    {
      if (*((char *)v47 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
      }
      else
      {
        v12 = *v47;
        v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v12;
      }
      quasar::addGenderMetaInfo(&v50, (uint64_t)&v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)v71, (__n128 *)((char *)v47 + 136), v48, (uint64_t)v47);
      v28 = v27;
      for (j = v48;
            j != v28;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v49, (uint64_t)j))
      {
        j = (__n128 *)((char *)j - 136);
      }
      v48 = v28;
      if (*((char *)v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
      }
      else
      {
        v30 = *v40;
        v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v30;
      }
      quasar::addGenderMetaInfo(&v43, (uint64_t)&v35);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)v71, (__n128 *)((char *)v40 + 136), v41, (uint64_t)v40);
      v32 = v31;
      for (k = v41;
            k != v32;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)&v42, (uint64_t)k))
      {
        k = (__n128 *)((char *)k - 136);
      }
      v41 = v32;
      std::vector<quasar::TranslationPhraseInternal>::insert((uint64_t *)&v51, (std::string *)v51, (quasar::TranslationPhraseInternal *)v39);
      std::vector<quasar::TranslationPhraseInternal>::insert((uint64_t *)&v51, (std::string *)v51, (quasar::TranslationPhraseInternal *)v46);
      if (quasar::gLogLevel < 5)
        goto LABEL_65;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Found valid gender alternatives.", 32);
    }
    else
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)v71, (__n128 *)((char *)v47 + 136), v48, (uint64_t)v47);
      v23 = v22;
      for (m = v48;
            m != v23;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v49, (uint64_t)m))
      {
        m = (__n128 *)((char *)m - 136);
      }
      v48 = v23;
      v25 = v52;
      if ((unint64_t)v52 >= v53)
      {
        v26 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v51, (const quasar::TranslationPhraseInternal *)v46);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v52, (const quasar::TranslationPhraseInternal *)v46);
        v26 = (quasar::TranslationPhraseInternal *)((char *)v25 + 200);
      }
      v52 = v26;
      if (quasar::gLogLevel < 5)
        goto LABEL_65;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Non matching gender alternatives, ignoring the second alternative.", 66);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
LABEL_65:
    v7 += 2;
LABEL_66:
    if (v38 < 0)
      operator delete(__p[0]);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v39);
    goto LABEL_69;
  }
LABEL_72:
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)&v51, 0);
  *(_QWORD *)&v54 = &v51;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_1AE06F5A8(_Unwind_Exception *a1)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x230]);
  _Unwind_Resume(a1);
}

quasar::TranslationPhraseInternal *std::vector<quasar::TranslationPhraseInternal>::insert(uint64_t *a1, std::string *this, quasar::TranslationPhraseInternal *a3)
{
  quasar::TranslationPhraseInternal *v4;
  quasar::TranslationPhraseInternal *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (quasar::TranslationPhraseInternal *)this;
  v6 = (quasar::TranslationPhraseInternal *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v10 = *a1;
    v11 = 0x8F5C28F5C28F5C29 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x147AE147AE147AELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0x8F5C28F5C28F5C29 * (((uint64_t)this - v10) >> 3);
    v13 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0x8F5C28F5C28F5C29 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v13 >= 0xA3D70A3D70A3D7)
      v15 = 0x147AE147AE147AELL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[200 * v12];
    v20 = v19;
    v21 = &v16[200 * v15];
    std::__split_buffer<quasar::TranslationPhraseInternal>::push_back[abi:ne180100](&v18, a3);
    v4 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v18, (uint64_t)v4);
    std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v18);
  }
  else if (this == (std::string *)v6)
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal(this, a3);
    a1[1] = (uint64_t)v4 + 200;
  }
  else
  {
    std::vector<quasar::TranslationPhraseInternal>::__move_range((uint64_t)a1, (uint64_t *)this, (unint64_t)v6, (uint64_t)&this[8].__r_.__value_.__l.__size_);
    if (v4 <= a3)
      a3 = (quasar::TranslationPhraseInternal *)((char *)a3 + 200 * (a1[1] > (unint64_t)a3));
    quasar::TranslationPhraseInternal::operator=((uint64_t)v4, (uint64_t *)a3);
  }
  return v4;
}

void sub_1AE06F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'quasar::GenderVerifierBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::GenderVerifierBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::GenderVerifierBlock::minConfigVersion(quasar::GenderVerifierBlock *this)
{
  return 235;
}

uint64_t `virtual thunk to'quasar::GenderVerifierBlock::minConfigVersion(quasar::GenderVerifierBlock *this)
{
  return 235;
}

void quasar::ConfiguredProcessingBlock<quasar::GenderVerifierOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AE06F994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::GenderVerifierOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::GenderVerifierOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::GenderVerifierOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::GenderVerifierOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::GenderVerifierBlock::~GenderVerifierBlock(quasar::GenderVerifierBlock *this)
{
  char **v2;
  quasar::PTree *v3;

  *(_QWORD *)this = off_1E5D37168;
  v2 = (char **)((char *)this + 376);
  *((_QWORD *)this + 47) = off_1E5D37210;
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  v3 = (quasar::PTree *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100]((uint64_t)this + 344, v3);
  *(_QWORD *)this = off_1E5D04720;
  *((_QWORD *)this + 47) = &unk_1E5D047A8;
  quasar::GenderVerifierOptions::~GenderVerifierOptions((quasar::GenderVerifierBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  quasar::PTree *v3;

  *(_QWORD *)this = off_1E5D37168;
  v2 = (char **)((char *)this + 376);
  *((_QWORD *)this + 47) = off_1E5D37210;
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  v3 = (quasar::PTree *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100]((uint64_t)this + 344, v3);
  *(_QWORD *)this = off_1E5D04720;
  *((_QWORD *)this + 47) = &unk_1E5D047A8;
  quasar::GenderVerifierOptions::~GenderVerifierOptions((quasar::GenderVerifierBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::GenderVerifierBlock::blockType(quasar::GenderVerifierBlock *this)
{
  return "GenderVerifierBlock";
}

void `virtual thunk to'quasar::GenderVerifierBlock::~GenderVerifierBlock(quasar::GenderVerifierBlock *this)
{
  char *v1;
  quasar::PTree *v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D37168;
  *((_QWORD *)v1 + 47) = off_1E5D37210;
  if (v1[375] < 0)
    operator delete(*((void **)v1 + 44));
  v2 = (quasar::PTree *)*((_QWORD *)v1 + 43);
  *((_QWORD *)v1 + 43) = 0;
  if (v2)
    std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100]((uint64_t)(v1 + 344), v2);
  *(_QWORD *)v1 = off_1E5D04720;
  *((_QWORD *)v1 + 47) = &unk_1E5D047A8;
  quasar::GenderVerifierOptions::~GenderVerifierOptions((quasar::GenderVerifierOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 47);
}

{
  char *v1;
  quasar::PTree *v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D37168;
  *((_QWORD *)v1 + 47) = off_1E5D37210;
  if (v1[375] < 0)
    operator delete(*((void **)v1 + 44));
  v2 = (quasar::PTree *)*((_QWORD *)v1 + 43);
  *((_QWORD *)v1 + 43) = 0;
  if (v2)
    std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100]((uint64_t)(v1 + 344), v2);
  *(_QWORD *)v1 = off_1E5D04720;
  *((_QWORD *)v1 + 47) = &unk_1E5D047A8;
  quasar::GenderVerifierOptions::~GenderVerifierOptions((quasar::GenderVerifierOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 47);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::GenderVerifierBlock::blockType(quasar::GenderVerifierBlock *this)
{
  return "GenderVerifierBlock";
}

std::string *std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(std::string *a1, __int128 **a2, __int128 **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1AE06FCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::GenderVerifierOptions::~GenderVerifierOptions(quasar::GenderVerifierOptions *this)
{
  *(_QWORD *)this = &off_1E5D384A0;
  *((_QWORD *)this + 22) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>>>::__construct_node<std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::vector<std::string>,std::vector<std::string>>>>>::__construct_node<std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AE06FEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<std::vector<std::string>,std::vector<std::string>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  return this;
}

void std::default_delete<quasar::GenderInflector>::operator()[abi:ne180100](uint64_t a1, quasar::PTree *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy((uint64_t)a2 + 64, *((_QWORD **)a2 + 9));
    quasar::PTree::~PTree(a2);
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

__n128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  __n128 *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  __n128 *v11;
  uint64_t v12;
  void **v13;
  __int128 v14;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    if (*(char *)(a4 + v7 + 23) < 0)
      operator delete(*(void **)v8);
    v9 = (char *)a2 + v7;
    v10 = *(__int128 *)((char *)a2 + v7);
    *(_QWORD *)(v8 + 16) = a2[1].n128_u64[v7 / 8];
    *(_OWORD *)v8 = v10;
    v9[23] = 0;
    *v9 = 0;
    *(_WORD *)(v8 + 24) = a2[1].n128_u16[v7 / 2 + 4];
    v11 = (__n128 *)((char *)a2 + v7 + 32);
    std::vector<int>::__move_assign(v8 + 32, v11);
    v12 = a2[3].n128_i64[v7 / 8 + 1];
    *(_DWORD *)(v8 + 64) = a2[4].n128_u32[v7 / 4];
    *(_QWORD *)(v8 + 56) = v12;
    v13 = (void **)(v8 + 72);
    if (*(char *)(v8 + 95) < 0)
      operator delete(*v13);
    v14 = *(__int128 *)((char *)&a2[4] + v7 + 8);
    *(_QWORD *)(v8 + 88) = a2[5].n128_u64[v7 / 8 + 1];
    *(_OWORD *)v13 = v14;
    a2[5].n128_u8[v7 + 15] = 0;
    a2[4].n128_u8[v7 + 8] = 0;
    *(_QWORD *)(a4 + v7 + 96) = a2[6].n128_u64[v7 / 8];
    std::vector<int>::__move_assign(a4 + v7 + 104, (__n128 *)((char *)a2 + v7 + 104));
    *(_QWORD *)(a4 + v7 + 128) = a2[8].n128_u64[v7 / 8];
    v7 += 136;
  }
  while (&v11[6].n128_i8[8] != (__int8 *)v6);
  return v6;
}

uint64_t *std::vector<quasar::TranslationPhraseInternal>::__move_range(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (uint64_t *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (uint64_t *)((char *)a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v8, v10);
      v10 += 25;
      v8 += 200;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, v7, v6);
}

void sub_1AE070178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__split_buffer<quasar::TranslationPhraseInternal>::push_back[abi:ne180100](_QWORD *a1, quasar::TranslationPhraseInternal *a2)
{
  std::string *v4;
  uint64_t *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  std::string *result;
  char *v27;
  int64x2_t v28;
  char *v29;
  uint64_t v30;

  v4 = (std::string *)a1[2];
  if (v4 == (std::string *)a1[3])
  {
    v6 = (char *)*a1;
    v5 = (uint64_t *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      v12 = (char *)v4 - v6;
      v11 = v12 == 0;
      v13 = 0x1EB851EB851EB852 * (v12 >> 3);
      if (v11)
        v14 = 1;
      else
        v14 = v13;
      v15 = v14 >> 2;
      v30 = a1[4];
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v30, v14);
      v17 = (uint64_t)&v16[200 * v15];
      v27 = v16;
      v28.i64[0] = v17;
      v19 = &v16[200 * v18];
      v28.i64[1] = v17;
      v29 = v19;
      v20 = (uint64_t *)a1[1];
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v22 = v17 + 200 * (v21 / 200);
        v23 = 200 * (v21 / 200);
        do
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal(v17, v20);
          v17 += 200;
          v20 += 25;
          v23 -= 200;
        }
        while (v23);
        v16 = v27;
        v17 = v28.i64[0];
        v24 = *(int64x2_t *)(a1 + 1);
        v19 = v29;
      }
      else
      {
        v24 = vdupq_n_s64((unint64_t)v20);
        v22 = v17;
      }
      v27 = (char *)*a1;
      *a1 = v16;
      a1[1] = v17;
      v28 = v24;
      v25 = (char *)a1[3];
      a1[2] = v22;
      a1[3] = v19;
      v29 = v25;
      std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v27);
      v4 = (std::string *)a1[2];
    }
    else
    {
      v7 = 0x8F5C28F5C28F5C29 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -200 * v9;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(v5, (uint64_t *)v4, (uint64_t)&v5[-25 * v9]);
      a1[1] += v10;
      a1[2] = v4;
    }
  }
  result = quasar::TranslationPhraseInternal::TranslationPhraseInternal(v4, a2);
  a1[2] += 200;
  return result;
}

void sub_1AE070308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 25;
      a3 -= 200;
      quasar::TranslationPhraseInternal::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::TranslationPhraseInternal::operator=(a3, v4);
      v4 += 25;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)(a4 + v7), (const quasar::TranslationPhraseInternal *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AE0704E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 200;
    do
    {
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 + v2));
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::UtteranceDetector::UtteranceDetector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  _QWORD v4[34];

  v2 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(result + 8) = v3;
  *(_QWORD *)result = v2;
  if (v3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "opts_.max_utt_trailing_sil_frames >= 0");
    goto LABEL_6;
  }
  if (*(_DWORD *)(result + 4) < v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "opts_.max_utt_frames >= opts_.max_utt_trailing_sil_frames");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

BOOL kaldi::UtteranceDetector::IsUtteranceBoundary(kaldi::UtteranceDetector *this, int a2, int a3, int a4)
{
  int v4;
  int v5;

  if (!*(_BYTE *)this)
    return 0;
  v4 = *((_DWORD *)this + 1);
  if (a3)
  {
    v5 = *((_DWORD *)this + 2);
    if (v4 < a2)
      v5 = v5 * v4 / a2;
    return v5 <= a4;
  }
  else
  {
    return v4 <= a2;
  }
}

void quasar::IntToFloatFeature::registerParams(quasar::IntToFloatFeature *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "values");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map of <int, float>. Example: {\"8000\": 1, \"16000\": 0}");
  quasar::SystemConfig::Register<std::vector<std::pair<std::string,std::string>>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 1, 127, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AE070678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t **quasar::IntToFloatFeature::finishInit(uint64_t **this, quasar::SystemConfig *a2)
{
  const std::string *v2;
  const std::string *v3;
  uint64_t **v4;
  unsigned int v5;
  unint64_t v6;

  v2 = (const std::string *)this[4];
  v3 = (const std::string *)this[5];
  if (v2 != v3)
  {
    v4 = this + 7;
    do
    {
      v5 = std::stoi(v2, 0, 10);
      v6 = v5 | ((unint64_t)COERCE_UNSIGNED_INT(std::stof(v2 + 1, 0)) << 32);
      this = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(v4, (int *)&v6, &v6);
      v2 += 2;
    }
    while (v2 != v3);
  }
  return this;
}

float quasar::IntToFloatFeature::lookup(uint64_t a1, int a2, float **a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[17];

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    goto LABEL_12;
  v4 = a1 + 64;
  do
  {
    v5 = *(_DWORD *)(v3 + 28);
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 64 || *(_DWORD *)(v4 + 28) > a2)
  {
LABEL_12:
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v12 = *(_QWORD *)(a1 + 8);
    v11 = a1 + 8;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": Cannot find key: ", 19);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  result = *(float *)(v4 + 32);
  **a3 = result;
  return result;
}

float quasar::SamplingRateFeature::get(uint64_t a1, int *a2, float **a3)
{
  return quasar::IntToFloatFeature::lookup(a1, *a2, a3);
}

float quasar::LocationFeature::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float Latitude;
  float result;
  _OWORD v7[17];
  _QWORD v8[2];

  v8[0] = quasar::Location::fromSharedFuture((std::__assoc_sub_state **)(a2 + 8));
  v8[1] = v4;
  if (!quasar::Location::isKnown((quasar::Location *)v8))
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Unknown location");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  Latitude = quasar::Location::getLatitude((quasar::Location *)v8);
  **(float **)a3 = Latitude;
  result = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v8);
  *(float *)(*(_QWORD *)a3 + 4) = result;
  return result;
}

_QWORD *quasar::OnlineAppendFe::OnlineAppendFe(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *result = off_1E5D35330;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  return result;
}

void quasar::OnlineAppendFe::registerParams(quasar::OnlineAppendFe *this, std::string *a2)
{
  char *v4;
  quasar::PTree *Ptree;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  _QWORD *v17;
  std::string *p_str;
  std::string::size_type size;
  std::string::size_type v20;
  std::string::size_type v21;
  BOOL v23;
  std::string *v24;
  std::string::size_type v25;
  _BYTE *v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  __int128 v33;
  std::string __str;
  void *__p[2];
  unsigned __int8 v36;
  std::string v37;
  _BYTE v38[32];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v4 = (char *)this + 8;
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)this + 8);
  v6 = quasar::PTree::begin(Ptree);
  v7 = quasar::PTree::end(Ptree);
  if (v6 != v7)
  {
    v8 = v7;
    do
    {
      if (*((char *)this + 31) >= 0)
        v9 = *((unsigned __int8 *)this + 31);
      else
        v9 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]((uint64_t)v38, v9 + 1);
      if (v38[23] >= 0)
        v10 = v38;
      else
        v10 = *(_BYTE **)v38;
      if (v9)
      {
        if (*((char *)this + 31) >= 0)
          v11 = v4;
        else
          v11 = (const void *)*((_QWORD *)this + 1);
        memmove(v10, v11, v9);
      }
      *(_WORD *)&v10[v9] = 46;
      v12 = *(char *)(v6 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)v6;
      else
        v13 = *(const std::string::value_type **)v6;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v6 + 23);
      else
        v14 = *(_QWORD *)(v6 + 8);
      v15 = std::string::append((std::string *)v38, v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((v38[23] & 0x80000000) != 0)
        operator delete(*(void **)v38);
      if (quasar::gLogLevel >= 5)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        memset(v38, 0, sizeof(v38));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Building appendable feature ", 28);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_str, size);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v38);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v37, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v37 = __str;
      v20 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
      if (v20 != -1)
      {
        std::string::basic_string((std::string *)v38, &__str, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        v37 = *(std::string *)v38;
      }
      v21 = std::string::find(&v37, 58, 0);
      if (v21 != -1)
      {
        std::string::basic_string((std::string *)v38, &v37, 0, v21, (std::allocator<char> *)__p);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        v37 = *(std::string *)v38;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v37.__r_.__value_.__l.__size_ == 8)
        {
          v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_59;
        }
        if (v37.__r_.__value_.__l.__size_ != 13
          || (*(_QWORD *)v37.__r_.__value_.__l.__data_ == 0x676E696C706D6173
            ? (v23 = *(_QWORD *)(v37.__r_.__value_.__r.__words[0] + 5) == 0x657461722D676E69)
            : (v23 = 0),
              !v23))
        {
LABEL_85:
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v39 = 0u;
          memset(v38, 0, sizeof(v38));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
          std::operator+<char>();
          if ((v36 & 0x80u) == 0)
            v31 = __p;
          else
            v31 = (void **)__p[0];
          if ((v36 & 0x80u) == 0)
            v32 = v36;
          else
            v32 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v31, v32);
          if ((char)v36 < 0)
            operator delete(__p[0]);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v38);
        }
      }
      else
      {
        if (HIBYTE(v37.__r_.__value_.__r.__words[2]) == 8)
        {
          v24 = &v37;
LABEL_59:
          if (v24->__r_.__value_.__r.__words[0] != 0x6E6F697461636F6CLL)
            goto LABEL_85;
          quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 140, 0, (uint64_t)&__str);
          std::allocate_shared[abi:ne180100]<quasar::LocationFeature,std::allocator<quasar::LocationFeature>,std::string const&,void>((__int128 *)&__str, v38);
          goto LABEL_61;
        }
        if (HIBYTE(v37.__r_.__value_.__r.__words[2]) != 13)
          goto LABEL_85;
        if (v37.__r_.__value_.__r.__words[0] != 0x676E696C706D6173
          || *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 5) != 0x657461722D676E69)
        {
          goto LABEL_85;
        }
      }
      quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 127, 0, (uint64_t)&__str);
      std::allocate_shared[abi:ne180100]<quasar::SamplingRateFeature,std::allocator<quasar::SamplingRateFeature>,std::string const&,void>((__int128 *)&__str, v38);
LABEL_61:
      v33 = *(_OWORD *)v38;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v25 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v38, v25 + 1);
      if (v38[23] >= 0)
        v26 = v38;
      else
        v26 = *(_BYTE **)v38;
      if (v25)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &__str;
        else
          v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v26, v27, v25);
      }
      *(_WORD *)&v26[v25] = 46;
      quasar::SystemConfig::setPrefix(a2, (const std::string *)v38);
      if ((v38[23] & 0x80000000) != 0)
        operator delete(*(void **)v38);
      (*(void (**)(_QWORD, std::string *))(*(_QWORD *)v33 + 16))(v33, a2);
      quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&__str, 0, 0);
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)this + 6, &v33);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v6 += 88;
    }
    while (v6 != v8);
  }
}

void sub_1AE070E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineAppendFe::finishInit(uint64_t this, quasar::SystemConfig *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 48);
  for (i = *(uint64_t **)(this + 56);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, quasar::SystemConfig *))(*(_QWORD *)v5 + 24))(v5, a2))
  {
    v5 = *v2;
    v2 += 2;
  }
  return this;
}

void quasar::OnlineAppendFe::createOnlineFeInputImpl(_QWORD *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (!*a2)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"'", 1);
    v19 = a1[1];
    v18 = a1 + 1;
    v17 = v19;
    v20 = *((char *)v18 + 23);
    if (v20 >= 0)
      v21 = (uint64_t)v18;
    else
      v21 = v17;
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)v18 + 23);
    else
      v22 = v18[1];
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v21, v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
  }
  v8 = (uint64_t *)a1[6];
  v9 = (uint64_t *)a1[7];
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    LODWORD(v10) = 0;
    do
    {
      v11 = *v8;
      v8 += 2;
      v10 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) + v10;
    }
    while (v8 != v9);
  }
  v27 = 0uLL;
  *(_QWORD *)&v28 = 0;
  kaldi::Vector<float>::Resize((void **)&v27, v10, 1);
  v13 = (_QWORD *)a1[6];
  v12 = (_QWORD *)a1[7];
  if (v13 != v12)
  {
    v14 = 0;
    do
    {
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
      v26 = 0;
      *(_QWORD *)&v25 = v27 + 4 * v14;
      *((_QWORD *)&v25 + 1) = v15;
      (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*v13 + 40))(*v13, a3, &v25);
      v14 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
      v13 += 2;
    }
    while (v13 != v12);
  }
  v24 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineAppendInput,std::allocator<kaldi::OnlineAppendInput>,kaldi::OnlineFeatInputItf *,kaldi::Vector<float> &,void>(&v24, (uint64_t)&v27, &v25);
  *a4 = v25;
  kaldi::Vector<float>::Destroy((uint64_t)&v27);
}

void sub_1AE071104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::IntToFloatFeature::dim(quasar::IntToFloatFeature *this)
{
  return 1;
}

void quasar::SamplingRateFeature::~SamplingRateFeature(quasar::SamplingRateFeature *this)
{
  void **v2;

  *(_QWORD *)this = off_1E5D36528;
  std::__tree<int>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v2 = (void **)((char *)this + 32);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E5D3BA78;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void **v2;

  *(_QWORD *)this = off_1E5D36528;
  std::__tree<int>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v2 = (void **)((char *)this + 32);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E5D3BA78;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  MEMORY[0x1AF44D190](this, 0x10B3C402F3C3797);
}

void quasar::LocationFeature::~LocationFeature(quasar::LocationFeature *this)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = off_1E5D35918;
  v2 = (unint64_t *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)this = off_1E5D3BA78;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = off_1E5D35918;
  v2 = (unint64_t *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)this = off_1E5D3BA78;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::LocationFeature::dim(quasar::LocationFeature *this)
{
  return 2;
}

void quasar::OnlineAppendFe::~OnlineAppendFe(void **this)
{
  void **v2;

  *this = off_1E5D35330;
  v2 = this + 6;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::FeatureExtractor::~FeatureExtractor(this);
}

{
  void **v2;

  *this = off_1E5D35330;
  v2 = this + 6;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::FeatureExtractor::~FeatureExtractor(this);
  MEMORY[0x1AF44D190]();
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SamplingRateFeature,std::allocator<quasar::SamplingRateFeature>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<quasar::SamplingRateFeature>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SamplingRateFeature>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE071400(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SamplingRateFeature>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SamplingRateFeature>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43670;
  a1[1] = 0;
  quasar::IntToFloatFeature::IntToFloatFeature(a1 + 3, a2);
  a1[3] = off_1E5D377B8;
  return a1;
}

void sub_1AE071458(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SamplingRateFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SamplingRateFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SamplingRateFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *quasar::IntToFloatFeature::IntToFloatFeature(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D3BA78;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *a1 = off_1E5D36528;
  a1[4] = 0;
  a1[5] = 0;
  a1[9] = 0;
  a1[8] = 0;
  a1[6] = 0;
  a1[7] = a1 + 8;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LocationFeature,std::allocator<quasar::LocationFeature>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<quasar::LocationFeature>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LocationFeature>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AE07157C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LocationFeature>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LocationFeature>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42C98;
  a1[1] = 0;
  quasar::LocationFeature::LocationFeature(a1 + 3, a2);
  return a1;
}

void sub_1AE0715C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LocationFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LocationFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LocationFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *quasar::LocationFeature::LocationFeature(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D3BA78;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *a1 = off_1E5D35918;
  a1[4] = 0;
  return a1;
}

uint64_t **std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *((_DWORD *)v10 + 7) = *a3;
    *((_DWORD *)v10 + 8) = a3[1];
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineAppendInput,std::allocator<kaldi::OnlineAppendInput>,kaldi::OnlineFeatInputItf *,kaldi::Vector<float> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineAppendInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Vector<float> &,std::allocator<kaldi::OnlineAppendInput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AE0717A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineAppendInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Vector<float> &,std::allocator<kaldi::OnlineAppendInput>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41798;
  kaldi::OnlineAppendInput::OnlineAppendInput((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1AE0717F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineAppendInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineAppendInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineAppendInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineAppendInput::OnlineAppendInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E5D2A528;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  kaldi::Vector<float>::Resize((void **)(a1 + 16), *(unsigned int *)(a3 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v5, (const void **)a3);
  return a1;
}

void sub_1AE0718C4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

quasar::ConfusionNetworkCache *quasar::ConfusionNetworkCache::ConfusionNetworkCache(quasar::ConfusionNetworkCache *this)
{
  std::mutex *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 850045863;
  v2 = (std::mutex *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 1018212795;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](this);
  std::mutex::unlock(v2);
  return this;
}

void sub_1AE07195C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::condition_variable *v3;

  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::ConfusionNetworkCache::clear(quasar::ConfusionNetworkCache *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](this);
  std::mutex::unlock(v2);
}

uint64_t quasar::ConfusionNetworkCache::getConfNetwork(uint64_t a1, _QWORD *a2, int a3)
{
  std::chrono::steady_clock::time_point v6;
  std::chrono::steady_clock::time_point v7;
  std::chrono::system_clock::time_point v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v10;
  uint64_t v11;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(_QWORD *)a1)
      goto LABEL_19;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_)
      break;
    v7.__d_.__rep_ = v6.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v7.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v8.__d_.__rep_)
      {
        if (v8.__d_.__rep_ < 1)
        {
          if ((unint64_t)v8.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v9 = 0x8000000000000000;
            goto LABEL_15;
          }
        }
        else if ((unint64_t)v8.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v9 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_13;
        }
        v9 = 1000 * v8.__d_.__rep_;
      }
      else
      {
        v9 = 0;
      }
LABEL_13:
      if (v9 > (v7.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_16:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &v13, v10);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_15:
      v10.__d_.__rep_ = v9 + v7.__d_.__rep_;
      goto LABEL_16;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v6.__d_.__rep_);
  if (*(_QWORD *)a1)
  {
LABEL_19:
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a2, (uint64_t *)a1);
    v11 = 1;
    goto LABEL_21;
  }
  v11 = 0;
LABEL_21:
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
  return v11;
}

void quasar::ConfusionNetworkCache::storeConfNetwork(uint64_t a1, uint64_t ***a2, int a3)
{
  std::mutex *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>> const&,void>(a2, &v21);
  v7 = std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, &v21);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3 == 2)
  {
    v11 = **(uint64_t ****)a1;
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8);
    while (v11 != v12)
    {
      v13 = *v11;
      v14 = v11[1];
LABEL_10:
      if (v13 != v14)
      {
        v15 = *v13;
        v16 = v13[1];
        while (1)
        {
          if (v15 == v16)
          {
            v13 += 3;
            goto LABEL_10;
          }
          v17 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v7);
          v7 = quasar::QsrText::hatToQsrToken(v17, v15, v15);
          if ((v7 & 1) == 0)
            break;
          v15 += 224;
        }
        if (quasar::gLogLevel >= 2)
        {
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Rejected client conf network due to invalid HatText encoding", 60);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v21);
        }
        v21 = 0uLL;
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, &v21);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        goto LABEL_26;
      }
      v11 += 3;
    }
  }
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 80));
  if (quasar::gLogLevel >= 4)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Stored conf network!", 20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
  }
LABEL_26:
  std::mutex::unlock(v6);
}

void sub_1AE071D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>> const&,void>@<X0>(uint64_t ***a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>> const&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1AE071DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>> const&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>(uint64_t a1, uint64_t ***a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D45708;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((_QWORD *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  return a1;
}

void sub_1AE071E34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ProcessName(kaldi::quasar *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  {
    v3 = operator new();
    kaldi::quasar::ProcessNameHelper(v3);
    kaldi::quasar::ProcessName(void)::process_name = v3;
  }
  return kaldi::quasar::ProcessName(void)::process_name;
}

void sub_1AE071EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ProcessNameHelper(uint64_t a1@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[34];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "processName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_retainAutorelease(v4);
  if (objc_msgSend(v5, "UTF8String"))
    MEMORY[0x1AF44C914](a1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Process name: ", 14);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }

}

void sub_1AE071FC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::UserDefaultsBoolCached(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  char v8;

  if ((v1 & 1) == 0
  {
    v4 = a1;
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)v4 + 23) >= 0)
      v6 = v4;
    else
      v6 = (uint64_t *)*v4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v5, "BOOLForKey:", v7);

    kaldi::quasar::UserDefaultsBoolCached(std::string const&)::b = v8;
  }
  return kaldi::quasar::UserDefaultsBoolCached(std::string const&)::b;
}

void sub_1AE0720C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void quasar::TransformerBasicTokenizer::tokenize(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  quasar::QsrText *v6;
  uint64_t v7;
  char v8;
  char v9;
  std::vector<std::string>::pointer begin;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string::size_type size;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  std::vector<std::string>::pointer v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t i;
  std::string::size_type v24;
  std::vector<std::string>::pointer v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  std::string *v33;
  char *v34;
  __int128 v35;
  std::string *v36;
  std::vector<std::string>::pointer end;
  std::string v39;
  std::string v40;
  std::basic_string<char32_t> v41;
  std::vector<std::string> v42;
  std::vector<std::string> v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61[2];
  uint64_t v62;
  std::basic_string<char32_t> v63;

  quasar::toU32String(a2, &v63);
  quasar::TransformerBasicTokenizer::cleanText((uint64_t)&v63, (std::basic_string<char32_t> *)__p);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v63.__r_.__value_.__r.__words[2] = v45;
  if (a1[1])
  {
    quasar::TransformerBasicTokenizer::tokenizeChineseChars((uint64_t)&v63, (std::basic_string<char32_t> *)__p);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v63.__r_.__value_.__r.__words[2] = v45;
  }
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  v7 = quasar::QsrText::SingletonInstance(v6);
  quasar::toString((uint64_t)&v63, (std::string *)__p);
  v8 = quasar::QsrText::normalizeUnicode(v7, (uint64_t)__p, (uint64_t)v61, 0, 0);
  v9 = v8;
  if (SBYTE7(v45) < 0)
  {
    operator delete(__p[0]);
    if ((v9 & 1) != 0)
      goto LABEL_9;
LABEL_76:
    if (quasar::gLogLevel >= 1)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to normalize unicode", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    goto LABEL_79;
  }
  if ((v8 & 1) == 0)
    goto LABEL_76;
LABEL_9:
  quasar::splitAndTrimNoEmptyUnicode((uint64_t)v61, &v43);
  memset(&v42, 0, sizeof(v42));
  begin = v43.__begin_;
  end = v43.__end_;
  if (v43.__begin_ != v43.__end_)
  {
    while (1)
    {
      quasar::toU32String((uint64_t)begin, &v41);
      quasar::toString((uint64_t)&v41, (std::string *)__p);
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      v12 = v11;
      if (SBYTE7(v45) < 0)
      {
        operator delete(__p[0]);
        if (v12)
          goto LABEL_35;
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      if (!*a1)
        break;
      quasar::toString((uint64_t)&v41, &v39);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v39;
      else
        v13 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        size = v39.__r_.__value_.__l.__size_;
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v13, size, &v40);
      quasar::toU32String((uint64_t)&v40, (std::basic_string<char32_t> *)__p);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v41.__r_.__value_.__r.__words[2] = v45;
      BYTE7(v45) = 0;
      LODWORD(__p[0]) = 0;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (!a1[3] || a1[2])
        goto LABEL_32;
LABEL_35:
      if (a1[4])
      {
        quasar::toString((uint64_t)&v41, (std::string *)__p);
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, (unsigned __int8 *)__p);
        v16 = v15;
        if (SBYTE7(v45) < 0)
        {
          operator delete(__p[0]);
          if (!v16)
          {
LABEL_49:
            quasar::TransformerBasicTokenizer::splitOnPunc((uint64_t)&v41, (uint64_t *)&v40);
            v24 = v40.__r_.__value_.__l.__size_;
            for (i = v40.__r_.__value_.__r.__words[0]; i != v24; i += 24)
            {
              quasar::toString(i, &v39);
              v25 = v42.__end_;
              if (v42.__end_ >= v42.__end_cap_.__value_)
              {
                v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_ - (char *)v42.__begin_) >> 3);
                v28 = v27 + 1;
                if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) > v28)
                  v28 = 0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) >= 0x555555555555555)
                  v29 = 0xAAAAAAAAAAAAAAALL;
                else
                  v29 = v28;
                *(_QWORD *)&v46 = &v42.__end_cap_;
                if (v29)
                  v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42.__end_cap_, v29);
                else
                  v30 = 0;
                v31 = &v30[24 * v27];
                __p[0] = v30;
                __p[1] = v31;
                *((_QWORD *)&v45 + 1) = &v30[24 * v29];
                v32 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                *((_QWORD *)v31 + 2) = *((_QWORD *)&v39.__r_.__value_.__l + 2);
                *(_OWORD *)v31 = v32;
                memset(&v39, 0, sizeof(v39));
                *(_QWORD *)&v45 = v31 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v42, (std::__split_buffer<std::string> *)__p);
                v33 = v42.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v42.__end_ = v33;
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v39.__r_.__value_.__l.__data_);
              }
              else
              {
                v26 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                v42.__end_->__r_.__value_.__r.__words[2] = v39.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
                v42.__end_ = v25 + 1;
              }
            }
            __p[0] = &v40;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_69;
          }
        }
        else if (!v15)
        {
          goto LABEL_49;
        }
      }
      quasar::toString((uint64_t)&v41, &v40);
      v17 = v42.__end_;
      if (v42.__end_ >= v42.__end_cap_.__value_)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_ - (char *)v42.__begin_) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) > v20)
          v20 = 0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        *(_QWORD *)&v46 = &v42.__end_cap_;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42.__end_cap_, v21);
        else
          v22 = 0;
        v34 = &v22[24 * v19];
        __p[0] = v22;
        __p[1] = v34;
        *((_QWORD *)&v45 + 1) = &v22[24 * v21];
        v35 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
        *((_QWORD *)v34 + 2) = *((_QWORD *)&v40.__r_.__value_.__l + 2);
        *(_OWORD *)v34 = v35;
        memset(&v40, 0, sizeof(v40));
        *(_QWORD *)&v45 = v34 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(&v42, (std::__split_buffer<std::string> *)__p);
        v36 = v42.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
        v42.__end_ = v36;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
      }
      else
      {
        v18 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
        v42.__end_->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        v42.__end_ = v17 + 1;
      }
LABEL_69:
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (++begin == end)
        goto LABEL_72;
    }
    if (!a1[3] || !a1[2])
      goto LABEL_35;
LABEL_32:
    quasar::TransformerBasicTokenizer::stripAccents((quasar::QsrText *)&v41, (std::basic_string<char32_t> *)__p);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v41.__r_.__value_.__r.__words[2] = v45;
    goto LABEL_35;
  }
LABEL_72:
  v41.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)" ";
  v41.__r_.__value_.__l.__size_ = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v42, (uint64_t *)&v41);
  quasar::splitAndTrimNoEmptyUnicode((uint64_t)__p, a4);
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  __p[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_79:
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_1AE0726C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  if (*(char *)(v41 - 113) < 0)
    operator delete(*(void **)(v41 - 136));
  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  _Unwind_Resume(a1);
}

void quasar::TransformerBasicTokenizer::cleanText(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t i;
  unsigned int v6;
  BOOL v7;
  std::basic_string<char32_t>::value_type v8;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (unsigned int *)a1;
  else
    v4 = *(unsigned int **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    for (i = 4 * v3; i; i -= 4)
    {
      v6 = *v4;
      if ((int)*v4 > 12)
      {
        if (v6 == 13)
          goto LABEL_16;
        if (v6 == 65533)
          goto LABEL_22;
      }
      else
      {
        if (v6 - 9 < 2)
          goto LABEL_16;
        if (!v6)
          goto LABEL_22;
      }
      if (((1 << u_charType(v6)) & 0x78001) == 0)
      {
        v6 = *v4;
LABEL_16:
        v7 = v6 > 0x20 || ((1 << v6) & 0x100002600) == 0;
        if (!v7 || u_charType(v6) == 12)
          v8 = 32;
        else
          v8 = *v4;
        std::basic_string<char32_t>::push_back(a2, v8);
      }
LABEL_22:
      ++v4;
    }
  }
}

void sub_1AE07295C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::TransformerBasicTokenizer::tokenizeChineseChars(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  uint64_t v3;
  std::basic_string<char32_t>::value_type *v4;
  uint64_t v5;
  std::basic_string<char32_t>::value_type v6;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (std::basic_string<char32_t>::value_type *)a1;
  else
    v4 = *(std::basic_string<char32_t>::value_type **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = 4 * v3;
    do
    {
      v6 = *v4;
      if (quasar::TransformerBasicTokenizer::isCJK(*v4))
      {
        std::basic_string<char32_t>::push_back(a2, 32);
        std::basic_string<char32_t>::push_back(a2, *v4);
        v6 = 32;
      }
      std::basic_string<char32_t>::push_back(a2, v6);
      ++v4;
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_1AE072A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::TransformerBasicTokenizer::stripAccents(quasar::QsrText *a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  void **v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28[2];
  uint64_t v29;

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v4 = quasar::QsrText::SingletonInstance(a1);
  quasar::toString((uint64_t)a1, (std::string *)__p);
  v5 = quasar::QsrText::normalizeUnicode(v4, (uint64_t)__p, (uint64_t)v28, 1, 0);
  v6 = v5;
  if (SBYTE7(v12) < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    v7 = __p;
    quasar::toU32String((uint64_t)v28, (std::basic_string<char32_t> *)__p);
    v8 = BYTE7(v12);
    v9 = BYTE7(v12);
    if (SBYTE7(v12) < 0)
    {
      v7 = (void **)__p[0];
      v8 = (unint64_t)__p[1];
    }
    if (v8)
    {
      v10 = 4 * v8;
      do
      {
        if (u_charType(*(_DWORD *)v7) != 6)
          std::basic_string<char32_t>::push_back(a2, *(_DWORD *)v7);
        v7 = (void **)((char *)v7 + 4);
        v10 -= 4;
      }
      while (v10);
      v9 = BYTE7(v12);
    }
    if (v9 < 0)
      operator delete(__p[0]);
    goto LABEL_17;
  }
  if (quasar::gLogLevel >= 1)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to normalize unicode", 27);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_17:
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_1AE072B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  if (*(char *)(v14 - 33) < 0)
    operator delete(*(void **)(v14 - 56));
  _Unwind_Resume(a1);
}

void quasar::TransformerBasicTokenizer::splitOnPunc(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  UChar32 *v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _BOOL4 isPunctuation;
  std::basic_string<char32_t> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::wstring *v14;
  std::wstring *v15;
  std::__split_buffer<std::wstring> v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (UChar32 *)a1;
  else
    v4 = *(UChar32 **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = a2 + 2;
    v6 = 4 * v3;
    v7 = 1;
    while (1)
    {
      isPunctuation = quasar::TransformerBasicTokenizer::isPunctuation(*v4);
      v9 = (std::basic_string<char32_t> *)a2[1];
      if (isPunctuation)
        break;
      if ((v7 & 1) != 0)
      {
        if ((unint64_t)v9 < *v5)
        {
LABEL_20:
          v9->__r_.__value_.__r.__words[0] = 0;
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          a2[1] = (uint64_t)++v9;
LABEL_32:
          a2[1] = (uint64_t)v9;
          goto LABEL_33;
        }
        v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a2) >> 3);
        v13 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_35:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((*v5 - *a2) >> 3) > v13)
          v13 = 0x5555555555555556 * ((*v5 - *a2) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((*v5 - *a2) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v13;
        v16.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a2 + 2);
        if (v12)
LABEL_28:
          v14 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v12);
        else
          v14 = 0;
LABEL_31:
        v15 = v14 + v10;
        v16.__first_ = v14;
        v16.__begin_ = v15;
        v16.__end_cap_.__value_ = &v14[v12];
        v15->__r_.__value_.__r.__words[0] = 0;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v16.__end_ = v15 + 1;
        std::vector<std::basic_string<char32_t>>::__swap_out_circular_buffer(a2, &v16);
        v9 = (std::basic_string<char32_t> *)a2[1];
        std::__split_buffer<std::string>::~__split_buffer(&v16);
        goto LABEL_32;
      }
LABEL_33:
      std::basic_string<char32_t>::push_back(v9 - 1, *v4++);
      v7 = isPunctuation;
      v6 -= 4;
      if (!v6)
        return;
    }
    if ((unint64_t)v9 < *v5)
      goto LABEL_20;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a2) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_35;
    if (0x5555555555555556 * ((*v5 - *a2) >> 3) > v11)
      v11 = 0x5555555555555556 * ((*v5 - *a2) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((*v5 - *a2) >> 3) >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    v16.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a2 + 2);
    if (v12)
      goto LABEL_28;
    v14 = 0;
    goto LABEL_31;
  }
}

void sub_1AE072E20(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::TransformerBasicTokenizer::isPunctuation(UChar32 c)
{
  _BOOL8 result;

  if ((c - 33) < 0xF)
    return 1;
  result = 1;
  if (((c - 91) > 0x23 || ((1 << (c - 91)) & 0xF0000003FLL) == 0)
    && (c - 58) >= 7)
  {
    return u_ispunct(c) != 0;
  }
  return result;
}

uint64_t quasar::TransformerBasicTokenizer::isCJK(unsigned int a1)
{
  char v2;
  uint64_t result;
  unsigned int v4;
  _BOOL4 v5;

  v2 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1AE194DA0, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1AE194D90))));
  result = 1;
  if ((v2 & 1) == 0)
  {
    v4 = a1 - 63744;
    v5 = a1 - 194560 < 0x220;
    return v4 < 0x200 || v5;
  }
  return result;
}

void quasar::transformerWordpieceTokenize(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v10;
  uint64_t v11;
  std::basic_string<char32_t>::size_type size;
  int v13;
  char v14;
  unint64_t v15;
  std::vector<std::string>::pointer v16;
  unsigned __int8 *v17;
  std::string::size_type v18;
  _OWORD *v19;
  __int128 v20;
  std::basic_string<char32_t>::size_type v21;
  unint64_t v22;
  uint64_t v23;
  std::vector<std::string>::pointer v24;
  std::string v26;
  std::string __p;
  std::string v28;
  std::basic_string<char32_t> v29;
  std::vector<std::string> v30;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  quasar::splitAndTrimNoEmptyUnicode(a1, &v30);
  begin = v30.__begin_;
  end = v30.__end_;
  if (v30.__begin_ == v30.__end_)
    goto LABEL_53;
  v24 = v30.__end_;
  do
  {
    quasar::toU32String((uint64_t)begin, &v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v29.__r_.__value_.__l.__size_;
      operator delete(v29.__r_.__value_.__l.__data_);
      if (size > a4)
      {
LABEL_5:
        v10 = *(_QWORD *)(a5 + 8);
        if (v10 >= *(_QWORD *)(a5 + 16))
        {
          v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)a5, a3);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, a3);
          v11 = v10 + 24;
        }
        *(_QWORD *)(a5 + 8) = v11;
        goto LABEL_52;
      }
    }
    else if (HIBYTE(v29.__r_.__value_.__r.__words[2]) > (unint64_t)a4)
    {
      goto LABEL_5;
    }
    v13 = 0;
    v14 = 0;
    memset(&v29, 0, sizeof(v29));
    while (1)
    {
      v15 = SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0
          ? begin->__r_.__value_.__l.__size_
          : HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v15 <= v13)
        break;
      memset(&v28, 0, sizeof(v28));
      while (v13 < (int)v15)
      {
        v16 = begin;
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          v16 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
        std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)v16 + v13, (char *)v16 + (int)v15, (int)v15 - (uint64_t)v13);
        if (v13 >= 1)
        {
          std::operator+<char>();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v26;
        }
        v17 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
        if (v17)
          std::string::operator=(&v28, &__p);
        else
          LODWORD(v15) = v15 - 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v17)
            break;
        }
        else if (v17)
        {
          break;
        }
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        v18 = v28.__r_.__value_.__l.__size_;
      if (v18)
      {
        v19 = (_OWORD *)v29.__r_.__value_.__l.__size_;
        if (v29.__r_.__value_.__l.__size_ >= v29.__r_.__value_.__r.__words[2])
        {
          v21 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v29, (__int128 *)&v28);
        }
        else
        {
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v29.__r_.__value_.__l.__size_, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else
          {
            v20 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
            *(_QWORD *)(v29.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
            *v19 = v20;
          }
          v21 = (std::basic_string<char32_t>::size_type)v19 + 24;
        }
        v29.__r_.__value_.__l.__size_ = v21;
        v13 = v15;
        if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_42;
LABEL_36:
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!v18)
          break;
      }
      else
      {
        v14 = 1;
        if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_36;
LABEL_42:
        if (!v18)
          break;
      }
    }
    v22 = *(_QWORD *)(a5 + 8);
    if ((v14 & 1) != 0)
    {
      if (v22 >= *(_QWORD *)(a5 + 16))
      {
        v23 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)a5, a3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, a3);
        v23 = v22 + 24;
      }
      end = v24;
      *(_QWORD *)(a5 + 8) = v23;
    }
    else
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)a5, *(std::string **)(a5 + 8), (std::string *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
      end = v24;
    }
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
LABEL_52:
    ++begin;
  }
  while (begin != end);
LABEL_53:
  v29.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_1AE0731F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

std::string *quasar::TransformerTokenizer::TransformerTokenizer(std::string *this, uint64_t a2, char a3, char a4, __int128 *a5, __int128 *a6, uint64_t a7, __int128 *a8, uint64_t a9, char a10, int a11, __int16 a12, __int16 a13)
{
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t i;
  std::string::size_type v23;
  std::locale::id *v24;
  const std::locale::facet *v25;
  unsigned __int8 v26;
  _QWORD *v27;
  std::string::size_type size;
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::string::pointer data;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::string __p;
  std::locale v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65[20];
  _QWORD v66[23];

  v66[20] = *MEMORY[0x1E0C80C00];
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v19 = *a5;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v20 = *a6;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v20;
  }
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v21 = *a8;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a8 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v21;
  }
  if (*((char *)a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  else
    v61 = *(std::string *)a5;
  if (*((char *)a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  else
    v62 = *(std::string *)a6;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    v63 = *(std::string *)a7;
  if (*((char *)a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  else
    v64 = *(std::string *)a8;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v65[0].__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v65[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[3], (unsigned __int8 *)&v61, 5);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF1; i -= 3)
  {
    if (SHIBYTE(v65[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v65[i / 3].__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[6].__r_.__value_.__l.__data_) = 1065353216;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  this[8].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = 1065353216;
  this[9].__r_.__value_.__r.__words[0] = 0;
  std::ifstream::basic_ifstream(&v61);
  v23 = v61.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v62.__r_.__value_.__r.__words[1] + *(_QWORD *)(v61.__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    *(_OWORD *)&v44[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not open vocabFile ", 25);
    v38 = *(char *)(a2 + 23);
    if (v38 >= 0)
      v39 = a2;
    else
      v39 = *(_QWORD *)a2;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a2 + 23);
    else
      v40 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v44);
  }
  memset(&__p, 0, sizeof(__p));
  v24 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v61 + *(_QWORD *)(v23 - 24)));
    v25 = std::locale::use_facet(v44, v24);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(v44);
    v27 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v61, (uint64_t)&__p, v26);
    if ((*((_BYTE *)v27 + *(_QWORD *)(*v27 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)&v44[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Encountered empty line in vocab file", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v44);
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&this[4].__r_.__value_.__r.__words[2], (unsigned __int8 *)&__p))
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)&v44[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Encountered duplicate line in vocab file", 40);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v44);
    }
    v44[0] = (std::locale)this[5].__r_.__value_.__r.__words[2];
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string&,unsigned long>((uint64_t)&this[4].__r_.__value_.__r.__words[2], (unsigned __int8 *)&__p, (uint64_t)&__p, v44);
    v29 = this[6].__r_.__value_.__r.__words[2];
    if (v29 >= this[7].__r_.__value_.__r.__words[0])
    {
      v31 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&this[6].__r_.__value_.__l.__size_, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)this[6].__r_.__value_.__r.__words[2], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v29 = v30;
      }
      v31 = v29 + 24;
      this[6].__r_.__value_.__r.__words[2] = v29 + 24;
    }
    this[6].__r_.__value_.__r.__words[2] = v31;
    v23 = v61.__r_.__value_.__r.__words[0];
  }
  v32 = (unsigned __int8 *)&this[3].__r_.__value_.__s.__data_[16];
  while (1)
  {
    v32 = *(unsigned __int8 **)v32;
    if (!v32)
      break;
    v33 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&this[4].__r_.__value_.__r.__words[2], v32 + 16);
    if (!v33)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&this[7].__r_.__value_.__l.__size_, (int *)v33 + 10, (_DWORD *)v33 + 10);
  }
  if ((a4 & 1) != 0)
  {
    v34 = operator new();
    *(_BYTE *)v34 = a3;
    *(_BYTE *)(v34 + 1) = a10;
    *(_WORD *)(v34 + 2) = a12;
    *(_BYTE *)(v34 + 4) = 1;
    data = this[9].__r_.__value_.__l.__data_;
    this[9].__r_.__value_.__r.__words[0] = v34;
    if (data)
      MEMORY[0x1AF44D190](data, 0x1000C40957D8CC4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v61.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + *(_QWORD *)(v61.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v61.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v66);
  return this;
}

void sub_1AE073900(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AE0739CCLL);
}

void sub_1AE073928(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  JUMPOUT(0x1AE07393CLL);
}

void sub_1AE073938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;

  if (a19 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a54);
  v58 = *(_QWORD *)(v54 + 216);
  *(_QWORD *)(v54 + 216) = 0;
  if (v58)
    MEMORY[0x1AF44D190](v58, 0x1000C40957D8CC4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v55);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  if (*(char *)(v54 + 71) < 0)
    operator delete(*a11);
  if (*(char *)(v54 + 47) < 0)
    operator delete(*a12);
  if (*(char *)(v54 + 23) < 0)
    operator delete(*(void **)v54);
  _Unwind_Resume(a1);
}

std::string *quasar::TransformerTokenizer::TransformerTokenizer(std::string *a1, uint64_t a2, char a3, char a4, __int128 *a5, __int128 *a6, uint64_t a7, __int128 *a8, uint64_t a9, char a10, int a11, __int16 a12)
{
  return quasar::TransformerTokenizer::TransformerTokenizer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0);
}

void quasar::TransformerTokenizer::~TransformerTokenizer(quasar::TransformerTokenizer *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40957D8CC4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 176);
  v3 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void quasar::TransformerTokenizer::tokenize(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v5;
  std::vector<std::string>::pointer i;
  std::vector<std::string>::pointer end;
  std::vector<std::wstring>::pointer v8;
  __int128 v9;
  std::vector<std::wstring> *v10;
  std::vector<std::wstring> *v11;
  std::string *v12;
  __int128 v13;
  std::wstring *v14;
  std::vector<std::wstring>::pointer begin;
  std::vector<std::wstring>::pointer j;
  uint64_t v17;
  std::wstring::size_type size;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::vector<std::wstring> *v25;
  void **v26;
  std::vector<std::wstring> v27;
  std::vector<std::wstring> v28;
  std::vector<std::wstring> **v29;

  memset(&v28, 0, sizeof(v28));
  v5 = (_BYTE *)*((_QWORD *)a1 + 27);
  if (v5)
  {
    quasar::TransformerBasicTokenizer::tokenize(v5, a2, (_QWORD *)a1 + 9, (std::vector<std::string> *)&v27);
    end = (std::vector<std::string>::pointer)v27.__end_;
    for (i = (std::vector<std::string>::pointer)v27.__begin_; i != end; ++i)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a1 + 9, (unsigned __int8 *)i))
      {
        v8 = v28.__end_;
        if (v28.__end_ >= v28.__end_cap_.__value_)
        {
          v14 = (std::wstring *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v28, (__int128 *)i);
        }
        else
        {
          if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v28.__end_, i->__r_.__value_.__l.__data_, i->__r_.__value_.__l.__size_);
          }
          else
          {
            v9 = *(_OWORD *)&i->__r_.__value_.__l.__data_;
            v28.__end_->__r_.__value_.__r.__words[2] = i->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
          }
          v14 = v8 + 1;
        }
        v28.__end_ = v14;
      }
      else
      {
        quasar::transformerWordpieceTokenize((uint64_t)i, (_QWORD *)a1 + 14, (__int128 *)a1, 100, (uint64_t)&v25);
        v10 = v25;
        v11 = (std::vector<std::wstring> *)v26;
        if (v25 != (std::vector<std::wstring> *)v26)
        {
          v12 = (std::string *)v28.__end_;
          do
          {
            if ((std::wstring *)v12 >= v28.__end_cap_.__value_)
            {
              v12 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v28, (__int128 *)v10);
            }
            else
            {
              if (SHIBYTE(v10->__end_cap_.__value_) < 0)
              {
                std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v10->__begin_, (std::string::size_type)v10->__end_);
              }
              else
              {
                v13 = *(_OWORD *)&v10->__begin_;
                v12->__r_.__value_.__r.__words[2] = (std::string::size_type)v10->__end_cap_.__value_;
                *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
              }
              ++v12;
            }
            v28.__end_ = (std::vector<std::wstring>::pointer)v12;
            ++v10;
          }
          while (v10 != v11);
        }
        v29 = &v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      }
    }
    v25 = &v27;
  }
  else
  {
    quasar::transformerWordpieceTokenize(a2, (_QWORD *)a1 + 14, (__int128 *)a1, 100, (uint64_t)&v27);
    std::vector<std::string>::__vdeallocate(&v28);
    v28 = v27;
    memset(&v27, 0, sizeof(v27));
    v25 = &v27;
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  begin = v28.__begin_;
  for (j = v28.__end_; begin != j; ++begin)
  {
    v17 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    if ((v17 & 0x80u) == 0)
      size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    else
      size = begin->__r_.__value_.__l.__size_;
    v19 = a1[23];
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)a1 + 1);
    if (size == v19)
    {
      if (v20 >= 0)
        v21 = a1;
      else
        v21 = *(unsigned __int8 **)a1;
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(begin->__r_.__value_.__l.__data_, v21, begin->__r_.__value_.__l.__size_))
          goto LABEL_42;
      }
      else
      {
        if (!*((_BYTE *)&begin->__r_.__value_.__s + 23))
          goto LABEL_42;
        v22 = 0;
        while (*((unsigned __int8 *)&begin->__r_.__value_.__l.__data_ + v22) == v21[v22])
        {
          if (v17 == ++v22)
            goto LABEL_42;
        }
      }
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a1 + 9, (unsigned __int8 *)begin))
    {
LABEL_42:
      v23 = a3[1];
      if (v23 >= a3[2])
      {
        v24 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, (__int128 *)begin);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (__int128 *)begin);
        v24 = v23 + 24;
      }
      a3[1] = v24;
    }
  }
  v27.__begin_ = (std::vector<std::wstring>::pointer)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_1AE073D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void quasar::TransformerTokenizer::encode(unsigned __int8 *a1, uint64_t *a2, int32x2_t *a3, int32x2_t *a4, int a5, uint64_t a6, int a7)
{
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unint64_t __sz;
  int v26;
  char v27;
  int v29;
  std::vector<std::string> v31;
  void **v32[35];

  v29 = a6;
  v27 = a7;
  if (a7)
  {
    if ((int)a6 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, "maxLength > 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
    }
    kaldi::Matrix<float>::Resize(a3, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), a6, 0, 0);
    v11 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    v12 = a4;
    v13 = a6;
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
    v12 = a4;
    v11 = 0;
    v13 = 0;
  }
  kaldi::Matrix<float>::Resize(v12, v11, v13, 0, 0);
  v14 = *a2;
  if (a2[1] != *a2)
  {
    v15 = 0;
    if (a5)
      v16 = 2;
    else
      v16 = 0;
    v26 = v16;
    __sz = (v29 - v16);
    v17 = a1 + 112;
    do
    {
      quasar::TransformerTokenizer::tokenize(a1, v14 + 24 * v15, (uint64_t *)&v31);
      if (v29 >= 1)
      {
        if ((int)__sz <= 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"maxTokens > 0", 13);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3) > __sz)
          std::vector<std::string>::resize(&v31, __sz);
      }
      v18 = v26 - 1431655765 * ((unint64_t)((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
      if ((v27 & 1) == 0 && (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a3) < (int)v18)
      {
        kaldi::Matrix<float>::Resize(a3, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), v18, 2, 0);
        kaldi::Matrix<float>::Resize(a4, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), v18, 2, 0);
      }
      if (a5)
      {
        v19 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, a1 + 48);
        if (!v19)
          goto LABEL_36;
        *(float *)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * (int)v15) = (float)*((int *)v19 + 10);
        *(_DWORD *)(*(_QWORD *)a4 + 4 * a4[2].i32[0] * (int)v15) = 1065353216;
        LODWORD(v20) = 1;
      }
      else
      {
        LODWORD(v20) = 0;
      }
      begin = v31.__begin_;
      end = v31.__end_;
      if (v31.__begin_ != v31.__end_)
      {
        v20 = v20;
        do
        {
          v23 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, (unsigned __int8 *)begin);
          if (!v23)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *(float *)(*(_QWORD *)a3 + 4 * (int)v15 * a3[2].i32[0] + 4 * v20) = (float)*((int *)v23 + 10);
          *(_DWORD *)(*(_QWORD *)a4 + 4 * (int)v15 * a4[2].i32[0] + 4 * v20++) = 1065353216;
          ++begin;
        }
        while (begin != end);
      }
      if ((a5 & 1) != 0)
      {
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, a1 + 24);
        if (!v24)
LABEL_36:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        *(float *)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * (int)v15 + 4 * v20) = (float)*((int *)v24 + 10);
        *(_DWORD *)(*(_QWORD *)a4 + 4 * a4[2].i32[0] * (int)v15 + 4 * v20) = 1065353216;
        LODWORD(v20) = v20 + 1;
      }
      if ((_DWORD)v20 != (_DWORD)v18 || (int)v18 > (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a3))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(col == numTotalTokensToAdd) && (col <= inputIds->NumCols())", 60);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      v32[0] = (void **)&v31;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v32);
      ++v15;
      v14 = *a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v15);
  }
}

void quasar::TransformerTokenizer::convertIdsToTokens(quasar::TransformerTokenizer *this@<X0>, unsigned int **a2@<X1>, int a3@<W2>, std::vector<std::string> *a4@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  _QWORD *v9;
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  int v22;
  std::string __p;
  std::__split_buffer<std::string> __v;

  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v9 = (_QWORD *)((char *)this + 176);
    p_end_cap = (std::allocator<std::string> *)&a4->__end_cap_;
    do
    {
      if (!a3
        || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v9, (int *)v4))
      {
        quasar::TransformerTokenizer::convertIdToToken(this, *v4, &__p);
        end = a4->__end_;
        value = a4->__end_cap_.__value_;
        if (end >= value)
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a4->__begin_) >> 3);
          v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a4->__begin_) >> 3);
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x555555555555555)
            v17 = 0xAAAAAAAAAAAAAAALL;
          else
            v17 = v15;
          __v.__end_cap_.__value_ = p_end_cap;
          if (v17)
            v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v17);
          else
            v18 = 0;
          v19 = v18 + v14;
          __v.__first_ = v18;
          __v.__begin_ = v19;
          __v.__end_cap_.__value_ = &v18[v17];
          v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v19->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v19 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a4, &__v);
          v21 = a4->__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          a4->__end_ = v21;
          if (v22 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
          a4->__end_ = end + 1;
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1AE074398(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void quasar::TransformerTokenizer::convertIdToToken(quasar::TransformerTokenizer *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  const std::string::value_type *v6;
  std::string::size_type v7;

  if ((a2 & 0x80000000) != 0
    || (v3 = *((_QWORD *)this + 19), 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 20) - v3) >> 3) <= a2))
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)this;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
      return;
    }
    v6 = *(const std::string::value_type **)this;
    v7 = *((_QWORD *)this + 1);
  }
  else
  {
    v4 = (__int128 *)(v3 + 24 * a2);
    if ((*((char *)v4 + 23) & 0x80000000) == 0)
    {
      v5 = *v4;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
      return;
    }
    v6 = *(const std::string::value_type **)v4;
    v7 = *((_QWORD *)v4 + 1);
  }
  std::string::__init_copy_ctor_external(a3, v6, v7);
}

uint64_t std::vector<std::basic_string<char32_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char32_t>>,std::reverse_iterator<std::basic_string<char32_t>*>,std::reverse_iterator<std::basic_string<char32_t>*>,std::reverse_iterator<std::basic_string<char32_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char32_t>>,std::reverse_iterator<std::basic_string<char32_t>*>,std::reverse_iterator<std::basic_string<char32_t>*>,std::reverse_iterator<std::basic_string<char32_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char32_t>>,std::reverse_iterator<std::basic_string<char32_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char32_t>>,std::reverse_iterator<std::basic_string<char32_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t kaldi::quasar::ToAddTag(uint64_t a1)
{
  int v2;
  uint64_t v7;
  int *v8;
  int v10;
  int v11;
  _QWORD v16[34];

  v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == 5)
    {
      v8 = *(int **)a1;
      if (**(_DWORD **)a1 == 1768383810 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 110)
        return 0;
      v10 = *v8;
      v11 = *((unsigned __int8 *)v8 + 4);
      if (v10 == 1768383842 && v11 == 110)
        return 0;
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (v7 == 3)
    {
      if (**(_WORD **)a1 == 28229 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 100)
        return 1;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 == 3)
      {
        if (**(_WORD **)a1 == 28261 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 100)
          return 1;
        if ((v2 & 0x80) == 0)
          goto LABEL_53;
      }
    }
    if (v7 != 4)
      goto LABEL_54;
    if (**(_DWORD **)a1 != 1752461122)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 != 4)
        goto LABEL_54;
      if (**(_DWORD **)a1 != 1752461154)
        goto LABEL_55;
    }
    return 2;
  }
  if (v2 != 3)
  {
    if (v2 != 4)
    {
      if (v2 != 5)
        goto LABEL_53;
      if ((*(_DWORD *)a1 != 1768383810 || *(_BYTE *)(a1 + 4) != 110)
        && (*(_DWORD *)a1 != 1768383842 || *(_BYTE *)(a1 + 4) != 110))
      {
        goto LABEL_53;
      }
      return 0;
    }
    if (*(_DWORD *)a1 != 1752461122 && *(_DWORD *)a1 != 1752461154)
    {
LABEL_53:
      v7 = *(unsigned __int8 *)(a1 + 23);
LABEL_54:
      if (!v7)
        return 3;
LABEL_55:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, "None")
        && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, "none"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Unknown AddTag format");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
      return 3;
    }
    return 2;
  }
  if ((*(_WORD *)a1 != 28229 || *(_BYTE *)(a1 + 2) != 100) && (*(_WORD *)a1 != 28261 || *(_BYTE *)(a1 + 2) != 100))
    goto LABEL_53;
  return 1;
}

int *kaldi::quasar::FromAddTag@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  if (v3 < 4)
    return (int *)MEMORY[0x1AF44C914](a2, off_1E5D491F8[v3]);
  return result;
}

void sub_1AE07483C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ToTagFormat(_QWORD *a1)
{
  int v2;
  uint64_t v5;
  unsigned __int16 *v6;
  int v8;
  int v9;
  _QWORD *v20;
  _QWORD v21[34];

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v2 != 3)
    {
      if (v2 != 9)
      {
        if (v2 != 12)
          goto LABEL_66;
        if ((*a1 != 0x6170655368746F62 || *((_DWORD *)a1 + 2) != 1702125938)
          && (*a1 != 0x6170657368746F62 || *((_DWORD *)a1 + 2) != 1702125938))
        {
          goto LABEL_66;
        }
        return 3;
      }
      if ((*a1 != 0x6E4F734168746F62 || *((_BYTE *)a1 + 8) != 101)
        && (*a1 != 0x6E6F736168746F62 || *((_BYTE *)a1 + 8) != 101))
      {
        goto LABEL_66;
      }
      return 2;
    }
    if (*(_WORD *)a1 != 29299 || *((_BYTE *)a1 + 2) != 99)
    {
      if (*(_WORD *)a1 != 24948 || *((_BYTE *)a1 + 2) != 114)
        goto LABEL_66;
      return 1;
    }
    return 0;
  }
  v5 = a1[1];
  if (v5 != 3)
  {
LABEL_25:
    if (v5 == 9)
    {
      if (*(_QWORD *)*a1 == 0x6E4F734168746F62 && *(_BYTE *)(*a1 + 8) == 101)
        return 2;
      v5 = a1[1];
      if (v5 == 9)
      {
        if (*(_QWORD *)*a1 == 0x6E6F736168746F62 && *(_BYTE *)(*a1 + 8) == 101)
          return 2;
        if ((v2 & 0x80) == 0)
        {
LABEL_66:
          v5 = *((unsigned __int8 *)a1 + 23);
LABEL_67:
          if (!v5)
            return 4;
LABEL_68:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "None")
            && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "none"))
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown tag format ", 19);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)a1);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
          }
          return 4;
        }
      }
    }
    if (v5 != 12)
      goto LABEL_67;
    if (*(_QWORD *)*a1 != 0x6170655368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938)
    {
      v5 = a1[1];
      if (v5 != 12)
        goto LABEL_67;
      if (*(_QWORD *)*a1 != 0x6170657368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938)
        goto LABEL_68;
    }
    return 3;
  }
  v6 = (unsigned __int16 *)*a1;
  if (*(_WORD *)*a1 == 29299 && *(_BYTE *)(*a1 + 2) == 99)
    return 0;
  v8 = *v6;
  v9 = *((unsigned __int8 *)v6 + 2);
  if (v8 != 24948 || v9 != 114)
  {
    v5 = a1[1];
    goto LABEL_25;
  }
  return 1;
}

int *kaldi::quasar::FromTagFormat@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  if (v3 < 5)
    return (int *)MEMORY[0x1AF44C914](a2, off_1E5D49218[v3]);
  return result;
}

void sub_1AE074B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1AE074C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AE074D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AE074E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AE074F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AE074F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

float kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(uint64_t a1, uint64_t a2, int a3, float a4)
{
  float result;

  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)a1 = a2;
  result = 1.0 / a4;
  *(float *)(a1 + 12) = result;
  return result;
}

void kaldi::QuantizedVectorBase<signed char>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unint64_t v7;
  float32x4_t *v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  int v35;
  float v36;
  float v37;
  uint64_t v38;
  float32x4_t *v39;
  unint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];
  _OWORD v43[2];
  _OWORD v44[2];

  if (a4 != 1.0)
    kaldi::VectorBase<float>::Scale(a3, a4);
  v40 = *(int *)(a3 + 8);
  v7 = 0;
  if ((v40 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      v8 = (float32x4_t *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v7);
      v9 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
      v10 = *(char **)a1;
      v11 = *(int *)(a1 + 8);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v13 = 0;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        do
        {
          v22 = *(int8x8_t *)&v10[v13];
          v23 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v22, *(int8x8_t *)v20.f32), 8uLL), 8uLL)));
          v24 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v22, *(int8x8_t *)v20.f32), 8uLL), 8uLL)));
          v21 = vmlaq_f32(v21, v24, v8[1]);
          v20 = vmlaq_f32(v20, v23, *v8);
          v19 = vmlaq_f32(v19, v24, *(float32x4_t *)((char *)v8 + 4 * v9 + 16));
          v18 = vmlaq_f32(v18, v23, *(float32x4_t *)((char *)v8 + 4 * v9));
          v17 = vmlaq_f32(v17, v24, *(float32x4_t *)((char *)v8 + 8 * v9 + 16));
          v16 = vmlaq_f32(v16, v23, *(float32x4_t *)((char *)v8 + 8 * v9));
          v15 = vmlaq_f32(v15, v24, *(float32x4_t *)((char *)v8 + 12 * v9 + 16));
          v14 = vmlaq_f32(v14, v23, *(float32x4_t *)((char *)v8 + 12 * v9));
          v8 += 2;
          v13 += 8;
        }
        while (v13 < v12);
        v12 = ((v12 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        v10 += v13;
      }
      else
      {
        v20 = 0uLL;
        v21 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
      }
      v25 = 0;
      v26 = (float *)(*(_QWORD *)a3 + 4 * v7);
      v27 = *(float *)(a1 + 12);
      v28 = 0.0;
      v29 = 0.0;
      v30 = 0.0;
      v31 = 0.0;
      do
      {
        v44[0] = v20;
        v44[1] = v21;
        v32 = 4 * (v25 & 7);
        v31 = *(float *)((char *)v44 + v32) + v31;
        v43[0] = v18;
        v43[1] = v19;
        v30 = *(float *)((char *)v43 + v32) + v30;
        v42[0] = v16;
        v42[1] = v17;
        v29 = *(float *)((char *)v42 + v32) + v29;
        v41[0] = v14;
        v41[1] = v15;
        v28 = v28 + *(float *)((char *)v41 + v32);
        ++v25;
      }
      while (v25 != 8);
      v33 = v11 > v12;
      v34 = v11 - v12;
      if (v33)
      {
        do
        {
          v35 = *v10++;
          v31 = v31 + (float)(v8->f32[0] * (float)v35);
          v30 = v30 + (float)(v8->f32[v9] * (float)v35);
          v29 = v29 + (float)(v8->f32[2 * v9] * (float)v35);
          v28 = v28 + (float)(v8->f32[3 * v9] * (float)v35);
          v8 = (float32x4_t *)((char *)v8 + 4);
          --v34;
        }
        while (v34);
      }
      v36 = v26[1] + (float)(v30 * v27);
      *v26 = *v26 + (float)(v31 * v27);
      v26[1] = v36;
      v37 = v26[3] + (float)(v28 * v27);
      v26[2] = v26[2] + (float)(v29 * v27);
      v26[3] = v37;
      v7 += 4;
    }
    while (v7 < (v40 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v7 < v40)
  {
    v38 = 4 * v7;
    do
    {
      v39 = (float32x4_t *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v7);
      kaldi::MatrixBase<float>::NumCols(a2);
      kaldi::VecVecOne<signed char>(v39, *(char **)a1, (float *)(*(_QWORD *)a3 + v38), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v7;
      v38 += 4;
    }
    while (v40 != v7);
  }
}

float kaldi::VecVecOne<signed char>(float32x4_t *a1, char *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  float result;

  v5 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((a4 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    v6 = 0;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    do
    {
      v11 = *(int8x16_t *)&a2[v6];
      v12 = vmovl_s8(*(int8x8_t *)v11.i8);
      v13 = vmovl_high_s8(v11);
      v7 = vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v12.i8)), *a1);
      v8 = vmlaq_f32(v8, vcvtq_f32_s32(vmovl_high_s16(v12)), a1[1]);
      v9 = vmlaq_f32(v9, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v13.i8)), a1[2]);
      v10 = vmlaq_f32(v10, vcvtq_f32_s32(vmovl_high_s16(v13)), a1[3]);
      a1 += 4;
      v6 += 16;
    }
    while (v6 < v5);
    v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
    v14 = vaddq_f32(vaddq_f32(v10, v9), vaddq_f32(v8, v7));
    a2 += v6;
  }
  else
  {
    v14 = 0uLL;
  }
  v15 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14));
  v16 = a4 - v5;
  if (a4 > v5)
  {
    do
    {
      v17 = a1->f32[0];
      a1 = (float32x4_t *)((char *)a1 + 4);
      v18 = v17;
      v19 = *a2++;
      v15 = v15 + (float)(v18 * (float)v19);
      --v16;
    }
    while (v16);
  }
  result = *a3 + (float)(v15 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<signed char>::VecVec(uint64_t a1, float32x4_t **a2)
{
  float v3;

  v3 = 0.0;
  kaldi::VecVecOne<signed char>(*a2, *(char **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

void kaldi::QuantizedVectorBase<short>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  int v10;
  int16x8_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  int16x8_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unint64_t v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  BOOL v41;
  unint64_t v42;
  int v43;
  int v44;
  __int32 v45;
  float32x4_t v46;
  __int32 v47;
  uint64_t v48;
  _OWORD *v49;

  if (a4 != 1.0)
    kaldi::VectorBase<float>::Scale(a3, a4);
  v7 = *(int *)(a3 + 8);
  v8 = 0;
  if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      v9 = (_OWORD *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8);
      v10 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
      v11 = *(int16x8_t **)a1;
      v12 = *(int *)(a1 + 8);
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v14 = 0;
        v15 = v10;
        v16 = 4 * v10;
        v17 = 12 * v10;
        v18 = 8 * v10;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 0uLL;
        do
        {
          v23 = (float32x4_t *)((char *)v9 + v16);
          v24 = (float32x4_t *)((char *)v9 + v17);
          v25 = *v11++;
          v26 = (float32x4_t *)((char *)v9 + v18);
          v27 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v25.i8));
          v28 = vcvtq_f32_s32(vmovl_high_s16(v25));
          v29 = *(float32x4_t *)v9;
          v30 = *((float32x4_t *)v9 + 1);
          v9 += 2;
          v19 = vmlaq_f32(vmlaq_f32(v19, v27, v29), v28, v30);
          v20 = vmlaq_f32(vmlaq_f32(v20, v27, *v23), v28, v23[1]);
          v21 = vmlaq_f32(vmlaq_f32(v21, v27, *v26), v28, v26[1]);
          v22 = vmlaq_f32(vmlaq_f32(v22, v27, *v24), v28, v24[1]);
          v14 += 8;
        }
        while (v14 < v13);
        v31 = ((v13 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        v32 = (__int32 *)v9 + v15;
        v33 = (__int32 *)v9 + 2 * v15;
        v34 = (__int32 *)v9 + 3 * (int)v15;
      }
      else
      {
        v31 = 0;
        v32 = (__int32 *)v9 + v10;
        v34 = (__int32 *)v9 + 3 * v10;
        v22 = 0uLL;
        v21 = 0uLL;
        v20 = 0uLL;
        v19 = 0uLL;
        v33 = (__int32 *)v9 + 2 * v10;
      }
      v35 = vzip1q_s32((int32x4_t)v19, (int32x4_t)v20);
      v36 = vzip2q_s32((int32x4_t)v19, (int32x4_t)v20);
      v37 = vzip1q_s32((int32x4_t)v21, (int32x4_t)v22);
      v38 = vzip2q_s32((int32x4_t)v21, (int32x4_t)v22);
      v39 = (int32x4_t)vaddq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v35, v37), (float32x4_t)vzip2q_s32(v35, v37)), vaddq_f32((float32x4_t)vzip1q_s32(v36, v38), (float32x4_t)vzip2q_s32(v36, v38)));
      v40 = (float32x4_t)vuzp1q_s32(v39, vrev64q_s32(v39));
      v41 = v12 > v31;
      v42 = v12 - v31;
      if (v41)
      {
        do
        {
          v44 = v11->i16[0];
          v11 = (int16x8_t *)((char *)v11 + 2);
          v43 = v44;
          v45 = *(_DWORD *)v9;
          v9 = (_OWORD *)((char *)v9 + 4);
          v46.i32[0] = v45;
          v47 = *v34++;
          v46.i32[1] = *v32++;
          v46.i32[2] = *v33++;
          v46.i32[3] = v47;
          v40 = vmlaq_n_f32(v40, v46, (float)v43);
          --v42;
        }
        while (v42);
      }
      *(float32x4_t *)(*(_QWORD *)a3 + 4 * v8) = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)a3 + 4 * v8), v40, *(float *)(a1 + 12));
      v8 += 4;
    }
    while (v8 < (v7 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v8 < v7)
  {
    v48 = 4 * v8;
    do
    {
      v49 = (_OWORD *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8);
      kaldi::MatrixBase<float>::NumCols(a2);
      kaldi::VecVecOne<short>(v49, *(int16x8_t **)a1, (float *)(*(_QWORD *)a3 + v48), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v8;
      v48 += 4;
    }
    while (v7 != v8);
  }
}

float kaldi::VecVecOne<short>(_OWORD *a1, int16x8_t *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int16x8_t v10;
  float v11;
  BOOL v12;
  unint64_t v13;
  float v14;
  float v15;
  int v16;
  float result;

  v5 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = 0;
    v7 = 0uLL;
    do
    {
      v8 = *(float32x4_t *)a1;
      v9 = *((float32x4_t *)a1 + 1);
      a1 += 2;
      v10 = *a2++;
      v7 = vmlaq_f32(vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v10.i8)), v8), vcvtq_f32_s32(vmovl_high_s16(v10)), v9);
      v6 += 8;
    }
    while (v6 < v5);
    v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v7 = 0uLL;
  }
  LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)))).u32[0];
  v12 = a4 >= v5;
  v13 = a4 - v5;
  if (v13 != 0 && v12)
  {
    do
    {
      v14 = *(float *)a1;
      a1 = (_OWORD *)((char *)a1 + 4);
      v15 = v14;
      v16 = a2->i16[0];
      a2 = (int16x8_t *)((char *)a2 + 2);
      v11 = v11 + (float)(v15 * (float)v16);
      --v13;
    }
    while (v13);
  }
  result = *a3 + (float)(v11 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<short>::VecVec(uint64_t a1, _OWORD **a2)
{
  float v3;

  v3 = 0.0;
  kaldi::VecVecOne<short>(*a2, *(int16x8_t **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

uint64_t fst::PushCompactLatticeStrings<fst::LatticeWeightTpl<float>,int>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v3 = a1;
  __p = 0;
  v5 = 0;
  v6 = 0;
  v1 = fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::Push(&v3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1AE075720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::Push(uint64_t *a1)
{
  _QWORD v3[34];

  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, 0x4000000000, 1)
    || fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*a1))
  {
    fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::ComputeShifts(a1);
    fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::ApplyShifts(a1);
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Topological sorting of state-level lattice failed (probably your lexicon has empty words or your LM has epsilon cycles; this  is a bad idea.)",
        141);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
    return 0;
  }
}

void sub_1AE0757DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::PushCompactLatticeWeights<fst::LatticeWeightTpl<float>,int>(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  float32x2_t v12;
  BOOL v13;
  _QWORD *v14;
  _DWORD *v15;
  __n128 v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _QWORD *v28;
  _BOOL4 v29;
  void *v30;
  float v31;
  _QWORD *v33;
  float v34;
  _BOOL4 v35;
  void *v36;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  _DWORD v41[2];
  void *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52[3];
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  void *__p;
  void *v58;
  _DWORD *v59;
  unint64_t v60;

  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 1)
    || fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    if (v2)
    {
      v3 = v2;
      std::vector<fst::LatticeWeightTpl<float>>::vector(v52, v2);
      if (v3 <= 0)
      {
        v36 = v52[0];
        *(_QWORD *)v52[0] = 0;
        goto LABEL_90;
      }
      v4 = v3;
      v38 = v3;
LABEL_6:
      v5 = v4--;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v56, a1, v4);
      v6.n128_u32[0] = v56;
      v40 = v6;
      v6.n128_u32[0] = HIDWORD(v56);
      v39 = v6;
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      v60 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v4, &v56);
      while (v56)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56))
        {
          if (v56)
          {
            (*(void (**)(void))(*(_QWORD *)v56 + 8))();
            goto LABEL_33;
          }
LABEL_31:
          if (v59)
            --*v59;
LABEL_33:
          LODWORD(v56) = v40.n128_u32[0];
          LODWORD(v45) = v39.n128_u32[0];
          LODWORD(v51) = 2139095040;
          v55 = INFINITY;
          if (v40.n128_f32[0] == INFINITY && *(float *)&v45 == v55 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Lattice has non-coaccessible states.", 36);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
          }
          v14 = v52[0];
          v15 = (char *)v52[0] + 8 * v4;
          v16 = v39;
          *v15 = v40.n128_u32[0];
          v15[1] = v39.n128_u32[0];
          if (v5 <= 1)
          {
            v17 = 0;
            *v14 = 0;
            do
            {
              v18 = (float *)((char *)v52[0] + 8 * v17);
              v19 = *v18;
              v20 = v18[1];
              *(float *)&v56 = *v18;
              *(float *)&v45 = v20;
              LODWORD(v51) = 2139095040;
              v55 = INFINITY;
              v16.n128_u32[0] = v56;
              if (*(float *)&v56 != INFINITY || (v16.n128_u32[0] = v45, *(float *)&v45 != v55))
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 296))(a1, v17, &v51, v16);
                while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                {
                  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
                  v45 = *(_QWORD *)v21;
                  v46 = *(void **)(v21 + 8);
                  v48 = 0;
                  v49 = 0;
                  v47 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, *(const void **)(v21 + 16), *(_QWORD *)(v21 + 24), (uint64_t)(*(_QWORD *)(v21 + 24) - *(_QWORD *)(v21 + 16)) >> 2);
                  v50 = *(_DWORD *)(v21 + 40);
                  v22 = (float *)((char *)v52[0] + 8 * v50);
                  v23 = *v22;
                  v24 = v22[1];
                  *(float *)&v56 = *v22;
                  v55 = v24;
                  v54 = INFINITY;
                  v53 = INFINITY;
                  if (*(float *)&v56 != INFINITY || v55 != v53)
                  {
                    v25 = v23 - v19;
                    v26 = v24 - v20;
                    if (v25 == -INFINITY || v26 == -INFINITY)
                    {
                      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
                        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
                        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v56);
                      }
                      v25 = INFINITY;
                      v26 = INFINITY;
                    }
                    else
                    {
                      v29 = v25 == INFINITY;
                      if (v26 == INFINITY)
                        v29 = 1;
                      if (v29)
                      {
                        v25 = INFINITY;
                        v26 = INFINITY;
                      }
                    }
                    *(float *)&v46 = v25 + *(float *)&v46;
                    *((float *)&v46 + 1) = v26 + *((float *)&v46 + 1);
                    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v51 + 88))(v51, &v45);
                  }
                  if (v47)
                  {
                    v48 = v47;
                    operator delete(v47);
                  }
                  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
                }
                if (v51)
                  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
                (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v45, a1, v17);
                LODWORD(v51) = HIDWORD(v45);
                LODWORD(v56) = v45;
                v55 = INFINITY;
                v54 = INFINITY;
                if (*(float *)&v45 != INFINITY || *(float *)&v51 != v54 || (v30 = v46, v47 != v46))
                {
                  v31 = *((float *)&v45 + 1) - v20;
                  if ((float)(*(float *)&v45 - v19) == -INFINITY || v31 == -INFINITY)
                  {
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
                      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
                      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v56);
                    }
                    v31 = INFINITY;
                    v34 = INFINITY;
                  }
                  else
                  {
                    v34 = INFINITY;
                    v35 = (float)(*(float *)&v45 - v19) == INFINITY;
                    if (v31 == INFINITY)
                      v35 = 1;
                    if (v35)
                      v31 = INFINITY;
                    else
                      v34 = *(float *)&v45 - v19;
                  }
                  v45 = __PAIR64__(LODWORD(v31), LODWORD(v34));
                  *(float *)v41 = v34;
                  *(float *)&v41[1] = v31;
                  v43 = 0;
                  v44 = 0;
                  v42 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, v46, (uint64_t)v47, ((_BYTE *)v47 - (_BYTE *)v46) >> 2);
                  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 184))(a1, v17, v41);
                  if (v42)
                  {
                    v43 = v42;
                    operator delete(v42);
                  }
                  v30 = v46;
                }
                if (v30)
                {
                  v47 = v30;
                  operator delete(v30);
                }
              }
              ++v17;
            }
            while (v17 != v38);
            v36 = v52[0];
            if (!v52[0])
              return 1;
LABEL_90:
            v52[1] = v36;
            operator delete(v36);
            return 1;
          }
          goto LABEL_6;
        }
        if (!v56)
          goto LABEL_15;
        v9 = (*(uint64_t (**)(void))(*(_QWORD *)v56 + 32))();
        if (!v56)
        {
          v11 = *(int *)(v9 + 40);
          goto LABEL_16;
        }
        v10 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
        v11 = *(int *)(v9 + 40);
LABEL_17:
        v7.n128_u64[0] = (unint64_t)vadd_f32(v10[1], *(float32x2_t *)((char *)v52[0] + 8 * v11));
        v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v7.n128_u64[0], 0);
        v12.i32[0] = v40.n128_u32[0];
        v8.n128_u64[0] = (unint64_t)vadd_f32(v12, (float32x2_t)__PAIR64__(v7.n128_u32[1], v39.n128_u32[0]));
        if (v8.n128_f32[0] >= v8.n128_f32[1])
        {
          if (v8.n128_f32[0] > v8.n128_f32[1]
            || ((v8 = v40, v40.n128_f32[0] >= v7.n128_f32[0]) ? (v13 = v40.n128_f32[0] <= v7.n128_f32[0]) : (v13 = 1),
                !v13))
          {
            v8.n128_u32[0] = v7.n128_u32[1];
            v39 = v8;
            v40 = v7;
          }
        }
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
        else
          ++v60;
      }
      if (v60 >= (unint64_t)v58)
        goto LABEL_31;
LABEL_15:
      v11 = *((int *)__p + 12 * v60 + 10);
LABEL_16:
      v10 = (float32x2_t *)((char *)__p + 48 * v60);
      goto LABEL_17;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Pushing weights of empty compact lattice", 40);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    }
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Topological sorting of state-level lattice failed (probably your lexicon has empty words or your LM has epsilon cycles; this  is a bad idea.)",
        141);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    }
    return 0;
  }
}

void sub_1AE075ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::ComputeShifts(uint64_t *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __n128 v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  void *__p;
  _BYTE *v22;
  float v23;
  int v24;
  float v25;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
  v3 = a1 + 1;
  LODWORD(v16[0]) = 0;
  std::vector<int>::resize((std::vector<int> *)(a1 + 1), v2, (std::vector<int>::const_reference)v16);
  LODWORD(v4) = v2 - 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  if ((int)v4 <= (int)result)
    return result;
  v4 = (int)v4;
  do
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(&v20, *a1, v4);
    if (!v6)
    {
      v15 = __p;
      *(_DWORD *)(*v3 + 4 * v4) = (unint64_t)(v22 - (_BYTE *)__p) >> 2;
      if (v15)
        goto LABEL_24;
      goto LABEL_25;
    }
    v19 = 0x7FFFFFFF;
    v25 = *((float *)&v20 + 1);
    LODWORD(v16[0]) = v20;
    v24 = 2139095040;
    v23 = INFINITY;
    v7.n128_u32[0] = v20;
    if (*(float *)&v20 == INFINITY)
    {
      v7.n128_f32[0] = v25;
      v9 = __p;
      v8 = v22;
      if (v25 == v23 && v22 == __p)
        goto LABEL_7;
    }
    else
    {
      v9 = __p;
      v8 = v22;
    }
    v19 = (unint64_t)(v8 - v9) >> 2;
LABEL_7:
    v10 = *a1;
    v18 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)v10 + 136))(v10, v4, v16, v7);
    while (1)
    {
      if (!v16[0])
      {
        if (v18 >= v16[2])
          goto LABEL_21;
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
        break;
      if (v16[0])
      {
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
        v13 = v16[0];
        goto LABEL_14;
      }
LABEL_13:
      v13 = 0;
      v12 = v16[1] + 48 * v18;
LABEL_14:
      v14 = *(_DWORD *)(*v3 + 4 * *(int *)(v12 + 40)) + ((*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
      if (v14 >= v19)
        v14 = v19;
      v19 = v14;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      else
        ++v18;
    }
    if (v16[0])
    {
      (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v17)
      --*v17;
LABEL_23:
    fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::CheckForConflict(a1, (uint64_t)&v20, v4, &v19, v11);
    *(_DWORD *)(*v3 + 4 * v4) = v19;
    v15 = __p;
    if (__p)
    {
LABEL_24:
      v22 = v15;
      operator delete(v15);
    }
LABEL_25:
    --v4;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  }
  while (v4 > (int)result);
  return result;
}

void sub_1AE076284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::ApplyShifts(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  std::vector<unsigned int> v26;
  float v27;
  int v28;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = v2;
    while (1)
    {
      v5 = *a1;
      v6 = *(int *)(a1[1] + 4 * v3);
      memset(&v26, 0, sizeof(v26));
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 296))(v5, v3, &v25);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
        v19 = *(_QWORD *)v7;
        v20 = *(void **)(v7 + 8);
        v22 = 0;
        v23 = 0;
        v21 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
        v24 = *(_DWORD *)(v7 + 40);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v26, (char *)v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
        v8 = (char *)v26.__end_ - (char *)v26.__begin_;
        std::vector<int>::resize(&v26, *(int *)(a1[1] + 4 * (int)v24) + v26.__end_ - v26.__begin_);
        fst::CompactLatticePusher<fst::LatticeWeightTpl<float>,int>::GetString(*a1, v24, -1, (char *)&v26.__begin_[v8 >> 2], (char *)v26.__end_);
        v17 = 0;
        v18 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, &v26.__begin_[v6], (uint64_t)v26.__end_, v26.__end_ - &v26.__begin_[v6]);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v21, (char *)__p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v17 = __p;
          operator delete(__p);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 88))(v25, &v19);
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      }
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(&v19, *a1, v3);
      LODWORD(v25) = HIDWORD(v19);
      LODWORD(__p) = v19;
      v28 = 2139095040;
      v27 = INFINITY;
      if (*(float *)&v19 != INFINITY)
        break;
      v9 = (char *)v20;
      v10 = v21;
      if (*(float *)&v25 != v27 || v21 != v20)
        goto LABEL_14;
LABEL_19:
      if (v9)
      {
        v21 = v9;
        operator delete(v9);
      }
      if (v26.__begin_)
      {
        v26.__end_ = v26.__begin_;
        operator delete(v26.__begin_);
      }
      if (++v3 == v4)
        return;
    }
    v9 = (char *)v20;
    v10 = v21;
LABEL_14:
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, &v9[4 * v6], (uint64_t)v10, (v10 - &v9[4 * v6]) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v20, (char *)__p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    v11 = *a1;
    v12 = v19;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v20, (uint64_t)v21, ((_BYTE *)v21 - (_BYTE *)v20) >> 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 184))(v11, v3, &v12);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    v9 = (char *)v20;
    goto LABEL_19;
  }
}

