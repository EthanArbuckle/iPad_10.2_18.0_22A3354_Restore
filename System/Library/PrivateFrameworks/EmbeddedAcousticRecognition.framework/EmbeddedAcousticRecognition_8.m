void sub_1ADB1D4D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::assembleEditComponents(std::string *__str@<X3>, const void **a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X2>, uint64_t a5@<X8>)
{
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  int v13;
  uint64_t v14;
  std::string __p;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (*a4 == a4[1])
  {
    std::string::operator=((std::string *)a5, __str);
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&__p);
    v7 = *(char *)(a3 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a3;
    else
      v8 = *(const std::string::value_type **)a3;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a3 + 23);
    else
      v9 = *(_QWORD *)(a3 + 8);
    v10 = std::string::append(&__p, v8, v9);
    v11 = v10->__r_.__value_.__r.__words[0];
    v16[0] = v10->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a5 + 15) = *(_QWORD *)((char *)v16 + 7);
    v14 = v16[0];
    *(_QWORD *)a5 = v11;
    *(_QWORD *)(a5 + 8) = v14;
    *(_BYTE *)(a5 + 23) = v12;
    if (v13 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1ADB1D5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::applyAdjacentEdits(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t AdjacentWordsToTarget;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  std::string *v9;
  std::string::size_type v10;
  std::string::size_type size;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *p_p;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t j;
  std::string __p;
  std::string v24;
  std::string v25;
  void **v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  std::string v31;
  std::string v32[10];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "this->targetRange");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v31);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  }
  quasar::corrective_reranking::tokenize(a3, 0, &v29);
  quasar::corrective_reranking::tokenize(a1 + 56, 0, &v28);
  quasar::corrective_reranking::getTokens((__int128 **)&v28, (uint64_t *)&v31);
  AdjacentWordsToTarget = quasar::corrective_reranking::findAdjacentWordsToTarget(a1, a1 + 24, &v31, (uint64_t *)&v29, 1);
  v7 = v6;
  v26 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  v26 = (void **)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
  quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v29, AdjacentWordsToTarget, HIDWORD(AdjacentWordsToTarget), (uint64_t *)&v28);
  quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v29, v7, HIDWORD(v7), (uint64_t *)&v26);
  memset(&v31, 0, sizeof(v31));
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(&v31, (__int128 *)v26, v27, ((char *)v27 - (char *)v26) >> 5);
  memset(v32, 0, 24);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v32, (__int128 *)v28, *((__int128 **)&v28 + 1), (uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 5);
  for (i = 0; i != 2; ++i)
  {
    v9 = &v31 + i;
    v10 = v9->__r_.__value_.__r.__words[0];
    size = v9->__r_.__value_.__l.__size_;
    while (v10 != size)
    {
      quasar::pySlice<std::string>(a3, 0, *(_DWORD *)(v10 + 24), &v24);
      v12 = *(char *)(v10 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)v10;
      else
        v13 = *(const std::string::value_type **)v10;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v10 + 23);
      else
        v14 = *(_QWORD *)(v10 + 8);
      v15 = std::string::append(&v24, v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      quasar::pySlice<std::string>(a3, *(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 24), 0x7FFFFFFFu, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v25, (const std::string::value_type *)p_p, v18);
      v20 = v19->__r_.__value_.__r.__words[0];
      v30[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v20;
      *(_QWORD *)(a3 + 8) = v30[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v30 + 7);
      *(_BYTE *)(a3 + 23) = v21;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v10 += 32;
    }
  }
  for (j = 24; j != -24; j -= 24)
  {
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31 + j;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
}

void sub_1ADB1D994(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB1DA5CLL);
}

void sub_1ADB1D9A4()
{
  JUMPOUT(0x1ADB1DA5CLL);
}

void sub_1ADB1D9AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t i;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  for (i = 24; i != -24; i -= 24)
  {
    __p = &a39 + i;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  JUMPOUT(0x1ADB1DA1CLL);
}

void quasar::corrective_reranking::TextEdit::targetIn(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 48))
    quasar::corrective_reranking::TargetRange::getTargetFromText(a1 + 24, a2, a3);
  else
    std::string::basic_string[abi:ne180100]<0>(a3, "");
}

_QWORD *quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  unsigned __int32 v17;

  v5 = *result;
  v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v7 = v6 - v5;
    v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 5);
    v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      v12 = result;
      v17 = v9.i32[0];
      std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::reserve(a4, v11);
      if ((int)(v7 >> 5) >= (uint64_t)v17)
        v13 = v17;
      else
        v13 = (int)(v7 >> 5);
      v14 = 32 * v13;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 5)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v15 = (__int128 *)(*v12 + v14);
        v16 = a4[1];
        if (v16 >= a4[2])
        {
          result = (_QWORD *)std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(a4, v15);
        }
        else
        {
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)a4, v15);
          result = (_QWORD *)(v16 + 32);
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 32;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1ADB1DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::tokenCasingFromScores(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t i;
  _QWORD v7[34];

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v3 = v2 - v1;
  if ((unint64_t)v3 > 0x10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "scores.size() <= kCaseCount");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if ((unint64_t)v3 < 5)
    return 0;
  LODWORD(result) = 0;
  v5 = v3 >> 2;
  if (v5 <= 2)
    v5 = 2;
  for (i = 1; i != v5; ++i)
  {
    if (*(float *)(v1 + 4 * i) <= *(float *)(v1 + 4 * (int)result))
      result = result;
    else
      result = i;
  }
  return result;
}

void quasar::corrective_reranking::tokenCasingApply(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;

  switch(a1)
  {
    case 3:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      break;
    case 2:
      v6 = *(char *)(a2 + 23);
      if (v6 >= 0)
        v7 = (char *)a2;
      else
        v7 = *(char **)a2;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 23);
      else
        v8 = *(_QWORD *)(a2 + 8);
      quasar::utf8::convertToUpperCaseOrEmpty(v7, v8, a3);
      break;
    case 1:
      v3 = *(char *)(a2 + 23);
      if (v3 >= 0)
        v4 = (char *)a2;
      else
        v4 = *(char **)a2;
      if (v3 >= 0)
        v5 = *(unsigned __int8 *)(a2 + 23);
      else
        v5 = *(_QWORD *)(a2 + 8);
      quasar::utf8::convertToTitleCaseOrEmpty(v4, v5, a3);
      break;
    default:
      v9 = *(char *)(a2 + 23);
      if (v9 >= 0)
        v10 = (char *)a2;
      else
        v10 = *(char **)a2;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      quasar::utf8::convertToLowerCaseOrEmpty(v10, v11, a3);
      break;
  }
}

uint64_t std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1ADB1DD28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *quasar::joinToStream<std::vector<quasar::corrective_reranking::TextRange>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::corrective_reranking::operator<<(v6);
      v7 = 0;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::PTree::PTree<std::string>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[64];

  *(_DWORD *)a1 = 4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::PTree::PTree(v6, v3);
      quasar::PTree::addChild((quasar::PTree *)a1, (const quasar::PTree *)v6);
      quasar::PTree::~PTree((quasar::PTree *)v6);
      v3 += 24;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_1ADB1DE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  quasar::PTree::~PTree((quasar::PTree *)&a9);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::PTree<float>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  float v5;
  int Type;
  std::string v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_DWORD *)a1 = 4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v5 = *v3;
      Type = quasar::getType((quasar *)a1, *v3);
      std::to_string(&v8, v5);
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 1;
      quasar::PTree::addChild((quasar::PTree *)a1, (const quasar::PTree *)&Type);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      ++v3;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_1ADB1DF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  quasar::PTree::~PTree((quasar::PTree *)&a9);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADB1E020(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [11],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [12],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = __str == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (unsigned __int8 *)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_1ADB1E268(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADB1E284(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_1ADB1E578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADB1E678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(a4 + 24) = *((_QWORD *)v5 + 3);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADB1E788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADB1E894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADB1E90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADB1E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1, a2);
  v3[7] = 0;
  v4 = v3 + 8;
  v3[11] = 0;
  std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::operator=<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,void>(v3 + 4);
  std::function<float ()(std::string)>::operator=<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1} &,void>(v4);
  return a1;
}

void sub_1ADB1EA84(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = (_QWORD *)v1[11];
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  v7 = (_QWORD *)v1[7];
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = (_QWORD *)v1[3];
  if (v9 == v1)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_16;
    v10 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v10))(v1);
LABEL_16:
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Align(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  BOOL v9;
  void **v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  char **v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void **v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  float v70;
  void **v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  float v75;
  float v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  float v100;
  _QWORD *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  float v110;
  float v111;
  float *v112;
  _QWORD *v113;
  uint64_t v114;
  float v115;
  float *v116;
  char *v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  float v124;
  uint64_t v125;
  unint64_t v126;
  char **v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  void **v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  uint64_t v152;
  unint64_t v153;
  char **v154;
  unint64_t v155;
  char *v156;
  char *v157;
  void **v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  _QWORD *v171;
  uint64_t v172;
  char **v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void **v177;
  unint64_t v178;
  _QWORD *v179;
  void *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  __int128 v198;
  __int128 v199;
  _BYTE *v200;
  _OWORD *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  __int128 v206;
  __int128 v207;
  _OWORD *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  char *v216;
  char *v217;
  __int128 v218;
  __int128 v219;
  unsigned int v220;
  _QWORD *v221;
  char *v222;
  char *v223;
  __int128 v224;
  __int128 v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  __int128 v231;
  __int128 v232;
  char *v233;
  char *v234;
  char *v235;
  __int128 v236;
  __int128 v237;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v253;
  std::string v254;
  std::string v255;
  std::string v256;
  std::string v257;
  std::string v258;
  void *v259[2];
  uint64_t v260;
  _QWORD v261[3];
  _QWORD v262[3];
  char v263[8];
  uint64_t v264;
  uint64_t v265;
  void *v266;
  char v267;
  void *v268;
  void *v269;
  _BYTE v270[24];
  _BYTE *v271;
  char v272[8];
  uint64_t v273;
  uint64_t v274;
  void *v275;
  char v276;
  void *v277;
  void *v278;
  _BYTE v279[24];
  _BYTE *v280;
  char v281[8];
  uint64_t v282;
  uint64_t v283;
  void *v284;
  char v285;
  void *v286;
  void *v287;
  _BYTE v288[24];
  _BYTE *v289;
  char v290[8];
  uint64_t v291;
  uint64_t v292;
  void *v293;
  char v294;
  void *v295;
  void *v296;
  _BYTE v297[24];
  _BYTE *v298;
  char v299[8];
  uint64_t v300;
  uint64_t v301;
  void *v302;
  char v303;
  void *v304;
  void *v305;
  _BYTE v306[24];
  _BYTE *v307;
  void *__p;
  _OWORD *v309;
  char *v310;
  _BYTE v311[40];
  void *v312;
  char v313;
  void *v314;
  void *v315;
  _BYTE v316[24];
  _BYTE *v317;
  uint64_t v318;

  v318 = *MEMORY[0x1E0C80C00];
  a4[1] = *a4;
  v5 = *a2;
  v4 = a2[1];
  v7 = *a3;
  v6 = a3[1];
  v8 = 0.0;
  v9 = v6 == *a3 && v4 == v5;
  if (v9)
    return v8;
  v250 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 3);
  LODWORD(v261[0]) = 0;
  v245 = v250 + 1;
  std::vector<float>::vector(&__p, v250 + 1, v261);
  v246 = 0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4);
  std::vector<std::vector<float>>::vector(v262, v246 + 1, (uint64_t)&__p);
  if (__p)
  {
    v309 = __p;
    operator delete(__p);
  }
  v249 = v246 + 1;
  std::vector<std::vector<kaldi::quasar::AlignmentElement<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>>>::vector(v261, v246 + 1);
  v12 = (void **)v261[0];
  kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
  v259[1] = 0;
  v260 = 0;
  v259[0] = 0;
  v13 = (char *)v12[2];
  v14 = (char *)v12[1];
  if (v14 >= v13)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - (_BYTE *)*v12) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)*v12) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x333333333333333)
      v19 = 0x666666666666666;
    else
      v19 = v17;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v12 + 2), v19);
    v21 = &v20[40 * v16];
    v23 = &v20[40 * v22];
    *(_DWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = &__p;
    *((_DWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 3) = v259;
    *((_QWORD *)v21 + 4) = 0;
    v15 = v21 + 40;
    v25 = (char *)*v12;
    v24 = (char *)v12[1];
    if (v24 != *v12)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 40);
        v27 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v21 - 24) = v27;
        *(_OWORD *)(v21 - 40) = v26;
        v21 -= 40;
        v24 -= 40;
      }
      while (v24 != v25);
      v24 = (char *)*v12;
    }
    *v12 = v21;
    v12[1] = v15;
    v12[2] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_DWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = &__p;
    *((_DWORD *)v14 + 4) = 0;
    v15 = v14 + 40;
    *((_QWORD *)v14 + 3) = v259;
    *((_QWORD *)v14 + 4) = 0;
  }
  v12[1] = v15;
  if (SHIBYTE(v260) < 0)
    operator delete(v259[0]);
  v28 = v317;
  if (v317 == v316)
  {
    v29 = 4;
    v28 = v316;
    goto LABEL_26;
  }
  if (v317)
  {
    v29 = 5;
LABEL_26:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  if (v314)
  {
    v315 = v314;
    operator delete(v314);
  }
  v243 = v5;
  v244 = v4;
  v241 = v7;
  v242 = v6;
  v240 = a4;
  if (v313 < 0)
    operator delete(v312);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v311);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v309);
  v247 = a3;
  if (v249 >= 2)
  {
    v30 = 1;
    do
    {
      v31 = v30 - 1;
      v32 = **(float **)(v262[0] + 24 * (v30 - 1));
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v299, *a2 + 176 * (v30 - 1));
      v33 = a1[7];
      if (!v33)
        std::__throw_bad_function_call[abi:ne180100]();
      v34 = (*(float (**)(uint64_t, char *))(*(_QWORD *)v33 + 48))(v33, v299);
      **(float **)(v262[0] + 24 * v30) = v32 + v34;
      v35 = v307;
      if (v307 == v306)
      {
        v35 = v306;
        v36 = 4;
      }
      else
      {
        if (!v307)
          goto LABEL_39;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_39:
      if (v304)
      {
        v305 = v304;
        operator delete(v304);
      }
      if (v303 < 0)
        operator delete(v302);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v301);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v300);
      v37 = v261[0];
      v38 = *a2 + 176 * v31;
      v309 = 0;
      __p = 0;
      v310 = 0;
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v290, v38);
      v39 = a1[7];
      if (!v39)
        std::__throw_bad_function_call[abi:ne180100]();
      v40 = (*(float (**)(uint64_t, char *))(*(_QWORD *)v39 + 48))(v39, v290);
      v41 = v40;
      v42 = v37 + 24 * v30;
      v45 = *(_QWORD *)(v42 + 8);
      v44 = (char **)(v42 + 8);
      v43 = v45;
      v46 = v44[1];
      if (v45 >= (unint64_t)v46)
      {
        v48 = (void **)(v37 + 24 * v30);
        v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v43 - (_QWORD)*v48) >> 3);
        v50 = v49 + 1;
        if (v49 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (_BYTE *)*v48) >> 3);
        if (2 * v51 > v50)
          v50 = 2 * v51;
        if (v51 >= 0x333333333333333)
          v52 = 0x666666666666666;
        else
          v52 = v50;
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v44 + 1), v52);
        v55 = &v53[40 * v49];
        *(_DWORD *)v55 = v31;
        *((_QWORD *)v55 + 1) = v38;
        *((_DWORD *)v55 + 4) = 0;
        *((_QWORD *)v55 + 3) = &__p;
        *((_DWORD *)v55 + 8) = 2;
        *((float *)v55 + 9) = v41;
        v56 = *v44;
        v57 = (char *)*v48;
        v58 = v55;
        if (*v44 != *v48)
        {
          do
          {
            v59 = *(_OWORD *)(v56 - 40);
            v60 = *(_OWORD *)(v56 - 24);
            *((_QWORD *)v58 - 1) = *((_QWORD *)v56 - 1);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v56 -= 40;
          }
          while (v56 != v57);
          v56 = (char *)*v48;
        }
        *v48 = v58;
        v47 = v55 + 40;
        *v44 = v55 + 40;
        v44[1] = &v53[40 * v54];
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_DWORD *)v43 = v31;
        *(_QWORD *)(v43 + 8) = v38;
        *(_DWORD *)(v43 + 16) = 0;
        *(_QWORD *)(v43 + 24) = &__p;
        *(_DWORD *)(v43 + 32) = 2;
        v47 = (char *)(v43 + 40);
        *(float *)(v43 + 36) = v40;
      }
      *v44 = v47;
      v61 = v298;
      if (v298 == v297)
      {
        v61 = v297;
        v62 = 4;
        goto LABEL_61;
      }
      if (v298)
      {
        v62 = 5;
LABEL_61:
        (*(void (**)(void))(*v61 + 8 * v62))();
      }
      if (v295)
      {
        v296 = v295;
        operator delete(v295);
      }
      if (v294 < 0)
        operator delete(v293);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v292);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v291);
      if (SHIBYTE(v310) < 0)
        operator delete(__p);
      v9 = v30++ == v246;
    }
    while (!v9);
  }
  v63 = a2;
  if (v245 >= 2)
  {
    v64 = 1;
    while (1)
    {
      v65 = v64 - 1;
      v66 = *(float *)(*(_QWORD *)v262[0] + 4 * (v64 - 1));
      v67 = *v247 + 24 * (v64 - 1);
      if (*(char *)(v67 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)v67, *(_QWORD *)(v67 + 8));
      }
      else
      {
        v68 = *(_OWORD *)v67;
        v258.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 16);
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v68;
      }
      v69 = a1[11];
      if (!v69)
        std::__throw_bad_function_call[abi:ne180100]();
      v70 = (*(float (**)(uint64_t, std::string *))(*(_QWORD *)v69 + 48))(v69, &v258);
      *(float *)(*(_QWORD *)v262[0] + 4 * v64) = v66 + v70;
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      v71 = (void **)v261[0];
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
      v72 = *v247 + 24 * v65;
      if (*(char *)(v72 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)v72, *(_QWORD *)(v72 + 8));
      }
      else
      {
        v73 = *(_OWORD *)v72;
        v257.__r_.__value_.__r.__words[2] = *(_QWORD *)(v72 + 16);
        *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v73;
      }
      v74 = a1[11];
      if (!v74)
        std::__throw_bad_function_call[abi:ne180100]();
      v75 = (*(float (**)(uint64_t, std::string *))(*(_QWORD *)v74 + 48))(v74, &v257);
      v76 = v75;
      v77 = (char *)v71[2];
      v78 = (char *)v71[1];
      if (v78 >= v77)
      {
        v80 = 0xCCCCCCCCCCCCCCCDLL * ((v78 - (_BYTE *)*v71) >> 3);
        v81 = v80 + 1;
        if (v80 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v82 = 0xCCCCCCCCCCCCCCCDLL * ((v77 - (_BYTE *)*v71) >> 3);
        if (2 * v82 > v81)
          v81 = 2 * v82;
        if (v82 >= 0x333333333333333)
          v83 = 0x666666666666666;
        else
          v83 = v81;
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v71 + 2), v83);
        v86 = &v84[40 * v80];
        *(_DWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = &__p;
        *((_DWORD *)v86 + 4) = v65;
        *((_QWORD *)v86 + 3) = v72;
        *((_DWORD *)v86 + 8) = 3;
        *((float *)v86 + 9) = v76;
        v88 = (char *)*v71;
        v87 = (char *)v71[1];
        v89 = v86;
        if (v87 != *v71)
        {
          do
          {
            v90 = *(_OWORD *)(v87 - 40);
            v91 = *(_OWORD *)(v87 - 24);
            *((_QWORD *)v89 - 1) = *((_QWORD *)v87 - 1);
            *(_OWORD *)(v89 - 24) = v91;
            *(_OWORD *)(v89 - 40) = v90;
            v89 -= 40;
            v87 -= 40;
          }
          while (v87 != v88);
          v87 = (char *)*v71;
        }
        v79 = v86 + 40;
        *v71 = v89;
        v71[1] = v86 + 40;
        v71[2] = &v84[40 * v85];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_DWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = &__p;
        *((_DWORD *)v78 + 4) = v65;
        *((_QWORD *)v78 + 3) = v72;
        *((_DWORD *)v78 + 8) = 3;
        v79 = v78 + 40;
        *((float *)v78 + 9) = v75;
      }
      v71[1] = v79;
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v257.__r_.__value_.__l.__data_);
      v92 = v317;
      v63 = a2;
      if (v317 == v316)
        break;
      if (v317)
      {
        v93 = 5;
LABEL_101:
        (*(void (**)(void))(*v92 + 8 * v93))();
      }
      if (v314)
      {
        v315 = v314;
        operator delete(v314);
      }
      if (v313 < 0)
        operator delete(v312);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v311);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v309);
      v9 = v64++ == v250;
      if (v9)
        goto LABEL_108;
    }
    v92 = v316;
    v93 = 4;
    goto LABEL_101;
  }
LABEL_108:
  v94 = v247;
  if (v249 >= 2)
  {
    v251 = 1;
    while (v245 < 2)
    {
LABEL_238:
      v9 = v251++ == v246;
      if (v9)
        goto LABEL_240;
    }
    v253 = v251 - 1;
    v95 = 1;
    while (1)
    {
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v281, *v63 + 176 * v253);
      v96 = v95 - 1;
      v97 = *v94 + 24 * (v95 - 1);
      if (*(char *)(v97 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)v97, *(_QWORD *)(v97 + 8));
      }
      else
      {
        v98 = *(_OWORD *)v97;
        v256.__r_.__value_.__r.__words[2] = *(_QWORD *)(v97 + 16);
        *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v98;
      }
      v99 = a1[3];
      if (!v99)
        std::__throw_bad_function_call[abi:ne180100]();
      v100 = (*(float (**)(uint64_t, char *, std::string *))(*(_QWORD *)v99 + 48))(v99, v281, &v256);
      if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v256.__r_.__value_.__l.__data_);
      v101 = v289;
      if (v289 == v288)
      {
        v101 = v288;
        v102 = 4;
      }
      else
      {
        if (!v289)
          goto LABEL_123;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_123:
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285 < 0)
        operator delete(v284);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v283);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v282);
      v103 = *(float *)(*(_QWORD *)(v262[0] + 24 * v253) + 4 * v95);
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v272, *v63 + 176 * v253);
      v104 = a1[7];
      if (!v104)
        std::__throw_bad_function_call[abi:ne180100]();
      v105 = (*(float (**)(uint64_t, char *))(*(_QWORD *)v104 + 48))(v104, v272);
      v106 = *(float *)(*(_QWORD *)(v262[0] + 24 * v251) + 4 * v96);
      v107 = *v94 + 24 * v96;
      if (*(char *)(v107 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)v107, *(_QWORD *)(v107 + 8));
      }
      else
      {
        v108 = *(_OWORD *)v107;
        v255.__r_.__value_.__r.__words[2] = *(_QWORD *)(v107 + 16);
        *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v108;
      }
      v109 = a1[11];
      if (!v109)
        std::__throw_bad_function_call[abi:ne180100]();
      v110 = (*(float (**)(uint64_t, std::string *))(*(_QWORD *)v109 + 48))(v109, &v255);
      v111 = *(float *)(*(_QWORD *)(v262[0] + 24 * v253) + 4 * v96);
      v112 = (float *)operator new(0xCuLL);
      *v112 = v103 + v105;
      v112[1] = v106 + v110;
      v112[2] = v100 + v111;
      if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v255.__r_.__value_.__l.__data_);
      v113 = v280;
      if (v280 == v279)
      {
        v113 = v279;
        v114 = 4;
      }
      else
      {
        if (!v280)
          goto LABEL_139;
        v114 = 5;
      }
      (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_139:
      if (v277)
      {
        v278 = v277;
        operator delete(v277);
      }
      if (v276 < 0)
        operator delete(v275);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v274);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v273);
      v115 = *v112;
      if (v112[1] >= *v112)
      {
        v116 = v112;
      }
      else
      {
        v115 = v112[1];
        v116 = v112 + 1;
      }
      if (v112[2] >= v115)
        v117 = (char *)v116;
      else
        v117 = (char *)(v112 + 2);
      v118 = v117 - (char *)v112;
      v119 = (v117 - (char *)v112) >> 2;
      *(_DWORD *)(*(_QWORD *)(v262[0] + 24 * v251) + 4 * v95) = *(_DWORD *)v117;
      switch(v119)
      {
        case 2:
          goto LABEL_206;
        case 1:
          v131 = v261[0];
          kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
          v132 = *v94 + 24 * v96;
          if (*(char *)(v132 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)v132, *(_QWORD *)(v132 + 8));
          }
          else
          {
            v133 = *(_OWORD *)v132;
            v254.__r_.__value_.__r.__words[2] = *(_QWORD *)(v132 + 16);
            *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v133;
          }
          v149 = a1[11];
          if (!v149)
            std::__throw_bad_function_call[abi:ne180100]();
          v150 = (*(float (**)(uint64_t, std::string *))(*(_QWORD *)v149 + 48))(v149, &v254);
          v151 = v150;
          v152 = v131 + 24 * v251;
          v155 = *(_QWORD *)(v152 + 8);
          v154 = (char **)(v152 + 8);
          v153 = v155;
          v156 = v154[1];
          if (v155 >= (unint64_t)v156)
          {
            v158 = (void **)(v131 + 24 * v251);
            v159 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v153 - (_QWORD)*v158) >> 3);
            v160 = v159 + 1;
            if (v159 + 1 > 0x666666666666666)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v161 = 0xCCCCCCCCCCCCCCCDLL * ((v156 - (_BYTE *)*v158) >> 3);
            if (2 * v161 > v160)
              v160 = 2 * v161;
            if (v161 >= 0x333333333333333)
              v162 = 0x666666666666666;
            else
              v162 = v160;
            v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v154 + 1), v162);
            v165 = &v163[40 * v159];
            *(_DWORD *)v165 = v251;
            *((_QWORD *)v165 + 1) = &__p;
            *((_DWORD *)v165 + 4) = v96;
            *((_QWORD *)v165 + 3) = v132;
            *((_DWORD *)v165 + 8) = 3;
            *((float *)v165 + 9) = v151;
            v166 = *v154;
            v167 = (char *)*v158;
            v168 = v165;
            if (*v154 != *v158)
            {
              do
              {
                v169 = *(_OWORD *)(v166 - 40);
                v170 = *(_OWORD *)(v166 - 24);
                *((_QWORD *)v168 - 1) = *((_QWORD *)v166 - 1);
                *(_OWORD *)(v168 - 24) = v170;
                *(_OWORD *)(v168 - 40) = v169;
                v168 -= 40;
                v166 -= 40;
              }
              while (v166 != v167);
              v166 = (char *)*v158;
            }
            *v158 = v168;
            v157 = v165 + 40;
            *v154 = v165 + 40;
            v154[1] = &v163[40 * v164];
            if (v166)
              operator delete(v166);
          }
          else
          {
            *(_DWORD *)v153 = v251;
            *(_QWORD *)(v153 + 8) = &__p;
            *(_DWORD *)(v153 + 16) = v96;
            *(_QWORD *)(v153 + 24) = v132;
            *(_DWORD *)(v153 + 32) = 3;
            v157 = (char *)(v153 + 40);
            *(float *)(v153 + 36) = v150;
          }
          *v154 = v157;
          if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v254.__r_.__value_.__l.__data_);
          v171 = v317;
          v94 = v247;
          v63 = a2;
          if (v317 == v316)
          {
            v171 = v316;
            v172 = 4;
LABEL_200:
            (*(void (**)(void))(*v171 + 8 * v172))();
          }
          else if (v317)
          {
            v172 = 5;
            goto LABEL_200;
          }
          if (v314)
          {
            v315 = v314;
            operator delete(v314);
          }
          if (v313 < 0)
            operator delete(v312);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v311);
          std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v309);
          if (v118 != 8)
            break;
LABEL_206:
          v173 = (char **)(v261[0] + 24 * v251);
          v174 = *v63 + 176 * v253;
          v175 = *v94 + 24 * v96;
          v177 = (void **)(v173 + 1);
          v176 = (unint64_t)v173[1];
          v179 = v173 + 2;
          v178 = (unint64_t)v173[2];
          if (v100 > 0.0)
          {
            if (v176 < v178)
            {
              *(_DWORD *)v176 = v253;
              *(_QWORD *)(v176 + 8) = v174;
              *(_DWORD *)(v176 + 16) = v96;
              *(_QWORD *)(v176 + 24) = v175;
              *(_DWORD *)(v176 + 32) = 1;
              goto LABEL_211;
            }
            v181 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v176 - (_QWORD)*v173) >> 3);
            v182 = v181 + 1;
            if (v181 + 1 > 0x666666666666666)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v183 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v178 - (_QWORD)*v173) >> 3);
            if (2 * v183 > v182)
              v182 = 2 * v183;
            if (v183 >= 0x333333333333333)
              v184 = 0x666666666666666;
            else
              v184 = v182;
            v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)v179, v184);
            v187 = &v185[40 * v181];
            *(_DWORD *)v187 = v253;
            *((_QWORD *)v187 + 1) = v174;
            *((_DWORD *)v187 + 4) = v96;
            *((_QWORD *)v187 + 3) = v175;
            *((_DWORD *)v187 + 8) = 1;
            *((float *)v187 + 9) = v100;
            v188 = (char *)*v177;
            v189 = *v173;
            v190 = v187;
            if (*v177 != *v173)
            {
              v94 = v247;
              v63 = a2;
              do
              {
                v191 = *(_OWORD *)(v188 - 40);
                v192 = *(_OWORD *)(v188 - 24);
                *((_QWORD *)v190 - 1) = *((_QWORD *)v188 - 1);
                *(_OWORD *)(v190 - 24) = v192;
                *(_OWORD *)(v190 - 40) = v191;
                v190 -= 40;
                v188 -= 40;
              }
              while (v188 != v189);
              goto LABEL_231;
            }
LABEL_232:
            v94 = v247;
            v63 = a2;
            goto LABEL_233;
          }
          if (v176 >= v178)
          {
            v193 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v176 - (_QWORD)*v173) >> 3);
            v194 = v193 + 1;
            if (v193 + 1 > 0x666666666666666)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v195 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v178 - (_QWORD)*v173) >> 3);
            if (2 * v195 > v194)
              v194 = 2 * v195;
            if (v195 >= 0x333333333333333)
              v196 = 0x666666666666666;
            else
              v196 = v194;
            v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)v179, v196);
            v187 = &v185[40 * v193];
            *(_DWORD *)v187 = v253;
            *((_QWORD *)v187 + 1) = v174;
            *((_DWORD *)v187 + 4) = v96;
            *((_QWORD *)v187 + 3) = v175;
            *((_DWORD *)v187 + 8) = 0;
            *((float *)v187 + 9) = v100;
            v188 = (char *)*v177;
            v197 = *v173;
            v190 = v187;
            if (*v177 == *v173)
              goto LABEL_232;
            v94 = v247;
            v63 = a2;
            do
            {
              v198 = *(_OWORD *)(v188 - 40);
              v199 = *(_OWORD *)(v188 - 24);
              *((_QWORD *)v190 - 1) = *((_QWORD *)v188 - 1);
              *(_OWORD *)(v190 - 24) = v199;
              *(_OWORD *)(v190 - 40) = v198;
              v190 -= 40;
              v188 -= 40;
            }
            while (v188 != v197);
LABEL_231:
            v188 = *v173;
LABEL_233:
            *v173 = v190;
            v180 = v187 + 40;
            *v177 = v187 + 40;
            *v179 = &v185[40 * v186];
            if (v188)
              operator delete(v188);
          }
          else
          {
            *(_DWORD *)v176 = v253;
            *(_QWORD *)(v176 + 8) = v174;
            *(_DWORD *)(v176 + 16) = v96;
            *(_QWORD *)(v176 + 24) = v175;
            *(_DWORD *)(v176 + 32) = 0;
LABEL_211:
            v180 = (void *)(v176 + 40);
            *(float *)(v176 + 36) = v100;
            v63 = a2;
          }
          *v177 = v180;
          break;
        case 0:
          v120 = v261[0];
          v121 = *v63 + 176 * v253;
          v309 = 0;
          __p = 0;
          v310 = 0;
          kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v263, v121);
          v122 = a1[7];
          if (!v122)
            std::__throw_bad_function_call[abi:ne180100]();
          v123 = (*(float (**)(uint64_t, char *))(*(_QWORD *)v122 + 48))(v122, v263);
          v124 = v123;
          v125 = v120 + 24 * v251;
          v128 = *(_QWORD *)(v125 + 8);
          v127 = (char **)(v125 + 8);
          v126 = v128;
          v129 = v127[1];
          if (v128 >= (unint64_t)v129)
          {
            v134 = (void **)(v120 + 24 * v251);
            v135 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v126 - (_QWORD)*v134) >> 3);
            v136 = v135 + 1;
            if (v135 + 1 > 0x666666666666666)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v137 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - (_BYTE *)*v134) >> 3);
            if (2 * v137 > v136)
              v136 = 2 * v137;
            if (v137 >= 0x333333333333333)
              v138 = 0x666666666666666;
            else
              v138 = v136;
            v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v127 + 1), v138);
            v141 = &v139[40 * v135];
            *(_DWORD *)v141 = v253;
            *((_QWORD *)v141 + 1) = v121;
            *((_DWORD *)v141 + 4) = v95;
            *((_QWORD *)v141 + 3) = &__p;
            *((_DWORD *)v141 + 8) = 2;
            *((float *)v141 + 9) = v124;
            v142 = *v127;
            v143 = (char *)*v134;
            v144 = v141;
            if (*v127 != *v134)
            {
              do
              {
                v145 = *(_OWORD *)(v142 - 40);
                v146 = *(_OWORD *)(v142 - 24);
                *((_QWORD *)v144 - 1) = *((_QWORD *)v142 - 1);
                *(_OWORD *)(v144 - 24) = v146;
                *(_OWORD *)(v144 - 40) = v145;
                v144 -= 40;
                v142 -= 40;
              }
              while (v142 != v143);
              v142 = (char *)*v134;
            }
            *v134 = v144;
            v130 = v141 + 40;
            *v127 = v141 + 40;
            v127[1] = &v139[40 * v140];
            if (v142)
              operator delete(v142);
          }
          else
          {
            *(_DWORD *)v126 = v253;
            *(_QWORD *)(v126 + 8) = v121;
            *(_DWORD *)(v126 + 16) = v95;
            *(_QWORD *)(v126 + 24) = &__p;
            *(_DWORD *)(v126 + 32) = 2;
            v130 = (char *)(v126 + 40);
            *(float *)(v126 + 36) = v123;
          }
          *v127 = v130;
          v147 = v271;
          if (v271 == v270)
          {
            v147 = v270;
            v148 = 4;
LABEL_192:
            (*(void (**)(void))(*v147 + 8 * v148))();
          }
          else if (v271)
          {
            v148 = 5;
            goto LABEL_192;
          }
          if (v268)
          {
            v269 = v268;
            operator delete(v268);
          }
          if (v267 < 0)
            operator delete(v266);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v265);
          std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v264);
          if (SHIBYTE(v310) < 0)
            operator delete(__p);
          break;
      }
      operator delete(v112);
      v9 = v95++ == v250;
      if (v9)
        goto LABEL_238;
    }
  }
LABEL_240:
  v309 = 0;
  __p = 0;
  v310 = 0;
  if (v244 != v243 || (v200 = 0, v201 = 0, v242 != v241))
  {
    v201 = 0;
    v202 = v250;
    v203 = v246;
    do
    {
      v204 = *(_QWORD *)(v261[0] + 24 * v203);
      v205 = (int *)(v204 + 40 * v202);
      if (v201 >= (_OWORD *)v310)
      {
        v208 = __p;
        v209 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v201 - (_BYTE *)__p) >> 3);
        v210 = v209 + 1;
        if (v209 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v310 - (_BYTE *)__p) >> 3) > v210)
          v210 = 0x999999999999999ALL * ((v310 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v310 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v211 = 0x666666666666666;
        else
          v211 = v210;
        if (v211)
        {
          v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)&v310, v211);
          v201 = v309;
          v208 = __p;
        }
        else
        {
          v212 = 0;
        }
        v213 = &v212[40 * v209];
        v214 = *(_OWORD *)v205;
        v215 = *((_OWORD *)v205 + 1);
        *((_QWORD *)v213 + 4) = *((_QWORD *)v205 + 4);
        *(_OWORD *)v213 = v214;
        *((_OWORD *)v213 + 1) = v215;
        if (v201 == v208)
        {
          v217 = &v212[40 * v209];
        }
        else
        {
          v216 = &v212[40 * v209];
          do
          {
            v217 = v216 - 40;
            v218 = *(_OWORD *)((char *)v201 - 40);
            v219 = *(_OWORD *)((char *)v201 - 24);
            *((_QWORD *)v216 - 1) = *((_QWORD *)v201 - 1);
            *(_OWORD *)(v216 - 24) = v219;
            *(_OWORD *)(v216 - 40) = v218;
            v201 = (_OWORD *)((char *)v201 - 40);
            v216 -= 40;
          }
          while (v201 != v208);
        }
        v201 = v213 + 40;
        __p = v217;
        v309 = v213 + 40;
        v310 = &v212[40 * v211];
        if (v208)
          operator delete(v208);
      }
      else
      {
        v206 = *(_OWORD *)v205;
        v207 = *((_OWORD *)v205 + 1);
        *((_QWORD *)v201 + 4) = *((_QWORD *)v205 + 4);
        *v201 = v206;
        v201[1] = v207;
        v201 = (_OWORD *)((char *)v201 + 40);
      }
      v309 = v201;
      v203 = *v205;
      v202 = *(int *)(v204 + 40 * v202 + 16);
    }
    while (v203 | v202);
    v200 = __p;
  }
  v220 = -858993459 * ((unint64_t)((char *)v201 - v200) >> 3) - 1;
  if ((v220 & 0x80000000) == 0)
  {
    v221 = v240 + 2;
    v222 = (char *)v240[1];
    do
    {
      v223 = (char *)__p + 40 * v220;
      if ((unint64_t)v222 >= *v221)
      {
        v226 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v222[-*v240] >> 3);
        v227 = v226 + 1;
        if (v226 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(*v221 - *v240) >> 3) > v227)
          v227 = 0x999999999999999ALL * ((uint64_t)(*v221 - *v240) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v221 - *v240) >> 3) >= 0x333333333333333)
          v228 = 0x666666666666666;
        else
          v228 = v227;
        if (v228)
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)v221, v228);
        else
          v229 = 0;
        v230 = &v229[40 * v226];
        v231 = *(_OWORD *)v223;
        v232 = *((_OWORD *)v223 + 1);
        *((_QWORD *)v230 + 4) = *((_QWORD *)v223 + 4);
        *(_OWORD *)v230 = v231;
        *((_OWORD *)v230 + 1) = v232;
        v234 = (char *)*v240;
        v233 = (char *)v240[1];
        v235 = v230;
        if (v233 != (char *)*v240)
        {
          do
          {
            v236 = *(_OWORD *)(v233 - 40);
            v237 = *(_OWORD *)(v233 - 24);
            *((_QWORD *)v235 - 1) = *((_QWORD *)v233 - 1);
            *(_OWORD *)(v235 - 24) = v237;
            *(_OWORD *)(v235 - 40) = v236;
            v235 -= 40;
            v233 -= 40;
          }
          while (v233 != v234);
          v233 = (char *)*v240;
        }
        v222 = v230 + 40;
        *v240 = v235;
        v240[1] = v230 + 40;
        v240[2] = &v229[40 * v228];
        if (v233)
          operator delete(v233);
      }
      else
      {
        v224 = *(_OWORD *)v223;
        v225 = *((_OWORD *)v223 + 1);
        *((_QWORD *)v222 + 4) = *((_QWORD *)v223 + 4);
        *(_OWORD *)v222 = v224;
        *((_OWORD *)v222 + 1) = v225;
        v222 += 40;
      }
      v240[1] = v222;
    }
    while ((int)v220-- > 0);
    v200 = __p;
  }
  v8 = *(float *)(*(_QWORD *)(v262[0] + 24 * v246) + 4 * v250);
  if (v200)
  {
    v309 = v200;
    operator delete(v200);
  }
  __p = v261;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v262;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v8;
}

void sub_1ADB20198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a59 < 0)
    operator delete(__p);
  kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot((uint64_t)&STACK[0x520]);
  STACK[0x520] = (unint64_t)&a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  STACK[0x520] = (unint64_t)&a63;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 168);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(a1 + 8);
  return a1;
}

_QWORD *std::__function::__value_func<float ()(std::string)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADB20568(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3DCF8;
  return result;
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3DCF8;
}

float std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke[abi:ne180100]<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1 + 8, a2);
}

uint64_t std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::target_type()
{
}

double std::__invoke[abi:ne180100]<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[40];
  _BYTE v7[40];
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  char v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v6, (uint64_t *)(a2 + 8));
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v7, (uint64_t *)(a2 + 48));
  *(_OWORD *)v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_BYTE *)(a2 + 136);
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v13, a2 + 144);
  v3 = v14;
  if (v14 == v13)
  {
    v4 = 4;
    v3 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)v6);
  return 1.0;
}

uint64_t std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADB20924(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3DCA0;
  return result;
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3DCA0;
}

float std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;

  v2 = *(void **)a2;
  v3 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v3 < 0)
    operator delete(v2);
  return 1.0;
}

uint64_t std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::target_type()
{
}

_QWORD *std::vector<std::vector<kaldi::quasar::AlignmentElement<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADB20A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::DecoderChainPersistentData::DecoderChainPersistentData(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

float quasar::DecoderChainPersistentData::getAverageConfidence(quasar::DecoderChainPersistentData *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(float *)this / (float)v1;
  else
    return 0.0;
}

float quasar::DecoderChainPersistentData::updateData(uint64_t a1, uint64_t ***a2, float result)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;

  v3 = **a2;
  if ((*a2)[1] != v3)
  {
    v5 = *v3;
    v4 = (**a2)[1];
    *(_QWORD *)(a1 + 8) += 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 5);
    if (v4 == v5)
    {
      v7 = 0.0;
    }
    else
    {
      v6 = 0;
      do
      {
        v6 = (int)(float)(*(float *)(v5 + 40) + (float)v6);
        v5 += 224;
      }
      while (v5 != v4);
      v7 = (float)v6;
    }
    result = *(float *)a1 + v7;
    *(float *)a1 = result;
  }
  return result;
}

float quasar::DecoderChainOutput::updatePersistentData(quasar::DecoderChainOutput *this, float a2)
{
  uint64_t v3;
  uint64_t **v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t **v10[2];

  v3 = *((_QWORD *)this + 76);
  v4 = (uint64_t **)*((_QWORD *)this + 45);
  v10[0] = *((uint64_t ***)this + 44);
  v10[1] = v4;
  if (!v4)
    return quasar::DecoderChainPersistentData::updateData(v3, v10, a2);
  v5 = (unint64_t *)(v4 + 1);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7.n128_f32[0] = quasar::DecoderChainPersistentData::updateData(v3, v10, a2);
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v8 - 1, v5));
  if (!v8)
  {
    ((void (*)(uint64_t **, __n128))(*v4)[2])(v4, v7);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
  return v7.n128_f32[0];
}

uint64_t quasar::DecoderChainOutput::DecoderChainOutput(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _OWORD *v10;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 424) = *a3;
  v4 = a3[1];
  *(_QWORD *)(a1 + 432) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = xmmword_1AE1611D0;
  *(_QWORD *)(a1 + 464) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 472) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 480) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = operator new(0x30uLL);
  *(_OWORD *)((char *)v10 + 8) = 0u;
  *(_QWORD *)v10 = &unk_1E5D41760;
  v10[2] = 0u;
  *((_QWORD *)v10 + 3) = 0;
  *(_QWORD *)(a1 + 488) = (char *)v10 + 24;
  *(_QWORD *)(a1 + 496) = v10;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 504) = _D1;
  *(_DWORD *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 516) = 0;
  *(_QWORD *)(a1 + 520) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 574) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 613) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 920) = 1065353216;
  *(_BYTE *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 980) = 0u;
  *(_OWORD *)(a1 + 996) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(_OWORD *)(a1 + 1028) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1058) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 976) = 1065353216;
  *(_QWORD *)(a1 + 1080) = 0x4022000000000000;
  *(_WORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1092) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1100) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1144), "▁");
  return a1;
}

void sub_1ADB20E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, quasar::AudioAnalytics *a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void **v24;
  uint64_t v25;
  quasar::AudioAnalytics *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;

  *(_QWORD *)(v33 - 88) = v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 1056);
  if (*(char *)(v23 + 1055) < 0)
    operator delete(*(void **)(v23 + 1032));
  v34 = *(void **)(v23 + 1008);
  if (v34)
  {
    *(_QWORD *)(v23 + 1016) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v23 + 984);
  if (v35)
  {
    *(_QWORD *)(v23 + 992) = v35;
    operator delete(v35);
  }
  if (*(char *)(v23 + 959) < 0)
    operator delete(*v24);
  if (*(char *)(v23 + 903) < 0)
    operator delete(*v31);
  *(_QWORD *)(v33 - 88) = v27;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  quasar::AudioAnalytics::~AudioAnalytics(v26);
  *(_QWORD *)(v33 - 88) = v30;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a15);
  *(_QWORD *)(v33 - 88) = v32;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 472);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 424);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 408);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 392);
  *(_QWORD *)(v33 - 88) = v23 + 368;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 352);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 336);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 320);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 304);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 288);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 272);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 256);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a21);
  if (*(_BYTE *)(v23 + 200))
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a23);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(*(_QWORD *)(v33 - 104), *(_QWORD **)(v23 + 128));
  *(_QWORD *)(v33 - 88) = *(_QWORD *)(v33 - 96);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  v36 = *(void **)(v23 + 72);
  if (v36)
  {
    *(_QWORD *)(v23 + 80) = v36;
    operator delete(v36);
  }
  *(_QWORD *)(v33 - 88) = v23 + 48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  *(_QWORD *)(v33 - 88) = v23 + 24;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  *(_QWORD *)(v33 - 88) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 88));
  _Unwind_Resume(a1);
}

BOOL quasar::DecoderChainOutput::nonEmptyTopChoice(quasar::DecoderChainOutput *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 44);
  return v1 && *v1 != v1[1] && *(_QWORD *)*v1 != *(_QWORD *)(*v1 + 8);
}

BOOL quasar::DecoderChainOutput::scaleResultLattice(quasar::DecoderChainOutput *this, float a2, float a3, char a4)
{
  float v4;
  float v5;
  float v7;
  float v8;
  _BOOL8 v9;
  double **v10;
  uint64_t *v11;
  float v12;
  double **v14[3];
  double ***v15;

  v4 = a3;
  v5 = a2;
  v7 = *((float *)this + 126);
  if ((a4 & 1) == 0)
  {
    v4 = v7 * a3;
    v5 = *((float *)this + 127) * a2;
  }
  v8 = *((float *)this + 127);
  v9 = v5 != v8 || v4 != v7;
  if (v9)
  {
    std::vector<std::vector<double>>::vector(v14, 2uLL);
    v15 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v14[0], 2uLL, &v15);
    v15 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v14[0] + 3), 2uLL, &v15);
    v10 = v14[0];
    **v14[0] = (float)(v5 / v8);
    v10[3][1] = (float)(v4 / v7);
    fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v14, *((_QWORD *)this + 19));
    v15 = v14;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 61);
  if (v11)
  {
    v12 = *((float *)this + 126);
    if (v4 != v12)
      kaldi::LatticeScoreCache::ScaleAcousticScores(v11, v4 / v12);
  }
  *((float *)this + 126) = v4;
  *((float *)this + 127) = v5;
  return v9;
}

void sub_1ADB211A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::DecoderChainOutput::getWordHypLattice(quasar::DecoderChainOutput *this@<X0>, const quasar::DecoderPassData *a2@<X1>, _QWORD *a3@<X8>)
{
  kaldi::TransitionModel *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = (kaldi::TransitionModel *)*((_QWORD *)a2 + 10);
  v7 = (uint64_t *)((char *)a2 + 216);
  v8 = *((_QWORD *)a2 + 21);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 32))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  quasar::DecoderChainOutput::getWordHypLattice((uint64_t)this, v6, v7, v8, v9, *((_QWORD *)a2 + 23), a3);
}

void quasar::DecoderChainOutput::getWordHypLattice(uint64_t a1@<X0>, kaldi::TransitionModel *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v17;
  kaldi::LatticeScoreCache *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::vector<std::string> **v22;
  std::vector<std::string> **v23;
  std::vector<std::string> *v24;
  std::string *end;
  uint64_t v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *begin;
  uint64_t v31;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  if (*(_BYTE *)(a1 + 864))
  {
    if (*(_BYTE *)(a1 + 200))
    {
      v9 = *(_QWORD *)(a1 + 192);
      *a7 = *(_QWORD *)(a1 + 184);
      a7[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      return;
    }
    *(_QWORD *)&v53 = 0;
    std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<decltype(nullptr),void>(a1 + 184);
    v70 = 0uLL;
    v17 = *(_QWORD *)(a1 + 336);
    if (v17)
    {
      v18 = *(kaldi::LatticeScoreCache **)(a1 + 488);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a1 + 168))
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v70, (uint64_t *)(a1 + 168));
      goto LABEL_15;
    }
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v53);
    v41 = v53;
    v53 = 0uLL;
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    v70 = v41;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (*a3)
    {
      if (kaldi::WordAlignLattice(*(_QWORD *)(a1 + 152), (uint64_t)a2, *a3, 0, v70))
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v70 + 24))(v70) != -1)
        {
LABEL_15:
          v17 = *(_QWORD *)(a1 + 336);
          v18 = *(kaldi::LatticeScoreCache **)(a1 + 488);
          if (!v17)
          {
            v20 = 0;
            v19 = v70;
            goto LABEL_17;
          }
LABEL_16:
          v19 = v17 + 8;
          v20 = (uint64_t *)(v17 + 24);
LABEL_17:
          kaldi::WordHypLattice::getWordHypLattice(a2, v18, v19, a5, v20, &v51);
          v21 = v51;
          v22 = *(std::vector<std::string> ***)(v51 + 40);
          v23 = *(std::vector<std::string> ***)(v51 + 48);
          if (v22 != v23)
          {
            do
            {
              quasar::SymbolTableList::lookup(*(uint64_t **)(a1 + 472), (int)(*v22)[10].__end_cap_.__value_, (unsigned __int8 *)&(*v22)[11], &(*v22)[12]);
              std::vector<std::string>::resize((std::vector<std::string> *)((char *)*v22 + 80), ((char *)(*v22)[4].__end_cap_.__value_ - (char *)(*v22)[4].__end_) >> 2);
              v24 = *v22;
              end = (*v22)[4].__end_;
              if ((*v22)[4].__end_cap_.__value_ != end)
              {
                v26 = 0;
                v27 = 0;
                do
                {
                  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 88))(&v53, a4, *((int *)&end->__r_.__value_.__l.__data_ + v27));
                  v28 = &(*v22)[3].__end_[v26];
                  if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v28->__r_.__value_.__l.__data_);
                  v29 = v53;
                  v28->__r_.__value_.__r.__words[2] = v54;
                  *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
                  ++v27;
                  v24 = *v22;
                  end = (*v22)[4].__end_;
                  ++v26;
                }
                while (v27 < ((char *)(*v22)[4].__end_cap_.__value_ - (char *)end) >> 2);
              }
              if (a6)
              {
                if (*(_QWORD *)(a1 + 336))
                {
                  std::vector<std::string>::resize(v24 + 7, ((char *)v24[6].__end_ - (char *)v24[6].__begin_) >> 2);
                  begin = (*v22)[6].__begin_;
                  if ((*v22)[6].__end_ != begin)
                  {
                    v31 = 0;
                    v32 = 0;
                    do
                    {
                      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a6 + 88))(&v53, a6, *((int *)&begin->__r_.__value_.__l.__data_ + v32));
                      v33 = &(*v22)[7].__begin_[v31];
                      if (SHIBYTE(v33->__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v33->__r_.__value_.__l.__data_);
                      v34 = v53;
                      v33->__r_.__value_.__r.__words[2] = v54;
                      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
                      ++v32;
                      begin = (*v22)[6].__begin_;
                      ++v31;
                    }
                    while (v32 < ((char *)(*v22)[6].__end_ - (char *)begin) >> 2);
                  }
                }
              }
              ++v22;
            }
            while (v22 != v23);
            v21 = v51;
          }
          if (v21 && quasar::gLogLevel > 4)
          {
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v53 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
            kaldi::operator<<((uint64_t *)&v53, v51);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v53);
          }
          std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(a1 + 184, &v51);
          v35 = *(_QWORD *)(a1 + 192);
          *a7 = *(_QWORD *)(a1 + 184);
          a7[1] = v35;
          if (v35)
          {
            v36 = (unint64_t *)(v35 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = v52;
          if (v52)
          {
            v39 = (unint64_t *)&v52->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          goto LABEL_63;
        }
        if (quasar::gLogLevel >= 4)
        {
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v53 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Empty word-aligned lattice. Cannot obtain word hyp lattice.", 59);
LABEL_61:
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v53);
        }
      }
      else if (quasar::gLogLevel >= 4)
      {
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Lattice word alignment failed. Cannot obtain word hyp lattice.", 62);
        goto LABEL_61;
      }
    }
    *a7 = 0;
    a7[1] = 0;
LABEL_63:
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    return;
  }
  if (*(_BYTE *)(a1 + 200))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 184);
    *(_BYTE *)(a1 + 200) = 0;
  }
  *a7 = 0;
  a7[1] = 0;
}

void sub_1ADB21738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<decltype(nullptr),void>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v6;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = 0uLL;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, &v6);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)a1, a2);
  }
  else
  {
    v3 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::__on_zero_shared(uint64_t a1)
{
  kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)(a1 + 24));
}

quasar::corrective_reranking::PhoneticMatcher *quasar::corrective_reranking::PhoneticMatcher::PhoneticMatcher(quasar::corrective_reranking::PhoneticMatcher *this, const quasar::corrective_reranking::PhoneticMatcherConfig *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15[279];
  char v16;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *((_OWORD *)a2 + 1);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_OWORD *)this + 1) = v7;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  v8 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 6) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 2);
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>>>>::unordered_map((uint64_t)this + 72, 0, v15, &v16);
  *((_QWORD *)this + 15) = (char *)this + 120;
  *((_QWORD *)this + 16) = (char *)this + 120;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  if (!*(_QWORD *)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"config.euclidSysConfig", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  quasar::QuasarEuclid::createQuasarEuclid(*(_QWORD *)a2, 0, 0, 1u, v15);
  v11 = *(_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

void quasar::corrective_reranking::PhoneticMatcher::~PhoneticMatcher(quasar::corrective_reranking::PhoneticMatcher *this)
{
  uint64_t v2;

  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)this + 15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 72);
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t quasar::corrective_reranking::PhoneticMatcher::nearestNeighbors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), a2, a3, 0x100000000);
}

float quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string *v8;
  float v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::basic_string<char32_t>::size_type v19;
  std::basic_string<char32_t>::size_type v20;
  std::basic_string<char32_t>::size_type v21;
  std::basic_string<char32_t>::size_type v22;
  int v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  float v33;
  float v34;
  std::string v36;
  char v37;
  std::string __p;
  char v39;
  std::basic_string<char32_t> v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  std::string v47;
  std::string v48;

  quasar::copyAndTrim(a2, &v48);
  quasar::copyAndTrim(a3, &v47);
  v5 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    size = v48.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_18;
  v7 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = v47.__r_.__value_.__l.__size_;
  if (!v7)
  {
LABEL_18:
    v9 = INFINITY;
    goto LABEL_116;
  }
  if (size == v7)
  {
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v47;
    else
      v8 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v48.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v48.__r_.__value_.__l.__data_, v8, v48.__r_.__value_.__l.__size_))
      {
        v9 = 0.0;
        goto LABEL_116;
      }
    }
    else
    {
      v9 = 0.0;
      if (!*((_BYTE *)&v48.__r_.__value_.__s + 23))
        goto LABEL_116;
      v10 = &v48;
      while (v10->__r_.__value_.__s.__data_[0] == v8->__r_.__value_.__s.__data_[0])
      {
        v10 = (std::string *)((char *)v10 + 1);
        v8 = (std::string *)((char *)v8 + 1);
        if (!--v5)
          goto LABEL_116;
      }
    }
  }
  v44 = 0u;
  v45 = 0u;
  v46 = 1065353216;
  v41 = 0u;
  v42 = 0u;
  v43 = 1065353216;
  if (*(_BYTE *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v44, (unsigned __int8 *)&v48, (uint64_t)&v48);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v41, (unsigned __int8 *)&v47, (uint64_t)&v47);
  }
  if (*(_BYTE *)(a1 + 25))
  {
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v48;
    else
      v11 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      v12 = v48.__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v11, v12, &__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v44, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v47;
    else
      v13 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v14 = v47.__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v13, v14, &__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v41, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a1 + 26))
  {
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v48;
    else
      v15 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      v16 = v48.__r_.__value_.__l.__size_;
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v15, v16, &__p);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v47;
    else
      v17 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v18 = v47.__r_.__value_.__l.__size_;
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v17, v18, &v36);
    if ((*(_DWORD *)(a1 + 28) & 0x80000000) != 0)
      goto LABEL_59;
    quasar::toU32String((uint64_t)&__p, &v40);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v19 = v40.__r_.__value_.__l.__size_;
    v20 = *(int *)(a1 + 28);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (v19 <= v20)
LABEL_59:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v44, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if ((*(_DWORD *)(a1 + 28) & 0x80000000) != 0)
      goto LABEL_67;
    quasar::toU32String((uint64_t)&v36, &v40);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v21 = v40.__r_.__value_.__l.__size_;
    v22 = *(int *)(a1 + 28);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (v21 <= v22)
LABEL_67:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v41, (unsigned __int8 *)&v36, (uint64_t)&v36);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_100;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v44, (unsigned __int8 *)&v48, (uint64_t)&v48);
  v23 = quasar::corrective_reranking::classifyCasing((uint64_t)&v48);
  switch(v23)
  {
    case 2:
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v47;
      else
        v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        v27 = v47.__r_.__value_.__l.__size_;
      quasar::utf8::convertToTitleCaseOrEmpty((char *)v26, v27, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v41, (unsigned __int8 *)&__p, (uint64_t)&__p);
LABEL_97:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_100;
    case 1:
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v47;
      else
        v28 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        v29 = v47.__r_.__value_.__l.__size_;
      quasar::utf8::convertToUpperCaseOrEmpty((char *)v28, v29, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v41, (unsigned __int8 *)&__p, (uint64_t)&__p);
      goto LABEL_97;
    case 0:
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v47;
      else
        v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        v25 = v47.__r_.__value_.__l.__size_;
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v24, v25, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v41, (unsigned __int8 *)&__p, (uint64_t)&__p);
      goto LABEL_97;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v41, (unsigned __int8 *)&v47, (uint64_t)&v47);
LABEL_100:
  v30 = (_QWORD *)v45;
  if ((_QWORD)v45)
  {
    v9 = INFINITY;
    do
    {
      quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(a1, (uint64_t)(v30 + 2), &__p);
      v31 = (_QWORD *)v42;
      if (v39)
        v32 = (_QWORD)v42 == 0;
      else
        v32 = 1;
      if (!v32)
      {
        do
        {
          quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(a1, (uint64_t)(v31 + 2), &v36);
          if (v37)
          {
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v36, (uint64_t)&__p, -1.0, 1.0);
            kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v36, 2.0);
            v33 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v36);
            if (v33 < 0.0)
              v33 = 0.0;
            v34 = sqrtf(v33);
            if (v9 > v34)
              v9 = v34;
          }
          std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
      v30 = (_QWORD *)*v30;
    }
    while (v30);
  }
  else
  {
    v9 = INFINITY;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v41);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v44);
LABEL_116:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1ADB21FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29 - 144);
  if (*(char *)(v29 - 73) < 0)
    operator delete(*(void **)(v29 - 96));
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  void *v6[5];
  void *__p[2];
  unsigned __int8 v8;

  quasar::QuasarEuclid::preprocessInput(*(_QWORD *)(a1 + 56), a2, 1, __p);
  v5 = v8;
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  *a3 = 0;
  a3[32] = 0;
  if (v5)
  {
    if (kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1 + 64, (uint64_t)__p, (uint64_t)a3)|| ((*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 56) + 24))(v6, *(_QWORD *)(a1 + 56), __p), std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((uint64_t)a3, (uint64_t)v6), std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v6), a3[32]))
    {
      ++*(_DWORD *)(a1 + 144);
    }
    else
    {
      ++*(_DWORD *)(a1 + 148);
      quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput(*(_QWORD *)(a1 + 56), (uint64_t)__p, v6);
      std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((uint64_t)a3, (uint64_t)v6);
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v6);
      if (*(_QWORD *)(a1 + 64))
        kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::optional<kaldi::CuVector<float>> const&)::{lambda(std::optional<kaldi::CuVector<float>>&)#1}>((unint64_t *)(a1 + 64), (std::string::size_type)__p, (uint64_t)a3);
    }
  }
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1ADB22194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100](v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v4;
  uint64_t v6;

  v6 = 0;
  v4 = kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4)
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>(a3, v6);
  return v4;
}

void quasar::corrective_reranking::PhoneticMatcher::clearCache(quasar::corrective_reranking::PhoneticMatcher *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _OWORD v4[17];

  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clearing phonetic matcher cache, size=", 38);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", hits=", 7);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", misses=", 9);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 9);
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)this + 15);
  *((_QWORD *)this + 18) = 0;
}

void sub_1ADB222EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,0>(uint64_t a1)
{
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
      kaldi::CuVector<float>::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<kaldi::CuVector<float>,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__construct[abi:ne180100]<kaldi::CuVector<float>>(a1, a2);
  }
}

void std::__optional_destruct_base<kaldi::CuVector<float>,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)a1 = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy(a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
}

_QWORD *std::__optional_storage_base<kaldi::CuVector<float>,false>::__construct[abi:ne180100]<kaldi::CuVector<float>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1);
  result = kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADB224BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1ADB22734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::optional<kaldi::CuVector<float>> const&)::{lambda(std::optional<kaldi::CuVector<float>>&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string::size_type size;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::string v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;

  v28 = (uint64_t *)&v28;
  v29 = (uint64_t *)&v28;
  v30 = 0;
  v6 = a1 + 1;
  v27.__r_.__value_.__r.__words[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v27);
  if (v7)
  {
    v8 = (uint64_t *)v7[3];
    if (&v28 != (uint64_t **)v8)
    {
      v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v28)
      {
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)v8[1] = v10;
        v11 = (uint64_t)v28;
        v28[1] = (uint64_t)v8;
        *v8 = v11;
        v8[1] = (uint64_t)&v28;
        --a1[9];
        v28 = v8;
        ++v30;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    v12 = a1[9];
    if (v12 >= *a1)
    {
      v13 = (uint64_t *)a1[7];
      if (&v28 != (uint64_t **)v13)
      {
        v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v28)
        {
          v15 = *v13;
          *(_QWORD *)(v15 + 8) = v14;
          *(_QWORD *)v13[1] = v15;
          v16 = (uint64_t)v28;
          v28[1] = (uint64_t)v13;
          *v13 = v16;
          v13[1] = (uint64_t)&v28;
          a1[9] = v12 - 1;
          v28 = v13;
          ++v30;
        }
      }
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v27);
      std::string::operator=((std::string *)(v29 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v27 = *(std::string *)a2;
      v17 = (uint64_t *)operator new(0x50uLL);
      size = v27.__r_.__value_.__l.__size_;
      v17[2] = v27.__r_.__value_.__r.__words[0];
      v17[3] = size;
      *(uint64_t *)((char *)v17 + 31) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
      LOBYTE(size) = *((_BYTE *)&v27.__r_.__value_.__s + 23);
      memset(&v27, 0, sizeof(v27));
      *((_BYTE *)v17 + 39) = size;
      *((_BYTE *)v17 + 40) = 0;
      *((_BYTE *)v17 + 72) = 0;
      v19 = (uint64_t)v28;
      *v17 = (uint64_t)v28;
      v17[1] = (uint64_t)&v28;
      *(_QWORD *)(v19 + 8) = v17;
      v28 = v17;
      ++v30;
    }
  }
  v20 = v29;
  v21 = v29 + 5;
  std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((uint64_t)(v29 + 5), a3);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 2);
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v27, &v27);
  v22 = (uint64_t *)a1[8];
  if (v22 != v20)
  {
    v23 = (uint64_t *)v20[1];
    if (v23 != v22)
    {
      v24 = *v20;
      *(_QWORD *)(v24 + 8) = v23;
      *(_QWORD *)v20[1] = v24;
      v25 = *v22;
      *(_QWORD *)(v25 + 8) = v20;
      *v20 = v25;
      *v22 = (uint64_t)v20;
      v20[1] = (uint64_t)v22;
      --v30;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)&v28);
  return v21;
}

void sub_1ADB22A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear(&a15);
  _Unwind_Resume(a1);
}

quasar::DoublePartialLogic *quasar::DoublePartialLogic::DoublePartialLogic(quasar::DoublePartialLogic *this)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  *v2 = &unk_1E5D459A8;
  v2[1] = 0;
  *((_QWORD *)this + 1) = v2;
  *((_BYTE *)v2 + 24) = 0;
  *(_QWORD *)this = v2 + 3;
  return this;
}

_BYTE **quasar::DoublePartialLogic::handlePartial(_BYTE **this, int a2, int a3, int a4, BOOL *a5, BOOL *a6)
{
  char v6;
  _BYTE *v7;

  v6 = a3 & ~(_BYTE)a4;
  if (!a2)
    v6 = 0;
  *a6 = v6;
  v7 = *this;
  if (a3 && a4 && (!*v7 || (a2 & 1) == 0))
  {
    *a5 = 1;
  }
  else
  {
    *a5 = 0;
    *v7 = 0;
  }
  return this;
}

_BYTE **quasar::DoublePartialLogic::handleFinal(_BYTE **this)
{
  **this = 0;
  return this;
}

_QWORD *quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D459A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D459A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void sdapi::SdapiTokenizer::~SdapiTokenizer(sdapi::SdapiTokenizer *this)
{
  std::recursive_mutex *SharedMutex;

  *(_QWORD *)this = &off_1E5D34230;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (*((_QWORD *)this + 4) != -1)
  {
    TPToken_Close();
    *((_QWORD *)this + 4) = -1;
  }
  if (*((_QWORD *)this + 3) != -1)
  {
    TPLexicon_Close();
    *((_QWORD *)this + 3) = -1;
  }
  if (*((_QWORD *)this + 2) != -1)
  {
    SDVoc_Delete();
    *((_QWORD *)this + 2) = -1;
  }
  std::recursive_mutex::unlock(SharedMutex);
  quasar::Bitmap::~Bitmap(this);
}

{
  sdapi::SdapiTokenizer::~SdapiTokenizer(this);
  JUMPOUT(0x1AF44D190);
}

void sdapi::SdapiTokenizer::createSdapiTokenizer(sdapi::SdapiUtil *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  std::recursive_mutex *SharedMutex;
  uint64_t v13;
  uint64_t GeneralVoc;
  _OWORD v15[17];

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E5D34230;
  *(_BYTE *)(v13 + 8) = a5;
  *a6 = v13;
  GeneralVoc = sdapi::SdapiUtil::loadGeneralVoc((uint64_t)a1, a2);
  if (GeneralVoc == -1)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Could not load general voc", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  sdapi::SdapiTokenizer::loadModels((uint64_t *)v13, GeneralVoc, a3, a4);
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1ADB22D78(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiTokenizer::loadModels(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::recursive_mutex *SharedMutex;
  uint64_t LexiconHandle;
  _OWORD v10[17];

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  a1[2] = a2;
  LexiconHandle = sdapi::SdapiUtil::fetchLexiconHandle(a2, a3);
  a1[3] = LexiconHandle;
  a1[4] = sdapi::SdapiUtil::fetchTokenHandle(a1[2], LexiconHandle, a4);
  if (SDApi_HasErrored())
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Sdapi has errored. Dying.", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1ADB22E8C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiTokenizer::tokenize(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *SharedMutex;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char v13;
  std::string::size_type v14;
  size_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  void *v29[2];
  char v30;
  std::string v31;
  std::string v32;
  int v33;
  std::string *v34;
  std::string *v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::vector<unsigned int> __p;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int __sz;
  unsigned int __sz_4;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  std::string v73;

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  v72 = 0;
  if (TPToken_Tokenize())
  {
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Could not tokenize", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  if (TPToken_GetResultInfo())
  {
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Could not get info from tokenized result", 40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_7;
  }
  memset(&__p, 0, sizeof(__p));
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v38 = v50;
  std::vector<TPTokenTrans>::resize((uint64_t)&v43, v50);
  v39 = v51;
  std::vector<quasar::PreTokenToPostTokenItnMap>::resize((uint64_t)&v44 + 8, v51);
  v40 = __sz_4;
  std::vector<int>::resize(&__p, __sz_4);
  v41 = __sz;
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)&v47 + 8), __sz);
  v42 = v52;
  if ((unint64_t)v52 <= *((_QWORD *)&v46 + 1) - (_QWORD)v46)
  {
    if ((unint64_t)v52 < *((_QWORD *)&v46 + 1) - (_QWORD)v46)
      *((_QWORD *)&v46 + 1) = v46 + v52;
  }
  else
  {
    std::vector<signed char>::__append((std::vector<char> *)&v46, v52 - (*((_QWORD *)&v46 + 1) - v46));
  }
  if (TPToken_GetResultData())
  {
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Failed TPToken_GetResultData with error code : ", 47);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
LABEL_19:
    v6 = 0;
    goto LABEL_20;
  }
  if (TPToken_DeleteResult())
  {
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Failed TPToken_DeleteResult with error code : ", 46);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_19;
  }
  if (!v41)
  {
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"No starting states!", 19);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_19;
  }
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v8 = *((_QWORD *)&v44 + 1);
  if (!*(_DWORD *)(*((_QWORD *)&v44 + 1) + 12))
    goto LABEL_91;
  do
  {
    v9 = *(unsigned int *)(v8 + 8);
    v10 = v43;
    v11 = (char *)(v46 + *(unsigned int *)(v43 + 32 * v9));
    memset(&v32, 0, sizeof(v32));
    std::string::basic_string[abi:ne180100]<0>(v29, v11);
    v12 = a1[8];
    SdapiAnnotatedText::SdapiAnnotatedText(&v55, v29);
    v13 = BYTE7(v56);
    v14 = *((_QWORD *)&v55 + 1);
    if ((SBYTE7(v56) & 0x80u) == 0)
      v15 = BYTE7(v56);
    else
      v15 = *((_QWORD *)&v55 + 1);
    if (!v15)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "");
      goto LABEL_70;
    }
    v16 = HIBYTE(v57);
    if (v57 < 0)
      v16 = v57;
    if (v16)
    {
      std::string::basic_string[abi:ne180100]((uint64_t)&v73, v15 + 1);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v73;
      else
        v17 = (std::string *)v73.__r_.__value_.__r.__words[0];
      if ((SBYTE7(v56) & 0x80u) == 0)
        v18 = &v55;
      else
        v18 = (__int128 *)v55;
      memmove(v17, v18, v15);
      *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v15) = 92;
      if (v57 >= 0)
        v19 = (char *)&v56 + 8;
      else
        v19 = (const std::string::value_type *)*((_QWORD *)&v56 + 1);
      if (v57 >= 0)
        v20 = HIBYTE(v57);
      else
        v20 = v57;
      v21 = std::string::append(&v73, v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v12)
      {
        if ((SBYTE7(v59) & 0x80u) == 0)
          v23 = BYTE7(v59);
        else
          v23 = *((_QWORD *)&v58 + 1);
        v24 = &v55;
        if (v23)
        {
          v24 = &v58;
          v13 = BYTE7(v59);
        }
        if ((v13 & 0x80) == 0)
        {
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v24;
          v25 = *((_QWORD *)v24 + 2);
LABEL_64:
          v31.__r_.__value_.__r.__words[2] = v25;
          goto LABEL_70;
        }
        if (v23)
          v14 = *((_QWORD *)&v58 + 1);
      }
      else
      {
        if ((SBYTE7(v56) & 0x80000000) == 0)
        {
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v55;
          v25 = v56;
          goto LABEL_64;
        }
        v24 = &v55;
      }
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v24, v14);
    }
LABEL_70:
    if (SBYTE7(v59) < 0)
      operator delete((void *)v58);
    if (SHIBYTE(v57) < 0)
      operator delete(*((void **)&v56 + 1));
    if (SBYTE7(v56) < 0)
      operator delete((void *)v55);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v32 = v31;
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
    v31.__r_.__value_.__s.__data_[0] = 0;
    if (v30 < 0)
      operator delete(v29[0]);
    v33 = 0;
    v26 = v35;
    if ((unint64_t)v35 >= v36)
    {
      v28 = (std::string *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v34, (__int128 *)&v32);
    }
    else
    {
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v35, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else
      {
        v27 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        v35->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      LODWORD(v26[1].__r_.__value_.__l.__data_) = v33;
      v28 = (std::string *)((char *)v26 + 32);
    }
    v35 = v28;
    *(_OWORD *)v8 = *(_OWORD *)(*((_QWORD *)&v44 + 1) + 16 * *(unsigned int *)(v10 + 32 * v9 + 8));
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  while (*(_DWORD *)(v8 + 12));
  if (v34 != v35)
  {
    v37 = 0;
    std::vector<quasar::TextTokenizer::TokenString>::push_back[abi:ne180100](a3, (uint64_t)&v34);
  }
LABEL_91:
  *(_QWORD *)&v55 = &v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v6 = 1;
LABEL_20:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (*((_QWORD *)&v47 + 1))
  {
    *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
    operator delete(*((void **)&v47 + 1));
  }
  if ((_QWORD)v46)
  {
    *((_QWORD *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
  if (*((_QWORD *)&v44 + 1))
  {
    *(_QWORD *)&v45 = *((_QWORD *)&v44 + 1);
    operator delete(*((void **)&v44 + 1));
  }
  if ((_QWORD)v43)
  {
    *((_QWORD *)&v43 + 1) = v43;
    operator delete((void *)v43);
  }
LABEL_8:
  std::recursive_mutex::unlock(SharedMutex);
  return v6;
}

void sub_1ADB23560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::recursive_mutex *v53;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a53);
  sdapi::SdapiTokenizer::TTokenizerResult::~TTokenizerResult((sdapi::SdapiTokenizer::TTokenizerResult *)&a32);
  std::recursive_mutex::unlock(v53);
  _Unwind_Resume(a1);
}

void std::vector<TPTokenTrans>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<TPTokenTrans>::__append((void **)a1, a2 - v2);
  }
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(a1, a2);
  }
  else
  {
    std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>((uint64_t)a1, a2);
    result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

void sdapi::SdapiTokenizer::TTokenizerResult::~TTokenizerResult(sdapi::SdapiTokenizer::TTokenizerResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
}

void std::vector<TPTokenTrans>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t *kaldi::quasar::EspressoNDArray::EspressoNDArray(uint64_t *a1, __int128 *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  std::runtime_error *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  uint64_t v20;

  v4 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[6];
  *((_OWORD *)a1 + 5) = a2[5];
  *((_OWORD *)a1 + 6) = v9;
  *((_OWORD *)a1 + 3) = v7;
  *((_OWORD *)a1 + 4) = v8;
  v10 = a2[7];
  v11 = a2[8];
  v12 = a2[9];
  a1[20] = *((_QWORD *)a2 + 20);
  *((_OWORD *)a1 + 8) = v11;
  *((_OWORD *)a1 + 9) = v12;
  *((_OWORD *)a1 + 7) = v10;
  a1[21] = 0;
  if (a3)
    v4 = *a1;
  a1[22] = v4;
  v13 = *((_DWORD *)a1 + 40);
  if (v13 != 65568)
  {
    if (v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v18, *((_DWORD *)a1 + 40));
      v16 = std::string::insert(&v18, 0, "Unsupported storage type ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v19);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *((_DWORD *)a1 + 40) = 65568;
  }
  espresso_buffer_unpack_tensor_shape();
  return a1;
}

void sub_1ADB239A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;
  void *v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      v25 = *(void **)(v21 + 176);
      *(_QWORD *)(v21 + 176) = 0;
      if (v25)
        free(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *kaldi::quasar::EspressoNDArray::InitBufferMemory(kaldi::quasar::EspressoNDArray *this, size_t count)
{
  void *result;
  void *v4;

  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 40) = 65568;
  result = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
  v4 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = result;
  if (v4)
  {
    free(v4);
    result = (void *)*((_QWORD *)this + 22);
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t kaldi::MelBanks::MelBanks(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  uint64_t *v5;
  unint64_t v6;
  float v7;
  double v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  kaldi::MelBanks *v33;
  float v34;
  float v35;
  kaldi::MelBanks *v36;
  float v37;
  float v38;
  kaldi::MelBanks *v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float *v45;
  int v46;
  float v47;
  float v49;
  float v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  uint64_t *v75;
  float v77;
  float v78;
  float v79;
  void *v80[3];
  char *v81;
  int v82;
  int v83;
  uint64_t v84;

  v5 = (uint64_t *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 21);
  v6 = *a2;
  v75 = (uint64_t *)(a1 + 24);
  if ((int)v6 <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Must have at least 3 mel bins", 29);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  if (*(float *)(a3 + 52) <= 0.0)
    v7 = *(float *)a3;
  else
    v7 = *(float *)(a3 + 52);
  v8 = v7 * 0.001 * *(float *)(a3 + 8);
  v9 = (int)v8;
  if (*(_BYTE *)(a3 + 48))
    v9 = kaldi::RoundUpToNearestPowerOfTwo((kaldi *)(int)v8);
  v10 = v7 * 0.5;
  v12 = *((float *)a2 + 1);
  v11 = *((float *)a2 + 2);
  v13 = -0.0;
  if (v11 <= 0.0)
    v13 = v7 * 0.5;
  v14 = v11 + v13;
  v15 = v12 >= 0.0 && v12 < v10;
  if (!v15 || (v14 > 0.0 ? (v16 = v14 <= v10) : (v16 = 0), v16 ? (v17 = v14 > v12) : (v17 = 0), !v17))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad values in options: low-freq ", 32);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" and high-freq ", 15);
    v65 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" vs. nyquist ", 13);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  v18 = logf((float)(v12 / 700.0) + 1.0);
  v73 = logf((float)(v14 / 700.0) + 1.0);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 20);
  v19 = *((float *)a2 + 3);
  v20 = *((float *)a2 + 4);
  v21 = -0.0;
  if (v20 < 0.0)
    v21 = v7 * 0.5;
  v78 = v20 + v21;
  v79 = *((float *)a2 + 3);
  if (a4 != 1.0 && (v19 < 0.0 || v19 <= v12 || v19 >= v14 || v78 <= 0.0 || v78 >= v14 || v78 <= v19))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad values in options: vtln-low ", 32);
    v66 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" and vtln-high ", 15);
    v67 = (_QWORD *)std::ostream::operator<<();
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", versus ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"low-freq ", 9);
    v69 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" and high-freq ", 15);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  v22 = v18;
  v77 = v14;
  std::vector<std::pair<int,kaldi::Vector<float>>>::resize(v5, v6);
  kaldi::Vector<float>::Resize((void **)a1, v6, 0);
  v23 = 0;
  v24 = v7 / (float)(int)v9;
  v25 = v22 * 1127.0;
  v26 = (float)(v73 * 1127.0) - v25;
  v74 = (int)v9 >> 1;
  if ((int)v9 >> 1 <= 1)
    v27 = 1;
  else
    v27 = ((int)v9 >> 1);
  v71 = v25;
  v72 = v26 / (float)((int)v6 + 1);
  do
  {
    v28 = v25 + (float)((float)(int)v23 * v72);
    v29 = v23 + 1;
    v30 = v25 + (float)((float)(v23 + 1) * v72);
    v31 = v25 + (float)((float)(v23 + 2) * v72);
    if (a4 == 1.0)
    {
      v41 = -1.0;
    }
    else
    {
      v32 = expf(v28 / 1127.0);
      v34 = kaldi::MelBanks::VtlnWarpFreq(v33, v79, v78, v12, v77, a4, (float)(v32 + -1.0) * 700.0);
      v28 = logf((float)(v34 / 700.0) + 1.0) * 1127.0;
      v35 = expf(v30 / 1127.0);
      v37 = kaldi::MelBanks::VtlnWarpFreq(v36, v79, v78, v12, v77, a4, (float)(v35 + -1.0) * 700.0);
      v30 = logf((float)(v37 / 700.0) + 1.0) * 1127.0;
      v38 = expf(v31 / 1127.0);
      v40 = kaldi::MelBanks::VtlnWarpFreq(v39, v79, v78, v12, v77, a4, (float)(v38 + -1.0) * 700.0);
      v41 = -1.0;
      v31 = logf((float)(v40 / 700.0) + 1.0) * 1127.0;
    }
    *(float *)(*(_QWORD *)a1 + 4 * v23) = (float)(expf(v30 / 1127.0) + v41) * 700.0;
    memset(v80, 0, sizeof(v80));
    kaldi::Vector<float>::Resize(v80, v74, 0);
    if ((int)v9 < 1)
      goto LABEL_65;
    v42 = v9;
    v43 = 0;
    v44 = -1;
    v45 = (float *)v80[0];
    v46 = -1;
    do
    {
      v47 = logf((float)((float)(v24 * (float)(int)v43) / 700.0) + 1.0) * 1127.0;
      if (v47 > v28 && v47 < v31)
      {
        v16 = v47 > v30;
        v49 = (float)(v31 - v47) / (float)(v31 - v30);
        v50 = (float)(v47 - v28) / (float)(v30 - v28);
        if (v16)
          v50 = v49;
        v45[v43] = v50;
        if (v46 == -1)
          v46 = v43;
        v44 = v43;
      }
      ++v43;
    }
    while (v27 != v43);
    if (v46 == -1 || (v51 = v44 - v46, v44 < v46))
    {
LABEL_65:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Invalid indexing. You may have set --num-mel-bins too large.", 60);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
    }
    v52 = *v75 + 32 * v23;
    *(_DWORD *)v52 = v46;
    v53 = v51 + 1;
    kaldi::Vector<float>::Resize((void **)(v52 + 8), (v51 + 1), 0);
    v54 = *v75;
    v83 = 0;
    v84 = 0;
    v81 = (char *)v80[0] + 4 * v46;
    v82 = v53;
    kaldi::VectorBase<float>::CopyFromVec(v54 + 32 * v23 + 8, (const void **)&v81);
    v25 = v71;
    v9 = v42;
    if (v71 != 0.0 && !v23 && *((_BYTE *)a2 + 21))
      **(_DWORD **)(*v75 + 8) = 0;
    kaldi::Vector<float>::Destroy((uint64_t)v80);
    ++v23;
  }
  while (v29 != v6);
  if (*(_BYTE *)(a1 + 48))
  {
    v56 = *(_QWORD *)(a1 + 24);
    v55 = *(_QWORD *)(a1 + 32);
    if (v55 != v56)
    {
      v57 = 0;
      v58 = 0;
      v59 = kaldi::g_kaldi_verbose_level;
      do
      {
        if ((v59 & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"bin ", 4);
          v60 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)", offset = ", 11);
          v61 = (_QWORD *)std::ostream::operator<<();
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", vec = ", 8);
          kaldi::VectorBase<float>::Write(*v75 + v57 + 8, v62, 0);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v81);
          v59 = kaldi::g_kaldi_verbose_level;
          v56 = *(_QWORD *)(a1 + 24);
          v55 = *(_QWORD *)(a1 + 32);
        }
        ++v58;
        v57 += 32;
      }
      while (v58 < (v55 - v56) >> 5);
    }
  }
  return a1;
}

void sub_1ADB24164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  JUMPOUT(0x1ADB2418CLL);
}

float kaldi::MelBanks::VtlnWarpFreq(kaldi::MelBanks *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float v8;
  float v9;
  float v11;

  if (a7 < a4 || a7 > a5)
    return a7;
  v8 = fmaxf(a6, 1.0) * a2;
  v9 = 1.0 / a6;
  if (v8 > a7)
    return a4 + (float)((float)((float)((float)(v9 * v8) - a4) / (float)(v8 - a4)) * (float)(a7 - a4));
  v11 = fminf(a6, 1.0) * a3;
  if (v11 > a7)
    return v9 * a7;
  return a5 + (float)((float)((float)(a5 - (float)(v9 * v11)) / (float)(a5 - v11)) * (float)(a7 - a5));
}

void kaldi::MelBanks::Compute(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  FILE **v16;
  uint64_t v17;
  const float *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  v7 = v6 >> 5;
  if (*(_DWORD *)(a3 + 8) != (v6 >> 5))
    kaldi::Vector<float>::Resize((void **)a3, v6 >> 5, 0);
  v8 = (v6 >> 5);
  if ((int)v7 >= 1)
  {
    v9 = 0;
    v10 = 16;
    do
    {
      v11 = (_DWORD *)(*(_QWORD *)(a1 + 24) + v10);
      v12 = (int)*(v11 - 4);
      v13 = (uint64_t)(v11 - 2);
      LODWORD(v11) = *v11;
      v19 = 0;
      v20 = 0;
      v18 = (const float *)(*a2 + 4 * v12);
      LODWORD(v19) = (_DWORD)v11;
      v14 = kaldi::VecVec<float>(v13, &v18);
      if (v14 < 1.0 && *(_BYTE *)(a1 + 49) != 0)
        v14 = 1.0;
      *(float *)(*(_QWORD *)a3 + 4 * v9++) = v14;
      v10 += 32;
    }
    while (v8 != v9);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v16 = (FILE **)MEMORY[0x1E0C80C10];
    fwrite("MEL BANKS:\n", 0xBuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    if ((int)v7 >= 1)
    {
      v17 = 0;
      do
        fprintf(*v16, " %f", *(float *)(*(_QWORD *)a3 + 4 * v17++));
      while (v8 != v17);
    }
    fputc(10, *v16);
  }
}

__n128 kaldi::ComputeLifterCoeffs(uint64_t *a1, __n128 result)
{
  uint64_t v2;
  uint64_t v3;
  uint64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float v16;
  float v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  uint64x2_t v23;
  float64x2_t __x;
  long double v25;
  int32x2_t v26;
  int64x2_t v27;

  v2 = *((unsigned int *)a1 + 2);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v22 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    v23 = (uint64x2_t)vdupq_n_s64(v2 - 1);
    v21 = vdupq_n_s64(2uLL);
    v4 = (uint64x2_t)xmmword_1AE140A90;
    *(double *)&v5 = result.n128_f32[0];
    v6 = *a1;
    v7 = (v2 + 1) & 0x1FFFFFFFELL;
    v19 = (float64x2_t)vdupq_lane_s64(v5, 0);
    v20 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v5 * 0.5), 0);
    __asm { FMOV            V0.2D, #1.0 }
    v18 = _Q0;
    do
    {
      v26 = vmovn_s64((int64x2_t)vcgeq_u64(v23, v4));
      v27 = (int64x2_t)v4;
      v13.i64[0] = (int)v3;
      v13.i64[1] = (int)v3 + 1;
      __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v13), v22), v19);
      v25 = sin(__x.f64[1]);
      v14.f64[0] = sin(__x.f64[0]);
      v14.f64[1] = v25;
      v15 = vmlaq_f64(v18, v14, v20);
      if ((v26.i8[0] & 1) != 0)
      {
        v16 = v15.f64[0];
        *(float *)(v6 + 4 * v3) = v16;
      }
      if ((v26.i8[4] & 1) != 0)
      {
        v17 = v15.f64[1];
        *(float *)(v6 + 4 * v3 + 4) = v17;
      }
      v3 += 2;
      result = (__n128)v21;
      v4 = (uint64x2_t)vaddq_s64(v27, v21);
    }
    while (v7 != v3);
  }
  return result;
}

_QWORD *quasar::MergerOptions::options@<X0>(quasar::MergerOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = (char *)this + 16;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void quasar::MergerBlock::process(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a3, 0);
}

void `virtual thunk to'quasar::MergerBlock::process(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 96) + *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)) - 24), a3, 0);
}

uint64_t quasar::MergerBlock::init(quasar::MergerBlock *this)
{
  _QWORD *v1;
  uint64_t result;
  int v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD v7[17];

  v1 = (_QWORD *)((char *)this + 24);
  result = quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
  v3 = *(char *)(result + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(result + 8) != 3)
      goto LABEL_12;
    result = *(_QWORD *)result;
  }
  else if (v3 != 3)
  {
    goto LABEL_12;
  }
  if (*(_WORD *)result != 28257 || *(_BYTE *)(result + 2) != 121)
  {
LABEL_12:
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unsupported merge-style: ", 25);
    v6 = quasar::OptionValue<std::string>::value(v1);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  return result;
}

uint64_t `virtual thunk to'quasar::MergerBlock::init(quasar::MergerBlock *this)
{
  return quasar::MergerBlock::init((quasar::MergerBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

uint64_t quasar::MergerBlock::minConfigVersion(quasar::MergerBlock *this)
{
  return 131;
}

uint64_t `virtual thunk to'quasar::MergerBlock::minConfigVersion(quasar::MergerBlock *this)
{
  return 131;
}

void quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADB24724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::MergerBlock::~MergerBlock(quasar::MergerBlock *this)
{
  char **v2;

  *((_QWORD *)this + 23) = &unk_1E5D039A0;
  v2 = (char **)((char *)this + 184);
  *(_QWORD *)this = off_1E5D03918;
  *((_QWORD *)this + 1) = &off_1E5D34EB0;
  *((_QWORD *)this + 3) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  *((_QWORD *)this + 3) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  quasar::MergerBlock::~MergerBlock(this);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::MergerBlock::blockType(quasar::MergerBlock *this)
{
  return "MergerBlock";
}

void `virtual thunk to'quasar::MergerBlock::~MergerBlock(quasar::MergerBlock *this)
{
  quasar::MergerBlock::~MergerBlock((quasar::MergerBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  quasar::MergerBlock::~MergerBlock((quasar::MergerBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::MergerBlock::blockType(quasar::MergerBlock *this)
{
  return "MergerBlock";
}

uint64_t fst::quasar::MergeTrieFstImpl::MergeTrieFstImpl(uint64_t a1, uint64_t a2, int a3, int a4, __int128 *a5)
{
  _OWORD *v7;
  __int128 v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD **i;
  _QWORD **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t **v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  BOOL v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _OWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  _QWORD *v102;
  char *v103;
  uint64_t *v104;

  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_QWORD *)a1 = &off_1E5D22548;
  v7 = (_OWORD *)(a1 + 16);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
    a3 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v8 = *a5;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a5 + 2);
    *v7 = v8;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 112) = 0;
  v96 = (_QWORD *)(a1 + 104);
  v97 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (a3 < 1 || (v10 = *(_DWORD *)(a1 + 12), v10 < 1) || a3 > v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"disambig_sym_start_ > 0 && disambig_sym_end_ > 0 && disambig_sym_start_ <= disambig_sym_end_", 92);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v101);
  }
  v11 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"!fsts.empty()", 13);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v101);
  }
  do
  {
    if (!*v11
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11) & 0x80000000) != 0
      || (v13 = *v11,
          v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11),
          !(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v14)))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"FstNonNullAndHasArcs(fst)", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v101);
    }
    v15 = (uint64_t *)operator new();
    v16 = v15;
    v17 = v11[1];
    *(_QWORD *)&v101 = *v11;
    *((_QWORD *)&v101 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    fst::quasar::FstData::FstData(v15, &v101);
    v98 = v16;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    if (*((_QWORD *)&v101 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v24 = *(uint64_t ***)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v24 >= v23)
    {
      v27 = ((uint64_t)v24 - *v9) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = v23 - *v9;
      v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      v104 = (uint64_t *)(a1 + 64);
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 64, v30);
      else
        v31 = 0;
      v32 = (uint64_t **)&v31[8 * v27];
      *(_QWORD *)&v101 = v31;
      *((_QWORD *)&v101 + 1) = v32;
      v103 = &v31[8 * v30];
      v33 = v98;
      v98 = 0;
      *v32 = v33;
      v102 = v32 + 1;
      std::vector<std::unique_ptr<fst::quasar::FstData>>::__swap_out_circular_buffer((uint64_t *)(a1 + 48), &v101);
      v26 = *(_QWORD **)(a1 + 56);
      std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::~__split_buffer((uint64_t)&v101);
    }
    else
    {
      v25 = v98;
      v98 = 0;
      *v24 = v25;
      v26 = v24 + 1;
      *(_QWORD *)(a1 + 56) = v26;
    }
    *(_QWORD *)(a1 + 56) = v26;
    v34 = v98;
    v98 = 0;
    if (v34)
      std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100]((uint64_t)&v98, (uint64_t)v34);
    v11 += 2;
  }
  while (v11 != v12);
  *(_DWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
  v35 = (uint64_t *)operator new();
  v35[6] = 0;
  *((_OWORD *)v35 + 1) = 0u;
  *((_OWORD *)v35 + 2) = 0u;
  *(_OWORD *)v35 = 0u;
  v98 = v35;
  v36 = *(_QWORD *)(a1 + 88);
  v37 = *(uint64_t ***)(a1 + 80);
  if ((unint64_t)v37 >= v36)
  {
    v39 = ((uint64_t)v37 - *v97) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v40 = v36 - *v97;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    v104 = (uint64_t *)(a1 + 88);
    if (v42)
    {
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 88, v42);
      v35 = v98;
    }
    else
    {
      v43 = 0;
    }
    v44 = (uint64_t **)&v43[8 * v39];
    *(_QWORD *)&v101 = v43;
    *((_QWORD *)&v101 + 1) = v44;
    v103 = &v43[8 * v42];
    v98 = 0;
    *v44 = v35;
    v102 = v44 + 1;
    std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(v97, &v101);
    v38 = *(_QWORD **)(a1 + 80);
    std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer((uint64_t)&v101);
  }
  else
  {
    v98 = 0;
    *v37 = v35;
    v38 = v37 + 1;
    *(_QWORD *)(a1 + 80) = v38;
  }
  v95 = v7;
  *(_QWORD *)(a1 + 80) = v38;
  v45 = (uint64_t *)*(v38 - 1);
  v46 = v98;
  v98 = 0;
  if (v46)
    std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)&v98, (uint64_t)v46);
  v48 = *(_QWORD ***)(a1 + 48);
  for (i = *(_QWORD ***)(a1 + 56); v48 != i; ++v48)
  {
    v49 = (uint64_t)*v48;
    v50 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v48 + 24))(**v48);
    v51 = operator new();
    v52 = v51;
    *(_QWORD *)v51 = v49;
    *(_DWORD *)(v51 + 8) = v50;
    *(_QWORD *)(v51 + 12) = 0;
    v54 = (uint64_t *)v45[1];
    v53 = v45[2];
    if ((unint64_t)v54 >= v53)
    {
      v56 = ((uint64_t)v54 - *v45) >> 3;
      if ((unint64_t)(v56 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v57 = v53 - *v45;
      v58 = v57 >> 2;
      if (v57 >> 2 <= (unint64_t)(v56 + 1))
        v58 = v56 + 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      v104 = v45 + 2;
      if (v59)
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v45 + 2), v59);
      else
        v60 = 0;
      v61 = (uint64_t *)&v60[8 * v56];
      *(_QWORD *)&v101 = v60;
      *((_QWORD *)&v101 + 1) = v61;
      v103 = &v60[8 * v59];
      *v61 = v52;
      v102 = v61 + 1;
      std::vector<std::unique_ptr<fst::quasar::SubPath>>::__swap_out_circular_buffer(v45, &v101);
      v55 = (_QWORD *)v45[1];
      std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::~__split_buffer((uint64_t)&v101);
    }
    else
    {
      *v54 = v51;
      v55 = v54 + 1;
      v45[1] = (uint64_t)v55;
    }
    v45[1] = (uint64_t)v55;
  }
  *(_DWORD *)(a1 + 44) = (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
  v62 = (uint64_t *)operator new();
  v62[6] = 0;
  *((_OWORD *)v62 + 1) = 0u;
  *((_OWORD *)v62 + 2) = 0u;
  *(_OWORD *)v62 = 0u;
  v98 = v62;
  v64 = *(uint64_t ***)(a1 + 80);
  v63 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v64 >= v63)
  {
    v66 = ((uint64_t)v64 - *v97) >> 3;
    if ((unint64_t)(v66 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v67 = v63 - *v97;
    v68 = v67 >> 2;
    if (v67 >> 2 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v69 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    v104 = (uint64_t *)(a1 + 88);
    if (v69)
    {
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 88, v69);
      v62 = v98;
    }
    else
    {
      v70 = 0;
    }
    v71 = (uint64_t **)&v70[8 * v66];
    *(_QWORD *)&v101 = v70;
    *((_QWORD *)&v101 + 1) = v71;
    v103 = &v70[8 * v69];
    v98 = 0;
    *v71 = v62;
    v102 = v71 + 1;
    std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(v97, &v101);
    v65 = *(_QWORD **)(a1 + 80);
    std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer((uint64_t)&v101);
  }
  else
  {
    v98 = 0;
    *v64 = v62;
    v65 = v64 + 1;
    *(_QWORD *)(a1 + 80) = v65;
  }
  *(_QWORD *)(a1 + 80) = v65;
  v72 = *(v65 - 1);
  v73 = v98;
  v98 = 0;
  if (v73)
    std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)&v98, (uint64_t)v73);
  *(_BYTE *)(v72 + 48) = 1;
  ++*(_DWORD *)(a1 + 96);
  v99 = 0;
  v100 = 0;
  v98 = (uint64_t *)&v99;
  v74 = *(uint64_t ***)(a1 + 48);
  v75 = *(uint64_t ***)(a1 + 56);
  while (v74 != v75)
    fst::quasar::GetWordsAndCosts(**v74++, &v98);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v101);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v96, &v101);
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *v96;
  (*(void (**)(_QWORD))(*(_QWORD *)*v96 + 224))(*v96);
  if (v100)
  {
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 200))(v79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 176))(v79, v80);
    v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 200))(v79);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v79 + 184))(v79, v81, 0.0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 256))(v79, v80, v100);
    v82 = v98;
    if (v98 != (uint64_t *)&v99)
    {
      do
      {
        v83 = *((_DWORD *)v82 + 8);
        LODWORD(v101) = *((_DWORD *)v82 + 7);
        *(_QWORD *)((char *)&v101 + 4) = __PAIR64__(v83, v101);
        HIDWORD(v101) = v81;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v79 + 208))(v79, v80, &v101);
        v84 = (uint64_t *)v82[1];
        if (v84)
        {
          do
          {
            v85 = v84;
            v84 = (uint64_t *)*v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            v85 = (uint64_t *)v82[2];
            v86 = *v85 == (_QWORD)v82;
            v82 = v85;
          }
          while (!v86);
        }
        v82 = v85;
      }
      while (v85 != (uint64_t *)&v99);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 192))(v79, 0x5685A950000, 0x3FFFFFFF0007);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v101);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"MergeTrieFst[", 13);
    v88 = *(char *)(a1 + 39);
    if (v88 >= 0)
      v89 = (uint64_t)v95;
    else
      v89 = *(_QWORD *)(a1 + 16);
    if (v88 >= 0)
      v90 = *(unsigned __int8 *)(a1 + 39);
    else
      v90 = *(_QWORD *)(a1 + 24);
    v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"]:", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" fsts_datas_size ", 17);
    v93 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" unigram_fst_size ", 18);
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v96 + 24))(*v96) & 0x80000000) == 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v96 + 40))(*v96, 0);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v101);
  }
  std::__tree<int>::destroy((uint64_t)&v98, v99);
  return a1;
}

uint64_t fst::quasar::GetWordsAndCosts(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  char *v8;
  uint64_t **v9;
  char *v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  uint64_t *v20;
  uint64_t **v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  char *v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD v44[3];
  _DWORD *v45;
  unint64_t v46;
  unsigned int *v47;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((result & 0x80000000) != 0)
    return result;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v46 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v5, v44);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v42 = 0;
  v7 = operator new(0xCuLL);
  v8 = (char *)(v7 + 3);
  v41 = (char *)v7;
  v43 = (char *)(v7 + 3);
  *v7 = v6;
  *(_QWORD *)(v7 + 1) = 0;
  v9 = a2 + 1;
  do
  {
    v11 = *((_DWORD *)v8 - 3);
    v10 = v8 - 12;
    v12 = *((float *)v10 + 1);
    v13 = *((_DWORD *)v10 + 2);
    v42 = v10;
    fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v44, a1, v11);
    while (v44[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v44[0] + 24))(v44[0]) & 1) != 0)
        goto LABEL_42;
      if (v44[0])
      {
        v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44[0] + 32))(v44[0]);
        goto LABEL_10;
      }
LABEL_9:
      v14 = v44[1] + 16 * v46;
LABEL_10:
      v15 = *(float *)(v14 + 8);
      v16 = *(_DWORD *)(v14 + 4);
      if (!v16)
        v16 = v13;
      v40 = v16;
      v17 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)(v14 + 12));
      v18 = v12 + v15;
      if (v17 == INFINITY)
      {
        v25 = v42;
        if (v42 >= v43)
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 2);
          v29 = v28 + 1;
          if (v28 + 1 > 0x1555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v43 - v41) >> 2) > v29)
            v29 = 0x5555555555555556 * ((v43 - v41) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v43 - v41) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v30 = 0x1555555555555555;
          else
            v30 = v29;
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v43, v30);
          v33 = &v31[12 * v28];
          v34 = v40;
          *(_DWORD *)v33 = *(_DWORD *)(v14 + 12);
          *((float *)v33 + 1) = v18;
          *((_DWORD *)v33 + 2) = v34;
          v36 = v41;
          v35 = v42;
          v37 = v33;
          if (v42 != v41)
          {
            do
            {
              v38 = *(_QWORD *)(v35 - 12);
              v35 -= 12;
              v39 = *((_DWORD *)v35 + 2);
              *(_QWORD *)(v37 - 12) = v38;
              v37 -= 12;
              *((_DWORD *)v37 + 2) = v39;
            }
            while (v35 != v36);
            v35 = v41;
          }
          v27 = v33 + 12;
          v41 = v37;
          v42 = v33 + 12;
          v43 = &v31[12 * v32];
          if (v35)
            operator delete(v35);
        }
        else
        {
          v26 = v40;
          *(_DWORD *)v42 = *(_DWORD *)(v14 + 12);
          *((float *)v25 + 1) = v18;
          *((_DWORD *)v25 + 2) = v26;
          v27 = v25 + 12;
        }
        v42 = v27;
      }
      else
      {
        v19 = v18 + v17;
        v20 = *v9;
        if (!*v9)
          goto LABEL_24;
        v21 = a2 + 1;
        do
        {
          v22 = *((_DWORD *)v20 + 7);
          v23 = v22 < v40;
          if (v22 >= v40)
            v24 = v20;
          else
            v24 = v20 + 1;
          if (!v23)
            v21 = (uint64_t **)v20;
          v20 = (uint64_t *)*v24;
        }
        while (*v24);
        if (v21 == v9 || v40 < *((_DWORD *)v21 + 7) || v19 < *((float *)v21 + 8))
        {
LABEL_24:
          v47 = (unsigned int *)&v40;
          *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v40, (uint64_t)&std::piecewise_construct, &v47)+ 8) = v19;
        }
      }
      if (v44[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v44[0] + 40))(v44[0]);
      else
        ++v46;
    }
    if (v46 < v44[2])
      goto LABEL_9;
LABEL_42:
    v8 = v42;
  }
  while (v41 != v42);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  result = v44[0];
  if (v44[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44[0] + 8))(v44[0]);
  if (v45)
    --*v45;
  return result;
}

void sub_1ADB2566C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

void fst::quasar::MergeTrieFstImpl::~MergeTrieFstImpl(fst::quasar::MergeTrieFstImpl *this)
{
  _QWORD *v2;
  int v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10[34];

  *(_QWORD *)this = &off_1E5D22548;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"MergeTrieFst[", 13);
    v3 = *((char *)this + 39);
    if (v3 >= 0)
      v4 = (char *)this + 16;
    else
      v4 = (char *)*((_QWORD *)this + 2);
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)this + 39);
    else
      v5 = *((_QWORD *)this + 3);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"]:", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" num_states ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" num_states_expanded ", 21);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" num_arcs ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  v10[0] = (void **)((char *)this + 72);
  std::vector<std::unique_ptr<fst::quasar::State>>::__destroy_vector::operator()[abi:ne180100](v10);
  v10[0] = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<fst::quasar::FstData>>::__destroy_vector::operator()[abi:ne180100](v10);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  fst::quasar::MergeTrieFstImpl::~MergeTrieFstImpl(this);
  JUMPOUT(0x1AF44D190);
}

void fst::quasar::MergeTrieFstImpl::ExpandAll(fst::quasar::MergeTrieFstImpl *this)
{
  unint64_t v2;

  if (*((_QWORD *)this + 10) != *((_QWORD *)this + 9))
  {
    v2 = 0;
    do
      fst::quasar::MergeTrieFstImpl::Expand(this, v2++);
    while (v2 < (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3);
  }
}

void fst::quasar::MergeTrieFstImpl::Expand(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ***v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t ***v11;
  uint64_t ***v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t **v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  int v24;
  uint64_t ***v25;
  uint64_t ***v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t ***v33;
  uint64_t ***v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t ***v44;
  uint64_t ***v45;
  char *v46;
  __int128 v47;
  uint64_t ***v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t ***v52;
  uint64_t ***v53;
  char *v54;
  unint64_t v55;
  int v56;
  uint64_t ***v57;
  int v58;
  int v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  int *v75;
  int v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  uint64_t *v101;
  uint64_t ***v102;
  uint64_t ***v103;
  _DWORD *v104;
  int v105;
  uint64_t **v106;
  uint64_t ***v107;
  int *v108;
  int v109;
  float v110;
  unint64_t v111;
  _DWORD *v112;
  unint64_t v113;
  _DWORD *v114;
  uint64_t ***v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  int v127;
  char *v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  int v132;
  unint64_t v133;
  _DWORD *v134;
  unint64_t v135;
  _DWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  uint64_t v177;
  float v178;
  float v179;
  float v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t ***v193;
  int v194;
  float v195;
  float v196;
  float v197;
  int v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  uint64_t *v207;
  uint64_t v208;
  char **v209;
  _DWORD *v210;
  uint64_t ***v211;
  int *v212;
  _BOOL4 v213;
  uint64_t v214;
  void *__p;
  char *v216;
  char *v217;
  void *v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t *v222;
  _QWORD *v223;
  char *v224;
  char *v225;
  uint64_t ***v226;
  uint64_t ***v227;
  _QWORD v228[2];

  v2 = *((_QWORD *)this + 9);
  v207 = (uint64_t *)((char *)this + 72);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 10) - v2) >> 3))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v3 = *(_QWORD *)(v2 + 8 * a2);
  if (*(_BYTE *)(v3 + 48))
    return;
  *(_BYTE *)(v3 + 48) = 1;
  ++*((_DWORD *)this + 24);
  v226 = 0;
  v227 = 0;
  v228[0] = 0;
  v5 = *(uint64_t ****)v3;
  v204 = (_QWORD *)v3;
  v211 = *(uint64_t ****)(v3 + 8);
  if (*(uint64_t ****)v3 != v211)
  {
    while (1)
    {
      v6 = *v5;
      v7 = *((unsigned int *)*v5 + 2);
      if ((_DWORD)v7 != -2)
        break;
      v8 = *((_DWORD *)this + 2);
      if (!v8)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"sub_arc.ilabel != 0", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
      }
      v10 = *((_DWORD *)v6 + 3);
      v9 = *((_DWORD *)v6 + 4);
      v11 = v227;
      if ((unint64_t)v227 >= v228[0])
      {
        v38 = 0xAAAAAAAAAAAAAAABLL * (v227 - v226);
        v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3) > v39)
          v39 = 0x5555555555555556 * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3) >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v39;
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v228, v40);
        v43 = &v41[8 * (v227 - v226)];
        *(_QWORD *)v43 = v6;
        *((_DWORD *)v43 + 2) = v8;
        *((_DWORD *)v43 + 3) = v10;
        *((_DWORD *)v43 + 4) = v9;
        *((_DWORD *)v43 + 5) = -3;
        v45 = v226;
        v44 = v227;
        v46 = &v41[24 * v38];
        if (v227 != v226)
        {
          do
          {
            v47 = *(_OWORD *)(v44 - 3);
            *((_QWORD *)v46 - 1) = *(v44 - 1);
            *(_OWORD *)(v46 - 24) = v47;
            v46 -= 24;
            v44 -= 3;
          }
          while (v44 != v45);
          v44 = v226;
        }
        v12 = (uint64_t ***)(v43 + 24);
        v226 = (uint64_t ***)v46;
        v227 = (uint64_t ***)(v43 + 24);
        v228[0] = &v41[24 * v42];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v227 = v6;
        *((_DWORD *)v11 + 2) = v8;
        *((_DWORD *)v11 + 3) = v10;
        v12 = v11 + 3;
        *((_DWORD *)v11 + 4) = v9;
        *((_DWORD *)v11 + 5) = -3;
      }
      v227 = v12;
LABEL_57:
      if (++v5 == v211)
      {
        v48 = v226;
        v49 = (unint64_t)v227;
        goto LABEL_60;
      }
    }
    v13 = *v6;
    fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit((_QWORD *)(*v6)[2], **v6, v7);
    while (1)
    {
      v14 = (_QWORD *)v13[2];
      if (!*v14)
        break;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14) & 1) != 0)
        goto LABEL_57;
      v14 = (_QWORD *)v13[2];
      if (!*v14)
        goto LABEL_14;
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14);
LABEL_15:
      v16 = *(_DWORD *)v15;
      if (*((_DWORD *)this + 2) <= *(_DWORD *)v15 && *((_DWORD *)this + 3) >= v16)
        v16 = *((_DWORD *)this + 2);
      v17 = *(_DWORD *)(v15 + 4);
      v18 = *v5;
      if (!v17)
        v17 = *((_DWORD *)v18 + 3);
      v19 = *((float *)v18 + 4);
      v20 = NAN;
      if (v19 != -INFINITY)
      {
        v21 = *(float *)(v15 + 8);
        v20 = NAN;
        if (v21 != -INFINITY)
        {
          v22 = v21 == INFINITY || v19 == INFINITY;
          v23 = v19 + v21;
          if (v22)
            v20 = INFINITY;
          else
            v20 = v23;
        }
      }
      if (!v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"sub_arc.ilabel != 0", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
      }
      v24 = *(_DWORD *)(v15 + 12);
      v25 = v227;
      if ((unint64_t)v227 >= v228[0])
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * (v227 - v226);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3) > v28)
          v28 = 0x5555555555555556 * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228[0] - (_QWORD)v226) >> 3) >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v28;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v228, v29);
        v32 = &v30[8 * (v227 - v226)];
        *(_QWORD *)v32 = v18;
        *((_DWORD *)v32 + 2) = v16;
        *((_DWORD *)v32 + 3) = v17;
        *((float *)v32 + 4) = v20;
        *((_DWORD *)v32 + 5) = v24;
        v34 = v226;
        v33 = v227;
        v35 = &v30[24 * v27];
        if (v227 != v226)
        {
          do
          {
            v36 = *(_OWORD *)(v33 - 3);
            *((_QWORD *)v35 - 1) = *(v33 - 1);
            *(_OWORD *)(v35 - 24) = v36;
            v35 -= 24;
            v33 -= 3;
          }
          while (v33 != v34);
          v33 = v226;
        }
        v26 = (uint64_t ***)(v32 + 24);
        v226 = (uint64_t ***)v35;
        v227 = (uint64_t ***)(v32 + 24);
        v228[0] = &v30[24 * v31];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v227 = v18;
        *((_DWORD *)v25 + 2) = v16;
        *((_DWORD *)v25 + 3) = v17;
        *((float *)v25 + 4) = v20;
        v26 = v25 + 3;
        *((_DWORD *)v25 + 5) = v24;
      }
      v227 = v26;
      v37 = (_QWORD *)v13[2];
      if (*v37)
        (*(void (**)(_QWORD))(*(_QWORD *)*v37 + 40))(*v37);
      else
        ++v37[4];
    }
    if (v14[4] >= v14[2])
      goto LABEL_57;
LABEL_14:
    v15 = v14[1] + 16 * v14[4];
    goto LABEL_15;
  }
  v49 = 0;
  v48 = 0;
LABEL_60:
  v50 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v48) >> 3));
  if ((uint64_t ***)v49 == v48)
    v51 = 0;
  else
    v51 = v50;
  std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>((uint64_t)v48, v49, v51, 1);
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v52 = v226;
  v53 = v227;
  if (v227 == v226)
  {
    v54 = 0;
    v52 = v227;
    if (!v227)
      goto LABEL_87;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      v57 = &v52[3 * v55];
      v58 = *((_DWORD *)v57 + 2);
      if (v58 != *((_DWORD *)this + 2)
        || (v59 = v58 + v56, *((_DWORD *)v57 + 2) = v59, ++v56, v59 <= *((_DWORD *)this + 3)))
      {
        if (v54 >= v220)
        {
          v61 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (_BYTE *)v218) >> 3);
          v62 = v61 + 1;
          if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v220 - (_BYTE *)v218) >> 3) > v62)
            v62 = 0x5555555555555556 * ((v220 - (_BYTE *)v218) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v220 - (_BYTE *)v218) >> 3) >= 0x555555555555555)
            v63 = 0xAAAAAAAAAAAAAAALL;
          else
            v63 = v62;
          if (v63)
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v220, v63);
          else
            v64 = 0;
          v65 = &v64[24 * v61];
          v66 = *(_OWORD *)v57;
          *((_QWORD *)v65 + 2) = v57[2];
          *(_OWORD *)v65 = v66;
          v68 = (char *)v218;
          v67 = v219;
          v69 = v65;
          if (v219 != v218)
          {
            do
            {
              v70 = *(_OWORD *)(v67 - 24);
              *((_QWORD *)v69 - 1) = *((_QWORD *)v67 - 1);
              *(_OWORD *)(v69 - 24) = v70;
              v69 -= 24;
              v67 -= 24;
            }
            while (v67 != v68);
            v67 = (char *)v218;
          }
          v54 = v65 + 24;
          v218 = v69;
          v219 = v65 + 24;
          v220 = &v64[24 * v63];
          if (v67)
            operator delete(v67);
        }
        else
        {
          v60 = *(_OWORD *)v57;
          *((_QWORD *)v54 + 2) = v57[2];
          *(_OWORD *)v54 = v60;
          v54 += 24;
        }
        v219 = v54;
        v52 = v226;
        v53 = v227;
      }
      ++v55;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v53 - v52) > v55);
    if (!v52)
      goto LABEL_87;
  }
  v227 = v52;
  operator delete(v52);
  v54 = v219;
LABEL_87:
  v71 = (char *)v218;
  v226 = (uint64_t ***)v218;
  v227 = (uint64_t ***)v54;
  v228[0] = v220;
  v219 = 0;
  v220 = 0;
  v217 = 0;
  v218 = 0;
  __p = 0;
  v216 = 0;
  if (v54 != v71)
  {
    v206 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v71) >> 3);
    do
    {
      v75 = (int *)&v71[24 * v73 + 8];
      if (!v73)
        goto LABEL_94;
      v76 = *v75;
      v77 = *(_DWORD *)&v71[24 * v73 - 16];
      if (*v75 <= v77 && (v76 != v77 || *(float *)&v71[24 * v73 + 16] < *(float *)&v71[24 * v73 - 8]))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"!prev_arc || (current_arc->ilabel > prev_arc->ilabel) || (current_arc->ilabel == prev_arc->ilabel && current_arc->weight.Value() >= prev_arc->weight.Value())", 157);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
      }
      if (v77 != v76)
      {
LABEL_94:
        if (v72 >= v217)
        {
          v79 = (v72 - (_BYTE *)__p) >> 3;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v81 = v217 - (_BYTE *)__p;
          if ((v217 - (_BYTE *)__p) >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v217, v82);
          v85 = &v83[8 * v79];
          *(_DWORD *)v85 = v73;
          *((_DWORD *)v85 + 1) = -1;
          v87 = (char *)__p;
          v86 = v216;
          v88 = v85;
          if (v216 != __p)
          {
            do
            {
              v89 = *((_QWORD *)v86 - 1);
              v86 -= 8;
              *((_QWORD *)v88 - 1) = v89;
              v88 -= 8;
            }
            while (v86 != v87);
            v86 = (char *)__p;
          }
          v78 = v85 + 8;
          __p = v88;
          v216 = v78;
          v217 = &v83[8 * v84];
          if (v86)
          {
            v90 = v78;
            operator delete(v86);
            v78 = v90;
          }
        }
        else
        {
          *(_DWORD *)v72 = v73;
          *((_DWORD *)v72 + 1) = -1;
          v78 = v72 + 8;
        }
        v216 = v78;
        v206 = v78;
        v72 = v78;
      }
      v91 = v73 + 1;
      v92 = (v73 + 1);
      if (v74 == v92 || *(_DWORD *)&v71[24 * v92 + 8] != *v75)
      {
        v72 = v206;
        *((_DWORD *)v206 - 1) = v73;
      }
      v71 = (char *)v226;
      v74 = 0xAAAAAAAAAAAAAAABLL * (v227 - v226);
      ++v73;
    }
    while (v74 > v91);
    v93 = (char *)__p;
    v94 = v206;
    if (__p != v206)
    {
      v95 = v204;
      v208 = (uint64_t)(v204 + 5);
      v209 = (char **)(v204 + 3);
      v205 = (char *)this + 88;
      v96 = -1;
      while (1)
      {
        v97 = *((_DWORD *)v93 + 1);
        v98 = *(int *)v93;
        if (v97 < (int)v98)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"group_size > 0", 14);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
        }
        v212 = (int *)&v226[3 * (int)v98 + 1];
        v99 = *v212;
        if (*((_DWORD *)this + 2) <= *v212)
        {
          v213 = v97 != v98;
          v100 = v97 == (_DWORD)v98 || *((_DWORD *)this + 3) < v99;
          if (!v100)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"!IsDisambigSym(first_sub_arc.ilabel) || (group_size == 1)", 57);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
          }
        }
        else
        {
          v213 = v97 != v98;
        }
        if (v99 <= v96)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"first_sub_arc.ilabel > prev_group_ilabel", 40);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
        }
        v101 = 0;
        v210 = &v226[3 * (int)v98 + 2];
        do
        {
          v102 = v226;
          v103 = &v226[3 * v98];
          v105 = *((_DWORD *)v103 + 2);
          v104 = v103 + 1;
          if (v105 != *v212)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"sub_arc.ilabel == first_sub_arc.ilabel", 38);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
          }
          v106 = v226[3 * v98];
          v107 = &v226[3 * v98];
          v109 = *((_DWORD *)v107 + 5);
          v108 = (int *)v107 + 5;
          v110 = 0.0;
          if (v109 != -3)
          {
            v110 = (*(float (**)(uint64_t, float))(*(_QWORD *)**v106 + 32))(**v106, 0.0);
            *(float *)&v221 = v110;
            LODWORD(v214) = 2139095040;
            if (v110 == INFINITY)
            {
              if (!v101)
              {
                v131 = v95;
                if (v213)
                  v132 = 0;
                else
                  v132 = HIDWORD(v102[3 * v98 + 1]);
                v133 = *((_QWORD *)this + 10) - *((_QWORD *)this + 9);
                v134 = (_DWORD *)v131[4];
                v135 = v131[5];
                if ((unint64_t)v134 >= v135)
                {
                  v157 = ((char *)v134 - *v209) >> 4;
                  v158 = v157 + 1;
                  if ((unint64_t)(v157 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v159 = v135 - (_QWORD)*v209;
                  if (v159 >> 3 > v158)
                    v158 = v159 >> 3;
                  if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
                    v160 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v160 = v158;
                  v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v208, v160);
                  v163 = &v161[16 * v157];
                  *(_DWORD *)v163 = *v104;
                  *((_DWORD *)v163 + 1) = v132;
                  *((_DWORD *)v163 + 2) = *v210;
                  *((_DWORD *)v163 + 3) = v133 >> 3;
                  v165 = (char *)v204[3];
                  v164 = (char *)v204[4];
                  v166 = v163;
                  if (v164 != v165)
                  {
                    do
                    {
                      *((_OWORD *)v166 - 1) = *((_OWORD *)v164 - 1);
                      v166 -= 16;
                      v164 -= 16;
                    }
                    while (v164 != v165);
                    v164 = *v209;
                  }
                  v137 = v204;
                  v136 = v163 + 16;
                  v204[3] = v166;
                  v204[4] = v163 + 16;
                  v204[5] = &v161[16 * v162];
                  if (v164)
                    operator delete(v164);
                }
                else
                {
                  *v134 = *v104;
                  v134[1] = v132;
                  v134[2] = *v210;
                  v134[3] = v133 >> 3;
                  v136 = v134 + 4;
                  v137 = v204;
                }
                v95 = v137;
                v137[4] = v136;
                ++*((_DWORD *)this + 25);
                v167 = operator new();
                *(_QWORD *)(v167 + 48) = 0;
                *(_OWORD *)(v167 + 16) = 0u;
                *(_OWORD *)(v167 + 32) = 0u;
                *(_OWORD *)v167 = 0u;
                v214 = v167;
                v169 = (uint64_t *)*((_QWORD *)this + 10);
                v168 = *((_QWORD *)this + 11);
                if ((unint64_t)v169 >= v168)
                {
                  v171 = ((uint64_t)v169 - *v207) >> 3;
                  if ((unint64_t)(v171 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v172 = v168 - *v207;
                  v173 = v172 >> 2;
                  if (v172 >> 2 <= (unint64_t)(v171 + 1))
                    v173 = v171 + 1;
                  if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                    v174 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v174 = v173;
                  v225 = (char *)this + 88;
                  if (v174)
                  {
                    v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v205, v174);
                    v167 = v214;
                  }
                  else
                  {
                    v175 = 0;
                  }
                  v191 = (uint64_t *)&v175[8 * v171];
                  v221 = v175;
                  v222 = v191;
                  v224 = &v175[8 * v174];
                  v214 = 0;
                  *v191 = v167;
                  v223 = v191 + 1;
                  std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(v207, &v221);
                  v170 = (_QWORD *)*((_QWORD *)this + 10);
                  std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer((uint64_t)&v221);
                }
                else
                {
                  v214 = 0;
                  *v169 = v167;
                  v170 = v169 + 1;
                  *((_QWORD *)this + 10) = v170;
                }
                *((_QWORD *)this + 10) = v170;
                v101 = (uint64_t *)*(v170 - 1);
                v192 = v214;
                v214 = 0;
                if (v192)
                  std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)&v214, v192);
              }
              v193 = &v102[3 * v98];
              if (v213)
                v194 = *((_DWORD *)v193 + 3);
              else
                v194 = 0;
              v195 = *((float *)v193 + 4);
              v196 = NAN;
              if (v195 != -INFINITY)
              {
                if ((*v210 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  v22 = v195 == INFINITY;
                  v197 = v195 - *(float *)v210;
                  if (v22)
                    v196 = INFINITY;
                  else
                    v196 = v197;
                }
                else
                {
                  v196 = NAN;
                }
              }
              v181 = operator new();
              v198 = *v108;
              *(_QWORD *)v181 = *v106;
              *(_DWORD *)(v181 + 8) = v198;
              *(_DWORD *)(v181 + 12) = v194;
              *(float *)(v181 + 16) = v196;
              v183 = (uint64_t)(v101 + 2);
              v199 = v101[2];
              v185 = (uint64_t *)v101[1];
              if ((unint64_t)v185 < v199)
              {
LABEL_227:
                *v185 = v181;
                v200 = v185 + 1;
                v101[1] = (uint64_t)v200;
LABEL_238:
                v101[1] = (uint64_t)v200;
                goto LABEL_239;
              }
              v186 = ((uint64_t)v185 - *v101) >> 3;
              if ((unint64_t)(v186 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v201 = v199 - *v101;
              v202 = v201 >> 2;
              if (v201 >> 2 <= (unint64_t)(v186 + 1))
                v202 = v186 + 1;
              if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
                v189 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v189 = v202;
              v225 = (char *)(v101 + 2);
              if (v189)
LABEL_235:
                v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v183, v189);
              else
                v190 = 0;
LABEL_237:
              v203 = (uint64_t *)&v190[8 * v186];
              v221 = v190;
              v222 = v203;
              v224 = &v190[8 * v189];
              *v203 = v181;
              v223 = v203 + 1;
              std::vector<std::unique_ptr<fst::quasar::SubPath>>::__swap_out_circular_buffer(v101, &v221);
              v200 = (_QWORD *)v101[1];
              std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::~__split_buffer((uint64_t)&v221);
              goto LABEL_238;
            }
          }
          *(float *)&v221 = v110;
          LODWORD(v214) = 0;
          if (v110 != 0.0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"sub_arc_nextstate_final == Weight::One()", 40);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
          }
          if (v213)
          {
            if (!v101)
            {
              v111 = *((_QWORD *)this + 10) - *((_QWORD *)this + 9);
              v112 = (_DWORD *)v95[4];
              v113 = v95[5];
              if ((unint64_t)v112 >= v113)
              {
                v138 = ((char *)v112 - *v209) >> 4;
                v139 = v138 + 1;
                if ((unint64_t)(v138 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v140 = v113 - (_QWORD)*v209;
                if (v140 >> 3 > v139)
                  v139 = v140 >> 3;
                if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0)
                  v141 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v141 = v139;
                v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v208, v141);
                v144 = &v142[16 * v138];
                *(_DWORD *)v144 = *v104;
                *((_DWORD *)v144 + 1) = 0;
                *((_DWORD *)v144 + 2) = *v210;
                *((_DWORD *)v144 + 3) = v111 >> 3;
                v146 = (char *)v95[3];
                v145 = (char *)v95[4];
                v147 = v144;
                if (v145 != v146)
                {
                  do
                  {
                    *((_OWORD *)v147 - 1) = *((_OWORD *)v145 - 1);
                    v147 -= 16;
                    v145 -= 16;
                  }
                  while (v145 != v146);
                  v145 = *v209;
                }
                v114 = v144 + 16;
                v95[3] = v147;
                v95[4] = v144 + 16;
                v95[5] = &v142[16 * v143];
                if (v145)
                  operator delete(v145);
              }
              else
              {
                *v112 = *v104;
                v112[1] = 0;
                v112[2] = *v210;
                v112[3] = v111 >> 3;
                v114 = v112 + 4;
              }
              v95[4] = v114;
              ++*((_DWORD *)this + 25);
              v148 = operator new();
              *(_QWORD *)(v148 + 48) = 0;
              *(_OWORD *)(v148 + 16) = 0u;
              *(_OWORD *)(v148 + 32) = 0u;
              *(_OWORD *)v148 = 0u;
              v214 = v148;
              v150 = (uint64_t *)*((_QWORD *)this + 10);
              v149 = *((_QWORD *)this + 11);
              if ((unint64_t)v150 >= v149)
              {
                v152 = ((uint64_t)v150 - *v207) >> 3;
                if ((unint64_t)(v152 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v153 = v149 - *v207;
                v154 = v153 >> 2;
                if (v153 >> 2 <= (unint64_t)(v152 + 1))
                  v154 = v152 + 1;
                if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
                  v155 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v155 = v154;
                v225 = (char *)this + 88;
                if (v155)
                {
                  v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v205, v155);
                  v148 = v214;
                }
                else
                {
                  v156 = 0;
                }
                v176 = (uint64_t *)&v156[8 * v152];
                v221 = v156;
                v222 = v176;
                v224 = &v156[8 * v155];
                v214 = 0;
                *v176 = v148;
                v223 = v176 + 1;
                std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(v207, &v221);
                v151 = (_QWORD *)*((_QWORD *)this + 10);
                std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer((uint64_t)&v221);
              }
              else
              {
                v214 = 0;
                *v150 = v148;
                v151 = v150 + 1;
                *((_QWORD *)this + 10) = v151;
              }
              *((_QWORD *)this + 10) = v151;
              v101 = (uint64_t *)*(v151 - 1);
              v177 = v214;
              v214 = 0;
              if (v177)
                std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)&v214, v177);
            }
            v178 = *(float *)&v102[3 * v98 + 2];
            v179 = NAN;
            if (v178 != -INFINITY)
            {
              if ((*v210 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v22 = v178 == INFINITY;
                v180 = v178 - *(float *)v210;
                if (v22)
                  v179 = INFINITY;
                else
                  v179 = v180;
              }
              else
              {
                v179 = NAN;
              }
            }
            v181 = operator new();
            v182 = HIDWORD(v102[3 * v98 + 1]);
            *(_QWORD *)v181 = *v106;
            *(_DWORD *)(v181 + 8) = -2;
            *(_DWORD *)(v181 + 12) = v182;
            *(float *)(v181 + 16) = v179;
            v183 = (uint64_t)(v101 + 2);
            v184 = v101[2];
            v185 = (uint64_t *)v101[1];
            if ((unint64_t)v185 < v184)
              goto LABEL_227;
            v186 = ((uint64_t)v185 - *v101) >> 3;
            if ((unint64_t)(v186 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v187 = v184 - *v101;
            v188 = v187 >> 2;
            if (v187 >> 2 <= (unint64_t)(v186 + 1))
              v188 = v186 + 1;
            if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
              v189 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v189 = v188;
            v225 = (char *)(v101 + 2);
            if (v189)
              goto LABEL_235;
            v190 = 0;
            goto LABEL_237;
          }
          v115 = &v102[3 * v98 + 2];
          v116 = v95[4];
          v117 = v95[5];
          if (v116 >= v117)
          {
            v120 = (uint64_t)(v116 - (_QWORD)*v209) >> 4;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v122 = v117 - (_QWORD)*v209;
            if (v122 >> 3 > v121)
              v121 = v122 >> 3;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
              v123 = 0xFFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v208, v123);
            v126 = &v124[16 * v120];
            v127 = *((_DWORD *)this + 11);
            *(_QWORD *)v126 = *(_QWORD *)v104;
            *((_DWORD *)v126 + 2) = *(_DWORD *)v115;
            *((_DWORD *)v126 + 3) = v127;
            v129 = (char *)v95[3];
            v128 = (char *)v95[4];
            v130 = v126;
            if (v128 != v129)
            {
              do
              {
                *((_OWORD *)v130 - 1) = *((_OWORD *)v128 - 1);
                v130 -= 16;
                v128 -= 16;
              }
              while (v128 != v129);
              v128 = *v209;
            }
            v119 = v126 + 16;
            v95[3] = v130;
            v95[4] = v126 + 16;
            v95[5] = &v124[16 * v125];
            if (v128)
              operator delete(v128);
          }
          else
          {
            v118 = *((_DWORD *)this + 11);
            *(_QWORD *)v116 = *(_QWORD *)v104;
            *(_DWORD *)(v116 + 8) = *(_DWORD *)v115;
            *(_DWORD *)(v116 + 12) = v118;
            v119 = (char *)(v116 + 16);
          }
          v95[4] = v119;
          ++*((_DWORD *)this + 25);
LABEL_239:
          v100 = v98++ < *((int *)v93 + 1);
        }
        while (v100);
        v96 = *v212;
        v93 += 8;
        if (v93 == v206)
        {
          v94 = (char *)__p;
          break;
        }
      }
    }
    if (v94)
    {
      v216 = v94;
      operator delete(v94);
    }
    if (v218)
    {
      v219 = (char *)v218;
      operator delete(v218);
    }
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
}

void sub_1ADB26BA0()
{
  void *v0;
  void *v1;

  if (v0)
    operator delete(v0);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x1ADB26BD4);
}

uint64_t fst::quasar::MergeTrieFstImpl::NumArcs(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  uint64_t v4;

  fst::quasar::MergeTrieFstImpl::Expand(this, a2);
  v4 = *((_QWORD *)this + 9);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 10) - v4) >> 3))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 8 * a2) + 32) - *(_QWORD *)(*(_QWORD *)(v4 + 8 * a2) + 24)) >> 4;
}

uint64_t fst::quasar::MergeTrieFstImpl::NumOutputEpsilons(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  fst::quasar::MergeTrieFstImpl::Expand(this, a2);
  v4 = *((_QWORD *)this + 9);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 10) - v4) >> 3))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(v4 + 8 * a2);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  if (v6 == v7)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v6 + 4))
      result = result;
    else
      result = (result + 1);
    v6 += 16;
  }
  while (v6 != v7);
  return result;
}

void fst::quasar::MergeTrieFstImpl::Type(fst::quasar::MergeTrieFstImpl *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void fst::quasar::MergeTrieFstImpl::Write()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void fst::quasar::MergeTrieFstImpl::InitArcIterator(fst::quasar::MergeTrieFstImpl *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  fst::quasar::MergeTrieFstImpl::Expand(a1, a2);
  *a3 = 0;
  v6 = *((_QWORD *)a1 + 9);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 10) - v6) >> 3))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v7 = (_QWORD *)(*(_QWORD *)(v6 + 8 * a2) + 24);
  v8 = (uint64_t)(v7[1] - *v7) >> 4;
  a3[1] = *v7;
  a3[2] = v8;
  a3[3] = 0;
}

_QWORD *fst::quasar::MergeTrieFst::MergeTrieFst(_QWORD *a1, uint64_t a2, int a3, int a4, __int128 *a5)
{
  int v7;
  int v8;

  v7 = a4;
  v8 = a3;
  *a1 = &off_1E5D22498;
  std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFstImpl,std::allocator<fst::quasar::MergeTrieFstImpl>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>(a2, &v8, &v7, a5, a1 + 1);
  return a1;
}

uint64_t fst::quasar::MergeTrieFst::CurrentUnigramFst@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 104);
  v3 = *(_QWORD *)(v2 + 112);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t fst::quasar::MergeTrieFst::HasSequentialStates(fst::quasar::MergeTrieFst *this)
{
  return 1;
}

uint64_t fst::quasar::MergeTrieFst::Start(fst::quasar::MergeTrieFst *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 40);
}

float fst::quasar::MergeTrieFst::Final(fst::quasar::MergeTrieFst *this, int a2)
{
  float result;

  result = INFINITY;
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 44) == a2)
    return 0.0;
  return result;
}

uint64_t fst::quasar::MergeTrieFst::NumArcs(fst::quasar::MergeTrieFstImpl **this, int a2)
{
  return fst::quasar::MergeTrieFstImpl::NumArcs(this[1], a2);
}

uint64_t fst::quasar::MergeTrieFst::NumInputEpsilons(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

uint64_t fst::quasar::MergeTrieFst::NumOutputEpsilons(fst::quasar::MergeTrieFstImpl **this, int a2)
{
  return fst::quasar::MergeTrieFstImpl::NumOutputEpsilons(this[1], a2);
}

uint64_t fst::quasar::MergeTrieFst::Properties(fst::quasar::MergeTrieFst *this, uint64_t a2)
{
  return a2 & 0x52812840000;
}

void fst::quasar::MergeTrieFst::Type(fst::quasar::MergeTrieFst *this)
{
  fst::quasar::MergeTrieFstImpl::Type(this);
}

_QWORD *fst::quasar::MergeTrieFst::Copy(fst::quasar::MergeTrieFst *this, int a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[34];

  if (a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "!safe");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  result = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  *result = &off_1E5D22498;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void fst::quasar::MergeTrieFst::Write()
{
  fst::quasar::MergeTrieFstImpl::Write();
}

{
  fst::quasar::MergeTrieFstImpl::Write();
}

uint64_t fst::quasar::MergeTrieFst::InputSymbols(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

uint64_t fst::quasar::MergeTrieFst::OutputSymbols(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

void fst::quasar::MergeTrieFst::InitStateIterator(uint64_t a1, uint64_t a2)
{
  fst::quasar::MergeTrieFstImpl *v3;

  v3 = *(fst::quasar::MergeTrieFstImpl **)(a1 + 8);
  fst::quasar::MergeTrieFstImpl::ExpandAll(v3);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*((_QWORD *)v3 + 10) - *((_QWORD *)v3 + 9)) >> 3;
}

void fst::quasar::MergeTrieFst::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  fst::quasar::MergeTrieFstImpl::InitArcIterator(*(fst::quasar::MergeTrieFstImpl **)(a1 + 8), a2, a3);
}

void fst::quasar::MergeTrieFst::~MergeTrieFst(fst::quasar::MergeTrieFst *this)
{
  *(_QWORD *)this = &off_1E5D22498;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E5D22498;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1AF44D190);
}

void std::vector<std::unique_ptr<fst::quasar::FstData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::FstData>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<fst::quasar::FstData>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<fst::quasar::State>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::State>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<fst::quasar::State>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *fst::quasar::FstData::FstData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v8 = operator new();
  *(_QWORD *)(v8 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v7, v8);
  a1[2] = v8;
  return a1;
}

void sub_1ADB27208(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x1070C401ACC3EEFLL);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v3 = (_QWORD *)(a2 + 16);
    v4 = *(_QWORD **)(a2 + 16);
    *v3 = 0;
    if (v4)
      std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)v3, v4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::FstData>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100](i - 8, v5);
  }
}

void std::default_delete<fst::quasar::State>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = v3;
      operator delete(v3);
    }
    v4 = (void **)a2;
    std::vector<std::unique_ptr<fst::quasar::SubPath>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1AF44D190](a2, 0x1020C40FB1A5927);
  }
}

void std::vector<std::unique_ptr<fst::quasar::SubPath>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::SubPath>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::SubPath>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x1AF44D190](result, 0x1020C405AF6BDC9);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<fst::quasar::State>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<fst::quasar::State>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<fst::quasar::State>::operator()[abi:ne180100](i - 8, v5);
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::SubPath>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    *v1 = 0;
    if (result)
      result = MEMORY[0x1AF44D190](result, 0x1020C405AF6BDC9);
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x1AF44D190](result, 0x1020C405AF6BDC9);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB279F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D413A8;
  a1[1] = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a1 + 3);
  return a1;
}

void sub_1ADB27A3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  BOOL v40;
  int v41;
  float v42;
  _BOOL4 v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unint64_t v51;
  int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  float v65;
  _BOOL4 v66;
  int v67;
  float v68;
  BOOL v69;
  __int128 *v70;
  int v71;
  __int128 *v72;
  int v73;
  _BOOL4 v74;
  uint64_t v75;
  _QWORD *v76;
  BOOL v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  int v83;
  float v84;
  _BOOL4 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  _BOOL4 v102;
  _BOOL4 v103;
  unint64_t v104;
  int v105;
  int v106;
  float v107;
  BOOL v108;
  BOOL v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  _BOOL4 v120;
  _BOOL4 v121;
  int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  _BOOL4 v136;
  _BOOL4 v137;
  _OWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  float v144;
  _BOOL4 v145;
  _BOOL4 v146;
  uint64_t v147;
  int v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  BOOL v153;
  BOOL v154;
  float *v156;
  uint64_t *v157;
  int v158;
  int v159;
  float v160;
  _BOOL4 v161;
  uint64_t v162;
  int v163;
  float *v164;
  int v165;
  int v166;
  BOOL v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v10;
  int v11;
  __n128 *v12;
  int v13;
  __n128 result;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  __n128 *v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  __n128 *v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  __n128 *v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, a2, a3, a4);
  v10 = (__n128 *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 8);
  v12 = (__n128 *)(a4 + 8);
  v13 = *(_DWORD *)(a4 + 8);
  result.n128_u32[0] = *(_DWORD *)(a5 + 16);
  v15 = v11 == v13;
  v16 = v11 < v13;
  if (v15)
    v16 = result.n128_f32[0] < *(float *)(a4 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v17;
    result = *v12;
    *v12 = *v10;
    *v10 = result;
    v18 = (__n128 *)(a3 + 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
    v19 = *(_DWORD *)(a4 + 8);
    result.n128_u32[0] = *(_DWORD *)(a4 + 16);
    v15 = v19 == (_DWORD)v17;
    v20 = v19 < (int)v17;
    if (v15)
      v20 = result.n128_f32[0] < *(float *)(a3 + 16);
    if (v20)
    {
      v21 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v21;
      result = *v18;
      *v18 = *v12;
      *v12 = result;
      v22 = (__n128 *)(a2 + 8);
      LODWORD(v21) = *(_DWORD *)(a2 + 8);
      v23 = *(_DWORD *)(a3 + 8);
      result.n128_u32[0] = *(_DWORD *)(a3 + 16);
      v15 = v23 == (_DWORD)v21;
      v24 = v23 < (int)v21;
      if (v15)
        v24 = result.n128_f32[0] < *(float *)(a2 + 16);
      if (v24)
      {
        v25 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v25;
        result = *v22;
        *v22 = *v18;
        *v18 = result;
        v26 = (__n128 *)(a1 + 8);
        LODWORD(v25) = *(_DWORD *)(a1 + 8);
        v27 = *(_DWORD *)(a2 + 8);
        result.n128_u32[0] = *(_DWORD *)(a2 + 16);
        v15 = v27 == (_DWORD)v25;
        v28 = v27 < (int)v25;
        if (v15)
          v28 = result.n128_f32[0] < *(float *)(a1 + 16);
        if (v28)
        {
          v29 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v29;
          result = *v26;
          *v26 = *v22;
          *v22 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  __int128 *v3;
  int v4;
  __int128 *v5;
  int v6;
  float v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  __int128 *v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;

  v3 = (__int128 *)(a2 + 1);
  v4 = *((_DWORD *)a2 + 2);
  v5 = (__int128 *)(result + 1);
  v6 = *((_DWORD *)result + 2);
  v7 = *((float *)a2 + 4);
  v8 = v4 == v6;
  v9 = v4 < v6;
  if (v8)
    v10 = v7 < *((float *)result + 4);
  else
    v10 = v9;
  v11 = (__int128 *)(a3 + 1);
  v12 = *((_DWORD *)a3 + 2);
  v8 = v12 == v4;
  v13 = v12 < v4;
  if (v8)
    v14 = *((float *)a3 + 4) < v7;
  else
    v14 = v13;
  if (v10)
  {
    v15 = *result;
    if (v14)
    {
      *result = *a3;
      *a3 = v15;
      v16 = *v5;
      *v5 = *v11;
LABEL_19:
      *v11 = v16;
      return result;
    }
    *result = *a2;
    *a2 = v15;
    v23 = *v5;
    *v5 = *v3;
    *v3 = v23;
    v24 = *((_DWORD *)a3 + 2);
    v25 = *((_DWORD *)a2 + 2);
    v8 = v24 == v25;
    v26 = v24 < v25;
    if (v8)
      v26 = *((float *)a3 + 4) < *((float *)a2 + 4);
    if (v26)
    {
      v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      v16 = *v3;
      *v3 = *v11;
      goto LABEL_19;
    }
  }
  else if (v14)
  {
    v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    v18 = *v3;
    *v3 = *v11;
    *v11 = v18;
    v19 = *((_DWORD *)a2 + 2);
    LODWORD(v17) = *((_DWORD *)result + 2);
    v8 = v19 == (_DWORD)v17;
    v20 = v19 < (int)v17;
    if (v8)
      v20 = *((float *)a2 + 4) < *((float *)result + 4);
    if (v20)
    {
      v21 = *result;
      *result = *a2;
      *a2 = v21;
      v22 = *v5;
      *v5 = *v3;
      *v3 = v22;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  int v7;
  __int128 *v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  float v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 16);
      v7 = *(_DWORD *)(a2 - 16);
      v8 = (__int128 *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 8);
      v10 = v7 == v9;
      v11 = v7 < v9;
      if (v10)
        v11 = *(float *)(a2 - 8) < *(float *)(a1 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v12;
        v13 = *v8;
        *v8 = *v6;
        *v6 = v13;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v14 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v15 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_DWORD *)(v15 + 8);
    v19 = *(_DWORD *)(v14 + 8);
    v20 = *(float *)(v15 + 16);
    v10 = v18 == v19;
    v21 = v18 < v19;
    if (v10)
      v21 = v20 < *(float *)(v14 + 16);
    if (v21)
    {
      v22 = *(_QWORD *)v15;
      v23 = *(_DWORD *)(v15 + 12);
      v24 = v16;
      v25 = *(_DWORD *)(v15 + 20);
      while (1)
      {
        v26 = a1 + v24;
        *(_QWORD *)(v26 + 72) = *(_QWORD *)(a1 + v24 + 48);
        *(_OWORD *)(v26 + 80) = *(_OWORD *)(a1 + v24 + 56);
        if (v24 == -48)
          break;
        v27 = *(_DWORD *)(v26 + 32);
        v10 = v18 == v27;
        v28 = v18 < v27;
        if (v10)
          v28 = v20 < *(float *)(v26 + 40);
        v24 -= 24;
        if (!v28)
        {
          v29 = a1 + v24 + 72;
          goto LABEL_18;
        }
      }
      v29 = a1;
LABEL_18:
      *(_QWORD *)v29 = v22;
      *(_DWORD *)(v26 + 56) = v18;
      *(_DWORD *)(v29 + 12) = v23;
      *(float *)(v29 + 16) = v20;
      ++v17;
      *(_DWORD *)(v29 + 20) = v25;
      if (v17 == 8)
        return v15 + 24 == a2;
    }
    v14 = v15;
    v16 += 24;
    v15 += 24;
    if (v15 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  int v9;
  __n128 *v10;
  int v11;
  __n128 result;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  __n128 *v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  __n128 *v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v8 = (__n128 *)(a4 + 8);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = (__n128 *)(a3 + 8);
  v11 = *(_DWORD *)(a3 + 8);
  result.n128_u32[0] = *(_DWORD *)(a4 + 16);
  v13 = v9 == v11;
  v14 = v9 < v11;
  if (v13)
    v14 = result.n128_f32[0] < *(float *)(a3 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v15;
    result = *v10;
    *v10 = *v8;
    *v8 = result;
    v16 = (__n128 *)(a2 + 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
    v17 = *(_DWORD *)(a3 + 8);
    result.n128_u32[0] = *(_DWORD *)(a3 + 16);
    v13 = v17 == (_DWORD)v15;
    v18 = v17 < (int)v15;
    if (v13)
      v18 = result.n128_f32[0] < *(float *)(a2 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v19;
      result = *v16;
      *v16 = *v10;
      *v10 = result;
      v20 = (__n128 *)(a1 + 8);
      LODWORD(v19) = *(_DWORD *)(a1 + 8);
      v21 = *(_DWORD *)(a2 + 8);
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      v13 = v21 == (_DWORD)v19;
      v22 = v21 < (int)v19;
      if (v13)
        v22 = result.n128_f32[0] < *(float *)(a1 + 16);
      if (v22)
      {
        v23 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v23;
        result = *v20;
        *v20 = *v16;
        *v16 = result;
      }
    }
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFstImpl,std::allocator<fst::quasar::MergeTrieFstImpl>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>@<X0>(uint64_t a1@<X1>, int *a2@<X2>, int *a3@<X3>, __int128 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFstImpl>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADB28B2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFstImpl>,0>(_QWORD *a1, uint64_t a2, int *a3, int *a4, __int128 *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D411B0;
  a1[1] = 0;
  fst::quasar::MergeTrieFstImpl::MergeTrieFstImpl((uint64_t)(a1 + 3), a2, *a3, *a4, a5);
  return a1;
}

void sub_1ADB28B80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D411B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D411B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sdapi::sdapiErrorHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t vars0;

  return sdapi::SDAPIOSLog((sdapi *)0x10, (os_log_type_t)*(_QWORD *)(**(_QWORD **)vars0 + 8), "error: %s", a4, this);
}

uint64_t sdapi::SDAPIOSLog(sdapi *this, os_log_type_t a2, void *a3, const char *a4, ...)
{
  unsigned __int8 v4;

  {
    sdapi::SDAPIOSLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "sdapi");
  }
  return os_log_with_args();
}

uint64_t sdapi::sdapiMemoryErrorHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t vars0;

  return sdapi::SDAPIOSLog((sdapi *)0x10, (os_log_type_t)*(_QWORD *)(**(_QWORD **)vars0 + 8), "memory error: %s", a4, this);
}

uint64_t sdapi::sdapiLogHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t vars0;

  return sdapi::SDAPIOSLog((sdapi *)2, (os_log_type_t)*(_QWORD *)(**(_QWORD **)vars0 + 8), "%s", a4, this);
}

uint64_t sdapi::SdapiUtil::initializeSdapi(sdapi::SdapiUtil *this)
{
  std::recursive_mutex *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v1 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (SDApi_Initialize() != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v7 = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0u;
      v4 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialized profile service failed ", 35);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v4);
    }
LABEL_11:
    v2 = 0;
    goto LABEL_12;
  }
  if (quasar::gLogLevel >= 4)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of profile service succeeded ", 44);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v4);
  }
  if (partial apply())
  {
    if (quasar::gLogLevel >= 1)
    {
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v7 = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0u;
      v4 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of textproc failed ", 34);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v4);
    }
    goto LABEL_11;
  }
  if (quasar::gLogLevel >= 4)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of textproc succeeded ", 37);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v4);
  }
  v2 = 1;
LABEL_12:
  std::recursive_mutex::unlock(v1);
  return v2;
}

void sub_1ADB28FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::recursive_mutex *v19;

  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::getSharedMutex(sdapi::SdapiUtil *this)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  return sdapi::SdapiUtil::getSharedMutex(void)::mutex;
}

uint64_t sdapi::SdapiUtil::loadGeneralVoc(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a1 + 23) >= 0)
    v5 = (const char *)a1;
  else
    v5 = *(const char **)a1;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = SDVoc_New();
  if (v7 == -1)
  {
    if (quasar::gLogLevel >= 1)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loading of general voc failed for voc=", 38);
      v15 = strlen(v5);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v5, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", svc=", 6);
      v18 = strlen(v6);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" with value=", 12);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v22);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loading succeeded for voc=", 26);
    v9 = strlen(v5);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v5, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and svc=", 9);
    v12 = strlen(v6);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with value=", 12);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
  }
  sdapi::SdapiUtil::allowCollation();
  SDVoc_GetInfo();
  if (v21 == 1)
  {
    if (quasar::gLogLevel >= 4)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loaded CP1252 voc\n", 18);
      goto LABEL_20;
    }
  }
  else if (v21 == 2 && quasar::gLogLevel >= 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loaded UTF8 voc\n", 16);
LABEL_20:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
  }
  std::recursive_mutex::unlock(v4);
  return v7;
}

void sub_1ADB29380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  std::recursive_mutex *v17;
  va_list va;

  va_start(va, a17);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  std::recursive_mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void sdapi::SdapiUtil::allowCollation()
{
  std::recursive_mutex *v0;
  unsigned int Colls;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[64];
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v0 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  memset(v7, 0, sizeof(v7));
  Colls = SDVoc_GetColls();
  if (!Colls)
    goto LABEL_11;
  v2 = 0;
  v3 = 8 * Colls;
  while (1)
  {
    if (*(_QWORD *)((char *)v7 + v2) != -2)
    {
      SDVoc_GetCollationName();
      if (*(_QWORD *)&v6[0] == 0x6C6F636E656B6F74 && WORD4(v6[0]) == 108)
        break;
    }
    v2 += 8;
    if (v3 == v2)
      goto LABEL_11;
  }
  v5 = *(_QWORD *)((char *)v7 + v2);
  if (v5 == -1)
  {
LABEL_11:
    memset(v6, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: Voc does not contain the tokencoll collation table", 57);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  SDVoc_SetAllowedWordCollations();
  std::recursive_mutex::unlock(v0);
}

void sub_1ADB29588(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB295A8);
}

void sub_1ADB29598(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiUtil::readConfig(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t String;
  __int128 v6;
  quasar::PTree *Child;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  _QWORD *v11;
  uint64_t p_p;
  uint64_t v13;
  const std::string *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::string::size_type size;
  _BYTE *v26;
  std::string *v27;
  uint64_t v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  std::string::size_type v38;
  _BYTE *v39;
  std::string *v40;
  uint64_t v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  std::string::size_type v51;
  _BYTE *v52;
  std::string *v53;
  uint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  char v60;
  _QWORD *v61;
  _BYTE *v62;
  uint64_t v63;
  std::string::size_type v64;
  _BYTE *v65;
  std::string *v66;
  uint64_t v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  char v73;
  _QWORD *v74;
  _BYTE *v75;
  uint64_t v76;
  std::string::size_type v77;
  _BYTE *v78;
  std::string *v79;
  uint64_t v80;
  int v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  char v86;
  _QWORD *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t ChildOptional;
  uint64_t v91;
  std::string::size_type v92;
  _BYTE *v93;
  std::string *v94;
  uint64_t v95;
  int v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  _QWORD *v102;
  _BYTE *v103;
  uint64_t v104;
  std::string::size_type v105;
  _BYTE *v106;
  std::string *v107;
  uint64_t v108;
  int v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  std::string *v112;
  std::string::size_type v113;
  char v114;
  _QWORD *v115;
  _BYTE *v116;
  uint64_t v117;
  std::string::size_type v118;
  _BYTE *v119;
  std::string *v120;
  uint64_t v121;
  int v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string *v125;
  std::string::size_type v126;
  char v127;
  _QWORD *v128;
  _BYTE *v129;
  uint64_t v130;
  std::string::size_type v131;
  _BYTE *v132;
  std::string *v133;
  uint64_t v134;
  int v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  std::string *v138;
  std::string::size_type v139;
  char v140;
  _QWORD *v141;
  std::string *v142;
  std::string::size_type v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  std::recursive_mutex *v148;
  void *v150[2];
  char v151;
  int v152;
  std::string v153;
  std::string v154;
  char v155;
  int v156;
  std::string v157;
  std::string v158;
  char v159;
  _BYTE v160[32];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 __p;
  __int128 v177;
  __int128 v178;
  int v179;
  _BYTE v180[32];
  __int128 v181;
  _BYTE v182[32];
  __int128 v183;
  _BYTE v184[32];
  __int128 v185;
  _BYTE v186[32];
  __int128 v187;
  std::string v188;
  char v189;
  std::string v190;
  _BYTE v191[64];
  _QWORD v192[5];

  v192[2] = *MEMORY[0x1E0C80C00];
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v3 = sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  quasar::PTree::PTree((quasar::PTree *)v191);
  quasar::PTree::readJsonFromFile(v4, a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "datapackDir");
  String = quasar::PTree::getString((uint64_t)v191, &__p);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v6 = *(_OWORD *)String;
    v190.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v6;
  }
  if (SBYTE7(v177) < 0)
    operator delete((void *)__p);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "locales");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v191, &__p);
  if (SBYTE7(v177) < 0)
    operator delete((void *)__p);
  v148 = (std::recursive_mutex *)v3;
  v8 = quasar::PTree::begin(Child);
  v9 = quasar::PTree::end(Child);
  if (v8 != v9)
  {
    do
    {
      v177 = 0u;
      v178 = 0u;
      __p = 0u;
      memset(v180, 0, sizeof(v180));
      v181 = 0u;
      memset(v182, 0, sizeof(v182));
      v183 = 0u;
      memset(v184, 0, sizeof(v184));
      v185 = 0u;
      memset(v186, 0, sizeof(v186));
      v187 = 0u;
      memset(&v188, 0, sizeof(v188));
      std::string::basic_string[abi:ne180100]<0>(v160, "name");
      v10 = (const std::string *)quasar::PTree::getString(v8 + 24, (__int128 *)v160);
      std::string::operator=((std::string *)&__p, v10);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"locale: ", 8);
        if ((SBYTE7(v177) & 0x80u) == 0)
          p_p = (uint64_t)&__p;
        else
          p_p = __p;
        if ((SBYTE7(v177) & 0x80u) == 0)
          v13 = BYTE7(v177);
        else
          v13 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, p_p, v13);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      std::string::basic_string[abi:ne180100]<0>(v160, "modelVersion");
      v14 = (const std::string *)quasar::PTree::getString(v8 + 24, (__int128 *)v160);
      std::string::operator=((std::string *)((char *)&v177 + 8), v14);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"modelVersion: ", 14);
        if (v178 >= 0)
          v16 = (char *)&v177 + 8;
        else
          v16 = (char *)*((_QWORD *)&v177 + 1);
        if (v178 >= 0)
          v17 = HIBYTE(v178);
        else
          v17 = v178;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      std::string::basic_string[abi:ne180100]<0>(v160, "languageId");
      v179 = quasar::PTree::getInt<int>(v8 + 24, (__int128 *)v160);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"languageId: ", 12);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      std::string::basic_string[abi:ne180100]<0>(v160, "language_model_set");
      v18 = quasar::PTree::getChild(v8 + 24, (__int128 *)v160);
      v19 = v18;
      v156 = *(_DWORD *)v18;
      if (*(char *)(v18 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
      }
      else
      {
        v20 = *(_OWORD *)(v18 + 8);
        v157.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v20;
      }
      memset(&v158, 0, sizeof(v158));
      std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v158, *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 3));
      v159 = *(_BYTE *)(v19 + 56);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      std::string::basic_string[abi:ne180100]<0>(v160, "acoustic_model_set");
      v21 = quasar::PTree::getChild(v8 + 24, (__int128 *)v160);
      v22 = v21;
      v152 = *(_DWORD *)v21;
      if (*(char *)(v21 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v21 + 8);
        v153.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v23;
      }
      memset(&v154, 0, sizeof(v154));
      std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v154, *(_QWORD *)(v22 + 32), *(_QWORD *)(v22 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v22 + 40) - *(_QWORD *)(v22 + 32)) >> 3));
      v155 = *(_BYTE *)(v22 + 56);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      v24 = v9;
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        size = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, size + 1);
      if (v160[23] >= 0)
        v26 = v160;
      else
        v26 = *(_BYTE **)v160;
      if (size)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v190;
        else
          v27 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v26, v27, size);
      }
      *(_WORD *)&v26[size] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "empty_delta_voc");
      v28 = quasar::PTree::getString((uint64_t)&v156, (__int128 *)v150);
      v29 = *(char *)(v28 + 23);
      if (v29 >= 0)
        v30 = (const std::string::value_type *)v28;
      else
        v30 = *(const std::string::value_type **)v28;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v28 + 23);
      else
        v31 = *(_QWORD *)(v28 + 8);
      v32 = std::string::append((std::string *)v160, v30, v31);
      v33 = v32->__r_.__value_.__r.__words[0];
      v192[0] = v32->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
      v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v181) < 0)
        operator delete(*(void **)&v180[24]);
      *(_QWORD *)&v180[24] = v33;
      *(_QWORD *)&v181 = v192[0];
      *(_QWORD *)((char *)&v181 + 7) = *(_QWORD *)((char *)v192 + 7);
      HIBYTE(v181) = v34;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"emptyDeltaVoc: ", 15);
        if (v181 >= 0)
          v36 = &v180[24];
        else
          v36 = *(_BYTE **)&v180[24];
        if (v181 >= 0)
          v37 = HIBYTE(v181);
        else
          v37 = v181;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v38 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v38 + 1);
      if (v160[23] >= 0)
        v39 = v160;
      else
        v39 = *(_BYTE **)v160;
      if (v38)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v190;
        else
          v40 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v39, v40, v38);
      }
      *(_WORD *)&v39[v38] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "pg_voc");
      v41 = quasar::PTree::getString((uint64_t)&v156, (__int128 *)v150);
      v42 = *(char *)(v41 + 23);
      if (v42 >= 0)
        v43 = (const std::string::value_type *)v41;
      else
        v43 = *(const std::string::value_type **)v41;
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(v41 + 23);
      else
        v44 = *(_QWORD *)(v41 + 8);
      v45 = std::string::append((std::string *)v160, v43, v44);
      v46 = v45->__r_.__value_.__r.__words[0];
      v192[0] = v45->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
      v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if ((v182[23] & 0x80000000) != 0)
        operator delete(*(void **)v182);
      *(_QWORD *)v182 = v46;
      *(_QWORD *)&v182[8] = v192[0];
      *(_QWORD *)&v182[15] = *(_QWORD *)((char *)v192 + 7);
      v182[23] = v47;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"pgVoc: ", 7);
        if (v182[23] >= 0)
          v49 = v182;
        else
          v49 = *(_BYTE **)v182;
        if (v182[23] >= 0)
          v50 = v182[23];
        else
          v50 = *(_QWORD *)&v182[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v51 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v51 + 1);
      if (v160[23] >= 0)
        v52 = v160;
      else
        v52 = *(_BYTE **)v160;
      if (v51)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v190;
        else
          v53 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v52, v53, v51);
      }
      *(_WORD *)&v52[v51] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "general_voc");
      v54 = quasar::PTree::getString((uint64_t)&v156, (__int128 *)v150);
      v55 = *(char *)(v54 + 23);
      if (v55 >= 0)
        v56 = (const std::string::value_type *)v54;
      else
        v56 = *(const std::string::value_type **)v54;
      if (v55 >= 0)
        v57 = *(unsigned __int8 *)(v54 + 23);
      else
        v57 = *(_QWORD *)(v54 + 8);
      v58 = std::string::append((std::string *)v160, v56, v57);
      v59 = v58->__r_.__value_.__r.__words[0];
      v192[0] = v58->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
      v60 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v183) < 0)
        operator delete(*(void **)&v182[24]);
      *(_QWORD *)&v182[24] = v59;
      *(_QWORD *)&v183 = v192[0];
      *(_QWORD *)((char *)&v183 + 7) = *(_QWORD *)((char *)v192 + 7);
      HIBYTE(v183) = v60;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"generalVoc: ", 12);
        if (v183 >= 0)
          v62 = &v182[24];
        else
          v62 = *(_BYTE **)&v182[24];
        if (v183 >= 0)
          v63 = HIBYTE(v183);
        else
          v63 = v183;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v64 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v64 + 1);
      if (v160[23] >= 0)
        v65 = v160;
      else
        v65 = *(_BYTE **)v160;
      if (v64)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v190;
        else
          v66 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v65, v66, v64);
      }
      *(_WORD *)&v65[v64] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "paramset_holder");
      v67 = quasar::PTree::getString((uint64_t)&v152, (__int128 *)v150);
      v68 = *(char *)(v67 + 23);
      if (v68 >= 0)
        v69 = (const std::string::value_type *)v67;
      else
        v69 = *(const std::string::value_type **)v67;
      if (v68 >= 0)
        v70 = *(unsigned __int8 *)(v67 + 23);
      else
        v70 = *(_QWORD *)(v67 + 8);
      v71 = std::string::append((std::string *)v160, v69, v70);
      v72 = v71->__r_.__value_.__r.__words[0];
      v192[0] = v71->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
      v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      if ((v180[23] & 0x80000000) != 0)
        operator delete(*(void **)v180);
      *(_QWORD *)v180 = v72;
      *(_QWORD *)&v180[8] = v192[0];
      *(_QWORD *)&v180[15] = *(_QWORD *)((char *)v192 + 7);
      v180[23] = v73;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"paramsetHolder: ", 16);
        if (v180[23] >= 0)
          v75 = v180;
        else
          v75 = *(_BYTE **)v180;
        if (v180[23] >= 0)
          v76 = v180[23];
        else
          v76 = *(_QWORD *)&v180[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v77 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v77 + 1);
      if (v160[23] >= 0)
        v78 = v160;
      else
        v78 = *(_BYTE **)v160;
      if (v77)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v190;
        else
          v79 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v78, v79, v77);
      }
      *(_WORD *)&v78[v77] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "textproc_model_set.model_voc");
      v80 = quasar::PTree::getString(v8 + 24, (__int128 *)v150);
      v81 = *(char *)(v80 + 23);
      if (v81 >= 0)
        v82 = (const std::string::value_type *)v80;
      else
        v82 = *(const std::string::value_type **)v80;
      if (v81 >= 0)
        v83 = *(unsigned __int8 *)(v80 + 23);
      else
        v83 = *(_QWORD *)(v80 + 8);
      v84 = std::string::append((std::string *)v160, v82, v83);
      v85 = v84->__r_.__value_.__r.__words[0];
      v192[0] = v84->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
      v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if ((v184[23] & 0x80000000) != 0)
        operator delete(*(void **)v184);
      *(_QWORD *)v184 = v85;
      *(_QWORD *)&v184[8] = v192[0];
      *(_QWORD *)&v184[15] = *(_QWORD *)((char *)v192 + 7);
      v184[23] = v86;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"generalVocTP: ", 14);
        if (v184[23] >= 0)
          v88 = v184;
        else
          v88 = *(_BYTE **)v184;
        if (v184[23] >= 0)
          v89 = v184[23];
        else
          v89 = *(_QWORD *)&v184[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      std::string::basic_string[abi:ne180100]<0>(v160, "textproc_model_set.model_svc");
      ChildOptional = quasar::PTree::getChildOptional(v8 + 24, (uint64_t)v160);
      v91 = ChildOptional;
      if ((v160[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v160);
        if (v91)
        {
LABEL_204:
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          else
            v92 = v190.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)v160, v92 + 1);
          if (v160[23] >= 0)
            v93 = v160;
          else
            v93 = *(_BYTE **)v160;
          if (v92)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = &v190;
            else
              v94 = (std::string *)v190.__r_.__value_.__r.__words[0];
            memmove(v93, v94, v92);
          }
          *(_WORD *)&v93[v92] = 47;
          std::string::basic_string[abi:ne180100]<0>(v150, "textproc_model_set.model_svc");
          v95 = quasar::PTree::getString(v8 + 24, (__int128 *)v150);
          v96 = *(char *)(v95 + 23);
          if (v96 >= 0)
            v97 = (const std::string::value_type *)v95;
          else
            v97 = *(const std::string::value_type **)v95;
          if (v96 >= 0)
            v98 = *(unsigned __int8 *)(v95 + 23);
          else
            v98 = *(_QWORD *)(v95 + 8);
          v99 = std::string::append((std::string *)v160, v97, v98);
          v100 = v99->__r_.__value_.__r.__words[0];
          v192[0] = v99->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1] + 7);
          v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v185) < 0)
            operator delete(*(void **)&v184[24]);
          *(_QWORD *)&v184[24] = v100;
          *(_QWORD *)&v185 = v192[0];
          *(_QWORD *)((char *)&v185 + 7) = *(_QWORD *)((char *)v192 + 7);
          HIBYTE(v185) = v101;
          if (v151 < 0)
            operator delete(v150[0]);
          if ((v160[23] & 0x80000000) != 0)
            operator delete(*(void **)v160);
          if (quasar::gLogLevel >= 4)
          {
            v174 = 0u;
            v175 = 0u;
            v172 = 0u;
            v173 = 0u;
            v170 = 0u;
            v171 = 0u;
            v168 = 0u;
            v169 = 0u;
            v166 = 0u;
            v167 = 0u;
            v164 = 0u;
            v165 = 0u;
            v162 = 0u;
            v163 = 0u;
            v161 = 0u;
            memset(v160, 0, sizeof(v160));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
            v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"generalSvcTP: ", 14);
            if (v185 >= 0)
              v103 = &v184[24];
            else
              v103 = *(_BYTE **)&v184[24];
            if (v185 >= 0)
              v104 = HIBYTE(v185);
            else
              v104 = v185;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
          }
        }
      }
      else if (ChildOptional)
      {
        goto LABEL_204;
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v105 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v105 + 1);
      if (v160[23] >= 0)
        v106 = v160;
      else
        v106 = *(_BYTE **)v160;
      if (v105)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v190;
        else
          v107 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v106, v107, v105);
      }
      *(_WORD *)&v106[v105] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "textproc_model_set.lexicon");
      v108 = quasar::PTree::getString(v8 + 24, (__int128 *)v150);
      v109 = *(char *)(v108 + 23);
      if (v109 >= 0)
        v110 = (const std::string::value_type *)v108;
      else
        v110 = *(const std::string::value_type **)v108;
      if (v109 >= 0)
        v111 = *(unsigned __int8 *)(v108 + 23);
      else
        v111 = *(_QWORD *)(v108 + 8);
      v112 = std::string::append((std::string *)v160, v110, v111);
      v113 = v112->__r_.__value_.__r.__words[0];
      v192[0] = v112->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 7);
      v114 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      if ((v186[23] & 0x80000000) != 0)
        operator delete(*(void **)v186);
      *(_QWORD *)v186 = v113;
      *(_QWORD *)&v186[8] = v192[0];
      *(_QWORD *)&v186[15] = *(_QWORD *)((char *)v192 + 7);
      v186[23] = v114;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"lexiconTP: ", 11);
        if (v186[23] >= 0)
          v116 = v186;
        else
          v116 = *(_BYTE **)v186;
        if (v186[23] >= 0)
          v117 = v186[23];
        else
          v117 = *(_QWORD *)&v186[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)v116, v117);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v118 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v118 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v118 + 1);
      if (v160[23] >= 0)
        v119 = v160;
      else
        v119 = *(_BYTE **)v160;
      if (v118)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v120 = &v190;
        else
          v120 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v119, v120, v118);
      }
      *(_WORD *)&v119[v118] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "textproc_model_set.static_token");
      v121 = quasar::PTree::getString(v8 + 24, (__int128 *)v150);
      v122 = *(char *)(v121 + 23);
      if (v122 >= 0)
        v123 = (const std::string::value_type *)v121;
      else
        v123 = *(const std::string::value_type **)v121;
      if (v122 >= 0)
        v124 = *(unsigned __int8 *)(v121 + 23);
      else
        v124 = *(_QWORD *)(v121 + 8);
      v125 = std::string::append((std::string *)v160, v123, v124);
      v126 = v125->__r_.__value_.__r.__words[0];
      v192[0] = v125->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v125->__r_.__value_.__r.__words[1] + 7);
      v127 = HIBYTE(v125->__r_.__value_.__r.__words[2]);
      v125->__r_.__value_.__l.__size_ = 0;
      v125->__r_.__value_.__r.__words[2] = 0;
      v125->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v187) < 0)
        operator delete(*(void **)&v186[24]);
      *(_QWORD *)&v186[24] = v126;
      *(_QWORD *)&v187 = v192[0];
      *(_QWORD *)((char *)&v187 + 7) = *(_QWORD *)((char *)v192 + 7);
      HIBYTE(v187) = v127;
      if (v151 < 0)
        operator delete(v150[0]);
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"staticTokenTP: ", 15);
        if (v187 >= 0)
          v129 = &v186[24];
        else
          v129 = *(_BYTE **)&v186[24];
        if (v187 >= 0)
          v130 = HIBYTE(v187);
        else
          v130 = v187;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)v129, v130);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      else
        v131 = v190.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v160, v131 + 1);
      if (v160[23] >= 0)
        v132 = v160;
      else
        v132 = *(_BYTE **)v160;
      if (v131)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = &v190;
        else
          v133 = (std::string *)v190.__r_.__value_.__r.__words[0];
        memmove(v132, v133, v131);
      }
      *(_WORD *)&v132[v131] = 47;
      std::string::basic_string[abi:ne180100]<0>(v150, "textproc_model_set.static_itn");
      v134 = quasar::PTree::getString(v8 + 24, (__int128 *)v150);
      v135 = *(char *)(v134 + 23);
      if (v135 >= 0)
        v136 = (const std::string::value_type *)v134;
      else
        v136 = *(const std::string::value_type **)v134;
      if (v135 >= 0)
        v137 = *(unsigned __int8 *)(v134 + 23);
      else
        v137 = *(_QWORD *)(v134 + 8);
      v138 = std::string::append((std::string *)v160, v136, v137);
      v139 = v138->__r_.__value_.__r.__words[0];
      v192[0] = v138->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v138->__r_.__value_.__r.__words[1] + 7);
      v140 = HIBYTE(v138->__r_.__value_.__r.__words[2]);
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      v188.__r_.__value_.__r.__words[0] = v139;
      v188.__r_.__value_.__l.__size_ = v192[0];
      *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v192 + 7);
      *((_BYTE *)&v188.__r_.__value_.__s + 23) = v140;
      if (v151 < 0)
        operator delete(v150[0]);
      v9 = v24;
      if ((v160[23] & 0x80000000) != 0)
        operator delete(*(void **)v160);
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"staticItnTP: ", 13);
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v142 = &v188;
        else
          v142 = (std::string *)v188.__r_.__value_.__r.__words[0];
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v143 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
        else
          v143 = v188.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v143);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      *(_QWORD *)v160 = &__p;
      v144 = std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v160);
      std::string::operator=((std::string *)(v144 + 7), (const std::string *)&__p);
      std::string::operator=((std::string *)(v144 + 10), (const std::string *)((char *)&v177 + 8));
      *((_DWORD *)v144 + 26) = v179;
      std::string::operator=((std::string *)(v144 + 14), (const std::string *)v180);
      std::string::operator=((std::string *)(v144 + 17), (const std::string *)&v180[24]);
      std::string::operator=((std::string *)(v144 + 20), (const std::string *)v182);
      std::string::operator=((std::string *)(v144 + 23), (const std::string *)&v182[24]);
      std::string::operator=((std::string *)(v144 + 26), (const std::string *)v184);
      std::string::operator=((std::string *)(v144 + 29), (const std::string *)&v184[24]);
      std::string::operator=((std::string *)(v144 + 32), (const std::string *)v186);
      std::string::operator=((std::string *)(v144 + 35), (const std::string *)&v186[24]);
      std::string::operator=((std::string *)(v144 + 38), &v188);
      *((_BYTE *)v144 + 328) = v189;
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v161 = 0u;
        memset(v160, 0, sizeof(v160));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v160);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"NcsDatapackManager loaded locale ", 33);
        if ((SBYTE7(v177) & 0x80u) == 0)
          v146 = (uint64_t)&__p;
        else
          v146 = __p;
        if ((SBYTE7(v177) & 0x80u) == 0)
          v147 = BYTE7(v177);
        else
          v147 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, v146, v147);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v160);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v152);
      quasar::PTree::~PTree((quasar::PTree *)&v156);
      sdapi::SdapiUtil::LocaleInfo::~LocaleInfo((void **)&__p);
      v8 += 88;
    }
    while (v8 != v24);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v191);
  std::recursive_mutex::unlock(v148);
}

void sub_1ADB2AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a25, *(_QWORD **)(a25 + 8));
  if (*(char *)(v25 - 185) < 0)
    operator delete(*(void **)(v25 - 208));
  quasar::PTree::~PTree((quasar::PTree *)(v25 - 184));
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchLexiconHandle(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v3;
  uint64_t v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v3 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  v29 = 1;
  v30 = v4;
  v28 = -1;
  if (TPLexicon_Open())
  {
    if (quasar::gLogLevel >= 1)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"oh no:", 6);
      v7 = *(char *)(a2 + 23);
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = *(_QWORD *)a2;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a2 + 23);
      else
        v9 = *(_QWORD *)(a2 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" gave us ", 9);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v11);
    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Could not open lexicon", 22);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  std::recursive_mutex::unlock(v3);
  return v28;
}

void sub_1ADB2AE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::recursive_mutex *v3;
  va_list va;

  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchItnHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a3 + 23) >= 0)
    v5 = a3;
  else
    v5 = *(_QWORD *)a3;
  v30 = 1;
  v31 = v5;
  v29 = -1;
  if (TPItn_Open())
  {
    if (quasar::gLogLevel >= 1)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"oh no:", 6);
      v8 = *(char *)(a3 + 23);
      if (v8 >= 0)
        v9 = a3;
      else
        v9 = *(_QWORD *)a3;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a3 + 23);
      else
        v10 = *(_QWORD *)(a3 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" gave us ", 9);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v12);
    }
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Could not open ITN", 18);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
  }
  std::recursive_mutex::unlock(v4);
  return v29;
}

void sub_1ADB2B048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::recursive_mutex *v3;
  va_list va;

  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchTokenHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v4;
  uint64_t *v5;
  _OWORD v7[17];
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1)
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*((char *)a3 + 23) >= 0)
    v5 = a3;
  else
    v5 = (uint64_t *)*a3;
  v9 = 1;
  v10 = v5;
  v8 = -1;
  if (TPToken_Open())
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Could not do TPToken_Open", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_1ADB2B188(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5sdapi9SdapiUtil14getSharedMutexEv_block_invoke()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  result = MEMORY[0x1AF44CD7C]();
  sdapi::SdapiUtil::getSharedMutex(void)::mutex = v0;
  return result;
}

void sub_1ADB2B1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1000C40FA0F61DDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;
  char *v11;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x150uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  v11 = v6 + 56;
  *((_QWORD *)v11 + 34) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 11) = 0u;
  *((_OWORD *)v11 + 12) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_OWORD *)v11 + 10) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 13) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADB2B354(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_1ADB2B3F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADB2B4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADB2B7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1ADB2B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1ADB2BC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ADB2BF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t AudioConverterFillComplexBuffer_BlockInvoke(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, void *a5)
{
  uint64_t (**v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v9;

  v8 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1AF44E144](a5);
  v9 = ((uint64_t (**)(_QWORD, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **))v8)[2](v8, a2, a3, a4);

  return v9;
}

void sub_1ADB2BFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void quasar::BitmapLoaderImpl::~BitmapLoaderImpl(quasar::BitmapLoaderImpl *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

double quasar::BitmapLoaderImpl::loadPgm@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  quasar::MappedPgmBitmap::loadFromFile(a1, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void LM::LM(LM *this, Vocab *a2)
{
  uint64_t v3;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  v3 = MEMORY[0x1E0DE4A50];
  *(_QWORD *)this = off_1E5D16FF0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = a2;
  SubVocab::SubVocab((LM *)((char *)this + 32), a2, 0);
  *((_DWORD *)this + 36) = 65792;
  *((_QWORD *)this + 17) = defaultStateTag;
  *((_BYTE *)this + 148) = 0;
  (*(void (**)(LM *, _QWORD))(*(_QWORD *)this + 16))(this, LM::initialDebugLevel);
}

void sub_1ADB2C0C4(_Unwind_Exception *a1)
{
  Vocab *v1;

  Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

void LM::~LM(LM *this)
{
  *(_QWORD *)this = off_1E5D16FF0;
  Vocab::~Vocab((LM *)((char *)this + 32));
}

float LM::wordProb(LM *this, const char *const *a2, const char *const *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  float v16;
  int v18;
  _BYTE v19[12];
  int v20;

  v6 = Vocab::length((uint64_t)a3, a2);
  *(_DWORD *)&v19[8] = 0;
  v20 = 0;
  v7 = (v6 + 1);
  v18 = 0;
  *(_QWORD *)v19 = v7;
  if (v6 != -1)
    Array<unsigned int>::alloc((uint64_t)&v18, v6, 0);
  v8 = (*(uint64_t (**)(LM *))(*(_QWORD *)this + 224))(this);
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)&v19[4];
  v11 = v18;
  if (v8)
  {
    (*(void (**)(_QWORD, const char *const *, uint64_t, uint64_t))(*(_QWORD *)v9 + 256))(*((_QWORD *)this + 3), a3, *(_QWORD *)&v19[4] - 4 * v18, v7);
  }
  else
  {
    v12 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 88))(*((_QWORD *)this + 3));
    (*(void (**)(uint64_t, const char *const *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 272))(v9, a3, v10 - 4 * v11, v7, *v12);
  }
  v13 = *((_QWORD *)this + 3);
  v14 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  v15 = (*(uint64_t (**)(uint64_t, const char *const *, _QWORD))(*(_QWORD *)v13 + 40))(v13, a2, *v14);
  v16 = (*(float (**)(LM *, uint64_t, uint64_t))(*(_QWORD *)this + 48))(this, v15, *(_QWORD *)&v19[4] - 4 * v18);
  if (*(_QWORD *)&v19[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v19[4], 0x1000C8052888210);
  return v16;
}

void sub_1ADB2C268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LM::wordProbRecompute(LM *this, uint64_t a2, const unsigned int *a3)
{
  return (*(uint64_t (**)(LM *, uint64_t, const unsigned int *))(*(_QWORD *)this + 48))(this, a2, a3);
}

uint64_t LM::addUnkWords(LM *this)
{
  return 0;
}

uint64_t LM::isNonWord(LM *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3));
}

uint64_t LM::updateRanks(const Vocab **this, float a2, const unsigned int *a3, double *a4, double *a5, double *a6, double a7)
{
  double v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  double v19;
  unsigned int v20;
  unsigned int v22;
  _BYTE v23[32];

  v13 = 0.0;
  if (a2 != -INFINITY)
    v13 = exp(a2 * 2.30258509);
  v14 = (*((uint64_t (**)(const Vocab **, _QWORD))*this + 34))(this, 0);
  VocabIter::VocabIter((VocabIter *)v23, this[3], 0);
  v15 = 0;
  v16 = 0;
  v22 = 0;
  v17 = 6;
  while (VocabIter::next((VocabIter *)v23, &v22))
  {
    if (!(*((unsigned int (**)(const Vocab **, _QWORD))*this + 29))(this, v22))
    {
      v18 = (*((float (**)(const Vocab **, _QWORD, const unsigned int *))*this + v17))(this, v22, a3);
      v19 = 0.0;
      if (v18 != -INFINITY)
        v19 = exp(v18 * 2.30258509);
      if (vabdd_f64(v19, v13) >= 0.000003)
      {
        if (v19 > v13)
          ++v15;
      }
      else
      {
        ++v16;
      }
      v17 = 8;
      if (v15 + (v16 >> 1) >= 0xB)
        break;
    }
  }
  v20 = (v16 >> 1) + v15;
  if (v20 <= 9)
  {
    *a6 = *a6 + a7;
    if (v20 <= 4)
    {
      *a5 = *a5 + a7;
      if (!v20)
        *a4 = *a4 + a7;
    }
  }
  (*((void (**)(const Vocab **, uint64_t))*this + 34))(this, v14);
  return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v23);
}

void sub_1ADB2C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

double LM::wordProbSum(const Vocab **this, const unsigned int *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  float v7;
  double v8;
  unsigned int v10;
  _BYTE v11[32];

  VocabIter::VocabIter((VocabIter *)v11, this[3], 0);
  v10 = 0;
  v4 = (*((uint64_t (**)(const Vocab **, _QWORD))*this + 34))(this, 0);
  v5 = 0.0;
  v6 = 6;
  while (VocabIter::next((VocabIter *)v11, &v10))
  {
    if (!(*((unsigned int (**)(const Vocab **, _QWORD))*this + 29))(this, v10))
    {
      v7 = (*((float (**)(const Vocab **, _QWORD, const unsigned int *))*this + v6))(this, v10, a2);
      v8 = 0.0;
      if (v7 != -INFINITY)
        v8 = exp(v7 * 2.30258509);
      v5 = v5 + v8;
      v6 = 8;
    }
  }
  (*((void (**)(const Vocab **, uint64_t))*this + 34))(this, v4);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v11);
  return v5;
}

void sub_1ADB2C5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

float LM::sentenceProb(_QWORD *a1, const char *const *this, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  float v15;
  int v17;
  _BYTE v18[12];
  int v19;

  v8 = Vocab::length((uint64_t)this, this);
  *(_DWORD *)&v18[8] = 0;
  v19 = 0;
  v9 = (v8 + 1);
  v17 = 0;
  *(_QWORD *)v18 = v9;
  if (v8 != -1)
    Array<unsigned int>::alloc((uint64_t)&v17, v8, 0);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  v11 = a1[3];
  v12 = *(_QWORD *)&v18[4];
  v13 = v17;
  if (v10)
  {
    (*(void (**)(_QWORD, const char *const *, uint64_t, uint64_t))(*(_QWORD *)v11 + 256))(a1[3], this, *(_QWORD *)&v18[4] - 4 * v17, v9);
  }
  else
  {
    v14 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 88))(a1[3]);
    (*(void (**)(uint64_t, const char *const *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 272))(v11, this, v12 - 4 * v13, v9, *v14);
  }
  v15 = (*(float (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 72))(a1, *(_QWORD *)&v18[4] - 4 * v17, a3, a4);
  if (*(_QWORD *)&v18[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v18[4], 0x1000C8052888210);
  return v15;
}

void sub_1ADB2C700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LM::prepareSentence(LM *this, const unsigned int *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (!*((_BYTE *)this + 146)
    || *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3)) == -1)
  {
    v10 = 0;
    if (a4)
      goto LABEL_12;
LABEL_24:
    if (*((_BYTE *)this + 145))
      v17 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    else
      v17 = -1;
    a3[v10++] = v17;
    goto LABEL_28;
  }
  if (!a4
    || (*((_BYTE *)this + 144) ? (v8 = 0) : (v8 = a4 - 1),
        v9 = a2[v8],
        v9 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3))))
  {
    *a3 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
    v10 = 1;
    if (a4)
      goto LABEL_12;
    goto LABEL_24;
  }
  v10 = 0;
LABEL_12:
  v11 = 1;
  v12 = a4 - 1;
  do
  {
    if (*((_BYTE *)this + 144))
      v13 = v11 - 1;
    else
      v13 = v12;
    v14 = a2[v13];
    if (v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3))
      && !Vocab::getWord((LM *)((char *)this + 32), v14))
    {
      a3[v10++] = v14;
    }
    ++v11;
    --v12;
  }
  while (v11 <= a4);
  if (*((_BYTE *)this + 144))
    v15 = a4 - 1;
  else
    v15 = 0;
  v16 = a2[v15];
  if (v16 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)))
    goto LABEL_24;
LABEL_28:
  a3[v10] = -1;
  return (v10 - 2);
}

unsigned int *LM::removeNoise(LM *this, unsigned int *a2)
{
  unsigned int v3;
  int v5;
  Vocab *v6;
  int v7;
  unsigned int *v8;

  v3 = *a2;
  if (*a2 == -1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (LM *)((char *)this + 32);
    v7 = 1;
    v8 = a2;
    do
    {
      if (v3 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3))
        && !Vocab::getWord(v6, *v8))
      {
        a2[v5++] = *v8;
      }
      v8 = &a2[v7];
      v3 = *v8;
      ++v7;
    }
    while (*v8 != -1);
  }
  a2[v5] = -1;
  return a2;
}

float LM::sentenceProb(uint64_t a1, Vocab *this, uint64_t a3, char **a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  double v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type size;
  _QWORD *v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  float v38;
  int v39;
  _DWORD *v40;
  double *v41;
  double *v42;
  double *v43;
  double v44;
  long double v45;
  std::string::size_type v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  int v52;
  _DWORD *v53;
  double v54;
  double *v55;
  double v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  int v68;
  double v69;
  double v70;
  uint64_t v72;
  unsigned int v73;
  std::string v74;
  std::string __p;
  void *v76[2];
  unsigned __int8 v77;
  uint64_t v78;
  int v79;
  _BYTE v80[12];
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::locale v89;

  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v82 = 0u;
  v8 = Vocab::length((uint64_t)this, (const unsigned int *)this);
  v9 = v8;
  *(_DWORD *)&v80[8] = 0;
  v81 = 0;
  v79 = 0;
  *(_QWORD *)v80 = v8 + 3;
  if (v8 != -3)
    Array<unsigned int>::alloc((uint64_t)&v79, v8 + 2, 0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(a1, 1);
  v11 = LM::prepareSentence((LM *)a1, (const unsigned int *)this, (unsigned int *)(*(_QWORD *)&v80[4] - 4 * v79), v9);
  v73 = v10;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if (v12)
  {
    NgramCounts<unsigned long>::NgramCounts((LMStats *)v76, *(Vocab **)(a1 + 24), v12);
    v76[0] = &unk_1E5D15880;
    Vocab::reverse(*(_QWORD *)&v80[4] - 4 * v79, v13);
    v14 = *(_QWORD *)&v80[4];
    v15 = v79;
    if (*(_DWORD *)(*(_QWORD *)&v80[4] + 4 * -v79) != -1)
    {
      v16 = 0;
      v17 = v11;
      do
      {
        if (v17 >= v12)
          v18 = v12;
        else
          v18 = v17;
        if (v16)
          v19 = v18;
        else
          v19 = 1;
        NgramCounts<unsigned long>::incrementCounts((uint64_t)v76, v14 - 4 * v15 + 4 * v16++, v19, 1);
        v14 = *(_QWORD *)&v80[4];
        v15 = v79;
        --v17;
      }
      while (*(_DWORD *)(*(_QWORD *)&v80[4] + 4 * (int)(v16 - v79)) != -1);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 304))(a1, v76);
    Vocab::reverse(*(_QWORD *)&v80[4] - 4 * v79, v20);
    v76[0] = &unk_1E5D15AB8;
    Trie<unsigned int,unsigned long>::~Trie(&v78);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v76);
  }
  v72 = a3;
  if ((v11 & 0x80000000) == 0)
  {
    v21 = v11;
    do
    {
      v22 = (char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)&v80[4] + 4 * (int)(v21 - v79)));
      std::string::basic_string[abi:ne180100]<0>(v76, v22);
      v23 = v21 + 1;
      v24 = (char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)&v80[4] + 4 * (int)(v21 + 1 - v79)));
      std::string::basic_string[abi:ne180100]<0>(&__p, v24);
      v25 = 0.0;
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        v26 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\tp( ", 4);
        if ((v77 & 0x80u) == 0)
          v28 = v76;
        else
          v28 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v29 = v77;
        else
          v29 = (uint64_t)v76[1];
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" | ", 3);
        if (*(_DWORD *)(*(_QWORD *)&v80[4] + 4 * (int)(v23 - v79)) == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v74, "");
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v74, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v74 = __p;
        }
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v74;
        else
          v32 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        else
          size = v74.__r_.__value_.__l.__size_;
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, size);
        if (v21 >= v11)
          v35 = " ";
        else
          v35 = " ...";
        if (v21 >= v11)
          v36 = 1;
        else
          v36 = 4;
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") \t= ", 5);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (!*(_BYTE *)(a1 + 8))
        {
          if (Debug::debugAll > 2)
          {
            if (Debug::debugAll != 3)
              goto LABEL_45;
            v61 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            v61 = *(_DWORD *)(a1 + 12);
            if (v61 < 3)
              goto LABEL_45;
          }
          if (v61 <= 3)
            v25 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, *(_QWORD *)&v80[4] + 4 * (int)(v23 - v79));
        }
      }
LABEL_45:
      std::allocate_shared[abi:ne180100]<WordInfo,std::allocator<WordInfo>,std::string &,std::string &,void>((__int128 *)v76, (__int128 *)&__p, &v74);
      v38 = (*(float (**)(uint64_t, _QWORD, uint64_t, std::string *))(*(_QWORD *)a1 + 40))(a1, *(unsigned int *)(*(_QWORD *)&v80[4] + 4 * (int)(v21 - v79)), *(_QWORD *)&v80[4] + 4 * (int)(v23 - v79), &v74);
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u))
      {
        v39 = *(_DWORD *)(*(_QWORD *)&v80[4] + 4 * (int)(v21 - v79));
        v40 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
        if (v39 == *v40)
          v41 = (double *)&v86;
        else
          v41 = (double *)&v84 + 1;
        if (v39 == *v40)
          v42 = (double *)&v86 + 1;
        else
          v42 = (double *)&v85;
        if (v39 == *v40)
          v43 = (double *)&v87;
        else
          v43 = (double *)&v85 + 1;
        LM::updateRanks((const Vocab **)a1, v38, (const unsigned int *)(*(_QWORD *)&v80[4] + 4 * (int)(v23 - v79)), v41, v42, v43, 1.0);
        *((double *)&v87 + 1) = *((double *)&v87 + 1) + 1.0;
      }
      v44 = v38;
      v45 = 0.0;
      if (v38 != -INFINITY)
        v45 = exp(v44 * 2.30258509);
      v46 = v74.__r_.__value_.__r.__words[0];
      *(float *)(v74.__r_.__value_.__r.__words[0] + 52) = v38;
      *(long double *)(v46 + 56) = v45;
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](a4, (__int128 *)&v74);
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        v47 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ", 1);
        v48 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" [ ", 3);
        v49 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" ]", 2);
        if (*(_BYTE *)(a1 + 8))
        {
LABEL_64:
          v50 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
          v51 = std::locale::use_facet(&v89, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
          std::locale::~locale(&v89);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_65;
        }
        if (Debug::debugAll > 2)
        {
          if (Debug::debugAll != 3)
            goto LABEL_64;
          v62 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          v62 = *(_DWORD *)(a1 + 12);
          if (v62 < 3)
            goto LABEL_64;
        }
        if (v62 <= 3)
        {
          v63 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" / ", 3);
          std::ostream::operator<<();
          if (fabs(v25 + -1.0) > 0.0001)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
            v64 = (_QWORD *)std::ostream::operator<<();
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" != 1 : ", 8);
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 328))(*(_QWORD *)(a1 + 24));
            v66 = operator<<(v65, (_DWORD *)(*(_QWORD *)&v80[4] + 4 * (int)(v23 - v79)));
            std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
            v67 = std::locale::use_facet(&v89, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
            std::locale::~locale(&v89);
            std::ostream::put();
            std::ostream::flush();
          }
        }
        goto LABEL_64;
      }
LABEL_65:
      if (v38 == -INFINITY)
      {
        v52 = *(_DWORD *)(*(_QWORD *)&v80[4] + 4 * (int)(v21 - v79));
        v53 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
        v54 = 1.0;
        v55 = (double *)&v84;
        if (v52 == *v53)
          goto LABEL_72;
        *((double *)&v82 + 1) = *((double *)&v82 + 1) + 1.0;
        v56 = *(double *)&v88 + 1.0;
      }
      else
      {
        *(double *)&v82 = *(double *)&v82 + v44;
        v54 = 1.0 - exp(v44 * 2.30258509);
        if (v54 < 0.0)
          v54 = 0.0;
        v56 = *(double *)&v88 + v54 * v54;
      }
      *(double *)&v88 = v56;
      v55 = (double *)&v88 + 1;
LABEL_72:
      *v55 = *v55 + v54;
      v57 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
      if (v74.__r_.__value_.__l.__size_)
      {
        v58 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((char)v77 < 0)
        operator delete(v76[0]);
    }
    while ((int)v21-- > 0);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, v73);
  v68 = *(_DWORD *)(*(_QWORD *)&v80[4] - 4 * v79);
  if (v68 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)))
    *(_QWORD *)&v83 = 0x3FF0000000000000;
  else
    ++v11;
  *((double *)&v83 + 1) = *((double *)&v83 + 1) + (double)v11;
  v69 = TextStats::increment(v72, (uint64_t)&v82);
  v70 = *(double *)&v82;
  if (*(_QWORD *)&v80[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v80[4], 0x1000C8052888210, v69);
  return v70;
}

void sub_1ADB2D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;

  std::locale::~locale((std::locale *)(v56 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a56)
    MEMORY[0x1AF44D160](a56, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void NgramStats::~NgramStats(NgramStats *this)
{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

float LM::contextProb(LM *this, Vocab *a2, unsigned int a3)
{
  unsigned int v6;
  float v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  float v18;

  v6 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  v7 = 0.0;
  if (v6 >= a3)
    v8 = a3;
  else
    v8 = v6;
  if ((_DWORD)v8)
  {
    v9 = v6;
    v10 = (*(uint64_t (**)(LM *, _QWORD))(*(_QWORD *)this + 272))(this, 0);
    v11 = 0;
    v12 = *((_DWORD *)a2 + v8);
    *((_DWORD *)a2 + v8) = -1;
    if (v9 >= a3)
      v13 = a3;
    else
      v13 = v9;
    v14 = (char *)a2 + 4 * v13;
    v15 = (char *)a2 + 4 * v13 - 4;
    v16 = v8;
    do
    {
      v17 = *(unsigned int *)&v15[v11];
      if (!v11
        && (_DWORD)v17 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)))
      {
        v17 = *(unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
      }
      v18 = (*(float (**)(LM *, uint64_t, char *))(*(_QWORD *)this + 48))(this, v17, &v14[v11]);
      if (v18 != -INFINITY
        || !(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), v17))
      {
        v7 = v7 + v18;
      }
      v11 -= 4;
      --v16;
    }
    while (v16);
    (*(void (**)(LM *, uint64_t))(*(_QWORD *)this + 272))(this, v10);
    *((_DWORD *)a2 + v8) = v12;
  }
  return v7;
}

void sub_1ADB2D4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

float LM::countsProb<unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(Vocab *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  float v27;
  unint64_t v28;
  double v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int v35;
  int v36;
  _DWORD *v37;
  double *v38;
  double *v39;
  double *v40;
  unsigned int v41;
  double v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  int v50;
  _DWORD *v51;
  double v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  double v56;
  double v57;
  double v58;
  unsigned int *v59;
  unsigned int v61;
  uint64_t v62;
  int v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  double v69[3];
  _BYTE v70[80];
  int v71;
  _BYTE v72[12];
  int v73;
  std::locale v74;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 304))(a1, a2);
  *(_DWORD *)&v72[8] = 0;
  v73 = 0;
  v71 = 0;
  *(_QWORD *)v72 = (a4 + 1);
  if ((_DWORD)a4 != -1)
    Array<unsigned int>::alloc((uint64_t)&v71, a4, 0);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(a1, 1);
  if (!(_DWORD)a4)
  {
    v10 = 0.0;
    goto LABEL_68;
  }
  v62 = a2 + 160;
  v10 = 0.0;
  v11 = 1;
  do
  {
    v12 = *(_QWORD *)&v72[4];
    v13 = v71;
    if (*(_BYTE *)(a1 + 8) || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
    {
      v14 = 0;
    }
    else
    {
      v15 = v11;
      v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
      v11 = v15;
    }
    v63 = v11;
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v70, v62, v12 - 4 * v13, v11, v14);
    while (1)
    {
      v16 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v70);
      v18 = v16;
      if (!v16)
        break;
      v68 = 0u;
      *(_OWORD *)v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      memset(v64, 0, sizeof(v64));
      if (*(_QWORD *)(v16 + 8))
      {
        Vocab::reverse(*(_QWORD *)&v72[4] - 4 * v71, v17);
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
        {
          v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\tp( ", 4);
          v21 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71));
          v22 = strlen(v21);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" | ", 3);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 328))(*(_QWORD *)(a1 + 24));
          v25 = operator<<(v24, (_DWORD *)(*(_QWORD *)&v72[4] + 4 * (1 - v71)));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") \t= ", 6);
        }
        v26 = (*(float (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 48))(a1, *(unsigned int *)(*(_QWORD *)&v72[4] + 4 * -v71), *(_QWORD *)&v72[4] + 4 * (1 - v71));
        v27 = 0.0;
        if (a5)
          v27 = (*(float (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 104))(a1, *(_QWORD *)&v72[4] - 4 * v71, a4, 0.0);
        v28 = *(_QWORD *)(v18 + 8);
        v29 = 0.0;
        if (v27 != -INFINITY)
          v29 = exp(v27 * 2.30258509);
        v30 = v29 * (double)v28;
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
        {
          v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
          if (v26 != -INFINITY)
            exp(v26 * 2.30258509);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" [ ", 3);
          std::ostream::operator<<();
          if (v30 != 1.0)
          {
            v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" *", 2);
            std::ostream::operator<<();
          }
          v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ]", 2);
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_52;
          v35 = Debug::debugAll;
          if (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u)
          {
            v36 = *(_DWORD *)(*(_QWORD *)&v72[4] - 4 * v71);
            v37 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
            if (v36 == *v37)
              v38 = (double *)&v67;
            else
              v38 = (double *)&v65 + 1;
            if (v36 == *v37)
              v39 = (double *)&v67 + 1;
            else
              v39 = (double *)&v66;
            if (v36 == *v37)
              v40 = (double *)&v68;
            else
              v40 = (double *)&v66 + 1;
            LM::updateRanks((const Vocab **)a1, v26, (const unsigned int *)(*(_QWORD *)&v72[4] + 4 * (1 - v71)), v38, v39, v40, (double)*(unint64_t *)(v18 + 8));
            *((double *)&v68 + 1) = (double)*(unint64_t *)(v18 + 8);
            if (!*(_BYTE *)(a1 + 8))
            {
              v35 = Debug::debugAll;
              goto LABEL_44;
            }
LABEL_52:
            v48 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
            v49 = std::locale::use_facet(&v74, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
            std::locale::~locale(&v74);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_53;
          }
LABEL_44:
          if (v35 > 2)
          {
            if (v35 != 3)
              goto LABEL_52;
            v41 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            v41 = *(_DWORD *)(a1 + 12);
            if (v41 < 3)
              goto LABEL_52;
          }
          if (v41 <= 3)
          {
            v42 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, *(_QWORD *)&v72[4] + 4 * (1 - v71));
            v43 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / ", 3);
            std::ostream::operator<<();
            if (fabs(v42 + -1.0) > 0.0001)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
              v44 = (_QWORD *)std::ostream::operator<<();
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" != 1 : ", 8);
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 328))(*(_QWORD *)(a1 + 24));
              v46 = operator<<(v45, (_DWORD *)(*(_QWORD *)&v72[4] + 4 * (1 - v71)));
              std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
              v47 = std::locale::use_facet(&v74, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
              std::locale::~locale(&v74);
              std::ostream::put();
              std::ostream::flush();
            }
          }
          goto LABEL_52;
        }
LABEL_53:
        v50 = *(_DWORD *)(*(_QWORD *)&v72[4] - 4 * v71);
        v51 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
        v52 = (double)*(unint64_t *)(v18 + 8);
        if (v50 == *v51)
          v53 = 16;
        else
          v53 = 24;
        *(double *)((char *)v64 + v53) = v52;
        if (v26 == -INFINITY)
        {
          v54 = *(_DWORD *)(*(_QWORD *)&v72[4] - 4 * v71);
          v55 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
          v56 = (double)*(unint64_t *)(v18 + 8);
          if (v54 == *v55)
          {
            *(double *)&v65 = (double)*(unint64_t *)(v18 + 8);
            goto LABEL_64;
          }
          *((double *)v64 + 1) = (double)*(unint64_t *)(v18 + 8);
          v69[0] = v56;
        }
        else
        {
          *(double *)v64 = v30 * v26;
          v10 = *(double *)v64 + v10;
          v57 = 1.0 - exp(v26 * 2.30258509);
          if (v57 < 0.0)
            v57 = 0.0;
          v58 = v57 * v57 * v52;
          v56 = v57 * v52;
          v69[0] = v58;
        }
        v69[1] = v56;
LABEL_64:
        TextStats::increment(a3, (uint64_t)v64);
        Vocab::reverse(*(_QWORD *)&v72[4] - 4 * v71, v59);
      }
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v70);
    v11 = (v63 + 1);
  }
  while (v11 <= a4);
LABEL_68:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, v61);
  if (a5)
    *(_OWORD *)(a3 + 16) = xmmword_1AE1614C0;
  if (*(_QWORD *)&v72[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v72[4], 0x1000C8052888210);
  return v10;
}

void sub_1ADB2DCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v36;

  v36 = *(_QWORD *)(v34 - 176);
  if (v36)
    MEMORY[0x1AF44D160](v36, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float LM::countsProb<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(Vocab *, uint64_t);
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int v34;
  int v35;
  _DWORD *v36;
  double *v37;
  double *v38;
  double *v39;
  unsigned int v40;
  double v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  double v53;
  double v54;
  unsigned int *v55;
  unsigned int v57;
  uint64_t v58;
  _OWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64[3];
  _BYTE v65[80];
  int v66;
  _BYTE v67[12];
  int v68;
  std::locale v69;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a2);
  *(_DWORD *)&v67[8] = 0;
  v68 = 0;
  v66 = 0;
  *(_QWORD *)v67 = (a4 + 1);
  if ((_DWORD)a4 != -1)
    Array<unsigned int>::alloc((uint64_t)&v66, a4, 0);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(a1, 1);
  if (!(_DWORD)a4)
  {
    v10 = 0.0;
    goto LABEL_67;
  }
  v58 = a2 + 160;
  v10 = 0.0;
  v11 = 1;
  do
  {
    v12 = *(_QWORD *)&v67[4];
    v13 = v66;
    if (*(_BYTE *)(a1 + 8) || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
      v14 = 0;
    else
      v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
    TrieIter2<unsigned int,double>::TrieIter2(v65, v58, v12 - 4 * v13, v11, v14);
    while (1)
    {
      v15 = TrieIter2<unsigned int,double>::next((uint64_t)v65);
      v17 = v15;
      if (!v15)
        break;
      v63 = 0u;
      *(_OWORD *)v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      memset(v59, 0, sizeof(v59));
      if (*(double *)(v15 + 8) != 0.0)
      {
        Vocab::reverse(*(_QWORD *)&v67[4] - 4 * v66, v16);
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
        {
          v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\tp( ", 4);
          v20 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)&v67[4] - 4 * v66));
          v21 = strlen(v20);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" | ", 3);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 328))(*(_QWORD *)(a1 + 24));
          v24 = operator<<(v23, (_DWORD *)(*(_QWORD *)&v67[4] + 4 * (1 - v66)));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") \t= ", 6);
        }
        v25 = (*(float (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 48))(a1, *(unsigned int *)(*(_QWORD *)&v67[4] + 4 * -v66), *(_QWORD *)&v67[4] + 4 * (1 - v66));
        v26 = 0.0;
        if (a5)
          v26 = (*(float (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 104))(a1, *(_QWORD *)&v67[4] - 4 * v66, a4, 0.0);
        v27 = *(double *)(v17 + 8);
        v28 = 0.0;
        if (v26 != -INFINITY)
          v28 = exp(v26 * 2.30258509);
        v29 = v27 * v28;
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
        {
          v30 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
          if (v25 != -INFINITY)
            exp(v25 * 2.30258509);
          v31 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" [ ", 3);
          std::ostream::operator<<();
          if (v29 != 1.0)
          {
            v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" *", 2);
            std::ostream::operator<<();
          }
          v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ]", 2);
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_52;
          v34 = Debug::debugAll;
          if (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u)
          {
            v35 = *(_DWORD *)(*(_QWORD *)&v67[4] - 4 * v66);
            v36 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
            if (v35 == *v36)
              v37 = (double *)&v62;
            else
              v37 = (double *)&v60 + 1;
            if (v35 == *v36)
              v38 = (double *)&v62 + 1;
            else
              v38 = (double *)&v61;
            if (v35 == *v36)
              v39 = (double *)&v63;
            else
              v39 = (double *)&v61 + 1;
            LM::updateRanks((const Vocab **)a1, v25, (const unsigned int *)(*(_QWORD *)&v67[4] + 4 * (1 - v66)), v37, v38, v39, *(double *)(v17 + 8));
            *((_QWORD *)&v63 + 1) = *(_QWORD *)(v17 + 8);
            if (!*(_BYTE *)(a1 + 8))
            {
              v34 = Debug::debugAll;
              goto LABEL_44;
            }
LABEL_52:
            v47 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
            v48 = std::locale::use_facet(&v69, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
            std::locale::~locale(&v69);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_53;
          }
LABEL_44:
          if (v34 > 2)
          {
            if (v34 != 3)
              goto LABEL_52;
            v40 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            v40 = *(_DWORD *)(a1 + 12);
            if (v40 < 3)
              goto LABEL_52;
          }
          if (v40 <= 3)
          {
            v41 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, *(_QWORD *)&v67[4] + 4 * (1 - v66));
            v42 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" / ", 3);
            std::ostream::operator<<();
            if (fabs(v41 + -1.0) > 0.0001)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
              v43 = (_QWORD *)std::ostream::operator<<();
              v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" != 1 : ", 8);
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 328))(*(_QWORD *)(a1 + 24));
              v45 = operator<<(v44, (_DWORD *)(*(_QWORD *)&v67[4] + 4 * (1 - v66)));
              std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
              v46 = std::locale::use_facet(&v69, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
              std::locale::~locale(&v69);
              std::ostream::put();
              std::ostream::flush();
            }
          }
          goto LABEL_52;
        }
LABEL_53:
        v49 = *(_DWORD *)(*(_QWORD *)&v67[4] - 4 * v66);
        v50 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
        v51 = 24;
        if (v49 == *v50)
          v51 = 16;
        *(_QWORD *)((char *)v59 + v51) = *(_QWORD *)(v17 + 8);
        if (v25 == -INFINITY)
        {
          v52 = *(_DWORD *)(*(_QWORD *)&v67[4] - 4 * v66);
          if (v52 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
          {
            *(_QWORD *)&v60 = *(_QWORD *)(v17 + 8);
            goto LABEL_63;
          }
          *((_QWORD *)&v59[0] + 1) = *(_QWORD *)(v17 + 8);
          v64[0] = *(double *)(v17 + 8);
          v54 = *(double *)(v17 + 8);
        }
        else
        {
          *(double *)v59 = v29 * v25;
          v10 = *(double *)v59 + v10;
          v53 = 1.0 - exp(v25 * 2.30258509);
          if (v53 < 0.0)
            v53 = 0.0;
          v64[0] = *(double *)(v17 + 8) * (v53 * v53);
          v54 = v53 * *(double *)(v17 + 8);
        }
        v64[1] = v54;
LABEL_63:
        TextStats::increment(a3, (uint64_t)v59);
        Vocab::reverse(*(_QWORD *)&v67[4] - 4 * v66, v55);
      }
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v65);
    v11 = (v11 + 1);
  }
  while (v11 <= a4);
LABEL_67:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, v57);
  if (a5)
    *(_OWORD *)(a3 + 16) = xmmword_1AE1614C0;
  if (*(_QWORD *)&v67[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v67[4], 0x1000C8052888210);
  return v10;
}

void sub_1ADB2E4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v36;

  v36 = *(_QWORD *)(v34 - 176);
  if (v36)
    MEMORY[0x1AF44D160](v36, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

unint64_t LM::pplCountsFile<unsigned long>(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *__s, int a6, LMStats *a7)
{
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  LMStats *v16;
  size_t v17;
  int v18;
  char *v19;
  __n128 v20;
  char *v21;
  const char *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  std::locale::__imp *locale;
  _QWORD *inserted;
  __n128 v33;
  _QWORD *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  size_t v38;
  __n128 v39;
  _QWORD *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  double v43;
  unsigned int v45;
  LMStats *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  _BYTE v58[12];
  int v59;
  char v60;
  std::locale v61;
  _OWORD v62[51];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (__s)
    v13 = strlen(__s);
  else
    v13 = 0;
  v14 = *(const char **)(a1 + 136);
  if (v14)
    v15 = strlen(v14);
  else
    v15 = 0;
  memset(v62, 0, 512);
  *(_DWORD *)&v58[8] = 0;
  v59 = 0;
  v57 = 0;
  *(_QWORD *)v58 = (a3 + 1);
  v45 = a3 + 1;
  if ((_DWORD)a3 != -1)
    Array<unsigned int>::alloc((uint64_t)&v57, a3, 0);
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v16 = a7;
  v50 = 0u;
  if (!a7)
  {
    v16 = (LMStats *)operator new();
    NgramCounts<unsigned long>::NgramCounts(v16, *(Vocab **)(a1 + 24), a3);
  }
  v47 = a7;
  v48 = a4;
  v17 = v13;
LABEL_12:
  v18 = 0;
  v49 = (_QWORD *)((char *)v16 + 160);
  while (1)
  {
    v19 = File::getline(a2);
    v21 = v19;
    if (!v19)
      break;
    if (__s && !strncmp(v19, __s, v17))
    {
      if (v18)
      {
        v33.n128_f32[0] = LM::countsProb<unsigned long>(a1, (uint64_t)v16, (uint64_t)&v50, a3, a6);
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          v34 = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 24))(a1, v33);
          v35 = operator<<(v34, (double *)&v50);
          std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
          v36 = std::locale::use_facet(&v61, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
          std::locale::~locale(&v61);
          std::ostream::put();
          std::ostream::flush();
        }
        TextStats::increment(v48, (uint64_t)&v50);
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        if (v47)
        {
          LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(v49, 0);
        }
        else
        {
          (*(void (**)(LMStats *))(*(_QWORD *)v16 + 8))(v16);
          v16 = (LMStats *)operator new();
          NgramCounts<unsigned long>::NgramCounts(v16, *(Vocab **)(a1 + 24), a3);
        }
      }
      v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v38 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v21, v38);
      goto LABEL_12;
    }
    v22 = *(const char **)(a1 + 136);
    if (v22 && !strncmp(v21, v22, v15))
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 152))(a1, &v21[v15]);
    }
    else
    {
      v61.__locale_ = 0;
      v23 = NgramCounts<unsigned long>::parseNgram((Vocab *)v21, (char *)v62, (const char **)0x65, (char **)&v61);
      if (v23)
      {
        if (v23 <= a3)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
          v25 = *(_QWORD *)(a1 + 24);
          v26 = *(_QWORD *)&v58[4];
          v27 = v57;
          if (v24)
          {
            (*(void (**)(_QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v25 + 256))(*(_QWORD *)(a1 + 24), v62, *(_QWORD *)&v58[4] - 4 * v57, v45);
          }
          else
          {
            v30 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 88))(*(_QWORD *)(a1 + 24));
            (*(void (**)(uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 272))(v25, v62, v26 - 4 * v27, v45, *v30);
          }
          locale = v61.__locale_;
          v60 = 0;
          inserted = Trie<unsigned int,unsigned long>::insertTrie(v49, (unsigned int *)(*(_QWORD *)&v58[4] - 4 * v57), &v60);
          inserted[1] += locale;
          v18 = 1;
        }
      }
      else
      {
        v28 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"malformed N-gram count or more than ", 36);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" words per line\n", 16);
      }
    }
  }
  if (v18)
  {
    v39.n128_f32[0] = LM::countsProb<unsigned long>(a1, (uint64_t)v16, (uint64_t)&v50, a3, a6);
    if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      v40 = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 24))(a1, v39);
      v41 = operator<<(v40, (double *)&v50);
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
      v42 = std::locale::use_facet(&v61, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
      std::locale::~locale(&v61);
      std::ostream::put();
      std::ostream::flush();
    }
    v20.n128_f64[0] = TextStats::increment(v48, (uint64_t)&v50);
  }
  if (!v47 && v16)
    (*(void (**)(LMStats *, __n128))(*(_QWORD *)v16 + 8))(v16, v20);
  v43 = *(double *)(v48 + 24);
  if (*(_QWORD *)&v58[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v58[4], 0x1000C8052888210, v20);
  return (unint64_t)v43;
}

void sub_1ADB2EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32)
{
  uint64_t v32;

  MEMORY[0x1AF44D190](v32, 0x10A1C40C5E9EE53);
  if (a29)
    MEMORY[0x1AF44D160](a29, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

double LM::pplCountsFile<double>(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *__s, int a6, LMStats *a7)
{
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  LMStats *v16;
  size_t v17;
  int v18;
  char *v19;
  __n128 v20;
  char *v21;
  const char *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  std::locale::__imp *locale;
  double *inserted;
  __n128 v33;
  _QWORD *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  size_t v38;
  __n128 v39;
  _QWORD *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  double v43;
  unsigned int v45;
  LMStats *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  _BYTE v58[12];
  int v59;
  char v60;
  std::locale v61;
  _OWORD v62[51];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (__s)
    v13 = strlen(__s);
  else
    v13 = 0;
  v14 = *(const char **)(a1 + 136);
  if (v14)
    v15 = strlen(v14);
  else
    v15 = 0;
  memset(v62, 0, 512);
  *(_DWORD *)&v58[8] = 0;
  v59 = 0;
  v57 = 0;
  *(_QWORD *)v58 = (a3 + 1);
  v45 = a3 + 1;
  if ((_DWORD)a3 != -1)
    Array<unsigned int>::alloc((uint64_t)&v57, a3, 0);
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v16 = a7;
  v50 = 0u;
  if (!a7)
  {
    v16 = (LMStats *)operator new();
    NgramCounts<double>::NgramCounts(v16, *(Vocab **)(a1 + 24), a3);
  }
  v47 = a7;
  v48 = a4;
  v17 = v13;
LABEL_12:
  v18 = 0;
  v49 = (_QWORD *)((char *)v16 + 160);
  while (1)
  {
    v19 = File::getline(a2);
    v21 = v19;
    if (!v19)
      break;
    if (__s && !strncmp(v19, __s, v17))
    {
      if (v18)
      {
        v33.n128_f32[0] = LM::countsProb<double>(a1, (uint64_t)v16, (uint64_t)&v50, a3, a6);
        if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          v34 = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 24))(a1, v33);
          v35 = operator<<(v34, (double *)&v50);
          std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
          v36 = std::locale::use_facet(&v61, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
          std::locale::~locale(&v61);
          std::ostream::put();
          std::ostream::flush();
        }
        TextStats::increment(v48, (uint64_t)&v50);
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        if (v47)
        {
          LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(v49, 0);
        }
        else
        {
          (*(void (**)(LMStats *))(*(_QWORD *)v16 + 8))(v16);
          v16 = (LMStats *)operator new();
          NgramCounts<double>::NgramCounts(v16, *(Vocab **)(a1 + 24), a3);
        }
      }
      v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v38 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v21, v38);
      goto LABEL_12;
    }
    v22 = *(const char **)(a1 + 136);
    if (v22 && !strncmp(v21, v22, v15))
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 152))(a1, &v21[v15]);
    }
    else
    {
      *(double *)&v61.__locale_ = 0.0;
      v23 = NgramCounts<double>::parseNgram((Vocab *)v21, (char *)v62, (const char **)0x65, (char **)&v61);
      if (v23)
      {
        if (v23 <= a3)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
          v25 = *(_QWORD *)(a1 + 24);
          v26 = *(_QWORD *)&v58[4];
          v27 = v57;
          if (v24)
          {
            (*(void (**)(_QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v25 + 256))(*(_QWORD *)(a1 + 24), v62, *(_QWORD *)&v58[4] - 4 * v57, v45);
          }
          else
          {
            v30 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 88))(*(_QWORD *)(a1 + 24));
            (*(void (**)(uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 272))(v25, v62, v26 - 4 * v27, v45, *v30);
          }
          locale = v61.__locale_;
          v60 = 0;
          inserted = (double *)Trie<unsigned int,unsigned long>::insertTrie(v49, (unsigned int *)(*(_QWORD *)&v58[4] - 4 * v57), &v60);
          inserted[1] = *(double *)&locale + inserted[1];
          v18 = 1;
        }
      }
      else
      {
        v28 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"malformed N-gram count or more than ", 36);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" words per line\n", 16);
      }
    }
  }
  if (v18)
  {
    v39.n128_f32[0] = LM::countsProb<double>(a1, (uint64_t)v16, (uint64_t)&v50, a3, a6);
    if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      v40 = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 24))(a1, v39);
      v41 = operator<<(v40, (double *)&v50);
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
      v42 = std::locale::use_facet(&v61, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
      std::locale::~locale(&v61);
      std::ostream::put();
      std::ostream::flush();
    }
    v20.n128_f64[0] = TextStats::increment(v48, (uint64_t)&v50);
  }
  if (!v47 && v16)
    (*(void (**)(LMStats *, __n128))(*(_QWORD *)v16 + 8))(v16, v20);
  v43 = *(double *)(v48 + 24);
  if (*(_QWORD *)&v58[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v58[4], 0x1000C8052888210, v20);
  return v43;
}

void sub_1ADB2EFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32)
{
  uint64_t v32;

  MEMORY[0x1AF44D190](v32, 0x10A1C40C5E9EE53);
  if (a29)
    MEMORY[0x1AF44D160](a29, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t LM::pplFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  File *v9;
  File *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  int v14;
  size_t v15;
  size_t v16;
  std::locale::id *v17;
  char *v18;
  char **v19;
  char *v20;
  const char *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  size_t v28;
  std::locale::__imp *p_p;
  uint64_t locale;
  char *v31;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  std::string v60;
  __int128 v61;
  uint64_t v62;
  std::locale v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  std::string __p;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78[5];
  char v79[16];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v111 = *MEMORY[0x1E0C80C00];
  if (v3)
    v12 = strlen(v3);
  else
    v12 = 0;
  v13 = *(const char **)(v11 + 136);
  if (v13)
    LODWORD(v13) = strlen(v13);
  v59 = 0;
  v14 = 0;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  *(_OWORD *)v79 = 0u;
  v80 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v15 = v12;
  v72 = 0u;
  v73 = 0u;
  v16 = v13;
  v58 = v6;
  v57 = v6 + 2;
  v71 = 0u;
  memset(&__p, 0, sizeof(__p));
  v17 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v18 = File::getline(v10);
    v20 = v18;
    if (!v18)
      break;
    if (v4 && !strncmp(v18, v4, v15))
    {
      if (v14 && !*(_DWORD *)(v11 + 12))
      {
        v24 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        v25 = operator<<(v24, (double *)&v71);
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
        v26 = std::locale::use_facet(v63, v17);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v63);
        std::ostream::put();
        std::ostream::flush();
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        HIDWORD(v59) = 1;
        v71 = 0u;
      }
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v28 = strlen(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v20, v28);
      std::string::basic_string[abi:ne180100]<0>(v63, &v20[v15]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[2] = v64;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v63[0].__locale_;
      p_p = (std::locale::__imp *)&__p;
      if ((SBYTE7(v64) & 0x80u) == 0)
      {
        locale = BYTE7(v64);
      }
      else
      {
        p_p = v63[0].__locale_;
        locale = (uint64_t)v63[1].__locale_;
      }
      v31 = (char *)p_p - 1;
      while (locale)
      {
        if (!memchr(" \n\r\t", v31[locale--], 4uLL))
          goto LABEL_28;
      }
      locale = -1;
LABEL_28:
      std::string::erase(&__p, locale + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      v21 = *(const char **)(v11 + 136);
      if (v21 && !strncmp(v20, v21, v16))
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 152))(v11, &v20[v16]);
      }
      else
      {
        v22 = Vocab::parseWords((Vocab *)v20, v79, (const char **)0xC351, v19);
        ++v14;
        if (v22 == 50001)
        {
          v23 = File::position((const char **)v10, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"too many words per sentence\n", 28);
        }
        else
        {
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          *(_OWORD *)&v63[0].__locale_ = 0u;
          if (!*(_BYTE *)(v11 + 8) && (Debug::debugAll || *(_DWORD *)(v11 + 12)))
          {
            v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
            v34 = operator<<(v33, (const char **)v79);
            std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
            v35 = std::locale::use_facet((const std::locale *)&v60, v17);
            ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
            std::locale::~locale((std::locale *)&v60);
            std::ostream::put();
            std::ostream::flush();
          }
          v56 = v8;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v60 = __p;
          v36 = v58;
          v61 = 0uLL;
          v62 = 0;
          v37 = v58[1];
          v38 = v58[2];
          if (v37 >= v38)
          {
            v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v58) >> 4);
            v42 = v41 + 1;
            if (v41 + 1 > 0x555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v58) >> 4);
            if (2 * v43 > v42)
              v42 = 2 * v43;
            if (v43 >= 0x2AAAAAAAAAAAAAALL)
              v44 = 0x555555555555555;
            else
              v44 = v42;
            v78[4] = v57;
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)v57, v44);
            v46 = &v45[48 * v41];
            v78[0] = v45;
            v78[1] = v46;
            v78[3] = &v45[48 * v47];
            v48 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
            *((_QWORD *)v46 + 2) = *((_QWORD *)&v60.__r_.__value_.__l + 2);
            *(_OWORD *)v46 = v48;
            memset(&v60, 0, sizeof(v60));
            *((_QWORD *)v46 + 3) = 0;
            *((_QWORD *)v46 + 4) = 0;
            *((_QWORD *)v46 + 5) = 0;
            *(_OWORD *)(v46 + 24) = v61;
            *((_QWORD *)v46 + 5) = v62;
            v61 = 0uLL;
            v62 = 0;
            v78[2] = v46 + 48;
            v36 = v58;
            std::vector<SentenceInfo>::__swap_out_circular_buffer(v58, v78);
            v40 = v58[1];
            std::__split_buffer<SentenceInfo>::~__split_buffer(v78);
          }
          else
          {
            v39 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
            *(_QWORD *)(v37 + 16) = *((_QWORD *)&v60.__r_.__value_.__l + 2);
            *(_QWORD *)(v37 + 24) = 0;
            *(_OWORD *)v37 = v39;
            memset(&v60, 0, sizeof(v60));
            *(_QWORD *)(v37 + 32) = 0;
            *(_QWORD *)(v37 + 40) = 0;
            *(_OWORD *)(v37 + 24) = v61;
            *(_QWORD *)(v37 + 40) = v62;
            v61 = 0uLL;
            v62 = 0;
            v40 = v37 + 48;
          }
          v36[1] = v40;
          v78[0] = &v61;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v8 = v56;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          }
          (*(void (**)(uint64_t, char *, std::locale *, uint64_t))(*(_QWORD *)v11 + 88))(v11, v79, v63, v58[1] - 24);
          if (!*(_BYTE *)(v11 + 8) && (Debug::debugAll || *(_DWORD *)(v11 + 12)))
          {
            v49 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
            v50 = operator<<(v49, (double *)v63);
            std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
            v51 = std::locale::use_facet((const std::locale *)&v60, v17);
            ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
            std::locale::~locale((std::locale *)&v60);
            std::ostream::put();
            std::ostream::flush();
          }
          TextStats::increment(v56, (uint64_t)v63);
          TextStats::increment((uint64_t)&v71, (uint64_t)v63);
          LODWORD(v59) = v22 + v59;
        }
      }
    }
  }
  if (HIDWORD(v59))
  {
    v52 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v53 = operator<<(v52, (double *)&v71);
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
    v54 = std::locale::use_facet(v63, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
    std::locale::~locale(v63);
    std::ostream::put();
    std::ostream::flush();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v59;
}

void sub_1ADB2F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SentenceInfo::~SentenceInfo(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t LM::rescoreFile(LM *this, File *a2, double a3, double a4, LM *a5, double a6, double a7, const char *a8)
{
  size_t v16;
  const char *v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  FILE **v22;
  const char *v23;
  unsigned int v24;
  FILE *v25;
  const char *v26;
  int v27;
  _QWORD *v28;
  LM *v30;
  _QWORD v31[12];

  if (a8)
    v16 = strlen(a8);
  else
    v16 = 0;
  v17 = (const char *)*((_QWORD *)this + 17);
  if (v17)
    v18 = strlen(v17);
  else
    v18 = 0;
  v19 = File::getline(a2);
  if (!v19)
    return 0;
  v20 = v19;
  v21 = 0;
  v22 = (FILE **)MEMORY[0x1E0C80C20];
  do
  {
    if (a8 && !strncmp(v20, a8, v16))
    {
      fputs(v20, *v22);
    }
    else
    {
      v23 = (const char *)*((_QWORD *)this + 17);
      if (v23 && !strncmp(v20, v23, v18))
      {
        (*(void (**)(LM *, char *))(*(_QWORD *)this + 152))(this, &v20[v18]);
      }
      else
      {
        NBestHyp::NBestHyp((NBestHyp *)v31);
        if (NBestHyp::parse((NBestHyp *)v31, (Vocab *)v20, *((Vocab **)this + 3), 0, 0.0, 0, 0))
        {
          NBestHyp::decipherFix((NBestHyp *)v31, a5, a6, a7);
          NBestHyp::rescore((NBestHyp *)v31, this, a3, a4);
          v30 = a5;
          fprintf(*v22, "%g %g %lu", *(double *)&v31[2], *(double *)&v31[3], v31[4]);
          if (*(_DWORD *)v31[0] != -1)
          {
            v24 = 1;
            do
            {
              v25 = *v22;
              v26 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
              fprintf(v25, " %s", v26);
              v27 = *(_DWORD *)(v31[0] + 4 * v24++);
            }
            while (v27 != -1);
          }
          fputc(10, *v22);
          a5 = v30;
        }
        else
        {
          v28 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"bad n-best hyp format\n", 22);
        }
        v21 = (v21 + 1);
        NBestHyp::~NBestHyp((NBestHyp *)v31);
      }
    }
    v20 = File::getline(a2);
  }
  while (v20);
  return v21;
}

void sub_1ADB2FA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  NBestHyp::~NBestHyp((NBestHyp *)va);
  _Unwind_Resume(a1);
}

uint64_t LM::probServer(LM *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  pid_t v9;
  in_addr v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  char **v19;
  char **v20;
  MStringTokUtil *j;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  char **v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  std::locale::__imp *locale;
  const char **v39;
  int v40;
  std::locale::__imp *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  std::string *v54;
  std::string::size_type size;
  _QWORD *v56;
  std::string *v57;
  std::string::size_type v58;
  _QWORD *v59;
  _QWORD *v60;
  size_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  int *v65;
  char *v66;
  size_t v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  _QWORD *v70;
  int *v71;
  char *v72;
  size_t v73;
  _QWORD *v74;
  const std::locale::facet *v75;
  _QWORD *v76;
  int *v77;
  char *v78;
  size_t v79;
  _QWORD *v80;
  const std::locale::facet *v81;
  _QWORD *v82;
  int *v83;
  char *v84;
  size_t v85;
  _QWORD *v86;
  const std::locale::facet *v87;
  _QWORD *v89;
  _QWORD *v90;
  size_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int *v94;
  char *v95;
  size_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  int *v102;
  char *v103;
  _QWORD *v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  unsigned int i;
  unsigned int v110;
  char v111[8];
  std::string v112;
  socklen_t v113;
  _DWORD v114[9];
  char v115[256];
  std::locale v116[50003];
  _BYTE v117[5001];
  sockaddr v118;
  sockaddr v119;
  uint64_t v120;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v107 = v3;
  v5 = v4;
  v6 = v2;
  v120 = *MEMORY[0x1E0C80C00];
  v7 = socket(2, 1, 0);
  if (v7 == -1)
  {
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"could not create socket: ", 25);
    v65 = __error();
    v66 = srilm_ts_strerror(*v65);
    v67 = strlen(v66);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v66, v67);
    std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
    v69 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
    std::locale::~locale(v116);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  *(_QWORD *)&v119.sa_len = 512;
  *(_QWORD *)&v119.sa_data[6] = 0;
  *(_DWORD *)v119.sa_data = bswap32(v5) >> 16;
  v106 = v7;
  if (bind(v7, &v119, 0x10u) == -1 || (v107 ? (v8 = 10 * v107) : (v8 = 1000), listen(v106, v8) == -1))
  {
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"could not bind socket: ", 23);
    v71 = __error();
    v72 = srilm_ts_strerror(*v71);
    v73 = strlen(v72);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v72, v73);
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(_QWORD *)(*v74 - 24)));
    v75 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale(v116);
    std::ostream::put();
    std::ostream::flush();
    close(v106);
    return 0;
  }
  for (i = 0; ; ++i)
  {
    while (1)
    {
      while (1)
      {
        while (waitpid(-1, 0, 1) >= 1)
          --i;
        if (v107 - 1 >= i)
          break;
        sleep(5u);
      }
      v113 = 16;
      v108 = accept(v106, &v118, &v113);
      if (v108 == -1)
      {
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"could not accept connection: ", 29);
        v77 = __error();
        v78 = srilm_ts_strerror(*v77);
        v79 = strlen(v78);
        v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v78, v79);
        std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(_QWORD *)(*v80 - 24)));
        v81 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
        std::locale::~locale(v116);
        std::ostream::put();
        goto LABEL_77;
      }
      if (v107 != 1)
        break;
LABEL_17:
      v10.s_addr = *(_DWORD *)&v118.sa_data[2];
      v11 = inet_ntoa(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"client ", 7);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"@", 1);
      v14 = strlen(v11);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v11, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": connection accepted\n", 22);
      v105 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 272))(v6, 1);
      if (send(v108, "probserver ready\n", 0x11uLL, 0) == -1)
      {
        std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "client ");
        v98 = (_QWORD *)std::ostream::operator<<();
        v99 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v98, "@");
        v100 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v99, v11);
        v101 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v100, ": send: ");
        v102 = __error();
        v103 = srilm_ts_strerror(*v102);
        v104 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v101, v103);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v104);
        exit(-1);
      }
      v16 = recv(v108, v117, 0x1388uLL, 0);
      if ((v16 + 1) >= 2)
      {
        v17 = 0;
        v18 = 1;
        do
        {
          v117[v16] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v112, "");
          *(_QWORD *)v111 = 0;
          for (j = MStringTokUtil::strtok_r((MStringTokUtil *)v117, "\n", v111, v19);
                j;
                j = MStringTokUtil::strtok_r(0, "\n", v111, v31))
          {
            if (!*(_BYTE *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
            {
              v22 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"client ", 7);
              v23 = (_QWORD *)std::ostream::operator<<();
              v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"@", 1);
              v25 = strlen(v11);
              v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v25);
              v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
              v28 = strlen((const char *)j);
              v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)j, v28);
              std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
              v30 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
              std::locale::~locale(v116);
              std::ostream::put();
              std::ostream::flush();
            }
            memset(v116, 0, 512);
            v32 = Vocab::parseWords(j, (char *)v116, (const char **)0xC352, v20);
            if (v32)
            {
              if (!*(_BYTE *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
              {
                v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"client ", 7);
                v34 = (_QWORD *)std::ostream::operator<<();
                v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"@", 1);
                v36 = strlen(v11);
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v11, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
              }
              locale = v116[0].__locale_;
              if (!strcmp((const char *)v116[0].__locale_, "_R_E_M_O_T_E_L_M_V=2"))
              {
                snprintf(v115, 0x100uLL, "%s\n");
                goto LABEL_46;
              }
              if (v18 != 1 && strcmp((const char *)locale, "W"))
              {
                if (!strcmp((const char *)locale, "C1"))
                {
                  v43 = *(_QWORD *)(v6 + 24);
                  v44 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43);
                  (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v43 + 272))(v43, &v116[1], v114, 50000, *v44);
                  Vocab::reverse((uint64_t)v114, v45);
                  v110 = 0;
                  (*(void (**)(uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)v6 + 200))(v6, v114, &v110);
                }
                else
                {
                  if (strcmp((const char *)locale, "C2"))
                  {
                    if (!strcmp((const char *)locale, "B"))
                    {
                      v110 = 0;
                      sscanf((const char *)v116[v32 - 1].__locale_, "%u", &v110);
                      v116[v32 - 1].__locale_ = 0;
                      v51 = *(_QWORD *)(v6 + 24);
                      v52 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 88))(v51);
                      (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v51 + 272))(v51, &v116[1], v114, 50000, *v52);
                      Vocab::reverse((uint64_t)v114, v53);
                      (*(float (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v6 + 216))(v6, v114, v110);
                      snprintf(v115, 0x100uLL, "%s %g\n");
                    }
                    else
                    {
                      snprintf(v115, 0x100uLL, "%s command unknown\n");
                    }
LABEL_46:
                    v18 = 2;
LABEL_47:
                    std::string::append(&v112, v115);
                    continue;
                  }
                  v46 = *(_QWORD *)(v6 + 24);
                  v47 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 88))(v46);
                  (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v46 + 272))(v46, &v116[1], v114, 50000, *v47);
                  v48 = v32 - 1;
                  v49 = v114[v32 - 1];
                  v114[v48] = -1;
                  Vocab::reverse((uint64_t)v114, v50);
                  v110 = 0;
                  (*(void (**)(uint64_t, uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)v6 + 208))(v6, v49, v114, &v110);
                }
                snprintf(v115, 0x100uLL, "%s %llu %u\n");
                goto LABEL_46;
              }
              v40 = v32 - 1;
              v41 = v116[v32 - 1].__locale_;
              v116[v40].__locale_ = 0;
              v42 = (unint64_t)v116 | (8 * (v18 > 1));
              Vocab::reverse(v42, v39);
              (*(float (**)(uint64_t, std::locale::__imp *, unint64_t))(*(_QWORD *)v6 + 56))(v6, v41, v42);
              if (v18 == 1)
                snprintf(v115, 0x100uLL, "%g\n");
              else
                snprintf(v115, 0x100uLL, "%s %g\n");
              ++v17;
              goto LABEL_47;
            }
          }
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v112;
          else
            v54 = (std::string *)v112.__r_.__value_.__r.__words[0];
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          else
            size = v112.__r_.__value_.__l.__size_;
          if (send(v108, v54, size, 0) == -1)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"client ", 7);
            v89 = (_QWORD *)std::ostream::operator<<();
            v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"@", 1);
            v91 = strlen(v11);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v11, v91);
            v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)": send: ", 8);
            v94 = __error();
            v95 = srilm_ts_strerror(*v94);
            v96 = strlen(v95);
            v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v95, v96);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v97);
            exit(-1);
          }
          if (!*(_BYTE *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
          {
            v56 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v112;
            else
              v57 = (std::string *)v112.__r_.__value_.__r.__words[0];
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            else
              v58 = v112.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          v16 = recv(v108, v117, 0x1388uLL, 0);
        }
        while ((v16 + 1) >= 2);
      }
      close(v108);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 272))(v6, v105);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"client ", 7);
      v59 = (_QWORD *)std::ostream::operator<<();
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"@", 1);
      v61 = strlen(v11);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v11, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
      v63 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" probabilities served\n", 22);
      if (v107 != 1)
        exit(0);
    }
    v9 = fork();
    if (v9 < 0)
      break;
    if (!v9)
      goto LABEL_17;
    close(v108);
  }
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"fork failed: ", 13);
  v83 = __error();
  v84 = srilm_ts_strerror(*v83);
  v85 = strlen(v84);
  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v84, v85);
  std::ios_base::getloc((const std::ios_base *)((char *)v86 + *(_QWORD *)(*v86 - 24)));
  v87 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 10);
  std::locale::~locale(v116);
  std::ostream::put();
  v106 = v108;
LABEL_77:
  std::ostream::flush();
  close(v106);
  return 0;
}

void sub_1ADB3082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::locale::~locale((std::locale *)&STACK[0x30EB0]);
  _Unwind_Resume(a1);
}

uint64_t LM::generateWord(const Vocab **this, const unsigned int *a2)
{
  std::locale::id *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t result;
  _BYTE v18[36];
  unsigned int v19;
  std::locale v20;

  v19 = -1;
  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  do
  {
    v5 = drand48();
    VocabIter::VocabIter((VocabIter *)v18, this[3], 0);
    v6 = 0.0;
    if (v5 >= 0.0)
    {
      v7 = 0.0;
      v8 = 6;
      do
      {
        if (!VocabIter::next((VocabIter *)v18, &v19))
          break;
        v9 = (*((float (**)(const Vocab **, _QWORD, const unsigned int *))*this + v8))(this, v19, a2);
        v6 = 0.0;
        if (v9 != -INFINITY)
          v6 = exp(v9 * 2.30258509);
        v7 = v7 + v6;
        v8 = 8;
      }
      while (v7 <= v5);
    }
    if ((*((unsigned int (**)(const Vocab **, _QWORD))*this + 29))(this, v19))
    {
      if (v6 > 0.0 && !*((_BYTE *)this + 8) && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
      {
        v10 = (_QWORD *)(*((uint64_t (**)(const Vocab **))*this + 3))(this);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"nonword ", 8);
        v12 = (const char *)(*(uint64_t (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 32))(this[3], v19);
        v13 = strlen(v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" has nonzero probability ", 25);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
        v16 = std::locale::use_facet(&v20, v4);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
      }
      v19 = -1;
    }
    LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v18);
    result = v19;
  }
  while (v19 == -1);
  return result;
}

void sub_1ADB30AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned int *LM::generateSentence(LM *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  _DWORD **v8;
  _DWORD *v9;
  _QWORD *v10;
  unsigned int ***v11;
  const unsigned int *v12;
  unsigned int **v13;
  unsigned int ***v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  int v28;
  _BYTE v29[12];
  int v30;

  v8 = (_DWORD **)viDefaultResultSize();
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v10 = v9;
  }
  v11 = (unsigned int ***)viDefaultResult();
  v13 = *v11;
  if (*v11)
  {
    if (a3)
      goto LABEL_11;
  }
  else
  {
    v14 = v11;
    v13 = (unsigned int **)malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    *v14 = v13;
    if (a3)
      goto LABEL_11;
  }
  a3 = *v13;
  if (a2 + 1 > *v9)
  {
    *v9 = a2 + 1;
    if (a3)
      MEMORY[0x1AF44D160](a3, 0x1000C8052888210);
    a3 = (unsigned int *)operator new[]();
    *v13 = a3;
  }
LABEL_11:
  if (a4)
    v15 = Vocab::length((uint64_t)a4, v12);
  else
    v15 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)) != -1;
  v16 = v15 + a2;
  *(_DWORD *)&v29[8] = 0;
  v30 = 0;
  v28 = 0;
  *(_QWORD *)v29 = v15 + a2 + 1;
  if (v15 + a2 == -1)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v28, v15 + a2, 0);
    v18 = *(_QWORD *)&v29[4];
    v17 = v28;
  }
  *(_DWORD *)(v18 + 4 * (int)(v16 - v17)) = -1;
  if (a4)
  {
    if (v15)
    {
      v19 = v15;
      do
      {
        v20 = *a4++;
        *(_DWORD *)(v18 + 4 * (int)(a2 - 1 + v19-- - v28)) = v20;
      }
      while (v19);
      v16 = a2;
    }
  }
  else if (v15 == 1)
  {
    v21 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    --v16;
    v18 = *(_QWORD *)&v29[4];
    *(_DWORD *)(*(_QWORD *)&v29[4] + 4 * (int)(v16 - v28)) = v21;
  }
  for (; v16; *(_DWORD *)(*(_QWORD *)&v29[4] + 4 * (int)(--v16 - v28)) = v24)
  {
    v22 = *(_DWORD *)(v18 + 4 * (int)(v16 - v28));
    v23 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
    v18 = *(_QWORD *)&v29[4];
    if (v22 == v23)
      break;
    v24 = (*(uint64_t (**)(LM *, uint64_t))(*(_QWORD *)this + 168))(this, *(_QWORD *)&v29[4] + 4 * (int)(v16 - v28));
    v18 = *(_QWORD *)&v29[4];
  }
  v25 = a2 - 1;
  if (a2 - 1 > v16)
  {
    v26 = a3;
    do
    {
      *v26++ = *(_DWORD *)(v18 + 4 * (int)(v25 - v28));
      --v25;
    }
    while (v16 != v25);
    a3[a2 - 1 - v16] = -1;
    goto LABEL_32;
  }
  *a3 = -1;
  if (v18)
LABEL_32:
    MEMORY[0x1AF44D160]();
  return a3;
}

void sub_1ADB30DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

const char **LM::generateSentence(LM *this, uint64_t a2, const char **a3, const char **a4)
{
  _DWORD **v8;
  _DWORD *v9;
  _QWORD *v10;
  const char ****v11;
  const char *const *v12;
  const char ***v13;
  const char ****v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v23;
  _BYTE v24[12];
  int v25;

  v8 = (_DWORD **)vsDefaultResultSize();
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v10 = v9;
  }
  v11 = (const char ****)vsDefaultResult();
  v13 = *v11;
  if (*v11)
  {
    if (a3)
      goto LABEL_11;
  }
  else
  {
    v14 = v11;
    v13 = (const char ***)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v14 = v13;
    if (a3)
      goto LABEL_11;
  }
  a3 = *v13;
  if ((a2 + 1) > *v9)
  {
    *v9 = a2 + 1;
    if (a3)
      MEMORY[0x1AF44D160](a3, 0x50C80EE9192B6);
    a3 = (const char **)operator new[]();
    *v13 = a3;
  }
LABEL_11:
  if (a4)
  {
    v15 = Vocab::length((uint64_t)a4, v12);
    *(_DWORD *)&v24[8] = 0;
    v25 = 0;
    v16 = (v15 + 1);
    v23 = 0;
    *(_QWORD *)v24 = v16;
    if (v15 == -1)
    {
      v17 = 0;
      v18 = 0;
    }
    else
    {
      Array<unsigned int>::alloc((uint64_t)&v23, v15, 0);
      v18 = *(_QWORD *)&v24[4];
      v17 = v23;
    }
    v20 = *((_QWORD *)this + 3);
    v21 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 88))(v20);
    (*(void (**)(uint64_t, const char **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 272))(v20, a4, v18 - 4 * v17, v16, *v21);
    v19 = (*(uint64_t (**)(LM *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 176))(this, a2, 0, *(_QWORD *)&v24[4] - 4 * v23);
    if (*(_QWORD *)&v24[4])
      MEMORY[0x1AF44D160](*(_QWORD *)&v24[4], 0x1000C8052888210);
  }
  else
  {
    v19 = (*(uint64_t (**)(LM *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, a2, 0, 0);
  }
  (*(void (**)(_QWORD, uint64_t, const char **, _QWORD))(**((_QWORD **)this + 3) + 248))(*((_QWORD *)this + 3), v19, a3, (a2 + 1));
  return a3;
}

void sub_1ADB31030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void LM::freeThread(LM *this)
{
  void **v1;
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  void **v8;

  v1 = (void **)viDefaultResult();
  v2 = (uint64_t *)*v1;
  if (!*v1)
  {
    v2 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    *v1 = v2;
  }
  v3 = *v2;
  v4 = (void **)vsDefaultResult();
  v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    v5 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v4 = v5;
  }
  v6 = *v5;
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8052888210);
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x50C80EE9192B6);
  v7 = (void **)viDefaultResultSize();
  if (*v7)
  {
    free(*v7);
    *v7 = 0;
  }
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
  v8 = (void **)vsDefaultResultSize();
  if (*v8)
  {
    free(*v8);
    *v8 = 0;
  }
  if (*v4)
  {
    free(*v4);
    *v4 = 0;
  }
}

uint64_t LM::contextID(LM *this, const unsigned int *a2, Vocab *a3, unsigned int *a4)
{
  *a4 = Vocab::length((uint64_t)a3, a2);
  return 0;
}

float LM::contextBOW(LM *this, const unsigned int *a2)
{
  return 0.0;
}

uint64_t LM::read(LM *this, File *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"read() method not implemented\n", 30);
  return 0;
}

uint64_t LM::write(LM *this, File *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"write() method not implemented\n", 31);
  return 0;
}

uint64_t LM::writeBinary(_BYTE *a1)
{
  char v2;
  uint64_t result;

  v2 = a1[148];
  a1[148] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 248))(a1);
  a1[148] = v2;
  return result;
}

void LM::memStats(uint64_t a1, _QWORD *a2)
{
  *a2 += 152;
}

void _LM_FollowIter::_LM_FollowIter(_LM_FollowIter *this, const Vocab **a2, const unsigned int *a3)
{
  *(_QWORD *)this = &off_1E5D166E8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  VocabIter::VocabIter((_LM_FollowIter *)((char *)this + 24), a2[3], 0);
}

uint64_t _LM_FollowIter::init(_LM_FollowIter *this)
{
  return VocabIter::init((_LM_FollowIter *)((char *)this + 24));
}

uint64_t _LM_FollowIter::next(_LM_FollowIter *this)
{
  unsigned int v2;

  v2 = -1;
  VocabIter::next((_LM_FollowIter *)((char *)this + 24), &v2);
  return v2;
}

uint64_t _LM_FollowIter::next(_LM_FollowIter *this, float *a2)
{
  uint64_t v4;
  unsigned int v6;

  v4 = 0xFFFFFFFFLL;
  v6 = -1;
  VocabIter::next((_LM_FollowIter *)((char *)this + 24), &v6);
  if (v6 != -1)
  {
    *a2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
    return v6;
  }
  return v4;
}

void _LM_FollowIter::~_LM_FollowIter(_LM_FollowIter *this)
{
  *(_QWORD *)this = &off_1E5D166E8;
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5D166E8;
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)this + 24);
  JUMPOUT(0x1AF44D190);
}

std::string *std::allocate_shared[abi:ne180100]<WordInfo,std::allocator<WordInfo>,std::string &,std::string &,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x58uLL);
  result = std::__shared_ptr_emplace<WordInfo>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<WordInfo>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1ADB31460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<WordInfo>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<WordInfo>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D40B58;
  a1->__r_.__value_.__l.__size_ = 0;
  WordInfo::WordInfo(a1 + 1, a2, a3);
  return a1;
}

void sub_1ADB314AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WordInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WordInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<WordInfo>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void WordInfo::WordInfo(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1ADB315A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<SentenceInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<SentenceInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<SentenceInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<SentenceInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<SentenceInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<SentenceInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<SentenceInfo>::destroy[abi:ne180100](v4, i - 48);
  }
}

quasar::PdecPhraseBookOptions *quasar::PdecPhraseBookOptions::PdecPhraseBookOptions(quasar::PdecPhraseBookOptions *this)
{
  std::string __p;
  std::string __str;

  *(_QWORD *)quasar::PDecOptions::PDecOptions(this) = &off_1E5D386C0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "phrase_book_only");
  std::string::basic_string[abi:ne180100]<0>(&__p, "<default>");
  std::string::operator=((std::string *)((char *)this + 424), &__str);
  std::string::operator=((std::string *)((char *)this + 352), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return this;
}

void sub_1ADB318C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  quasar::PDecOptions *v20;

  if (a20 < 0)
    operator delete(__p);
  quasar::PDecOptions::~PDecOptions(v20);
  _Unwind_Resume(a1);
}

void quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 2952;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3008);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 373, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 372, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 371, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(a2 + 16);
  quasar::PDecOptions::~PDecOptions((quasar::PDecPhraseBookBlock *)((char *)this + 8));
}

void quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 3024));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 3024));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 3024));
}

{
  quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock((quasar::PDecPhraseBookBlock *)((char *)this
                                                                                  + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void quasar::PDecPhraseBookBlock::process(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  _OWORD v9[17];

  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Empty token received", 20);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v9);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else if (*(_BYTE *)(*a3 + 128))
  {
    v5 = (char *)quasar::OptionValue<BOOL>::value(a1 + 195);
    quasar::PDecEngineBlockMixin::processImplementation(a1 + 369, (uint64_t)a3, *v5, (uint64_t *)v9);
    v6 = *(_QWORD *)(*a1 - 24);
    if (*(_QWORD *)&v9[0] == *((_QWORD *)&v9[0] + 1))
    {
      quasar::ProcessingBlock::send((uint64_t)a1 + v6, (uint64_t)a3, 0);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "final");
      quasar::ProcessingBlock::send((uint64_t)a1 + v6, (const void **)__p, (uint64_t)v9, 0);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    __p[0] = v9;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
}

void sub_1ADB31BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __p = &a16;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecPhraseBookBlock::process(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  quasar::PDecPhraseBookBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

void quasar::PDecPhraseBookBlock::init(quasar::PDecPhraseBookBlock *this)
{
  uint64_t v2;
  const std::string *v3;
  const std::string *v4;
  const std::string *v5;
  const std::string *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const std::string *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;

  v2 = operator new();
  kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(v2, 0, 0, 0.5);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 371, v2);
  v3 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 213);
  std::string::operator=((std::string *)(*((_QWORD *)this + 371) + 16), v3);
  v4 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 233);
  std::string::operator=((std::string *)(*((_QWORD *)this + 371) + 40), v4);
  *(_DWORD *)(*((_QWORD *)this + 371) + 172) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)this + 177);
  v5 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 253);
  std::string::operator=((std::string *)(*((_QWORD *)this + 371) + 64), v5);
  v6 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 273);
  std::string::operator=((std::string *)(*((_QWORD *)this + 371) + 88), v6);
  quasar::PDecPhraseBookBlock::createDecoder((uint64_t)this, *((uint64_t ***)this + 374), (_QWORD *)this + 1, (uint64_t *)&v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 2952, &v18);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = quasar::OptionValue<std::string>::value((_QWORD *)this + 157);
  v11 = *(unsigned __int8 *)(v10 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 375);
    v13 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 157);
    v14 = (char *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 119);
    quasar::PDecEngineBlockMixin::createPhrasebookList(v12, v13, *v14, (uint64_t)&v18);
    v15 = *((_QWORD *)this + 371);
    v16 = *(_OWORD *)(v15 + 240);
    *(_OWORD *)(v15 + 240) = v18;
    v18 = v16;
    v17 = *(_QWORD *)(v15 + 256);
    *(_QWORD *)(v15 + 256) = v19;
    v19 = v17;
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

void sub_1ADB31DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

void quasar::PDecPhraseBookBlock::createDecoder(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v8 = a3 + 40;
  v9 = (uint64_t **)quasar::OptionValue<std::string>::value(a3 + 40);
  if ((quasar::PDecEngineBlockMixin::getPhraseBookMode(v9) & 0xFFFFFFFD) != 1 && quasar::gLogLevel >= 1)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)v25 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Illegal value for 'phrase-book-mode' in 'PDecPhraseBookBlock': ", 63);
    v12 = quasar::OptionValue<std::string>::value(v8);
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = v12;
    else
      v14 = *(_QWORD *)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v14, v15);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v25);
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "");
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v19 = 0;
  v20 = 0;
  quasar::PDecEngineBlockMixin::createDecoder(a1 + 2952, a2, a3, (uint64_t)v25, (uint64_t)v23, 50, 0, 0, a4, -1.0, 0.5, 0, (uint64_t)__p, 0, &v19);
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SBYTE7(v26) < 0)
    operator delete(v25[0]);
}

void sub_1ADB31FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecPhraseBookBlock::init(quasar::PDecPhraseBookBlock *this)
{
  quasar::PDecPhraseBookBlock::init((quasar::PDecPhraseBookBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

uint64_t quasar::PDecPhraseBookBlock::minConfigVersion(quasar::PDecPhraseBookBlock *this)
{
  return 35;
}

uint64_t `virtual thunk to'quasar::PDecPhraseBookBlock::minConfigVersion(quasar::PDecPhraseBookBlock *this)
{
  return 35;
}

void quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADB32128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

const char *quasar::PDecPhraseBookBlock::blockType(quasar::PDecPhraseBookBlock *this)
{
  return "PDecPhraseBookBlock";
}

const char *`virtual thunk to'quasar::PDecPhraseBookBlock::blockType(quasar::PDecPhraseBookBlock *this)
{
  return "PDecPhraseBookBlock";
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(uint64_t a1, int a2, int a3, float a4)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 164) = 0x4F0000004F000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 220) = 0x40A000003F800000;
  *(float *)(a1 + 228) = a4;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 264), "");
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0x10000;
  *(_BYTE *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  return a1;
}

void sub_1ADB3226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0)
    operator delete(*(void **)(v10 + 136));
  if (*(char *)(v10 + 135) < 0)
    operator delete(*(void **)(v10 + 112));
  if (*(char *)(v10 + 111) < 0)
    operator delete(*(void **)(v10 + 88));
  if (*(char *)(v10 + 87) < 0)
    operator delete(*(void **)(v10 + 64));
  if (*(char *)(v10 + 63) < 0)
    operator delete(*(void **)(v10 + 40));
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

__CFString *hexString(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __CFString *v10;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
    v5 = malloc_type_malloc((2 * v3) | 1, 0x100004077774924uLL);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = v5;
      do
      {
        v9 = v8;
        *v8 = a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v4 + v7) >> 4];
        v8[1] = a0123456789abcd[*(_BYTE *)(v4 + v7++) & 0xF];
        v8 += 2;
      }
      while (v3 > v7);
      v9[2] = 0;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      free(v6);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:arguments:", *MEMORY[0x1E0C99768], CFSTR("Failed to allocate memory"), 0);
      v10 = 0;
    }
  }
  else
  {
    v10 = &stru_1E5D49530;
  }

  return v10;
}

id sha256Data(void *a1)
{
  id v1;
  const void *v2;
  CC_LONG v3;
  unsigned __int8 md[32];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = objc_retainAutorelease(a1);
  v2 = (const void *)objc_msgSend(v1, "bytes");
  v3 = objc_msgSend(v1, "length");

  CC_SHA256(v2, v3, md);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 32);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t quasar::corrective_reranking::TargetIndexFilter::TargetIndexFilter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  int64_t size;
  std::string *p_str;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string::size_type v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int32x2_t *v56;
  _QWORD *v57;
  std::string v58;
  uint64_t v59;
  std::string v60;
  uint64_t v61;
  char v62;
  std::string v63;
  int v64;
  char v65;
  std::string __str;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[2];
  _BYTE v85[408];
  _QWORD v86[22];

  v86[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 32) = &unk_1E5D34170;
  v56 = (int32x2_t *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &unk_1E5D341C8;
  v7 = (_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 28);
  std::ifstream::basic_ifstream(v84);
  v8 = v84[0];
  v57 = v7;
  if ((v85[*(_QWORD *)(v84[0] - 24) + 16] & 5) != 0)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Could not open filter file ", 27);
    v53 = *(char *)(a2 + 23);
    if (v53 >= 0)
      v54 = a2;
    else
      v54 = *(_QWORD *)a2;
    if (v53 >= 0)
      v55 = *(unsigned __int8 *)(a2 + 23);
    else
      v55 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v67);
  }
  memset(&__str, 0, sizeof(__str));
  v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(v8 - 24)));
    v10 = std::locale::use_facet((const std::locale *)&v67, v9);
    v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v67);
    v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v84, (uint64_t)&__str, v11);
    if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
      break;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (size < 1)
      goto LABEL_37;
    v15 = (char *)p_str + size;
    v16 = p_str;
    while (1)
    {
      v17 = memchr(v16, 32, size);
      if (!v17)
        goto LABEL_37;
      if (*v17 == 32)
        break;
      v16 = (std::string *)(v17 + 1);
      size = v15 - (_BYTE *)v16;
      if (v15 - (_BYTE *)v16 < 1)
        goto LABEL_37;
    }
    if (v17 == v15 || (v18 = v17 - (_BYTE *)p_str, v17 - (_BYTE *)p_str == -1))
    {
LABEL_37:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"end != std::string::npos", 24);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v67);
    }
    std::string::basic_string(&v60, &__str, 0, v18, (std::allocator<char> *)&v67);
    std::string::basic_string(&v58, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v67);
    quasar::trim(&v60);
    quasar::trim(&v58);
    v19 = std::stoi(&v60, 0, 10);
    if (v19)
    {
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v63, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      else
        v63 = v58;
      v64 = v19;
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 24);
      if (v20 >= v21)
      {
        v23 = (uint64_t)(v20 - *v6) >> 5;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = v21 - *v6;
        if (v25 >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        *(_QWORD *)&v69 = a1 + 24;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 24, v26);
        v28 = &v27[32 * v23];
        *(_QWORD *)&v67 = v27;
        *((_QWORD *)&v67 + 1) = v28;
        *((_QWORD *)&v68 + 1) = &v27[32 * v29];
        v30 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *((_QWORD *)v28 + 2) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
        *(_OWORD *)v28 = v30;
        memset(&v63, 0, sizeof(v63));
        *((_DWORD *)v28 + 6) = v64;
        *(_QWORD *)&v68 = v28 + 32;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(v6, &v67);
        v31 = *(_QWORD *)(a1 + 16);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v67);
        v32 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 16) = v31;
        if (v32 < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
      }
      else
      {
        v22 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *(_QWORD *)(v20 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
        *(_OWORD *)v20 = v22;
        memset(&v63, 0, sizeof(v63));
        *(_DWORD *)(v20 + 24) = v64;
        *(_QWORD *)(a1 + 16) = v20 + 32;
      }
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v8 = v84[0];
  }
  v33 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v33)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"embeddingTargetIndexUtterance.size() > 0", 40);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v67);
  }
  quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(*a3, v33, &v63);
  if (!v65)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"textEmbedding.has_value() == true", 33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v67);
  }
  v34 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v35 = LODWORD(v63.__r_.__value_.__r.__words[2]);
  kaldi::CuMatrix<float>::Resize(v56, v34 >> 5, LODWORD(v63.__r_.__value_.__r.__words[2]), 1, 0);
  if ((int)(v34 >> 5) >= 1)
  {
    v36 = 0;
    v37 = (v34 >> 5);
    v38 = 23;
    do
    {
      quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(*a3, *v6 + v38 - 23, &v60);
      if (!v65)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Could not compute embedding for ", 32);
        v44 = (unsigned __int8 *)(*v6 + v38);
        v45 = *v44;
        v46 = *(_QWORD *)(v44 - 15);
        v49 = *(_QWORD *)(v44 - 23);
        v47 = v44 - 23;
        v48 = v49;
        if ((v45 & 0x80u) == 0)
          v50 = (uint64_t)v47;
        else
          v50 = v48;
        if ((v45 & 0x80u) == 0)
          v51 = v45;
        else
          v51 = v46;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v50, v51);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v67);
      }
      v39 = *(_QWORD *)(a1 + 40) + 4 * *(_DWORD *)(a1 + 56) * (int)v36;
      v40 = *(_DWORD *)(a1 + 48);
      v41 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v67 = &unk_1E5D29D70;
      *((_QWORD *)&v67 + 1) = v39;
      *((_QWORD *)&v68 + 1) = v41;
      *(_QWORD *)&v68 = v40;
      *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = 0uLL;
      v59 = 0;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
      kaldi::CuVector<float>::Resize((uint64_t)&v58, v35, 0);
      if (!v62)
        std::__throw_bad_optional_access[abi:ne180100]();
      kaldi::CuVectorBase<float>::CopyFromVec(&v58, (uint64_t)&v60);
      kaldi::CuVectorBase<float>::CopyFromVec(&v67, (uint64_t)&v58);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)&v58);
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
      ++v36;
      v38 += 32;
    }
    while (v37 != v36);
  }
  kaldi::CuMatrix<float>::CuMatrix(&v67, v56, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v67, (uint64_t)&v67);
  v61 = 0;
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
  *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
  kaldi::CuVector<float>::Resize((uint64_t)&v60, DWORD1(v68), 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v60, (uint64_t)&v67, 1.0, 0.0);
  kaldi::CuVector<float>::Resize((uint64_t)v57, LODWORD(v60.__r_.__value_.__r.__words[2]), 1);
  kaldi::CuVectorBase<float>::CopyFromVec(v57, (uint64_t)&v60);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v60);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v67);
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v63);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v84[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v84 + *(_QWORD *)(v84[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v85);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v86);
  return a1;
}

unint64_t quasar::corrective_reranking::TargetIndexFilter::filterStringForTargetIndex(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[34];
  int32x2_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int32x2_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _BYTE v25[20];
  unsigned int v26;
  char v27;

  if (*(_DWORD *)(a1 + 112) >= a3)
    v4 = a3;
  else
    v4 = *(_DWORD *)(a1 + 112);
  quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(**(_QWORD **)a1, a2, v25);
  if (v27)
  {
    v23 = 0u;
    v22 = 0u;
    v21 = (int32x2_t)&unk_1E5D34170;
    v24 = 0;
    kaldi::CuMatrix<float>::Resize(&v21, 1, v26, 1, 0);
    if (!v27)
      std::__throw_bad_optional_access[abi:ne180100]();
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&v21, (uint64_t)v25);
    quasar::computeL2Dist(a1 + 32, a1 + 80, (uint64_t)&v21, &v17);
    if (v20 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"dist.NumRows() == 1", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    if (v19 != (v6 - v5) >> 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"dist.NumCols() == embeddingTargetIndexUtterance.size()", 54);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (v6 == v5)
    {
      v11 = 0x7FFFFFFFLL;
      v10 = 2147500000.0;
    }
    else
    {
      v7 = 0;
      if ((unint64_t)v19 <= 1)
        v8 = 1;
      else
        v8 = v19;
      v9 = 0x7FFFFFFF;
      v10 = 2147500000.0;
      do
      {
        if (v10 > *(float *)(v18 + 4 * v7))
        {
          v10 = *(float *)(v18 + 4 * v7);
          v9 = v7;
        }
        ++v7;
      }
      while (v8 != v7);
      v11 = v9;
    }
    v14 = *(unsigned int *)(v5 + 32 * v11 + 24);
    if ((int)v14 <= v4 && v10 <= *(float *)(a1 + 116))
    {
      v12 = v14;
      v13 = v14 & 0xFFFFFFFFFFFFFF00 | ((unint64_t)LODWORD(v10) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v25);
  return v13 & 0xFFFFFFFFFFFFFF00 | v12;
}

void sub_1ADB32FCC()
{
  uint64_t v0;

  kaldi::CuMatrix<float>::~CuMatrix(v0 - 168);
  JUMPOUT(0x1ADB32FDCLL);
}

unint64_t quasar::corrective_reranking::TargetIndexFilter::filterAsrCandidatesForTargetIndex(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  float v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  if (v4 == *a2)
    goto LABEL_7;
  v7 = 0x7FFFFFFF;
  v8 = 2147500000.0;
  do
  {
    v9 = quasar::corrective_reranking::TargetIndexFilter::filterStringForTargetIndex(a1, v3, a3);
    if (v10 != 0 && v8 > *((float *)&v9 + 1))
    {
      v7 = v9;
      v8 = *((float *)&v9 + 1);
    }
    v3 += 32;
  }
  while (v3 != v4);
  if (v7 == 0x7FFFFFFF)
  {
LABEL_7:
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v12 = v7 & 0xFFFFFF00 | ((unint64_t)LODWORD(v8) << 32);
    v11 = v7;
  }
  return v12 | v11;
}

uint64_t std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *quasar::OnlineLatticeBiglmFasterDecoder::latticeGenerationRun(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  quasar::DecoderChainOutput **v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  clockid_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BOOL4 v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  double Snr;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t started;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t IsFinal;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  std::string *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t UtteranceAfterResume;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74[2];
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  quasar::SpeechRequestData *v79;
  std::__shared_weak_count *v80;
  void **v81;
  std::__shared_weak_count *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;

  v2 = *a1;
  v4 = (uint64_t *)(*a1 + 8);
  v3 = *v4;
  v5 = (quasar::DecoderChainOutput **)(v2 + 24);
  v6 = (uint64_t *)(v2 + 40);
  *(_BYTE *)(v3 + 561) = 0;
  v7 = quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(v3, (uint64_t **)(v2 + 24), (uint64_t *)(v2 + 40), *(_QWORD *)(v2 + 56), *(_DWORD *)(v2 + 64), a2);
  *(_BYTE *)(*v4 + 561) = 1;
  v8 = *(_QWORD *)(v2 + 72);
  *(_DWORD *)v8 = *(_DWORD *)v2;
  *(_DWORD *)(v8 + 4) = v7;
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(v8 + 8));
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(*(_QWORD *)(v2 + 72) + 24));
  if (v7 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(*(_QWORD *)(v2 + 72) + 40), (uint64_t)"CANCEL ", 7);
    v9 = (_QWORD *)std::ostream::operator<<();
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
  }
  else
  {
    quasar::Decoder::calculateNBest(*v4, (uint64_t *)(v2 + 24), *(_DWORD *)(*v6 + 16));
    quasar::SpeechRequestData::getRecogRequestTimer(*v6, &v77);
    *((double *)*v5 + 58) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v11);
    v12 = v78;
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = quasar::DecoderChainOutput::nonEmptyTopChoice(*(quasar::DecoderChainOutput **)(v2 + 24));
    v16 = (_QWORD *)(*(_QWORD *)(v2 + 72) + 40);
    if (v15)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"WRITE ", 6);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)*v4 + 16) + 24))(*(_QWORD *)(*(_QWORD *)*v4 + 16));
      Snr = quasar::SpeechRecognizer::getSnr(*((_QWORD *)*v5 + 44), *(std::mutex **)(*v4 + 48), *(_DWORD *)(*v6 + 8));
      v20 = *(_QWORD *)(*v6 + 24);
      if (!*(_BYTE *)(v20 + 49))
      {
        v21 = Snr;
        v22 = *(uint64_t **)(*v4 + 64);
        v23 = (uint64_t **)(v20 + 344);
        v24 = (uint64_t *)*v5;
        v25 = (std::__shared_weak_count *)*((_QWORD *)*v5 + 45);
        v83 = (uint64_t *)*((_QWORD *)*v5 + 44);
        v84 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v24 = (uint64_t *)*v5;
        }
        v28 = v24[50];
        v81 = (void **)v24[49];
        v82 = (std::__shared_weak_count *)v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v24 = (uint64_t *)*v5;
        }
        quasar::MuxHelper::finalizeResult(v22, v23, &v83, &v81, v24 + 46);
        v31 = v82;
        if (v82)
        {
          v32 = (unint64_t *)&v82->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = v84;
        if (v84)
        {
          v35 = (unint64_t *)&v84->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v37 = (float)v18;
        if (*((_BYTE *)*v5 + 1088))
        {
          v38 = *(_QWORD *)(v2 + 8);
          v39 = *(std::__shared_weak_count **)(v2 + 48);
          v79 = *(quasar::SpeechRequestData **)(v2 + 40);
          v80 = v39;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          quasar::SpeechRecognizer::splitComposedLmeTokens(v38, v2 + 24, &v79);
          v42 = v80;
          if (v80)
          {
            v43 = (unint64_t *)&v80->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        quasar::RecogResult::RecogResult((quasar::RecogResult *)&v77);
        v45 = *(std::__shared_weak_count **)(*v6 + 32);
        v75 = *(_QWORD *)(*v6 + 24);
        v76 = v45;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = quasar::RecogResult::setParams((uint64_t)&v77, &v75);
        v49 = quasar::Token::resetSpacing(*((uint64_t ***)*v5 + 44));
        v50 = quasar::RecogResult::setResultChoices(v48, (uint64_t)v49);
        v51 = quasar::RecogResult::setResultMuxIds(v50, (uint64_t)*v5 + 368);
        v52 = (_QWORD *)quasar::RecogResult::setResultCosts(v51, *((_QWORD *)*v5 + 49));
        v53 = quasar::RecogResult::setLmeStatus(v52, (uint64_t *)*v5 + 73);
        started = quasar::RunAsyncParams::setEndpointStartMs((uint64_t)v53, (uint64_t)*v5 + 656);
        v55 = quasar::RecogResult::setAudioAnalytics(started, (quasar::DecoderChainOutput *)((char *)*v5 + 696));
        v56 = quasar::RecogResult::setUtteranceStartMillis(v55, (float)(v37 * (float)*(unsigned int *)(*v6 + 8)));
        v57 = quasar::RecogResult::setUtteranceDurationMillis(v56, (float)(v37 * (float)*((unsigned int *)*v5 + 144)));
        v58 = quasar::RecogResult::setSNR(v57, v21);
        IsFinal = quasar::RecogResult::setIsFinal(v58, 0);
        v60 = quasar::RecogResult::setFingerprintDetected(IsFinal, *((_DWORD *)*v5 + 170));
        v61 = quasar::RecogResult::setWatermarkPeakAvg(v60, *((double *)*v5 + 86));
        v62 = quasar::RecogResult::setWatermarkDetected(v61, *((_DWORD *)*v5 + 171));
        v63 = (std::string *)quasar::RecogResult::setLatnnMitigatorResult(v62, (uint64_t)*v5 + 872);
        v64 = quasar::RecogResult::setSecondaryLatnnMitigatorResult(v63, (uint64_t)*v5 + 928);
        v65 = quasar::RecogResult::setLeftContextForItn((uint64_t)v64, *v4 + 768);
        v66 = quasar::RecogResult::setRightContextForItn(v65, *v4 + 792);
        UtteranceAfterResume = quasar::RecogResult::setFirstUtteranceAfterResume(v66, *(_BYTE *)(*v4 + 816));
        v68 = quasar::RecogResult::setEosLikelihood(UtteranceAfterResume, *((double *)*v5 + 135));
        quasar::RecogResult::setNumTokensExcludingTriggerPhrase(v68, *((_DWORD *)*v5 + 273));
        v69 = v76;
        if (v76)
        {
          v70 = (unint64_t *)&v76->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = *v6;
        if (*(_BYTE *)(*(_QWORD *)(*v6 + 24) + 625))
        {
          quasar::RecogResult::setIsVoiceCommandCandidatePackage((uint64_t)&v77, 1);
          v72 = *v6;
        }
        if (*(_BYTE *)(v72 + 216))
        {
          if (!*(_BYTE *)(*v4 + 852))
          {
            quasar::DecoderChainOutput::getWordHypLattice(*v5, (const quasar::DecoderPassData *)*v4, v74);
            quasar::RecogResult::setWordHypLattice((uint64_t)&v77, v74);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v74);
          }
        }
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)*v5 + 70) + 40))(*((_QWORD *)*v5 + 70), &v77, 1);
        quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v77);
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*(_QWORD *)(v2 + 72) + 8, (__int128 *)v4);
      return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v2 + 72) + 24), (uint64_t *)(v2 + 24));
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"EMPTY ", 6);
      v73 = (_QWORD *)std::ostream::operator<<();
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
    }
  }
}

void sub_1ADB33794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)va1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, int a5, unsigned __int8 *a6)
{
  unsigned __int8 v6;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  kaldi::TransitionModel *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  float AmScale;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  __int128 v64;
  int64x2_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  float TotalCostFromLinearCompactLattice;
  char v73;
  float v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  int v77;
  int v78;
  char **v79[2];
  _QWORD v80[2];
  int64x2_t v81;
  _QWORD v82[7];
  char v83;
  void *__p;
  int64x2_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  std::__shared_weak_count *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD *v95;
  _BYTE v96[24];
  _BYTE *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load(a6);
  if ((v6 & 1) != 0)
    return 1;
  v13 = (void **)(*a2)[40];
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(*a2 + 19), (__int128 *)&__p);
  v14 = (std::__shared_weak_count *)v85.i64[0];
  if (v85.i64[0])
  {
    v15 = (unint64_t *)(v85.i64[0] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (*a2)[19];
  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)v13);
  v18 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a1 + 32));
  if (!fst::DeterminizeLatticePhonePrunedWrapper(v18, v13, v17, *(_QWORD *)(a4 + 44), *(_DWORD *)(a4 + 52), *(float *)(a4 + 16)))return 2;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, 0x4000000000, 1))
    fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v17);
  if (*(_BYTE *)(a1 + 665))
  {
    v19 = *a2;
    v20 = (*a2)[19];
    v21 = operator new(0x28uLL);
    v21[1] = 0;
    v21[2] = 0;
    *v21 = &unk_1E5D413E0;
    v22 = *(_QWORD *)(v20 + 8);
    v21[4] = v22;
    ++*(_DWORD *)(v22 + 56);
    v21[3] = &unk_1E5D28AB0;
    __p = v21 + 3;
    v85.i64[0] = (uint64_t)v21;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v19 + 21), (__int128 *)&__p);
    v23 = (std::__shared_weak_count *)v85.i64[0];
    if (v85.i64[0])
    {
      v24 = (unint64_t *)(v85.i64[0] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (*a2)[21];
    v97 = 0;
    fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v26, (uint64_t)v96);
    v27 = v97;
    if (v97 == v96)
    {
      v28 = 4;
      v27 = v96;
    }
    else
    {
      if (!v97)
      {
LABEL_23:
        kaldi::TopSortCompactLatticeIfNeeded((*a2)[21]);
        *((_BYTE *)*a2 + 864) = 1;
        goto LABEL_24;
      }
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
    goto LABEL_23;
  }
LABEL_24:
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v92);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v90);
  kaldi::CompactLatticeShortestPath((_QWORD *)(*a2)[19], (uint64_t)&v90, 0, *a2 + 56);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v90, (uint64_t)&v92, 1);
  if (*(_BYTE *)(*(_QWORD *)(*a3 + 24) + 336))
  {
    v30 = operator new(0x38uLL);
    v30[2] = 0;
    *v30 = &unk_1E5D45008;
    v30[1] = 0;
    v30[5] = 0;
    v30[6] = 0;
    v30[4] = 0;
    v30[3] = v30 + 4;
    __p = v30 + 3;
    v85.i64[0] = (uint64_t)v30;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(*a2 + 132), (__int128 *)&__p);
    v31 = (std::__shared_weak_count *)v85.i64[0];
    if (v85.i64[0])
    {
      v32 = (unint64_t *)(v85.i64[0] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (uint64_t **)(*a2)[132];
    std::string::basic_string[abi:ne180100]<0>(&__p, "firstPassScaled");
    quasar::UttInfo::addResult(v34, (uint64_t)&__p, (_QWORD *)a1, *a2, *(_DWORD *)(*a3 + 16));
    if (v85.i8[15] < 0)
      operator delete(__p);
  }
  __asm { FMOV            V0.2S, #1.0 }
  (*a2)[63] = _D0;
  if (quasar::Decodable::getAmScale(*(quasar::Decodable **)(a1 + 32)) != 0.0)
  {
    *((float *)*a2 + 126) = quasar::Decodable::getAmScale(*(quasar::Decodable **)(a1 + 32));
    AmScale = quasar::Decodable::getAmScale(*(quasar::Decodable **)(a1 + 32));
    std::vector<std::vector<double>>::vector(&__p, 2uLL);
    v81.i64[0] = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)__p, 2uLL, &v81);
    v81.i64[0] = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)__p + 24, 2uLL, &v81);
    v41 = __p;
    **(_QWORD **)__p = 0x3FF0000000000000;
    *(double *)(v41[3] + 8) = 1.0 / AmScale;
    fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>((double ***)&__p, (*a2)[40]);
    v81.i64[0] = (uint64_t)&__p;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  }
  v29 = quasar::Decoder::reportResults((uint64_t)&v92, (uint64_t *)a2, (uint64_t)a3, a1);
  if ((_DWORD)v29)
    goto LABEL_35;
  if (*(_BYTE *)(*(_QWORD *)(*a3 + 24) + 48))
  {
    v78 = a5;
    v81 = 0uLL;
    v82[0] = 0;
    v47 = *(void ***)(a1 + 568);
    v48 = *(void ***)(a1 + 576);
    if (v47 != v48)
    {
      while (1)
      {
        v88 = 0;
        v89 = 0;
        v49 = (std::__shared_weak_count *)v47[1];
        if (!v49)
          break;
        v50 = std::__shared_weak_count::lock(v49);
        v89 = v50;
        if (!v50)
          goto LABEL_48;
        v51 = *v47;
        v88 = *v47;
LABEL_49:
        v52 = v81.i64[1];
        if (v81.i64[1] >= v82[0])
        {
          v54 = (v81.i64[1] - v81.i64[0]) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v56 = v82[0] - v81.i64[0];
          if ((v82[0] - v81.i64[0]) >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          v87 = v82;
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v82, v57);
          v60 = &v58[16 * v54];
          *(_QWORD *)v60 = v51;
          *((_QWORD *)v60 + 1) = v50;
          v61 = (_QWORD *)v81.i64[1];
          v62 = (_QWORD *)v81.i64[0];
          if (v81.i64[1] == v81.i64[0])
          {
            v65 = vdupq_n_s64(v81.u64[1]);
            v63 = &v58[16 * v54];
          }
          else
          {
            v63 = &v58[16 * v54];
            do
            {
              v64 = *((_OWORD *)v61 - 1);
              v61 -= 2;
              *((_OWORD *)v63 - 1) = v64;
              v63 -= 16;
              *v61 = 0;
              v61[1] = 0;
            }
            while (v61 != v62);
            v65 = v81;
          }
          v53 = v60 + 16;
          v81.i64[0] = (uint64_t)v63;
          v81.i64[1] = (uint64_t)(v60 + 16);
          v85 = v65;
          v66 = v82[0];
          v82[0] = &v58[16 * v59];
          v86 = v66;
          __p = (void *)v65.i64[0];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v81.i64[1] = v51;
          *(_QWORD *)(v52 + 8) = v50;
          v53 = (_QWORD *)(v52 + 16);
        }
        v81.i64[1] = (uint64_t)v53;
        v47 += 2;
        if (v47 == v48)
          goto LABEL_64;
      }
      v50 = 0;
LABEL_48:
      v51 = 0;
      goto LABEL_49;
    }
LABEL_64:
    *(_BYTE *)(a1 + 561) = 0;
    v94[0] = &off_1E5D3E7A0;
    v94[1] = a6;
    v95 = v94;
    v29 = quasar::Decoder::runChain((uint64_t **)&v81, (uint64_t)v94, a1, (uint64_t)a2, a3);
    v67 = v95;
    a5 = v78;
    if (v95 == v94)
    {
      v68 = 4;
      v67 = v94;
    }
    else
    {
      if (!v95)
      {
LABEL_70:
        *(_BYTE *)(a1 + 561) = 1;
        __p = &v81;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_71;
      }
      v68 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v68))();
    goto LABEL_70;
  }
  v29 = 0;
LABEL_71:
  if (a5 >= 1 && (*a2)[80])
  {
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v88);
    kaldi::CompactLatticeShortestPath(&v90, (uint64_t)&v88, 0);
    if ((((uint64_t)v89[3].__vftable - v89[2].__shared_weak_owners_) & 0x7FFFFFFF8) != 0)
    {
      v83 = 0;
      v69 = (*a2)[81];
      v80[0] = (*a2)[80];
      v80[1] = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(&v81, v80, 0x20000uLL);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v80);
      TotalCostFromLinearCompactLattice = kaldi::quasar::GetTotalCostFromLinearCompactLattice(&v88, &v83);
      v79[0] = 0;
      v79[1] = 0;
      v73 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst((uint64_t)&v81, 0, &v88, v79, a5);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v79);
      if ((v73 & 1) != 0)
      {
        v74 = kaldi::quasar::GetTotalCostFromLinearCompactLattice(&v88, &v83);
        v75 = *a2;
        *((float *)v75 + 158) = v74 - TotalCostFromLinearCompactLattice;
        *((_BYTE *)v75 + 628) = 1;
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to get new total LM score", 32);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
      }
      fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v81);
    }
    else if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to get a best path in the lattice", 40);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    v88 = &unk_1E5D25800;
    v76 = v89;
    if (v89)
    {
      v77 = LODWORD(v89[2].__shared_owners_) - 1;
      LODWORD(v89[2].__shared_owners_) = v77;
      if (!v77)
        ((void (*)(std::__shared_weak_count *))v76->~__shared_weak_count_0)(v76);
    }
  }
LABEL_35:
  v90 = &unk_1E5D25800;
  v42 = v91;
  if (v91)
  {
    v43 = *(_DWORD *)(v91 + 56) - 1;
    *(_DWORD *)(v91 + 56) = v43;
    if (!v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v92 = &unk_1E5D25580;
  v44 = v93;
  if (v93)
  {
    v45 = *(_DWORD *)(v93 + 56) - 1;
    *(_DWORD *)(v93 + 56) = v45;
    if (!v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  return v29;
}

void sub_1ADB33FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  int v37;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  *(_QWORD *)(v30 - 224) = &unk_1E5D25800;
  v32 = *(_DWORD **)(v30 - 216);
  if (v32)
  {
    v33 = v32[14] - 1;
    v32[14] = v33;
    if (!v33)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
  }
  *(_QWORD *)(v30 - 208) = &unk_1E5D25800;
  v34 = *(_DWORD **)(v30 - 200);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  *(_QWORD *)(v30 - 192) = &unk_1E5D25580;
  v36 = *(_DWORD **)(v30 - 184);
  if (v36)
  {
    v37 = v36[14] - 1;
    v36[14] = v37;
    if (!v37)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
  }
  _Unwind_Resume(a1);
}

void quasar::MuxHelper::finalizeResult(uint64_t *a1, uint64_t **a2, uint64_t **a3, void ***a4, uint64_t *a5)
{
  uint64_t *v6;
  void **p_p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v6 = *a3;
  if (v6)
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    if (*a4)
      p_p = *a4;
    else
      p_p = &__p;
    quasar::MuxHelper::finalizeResult(a1, a2, v6, (uint64_t)p_p, a5);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = *a5;
    v8 = a5[1];
    if (v8 != *a5)
    {
      do
      {
        v10 = v8 - 24;
        std::__tree<std::string>::destroy(v8 - 24, *(char **)(v8 - 16));
        v8 = v10;
      }
      while (v10 != v9);
    }
    a5[1] = v9;
  }
}

void sub_1ADB3428C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>(double ***a1, uint64_t a2)
{
  uint64_t v4;
  double **v5;
  double **v6;
  double *v7;
  double *v8;
  double *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  float v20;
  float v21;
  _DWORD v22[2];
  uint64_t v23;
  unint64_t v24;
  int v25;
  void **v26;
  float v27;
  int v28;
  float v29;

  std::vector<std::vector<double>>::vector(&v23, 2uLL);
  v26 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v23, 2uLL, &v26);
  v26 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v23 + 24, 2uLL, &v26);
  v4 = v23;
  *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8) = 0x3FF0000000000000;
  **(_QWORD **)v4 = 0x3FF0000000000000;
  v6 = *a1;
  v5 = a1[1];
  if ((char *)v5 - (char *)*a1 == v24 - v4)
  {
    while (v6 != v5)
    {
      v8 = *v6;
      v7 = v6[1];
      v9 = *(double **)v4;
      if ((char *)v7 - (char *)*v6 != *(_QWORD *)(v4 + 8) - *(_QWORD *)v4)
        goto LABEL_8;
      while (v8 != v7)
      {
        if (*v8 != *v9)
          goto LABEL_8;
        ++v8;
        ++v9;
      }
      v6 += 3;
      v4 += 24;
    }
    v26 = (void **)&v23;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
  else
  {
LABEL_8:
    v26 = (void **)&v23;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v26);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    if (v10 >= 1)
    {
      v11 = v10;
      v12 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a2 + 296))(a2, v12, &v26);
        while (!(*((unsigned int (**)(void **))*v26 + 3))(v26))
        {
          v13 = (*((uint64_t (**)(void **))*v26 + 4))(v26);
          v23 = *(_QWORD *)v13;
          v15 = *(float *)(v13 + 8);
          v14 = *(float *)(v13 + 12);
          v25 = *(_DWORD *)(v13 + 16);
          v16 = INFINITY;
          v17 = INFINITY;
          if (v15 != INFINITY)
          {
            v18 = v15;
            v19 = v14;
            v16 = (**a1)[1] * v19 + ***a1 * v18;
            v17 = (*a1)[3][1] * v19 + *(*a1)[3] * v18;
          }
          v24 = __PAIR64__(LODWORD(v17), LODWORD(v16));
          (*((void (**)(void **, uint64_t *))*v26 + 11))(v26, &v23);
          (*((void (**)(void **))*v26 + 5))(v26);
        }
        if (v26)
          (*((void (**)(void **))*v26 + 1))(v26);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v23, a2, v12);
        v29 = *((float *)&v23 + 1);
        LODWORD(v26) = v23;
        v28 = 2139095040;
        v27 = INFINITY;
        if (*(float *)&v23 != INFINITY || v29 != v27)
        {
          v20 = INFINITY;
          v21 = INFINITY;
          if (*(float *)&v23 != INFINITY)
          {
            v20 = (**a1)[1] * *((float *)&v23 + 1) + ***a1 * *(float *)&v23;
            v21 = (*a1)[3][1] * *((float *)&v23 + 1) + *(*a1)[3] * *(float *)&v23;
          }
          *(float *)v22 = v20;
          *(float *)&v22[1] = v21;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v12, v22);
        }
        v12 = (v12 + 1);
      }
      while ((_DWORD)v12 != v11);
    }
  }
}

void sub_1ADB34584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void quasar::writeRecordedStateAccessForFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = *(const void **)a1;
    if (v5)
    {
      if (v8)
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(a1 + 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (quasar::gLogLevel >= 4)
        {
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v24 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Write accessed states for ", 26);
          v14 = *(char *)(a2 + 23);
          if (v14 >= 0)
            v15 = a2;
          else
            v15 = *(_QWORD *)a2;
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a2 + 23);
          else
            v16 = *(_QWORD *)(a2 + 8);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" to ", 4);
          v19 = *(char *)(a3 + 23);
          if (v19 >= 0)
            v20 = a3;
          else
            v20 = *(_QWORD *)a3;
          if (v19 >= 0)
            v21 = *(unsigned __int8 *)(a3 + 23);
          else
            v21 = *(_QWORD *)(a3 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v24);
        }
        std::ofstream::basic_ofstream(&v24);
        quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(v9);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24)), *(_DWORD *)((char *)&v26 + *(_QWORD *)(v24 - 24)) | 4);
        *(_QWORD *)&v24 = *MEMORY[0x1E0DE4F48];
        *(_QWORD *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
        MEMORY[0x1AF44CA70]((char *)&v24 + 8);
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](v41);
        if (v10)
        {
          v22 = (unint64_t *)&v10->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"FST File empty", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
  }
}

void sub_1ADB34860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::registerParams(quasar::OnlineLatticeBiglmFasterDecoder *this, quasar::SystemConfig *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  _BOOL4 hasParam;
  std::string::size_type v19;
  std::string *v20;
  std::string *p_p;
  _OWORD *v22;
  __int128 v23;
  std::string v24;
  std::string __p;
  std::string v26;
  __int128 v27;
  int64_t v28;

  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register((uint64_t)this + 456, (uint64_t)a2);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)this + 1280, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(*((quasar::QsrTextSymbolTable **)this + 272), a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(&v27, "endpoint.");
  quasar::EndPointDecoderConfig::registerParams((uint64_t)this + 1472, a2, (const void **)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  std::string::basic_string[abi:ne180100]<0>(&v27, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)this + 1616, a2, (const void **)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  quasar::SystemConfig::getPrefix(a2, &v26);
  v4 = std::string::append(&v26, "utt-detect");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28 = v4->__r_.__value_.__r.__words[2];
  v27 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)this + 1936) = quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 1936))
  {
    quasar::SystemConfig::getPrefix(a2, &v26);
    v6 = std::string::append(&v26, "utt-detect");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v28 = v6->__r_.__value_.__r.__words[2];
    v27 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 15, 0, (uint64_t)&v27);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v27, "enable-double-partial-silence-posterior");
  std::string::basic_string[abi:ne180100]<0>(&v26, "double-partial-silence-posterior-threshold");
  quasar::SystemConfig::getPrefix(a2, &v24);
  if (v28 >= 0)
    v8 = (const std::string::value_type *)&v27;
  else
    v8 = (const std::string::value_type *)v27;
  if (v28 >= 0)
    v9 = HIBYTE(v28);
  else
    v9 = *((_QWORD *)&v27 + 1);
  v10 = std::string::append(&v24, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)this + 2159) = quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  quasar::SystemConfig::getPrefix(a2, &v24);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v26;
  else
    v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v24, (const std::string::value_type *)v12, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)this + 2160) = quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  quasar::SystemConfig::getPrefix(a2, &v24);
  v16 = std::string::append(&v24, "eager");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  hasParam = quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (hasParam)
      goto LABEL_38;
LABEL_53:
    v22 = (_OWORD *)*((_QWORD *)this + 48);
    v23 = *(_OWORD *)((char *)v22 + 14);
    *(_OWORD *)((char *)this + 1940) = *v22;
    *(_OWORD *)((char *)this + 1954) = v23;
    goto LABEL_54;
  }
  if (!hasParam)
    goto LABEL_53;
LABEL_38:
  quasar::SystemConfig::getPrefix(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  v20 = &v24;
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v19 + 6);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v20, p_p, v19);
  }
  strcpy((char *)v20 + v19, "eager.");
  quasar::SystemConfig::setPrefix((std::string *)a2, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  quasar::EagerConfig::Register((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 1940), a2);
  quasar::SystemConfig::setPrefix((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_54:
  quasar::NFHatConfig::registerParams((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 1976), a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "HCLG FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 616, (uint64_t)&v24, 1, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Grammar FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 664, (uint64_t)&v24, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Inverted Grammar FST filename (overrides uninverted)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 640, (uint64_t)&v24, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic-class-lm-emission");
  std::string::basic_string[abi:ne180100]<0>(&v24, "If true, enable dynamic classLm emission");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 808, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The dynamic class tags list separated by comma");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 816, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic-ctc-graph");
  std::string::basic_string[abi:ne180100]<0>(&v24, "When this value is true, the decoder will generate the dynamic ctc arcs for TLG graph.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 541, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic-class-lm-smallG-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The prior for correspoding classLm tags. Each line should contain two columns, tag and log prob");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 872, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "static-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The static tags lit separated by comma. Add this will improve dynamic emission's latency");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 848, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 688, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 736, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "acoustic-ep-avg-window");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The window size for the moving average of acoustic endpointer score.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2064, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "frames-after-ep");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The number of frames that the decoder continue decoding after endpointer triggers.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2068, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "inter-ep-label");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The label id for the intermediate silence. The score will be used for eager results.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2060, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "final-ep-label");
  std::string::basic_string[abi:ne180100]<0>(&v24, "The label id for the final silence/endpointer. The score will be used for eager results.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2056, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-total-extra-weight");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Max first pass weight for limiting total weight of all extra LMs in the first pass - all-app LM and possibly one more app specific LM");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2296, (uint64_t)&v24, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 712, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "min-active");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Decoder minimum #active states.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 464, (uint64_t)&v24, 0, 24, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(&v24, "the file extension name of the corresponding NNLM word map file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2192, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 760, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 784, (uint64_t)&v24, 0, 26, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(&v24, "maximal context for RNN style LM, no-op for other style of LMs");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2216, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "silence-phone-list");
  std::string::basic_string[abi:ne180100]<0>(&v24, "List of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1160, (uint64_t)&v24, 0, 0, 0, 15, 0);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Phone symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1120, (uint64_t)&v24, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1184, (uint64_t)&v24, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-state-access-recording");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Record which states in each FST are accessed, to allow for efficient reordering");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2300, (uint64_t)&v24, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Map FST/NNLM models into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2220, (uint64_t)&v24, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1296, (uint64_t)&v24, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1320, (uint64_t)&v24, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "recog-progress-freq");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Frequency(in milliseconds) of reporting recognition progress");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1008, (uint64_t)&v24, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-endpointing");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Enable server endpointing");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1464, (uint64_t)&v24, 0, 5, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "streaming-conf-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Filename for streaming confidence model file, format <WEIGHT> <FEATURE> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1368, (uint64_t)&v24, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "streaming-conf-normstats-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Filename for normalization statistics file for streaming confidence, format <FEATURES-LIST>\n <MEANS-LIST>\n <Standard-Deviations-LIST>\n (each line has a comma separated value for all features)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1392, (uint64_t)&v24, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use-endpoint-for-utt-detect");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Use endpoint configuration for doing utterance detection");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1937, (uint64_t)&v24, 0, 29, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "autocomplete-partial-result");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Allow partial result to hallucinate word even if speaker hasn't finished saying it yet. For example, Pneumonoultramicroscopicsilicovolcanoconiosis is recognized after a few syllables.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1360, (uint64_t)&v24, 0, 31, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "compute-trailing-silence-from-lattice");
  std::string::basic_string[abi:ne180100]<0>(&v24, "True if trailing silence should be computed from the lattice, otherwise use a separate two-state machine to compute trailing silence separately (set this parameter to false if a CTC trained acoustic model is being used).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1972, (uint64_t)&v24, 0, 60, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-eager");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Enable eager");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1938, (uint64_t)&v24, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use-partial-traceback-with-final-cost");
  std::string::basic_string[abi:ne180100]<0>(&v24, "For partial results, use traceback which taking final cost into account.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1361, (uint64_t)&v24, 0, 86, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ptwfo-always-use-best-tok-with-output");
  std::string::basic_string[abi:ne180100]<0>(&v24, "When set to true, partial traceback outputs the last word more aggressively to reduce the delay.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2158, (uint64_t)&v24, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "spg");
  std::string::basic_string[abi:ne180100]<0>(&v24, "If non-empty: This is a key into the top-level 'spg' dictionary of the config file, and this decoder will run a SilencePosteriorGenerator configured from the corresponding dictionary value. If empty: This decoder will not run a SilencePosteriorGenerator.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2080, (uint64_t)&v24, 0, 150, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "run-system-combination-after-recognition");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Run system combination at the end of recognition");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2800, (uint64_t)&v24, 0, 220, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(&v24, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2104, (uint64_t)&v24, 0, 232, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2144, (uint64_t)&v24, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-arcs-lm-cost");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Maximum number of Arcs during lm cost recovery. It is used when no rescore deocder and we need to compute lm cost for downstream use cases like phonetic match.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2872, (uint64_t)&v24, 1, 0, 232, 0, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "blank-label");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Blank label value. It should be consistent with the model. Default value is 1");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2152, (uint64_t)&v24, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "support-word-hyp-lattice");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Temporary!!! Remove it when am-fusion (rdar://99833729) is fully implemented!");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2156, (uint64_t)&v24, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "partial-traceback-with-fast-output");
  std::string::basic_string[abi:ne180100]<0>(&v24, "When set to true, partial traceback outputs the last word more aggressively to reduce the delay.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2157, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "word-piece-traceback");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Use word piece for partial traceback");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2148, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "word-piece-confidence");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Use word piece for confidence");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2149, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "add-lattice-super-final-state");
  std::string::basic_string[abi:ne180100]<0>(&v24, "When set to true, a super final state is added to the lattice.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2150, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "phone-sets-file");
  std::string::basic_string[abi:ne180100]<0>(&v24, "File containing lines of space separated phone ids. The phone ids in the same line belong to one phone group.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 1432, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Enable silence posterior threshold for double partial. When unset, it defaults to decoderConfig.enable_avg_sil_post");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v27, (uint64_t)this + 2161, (uint64_t)&__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "The silence posterior threshold for double partial. When unset, it defaults to decoderConfig.sil_post_threshold");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)this + 2164, (uint64_t)&__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "partial-traceback-frame-interval");
  std::string::basic_string[abi:ne180100]<0>(&v24, "Do partial traceback once every N frames, where N is this value. Note: A value not equal to 1 might break code that expects partial traceback on every frame.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2168, (uint64_t)&v24, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rnnlm-empty-hyp-cost");
  std::string::basic_string[abi:ne180100]<0>(&v24, "overwrite the final cost for empty hypothesis in RNN style LM");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2304, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "collapse-ctc-duplicates");
  std::string::basic_string[abi:ne180100]<0>(&v24, "When true, for CTC model, first pass and second pass decoders collapse CTC duplicates in partial and final results, and those decoders avoid writing partial results that don't undergo this process. Default is true.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 2172, (uint64_t)&v24, 0, 9, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x1AF44C914]((char *)this + 2192, "wordmap");
  *((_BYTE *)this + 2300) = 0;
  *((_BYTE *)this + 2220) = 0;
  *((_DWORD *)this + 554) = 7;
  *((_BYTE *)this + 1464) = 1;
  *((_WORD *)this + 680) = 0;
  *((_DWORD *)this + 252) = 0;
  *(_WORD *)((char *)this + 1937) = 256;
  *((_BYTE *)this + 1972) = 1;
  *((_BYTE *)this + 808) = 0;
  *((_BYTE *)this + 840) = 0;
  *((_DWORD *)this + 574) = 1065353216;
  *((_DWORD *)this + 536) = 4;
  *((_DWORD *)this + 576) = -1082130432;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
}

void sub_1ADB3642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void quasar::NFHatConfig::registerParams(quasar::NFHatConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "same-state-transition-probability");
  std::string::basic_string[abi:ne180100]<0>(__p, "Same state transition probability");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 46, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-evidence-deweighting-power");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic evidence deweighting power");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 46, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADB368A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::supportsEager(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  return *((unsigned __int8 *)this + 1938);
}

BOOL quasar::OnlineLatticeBiglmFasterDecoder::requiresSilencePosteriorForEager(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  return *((_BYTE *)this + 1968) && *((_BYTE *)this + 1969) == 0;
}

void quasar::OnlineLatticeBiglmFasterDecoder::getSpgName(quasar::OnlineLatticeBiglmFasterDecoder *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 2103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 260), *((_QWORD *)this + 261));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 130);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 262);
  }
}

void quasar::OnlineLatticeBiglmFasterDecoder::finishInit(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  std::locale::__imp *locale;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::locale::__imp *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::locale::__imp *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::locale::__imp *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t *v47;
  void **v48;
  uint64_t *MultiChainMultiAudioBuffer;
  uint64_t v50;
  _OWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  __int128 v63;
  int64x2_t v64;
  _OWORD *v65;
  std::locale::__imp *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64x2_t *v87;
  uint64_t v88;
  uint64_t *v89;
  _OWORD *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  __int128 v102;
  int64x2_t v103;
  _OWORD *v104;
  std::locale::__imp *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  float *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _DWORD *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  std::locale::__imp *v130;
  unint64_t *v131;
  unint64_t v132;
  _BOOL4 v135;
  _QWORD *v136;
  const std::locale::facet *v137;
  unsigned __int8 v138;
  std::locale::__imp *v139;
  unint64_t *v140;
  unint64_t v141;
  std::locale::__imp *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  int VectorVector;
  _QWORD *v148;
  _BYTE *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  _BOOL4 v156;
  uint64_t v157;
  _QWORD *v158;
  const std::locale::facet *v159;
  _QWORD *v160;
  const std::locale::facet *v161;
  uint64_t v162;
  uint64_t v163;
  const std::string *v164;
  const std::string *v165;
  uint64_t *v166;
  uint64_t *v167;
  int v168;
  int v169;
  char *v170;
  void *v171;
  char *v172;
  int64_t v173;
  unint64_t v174;
  int64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  _QWORD *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  void **v194;
  uint64_t v195;
  _QWORD *v196;
  int v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  int v201;
  char *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t *v206;
  void *v207;
  uint64_t *v208;
  unsigned __int8 v209;
  void *__p[2];
  _QWORD v211[9];
  char v212;
  uint64_t v213;
  std::string v214;
  std::vector<unsigned int> v215;
  void *v216;
  char *v217;
  uint64_t v218;
  void *v219[2];
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  std::locale::__imp *v227;
  std::locale::__imp *v228;
  std::locale::__imp *v229;
  std::locale::__imp *v230;
  unsigned __int8 *v231;
  std::__shared_weak_count *v232;
  std::locale v233[4];
  __int128 v234;
  void *__src[2];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char v249;
  _QWORD v250[3];
  _QWORD *v251;
  _BYTE v252[24];
  _BYTE *v253;
  _QWORD v254[3];
  _QWORD *v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)this + 640;
  if (*((char *)this + 663) < 0)
    v3 = *((_QWORD *)this + 81);
  else
    v3 = *((unsigned __int8 *)this + 663);
  if (v3)
  {
    if (quasar::gLogLevel >= 4)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Using pre-inverted grammar: ", 28);
      v5 = *((char *)this + 663);
      if (v5 >= 0)
        v6 = (uint64_t)v2;
      else
        v6 = *((_QWORD *)this + 80);
      if (v5 >= 0)
        v7 = *((unsigned __int8 *)this + 663);
      else
        v7 = *((_QWORD *)this + 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v233);
    }
    v233[1].__locale_ = 0;
    v233[0].__locale_ = 0;
    quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), v2, __p, 1.0);
    v233[0] = (std::locale)__p[0];
    v233[1] = (std::locale)__p[1];
    v8 = *((_QWORD *)this + 46);
    v231 = (unsigned __int8 *)__p[0];
    v232 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v9 = (unint64_t *)((char *)__p[1] + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    quasar::ModelLoader::readFstNetwork(v8, (uint64_t)v2, &v231, (uint64_t *)__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1032, (__int128 *)__p);
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v232;
    if (v232)
    {
      p_shared_owners = (unint64_t *)&v232->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    __p[0] = v2;
    v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)v2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v17 + 7, (uint64_t *)this + 129);
    locale = v233[1].__locale_;
    if (v233[1].__locale_)
    {
      v19 = (unint64_t *)((char *)v233[1].__locale_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
      }
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Using regular grammar, need to negate in memory: ", 49);
      v22 = *((char *)this + 687);
      if (v22 >= 0)
        v23 = (char *)this + 664;
      else
        v23 = (char *)*((_QWORD *)this + 83);
      if (v22 >= 0)
        v24 = *((unsigned __int8 *)this + 687);
      else
        v24 = *((_QWORD *)this + 84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v233);
    }
    v25 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read((uint64_t)this + 664);
    fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v25, -1.0);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v25);
    std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>((_QWORD *)this + 129, (uint64_t)v25);
    v233[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 664);
    v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 83, (uint64_t)&std::piecewise_construct, (__int128 **)v233);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v26 + 7, (uint64_t *)this + 129);
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 129) + 64))(*((_QWORD *)this + 129), 0x10000000, 0) != 0x10000000)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v233, "gInvFst: input label is not sorted!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  v229 = 0;
  v230 = 0;
  quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), (unsigned __int8 *)this + 616, v233, 1.0);
  v229 = v233[0].__locale_;
  v230 = v233[1].__locale_;
  v27 = *((_QWORD *)this + 46);
  v227 = v233[0].__locale_;
  v228 = v233[1].__locale_;
  if (v233[1].__locale_)
  {
    v28 = (unint64_t *)((char *)v233[1].__locale_ + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  quasar::ModelLoader::readFstNetwork(v27, (uint64_t)this + 616, (unsigned __int8 **)&v227, (uint64_t *)v233);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1016, (__int128 *)v233);
  v30 = v233[1].__locale_;
  if (v233[1].__locale_)
  {
    v31 = (unint64_t *)((char *)v233[1].__locale_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v30 + 16))(v30);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v30);
    }
  }
  v33 = (std::__shared_weak_count *)v228;
  if (v228)
  {
    v34 = (unint64_t *)((char *)v228 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v233[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 616);
  v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 77, (uint64_t)&std::piecewise_construct, (__int128 **)v233);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v36 + 7, (uint64_t *)this + 127);
  if (*((_BYTE *)this + 2300) || *((_BYTE *)this + 440))
  {
    if (quasar::gLogLevel >= 5)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"State access recording is enabled. This will slow decoding, so disregard performance.", 85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v233);
    }
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v233);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1016, (__int128 *)v233);
    v37 = v233[1].__locale_;
    if (v233[1].__locale_)
    {
      v38 = (unint64_t *)((char *)v233[1].__locale_ + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v37 + 16))(v37);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v37);
      }
    }
    v233[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 616);
    v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 77, (uint64_t)&std::piecewise_construct, (__int128 **)v233);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v40 + 7, (uint64_t *)this + 127);
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v233);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1032, (__int128 *)v233);
    v41 = v233[1].__locale_;
    if (v233[1].__locale_)
    {
      v42 = (unint64_t *)((char *)v233[1].__locale_ + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v41 + 16))(v41);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v41);
      }
    }
    if (*((char *)this + 663) < 0)
    {
      if (*((_QWORD *)this + 81))
        goto LABEL_70;
    }
    else if (*((_BYTE *)this + 663))
    {
LABEL_70:
      v233[0].__locale_ = (std::locale::__imp *)v2;
      v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)v2, (uint64_t)&std::piecewise_construct, (__int128 **)v233);
LABEL_73:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v44 + 7, (uint64_t *)this + 129);
      goto LABEL_74;
    }
    v233[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 664);
    v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 83, (uint64_t)&std::piecewise_construct, (__int128 **)v233);
    goto LABEL_73;
  }
LABEL_74:
  if (*((char *)this + 711) < 0)
  {
    if (*((_QWORD *)this + 87))
      goto LABEL_80;
  }
  else if (*((_BYTE *)this + 711))
  {
    goto LABEL_80;
  }
  if ((*((char *)this + 735) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 735))
      goto LABEL_80;
LABEL_219:
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"No BigG FST or NNLM specified. Hint: This is a BigLm decoder.", 61);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  if (!*((_QWORD *)this + 90))
    goto LABEL_219;
LABEL_80:
  v224 = 0;
  v225 = 0;
  v226 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 688), ",", 1, (uint64_t)&v224);
  v223 = 1;
  v254[0] = &off_1E5D3E698;
  v254[1] = this;
  v254[2] = &v223;
  v255 = v254;
  v45 = v224;
  v46 = v225;
  if (v224 != v225)
  {
    v47 = (int64x2_t *)((char *)this + 2224);
    v48 = (void **)((char *)this + 2248);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v50 = (uint64_t)v255;
      if (!v255)
        goto LABEL_85;
      if (v255 != v254)
        break;
      v253 = v252;
      (*(void (**)(_QWORD *, _BYTE *))(v254[0] + 24))(v254, v252);
LABEL_87:
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v45, (uint64_t)__p, MultiChainMultiAudioBuffer, (uint64_t)v252, &v221);
      v51 = (_OWORD *)*((_QWORD *)this + 279);
      v52 = *((_QWORD *)this + 280);
      if ((unint64_t)v51 >= v52)
      {
        v53 = ((uint64_t)v51 - v47->i64[0]) >> 4;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v55 = v52 - v47->i64[0];
        if (v55 >> 3 > v54)
          v54 = v55 >> 3;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
          v56 = 0xFFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        *(_QWORD *)&v234 = (char *)this + 2240;
        v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2240, v56);
        v59 = &v57[16 * v53];
        *(_OWORD *)v59 = v221;
        v221 = 0uLL;
        v60 = (_QWORD *)*((_QWORD *)this + 279);
        v61 = (_QWORD *)*((_QWORD *)this + 278);
        if (v60 == v61)
        {
          v64 = vdupq_n_s64((unint64_t)v60);
          v62 = &v57[16 * v53];
        }
        else
        {
          v62 = &v57[16 * v53];
          do
          {
            v63 = *((_OWORD *)v60 - 1);
            v60 -= 2;
            *((_OWORD *)v62 - 1) = v63;
            v62 -= 16;
            *v60 = 0;
            v60[1] = 0;
          }
          while (v60 != v61);
          v64 = *v47;
        }
        v65 = v59 + 16;
        *((_QWORD *)this + 278) = v62;
        *((_QWORD *)this + 279) = v59 + 16;
        *(int64x2_t *)&v233[1].__locale_ = v64;
        v66 = (std::locale::__imp *)*((_QWORD *)this + 280);
        *((_QWORD *)this + 280) = &v57[16 * v58];
        v233[3].__locale_ = v66;
        v233[0] = *(std::locale *)v64.i8;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v233);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
        *((_QWORD *)this + 279) = v65;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
      }
      else
      {
        *v51 = v221;
        v221 = 0uLL;
        *((_QWORD *)this + 279) = v51 + 1;
      }
      v70 = v253;
      if (v253 == v252)
      {
        v70 = v252;
        v71 = 4;
        goto LABEL_109;
      }
      if (v253)
      {
        v71 = 5;
LABEL_109:
        (*(void (**)(void))(*v70 + 8 * v71))();
      }
      if (SHIBYTE(v211[0]) < 0)
        operator delete(__p[0]);
      v72 = (char *)*((_QWORD *)this + 282);
      v73 = *((_QWORD *)this + 283);
      if ((unint64_t)v72 >= v73)
      {
        v75 = (char *)*v48;
        v76 = (v72 - (_BYTE *)*v48) >> 2;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v78 = v73 - (_QWORD)v75;
        if (v78 >> 1 > v77)
          v77 = v78 >> 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 2264, v79);
          v72 = (char *)*((_QWORD *)this + 282);
          v75 = (char *)*((_QWORD *)this + 281);
        }
        else
        {
          v80 = 0;
        }
        v81 = &v80[4 * v76];
        *(_DWORD *)v81 = 4;
        v74 = v81 + 4;
        while (v72 != v75)
        {
          v82 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v81 - 1) = v82;
          v81 -= 4;
        }
        *((_QWORD *)this + 281) = v81;
        *((_QWORD *)this + 282) = v74;
        *((_QWORD *)this + 283) = &v80[4 * v79];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *(_DWORD *)v72 = 4;
        v74 = v72 + 4;
      }
      *((_QWORD *)this + 282) = v74;
      v45 += 24;
      if (v45 == v46)
        goto LABEL_129;
    }
    v50 = (*(uint64_t (**)(void))(*v255 + 16))();
LABEL_85:
    v253 = (_BYTE *)v50;
    goto LABEL_87;
  }
LABEL_129:
  v221 = 0uLL;
  v222 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 712), ",", 1, (uint64_t)&v221);
  if (*((char *)this + 807) < 0)
    v83 = *((_QWORD *)this + 99);
  else
    v83 = *((unsigned __int8 *)this + 807);
  if (v83)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 784, ",", 1, (_QWORD *)this + 137) & 1) == 0)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
    }
    v84 = *((_QWORD *)&v221 + 1);
    v85 = v221;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v221 + 1) - v221) >> 3) != (uint64_t)(*((_QWORD *)this + 138)
                                                                                           - *((_QWORD *)this + 137)) >> 2)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
    }
  }
  else
  {
    LODWORD(v233[0].__locale_) = 0;
    std::vector<float>::assign((char **)this + 137, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v221 + 1) - v221) >> 3), v233);
    v84 = *((_QWORD *)&v221 + 1);
    v85 = v221;
  }
  if (v84 != v85)
  {
    v86 = 0;
    v87 = (int64x2_t *)((char *)this + 2272);
    while (1)
    {
      v88 = *(unsigned int *)(*((_QWORD *)this + 137) + 4 * v86);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      v89 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v250[0] = &off_1E5D3E6F0;
      v250[1] = this;
      v250[2] = v88;
      v251 = v250;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(v85 + 24 * v86, (uint64_t)__p, v89, (uint64_t)v250, v219);
      v90 = (_OWORD *)*((_QWORD *)this + 285);
      v91 = *((_QWORD *)this + 286);
      if ((unint64_t)v90 >= v91)
      {
        v92 = ((uint64_t)v90 - v87->i64[0]) >> 4;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v94 = v91 - v87->i64[0];
        if (v94 >> 3 > v93)
          v93 = v94 >> 3;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
          v95 = 0xFFFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        *(_QWORD *)&v234 = (char *)this + 2288;
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2288, v95);
        v98 = &v96[16 * v92];
        *(_OWORD *)v98 = *(_OWORD *)v219;
        v219[0] = 0;
        v219[1] = 0;
        v99 = (_QWORD *)*((_QWORD *)this + 285);
        v100 = (_QWORD *)*((_QWORD *)this + 284);
        if (v99 == v100)
        {
          v103 = vdupq_n_s64((unint64_t)v99);
          v101 = &v96[16 * v92];
        }
        else
        {
          v101 = &v96[16 * v92];
          do
          {
            v102 = *((_OWORD *)v99 - 1);
            v99 -= 2;
            *((_OWORD *)v101 - 1) = v102;
            v101 -= 16;
            *v99 = 0;
            v99[1] = 0;
          }
          while (v99 != v100);
          v103 = *v87;
        }
        v104 = v98 + 16;
        *((_QWORD *)this + 284) = v101;
        *((_QWORD *)this + 285) = v98 + 16;
        *(int64x2_t *)&v233[1].__locale_ = v103;
        v105 = (std::locale::__imp *)*((_QWORD *)this + 286);
        *((_QWORD *)this + 286) = &v96[16 * v97];
        v233[3].__locale_ = v105;
        v233[0] = *(std::locale *)v103.i8;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v233);
        v106 = (std::__shared_weak_count *)v219[1];
        *((_QWORD *)this + 285) = v104;
        if (v106)
        {
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
      }
      else
      {
        *v90 = *(_OWORD *)v219;
        v219[0] = 0;
        v219[1] = 0;
        *((_QWORD *)this + 285) = v90 + 1;
      }
      v109 = v251;
      if (v251 == v250)
        break;
      if (v251)
      {
        v110 = 5;
LABEL_161:
        (*(void (**)(void))(*v109 + 8 * v110))();
      }
      if (SHIBYTE(v211[0]) < 0)
        operator delete(__p[0]);
      ++v86;
      v85 = v221;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v221 + 1) - v221) >> 3) <= v86)
        goto LABEL_165;
    }
    v109 = v250;
    v110 = 4;
    goto LABEL_161;
  }
LABEL_165:
  v219[0] = 0;
  v219[1] = 0;
  v220 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 736, ",", 1, v219) & 1) == 0)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  if ((uint64_t)(*((_QWORD *)this + 279) - *((_QWORD *)this + 278)) >> 4 != ((char *)v219[1] - (char *)v219[0]) >> 2)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 760, ",", 1, &v216) & 1) == 0)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  if ((uint64_t)(*((_QWORD *)this + 285) - *((_QWORD *)this + 284)) >> 4 != (v217 - (_BYTE *)v216) >> 2)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  v111 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 135) = v111;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1072, v111, (char *)v219[0], (char *)v219[1], ((char *)v219[1] - (char *)v219[0]) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1072, *((_QWORD *)this + 135), (char *)v216, v217, (v217 - (_BYTE *)v216) >> 2);
  v112 = (float *)*((_QWORD *)this + 134);
  v113 = (float *)*((_QWORD *)this + 135);
  if (v112 == v113)
  {
    v114 = *((_QWORD *)this + 136);
    if ((unint64_t)v112 >= v114)
    {
      v115 = v114 - (_QWORD)v112;
      v116 = v115 >> 1;
      if ((unint64_t)(v115 >> 1) <= 1)
        v116 = 1;
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v116;
      v118 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 1088, v117);
      v119 = (char *)*((_QWORD *)this + 135);
      v120 = (char *)*((_QWORD *)this + 134);
      v122 = &v118[v121];
      *v118 = 1065353216;
      v113 = (float *)(v118 + 1);
      while (v119 != v120)
      {
        v123 = *((_DWORD *)v119 - 1);
        v119 -= 4;
        *--v118 = v123;
      }
      *((_QWORD *)this + 134) = v118;
      *((_QWORD *)this + 135) = v113;
      *((_QWORD *)this + 136) = v122;
      if (v120)
        operator delete(v120);
    }
    else
    {
      *v112 = 1.0;
      v113 = v112 + 1;
    }
    *((_QWORD *)this + 135) = v113;
    v112 = (float *)*((_QWORD *)this + 134);
  }
  if ((char *)v113 - (char *)v112 == 4 && *v112 != 1.0)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 272), (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  v124 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), "<?>");
  v125 = v124;
  if (v124 != -1)
  {
    *((_DWORD *)this + 133) = v124;
    v126 = *((int *)this + 320);
    if ((_DWORD)v126 && v124 != v126 && quasar::gLogLevel >= 5)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Silence label is set to ", 24);
      v127 = (_QWORD *)std::ostream::operator<<();
      v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" but does not match ", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"the auto-determined silence label ", 34);
      v129 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)". Will use latter.", 18);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v233);
    }
    *((_DWORD *)this + 320) = v125;
  }
  if (*((char *)this + 1143) < 0)
  {
    if (!*((_QWORD *)this + 141))
      goto LABEL_222;
  }
  else if (!*((_BYTE *)this + 1143))
  {
    goto LABEL_222;
  }
  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 1120, 4, 0, (uint64_t *)v233);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1144, (__int128 *)v233);
  v130 = v233[1].__locale_;
  if (v233[1].__locale_)
  {
    v131 = (unint64_t *)((char *)v233[1].__locale_ + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v130 + 16))(v130);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v130);
    }
  }
  if ((*((_DWORD *)this + 538) & 0x80000000) == 0)
  {
    (*(void (**)(std::locale *__return_ptr))(**((_QWORD **)this + 143) + 88))(v233);
    if (SHIBYTE(v233[2].__locale_) < 0)
    {
      if (v233[1].__locale_ != (std::locale::__imp *)7)
      {
        operator delete(v233[0].__locale_);
LABEL_221:
        *((_DWORD *)this + 538) = -1;
        goto LABEL_222;
      }
      v135 = *(_DWORD *)v233[0].__locale_ != 1634492988 || *(_DWORD *)((char *)v233[0].__locale_ + 3) != 1047228001;
      operator delete(v233[0].__locale_);
      if (v135)
        goto LABEL_221;
    }
    else
    {
      if (SHIBYTE(v233[2].__locale_) != 7)
        goto LABEL_221;
      if (LODWORD(v233[0].__locale_) != 1634492988 || *(_DWORD *)((char *)&v233[0].__locale_ + 3) != 1047228001)
        goto LABEL_221;
    }
  }
LABEL_222:
  memset(&v215, 0, sizeof(v215));
  if (*((char *)this + 1207) < 0)
  {
    if (*((_QWORD *)this + 149))
      goto LABEL_224;
  }
  else if (*((_BYTE *)this + 1207))
  {
LABEL_224:
    v249 = 0;
    kaldi::Input::Input(&v207, (char *)this + 1184, &v249);
    __p[0] = 0;
    __p[1] = 0;
    v211[0] = 0;
    v136 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v207);
    std::ios_base::getloc((const std::ios_base *)((char *)v136 + *(_QWORD *)(*v136 - 24)));
    v137 = std::locale::use_facet(v233, MEMORY[0x1E0DE4A90]);
    v138 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v137->__vftable[2].~facet_0)(v137, 10);
    std::locale::~locale(v233);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v136, (uint64_t)__p, v138);
    if ((kaldi::SplitStringToIntegers<int>((uint64_t)__p, ":", 1, &v215) & 1) == 0)
    {
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Invalid silence-phones string ", 30);
      if (v211[0] >= 0)
        v194 = __p;
      else
        v194 = (void **)__p[0];
      if (v211[0] >= 0)
        v195 = HIBYTE(v211[0]);
      else
        v195 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)v194, v195);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
    }
    if (SHIBYTE(v211[0]) < 0)
      operator delete(__p[0]);
    kaldi::Input::~Input((kaldi::Input *)&v207);
    goto LABEL_230;
  }
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)this + 1160, ",", 0, &v215) & 1) == 0)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Invalid silence-phones string ", 30);
    v201 = *((char *)this + 1183);
    if (v201 >= 0)
      v202 = (char *)this + 1160;
    else
      v202 = (char *)*((_QWORD *)this + 145);
    if (v201 >= 0)
      v203 = *((unsigned __int8 *)this + 1183);
    else
      v203 = *((_QWORD *)this + 146);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)v202, v203);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
LABEL_230:
  if (v215.__begin_ == v215.__end_)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"No silence phones given!", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v233, &v215);
  *((_DWORD *)this + 302) = v233[0].__locale_;
  *((std::locale *)this + 152) = v233[1];
  *((_WORD *)this + 612) = v233[2].__locale_;
  std::vector<BOOL>::operator=((void **)this + 154, (uint64_t)&v233[3]);
  if ((std::locale *)((char *)this + 1208) != v233)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 1256, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (v233[3].__locale_)
    operator delete(v233[3].__locale_);
  if (*((char *)this + 1319) < 0)
  {
    if (!*((_QWORD *)this + 163))
      goto LABEL_246;
  }
  else if (!*((_BYTE *)this + 1319))
  {
    goto LABEL_246;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 320, (uint64_t)this + 1296, (uint64_t)this + 1320, (uint64_t *)v233);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1344, (__int128 *)v233);
  v139 = v233[1].__locale_;
  if (v233[1].__locale_)
  {
    v140 = (unint64_t *)((char *)v233[1].__locale_ + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v139 + 16))(v139);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v139);
    }
  }
LABEL_246:
  if (*((char *)this + 1391) < 0)
  {
    if (!*((_QWORD *)this + 172))
      goto LABEL_259;
  }
  else if (!*((_BYTE *)this + 1391))
  {
    goto LABEL_259;
  }
  if (*((char *)this + 1415) < 0)
  {
    if (!*((_QWORD *)this + 175))
      goto LABEL_259;
  }
  else if (!*((_BYTE *)this + 1415))
  {
    goto LABEL_259;
  }
  std::allocate_shared[abi:ne180100]<quasar::LRStreamingConfidence,std::allocator<quasar::LRStreamingConfidence>,std::string &,std::string &,void>(v233);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1416, (__int128 *)v233);
  v142 = v233[1].__locale_;
  if (v233[1].__locale_)
  {
    v143 = (unint64_t *)((char *)v233[1].__locale_ + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v142 + 16))(v142);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v142);
    }
  }
LABEL_259:
  quasar::SystemConfig::Version::Version(v233, 31, 0);
  if (quasar::SystemConfig::Version::operator<((_DWORD *)this + 8, v233))
  {
    if (*((char *)this + 1319) < 0)
      v145 = *((_QWORD *)this + 163);
    else
      v145 = *((unsigned __int8 *)this + 1319);
    *((_BYTE *)this + 1360) = v145 == 0;
  }
  if (*((char *)this + 1455) < 0)
  {
    if (!*((_QWORD *)this + 180))
      goto LABEL_282;
  }
  else if (!*((_BYTE *)this + 1455))
  {
    goto LABEL_282;
  }
  v146 = (_QWORD *)operator new();
  v146[2] = 0;
  v146[1] = 0;
  *v146 = v146 + 1;
  v233[0].__locale_ = 0;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)this + 182, (uint64_t)v146);
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)v233, 0);
  __p[0] = 0;
  __p[1] = 0;
  v211[0] = 0;
  if (*((char *)this + 1455) < 0)
    std::string::__init_copy_ctor_external(&v214, *((const std::string::value_type **)this + 179), *((_QWORD *)this + 180));
  else
    v214 = *(std::string *)((char *)this + 1432);
  VectorVector = kaldi::ReadVectorVectorSimple<int>((uint64_t)&v214, (uint64_t *)__p);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  if (!VectorVector)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Failed to read phone set file: ", 31);
    v197 = *((char *)this + 1455);
    if (v197 >= 0)
      v198 = (char *)this + 1432;
    else
      v198 = (char *)*((_QWORD *)this + 179);
    if (v197 >= 0)
      v199 = *((unsigned __int8 *)this + 1455);
    else
      v199 = *((_QWORD *)this + 180);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)v198, v199);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  v148 = __p[0];
  v149 = __p[1];
  if (__p[1] != __p[0])
  {
    v150 = 0;
    do
    {
      v151 = v148[3 * v150];
      if (v148[3 * v150 + 1] != v151)
      {
        v152 = 0;
        v153 = 0;
        do
        {
          v154 = (uint64_t **)*((_QWORD *)this + 182);
          v207 = (void *)(v151 + v152);
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v154, (int *)(v151 + v152), (uint64_t)&std::piecewise_construct, (unsigned int **)&v207)+ 8) = v150;
          ++v153;
          v148 = __p[0];
          v155 = (uint64_t *)((char *)__p[0] + 24 * v150);
          v151 = *v155;
          v152 += 4;
        }
        while (v153 < (v155[1] - *v155) >> 2);
        v149 = __p[1];
      }
      ++v150;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v149 - (_BYTE *)v148) >> 3) > v150);
  }
  v233[0].__locale_ = (std::locale::__imp *)__p;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
LABEL_282:
  quasar::EndPointDecoderConfig::init((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 1472));
  quasar::EndPointDecoderConfig::init((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 1776));
  if (*((char *)this + 1511) < 0)
  {
    if (*((_QWORD *)this + 187))
      goto LABEL_284;
  }
  else if (*((_BYTE *)this + 1511))
  {
LABEL_284:
    v156 = 1;
    goto LABEL_290;
  }
  if (*((char *)this + 1815) < 0)
    v157 = *((_QWORD *)this + 225);
  else
    v157 = *((unsigned __int8 *)this + 1815);
  v156 = v157 != 0;
LABEL_290:
  if (!*((_QWORD *)this + 168))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    if (v156)
    {
      v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ERROR 1: Cannot compute pause counts - word boundary info is missing", 68);
      std::ios_base::getloc((const std::ios_base *)((char *)v158 + *(_QWORD *)(*v158 - 24)));
      v159 = std::locale::use_facet(v233, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v159->__vftable[2].~facet_0)(v159, 10);
      std::locale::~locale(v233);
      std::ostream::put();
      std::ostream::flush();
    }
    if (!*((_BYTE *)this + 1360))
    {
      v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ERROR 2: autocomplete-partial-result is false (default), but word-boundary-int-file is missing.\nOption 1: Set autocomplete-partial-result=true. This is *usually* done only for 'srch' and 'srch'-variant (WebSearch) decoder chains. This is required if the model doesn't have word-boundary-int-file.\nOption 2: Keep using autocomplete-partial-result=false, but add a word-boundary-int-file. This is *usually* done for all other tasks.", 430);
      std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(_QWORD *)(*v160 - 24)));
      v161 = std::locale::use_facet(v233, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v161->__vftable[2].~facet_0)(v161, 10);
      std::locale::~locale(v233);
      std::ostream::put();
      std::ostream::flush();
    }
    std::stringbuf::str();
    if ((char)v209 < 0)
    {
      if (v208)
        goto LABEL_410;
      operator delete(v207);
    }
    else if (v209)
    {
LABEL_410:
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      *(_OWORD *)__src = 0u;
      v236 = 0u;
      v234 = 0u;
      memset(v233, 0, sizeof(v233));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
      if ((v209 & 0x80u) == 0)
        v204 = &v207;
      else
        v204 = v207;
      if ((v209 & 0x80u) == 0)
        v205 = v209;
      else
        v205 = (uint64_t)v208;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)v204, v205);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
    }
    __p[0] = *(void **)MEMORY[0x1E0DE4F60];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v212 < 0)
      operator delete((void *)v211[7]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v213);
  }
  quasar::SystemConfig::Version::Version(v233, 31, 0);
  if (quasar::SystemConfig::Version::operator>=((_DWORD *)this + 8, v233) && v156 && *((_BYTE *)this + 1360))
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"needPauseCounts=true and autocomplete-partial-result=true is not supported yet.", 79);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
  }
  if (*((_BYTE *)this + 1938))
  {
    if (!*((_QWORD *)this + 168))
    {
      *((_BYTE *)this + 1938) = 0;
      if (quasar::gLogLevel >= 4)
      {
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        v237 = 0u;
        v238 = 0u;
        *(_OWORD *)__src = 0u;
        v236 = 0u;
        v234 = 0u;
        memset(v233, 0, sizeof(v233));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Eager disabled because word-boundary-int-file is missing.", 57);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v233);
      }
    }
  }
  if (*((_BYTE *)this + 1464))
  {
    v163 = *((_QWORD *)this + 53);
    v164 = *(const std::string **)(v163 + 64);
    v165 = *(const std::string **)(v163 + 72);
    if (v164 == v165)
    {
      if (quasar::gLogLevel >= 4)
      {
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        v237 = 0u;
        v238 = 0u;
        *(_OWORD *)__src = 0u;
        v236 = 0u;
        v234 = 0u;
        memset(v233, 0, sizeof(v233));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"VoiceTriggerPhrase not set. This could lead to wrong endpointing that clips any payload after \"Hey Siri\"", 104);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v233);
      }
    }
    else
    {
      v206 = (uint64_t *)((char *)this + 2472);
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v211[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v233, " ");
        quasar::splitAndTrimNoEmpty(v164, (char *)v233, &v207);
        if (SHIBYTE(v233[2].__locale_) < 0)
          operator delete(v233[0].__locale_);
        v167 = (uint64_t *)v207;
        v166 = v208;
        if (v207 == v208)
        {
          v171 = __p[1];
        }
        else
        {
          do
          {
            v168 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)v167);
            v169 = v168;
            if (v168 == -1)
            {
              v247 = 0u;
              v248 = 0u;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              v241 = 0u;
              v242 = 0u;
              v239 = 0u;
              v240 = 0u;
              v237 = 0u;
              v238 = 0u;
              *(_OWORD *)__src = 0u;
              v236 = 0u;
              v234 = 0u;
              memset(v233, 0, sizeof(v233));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
              v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"VoiceTrigger phrase word \"", 26);
              v189 = *((char *)v167 + 23);
              if (v189 >= 0)
                v190 = (uint64_t)v167;
              else
                v190 = *v167;
              if (v189 >= 0)
                v191 = *((unsigned __int8 *)v167 + 23);
              else
                v191 = v167[1];
              v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, v190, v191);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"\" not found in symbol table.", 28);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v233);
            }
            v170 = (char *)__p[1];
            if (__p[1] >= (void *)v211[0])
            {
              v172 = (char *)__p[0];
              v173 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v175 = v211[0] - (unint64_t)__p[0];
              if ((uint64_t)(v211[0] - (unint64_t)__p[0]) >> 1 > v174)
                v174 = v175 >> 1;
              if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
                v176 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v176 = v174;
              if (v176)
              {
                v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v211, v176);
                v172 = (char *)__p[0];
                v170 = (char *)__p[1];
              }
              else
              {
                v177 = 0;
              }
              v178 = &v177[4 * v173];
              *(_DWORD *)v178 = v169;
              v171 = v178 + 4;
              while (v170 != v172)
              {
                v179 = *((_DWORD *)v170 - 1);
                v170 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              __p[0] = v178;
              __p[1] = v171;
              v211[0] = &v177[4 * v176];
              if (v172)
                operator delete(v172);
            }
            else
            {
              *(_DWORD *)__p[1] = v168;
              v171 = v170 + 4;
            }
            __p[1] = v171;
            v167 += 3;
          }
          while (v167 != v166);
        }
        if (v171 != __p[0])
        {
          v180 = *((_QWORD *)this + 310);
          if (v180 >= *((_QWORD *)this + 311))
          {
            v181 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v206, (uint64_t)__p);
          }
          else
          {
            std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v206, (uint64_t)__p);
            v181 = v180 + 24;
          }
          *((_QWORD *)this + 310) = v181;
        }
        v233[0].__locale_ = (std::locale::__imp *)&v207;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v164;
      }
      while (v164 != v165);
    }
  }
  if (*((_BYTE *)this + 808))
    quasar::OnlineLatticeBiglmFasterDecoder::loadDynamicClassTagDict(this, v162);
  v182 = quasar::gLogLevel;
  if (quasar::gLogLevel > 4)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Decoding beam: ", 15);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v233);
    v182 = quasar::gLogLevel;
  }
  if (v182 >= 4)
  {
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    v237 = 0u;
    v238 = 0u;
    *(_OWORD *)__src = 0u;
    v236 = 0u;
    v234 = 0u;
    memset(v233, 0, sizeof(v233));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v233);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Finished initializing OnlineLatticeBiglmFasterDecoder.", 54);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v233);
  }
  if (v215.__begin_)
  {
    v215.__end_ = v215.__begin_;
    operator delete(v215.__begin_);
  }
  if (v216)
  {
    v217 = (char *)v216;
    operator delete(v216);
  }
  if (v219[0])
  {
    v219[1] = v219[0];
    operator delete(v219[0]);
  }
  v233[0].__locale_ = (std::locale::__imp *)&v221;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
  v183 = v255;
  if (v255 == v254)
  {
    v184 = 4;
    v183 = v254;
    goto LABEL_362;
  }
  if (v255)
  {
    v184 = 5;
LABEL_362:
    (*(void (**)(void))(*v183 + 8 * v184))();
  }
  v233[0].__locale_ = (std::locale::__imp *)&v224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
  v185 = (std::__shared_weak_count *)v230;
  if (v230)
  {
    v186 = (unint64_t *)((char *)v230 + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
}

void sub_1ADB38BB4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB38C90);
}

void sub_1ADB38BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a71;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;

  STACK[0x210] = (unint64_t)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  __p = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v73 = *(_QWORD **)(v71 - 112);
  if (v73 == (_QWORD *)(v71 - 136))
  {
    v74 = 4;
    v73 = (_QWORD *)(v71 - 136);
  }
  else
  {
    if (!v73)
      goto LABEL_14;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_14:
  __p = &a66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  _Unwind_Resume(a1);
}

uint64_t fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t result, float a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  if (a2 == 1.0)
    return result;
  v3 = result;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 128))(result, &v9);
  while (1)
  {
    result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10)
        return result;
LABEL_9:
      v5 = v11;
      goto LABEL_10;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = v9;
    if (v4)
      break;
    if (!v9)
      goto LABEL_9;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 296))(v3, v5, &v8);
    while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
    {
      v7 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      *((float *)&v7 + 2) = *((float *)&v7 + 2) * a2;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 88))(v8, &v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    }
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5);
    LODWORD(v8) = 2139095040;
    if (*(float *)&v7 != INFINITY)
    {
      v6 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v3 + 184))(v3, v5, v6 * a2);
    }
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
  }
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void sub_1ADB38E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t kaldi::ReadVectorVectorSimple<int>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::locale::__imp *v4;
  uint64_t v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::locale::__imp *v24;
  int v25;
  std::locale v26;
  uint64_t v27;
  void *__p;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  std::string v34;
  _QWORD v35[2];

  v35[0] = 0;
  if ((kaldi::Input::OpenInternal(v35, a1, 0, 0) & 1) != 0)
  {
    v3 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v35);
    std::vector<std::vector<int>>::__clear[abi:ne180100](a2);
    memset(&v34, 0, sizeof(v34));
    v4 = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
    v24 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
    v5 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
      v6 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
      v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale(&v26);
      v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, (uint64_t)&v34, v7);
      if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
        break;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::istringstream::basic_istringstream[abi:ne180100](&v26, &v34, 8);
      v25 = 0;
      while (1)
      {
        v9 = (_QWORD *)MEMORY[0x1AF44CB18](&v26, &v25);
        if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
          break;
        v10 = v32;
        if (v32 >= v33)
        {
          v12 = v31;
          v13 = (v32 - v31) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v33 - v31;
          if ((v33 - v31) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v16);
            v12 = v31;
            v10 = v32;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v25;
          v11 = v18 + 4;
          while (v10 != v12)
          {
            v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v31 = v18;
          v32 = v11;
          v33 = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v32 = v25;
          v11 = v10 + 4;
        }
        v32 = v11;
      }
      v20 = a2[1];
      if (v20 >= a2[2])
      {
        v21 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)&v31);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)&v31);
        v21 = v20 + 24;
      }
      a2[1] = v21;
      v26.__locale_ = v4;
      *(std::locale::__imp **)((char *)&v26.__locale_ + *((_QWORD *)v4 - 3)) = v24;
      v27 = v5;
      if (v29 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1AF44D094](&v30);
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
    }
    v22 = (*((unsigned __int8 *)v3 + *(_QWORD *)(*v3 - 24) + 32) >> 1) & 1;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = 0;
  }
  kaldi::Input::~Input((kaldi::Input *)v35);
  return v22;
}

void sub_1ADB39210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  uint64_t v13;

  kaldi::Input::~Input((kaldi::Input *)(v13 - 96));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::loadDynamicClassTagDict(quasar::OnlineLatticeBiglmFasterDecoder *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  uint64_t v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  size_t v16;
  std::string *p_p;
  const void *v18;
  const void **v19;
  size_t v20;
  void *v21;
  const void *v22;
  int v23;
  std::locale::__imp *locale;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  std::locale::__imp *v31;
  int v32;
  uint64_t v33;
  int v34;
  std::locale::__imp *v35;
  std::string::size_type size;
  std::string *v37;
  uint64_t v38;
  int v39;
  int v40;
  std::locale::__imp *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unsigned __int8 v80;
  int v81;
  int v82;
  std::string __p;
  std::locale v84[2];
  __int128 v85;
  void *v86[4];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100[8];
  _BYTE v101[32];
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[32];
  int v110;
  _BYTE v111[32];
  int v112;
  __int128 __s;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v130 = *MEMORY[0x1E0C80C00];
  memset(v111, 0, sizeof(v111));
  v112 = 1065353216;
  memset(v109, 0, sizeof(v109));
  v110 = 1065353216;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  kaldi::SplitStringToVector((const std::string *)(v2 + 816), ",", 1, (uint64_t)&v106);
  kaldi::SplitStringToVector((const std::string *)(v2 + 848), ",", 1, (uint64_t)&v103);
  memset(v101, 0, sizeof(v101));
  v102 = 1065353216;
  if ((*(char *)(v2 + 895) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v2 + 895))
      goto LABEL_3;
LABEL_106:
    v128 = 0uLL;
    v129 = 0uLL;
    v126 = 0uLL;
    v127 = 0uLL;
    v124 = 0uLL;
    v125 = 0uLL;
    v122 = 0uLL;
    v123 = 0uLL;
    v120 = 0uLL;
    v121 = 0uLL;
    v118 = 0uLL;
    v119 = 0uLL;
    v116 = 0uLL;
    v117 = 0uLL;
    v114 = 0uLL;
    v115 = 0uLL;
    __s = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"The dyanamic classlm tag prior file name is empty", 49);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
  }
  if (!*(_QWORD *)(v2 + 880))
    goto LABEL_106;
LABEL_3:
  kaldi::Input::Input(v100, v2 + 872, 0);
  v3 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v100);
  v4 = *(_QWORD *)(*v3 - 24);
  if (*(_DWORD *)((char *)v3 + v4 + 32))
  {
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    __s = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"SymbolTable::ReadText: Can't open dyanamic classlm tag file ", 60);
    v75 = *(char *)(v2 + 895);
    if (v75 >= 0)
      v76 = v2 + 872;
    else
      v76 = *(_QWORD *)(v2 + 872);
    if (v75 >= 0)
      v77 = *(unsigned __int8 *)(v2 + 895);
    else
      v77 = *(_QWORD *)(v2 + 880);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
  }
  v5 = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  v6 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
  v7 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + v4));
    v8 = std::locale::use_facet(v84, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v84);
    v9 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&__s);
    std::istringstream::basic_istringstream[abi:ne180100](v84, &__p, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v84, (uint64_t)&__p);
    v10 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 2176), (uint64_t)&__p);
    v82 = 0;
    MEMORY[0x1AF44CB0C](v84, &v82);
    v11 = v82;
    v81 = v10;
    v78 = &v81;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v101, &v81, (uint64_t)&std::piecewise_construct, (_DWORD **)&v78)+ 5) = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v84[0].__locale_ = v5;
    *(std::locale::__imp **)((char *)&v84[0].__locale_ + *((_QWORD *)v5 - 3)) = v6;
    *(_QWORD *)&v85 = v7;
    if (SBYTE7(v89) < 0)
      operator delete((void *)v88);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1AF44D094]((char *)&v90 + 8);
    v4 = *(_QWORD *)(*v3 - 24);
  }
  if (v107 != v106)
  {
    v12 = 0;
    if ((unint64_t)((v107 - v106) / 24) <= 1)
      v13 = 1;
    else
      v13 = (v107 - v106) / 24;
    do
    {
      v14 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 2176), v106 + 24 * v12);
      if (v14 == -1)
      {
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(v86, 0, sizeof(v86));
        *(_OWORD *)&v84[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not find \"", 16);
        v61 = v106 + 24 * v12;
        v62 = *(char *)(v61 + 23);
        if (v62 >= 0)
          v63 = v106 + 24 * v12;
        else
          v63 = *(_QWORD *)v61;
        if (v62 >= 0)
          v64 = *(unsigned __int8 *)(v61 + 23);
        else
          v64 = *(_QWORD *)(v61 + 8);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v84);
      }
      v15 = (const void **)(v106 + 24 * v12);
      if (*((char *)v15 + 23) >= 0)
        v16 = *((unsigned __int8 *)v15 + 23);
      else
        v16 = (size_t)v15[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v16 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if (*((char *)v15 + 23) >= 0)
          v18 = v15;
        else
          v18 = *v15;
        memmove(p_p, v18, v16);
      }
      strcpy((char *)p_p + v16, "-start");
      v19 = (const void **)(v106 + 24 * v12);
      if (*((char *)v19 + 23) >= 0)
        v20 = *((unsigned __int8 *)v19 + 23);
      else
        v20 = (size_t)v19[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v78, v20 + 4);
      if ((v80 & 0x80u) == 0)
        v21 = &v78;
      else
        v21 = v78;
      if (v20)
      {
        if (*((char *)v19 + 23) >= 0)
          v22 = v19;
        else
          v22 = *v19;
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "-end");
      v23 = v14 + 1;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 2176), v84);
      if ((SBYTE7(v85) & 0x80u) == 0)
        locale = (std::locale::__imp *)BYTE7(v85);
      else
        locale = v84[1].__locale_;
      v25 = v80;
      if ((v80 & 0x80u) != 0)
        v25 = v79;
      if (locale == (std::locale::__imp *)v25)
      {
        if ((v80 & 0x80u) == 0)
          v26 = (unsigned __int8 *)&v78;
        else
          v26 = (unsigned __int8 *)v78;
        if ((BYTE7(v85) & 0x80) != 0)
        {
          v31 = v84[0].__locale_;
          v32 = memcmp(v84[0].__locale_, v26, (size_t)v84[1].__locale_);
          operator delete(v31);
          if (!v32)
            goto LABEL_63;
        }
        else
        {
          if (!BYTE7(v85))
            goto LABEL_63;
          v27 = 0;
          do
          {
            v28 = *((unsigned __int8 *)&v84[0].__locale_ + v27);
            v29 = v26[v27];
          }
          while (v28 == v29 && BYTE7(v85) - 1 != v27++);
          if (v28 == v29)
            goto LABEL_63;
        }
      }
      else if ((BYTE7(v85) & 0x80) != 0)
      {
        operator delete(v84[0].__locale_);
      }
      v33 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 2176), (uint64_t)&v78);
      v23 = v33;
      if (v33 == -1)
      {
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(v86, 0, sizeof(v86));
        *(_OWORD *)&v84[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not find \"", 16);
        if ((v80 & 0x80u) == 0)
          v71 = &v78;
        else
          v71 = v78;
        if ((v80 & 0x80u) == 0)
          v72 = v80;
        else
          v72 = v79;
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v84);
      }
LABEL_63:
      v34 = v14 + 2;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 2176), v84);
      if ((SBYTE7(v85) & 0x80u) == 0)
        v35 = (std::locale::__imp *)BYTE7(v85);
      else
        v35 = v84[1].__locale_;
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v35 != (std::locale::__imp *)size)
      {
        if ((BYTE7(v85) & 0x80) != 0)
          operator delete(v84[0].__locale_);
LABEL_85:
        v44 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 2176), (uint64_t)&__p);
        v34 = v44;
        if (v44 == -1)
        {
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v87 = 0u;
          v85 = 0u;
          memset(v86, 0, sizeof(v86));
          *(_OWORD *)&v84[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not find \"", 16);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &__p;
          else
            v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v68 = __p.__r_.__value_.__l.__size_;
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v84);
        }
        goto LABEL_86;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((BYTE7(v85) & 0x80) != 0)
      {
        v42 = v84[0].__locale_;
        v43 = memcmp(v84[0].__locale_, v37, (size_t)v84[1].__locale_);
        operator delete(v42);
        if (v43)
          goto LABEL_85;
      }
      else if (BYTE7(v85))
      {
        v38 = 0;
        do
        {
          v39 = *((unsigned __int8 *)&v84[0].__locale_ + v38);
          v40 = v37->__r_.__value_.__s.__data_[v38];
        }
        while (v39 == v40 && BYTE7(v85) - 1 != v38++);
        if (v39 != v40)
          goto LABEL_85;
      }
LABEL_86:
      v82 = v14;
      v84[0].__locale_ = (std::locale::__imp *)&v82;
      v45 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v111, &v82, (uint64_t)&std::piecewise_construct, v84);
      *((_DWORD *)v45 + 5) = v34;
      *((_DWORD *)v45 + 6) = v23;
      if ((char)v80 < 0)
        operator delete(v78);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (v12 != v13);
  }
  if (v104 != v103)
  {
    v46 = 0;
    if ((unint64_t)((v104 - v103) / 24) <= 1)
      v47 = 1;
    else
      v47 = (v104 - v103) / 24;
    do
    {
      v48 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 2176), v103 + v46);
      if (v48 == -1)
      {
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(v86, 0, sizeof(v86));
        *(_OWORD *)&v84[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not find \"", 16);
        v56 = *(char *)(v106 + v46 + 23);
        if (v56 >= 0)
          v57 = v106 + v46;
        else
          v57 = *(_QWORD *)(v106 + v46);
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(v106 + v46 + 23);
        else
          v58 = *(_QWORD *)(v106 + v46 + 8);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v84);
      }
      LODWORD(v84[0].__locale_) = v48;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v109, (int *)v84, v84);
      v46 += 24;
      --v47;
    }
    while (v47);
  }
  kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict((uint64_t)v84, (uint64_t)v111, (uint64_t)v101, (uint64_t)v109);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(v2 + 896, (uint64_t *)v84);
  v49 = (_QWORD *)(v2 + 936);
  v50 = *(void **)(v2 + 936);
  if (v50)
  {
    *(_QWORD *)(v2 + 944) = v50;
    operator delete(v50);
    *v49 = 0;
    *(_QWORD *)(v2 + 944) = 0;
    *(_QWORD *)(v2 + 952) = 0;
  }
  *(_OWORD *)v49 = *(_OWORD *)&v86[1];
  *(void **)(v2 + 952) = v86[3];
  memset(&v86[1], 0, 24);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(v2 + 960, (uint64_t *)&v87);
  v51 = *((_QWORD *)&v89 + 1);
  *((_QWORD *)&v89 + 1) = 0;
  v52 = *(_QWORD *)(v2 + 1000);
  *(_QWORD *)(v2 + 1000) = v51;
  if (v52)
  {
    MEMORY[0x1AF44D160](v52, 0x1000C8052888210);
    v53 = *((_QWORD *)&v89 + 1);
    *((_QWORD *)&v89 + 1) = 0;
    if (v53)
      MEMORY[0x1AF44D160](v53, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v87);
  if (v86[1])
  {
    v86[2] = v86[1];
    operator delete(v86[1]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v84);
  kaldi::Input::~Input((kaldi::Input *)v100);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v101);
  *(_QWORD *)&__s = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(_QWORD *)&__s = &v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v109);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v111);
}

void sub_1ADB39D50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  JUMPOUT(0x1ADB39DDCLL);
}

void sub_1ADB39D70(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB39E1CLL);
}

void sub_1ADB39D84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a20);
  JUMPOUT(0x1ADB39DDCLL);
}

void sub_1ADB39DC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  JUMPOUT(0x1ADB39DDCLL);
}

void sub_1ADB39DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  char a66;
  char a72;

  kaldi::Input::~Input((kaldi::Input *)&a52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a54);
  STACK[0x220] = (unint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a66);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::writeRecordedStateAccesses(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *p_str;
  char *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *v14;
  pid_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  void *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  BOOL v48;
  _QWORD v49[2];
  std::runtime_error v50;
  _BYTE v51[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  void *v69;
  _BYTE v70[15];
  unsigned __int8 v71;
  void *v72;
  std::__shared_weak_count *v73;
  std::string __str;
  const void *v75;
  std::__shared_weak_count *v76;
  _QWORD v77[5];

  v77[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 2300) || *(_BYTE *)(a1 + 440))
  {
    v3 = *(__int128 **)(a1 + 1048);
    v4 = (__int128 *)(a1 + 1056);
    if (v3 != (__int128 *)(a1 + 1056))
    {
      while (1)
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__str, v3 + 2);
        if (v75)
        {
          if (v5)
            break;
        }
LABEL_85:
        v43 = v76;
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v46 = (__int128 *)*((_QWORD *)v3 + 1);
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = *(__int128 **)v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (__int128 *)*((_QWORD *)v3 + 2);
            v48 = *(_QWORD *)v47 == (_QWORD)v3;
            v3 = v47;
          }
          while (!v48);
        }
        v3 = v47;
        if (v47 == v4)
          return;
      }
      v72 = v5;
      v73 = v76;
      if (v76)
      {
        v6 = (unint64_t *)&v76->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      std::string::basic_string[abi:ne180100]<0>(&v69, "");
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(_QWORD *)(a2 + 8))
        {
LABEL_11:
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __str.__r_.__value_.__l.__size_;
          else
            p_str = &__str;
          v10 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
          while (size)
          {
            v11 = v10[size--];
            if (v11 == 47)
              goto LABEL_45;
          }
          size = -1;
LABEL_45:
          std::string::basic_string((std::string *)v51, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v68);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, (uint64_t)&v67);
          if (v51[23] >= 0)
            v24 = v51;
          else
            v24 = *(const std::string::value_type **)v51;
          if (v51[23] >= 0)
            v25 = v51[23];
          else
            v25 = *(_QWORD *)&v51[8];
          v26 = std::string::append(&v67, v24, v25);
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v68.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = std::string::append(&v68, ".recorded_state_accesses");
          v29 = (void *)v28->__r_.__value_.__r.__words[0];
          v77[0] = v28->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if ((char)v71 < 0)
            operator delete(v69);
          v69 = v29;
          *(_QWORD *)v70 = v77[0];
          *(_QWORD *)&v70[7] = *(_QWORD *)((char *)v77 + 7);
          v71 = v30;
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          if ((v51[23] & 0x80000000) == 0)
            goto LABEL_60;
          v23 = *(void **)v51;
          goto LABEL_59;
        }
      }
      else if (*(_BYTE *)(a2 + 23))
      {
        goto LABEL_11;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v12 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v68, v12 + 1);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v68;
      else
        v13 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__str;
        else
          v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 46;
      v15 = getpid();
      std::to_string(&v67, v15);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v67;
      else
        v16 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      else
        v17 = v67.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v68, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(_QWORD *)&v51[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)v51 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append((std::string *)v51, ".recorded_state_accesses");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v77[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if ((char)v71 < 0)
        operator delete(v69);
      v69 = v21;
      *(_QWORD *)v70 = v77[0];
      *(_QWORD *)&v70[7] = *(_QWORD *)((char *)v77 + 7);
      v71 = v22;
      if ((v51[23] & 0x80000000) != 0)
        operator delete(*(void **)v51);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
      v23 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_59:
      operator delete(v23);
LABEL_60:
      if (quasar::filesystem::exists((char *)&v69))
      {
        if (quasar::gLogLevel >= 1)
        {
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v52 = 0u;
          memset(v51, 0, sizeof(v51));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"State access file [", 19);
          if ((v71 & 0x80u) == 0)
            v32 = &v69;
          else
            v32 = (void **)v69;
          if ((v71 & 0x80u) == 0)
            v33 = v71;
          else
            v33 = *(_QWORD *)v70;
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] exists", 8);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v51);
        }
        std::runtime_error::runtime_error(&v50, "State access file exists - not overwriting");
        std::runtime_error::~runtime_error(&v50);
      }
      v35 = v76;
      v49[0] = v75;
      v49[1] = v76;
      if (v76)
      {
        v36 = (unint64_t *)&v76->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      quasar::writeRecordedStateAccessForFst((uint64_t)v49, (uint64_t)&__str, (uint64_t)&v69);
      if (v35)
      {
        v38 = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((char)v71 < 0)
        operator delete(v69);
      v40 = v73;
      if (v73)
      {
        v41 = (unint64_t *)&v73->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      goto LABEL_85;
    }
  }
}

void sub_1ADB3A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v18 - 225) < 0)
    operator delete(*(void **)(v18 - 248));
  if (*(char *)(v18 - 201) < 0)
    operator delete(*(void **)(v18 - 224));
  if (*(char *)(v18 - 177) < 0)
    operator delete(*(void **)(v18 - 200));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18 - 176);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(v18 - 160);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStates(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  __int128 *v1;
  char *v2;
  quasar::StateAccessRecordingFst *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v17;

  if (*((_BYTE *)this + 2300) || *((_BYTE *)this + 440))
  {
    v1 = (__int128 *)*((_QWORD *)this + 131);
    v2 = (char *)this + 1056;
    if (v1 != (__int128 *)((char *)this + 1056))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            v4 = v17;
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v6 = __ldxr(p_shared_owners);
              while (__stxr(v6 + 1, p_shared_owners));
            }
            quasar::StateAccessRecordingFst::ResetAccessedStates(v3);
            if (v4)
            {
              v7 = (unint64_t *)&v4->__shared_owners_;
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 - 1, v7));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
            }
          }
        }
        v9 = v17;
        if (v17)
        {
          v10 = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)*((_QWORD *)v1 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(__int128 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (__int128 *)*((_QWORD *)v1 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v1;
            v1 = v13;
          }
          while (!v14);
        }
        v1 = v13;
      }
      while (v13 != (__int128 *)v2);
    }
  }
}

void sub_1ADB3A5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStatesCounts(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  __int128 *v1;
  char *v2;
  quasar::StateAccessRecordingFst *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v17;

  if (*((_BYTE *)this + 2300) || *((_BYTE *)this + 440))
  {
    v1 = (__int128 *)*((_QWORD *)this + 131);
    v2 = (char *)this + 1056;
    if (v1 != (__int128 *)((char *)this + 1056))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            v4 = v17;
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v6 = __ldxr(p_shared_owners);
              while (__stxr(v6 + 1, p_shared_owners));
            }
            quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(v3);
            if (v4)
            {
              v7 = (unint64_t *)&v4->__shared_owners_;
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 - 1, v7));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
            }
          }
        }
        v9 = v17;
        if (v17)
        {
          v10 = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)*((_QWORD *)v1 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(__int128 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (__int128 *)*((_QWORD *)v1 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v1;
            v1 = v13;
          }
          while (!v14);
        }
        v1 = v13;
      }
      while (v13 != (__int128 *)v2);
    }
  }
}

void sub_1ADB3A750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t *v14;
  uint64_t *j;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  std::string v61;
  __int128 v62;
  void *v63;
  std::__shared_weak_count *v64;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v67;
  __int128 v68;

  v6 = a1 + 1208;
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 1208);
  v7 = a2 + 96;
  v8 = *(_QWORD *)(a1 + 1216);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 1224);
  *(_QWORD *)(a2 + 104) = v8;
  std::vector<BOOL>::operator=((void **)(a2 + 120), a1 + 1232);
  if (v7 != v6)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 144), *(char **)(a1 + 1256), *(_QWORD *)(a1 + 1264), (uint64_t)(*(_QWORD *)(a1 + 1264) - *(_QWORD *)(a1 + 1256)) >> 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(a1 + 1144));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 184), (uint64_t *)(a1 + 1144));
  *(_DWORD *)(a2 + 848) = *(_DWORD *)(a1 + 2152);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 216), (uint64_t *)(a1 + 1344));
  v9 = *(_QWORD *)(a1 + 1280);
  *(_BYTE *)(a2 + 208) = *(_BYTE *)(a1 + 1288);
  *(_QWORD *)(a2 + 200) = v9;
  v10 = *(_QWORD *)(a1 + 2176);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 112))(*(_QWORD *)(v10 + 96));
  if ((v11 & 0x8000000000000000) == 0)
    v11 += *(_QWORD *)(v10 + 120);
  *(_DWORD *)(a2 + 448) = v11;
  *(_QWORD *)(a2 + 688) = *(unsigned int *)(a1 + 2144);
  if (a2 + 696 != a1 + 2104)
  {
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a1 + 2136);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a2 + 696), *(uint64_t **)(a1 + 2120), 0);
  }
  v12 = *(_QWORD *)(a2 + 248);
  *(_WORD *)(a2 + 664) = *(_WORD *)(a1 + 2149);
  for (i = *(_QWORD *)(a2 + 256);
        i != v12;
  *(_QWORD *)(a2 + 256) = v12;
  v14 = *(uint64_t **)(a1 + 2224);
  for (j = *(uint64_t **)(a1 + 2232); v14 != j; v14 += 2)
  {
    v16 = v14[1];
    *(_QWORD *)&v68 = *v14;
    *((_QWORD *)&v68 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    if (*(_BYTE *)(a1 + 2300) || *(_BYTE *)(a1 + 440))
    {
      v19 = *v14;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v19, (uint64_t)&__p, &lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (lpsrc)
      {
        if (v20)
        {
          v21 = (uint64_t)v20;
          v63 = v20;
          v64 = v67;
          if (v67)
          {
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v23 = __ldxr(p_shared_owners);
            while (__stxr(v23 + 1, p_shared_owners));
          }
          quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(*v14, &__p);
          quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*v14, &v61);
          quasar::StateAccessRecordingFst::getWrappedFst(v21, &v59);
          std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((__int128 *)&__p, (uint64_t)&v61, &v59, &v62);
          v24 = v62;
          v62 = 0uLL;
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
          v68 = v24;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1))
          {
            v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = v60;
          if (v60)
          {
            v32 = (unint64_t *)&v60->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v34 = v64;
          if (v64)
          {
            v35 = (unint64_t *)&v64->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
      }
      v37 = v67;
      if (v67)
      {
        v38 = (unint64_t *)&v67->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(a2 + 248), &v68);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (a2 + 272 != a1 + 2272)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(a2 + 272, *(uint64_t **)(a1 + 2272), *(uint64_t **)(a1 + 2280), (uint64_t)(*(_QWORD *)(a1 + 2280) - *(_QWORD *)(a1 + 2272)) >> 4);
  v43 = (void **)(a2 + 296);
  if (a2 + 296 != a1 + 1072)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 296), *(char **)(a1 + 1072), *(_QWORD *)(a1 + 1080), (uint64_t)(*(_QWORD *)(a1 + 1080) - *(_QWORD *)(a1 + 1072)) >> 2);
  if (*(float *)(a1 + 2296) > 0.0)
  {
    v44 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    v45 = *(_QWORD *)(v44 + 272);
    v46 = *(_QWORD *)(v44 + 280);
    if (v45 != v46)
    {
      v47 = (_QWORD *)(a2 + 312);
      v48 = *(char **)(a2 + 304);
      do
      {
        v49 = *(_DWORD *)(*(_QWORD *)v45 + 12);
        if ((unint64_t)v48 >= *v47)
        {
          v51 = (char *)*v43;
          v52 = (v48 - (_BYTE *)*v43) >> 2;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v54 = *v47 - (_QWORD)v51;
          if (v54 >> 1 > v53)
            v53 = v54 >> 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v55 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 312, v55);
            v51 = *(char **)(a2 + 296);
            v48 = *(char **)(a2 + 304);
          }
          else
          {
            v56 = 0;
          }
          v57 = &v56[4 * v52];
          *(_DWORD *)v57 = v49;
          v50 = v57 + 4;
          while (v48 != v51)
          {
            v58 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v57 - 1) = v58;
            v57 -= 4;
          }
          *(_QWORD *)(a2 + 296) = v57;
          *(_QWORD *)(a2 + 304) = v50;
          *(_QWORD *)(a2 + 312) = &v56[4 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *(_DWORD *)v48 = v49;
          v50 = v48 + 4;
        }
        *(_QWORD *)(a2 + 304) = v50;
        v45 += 16;
        v48 = v50;
      }
      while (v45 != v46);
    }
  }
}

void sub_1ADB3AC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  _QWORD **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *i;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *j;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  float *v53;
  void *__p[2];
  __int128 v55;
  int v56;
  _QWORD **v57;
  _QWORD *v58[2];
  void *v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  int v64;
  const void *v65;
  std::__shared_weak_count *v66;
  void **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a4);
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*(_QWORD *)a3 + 472));
  v7 = *(uint64_t **)(*(_QWORD *)a3 + 472);
  v53 = (float *)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 2184);
  v75 = *(_QWORD *)(a1 + 2176);
  v76 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(v7, &v75, 0, -1);
  v11 = v76;
  if (v76)
  {
    v12 = (unint64_t *)&v76->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (char *)operator new(0x48uLL);
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &unk_1E5D420C8;
  *((_QWORD *)v14 + 1) = 0;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *((_QWORD *)&v62 + 1) = v14;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_QWORD *)&v62 = v14 + 24;
  v15 = (_QWORD **)(a1 + 2408);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2408, &v62);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v51 = a3;
  v19 = *(uint64_t **)(a1 + 2224);
  v20 = *(uint64_t **)(a1 + 2232);
  if (v19 != v20)
  {
    v21 = *(_DWORD *)(a1 + 48);
    if (!v21)
      v21 = 0x20000;
    v22 = v21;
    do
    {
      v23 = *v15;
      v24 = *(_DWORD *)(a2 + 448);
      v25 = *v19;
      std::string::basic_string[abi:ne180100]<0>(__p, "location-specific component not supported in OnlineLatticeBiglmFasterDecoder");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v25, (uint64_t)__p, &v73);
      LODWORD(v62) = v24;
      *((_QWORD *)&v62 + 1) = v73;
      *(_QWORD *)&v63 = v74;
      if (v74)
      {
        v26 = (unint64_t *)&v74->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      DWORD2(v63) = -1;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v28 = *(_QWORD *)(a2 + 216);
      if (v28)
      {
        std::set<int>::set[abi:ne180100]((uint64_t *)&v67, v28 + 32);
      }
      else
      {
        v68 = 0;
        v69 = 0;
        v67 = (void **)&v68;
      }
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v23, (unsigned int *)&v62, (uint64_t *)&v70, 0, 0, 0x40000000, v22, (uint64_t)&v67);
      std::__tree<int>::destroy((uint64_t)&v67, v68);
      v67 = (void **)&v70;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v67);
      v29 = (std::__shared_weak_count *)v63;
      if ((_QWORD)v63)
      {
        v30 = (unint64_t *)(v63 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v74;
      if (v74)
      {
        v33 = (unint64_t *)&v74->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (SBYTE7(v55) < 0)
        operator delete(__p[0]);
      v19 += 2;
    }
    while (v19 != v20);
  }
  v35 = *(uint64_t **)(a1 + 2272);
  for (i = *(uint64_t **)(a1 + 2280); v35 != i; v35 += 2)
  {
    v37 = *v15;
    v38 = *v35;
    std::string::basic_string[abi:ne180100]<0>(&v70, "location-specific component not supported in OnlineLatticeBiglmFasterDecoder");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v38, (uint64_t)&v70, &v65);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v62 = 0u;
    v63 = 0u;
    v64 = 1065353216;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v58[0] = 0;
    v58[1] = 0;
    v57 = v58;
    v39 = (unint64_t)v53[576];
    *(_OWORD *)__p = 0u;
    v55 = 0u;
    v56 = 1065353216;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v37, v65, (unsigned int **)&v67, &v62, (__int32 **)&v59, (uint64_t)&v57, 0, 0, -1.0, 0, v39, (uint64_t)__p);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
    std::__tree<int>::destroy((uint64_t)&v57, v58[0]);
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v62);
    *(_QWORD *)&v62 = &v67;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    v40 = v66;
    if (v66)
    {
      v41 = (unint64_t *)&v66->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SHIBYTE(v72) < 0)
      operator delete(v70);
  }
  if (v53[574] > 0.0)
  {
    v43 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v44 = *(uint64_t **)(v43 + 272);
    for (j = *(uint64_t **)(v43 + 280); v44 != j; v44 += 2)
    {
      v46 = *v44;
      v47 = *v15;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v55 = 0;
      v48 = *(unsigned int *)(a2 + 448);
      v49 = *(_QWORD *)(a2 + 216);
      if (v49)
      {
        std::set<int>::set[abi:ne180100]((uint64_t *)&v70, v49 + 32);
      }
      else
      {
        v71 = 0;
        v72 = 0;
        v70 = &v71;
      }
      v62 = 0u;
      v63 = 0u;
      v64 = 1065353216;
      (*(void (**)(uint64_t, _QWORD *, void **, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD ***, __int128 *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v47, __p, v48, 0, 0, 0x40000000, &v70, &v62, 0x20000);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v62);
      std::__tree<int>::destroy((uint64_t)&v70, v71);
      *(_QWORD *)&v62 = __p;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    }
  }
  return (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 192))(v53, a2, v51, a4);
}

void sub_1ADB3B2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v32 - 104);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::runImpl(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  const std::string::value_type *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string v22;
  void *__p[2];
  std::string::size_type v24;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 216))(a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, a3, a4);
  for (i = 3;
        (_DWORD)i == 3;
        i = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3, a4, a5))
  {
    ;
  }
  if ((_DWORD)i == 4)
    i = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2, a3, a4);
  if (a1[440])
  {
    v11 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    if (*(char *)(v11 + 535) < 0)
    {
      if (!*(_QWORD *)(v11 + 520))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(v11 + 535))
    {
      goto LABEL_21;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v11 + 512), 47, (uint64_t)&v22);
    v12 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v15 = *(const std::string::value_type **)(v12 + 128);
    v13 = v12 + 128;
    v14 = v15;
    v16 = *(char *)(v13 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v13;
    else
      v17 = v14;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v13 + 23);
    else
      v18 = *(_QWORD *)(v13 + 8);
    v19 = std::string::append(&v22, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v24 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    quasar::filesystem::create_directories((char *)__p);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 40))(a1, __p);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }
LABEL_21:
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 216))(a1);
  return i;
}

void sub_1ADB3B550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  const std::runtime_error *v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  const std::runtime_error *v27;
  std::runtime_error *v28;
  std::runtime_error *v29;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 2)
  {
    v24 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 216))(v21);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v26 = std::runtime_error::runtime_error(exception, v24);
    v26->__vftable = (std::runtime_error_vtbl *)&off_1E5D336D8;
  }
  if (a2 == 1)
  {
    v27 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 216))(v21);
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v29 = std::runtime_error::runtime_error(v28, v27);
    v29->__vftable = (std::runtime_error_vtbl *)&off_1E5D33DA8;
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::decoderObjectSetup(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  char *v21;
  char *v22;
  float v23;
  char *v24;
  uint64_t v25;
  float v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  uint64_t *v41;
  float v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  int v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *v86;
  const quasar::EndPointModelConfig *isNnetEndpointingEnabled;
  void *v88;
  uint64_t v89;
  void *v90;
  const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *v91;
  const quasar::EndPointModelConfig *v92;
  char EndPointerExtraDelay;
  void *v94;
  uint64_t v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  int v116;
  int isUtteranceDetectionEnabled;
  quasar::SpeechRequestData *v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  BOOL v123;
  uint64_t InputOrigin;
  int v125;
  uint64_t v127;
  uint64_t v128;
  char v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_owners;
  unint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *i;
  uint64_t v141;
  char *v142;
  int64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  _QWORD *v151;
  char *v152;
  __int128 v153;
  int64x2_t v154;
  void *v155;
  char *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t *j;
  uint64_t v162;
  char *v163;
  int64_t v164;
  unint64_t v165;
  int64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  _QWORD *v172;
  char *v173;
  __int128 v174;
  int64x2_t v175;
  void *v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  char v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  BOOL v192;
  char v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  quasar::SpeechRequestData **v197;
  uint64_t v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  __int128 v203;
  void *v204[2];
  _QWORD v205[2];
  void *__p[2];
  char *v207;
  unint64_t v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[4];
  __int128 v212;
  _OWORD v213[2];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;

  *(_QWORD *)(a1 + 2528) = *(_QWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 2568) = 0x4110000000000000;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2608) = 0;
  v7 = (_BYTE *)*((_QWORD *)*a4 + 3);
  if (v7[48])
  {
    v8 = (__int128 *)(a1 + 1940);
    if (*(_QWORD *)(a1 + 384) && v7[624] && !v7[738])
      v8 = *(__int128 **)(a1 + 384);
    v9 = v8[1];
    v226 = *v8;
    v227 = v9;
    if (v7[625])
      DWORD2(v227) = -1;
    v10 = (_OWORD *)(a1 + 2696);
    LOBYTE(v204[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 56))(*(_QWORD *)(a2 + 16));
    std::allocate_shared[abi:ne180100]<quasar::EagerDecision,std::allocator<quasar::EagerDecision>,quasar::EagerConfig &,BOOL,void>((const quasar::EagerConfig *)&v226, (BOOL *)v204, v211);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2760, (__int128 *)v211);
    v11 = (std::__shared_weak_count *)v211[1];
    if (v211[1])
    {
      v12 = (unint64_t *)((char *)v211[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v212 = 0u;
    v213[0] = 0u;
    memset(v211, 0, sizeof(v211));
    *(_QWORD *)&v213[1] = 1;
    *(_DWORD *)(a1 + 2688) = 0;
    *(_BYTE *)(a1 + 2692) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 2696));
    *v10 = *(_OWORD *)&v211[1];
    *(void **)(a1 + 2712) = v211[3];
    memset(&v211[1], 0, 24);
    v14 = *(void **)(a1 + 2720);
    if (v14)
    {
      *(_QWORD *)(a1 + 2728) = v14;
      operator delete(v14);
      *(_QWORD *)(a1 + 2720) = 0;
      *(_QWORD *)(a1 + 2728) = 0;
      *(_QWORD *)(a1 + 2736) = 0;
    }
    *(_OWORD *)(a1 + 2720) = v212;
    v15 = *((_QWORD *)&v213[0] + 1);
    *(_QWORD *)(a1 + 2736) = *(_QWORD *)&v213[0];
    *(_QWORD *)&v213[0] = 0;
    v212 = 0uLL;
    *(_QWORD *)(a1 + 2744) = v15;
    *(_DWORD *)(a1 + 2751) = *(_DWORD *)((char *)v213 + 15);
    __p[0] = &v211[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v211);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2776, (__int128 *)v211);
    v16 = (std::__shared_weak_count *)v211[1];
    if (v211[1])
    {
      v17 = (unint64_t *)((char *)v211[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(a1 + 2760));
    std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(a1 + 2776));
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 72))(*(_QWORD *)(a2 + 16)))
    quasar::MovingAverage::init((quasar::MovingAverage *)(a1 + 1992), *(int *)(a1 + 2064));
  *(_DWORD *)(a1 + 2072) = 0;
  *(_BYTE *)(a1 + 2076) = 0;
  v19 = *((_QWORD *)*a4 + 3);
  v20 = *(float *)(a1 + 2296);
  if (v20 <= 0.0)
  {
    v21 = *(char **)(v19 + 272);
    v22 = *(char **)(v19 + 280);
    v23 = 0.0;
  }
  else
  {
    v21 = *(char **)(v19 + 272);
    v22 = *(char **)(v19 + 280);
    v23 = 0.0;
    if (v21 != v22)
    {
      v24 = *(char **)(v19 + 272);
      do
      {
        v25 = *(_QWORD *)v24;
        v24 += 16;
        v23 = v23 + *(float *)(v25 + 12);
      }
      while (v24 != v22);
    }
    if (v23 >= v20)
    {
      v26 = v20 / v23;
      if (quasar::gLogLevel >= 5)
      {
        v224 = 0u;
        v225 = 0u;
        v222 = 0u;
        v223 = 0u;
        v220 = 0u;
        v221 = 0u;
        v218 = 0u;
        v219 = 0u;
        v216 = 0u;
        v217 = 0u;
        v214 = 0u;
        v215 = 0u;
        memset(v213, 0, sizeof(v213));
        v212 = 0u;
        memset(v211, 0, sizeof(v211));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v211);
        v21 = *(char **)(v19 + 272);
        v22 = *(char **)(v19 + 280);
      }
      if (v21 != v22)
      {
        v27 = v21;
        do
        {
          v28 = *(_QWORD *)v27;
          v27 += 16;
          *(float *)(v28 + 12) = v26 * *(float *)(v28 + 12);
        }
        while (v27 != v22);
      }
      v23 = *(float *)(a1 + 2296);
    }
  }
  v29 = *(_QWORD *)(a1 + 2408);
  if (((v22 - v21) >> 4) + ((uint64_t)(*(_QWORD *)(a1 + 1080) - *(_QWORD *)(a1 + 1072)) >> 2) != (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 4)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v211, "some FST/NN LMs failed to load");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v211);
  }
  std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>(*(_QWORD *)(a1 + 1032), v211);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2312, (__int128 *)v211);
  v30 = (std::__shared_weak_count *)v211[1];
  if (v211[1])
  {
    v31 = (unint64_t *)((char *)v211[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v209 = 0;
  v210 = 0;
  v197 = a4;
  if (*(_QWORD *)(v29 + 8) - *(_QWORD *)v29 == 16)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v209, *(uint64_t **)v29);
  }
  else
  {
    v33 = operator new(0x30uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &unk_1E5D45858;
    v33[4] = 0;
    v33[5] = 0;
    v33[3] = 0;
    v211[0] = v33 + 3;
    v211[1] = v33;
    v34 = (uint64_t **)(a1 + 2376);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2376, (__int128 *)v211);
    v35 = (std::__shared_weak_count *)v211[1];
    if (v211[1])
    {
      v36 = (unint64_t *)((char *)v211[1] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(_QWORD *)(a1 + 1072);
    if (*(_QWORD *)(a1 + 1080) != v38)
    {
      v39 = 0;
      v40 = 1.0 - v23;
      do
      {
        v41 = *v34;
        v42 = *(float *)(v38 + 4 * v39);
        v43 = *(_OWORD *)(*(_QWORD *)v29 + 16 * v39);
        *(_OWORD *)v211 = v43;
        if (*((_QWORD *)&v43 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        *(float *)&v211[2] = v40 * v42;
        std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v41, (uint64_t)v211);
        v46 = (std::__shared_weak_count *)v211[1];
        if (v211[1])
        {
          v47 = (unint64_t *)((char *)v211[1] + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        *(float *)(*(_QWORD *)(a2 + 296) + 4 * v39) = v40 * *(float *)(*(_QWORD *)(a2 + 296) + 4 * v39);
        ++v39;
        v38 = *(_QWORD *)(a1 + 1072);
      }
      while (v39 < (*(_QWORD *)(a1 + 1080) - v38) >> 2);
    }
    v49 = *(_QWORD *)(v19 + 272);
    if (*(_QWORD *)(v19 + 280) != v49)
    {
      v50 = 0;
      do
      {
        v51 = *(uint64_t **)(a1 + 2376);
        v52 = *(_DWORD *)(*(_QWORD *)(v49 + 16 * v50) + 12);
        v53 = *(_OWORD *)(*(_QWORD *)v29 + 16 * (v50 + ((*(_QWORD *)(a1 + 1080) - *(_QWORD *)(a1 + 1072)) >> 2)));
        *(_OWORD *)v211 = v53;
        if (*((_QWORD *)&v53 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        LODWORD(v211[2]) = v52;
        std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v51, (uint64_t)v211);
        v56 = (std::__shared_weak_count *)v211[1];
        if (v211[1])
        {
          v57 = (unint64_t *)((char *)v211[1] + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        ++v50;
        v49 = *(_QWORD *)(v19 + 272);
      }
      while (v50 < (*(_QWORD *)(v19 + 280) - v49) >> 4);
    }
    v59 = *v34;
    LODWORD(v226) = 0;
    std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>(v59, (int *)&v226, v211);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2360, (__int128 *)v211);
    v60 = (std::__shared_weak_count *)v211[1];
    if (v211[1])
    {
      v61 = (unint64_t *)((char *)v211[1] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v209, (uint64_t *)(a1 + 2360));
  }
  quasar::DecoderPassData::getLeftContextLabels(a2, *(_QWORD *)(*a3 + 472), (_QWORD *)(a1 + 2104), *(_QWORD *)(a1 + 1344) + 32, (char **)&v226);
  if (quasar::gLogLevel >= 4)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"Using ", 6);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" symbol(s) for left context from ", 33);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" word(s)", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v211);
  }
  __p[0] = v209;
  std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,void>((uint64_t (****)(_QWORD))__p, (unsigned int **)&v226, v211);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2392, (__int128 *)v211);
  v65 = (std::__shared_weak_count *)v211[1];
  if (v211[1])
  {
    v66 = (unint64_t *)((char *)v211[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,void>((uint64_t *)(a1 + 2312), (uint64_t *)(a1 + 2392), v211);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2328, (__int128 *)v211);
  v68 = (std::__shared_weak_count *)v211[1];
  if (v211[1])
  {
    v69 = (unint64_t *)((char *)v211[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  LODWORD(v71) = *(_DWORD *)(a1 + 48);
  if ((_DWORD)v71)
    v71 = v71;
  else
    v71 = 0x20000;
  v208 = v71;
  std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,void>((uint64_t *)(a1 + 2328), &v208, v211);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2344, (__int128 *)v211);
  v72 = (std::__shared_weak_count *)v211[1];
  if (v211[1])
  {
    v73 = (unint64_t *)((char *)v211[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(_QWORD *)(a1 + 1016);
  __p[0] = *(void **)(a1 + 2344);
  v204[0] = *(void **)(a2 + 16);
  v76 = quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  if (*(_BYTE *)(a1 + 808))
    v77 = (void *)(a1 + 896);
  else
    v77 = 0;
  v201[0] = v77;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,void>(v75, (__int128 *)(a1 + 456), (void (****)(_QWORD))__p, (uint64_t *)v204, (_DWORD *)(a1 + 1208), v76, (uint64_t *)v201, v211);
  v78 = (uint64_t *)(a1 + 2424);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2424, (__int128 *)v211);
  v79 = (std::__shared_weak_count *)v211[1];
  if (v211[1])
  {
    v80 = (unint64_t *)((char *)v211[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  *(_DWORD *)(a1 + 452) = -1;
  if (quasar::gLogLevel >= 5)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"Created new decoder", 19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v211);
  }
  v82 = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ResetDecoder(*v78);
  (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v78 + 16))(*v78, *((unsigned int *)*a4 + 2), v82);
  if (!*((_DWORD *)*a4 + 1))
  {
    v83 = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2440) = 0;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
    v84 = *(_QWORD *)(a1 + 2448);
    *(_QWORD *)(a1 + 2448) = 0;
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  }
  v85 = *(unsigned __int8 *)(a1 + 1464);
  if (!quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    goto LABEL_119;
  if (*(_BYTE *)(a1 + 1936))
  {
    quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 1776), (const quasar::EndPointDecoderConfig *)(a1 + 1616), *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424), (const quasar::EndPointModelConfig *)*(unsigned __int8 *)(a1 + 1920), 0, (uint64_t *)v211);
  }
  else
  {
    v86 = *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424);
    isNnetEndpointingEnabled = (const quasar::EndPointModelConfig *)quasar::SpeechRequestData::isNnetEndpointingEnabled(*a4);
    quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 1472), (const quasar::EndPointDecoderConfig *)(a1 + 456), v86, isNnetEndpointingEnabled, 0, (uint64_t *)v211);
  }
  v88 = v211[0];
  v211[0] = 0;
  v89 = *(_QWORD *)(a1 + 2448);
  *(_QWORD *)(a1 + 2448) = v88;
  if (v89)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 16))(v89);
    v90 = v211[0];
    v211[0] = 0;
    if (v90)
      (*(void (**)(void *))(*(_QWORD *)v90 + 16))(v90);
  }
  if (!*(_BYTE *)(a1 + 1936))
  {
    if (!v85 || !*(_BYTE *)(a1 + 1937))
      goto LABEL_123;
  }
  else
  {
LABEL_119:
    if (!v85)
      goto LABEL_123;
  }
  v91 = *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424);
  v92 = (const quasar::EndPointModelConfig *)quasar::SpeechRequestData::isNnetEndpointingEnabled(*a4);
  EndPointerExtraDelay = quasar::SpeechRequestData::getEndPointerExtraDelay(*a4);
  quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 1472), (const quasar::EndPointDecoderConfig *)(a1 + 456), v91, v92, EndPointerExtraDelay, (uint64_t *)v211);
  v94 = v211[0];
  v211[0] = 0;
  v95 = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2440) = v94;
  if (v95)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
    v96 = v211[0];
    v211[0] = 0;
    if (v96)
      (*(void (**)(void *))(*(_QWORD *)v96 + 16))(v96);
  }
LABEL_123:
  if (quasar::gLogLevel >= 5)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"uttDetector: ", 13);
    v98 = *(_QWORD *)(a1 + 2448);
    if (v98)
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v98 + 24))(__p);
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "none");
    if (SHIBYTE(v207) >= 0)
      v99 = __p;
    else
      v99 = (void **)__p[0];
    if (SHIBYTE(v207) >= 0)
      v100 = HIBYTE(v207);
    else
      v100 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v99, v100);
    if (SHIBYTE(v207) < 0)
      operator delete(__p[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v211);
    if (quasar::gLogLevel >= 5)
    {
      v224 = 0u;
      v225 = 0u;
      v222 = 0u;
      v223 = 0u;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v214 = 0u;
      v215 = 0u;
      memset(v213, 0, sizeof(v213));
      v212 = 0u;
      memset(v211, 0, sizeof(v211));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"endPointer: ", 12);
      v102 = *(_QWORD *)(a1 + 2440);
      if (v102)
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v102 + 24))(__p);
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "none");
      if (SHIBYTE(v207) >= 0)
        v103 = __p;
      else
        v103 = (void **)__p[0];
      if (SHIBYTE(v207) >= 0)
        v104 = HIBYTE(v207);
      else
        v104 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v103, v104);
      if (SHIBYTE(v207) < 0)
        operator delete(__p[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v211);
    }
  }
  *(_QWORD *)(a1 + 2504) = 0;
  *(_DWORD *)(a1 + 2512) = 0;
  if (*(_QWORD *)(a1 + 1416))
  {
    v105 = operator new();
    v106 = (void *)v105;
    v107 = *(unint64_t **)(a1 + 1424);
    v211[0] = *(void **)(a1 + 1416);
    v211[1] = v107;
    if (v107)
    {
      v108 = v107 + 1;
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    quasar::StreamingConfidenceRunner::StreamingConfidenceRunner(v105, v211);
    __p[0] = v106;
    v110 = (std::__shared_weak_count *)v211[1];
    if (v211[1])
    {
      v111 = (unint64_t *)((char *)v211[1] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = __p[0];
    __p[0] = 0;
    v114 = *(_QWORD *)(a1 + 2456);
    *(_QWORD *)(a1 + 2456) = v113;
    if (v114)
    {
      std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100](a1 + 2456, v114);
      v115 = __p[0];
      __p[0] = 0;
      if (v115)
        std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v115);
    }
  }
  v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  if (!v116)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"Feature extraction misconfigured", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v211);
  }
  *(_DWORD *)(a1 + 2464) = (int)(float)((float)quasar::SpeechRequestData::getEndpointStartMs(*a4) / (float)v116);
  if (quasar::gLogLevel >= 5)
  {
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    memset(v213, 0, sizeof(v213));
    v212 = 0u;
    memset(v211, 0, sizeof(v211));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"endpointStartFrame=", 19);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v211);
  }
  isUtteranceDetectionEnabled = quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4);
  v118 = *a4;
  if (isUtteranceDetectionEnabled)
  {
    v119 = *(_DWORD *)(a1 + 2464) - *((_DWORD *)v118 + 2);
    *(_DWORD *)(a1 + 2464) = v119 & ~(v119 >> 31);
    if (v119 >= 1)
    {
      if (*(_QWORD *)(a1 + 2440))
      {
        quasar::OnlineLatticeBiglmFasterDecoder::resetPrevEpFeatures((quasar::OnlineLatticeBiglmFasterDecoder *)a1);
        v118 = *a4;
      }
    }
  }
  if (!*((_DWORD *)v118 + 1))
  {
    if (*(_BYTE *)(a1 + 1972))
      goto LABEL_172;
    v120 = operator new();
    *(_OWORD *)(v120 + 40) = 0u;
    *(_OWORD *)(v120 + 24) = 0u;
    *(_OWORD *)(v120 + 8) = 0u;
    *(_OWORD *)(v120 + 56) = *(_OWORD *)(a1 + 1976);
    *(_QWORD *)(v120 + 72) = 0x3FF0000000000000;
    *(_DWORD *)(v120 + 80) = 0;
    *(_BYTE *)(v120 + 84) = 0;
    v211[0] = 0;
    v121 = *(_QWORD **)(a1 + 2792);
    *(_QWORD *)(a1 + 2792) = v120;
    if (v121)
    {
      std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100](a1 + 2792, v121);
      v122 = v211[0];
      v211[0] = 0;
      if (v122)
        std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v211, v122);
    }
    v118 = *a4;
    if (!*((_DWORD *)*a4 + 1))
LABEL_172:
      *(_DWORD *)(a1 + 2516) = 0;
  }
  if (*(_QWORD *)(a1 + 2480) == *(_QWORD *)(a1 + 2472))
    goto LABEL_191;
  if (*(int *)(a1 + 2464) <= 0)
  {
    InputOrigin = quasar::SpeechRequestData::getInputOrigin(v118);
    v125 = *(char *)(InputOrigin + 23);
    if (v125 < 0)
    {
      if (*(_QWORD *)(InputOrigin + 8) != 12)
      {
LABEL_191:
        v123 = 0;
        goto LABEL_192;
      }
      InputOrigin = *(_QWORD *)InputOrigin;
    }
    else if (v125 != 12)
    {
      goto LABEL_191;
    }
    v123 = *(_QWORD *)InputOrigin == 0x536F546573696152 && *(_DWORD *)(InputOrigin + 8) == 1801545072;
    goto LABEL_192;
  }
  v123 = 1;
LABEL_192:
  *(_BYTE *)(a1 + 2496) = v123;
  v127 = *(_QWORD *)(a2 + 568);
  v128 = *(_QWORD *)(a2 + 576);
  if (v127 == v128)
    goto LABEL_212;
  v129 = 0;
  do
  {
    v130 = *(std::__shared_weak_count **)(v127 + 8);
    if (v130)
    {
      v131 = std::__shared_weak_count::lock(v130);
      if (v131)
      {
        v132 = v131;
        if (*(_QWORD *)v127
        {
          p_shared_owners = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldxr(p_shared_owners);
          while (__stxr(v134 + 1, p_shared_owners));
          do
            v135 = __ldaxr(p_shared_owners);
          while (__stlxr(v135 - 1, p_shared_owners));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
          v129 = 1;
          v136 = 1;
        }
        else
        {
          v136 = 0;
        }
        v137 = (unint64_t *)&v132->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
        if ((v136 & 1) != 0)
          break;
      }
    }
    v127 += 16;
  }
  while (v127 != v128);
  if ((v129 & 1) == 0)
  {
LABEL_212:
    __p[0] = 0;
    __p[1] = 0;
    v207 = 0;
    v139 = *(uint64_t **)(a2 + 248);
    for (i = *(uint64_t **)(a2 + 256); v139 != i; v139 += 2)
    {
      v141 = *v139;
      std::string::basic_string[abi:ne180100]<0>(v204, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v141, (uint64_t)v204, v201);
      v142 = (char *)__p[1];
      if (__p[1] >= v207)
      {
        v143 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v145 = v207 - (char *)__p[0];
        if ((v207 - (char *)__p[0]) >> 3 > v144)
          v144 = v145 >> 3;
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
          v146 = 0xFFFFFFFFFFFFFFFLL;
        else
          v146 = v144;
        *(_QWORD *)&v212 = &v207;
        v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v207, v146);
        v149 = &v147[16 * v143];
        *(_OWORD *)v149 = *(_OWORD *)v201;
        v201[0] = 0;
        v201[1] = 0;
        v151 = __p[0];
        v150 = __p[1];
        if (__p[1] == __p[0])
        {
          v154 = vdupq_n_s64((unint64_t)__p[1]);
          v152 = &v147[16 * v143];
        }
        else
        {
          v152 = &v147[16 * v143];
          do
          {
            v153 = *((_OWORD *)v150 - 1);
            v150 -= 2;
            *((_OWORD *)v152 - 1) = v153;
            v152 -= 16;
            *v150 = 0;
            v150[1] = 0;
          }
          while (v150 != v151);
          v154 = *(int64x2_t *)__p;
        }
        v155 = v149 + 16;
        __p[0] = v152;
        __p[1] = v149 + 16;
        *(int64x2_t *)&v211[1] = v154;
        v156 = v207;
        v207 = &v147[16 * v148];
        v211[3] = v156;
        v211[0] = (void *)v154.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v211);
        v157 = (std::__shared_weak_count *)v201[1];
        __p[1] = v155;
        if (v201[1])
        {
          v158 = (unint64_t *)((char *)v201[1] + 8);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
      }
      else
      {
        *(_OWORD *)__p[1] = *(_OWORD *)v201;
        v201[0] = 0;
        v201[1] = 0;
        __p[1] = v142 + 16;
      }
      if (SHIBYTE(v205[0]) < 0)
        operator delete(v204[0]);
    }
    v204[0] = 0;
    v204[1] = 0;
    v205[0] = 0;
    v160 = *(uint64_t **)(a2 + 272);
    for (j = *(uint64_t **)(a2 + 280); v160 != j; v160 += 2)
    {
      v162 = *v160;
      std::string::basic_string[abi:ne180100]<0>(v201, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v162, (uint64_t)v201, &v203);
      v163 = (char *)v204[1];
      if (v204[1] >= (void *)v205[0])
      {
        v164 = ((char *)v204[1] - (char *)v204[0]) >> 4;
        v165 = v164 + 1;
        if ((unint64_t)(v164 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v166 = v205[0] - (unint64_t)v204[0];
        if ((uint64_t)(v205[0] - (unint64_t)v204[0]) >> 3 > v165)
          v165 = v166 >> 3;
        if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0)
          v167 = 0xFFFFFFFFFFFFFFFLL;
        else
          v167 = v165;
        *(_QWORD *)&v212 = v205;
        v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v205, v167);
        v170 = &v168[16 * v164];
        *(_OWORD *)v170 = v203;
        v203 = 0uLL;
        v172 = v204[0];
        v171 = v204[1];
        if (v204[1] == v204[0])
        {
          v175 = vdupq_n_s64((unint64_t)v204[1]);
          v173 = &v168[16 * v164];
        }
        else
        {
          v173 = &v168[16 * v164];
          do
          {
            v174 = *((_OWORD *)v171 - 1);
            v171 -= 2;
            *((_OWORD *)v173 - 1) = v174;
            v173 -= 16;
            *v171 = 0;
            v171[1] = 0;
          }
          while (v171 != v172);
          v175 = *(int64x2_t *)v204;
        }
        v176 = v170 + 16;
        v204[0] = v173;
        v204[1] = v170 + 16;
        *(int64x2_t *)&v211[1] = v175;
        v177 = (void *)v205[0];
        v205[0] = &v168[16 * v169];
        v211[3] = v177;
        v211[0] = (void *)v175.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v211);
        v178 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
        v204[1] = v176;
        if (*((_QWORD *)&v203 + 1))
        {
          v179 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
      }
      else
      {
        *(_OWORD *)v204[1] = v203;
        v203 = 0uLL;
        v204[1] = v163 + 16;
      }
      if (v202 < 0)
        operator delete(v201[0]);
    }
    v181 = *((_QWORD *)*v197 + 3);
    v182 = *(_QWORD *)(a2 + 392);
    if (v182)
    {
      std::string::basic_string[abi:ne180100]<0>(v201, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v182, (uint64_t)v201, &v199);
    }
    else
    {
      v199 = 0;
      v200 = 0;
    }
    v183 = *(_DWORD *)(a2 + 448);
    memset(v211, 0, 24);
    v184 = kaldi::quasar::LoadRescoreInterpedLMs((uint64_t *)__p, (uint64_t *)v204, a2 + 296, 0, (uint64_t **)(v181 + 272), (uint64_t *)(a2 + 320), (_QWORD *)(a2 + 408), (__int32 **)(a2 + 344), *(float *)(a1 + 2304), &v199, v183, (uint64_t)v211, 50, 0x40000000u, 0x20000uLL, 0, *a3 + 640);
    if (v211[0])
    {
      v211[1] = v211[0];
      operator delete(v211[0]);
    }
    v185 = v200;
    if (v182)
    {
      if (v200)
      {
        v186 = (unint64_t *)&v200->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      if (v202 < 0)
        operator delete(v201[0]);
    }
    else if (v200)
    {
      v188 = (unint64_t *)&v200->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    if (kaldi::g_kaldi_verbose_level < -1)
      v190 = 1;
    else
      v190 = v184;
    if ((v190 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"Failed to load rescore old LMs", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v211);
    }
    v211[0] = v204;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v211);
    v211[0] = __p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v211);
  }
  v191 = *a3;
  *(_BYTE *)(*a3 + 864) = *(_BYTE *)(a1 + 2156);
  if (!*((_DWORD *)*v197 + 1))
    *(_DWORD *)(a1 + 2876) = 0;
  if (!*(_BYTE *)(a1 + 2159))
    *(_BYTE *)(a1 + 2161) = *(_BYTE *)(a1 + 592);
  if (!*(_BYTE *)(a1 + 2160))
    *(_DWORD *)(a1 + 2164) = *(_DWORD *)(a1 + 596);
  if (*(_BYTE *)(a1 + 2172))
    v192 = *(int *)(a2 + 848) < 0;
  else
    v192 = 1;
  v193 = !v192;
  *(_BYTE *)(v191 + 1089) = v193;
  if ((_QWORD)v226)
  {
    *((_QWORD *)&v226 + 1) = v226;
    operator delete((void *)v226);
  }
  v194 = v210;
  if (v210)
  {
    v195 = (unint64_t *)&v210->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
}

void sub_1ADB3CCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  MEMORY[0x1AF44D190](v37, 0x1032C40FE2AB2A7);
  JUMPOUT(0x1ADB3CDECLL);
}

void sub_1ADB3CCD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;

  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (!v38)
    JUMPOUT(0x1ADB3CDACLL);
  JUMPOUT(0x1ADB3CD9CLL);
}

void sub_1ADB3CD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a37);
  v39 = *(void **)(v37 - 144);
  if (v39)
  {
    *(_QWORD *)(v37 - 136) = v39;
    operator delete(v39);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_1ADB3CD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 144);
  if (v37)
  {
    *(_QWORD *)(v35 - 136) = v37;
    operator delete(v37);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_1ADB3CD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1ADB3CD9CLL);
}

void sub_1ADB3CD68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a32 < 0)
    operator delete(__p);
  __p = &a34;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1ADB3CDECLL);
}

void sub_1ADB3CD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  JUMPOUT(0x1ADB3CDFCLL);
}

void sub_1ADB3CD90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char **a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  a28 = &a30;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a30 = &a34;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  JUMPOUT(0x1ADB3CDECLL);
}

void sub_1ADB3CDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a27 = &a31;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1ADB3CDECLL);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ResetDecoder(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  clockid_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != -1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    do
    {
      v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      v3 = *v5;
    }
    while (v3 != -1);
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = -1;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 56);
    do
    {
      v8 = v6;
      v6 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v8 + 16) = v7;
      v7 = v8;
    }
    while (v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  kaldi::quasar::TokenHeap::Clear((kaldi::quasar::TokenHeap *)(a1 + 328));
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 291) = 0;
  std::__tree<int>::destroy(a1 + 304, *(_QWORD **)(a1 + 312));
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_DWORD *)(a1 + 288) = 0;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
  v11 = ((***(uint64_t (****)(_QWORD))(a1 + 168))(*(_QWORD *)(a1 + 168)) << 32) + v10;
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 88, 1uLL);
  v12 = kaldi::quasar::TokenHeap::NewToken((kaldi::quasar::TokenHeap *)(a1 + 328), 0.0, 0.0, 0, 0, 0);
  **(_DWORD **)(a1 + 88) = v12;
  v13 = v11 % *(_QWORD *)(a1 + 24);
  v14 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v13);
  v15 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(v2);
  *(_QWORD *)v15 = v11;
  *(_DWORD *)(v15 + 8) = v12;
  v17 = v14 + 1;
  v18 = v14[1];
  if (v18)
  {
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = v15;
    *v17 = v15;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (v19 != -1)
      v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v19 + 8) + 16);
    *v2 = v15;
    *(_QWORD *)(v15 + 16) = 0;
    *v17 = v15;
    *v14 = v19;
    *(_QWORD *)(a1 + 16) = v13;
  }
  ++*(_DWORD *)(a1 + 288);
  *(_WORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v16);
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, 0, *(float *)(a1 + 536));
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)1u);
  result = 0.0;
  *(_OWORD *)(a1 + 804) = 0u;
  return result;
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetPrevEpFeatures(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v2;
  void *__p[2];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (!*((_QWORD *)this + 305))
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v4 = 0u;
    v5 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "This should only be called if endPointer exists");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *((_QWORD *)this + 327) = 0;
  *((_DWORD *)this + 656) = 1091567616;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 329);
  v2 = *((_QWORD *)this + 305);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v4 = 0;
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v2 + 48))(v2, __p, (char *)this + 2656);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 670) = 0;
}

void sub_1ADB3D0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::addTimestampsToPartials(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  clockid_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[3];
  char v39;
  uint64_t v40;

  v39 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v38, (clockid_t)a2);
  v40 = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 320, &v21);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(*a3 + 320);
  if (!kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback3(*(_QWORD *)(a1 + 2424), v9))
  {
    if (quasar::gLogLevel < 4)
      return;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Failed to create FST from partial traceback", 43);
LABEL_25:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
    return;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9))
  {
    if (quasar::gLogLevel < 4)
      return;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Failed to get traceback for utterance ", 38);
    goto LABEL_25;
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v19);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v9, (uint64_t)&v19, 1);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 152, &v21);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(*a3 + 152);
  *(_QWORD *)&v21 = 0;
  v14 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v19, 17039360, (uint64_t *)&v21);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v20 + 8) & (~(_QWORD)v21 | 4) | v21 & v14;
  if ((v14 & 0x1040000) == 0x40000)
  {
    v16 = quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
    if (kaldi::WordAlignLattice((uint64_t)&v19, v16, *(_QWORD *)(a1 + 1344), 0, v13))
      quasar::Decoder::calculateNBest(a2, a3, 1);
  }
  kaldi::Timer::GetSeconds((kaldi::Timer *)5, v15);
  if (quasar::gLogLevel >= 4)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Time Taken to add timestamps for first pass results: ", 53);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
  }
  v19 = &unk_1E5D25800;
  v17 = v20;
  if (v20)
  {
    v18 = *(_DWORD *)(v20 + 56) - 1;
    *(_DWORD *)(v20 + 56) = v18;
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1ADB3D430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback3(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v42;
  int v43;
  BOOL v44;
  _BYTE *v45;
  unsigned int *v46;
  char *v47;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v60;
  _DWORD v61[5];
  void *v62;
  unsigned int *v63;
  unsigned int *v64;
  void *__p;
  char *v66;
  char *v67;

  v2 = *(unint64_t **)(a1 + 8);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = INFINITY;
  do
  {
    v7 = *v2;
    v8 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160), *v2);
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 328) + 32 * *((unsigned int *)v2 + 2);
      v10 = v8 + *(float *)(v9 + 12);
      v11 = v10
          + (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), HIDWORD(v7));
      if (v6 > v11)
      {
        v6 = v11;
        v5 = v9;
      }
    }
    v2 = (unint64_t *)v2[2];
  }
  while (v2);
  v12 = 0;
  if (v5 && v6 != INFINITY)
  {
    __p = 0;
    v66 = 0;
    v67 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    do
    {
      v13 = *(_QWORD *)v5;
      v14 = *(_QWORD *)v5 >> 33;
      if ((_DWORD)v14)
      {
        v15 = v66;
        if (v66 >= v67)
        {
          v17 = (char *)__p;
          v18 = (v66 - (_BYTE *)__p) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v67 - (_BYTE *)__p;
          if ((v67 - (_BYTE *)__p) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v21);
            v17 = (char *)__p;
            v15 = v66;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v14;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          __p = v23;
          v66 = v16;
          v67 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v66 = v14;
          v16 = v15 + 4;
        }
        v66 = v16;
        v13 = *(_QWORD *)v5;
      }
      v25 = *(_DWORD *)(v5 + 8);
      if (v13 >= 2)
      {
        v26 = v13 >> 1;
        v27 = v63;
        if (v63 >= v64)
        {
          v29 = (unsigned int *)v62;
          v30 = ((char *)v63 - (_BYTE *)v62) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = (char *)v64 - (_BYTE *)v62;
          if (((char *)v64 - (_BYTE *)v62) >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v64, v33);
            v29 = (unsigned int *)v62;
            v27 = v63;
          }
          else
          {
            v34 = 0;
          }
          v35 = (unsigned int *)&v34[4 * v30];
          *v35 = v26;
          v28 = v35 + 1;
          while (v27 != v29)
          {
            v36 = *--v27;
            *--v35 = v36;
          }
          v62 = v35;
          v63 = v28;
          v64 = (unsigned int *)&v34[4 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v63 = v26;
          v28 = v27 + 1;
        }
        v63 = v28;
        v25 = *(_DWORD *)(v5 + 8);
      }
      if (!(v25 >> 6))
        break;
      v37 = *(_QWORD *)(a1 + 328);
      v5 = v37 + ((unint64_t)(v25 & 0xFFFFFFC0) >> 1);
    }
    while (v37);
    v38 = __p;
    v39 = v66;
    v40 = v66 - 4;
    if (__p != v66 && v40 > __p)
    {
      v42 = (char *)__p + 4;
      do
      {
        v43 = *((_DWORD *)v42 - 1);
        *((_DWORD *)v42 - 1) = *(_DWORD *)v40;
        *(_DWORD *)v40 = v43;
        v40 -= 4;
        v44 = v42 >= v40;
        v42 += 4;
      }
      while (!v44);
    }
    v45 = v62;
    v46 = v63;
    v47 = (char *)(v63 - 1);
    if (v62 != v63 && v47 > v62)
    {
      v49 = (char *)v62 + 4;
      do
      {
        v50 = *((_DWORD *)v49 - 1);
        *((_DWORD *)v49 - 1) = *(_DWORD *)v47;
        *(_DWORD *)v47 = v50;
        v47 -= 4;
        v44 = v49 >= v47;
        v49 += 4;
      }
      while (!v44);
    }
    v51 = (char *)v46 - v45;
    v52 = v39 - v38;
    v12 = v51 >= v52;
    if (v51 >= v52)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v53);
      if (v63 == v62)
      {
        v57 = v53;
      }
      else
      {
        v54 = 0;
        v55 = 1;
        do
        {
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v57 = v56;
          if (v54 >= (v66 - (_BYTE *)__p) >> 2)
            v58 = 0;
          else
            v58 = *((_DWORD *)__p + v54);
          v61[1] = v58;
          v61[0] = *((_DWORD *)v62 + v54);
          v61[2] = 0;
          v61[3] = 0;
          v61[4] = v56;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 208))(a2, v53, v61);
          v54 = v55++;
          v53 = v57;
        }
        while (v54 < ((char *)v63 - (_BYTE *)v62) >> 2);
      }
      v60 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v57, &v60);
    }
    if (v62)
    {
      v63 = (unsigned int *)v62;
      operator delete(v62);
    }
    if (__p)
    {
      v66 = (char *)__p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_1ADB3D8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  const char *v28;
  uint64_t v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  clockid_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  kaldi::LatticeScoreCache *v53;
  kaldi::TransitionModel *v54;
  int v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t *MultiBuffer;
  char EndPointerExtraDelay;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  double *v75;
  double *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *__p[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::string v98;
  std::string v99;
  std::string v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  _QWORD v103[3];
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 2424);
  v9 = *(_DWORD *)(v8 + 808);
  v10 = *(_DWORD *)(v8 + 812);
  v11 = *a3;
  v13 = *(_QWORD *)(*a3 + 424);
  v12 = *(std::__shared_weak_count **)(*a3 + 432);
  v101 = v13;
  v102 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v11 = *a3;
  }
  v16 = v10 + v9;
  if (*(_BYTE *)(v11 + 1073))
    v17 = 1;
  else
    v17 = *(_BYTE *)(v11 + 1072) != 0;
  v18 = *(const void ***)(a1 + 2760);
  if (v18)
  {
    if (quasar::EagerDecision::matches(v18, **(_DWORD **)(a1 + 2776))
      && (v19 = *(_QWORD *)(a1 + 2776), v20 = *(unsigned int *)(v19 + 4), (_DWORD)v20 != 1)
      && (v21 = *(_QWORD *)(v19 + 24)) != 0
      && *(_BYTE *)(v21 + 440))
    {
      v22 = *a3;
      *(_BYTE *)(v21 + 580) = *(_BYTE *)(*a3 + 580);
      *(_BYTE *)(v21 + 581) = 1;
      *(_DWORD *)(v21 + 576) = v16;
      *(_WORD *)(v21 + 1072) = *(_WORD *)(v22 + 1072);
      quasar::DecoderPassData::operator=(a2, *(_QWORD *)(v19 + 8));
      quasar::DecoderChainOutput::operator=(*a3, *(_QWORD *)(*(_QWORD *)(a1 + 2776) + 24));
      v23 = 1;
    }
    else
    {
      v23 = 0;
      v20 = 2;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "eagerDecisionLog");
    quasar::EagerDecision::getLog((uint64_t *)&v98, *(quasar::EagerDecision **)(a1 + 2760));
    v24 = std::string::insert(&v98, 0, "\"");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v99, "\"");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDump(v13, (__int128 *)__p, &v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SBYTE7(v82) < 0)
      operator delete(__p[0]);
    if (v23)
      v28 = "MATCH";
    else
      v28 = "NOMATCH";
    if (v23)
      v29 = 5;
    else
      v29 = 7;
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(*(_QWORD *)(a1 + 2776) + 40), (uint64_t)v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
    std::ostream::operator<<();
    std::string::basic_string[abi:ne180100]<0>(__p, "eagerOutputLog");
    std::stringbuf::str();
    v31 = std::string::insert(&v98, 0, "\"");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v99, "\"");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDump(v13, (__int128 *)__p, &v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SBYTE7(v82) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v23 = 0;
    v20 = 2;
  }
  if (((v17 | v23) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 2800))
      v35 = v17;
    else
      v35 = 1;
    if ((v35 & 1) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v82 = 0;
      v36 = *(_QWORD *)(a2 + 568);
      v37 = *(_QWORD *)(a2 + 576);
      if (v36 == v37)
        goto LABEL_139;
      do
      {
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = 0uLL;
        v100.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v36 + 8));
        if (v100.__r_.__value_.__l.__size_)
        {
          v38 = *(_QWORD *)v36;
          v100.__r_.__value_.__r.__words[0] = *(_QWORD *)v36;
        }
        else
        {
          v38 = v100.__r_.__value_.__r.__words[0];
        }
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v38 + 104))(v38))
          std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)__p, (__int128 *)&v100);
        size = (std::__shared_weak_count *)v100.__r_.__value_.__l.__size_;
        if (v100.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(v100.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v36 += 16;
      }
      while (v36 != v37);
      if (__p[0] == __p[1])
      {
LABEL_139:
        v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
        if (!v17)
          goto LABEL_78;
        goto LABEL_75;
      }
      *(_BYTE *)(a2 + 561) = 0;
      v103[0] = &off_1E5D3E748;
      v104 = v103;
      v20 = quasar::Decoder::runChain((uint64_t **)__p, (uint64_t)v103, a2, (uint64_t)a3, a4);
      v42 = v104;
      if (v104 == v103)
      {
        v43 = 4;
        v42 = v103;
      }
      else
      {
        if (!v104)
        {
LABEL_138:
          *(_BYTE *)(a2 + 561) = 1;
          goto LABEL_139;
        }
        v43 = 5;
      }
      (*(void (**)(void))(*v42 + 8 * v43))();
      goto LABEL_138;
    }
  }
  else
  {
    quasar::SpeechRequestData::getRecogRequestTimer(*a4, __p);
    *(double *)(*a3 + 456) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v44);
    v45 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v46 = (unint64_t *)((char *)__p[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(_QWORD *)(a1 + 2424), *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 808), 0);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 320, (__int128 *)__p);
    v48 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v49 = (unint64_t *)((char *)__p[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = *(_QWORD *)(a1 + 2424);
    v52 = *(_QWORD *)(*a3 + 320);
    v53 = *(kaldi::LatticeScoreCache **)(*a3 + 488);
    v54 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
    if (kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(v51, v52, v53, v54))
    {
      v55 = *(_DWORD *)(a1 + 2872);
      LOBYTE(__p[0]) = 0;
      v20 = quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(a2, (uint64_t **)a3, a4, a1 + 456, v55, (unsigned __int8 *)__p);
      if (!v17)
        goto LABEL_78;
      goto LABEL_75;
    }
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get recognition lattice", 33);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  if (!v17)
    goto LABEL_78;
LABEL_75:
  if (*(_BYTE *)(*a3 + 1073))
    quasar::OnlineLatticeBiglmFasterDecoder::addTimestampsToPartials(a1, a2, a3);
  v20 = 0;
LABEL_78:
  v56 = 0.0;
  if (v16 >= 2)
    v56 = (double)*(int *)(a1 + 2512) / (double)(v16 - 1);
  *(double *)&v98.__r_.__value_.__l.__data_ = v56;
  if (quasar::gLogLevel <= 3)
  {
    *(_DWORD *)(*a3 + 576) = v16;
  }
  else
  {
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Average number of active tokens: ", 33);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    v57 = quasar::gLogLevel;
    v58 = *a3;
    *(_DWORD *)(v58 + 576) = v16;
    if (*(_BYTE *)(v58 + 580) && v57 >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Last frame processed ", 21);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer((quasar::SpeechRequestData *)*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, __p);
  if (quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p[0]))
  {
    EndPointerExtraDelay = quasar::SpeechRequestData::getEndPointerExtraDelay((quasar::SpeechRequestData *)*a4);
    v61 = EndPointerExtraDelay;
    v62 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_90;
    v63 = (unint64_t *)((char *)__p[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
      if ((v61 & 1) == 0)
        goto LABEL_91;
    }
    else
    {
LABEL_90:
      if ((EndPointerExtraDelay & 1) == 0)
      {
LABEL_91:
        v65 = v101;
        goto LABEL_113;
      }
    }
  }
  else
  {
    v66 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v67 = (unint64_t *)((char *)__p[1] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v100, "EstimatedEpTruncation");
  std::string::basic_string[abi:ne180100]<0>(&v99, "EstimatedEndPointerTrailingSilence");
  if (*(double *)(a1 + 2504) == 0.0)
  {
    v65 = v101;
    *(_DWORD *)(v101 + 124) = 2;
    __p[0] = (void *)0x4000000000000000;
    quasar::SpeechRequestResultData::addAA(v65, (__int128 *)&v100, (double *)__p, 0);
    __p[0] = (void *)0x41DFFFFFFFC00000;
    quasar::SpeechRequestResultData::addAA(v65, (__int128 *)&v99, (double *)__p, 0);
  }
  else
  {
    v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
    v70 = *(_DWORD *)(*a3 + 624);
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Server side end pointer first triggered frame ", 46);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v71 = quasar::SpeechRequestData::getEndPointerExtraDelay((quasar::SpeechRequestData *)*a4);
    v72 = v70 / v69;
    if (!v71 || (v73 = *(_DWORD *)(a1 + 452), v73 < 0))
      v73 = *(_DWORD *)(a1 + 448);
    v65 = v101;
    v74 = v73 - v72;
    if (v73 - v72 < 0)
    {
      *(_DWORD *)(v101 + 124) = 0;
      __p[0] = 0;
    }
    else
    {
      *(_DWORD *)(v101 + 124) = 1;
      __p[0] = (void *)0x3FF0000000000000;
    }
    quasar::SpeechRequestResultData::addAA(v65, (__int128 *)&v100, (double *)__p, 0);
    *(double *)__p = (double)v74;
    quasar::SpeechRequestResultData::addAA(v65, (__int128 *)&v99, (double *)__p, 0);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_113:
  *(double *)(v65 + 32) = *(double *)(v65 + 32) + *(double *)(*(_QWORD *)(a1 + 2424) + 888) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEmittingWallMs");
  quasar::SpeechRequestResultData::addAA(v65, (__int128 *)__p, (double *)(v65 + 32), 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  v75 = (double *)v101;
  v76 = (double *)(v101 + 40);
  *(double *)(v101 + 40) = *(double *)(v101 + 40) + *(double *)(*(_QWORD *)(a1 + 2424) + 896) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEmittingCpuMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, v76, 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  v75[6] = v75[6] + *(double *)(*(_QWORD *)(a1 + 2424) + 904) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessNonemittingWallMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, v75 + 6, 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  v75[7] = v75[7] + *(double *)(*(_QWORD *)(a1 + 2424) + 912) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessNonemittingCpuMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, v75 + 7, 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  v75[8] = v75[8] + *(double *)(*(_QWORD *)(a1 + 2424) + 920) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "PruneActiveTokensWallMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, v75 + 8, 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  v75[9] = v75[9] + *(double *)(*(_QWORD *)(a1 + 2424) + 928) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "PruneActiveTokensCpuMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, v75 + 9, 1);
  if (SBYTE7(v82) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "AverageActiveTokensPerFrame");
  quasar::SpeechRequestResultData::addAA((uint64_t)v75, (__int128 *)__p, (double *)&v98, 0);
  if (SBYTE7(v82) < 0)
  {
    operator delete(__p[0]);
    if (!(_DWORD)v20)
LABEL_129:
      quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStates((quasar::OnlineLatticeBiglmFasterDecoder *)a1);
  }
  else if (!(_DWORD)v20)
  {
    goto LABEL_129;
  }
  v77 = v102;
  if (v102)
  {
    v78 = (unint64_t *)&v102->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return v20;
}

void sub_1ADB3E51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;

  v14 = *(_QWORD **)(v12 - 120);
  if (v14 == v11)
  {
    v15 = 4;
    v14 = (_QWORD *)(v12 - 144);
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  *(_QWORD *)(v12 - 192) = &a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 192));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12 - 160);
  _Unwind_Resume(a1);
}

uint64_t quasar::DecoderPassData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, (__int128 *)a2);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 16, (__int128 *)(a2 + 16));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 32, (__int128 *)(a2 + 32));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 48, (__int128 *)(a2 + 48));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 64, (__int128 *)(a2 + 64));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 80, (__int128 *)(a2 + 80));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v4;
  std::vector<BOOL>::operator=((void **)(a1 + 120), a2 + 120);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 144), *(char **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 168, (__int128 *)(a2 + 168));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)(a2 + 184));
  v5 = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = v5;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)(a2 + 216));
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)(a1 + 248));
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)(a1 + 272));
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 272) = 0u;
  std::vector<int>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate((void **)(a1 + 320));
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_OWORD *)(a2 + 320) = 0u;
  std::vector<int>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__tree<int>::__move_assign(a1 + 368, (_QWORD *)(a2 + 368));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 392, (__int128 *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 456, (__int128 *)(a2 + 456));
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)(a1 + 472));
  v6 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v6;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)(a1 + 496));
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_OWORD *)(a2 + 496) = 0u;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 520, (__int128 *)(a2 + 520));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 536, (__int128 *)(a2 + 536));
  v7 = *(_DWORD *)(a2 + 559);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_DWORD *)(a1 + 559) = v7;
  std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 568));
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 592, (__int128 *)(a2 + 592));
  v8 = (void **)(a1 + 608);
  if (*(char *)(a1 + 631) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 631) = 0;
  *(_BYTE *)(a2 + 608) = 0;
  v10 = (void **)(a1 + 632);
  if (*(char *)(a1 + 655) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 655) = 0;
  *(_BYTE *)(a2 + 632) = 0;
  v12 = *(_QWORD *)(a2 + 656);
  *(_WORD *)(a1 + 664) = *(_WORD *)(a2 + 664);
  *(_QWORD *)(a1 + 656) = v12;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 672, (__int128 *)(a2 + 672));
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 696, (uint64_t *)(a2 + 696));
  *(_BYTE *)(a1 + 736) = *(_BYTE *)(a2 + 736);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 744));
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 744) = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 768));
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a2 + 784) = 0;
  *(_OWORD *)(a2 + 768) = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 792));
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 824));
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 840) = 0;
  *(_OWORD *)(a2 + 824) = 0u;
  v13 = *(_DWORD *)(a2 + 848);
  *(_BYTE *)(a1 + 852) = *(_BYTE *)(a2 + 852);
  *(_DWORD *)(a1 + 848) = v13;
  return a1;
}

uint64_t quasar::DecoderChainOutput::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int16 v7;
  int v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 v19;

  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  std::vector<int>::__move_assign(a1 + 72, (__n128 *)(a2 + 72));
  std::vector<quasar::Token>::__vdeallocate((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__move_assign(a1 + 120, (_QWORD *)(a2 + 120));
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 152, (__int128 *)(a2 + 152));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 168, (__int128 *)(a2 + 168));
  std::__optional_storage_base<std::shared_ptr<kaldi::WordHypLattice>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::shared_ptr<kaldi::WordHypLattice>,false>>(a1 + 184, a2 + 184);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 208, (__int128 *)(a2 + 208));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 224, (__int128 *)(a2 + 224));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 240, (__int128 *)(a2 + 240));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 256, (__int128 *)(a2 + 256));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 272, (__int128 *)(a2 + 272));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 288, (__int128 *)(a2 + 288));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 304, (__int128 *)(a2 + 304));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 320, (__int128 *)(a2 + 320));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 336, (__int128 *)(a2 + 336));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 352, (__int128 *)(a2 + 352));
  std::vector<std::set<std::string>>::__vdeallocate((void **)(a1 + 368));
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 392, (__int128 *)(a2 + 392));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 408, (__int128 *)(a2 + 408));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 424, (__int128 *)(a2 + 424));
  v4 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v4;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 472, (__int128 *)(a2 + 472));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 488, (__int128 *)(a2 + 488));
  v5 = *(_QWORD *)(a2 + 536);
  v6 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v6;
  *(_QWORD *)(a1 + 536) = v5;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 544, (__int128 *)(a2 + 544));
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 560, (__int128 *)(a2 + 560));
  v7 = *(_WORD *)(a2 + 580);
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_WORD *)(a1 + 580) = v7;
  std::vector<quasar::LmeInfo>::__vdeallocate((uint64_t *)(a1 + 584));
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  *(_OWORD *)(a2 + 584) = 0u;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 608, (__int128 *)(a2 + 608));
  v8 = *(_DWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_DWORD *)(a1 + 632) = v8;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 640, (__int128 *)(a2 + 640));
  std::vector<quasar::ItnOverride>::__vdeallocate((void **)(a1 + 656));
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a2 + 672) = 0;
  *(_OWORD *)(a2 + 656) = 0u;
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  std::vector<int>::__move_assign(a1 + 696, (__n128 *)(a2 + 696));
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  std::vector<int>::__move_assign(a1 + 728, (__n128 *)(a2 + 728));
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  std::vector<int>::__move_assign(a1 + 760, (__n128 *)(a2 + 760));
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  std::vector<int>::__move_assign(a1 + 792, (__n128 *)(a2 + 792));
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate((void ***)(a1 + 840));
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a2 + 856) = 0;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_BYTE *)(a1 + 864) = *(_BYTE *)(a2 + 864);
  *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 872);
  v9 = (void **)(a1 + 880);
  if (*(char *)(a1 + 903) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)(a2 + 880);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_OWORD *)v9 = v10;
  *(_BYTE *)(a2 + 903) = 0;
  *(_BYTE *)(a2 + 880) = 0;
  v11 = *(_QWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 920) = v11;
  *(_BYTE *)(a1 + 928) = *(_BYTE *)(a2 + 928);
  v12 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 936);
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 959) = 0;
  *(_BYTE *)(a2 + 936) = 0;
  v14 = *(_OWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = v14;
  std::vector<int>::__move_assign(a1 + 984, (__n128 *)(a2 + 984));
  std::vector<int>::__move_assign(a1 + 1008, (__n128 *)(a2 + 1008));
  v15 = (void **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0)
    operator delete(*v15);
  v16 = *(_OWORD *)(a2 + 1032);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_OWORD *)v15 = v16;
  *(_BYTE *)(a2 + 1055) = 0;
  *(_BYTE *)(a2 + 1032) = 0;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1056, (__int128 *)(a2 + 1056));
  v17 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
  *(_OWORD *)(a1 + 1072) = v17;
  *(_DWORD *)(a1 + 1100) = *(_DWORD *)(a2 + 1100);
  *(_DWORD *)(a1 + 1104) = *(_DWORD *)(a2 + 1104);
  std::vector<quasar::Token>::__vdeallocate((void **)(a1 + 1112));
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a2 + 1128) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(_BYTE *)(a1 + 1136) = *(_BYTE *)(a2 + 1136);
  v18 = (void **)(a1 + 1144);
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 1144);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_OWORD *)v18 = v19;
  *(_BYTE *)(a2 + 1167) = 0;
  *(_BYTE *)(a2 + 1144) = 0;
  return a1;
}

BOOL kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t j;
  uint64_t k;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v44;
  _DWORD v46[2];
  _DWORD *v47[2];
  int v48;
  unsigned int v49;
  _QWORD v50[4];
  int v51;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v7 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 288);
  memset(v50, 0, sizeof(v50));
  v51 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v50, v8 / 2 + 3);
  v9 = 0;
  v40 = ((unint64_t)(v6 - v7) >> 3) - 1;
  v38 = ((unint64_t)(v6 - v7) >> 3);
  while (1)
  {
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 88) + 8 * v9);
    if (!*v10)
      break;
    v49 = 0;
    for (i = *v10; ; LODWORD(i) = *(_DWORD *)(v12 + 32 * i + 24))
    {
      v49 = i;
      if (!(_DWORD)i)
        break;
      v12 = *(_QWORD *)(a1 + 328);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      v47[0] = &v49;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v50, &v49, (uint64_t)&std::piecewise_construct, v47)+ 5) = v13;
    }
    if (!v9 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) >= 1)
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, (v14 - 1));
    }
    if (++v9 == v38)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"init:", 5);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" buckets:", 9);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" load:", 6);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47);
      }
      v20 = 0;
      v39 = 0;
      v21 = 0;
      v44 = 0;
      v41 = (uint64_t *)(a1 + 312);
      do
      {
        for (j = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8 * v20); (_DWORD)j; j = *(unsigned int *)(v42 + 32 * j + 24))
        {
          v42 = *(_QWORD *)(a1 + 328);
          for (k = *(unsigned int *)(v42 + 32 * j + 20); (_DWORD)k; ++v21)
          {
            v24 = *(_QWORD *)(a1 + 344);
            v25 = v24 + 24 * k;
            LODWORD(v47[0]) = *(_DWORD *)(v25 + 4);
            v26 = *((_DWORD *)std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v50, (unsigned int *)v47)+ 5);
            v27 = *(_DWORD *)(v25 + 8);
            LODWORD(v47[0]) = *(_DWORD *)v25 >> 1;
            HIDWORD(v47[0]) = v27;
            v47[1] = *(_DWORD **)(v25 + 12);
            v48 = v26;
            if (v27 == *(_DWORD *)(a1 + 252))
              HIDWORD(v47[0]) = 0;
            (*(void (**)(uint64_t, _QWORD, _DWORD **))(*(_QWORD *)a2 + 208))(a2, v44, v47);
            if (a4 && a3 && *(_DWORD *)v25 >= 2u)
            {
              v28 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, *(_DWORD *)v25 >> 1);
              v29 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v28);
              kaldi::LatticeScoreCache::CacheScore(a3, v20, v29, *(float *)(v25 + 16));
            }
            k = *(unsigned int *)(v24 + 24 * k + 20);
          }
          if (v20 == v40)
          {
            v30 = *v41;
            if (*v41)
            {
              v31 = a1 + 312;
              do
              {
                v32 = *(unsigned int *)(v30 + 28);
                v33 = v32 >= j;
                if (v32 >= j)
                  v34 = (uint64_t *)v30;
                else
                  v34 = (uint64_t *)(v30 + 8);
                if (v33)
                  v31 = v30;
                v30 = *v34;
              }
              while (*v34);
              if ((uint64_t *)v31 != v41 && j >= *(unsigned int *)(v31 + 28))
              {
                v46[0] = *(_DWORD *)(v31 + 32);
                v46[1] = 0;
                (*(void (**)(uint64_t, _QWORD, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v44, v46);
              }
            }
            ++v39;
          }
          ++v44;
        }
        ++v20;
      }
      while (v20 != v38);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"GetRawLattice: NumStates ", 25);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" NumArcs ", 9);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" NumFinal ", 10);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47);
      }
      v18 = v44 != 0;
      goto LABEL_44;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": not producing lattice.", 24);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v47);
  }
  v18 = 0;
LABEL_44:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  return v18;
}

void sub_1ADB3F44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 144);
  _Unwind_Resume(a1);
}

void quasar::constructWords(unsigned int **a1, int a2, _QWORD *a3, std::vector<std::wstring> *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  BOOL v9;
  unsigned int v10;
  signed int v11;
  BOOL v12;
  BOOL v13;
  std::vector<std::string>::pointer p_p;
  std::string::size_type value_high;
  void *v16[2];
  char v17;
  std::vector<std::string> __p;
  std::string v19;
  _QWORD v20[3];
  std::vector<std::string> *v21;

  memset(v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v9 = 0;
    v10 = 0x80000000;
    do
    {
      v11 = *v5;
      v12 = *v5 == a2;
      if (*v5 != a2)
      {
        v13 = v9 || v11 == v10;
        v10 = *v5;
        if (!v13)
        {
          (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a3 + 88))(&__p, *a3, v11);
          if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
            p_p = (std::vector<std::string>::pointer)&__p;
          else
            p_p = __p.__begin_;
          if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
            value_high = HIBYTE(__p.__end_cap_.__value_);
          else
            value_high = (std::string::size_type)__p.__end_;
          std::string::append(&v19, (const std::string::value_type *)p_p, value_high);
          if (SHIBYTE(__p.__end_cap_.__value_) < 0)
            operator delete(__p.__begin_);
          v10 = *v5;
        }
      }
      ++v5;
      v9 = v12;
    }
    while (v5 != v6);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "▁");
  quasar::splitUnicodeCharSet((char *)&v19, (char *)v16, &__p);
  std::vector<std::string>::__vdeallocate(a4);
  *(std::vector<std::string> *)a4 = __p;
  memset(&__p, 0, sizeof(__p));
  v21 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1ADB3F618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  a22 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::endUtteranceForPauseResume(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  std::mutex *v8;
  int v9;
  _BYTE *v10;
  BOOL v11;
  uint64_t v12;

  v8 = (std::mutex *)(a1 + 2808);
  std::mutex::lock((std::mutex *)(a1 + 2808));
  v9 = *(unsigned __int8 *)(a1 + 2802);
  if (!*(_BYTE *)(a1 + 2801))
  {
    if ((a3 & a4 & 1) == 0 && !*(_BYTE *)(a1 + 2802))
    {
      v12 = 0;
      goto LABEL_18;
    }
    v10 = (_BYTE *)*a2;
    v10[580] = a4;
    v10[581] = 1;
    if (!v9 || (a3 & 1) == 0)
    {
      *(_WORD *)(a1 + 2801) = 0;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v10 = (_BYTE *)*a2;
  v10[580] = a4;
  v10[581] = 1;
  if (v9)
    v11 = a3 == 0;
  else
    v11 = 1;
  if (!v11)
  {
LABEL_13:
    v10[1072] = 1;
    *(_BYTE *)(a1 + 2802) = 0;
    goto LABEL_15;
  }
  v10[1073] = 1;
  *(_BYTE *)(a1 + 2801) = 0;
LABEL_15:
  v12 = 1;
  if (a3 && a4)
    v10[1073] = 1;
LABEL_18:
  std::mutex::unlock(v8);
  return v12;
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::decodeNextFrames(uint64_t a1, unsigned __int8 *a2, std::vector<std::wstring> **a3, quasar::SpeechRequestData **a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t *MultiBuffer;
  _BOOL4 v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t MultiChainMultiAudioBuffer;
  std::wstring *v26;
  std::vector<std::wstring>::pointer v27;
  unint64_t *p_size;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  float Average;
  float v33;
  uint64_t v34;
  float v35;
  std::wstring *v36;
  std::wstring *v37;
  unint64_t *v38;
  unint64_t v39;
  double SilenceFramesCountMs;
  int v41;
  float SilenceProbability;
  float SilencePosterior;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  std::vector<std::wstring> *v52;
  int v53;
  int v54;
  _BOOL4 v55;
  void **v56;
  __n128 v57;
  uint64_t v58;
  void *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  quasar::NFHatTransformer *v77;
  uint64_t v78;
  uint64_t i;
  _QWORD *v80;
  _QWORD *v81;
  std::vector<std::wstring> *v82;
  __int128 *p_p;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::vector<std::wstring> *v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  std::vector<std::wstring> *v93;
  BOOL v94;
  unint64_t v95;
  __int128 *end;
  std::vector<std::wstring>::pointer begin;
  unint64_t v98;
  uint64_t v99;
  quasar *v100;
  char v101;
  quasar *v102;
  float v103;
  quasar *v104;
  uint64_t *v105;
  int v106;
  uint64_t *v107;
  uint64_t value;
  std::vector<std::wstring>::pointer v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  _QWORD *v118;
  int v119;
  _BOOL4 v120;
  int v121;
  BOOL v122;
  std::vector<std::wstring> **v123;
  BOOL v124;
  std::vector<std::wstring>::pointer v125;
  uint64_t v126;
  BOOL isEnabledDoublePartial;
  std::vector<std::wstring> *v128;
  uint64_t v129;
  clockid_t v130;
  double Seconds;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::vector<std::wstring>::pointer v136;
  kaldi::LatticeScoreCache *v137;
  kaldi::TransitionModel *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::vector<std::wstring> *v149;
  uint64_t v150;
  std::wstring *v151;
  std::vector<std::wstring>::pointer v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  int v158;
  uint64_t *v159;
  char v160;
  quasar *v161;
  uint64_t v162;
  unsigned int v163;
  _BOOL4 v164;
  unsigned int v165;
  unsigned int v166;
  _BOOL4 v167;
  std::vector<std::wstring> **v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  unint64_t v176;
  __int128 v177;
  __int128 v178;
  BOOL v179;
  void *v180[2];
  char v181;
  float v182;
  __int128 v183;
  uint64_t v184;
  std::vector<std::wstring> v185;
  void *v186;
  char v187;
  uint64_t v188;
  _QWORD v189[2];
  void **v190;
  unsigned int v191;
  void *__src;
  _BYTE *v193;
  uint64_t v194;
  std::vector<std::wstring> v195;
  float v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  __int128 __p;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;

  v6 = *(_QWORD *)(a5 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
  {
    if (quasar::gLogLevel >= 4)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recognition cancelled", 21);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    return 1;
  }
  v11 = *(_QWORD *)(a1 + 2424);
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, &__p);
  if (quasar::RecogAudioBuffer::hasServerEndpointed((quasar::RecogAudioBuffer *)__p))
    v13 = *(_DWORD *)(a1 + 2072) < 1;
  else
    v13 = 0;
  v14 = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeMe(v11, 0, 0, v13, a2[736]);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_BYTE *)(a1 + 2076))
  {
    *(_BYTE *)(a1 + 2076) = 0;
    v18 = *(_DWORD *)(a1 + 2068);
    *(_DWORD *)(a1 + 2072) = v18;
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 2072);
  }
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v20 < 0 == v19)
    *(_DWORD *)(a1 + 2072) = v20;
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 812) + *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 808);
  v23 = v22 * v21;
  v24 = *((_DWORD *)*a4 + 2);
  if (quasar::OnlineLatticeBiglmFasterDecoder::endUtteranceForPauseResume(a1, a3, a2[736], v14 == 1))
  {
    if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    {
      MultiChainMultiAudioBuffer = quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
      v27 = *(std::vector<std::wstring>::pointer *)MultiChainMultiAudioBuffer;
      v26 = *(std::wstring **)(MultiChainMultiAudioBuffer + 8);
      v185.__begin_ = *(std::vector<std::wstring>::pointer *)MultiChainMultiAudioBuffer;
      v185.__end_ = v26;
      if (v26)
      {
        p_size = &v26->__r_.__value_.__l.__size_;
        do
          v29 = __ldxr(p_size);
        while (__stxr(v29 + 1, p_size));
      }
      if (v27)
      {
        if (quasar::gLogLevel >= 4)
        {
          v215 = 0u;
          v216 = 0u;
          v213 = 0u;
          v214 = 0u;
          v211 = 0u;
          v212 = 0u;
          v209 = 0u;
          v210 = 0u;
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Ending audio for secondary audio buffers at utterance boundary", 62);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers((quasar::MultiChainMultiAudioBuffer *)v27, v23);
      }
      if (v26)
      {
        v30 = &v26->__r_.__value_.__l.__size_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          (*(void (**)(std::wstring *))(v26->__r_.__value_.__r.__words[0] + 16))(v26);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v26);
        }
      }
    }
    return 4;
  }
  if (a2[736])
  {
    if (quasar::gLogLevel >= 4)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recognition Paused", 18);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    return 3;
  }
  LODWORD((*a3)[24].__begin_) = *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 812)
                              + *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 808);
  Average = 0.0;
  v33 = 0.0;
  v173 = v21;
  v175 = v24 + v22;
  v34 = (v24 + v22 - 1);
  if (v175 >= 1)
  {
    v33 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 2) + 64))(*((_QWORD *)a2 + 2), v34);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 2) + 72))(*((_QWORD *)a2 + 2)))
    {
      v35 = (*(float (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)a2 + 2) + 80))(*((_QWORD *)a2 + 2), v34, *(unsigned int *)(a1 + 2056));
      quasar::MovingAverage::add((quasar::MovingAverage *)(a1 + 1992), v35);
    }
  }
  v172 = v22;
  v176 = v14;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 2) + 72))(*((_QWORD *)a2 + 2)))
    Average = quasar::MovingAverage::getAverage((quasar::MovingAverage *)(a1 + 1992));
  v36 = (std::wstring *)*((_QWORD *)a2 + 84);
  v37 = (std::wstring *)*((_QWORD *)a2 + 85);
  v195.__begin_ = v36;
  v195.__end_ = v37;
  if (v37)
  {
    v38 = &v37->__r_.__value_.__l.__size_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v36)
  {
    if (quasar::SilencePosteriorGenerator::hasMoreAudio((quasar::SilencePosteriorGenerator *)v36))
    {
      memset(&v185, 0, sizeof(v185));
      quasar::SilencePosteriorGenerator::estimateSilenceDuration((uint64_t)v36, (uint64_t)&v185);
      if ((std::vector<std::wstring>::pointer)((char *)v185.__end_ - (char *)v185.__begin_) >= (std::vector<std::wstring>::pointer)5)
      {
        v215 = 0u;
        v216 = 0u;
        v213 = 0u;
        v214 = 0u;
        v211 = 0u;
        v212 = 0u;
        v209 = 0u;
        v210 = 0u;
        v207 = 0u;
        v208 = 0u;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"spg batch size > 1 unexpected because spg->config.frameByFrame should be set", 76);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
      }
      if (v185.__begin_)
      {
        v185.__end_ = v185.__begin_;
        operator delete(v185.__begin_);
      }
    }
    SilenceFramesCountMs = quasar::SilencePosteriorGenerator::getSilenceFramesCountMs((quasar::SilencePosteriorGenerator *)v36);
    v41 = (int)(SilenceFramesCountMs
              / (double)(int)quasar::SilencePosteriorGenerator::getFrameDurationMs((quasar::SilencePosteriorGenerator *)v36));
    SilenceProbability = quasar::SilencePosteriorGenerator::getSilenceProbability((quasar::SilencePosteriorGenerator *)v36);
    SilencePosterior = quasar::SilencePosteriorGenerator::getSilencePosterior((quasar::SilencePosteriorGenerator *)v36);
    if (quasar::gLogLevel >= 6)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"spgSilenceFramesCount=", 22);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" spgSilencePosterior=", 21);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" spgSilenceProbabilityRaw=", 26);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
    }
  }
  else
  {
    v41 = 0;
    SilenceProbability = 0.0;
    SilencePosterior = 0.0;
  }
  if (v37)
  {
    v46 = &v37->__r_.__value_.__l.__size_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      (*(void (**)(std::wstring *))(v37->__r_.__value_.__r.__words[0] + 16))(v37);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v37);
    }
  }
  v199 = -1;
  v198 = -1;
  v197 = -1;
  v196 = NAN;
  memset(&v195, 0, sizeof(v195));
  v193 = 0;
  __src = 0;
  v194 = 0;
  v191 = 0;
  v48 = *((_QWORD *)*a4 + 3);
  if (*(_BYTE *)(v48 + 624))
    v49 = *(unsigned __int8 *)(v48 + 738) == 0;
  else
    v49 = 0;
  v50 = v176;
  v190 = 0;
  if (v49 || BYTE1((*a3)[45].__end_))
  {
    v51 = operator new();
    *(_QWORD *)v51 = 0;
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)&__p = 0;
    std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&v190, (void **)v51);
    std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&__p, 0);
  }
  v169 = v41;
  v167 = v49;
  LODWORD(v52) = v175 * v21;
  v171 = v23;
  if ((_DWORD)v176 == 1)
  {
    v53 = 0;
    goto LABEL_214;
  }
  v54 = *(_DWORD *)(a1 + 2168);
  v55 = v54 < 1 || v175 % v54 == 0;
  v166 = v175 * v21;
  if (BYTE4(v176) && v55)
  {
    v56 = (void **)(a1 + 2520);
    *(_QWORD *)(a1 + 2528) = *(_QWORD *)(a1 + 2520);
    *(_QWORD *)(a1 + 2568) = 0x4110000000000000;
    *(_QWORD *)(a1 + 2576) = 0;
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2608) = 0;
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&(*a3)[2]);
    (*a3)[3].__end_ = (*a3)[3].__begin_;
    v164 = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback(*(_QWORD *)(a1 + 2424), a1 + 2520, (__int128 *)(a1 + 2544), (int *)(a1 + 2568), (float *)(a1 + 2572), *(kaldi::WordBoundaryInfo **)(a1 + 1344), (_DWORD *)(a1 + 2576), (_DWORD *)(a1 + 2580), v57, (std::vector<unsigned int> *)(a1 + 2584), (int *)(a1 + 2608), (int *)(a1 + 2464), (_DWORD *)(a1 + 2612), *(_BYTE *)(a1 + 1360), (uint64_t *)(a1 + 2472), *(_BYTE *)(a1 + 2496), *(_WORD *)(a1 + 2157), HIBYTE(*(_WORD *)(a1 + 2157)), *(uint64_t ***)(a1 + 1456),
             *(_DWORD *)(a1 + 2152),
             (uint64_t *)v190,
             *(_BYTE *)(a1 + 2172));
    if (v190)
    {
      v58 = (uint64_t)*v190;
      v59 = v190[1];
      if (*v190 != v59)
      {
        v60 = *(char **)(a1 + 2520);
        *(_QWORD *)(a1 + 2528) = v60;
        v61 = (_QWORD *)(a1 + 2536);
        do
        {
          if ((unint64_t)v60 >= *v61)
          {
            v63 = (char *)*v56;
            v64 = (v60 - (_BYTE *)*v56) >> 2;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v66 = *v61 - (_QWORD)v63;
            if (v66 >> 1 > v65)
              v65 = v66 >> 1;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
              v67 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 2536, v67);
              v60 = *(char **)(a1 + 2528);
              v63 = *(char **)(a1 + 2520);
            }
            else
            {
              v68 = 0;
            }
            v69 = &v68[4 * v64];
            *(_DWORD *)v69 = *(_DWORD *)(v58 + 36);
            v62 = v69 + 4;
            while (v60 != v63)
            {
              v70 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v69 - 1) = v70;
              v69 -= 4;
            }
            *(_QWORD *)(a1 + 2520) = v69;
            *(_QWORD *)(a1 + 2528) = v62;
            *(_QWORD *)(a1 + 2536) = &v68[4 * v67];
            if (v63)
              operator delete(v63);
          }
          else
          {
            *(_DWORD *)v60 = *(_DWORD *)(v58 + 36);
            v62 = v60 + 4;
          }
          *(_QWORD *)(a1 + 2528) = v62;
          v58 += 40;
          v60 = v62;
        }
        while ((void *)v58 != v59);
      }
    }
    if (*(_BYTE *)(a1 + 1361))
    {
      *(_BYTE *)(a1 + 2692) = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(*(_QWORD *)(a1 + 2424), (unint64_t *)(a1 + 2720), (_DWORD *)(a1 + 2744));
      v71 = *(char **)(a1 + 2720);
      v72 = *(_QWORD *)(a1 + 2728);
      if (v71 != (char *)v72)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 2520), v71, v72, (v72 - (uint64_t)v71) >> 2);
    }
    if (*(_BYTE *)(a1 + 2148))
    {
      v73 = *(_DWORD *)(a1 + 2152);
      v74 = *((_QWORD *)a2 + 22);
      v189[0] = *((_QWORD *)a2 + 21);
      v189[1] = v74;
      if (v74)
      {
        v75 = (unint64_t *)(v74 + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      quasar::constructWords((unsigned int **)(a1 + 2544), v73, v189, *a3 + 2);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v189);
    }
    else if (v164)
    {
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, (int **)(a1 + 2520), (uint64_t *)&(*a3)[2], (char **)&(*a3)[3], 1);
    }
    if (LOBYTE((*a3)[45].__end_))
      quasar::Decoder::splitLmePartialResult(*a3 + 2, (uint64_t **)(*((_QWORD *)*a4 + 3) + 80));
    *(_DWORD *)(a1 + 2512) += *(_DWORD *)(a1 + 2576);
    v23 = v171;
    v50 = v176;
    v21 = v173;
  }
  v77 = *(quasar::NFHatTransformer **)(a1 + 2792);
  if (v77)
  {
    quasar::NFHatTransformer::estimateSilenceDuration(v77, v33, v21);
    *(_DWORD *)(a1 + 2568) = *(_DWORD *)(*(_QWORD *)(a1 + 2792) + 80);
  }
  if (quasar::gLogLevel >= 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v185);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, (uint64_t)"Raw pauses = [", 14);
    v78 = *(_QWORD *)(a1 + 2584);
    for (i = *(_QWORD *)(a1 + 2592); v78 != i; v78 += 4)
    {
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" ", 1);
    }
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, (uint64_t)"], words = [", 12);
    v82 = *a3;
    *(_QWORD *)&v183 = " ";
    *((_QWORD *)&v183 + 1) = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v82[2], (uint64_t *)&v183);
    if ((SBYTE7(v201) & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if ((SBYTE7(v201) & 0x80u) == 0)
      v84 = BYTE7(v201);
    else
      v84 = *((_QWORD *)&__p + 1);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)p_p, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"]", 1);
    if (SBYTE7(v201) < 0)
      operator delete((void *)__p);
    if (quasar::gLogLevel >= 6)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::stringbuf::str();
      if (v184 >= 0)
        v86 = (uint64_t)&v183;
      else
        v86 = v183;
      if (v184 >= 0)
        v87 = HIBYTE(v184);
      else
        v87 = *((_QWORD *)&v183 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v86, v87);
      if (SHIBYTE(v184) < 0)
        operator delete((void *)v183);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
    }
    v185.__begin_ = (std::vector<std::wstring>::pointer)*MEMORY[0x1E0DE4F60];
    *(std::vector<std::wstring>::pointer *)((char *)&v185.__begin_ + v185.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::wstring>::pointer *)(MEMORY[0x1E0DE4F60] + 24);
    v185.__end_ = (std::vector<std::wstring>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
    if (v187 < 0)
      operator delete(v186);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v188);
    v23 = v171;
    v50 = v176;
  }
  v88 = *(_QWORD *)(a1 + 2456);
  if (v88)
  {
    v89 = *a3;
    v185.__begin_ = (std::vector<std::wstring>::pointer)" ";
    v185.__end_ = (std::vector<std::wstring>::pointer)1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v89[2], (uint64_t *)&v185);
    v90 = quasar::StreamingConfidenceRunner::compute(v88, (std::string *)&__p, *(_DWORD *)(a1 + 2576), *(_DWORD *)(a1 + 2568), *(float *)(a1 + 2580));
    v52 = (std::vector<std::wstring> *)v166;
    if (SBYTE7(v201) < 0)
      operator delete((void *)__p);
    v88 = (int)(v90 * 100.0);
  }
  else
  {
    v52 = (std::vector<std::wstring> *)v166;
  }
  if (*(float *)(a1 + 2572) == INFINITY)
    *(_DWORD *)(a1 + 2572) = 1091567616;
  memset(&v185, 0, sizeof(v185));
  if (*(_QWORD *)(a1 + 2440) || quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    v91 = *(int *)(a1 + 2612);
    v92 = (uint64_t)(*(_QWORD *)(a1 + 2528) - *(_QWORD *)(a1 + 2520)) >> 2;
    v93 = *a3;
    v94 = v92 >= v91;
    v95 = v92 - v91;
    if (v95 != 0 && v94)
    {
      begin = v93[2].__begin_;
      end = (__int128 *)v93[2].__end_;
      v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      if (v95 < v98)
        v98 = v95;
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v185, (std::string *)v185.__end_, (std::string *)&begin[v98], end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)&begin[v98]) >> 3));
    }
    else if (&v185 != &v93[2])
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v185, (std::string *)v93[2].__begin_, (__int128 *)v93[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v93[2].__end_ - (char *)v93[2].__begin_) >> 3));
    }
  }
  v182 = 0.0;
  if (a2[562])
  {
    v99 = *(_QWORD *)(a1 + 2440);
    if (v99)
    {
      v100 = (quasar *)v88;
      v183 = 0uLL;
      v184 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v99 + 48))(v99, a1 + 2584, &v183);
      v199 = *(_DWORD *)(a1 + 2612);
      v198 = *(_DWORD *)(a1 + 2568);
      v197 = v172;
      v196 = *(float *)(a1 + 2572);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v195, (std::string *)v185.__begin_, (__int128 *)v185.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v185.__end_ - (char *)v185.__begin_) >> 3));
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__src, (char *)v183, *((uint64_t *)&v183 + 1), (uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 2);
      v191 = *(_DWORD *)(a1 + 2608);
      if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
      {
        if (*((_DWORD *)*a4 + 1))
        {
          v101 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2440) + 56))(*(_QWORD *)(a1 + 2440));
          quasar::OnlineLatticeBiglmFasterDecoder::aggregateEpFeatures(a1, (int *)&v199, (int *)&v198, (int *)&v197, &v196, (__int128 **)&v195, (char **)&__src, (int *)&v191, v101, *((_DWORD *)*a4 + 2));
        }
        else
        {
          quasar::OnlineLatticeBiglmFasterDecoder::resetPrevEpFeatures((quasar::OnlineLatticeBiglmFasterDecoder *)a1);
        }
      }
      if (!(v175
           % (*(int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 16))))
      {
        v102 = (quasar *)v198;
        v103 = v196;
        v104 = (quasar *)v191;
        v162 = a1 + 452;
        v161 = (quasar *)__PAIR64__(v173, v100);
        v163 = v199;
        v165 = v197;
        if ((***(unsigned int (****)(_QWORD, float *, float, float, float, float, float))(a1 + 2440))(*(_QWORD *)(a1 + 2440), &v182, v196, Average, v33, SilenceProbability, SilencePosterior))
        {
          if (quasar::gLogLevel >= 4)
          {
            v215 = 0u;
            v216 = 0u;
            v213 = 0u;
            v214 = 0u;
            v211 = 0u;
            v212 = 0u;
            v209 = 0u;
            v210 = 0u;
            v207 = 0u;
            v208 = 0u;
            v205 = 0u;
            v206 = 0u;
            v203 = 0u;
            v204 = 0u;
            v201 = 0u;
            v202 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Server side end pointer triggered frame ", 40);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
          }
          *(_BYTE *)(a1 + 2076) = 1;
          if (quasar::SpeechRequestData::isEndPointCandidateEnabled(*a4))
          {
            if (a2[561])
            {
              v105 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
              quasar::MultiAudioBuffer::getBuffer(*v105, 0, &__p);
              v106 = quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
              if (v106)
                (*((void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *))(*a3)[23].__end_->__r_.__value_.__l.__data_
                 + 15))((*a3)[23].__end_, v52);
            }
          }
          else
          {
            v107 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
            quasar::MultiAudioBuffer::getBuffer(*v107, 0, &__p);
            (*(void (**)(_QWORD))(*(_QWORD *)__p + 48))(__p);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            if (*(double *)(a1 + 2504) == 0.0)
            {
              LODWORD(v161) = v169;
              quasar::EndPointer::featuresToJsonString(*(_QWORD *)(a1 + 2440), (quasar *)v163, v102, (quasar *)v165, (uint64_t *)&v195, (unsigned int **)&__src, v104, v100, v103, Average, v33, SilenceProbability, SilencePosterior, v161);
              value = (uint64_t)(*a3)[17].__end_cap_.__value_;
              std::string::basic_string[abi:ne180100]<0>(v180, "ep-features");
              quasar::SpeechRequestResultData::addAA(value, (__int128 *)v180, (const std::string *)&__p);
              if (v181 < 0)
                operator delete(v180[0]);
              *(_DWORD *)(a1 + 448) = v165;
              *(_QWORD *)(a1 + 2504) = 0x3FF0000000000000;
              if (SBYTE7(v201) < 0)
                operator delete((void *)__p);
            }
          }
        }
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2440) + 32))(*(_QWORD *)(a1 + 2440)))
      {
        if (quasar::gLogLevel >= 5)
        {
          v215 = 0u;
          v216 = 0u;
          v213 = 0u;
          v214 = 0u;
          v211 = 0u;
          v212 = 0u;
          v209 = 0u;
          v210 = 0u;
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reporting end point status=", 27);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2440) + 40))(*(_QWORD *)(a1 + 2440));
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
        }
        if (a2[561])
        {
          v109 = (*a3)[23].__end_;
          v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2440) + 40))(*(_QWORD *)(a1 + 2440));
          (*(void (**)(std::vector<std::wstring>::pointer, uint64_t))(v109->__r_.__value_.__r.__words[0] + 64))(v109, v110);
        }
      }
      if ((_QWORD)v183)
      {
        *((_QWORD *)&v183 + 1) = v183;
        operator delete((void *)v183);
      }
      v50 = v176;
      v88 = (uint64_t)v100;
    }
  }
  if (a2[561] && (int)v52 > *(_DWORD *)(a1 + 2464) * v173)
  {
    if (*(_QWORD *)(a1 + 2440))
    {
      v111 = v199;
      v112 = v198;
      v113 = v196;
      v114 = v191;
    }
    else
    {
      v111 = *(unsigned int *)(a1 + 2612);
      v199 = *(_DWORD *)(a1 + 2612);
      v112 = *(unsigned int *)(a1 + 2568);
      v198 = *(_DWORD *)(a1 + 2568);
      v113 = *(float *)(a1 + 2572);
      v196 = v113;
      v114 = *(unsigned int *)(a1 + 2608);
      v191 = *(_DWORD *)(a1 + 2608);
    }
    LODWORD(v162) = v169;
    (*((void (**)(std::vector<std::wstring>::pointer, uint64_t, uint64_t, std::vector<std::wstring> *, void **, uint64_t, uint64_t, _QWORD, double, double, double, double, double, double, unint64_t, uint64_t))(*a3)[23].__end_->__r_.__value_.__l.__data_
     + 13))((*a3)[23].__end_, v111, v112, &v195, &__src, v114, v88, *(unsigned int *)(a1 + 2576), v113, Average, v33, v182, SilenceProbability, SilencePosterior, __PAIR64__(v173, v52), v162);
  }
  if (!a2[562] || !quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    v115 = 0;
    goto LABEL_193;
  }
  v183 = 0uLL;
  v184 = 0;
  (*(void (**)(_QWORD, uint64_t, __int128 *))(**(_QWORD **)(a1 + 2448) + 48))(*(_QWORD *)(a1 + 2448), a1 + 2584, &v183);
  LODWORD(v180[0]) = 0;
  if ((***(unsigned int (****)(_QWORD, void **, _QWORD, _QWORD, _QWORD, std::vector<std::wstring> *, __int128 *, _QWORD, float, float, float, float, float, unint64_t, uint64_t, int))(a1 + 2448))(*(_QWORD *)(a1 + 2448), v180, *(unsigned int *)(a1 + 2612), *(unsigned int *)(a1 + 2568), v172, &v185, &v183, *(unsigned int *)(a1 + 2608), *(float *)(a1 + 2572), 0.0, v33, SilenceProbability, SilencePosterior, __PAIR64__(v173, v88), a1 + 452, v169)&& !(v175% (*(int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 16))))
  {
    v158 = v88;
    if (!*(_BYTE *)(a1 + 1937)
      || (v159 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4),
          quasar::MultiAudioBuffer::getBuffer(*v159, 0, &__p),
          v160 = quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p),
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p),
          (v160 & 1) != 0))
    {
      if (quasar::gLogLevel < 4)
      {
        LODWORD(v88) = v158;
      }
      else
      {
        v215 = 0u;
        v216 = 0u;
        v213 = 0u;
        v214 = 0u;
        v211 = 0u;
        v212 = 0u;
        v209 = 0u;
        v210 = 0u;
        v207 = 0u;
        v208 = 0u;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Utterance detector triggered ", 29);
        LODWORD(v88) = v158;
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      v115 = 1;
      goto LABEL_185;
    }
    if (quasar::gLogLevel < 4)
    {
      LODWORD(v88) = v158;
    }
    else
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Since endpointer is not enabled ignoring utterance ", 51);
      LODWORD(v88) = v158;
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
  }
  v115 = 0;
LABEL_185:
  v116 = *(_DWORD *)(a1 + 1924);
  if (v116 >= 1 && v23 > v116)
  {
    if (quasar::gLogLevel >= 4)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Utterance detector force triggered because current utterance has too many frames: ", 82);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    v115 = 1;
  }
  if ((_QWORD)v183)
  {
    *((_QWORD *)&v183 + 1) = v183;
    operator delete((void *)v183);
  }
LABEL_193:
  v117 = *(_DWORD *)(a1 + 1008);
  if (v117 && (int)v52 - *(_DWORD *)(a1 + 2516) >= v117)
  {
    *(_DWORD *)(a1 + 2516) = (_DWORD)v52;
    if (quasar::gLogLevel >= 4)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Sending recognition progress report for frameCount=", 51);
      v118 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" processedAudioDurationMs=", 26);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    if (!a2[561])
      goto LABEL_213;
    (*((void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *))(*a3)[23].__end_->__r_.__value_.__l.__data_
     + 9))((*a3)[23].__end_, v52);
  }
  if (a2[561])
  {
    (*((void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *))(*a3)[23].__end_->__r_.__value_.__l.__data_
     + 10))((*a3)[23].__end_, v52);
    v170 = v88;
    if (*(_BYTE *)(a1 + 2161))
    {
      v119 = v173;
      v120 = v167;
      if (v33 >= *(float *)(a1 + 2164))
        v121 = *(_DWORD *)(a1 + 2876) + 1;
      else
        v121 = 0;
      *(_DWORD *)(a1 + 2876) = v121;
    }
    else
    {
      v121 = *(_DWORD *)(a1 + 2568);
      v119 = v173;
      v120 = v167;
    }
    v122 = quasar::Decoder::exceedsDoublePartialThreshold((quasar::Decoder *)a1, v121 * v119);
    v183 = 0uLL;
    v184 = 0;
    if (v120 && v190 && *v190 != v190[1])
    {
      quasar::betterTracebackWordsToTokens((uint64_t *)v190, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&__p);
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)&v183, (uint64_t)&__p);
      v180[0] = &__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v180);
    }
    v123 = a3;
    v124 = v122;
    v174 = v115;
    v168 = v123;
    v52 = *v123;
    v125 = (*v123)[23].__end_;
    v126 = *((unsigned int *)*a4 + 3);
    isEnabledDoublePartial = quasar::Decoder::isEnabledDoublePartial((quasar::Decoder *)a1);
    LOBYTE(__p) = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&__p + 1, "▁");
    v128 = v52 + 2;
    BYTE1(v162) = v124;
    LOBYTE(v162) = isEnabledDoublePartial;
    LODWORD(v52) = v166;
    (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, unsigned __int8 *, unsigned __int8 *, uint64_t, __int128 *))(v125->__r_.__value_.__r.__words[0] + 24))(v125, v128, v126, 1, v166, v170, &v183, a2 + 768, a2 + 792, v162, &__p);
    v50 = v176;
    v115 = v174;
    a3 = v168;
    if (SHIBYTE(v201) < 0)
      operator delete(*((void **)&__p + 1));
    *(_QWORD *)&__p = &v183;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
LABEL_213:
  *(_QWORD *)&__p = &v185;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v53 = v115 != 0;
LABEL_214:
  if (*(_QWORD *)(a1 + 2760)
    && (v175 > *(_DWORD *)(a1 + 2464) || !quasar::SpeechRequestData::isRequestEagerResultDurationEmpty((std::mutex *)*a4)))
  {
    *(_DWORD *)(a1 + 2688) = v172;
    *(_BYTE *)(a1 + 2753) = 0;
    if (BYTE4(v176) && (!*(_BYTE *)(a1 + 1361) || v50 == 1))
      *(_BYTE *)(a1 + 2692) = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(*(_QWORD *)(a1 + 2424), (unint64_t *)(a1 + 2720), (_DWORD *)(a1 + 2744));
    v129 = *(_QWORD *)(a1 + 2792);
    if (v129)
      *(_DWORD *)(a1 + 2744) = *(_DWORD *)(v129 + 80);
    *(float *)(a1 + 2748) = v33;
    if (quasar::gLogLevel >= 5)
    {
      __p = 0uLL;
      *(_QWORD *)&v201 = 0;
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, (int **)(a1 + 2720), (uint64_t *)(a1 + 2696), (char **)&__p, 1);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    *(_BYTE *)(a1 + 2752) = (_DWORD)v176 != 1;
    v179 = 0;
    LODWORD(v180[0]) = 0;
    if (quasar::SpeechRequestData::processedRequestEagerResultDuration((std::mutex *)*a4, (int)v52)
      && !quasar::EagerDecision::matches(*(const void ***)(a1 + 2760), **(_DWORD **)(a1 + 2776)))
    {
      *(_BYTE *)(a1 + 2753) = 1;
    }
    *(_BYTE *)(a1 + 2754) = v175
                          % (*(int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 16)) == 0;
    quasar::EagerDecision::eval(*(quasar::EagerDecision **)(a1 + 2760), (const quasar::EagerFeatures *)(a1 + 2688), &v179, (int *)v180);
    if (LODWORD(v180[0]) || *(_BYTE *)(a1 + 1969))
    {
      quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, &__p);
      Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v130);
      v132 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(_QWORD *)(a1 + 2424), *(_DWORD *)(*(_QWORD *)(a1 + 2424) + 808), 1);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v185);
      v135 = *(_QWORD *)(a1 + 2424);
      v136 = v185.__begin_;
      v137 = (kaldi::LatticeScoreCache *)(*a3)[20].__end_;
      v138 = (kaldi::TransitionModel *)quasar::PTree::begin(*((quasar::PTree **)a2 + 4));
      if (kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(v135, (uint64_t)v136, v137, v138))
      {
        v139 = (char *)operator new(0x70uLL);
        *((_QWORD *)v139 + 2) = 0;
        *(_QWORD *)v139 = &unk_1E5D44160;
        *((_QWORD *)v139 + 1) = 0;
        *(_OWORD *)(v139 + 40) = 0u;
        *(_OWORD *)(v139 + 56) = 0u;
        *(_OWORD *)(v139 + 72) = 0u;
        *(_OWORD *)(v139 + 88) = 0u;
        *((_QWORD *)v139 + 13) = 0;
        *(_OWORD *)(v139 + 24) = 0u;
        *(_QWORD *)&__p = v139 + 24;
        *((_QWORD *)&__p + 1) = v139;
        *((_DWORD *)v139 + 6) = v180[0];
        std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,quasar::DecoderPassData&,void>((const quasar::DecoderPassData *)a2, &v183);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](__p + 8, &v183);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v183);
        std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>((const quasar::DecoderChainOutput *)*a3, &v183);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](__p + 24, &v183);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v183);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(__p + 24) + 320), (uint64_t *)&v185);
        v140 = __p;
        *(double *)(*(_QWORD *)(__p + 24) + 456) = Seconds;
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v140 + 40), (uint64_t *)a4);
        v141 = __p;
        *(_QWORD *)(__p + 56) = a1 + 456;
        *(_DWORD *)(v141 + 64) = *(_DWORD *)(a1 + 2872);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v141 + 72), (uint64_t *)(a1 + 2776));
        v178 = __p;
        if (*((_QWORD *)&__p + 1))
        {
          v142 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 232))(a1, &v178);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v178);
        v177 = __p;
        if (*((_QWORD *)&__p + 1))
        {
          v144 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }
        LOBYTE(v183) = 0;
        quasar::OnlineLatticeBiglmFasterDecoder::latticeGenerationRun(&v177, (unsigned __int8 *)&v183);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v177);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      }
      else if (quasar::gLogLevel >= 4)
      {
        v215 = 0u;
        v216 = 0u;
        v213 = 0u;
        v214 = 0u;
        v211 = 0u;
        v212 = 0u;
        v209 = 0u;
        v210 = 0u;
        v207 = 0u;
        v208 = 0u;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to get recognition lattice", 33);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      v146 = (std::__shared_weak_count *)v185.__end_;
      if (v185.__end_)
      {
        v147 = &v185.__end_->__r_.__value_.__l.__size_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
    }
    v50 = v176;
  }
  if (((v50 != 1) & ~v53) != 0)
  {
    v10 = 3;
  }
  else
  {
    v149 = *a3;
    BYTE4(v149[24].__begin_) = v50 == 1;
    BYTE5(v149[24].__begin_) = 1;
    if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    {
      v150 = quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
      v152 = *(std::vector<std::wstring>::pointer *)v150;
      v151 = *(std::wstring **)(v150 + 8);
      v185.__begin_ = *(std::vector<std::wstring>::pointer *)v150;
      v185.__end_ = v151;
      if (v151)
      {
        v153 = &v151->__r_.__value_.__l.__size_;
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      if (v152)
      {
        if (quasar::gLogLevel >= 4)
        {
          v215 = 0u;
          v216 = 0u;
          v213 = 0u;
          v214 = 0u;
          v211 = 0u;
          v212 = 0u;
          v209 = 0u;
          v210 = 0u;
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Ending audio for secondary audio buffers at utterance boundary", 62);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers((quasar::MultiChainMultiAudioBuffer *)v152, v171);
      }
      if (v151)
      {
        v155 = &v151->__r_.__value_.__l.__size_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          (*(void (**)(std::wstring *))(v151->__r_.__value_.__r.__words[0] + 16))(v151);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v151);
        }
      }
      if (a2[562] && *(_QWORD *)(a1 + 2440))
      {
        *(_DWORD *)(a1 + 2616) = v199;
        *(_DWORD *)(a1 + 2620) = v198;
        *(float *)(a1 + 2624) = v196;
        if ((std::vector<std::wstring> *)(a1 + 2632) != &v195)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 2632), (std::string *)v195.__begin_, (__int128 *)v195.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v195.__end_ - (char *)v195.__begin_) >> 3));
        if ((void **)(a1 + 2656) != &__src)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 2656), (char *)__src, (uint64_t)v193, (v193 - (_BYTE *)__src) >> 2);
        *(_DWORD *)(a1 + 2680) = v191;
      }
    }
    v10 = 4;
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&v190, 0);
  if (__src)
  {
    v193 = __src;
    operator delete(__src);
  }
  *(_QWORD *)&__p = &v195;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v10;
}

void sub_1ADB41430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v45;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x280]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  v45 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v45;
    operator delete(v45);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_1ADB41444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a46 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&STACK[0x280]);
  std::ostringstream::~ostringstream((uint64_t)&a47);
  JUMPOUT(0x1ADB41684);
}

void sub_1ADB41470()
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x280]);
  JUMPOUT(0x1ADB4161CLL);
}

void sub_1ADB41494()
{
  void *v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  v0 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB414A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  JUMPOUT(0x1ADB41684);
}

void sub_1ADB414E0()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v0;
    operator delete(v0);
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  v1 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v1;
    operator delete(v1);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB41504()
{
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  JUMPOUT(0x1ADB41524);
}

void sub_1ADB4151C()
{
  uint64_t v0;
  uint64_t *v1;

  v1 = &v0;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1ADB4162CLL);
}

void sub_1ADB4153C()
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x280]);
  JUMPOUT(0x1ADB4162CLL);
}

void sub_1ADB4154C()
{
  void *v0;

  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x1ADB4155CLL);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x230], 0);
  v0 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB41570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_1ADB41594()
{
  void *v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  v0 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB415A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x280]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_1ADB415BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  std::ostringstream::~ostringstream((uint64_t)&a44);
  JUMPOUT(0x1ADB41684);
}

void sub_1ADB41604()
{
  JUMPOUT(0x1ADB4162CLL);
}

void sub_1ADB41618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;

  if (__p)
    operator delete(__p);
  STACK[0x280] = (unint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x230], 0);
  v44 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v44;
    operator delete(v44);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB41640()
{
  void *v0;

  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x230], 0);
  v0 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x280] = (unint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB41648()
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&STACK[0x280]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  JUMPOUT(0x1ADB416C0);
}

void sub_1ADB41658(_Unwind_Exception *a1)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_1ADB416B4()
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  JUMPOUT(0x1ADB416C0);
}

unint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeMe(uint64_t a1, int a2, int a3, int a4, int a5)
{
  char v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  __n128 v12;
  clockid_t v13;
  float v14;
  float v15;
  clockid_t v16;
  clockid_t v17;
  __n128 v18;
  float v19;
  int v20;
  uint64_t v21;

  if (a3 && *(_DWORD *)(a1 + 800) == 1)
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ResetDecoder(a1);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 696) + 8))(*(_QWORD *)(a1 + 696), (*(_DWORD *)(a1 + 808) + *(_DWORD *)(a1 + 368) - 1));
  v9 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 696) + 16))(*(_QWORD *)(a1 + 696), (*(_DWORD *)(a1 + 808) + *(_DWORD *)(a1 + 368) - 1)) & 1) == 0)
  {
    v10 = -1;
    do
    {
      if (++v10 >= *(_DWORD *)(a1 + 644))
        break;
      v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 696) + 32))(*(_QWORD *)(a1 + 696), (*(_DWORD *)(a1 + 812)+ *(_DWORD *)(a1 + 808)+ *(_DWORD *)(a1 + 804)+ *(_DWORD *)(a1 + 368)));
      if (((v11 | a5) & 1) == 0)
      {
        std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 88, *(int *)(a1 + 808) + 2);
        kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v13);
        v15 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::DecodableInterface>(a1, *(_QWORD *)(a1 + 696), *(_DWORD *)(a1 + 808) + 1, v14);
        kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, _CLOCK_REALTIME);
        kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v16);
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 808) + 1, v15);
        v12.n128_f64[0] = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)1u);
      }
      if (((*(uint64_t (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 696) + 16))(*(_QWORD *)(a1 + 696), (*(_DWORD *)(a1 + 808) - v11 + *(_DWORD *)(a1 + 368)), v12) & 1) != 0|| a4)
      {
        if (a2)
          kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(a1, *(_DWORD *)(a1 + 808) + 1, 0);
        v8 = 1;
        if (!v11)
        {
LABEL_19:
          v20 = *(_DWORD *)(a1 + 808) + 1;
          *(_DWORD *)(a1 + 808) = v20;
          if (!a5)
            v9 = 1;
          goto LABEL_21;
        }
      }
      else
      {
        if (((v11 | a5) & 1) == 0
          && !((*(_DWORD *)(a1 + 808) + 1) % *(_DWORD *)(a1 + 556)))
        {
          kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v17);
          v19 = *(float *)(a1 + 552) * 0.1;
          kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens((_QWORD *)a1, (clockid_t)(*(_DWORD *)(a1 + 808) + 1), v19);
          v18.n128_f64[0] = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)2u);
        }
        if (!v11)
          goto LABEL_19;
      }
      ++*(_DWORD *)(a1 + 812);
      v20 = *(_DWORD *)(a1 + 808);
LABEL_21:
      ++*(_DWORD *)(a1 + 816);
    }
    while (!(*(unsigned int (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 696) + 16))(*(_QWORD *)(a1 + 696), (v20 + *(_DWORD *)(a1 + 368) - 1), v18));
  }
  if ((v8 & 1) != 0)
    v21 = 1;
  else
    v21 = 2;
  *(_DWORD *)(a1 + 800) = v21;
  return v21 | ((unint64_t)v9 << 32);
}

BOOL kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, float *a5, kaldi::WordBoundaryInfo *a6, _DWORD *a7, _DWORD *a8, __n128 a9, std::vector<unsigned int> *a10, int *a11, int *a12, _DWORD *a13, char a14, uint64_t *a15, char a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t **a19, int a20,uint64_t *a21,char a22)
{
  unint64_t *v22;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  _BOOL8 v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  _BOOL4 isSilencePhone;
  float v64;
  int v65;
  BOOL v66;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  void *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  void *v96;
  char *v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  char v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  __int128 *v123;
  uint64_t *v124;
  char *v125;
  std::vector<unsigned int> *v126;
  char *v127;
  int v128;
  BOOL v129;
  void *v130;
  void *v131;
  char *v132;
  char *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  __int128 v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  int v159;
  _DWORD *v161;
  uint64_t *v163;
  unint64_t v164;
  std::vector<unsigned int>::pointer begin;
  uint64_t v168;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unint64_t v170;
  int v171;
  int v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  unsigned int *v177;
  std::vector<unsigned int>::pointer v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  unsigned int *v184;
  unsigned int v185;
  std::vector<unsigned int>::size_type v186;
  _QWORD *v187;
  __int128 v192;
  int v194;
  uint64_t v195;
  int v197;
  char v200;
  char *v201;
  char *v202;
  char *v203;
  void *v204;
  uint64_t *v205;
  uint64_t *v206;
  void *v207[2];
  char *v208;
  void *__p[2];
  char *v210;
  __int128 v211;
  uint64_t v212;
  _QWORD *v213;
  void **v214;

  v22 = *(unint64_t **)(a1 + 8);
  if (!v22)
    return 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)&v192 = a11;
  *((_QWORD *)&v192 + 1) = a10;
  do
  {
    v27 = *((unsigned int *)v22 + 2);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(a1 + 328);
      if (a17)
      {
        v29 = *v22;
        a9.n128_f32[0] = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160), *v22);
        if ((a9.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
        {
          if (!v25 || (a9.n128_u32[0] = *(_DWORD *)(v25 + 12), a9.n128_f32[0] > *(float *)(v28 + 32 * v27 + 12)))
          {
            a9.n128_f32[0] = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), HIDWORD(v29));
            if ((a9.n128_u32[0] & 0x7FFFFFFF) < 0x7F800000)
              v25 = v28 + 32 * v27;
          }
        }
      }
      if (!v24 || (a9.n128_u32[0] = *(_DWORD *)(v24 + 12), a9.n128_f32[0] > *(float *)(v28 + 32 * v27 + 12)))
        v24 = v28 + 32 * v27;
    }
    v22 = (unint64_t *)v22[2];
    ++v26;
  }
  while (v22);
  if (!v24)
    return 0;
  if (a7)
    *a7 = v26;
  if ((a18 & (v25 != 0)) != 0)
    v24 = v25;
  if (a8)
  {
    a9.n128_u32[0] = *(_DWORD *)(v24 + 12);
    *a8 = a9.n128_u32[0];
  }
  v30 = 0;
  v31 = *(_DWORD *)(a1 + 816);
  if (a4)
  {
    v32 = v24;
    if (v31 >= 1)
    {
      v30 = 0;
      v32 = v24;
      while (v32)
      {
        v33 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 > 1)
        {
          v35 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), v33 >> 1);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v35))
            break;
          v33 = *(_QWORD *)v32;
          v34 = *(_DWORD *)(v32 + 8);
        }
        else
        {
          v34 = *(_DWORD *)(v32 + 8);
          if (v33 >> 33 && v33 >> 33 != *(_DWORD *)(a1 + 612))
            break;
        }
        if ((v33 & 0xFFFFFFFE) != 0)
          ++v30;
        if (v34 >> 6)
          v32 = *(_QWORD *)(a1 + 328) + ((unint64_t)(v34 & 0xFFFFFFC0) >> 1);
        else
          v32 = 0;
        v31 = *(_DWORD *)(a1 + 816);
        if (v30 >= v31)
          goto LABEL_41;
      }
      *a4 = v30;
      v31 = *(_DWORD *)(a1 + 816);
      goto LABEL_42;
    }
  }
  else
  {
    v32 = v24;
  }
LABEL_41:
  if (a4)
  {
LABEL_42:
    if (v30 == v31)
    {
      *a4 = v31;
      v30 = v31;
    }
  }
  if (!a17 || (a18 & 1) != 0)
    goto LABEL_82;
  if (!v30 || v30 == *(_DWORD *)(a1 + 816))
    goto LABEL_81;
  if (!v25)
    goto LABEL_82;
  if (v25 == v24)
    goto LABEL_287;
  if (!v32)
    goto LABEL_81;
  v37 = v25;
  while (1)
  {
    do
    {
      if (*(_QWORD *)v37 >= 2)
      {
        v38 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_QWORD *)v37 >> 1);
        if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v38)
          && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_QWORD *)v37 >> 1))
        {
          v41 = 0;
          goto LABEL_58;
        }
      }
      v39 = *(_DWORD *)(v37 + 8);
      if (!(v39 >> 6))
        break;
      v40 = *(_QWORD *)(a1 + 328);
      v37 = v40 + ((unint64_t)(v39 & 0xFFFFFFC0) >> 1);
    }
    while (v40);
    v37 = 0;
    v41 = 1;
LABEL_58:
    while (1)
    {
      if (*(_QWORD *)v32 >= 2)
      {
        v42 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_QWORD *)v32 >> 1);
        if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v42)
          && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_QWORD *)v32 >> 1))
        {
          break;
        }
      }
      v43 = *(_DWORD *)(v32 + 8);
      if (v43 >> 6)
      {
        v44 = *(_QWORD *)(a1 + 328);
        v32 = v44 + ((unint64_t)(v43 & 0xFFFFFFC0) >> 1);
        if (v44)
          continue;
      }
      v32 = 0;
      goto LABEL_80;
    }
    v45 = v37 == v32 ? 1 : v41;
    if ((v45 & 1) != 0)
      break;
    if (!a19
      || (LODWORD(__p[0]) = 0,
          LODWORD(__p[0]) = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v37 >> 1), LODWORD(v207[0]) = 0, LODWORD(v207[0]) = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v32 >> 1), *(_QWORD *)&v211 = __p, v46 = *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a19, (int *)__p, (uint64_t)&std::piecewise_construct, (unsigned int **)&v211)+ 8), *(_QWORD *)&v211 = v207, v46 != *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a19, (int *)v207, (uint64_t)&std::piecewise_construct, (unsigned int **)&v211)
                 + 8)))
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 96) + 4 * (*(_QWORD *)v37 >> 1)) != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 96) + 4 * (*(_QWORD *)v32 >> 1)))
        break;
    }
    v47 = *(_DWORD *)(v32 + 8);
    if (v47 >> 6)
      v32 = *(_QWORD *)(a1 + 328) + ((unint64_t)(v47 & 0xFFFFFFC0) >> 1);
    else
      v32 = 0;
    if (!(*(_DWORD *)(v37 + 8) >> 6))
    {
      v37 = 0;
      break;
    }
    v48 = *(_QWORD *)(a1 + 328);
    v37 = v48 + (((unint64_t)*(unsigned int *)(v37 + 8) >> 1) & 0x7FFFFFE0);
    if (!v48 || !v32)
      break;
  }
LABEL_80:
  if (v37 == v32)
LABEL_287:
    v24 = v25;
  else
LABEL_81:
    v25 = 0;
LABEL_82:
  v49 = (*(_DWORD *)(a1 + 816) - 1);
  v213 = 0;
  if (a6 && a21)
  {
    v50 = *(_QWORD *)(a1 + 776);
    v51 = operator new();
    a9.n128_f64[0] = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::BetterTraceback(v51, v50, (uint64_t)a6, a20, a1 + 704, 0, 0, v49, a22);
    *(_QWORD *)&v211 = 0;
    v52 = v213;
    v213 = (_QWORD *)v51;
    if (v52)
    {
      std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100]((uint64_t)&v213, v52);
      v53 = (_QWORD *)v211;
      *(_QWORD *)&v211 = 0;
      if (v53)
        std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100]((uint64_t)&v211, v53);
    }
  }
  else if (!a6)
  {
    v54 = 0;
    v200 = 1;
    goto LABEL_125;
  }
  if ((a14 & 1) != 0)
  {
    v200 = 0;
    v54 = 0;
    goto LABEL_125;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Move the partial traceback to the end of word phone", 51);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
  }
  if (!v24)
  {
    v200 = 0;
    v54 = 0;
    v25 = 0;
    goto LABEL_125;
  }
  v25 = 0;
  v55 = 0;
  v56 = v49;
  v57 = (uint64_t *)v24;
  while (1)
  {
    v54 = v57;
    if (v213)
      kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward((uint64_t)v213, v57);
    v58 = *v54;
    if ((*v54 & 0xFFFFFFFE00000000) != 0)
      v59 = v54;
    else
      v59 = v55;
    if (a17)
      v55 = v59;
    if (v58 < 2)
      goto LABEL_104;
    v60 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), v58 >> 1);
    if (kaldi::WordBoundaryInfo::TypeOfPhone(a6, v60) == 2)
    {
      if (kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v54 >> 1))
        goto LABEL_119;
LABEL_104:
      v61 = 1;
      goto LABEL_105;
    }
    v61 = a17;
    if (a17)
    {
      isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v60);
      v61 = 0;
      if (!isSilencePhone)
        v55 = 0;
    }
LABEL_105:
    v56 -= (*v54 & 0xFFFFFFFELL) != 0;
    if (!(*((_DWORD *)v54 + 2) >> 6))
      break;
    v62 = *(_QWORD *)(a1 + 328);
    v57 = (uint64_t *)(v62 + (((unint64_t)*((unsigned int *)v54 + 2) >> 1) & 0x7FFFFFE0));
    if (v61)
    {
      v49 = v49;
    }
    else
    {
      v24 = v62 + (((unint64_t)*((unsigned int *)v54 + 2) >> 1) & 0x7FFFFFE0);
      v49 = v56;
    }
    if (!v61)
      v25 = (unint64_t)v55;
    if (!v62)
    {
LABEL_119:
      v200 = 0;
      goto LABEL_125;
    }
  }
  v200 = 0;
  if (v61)
  {
    v49 = v49;
  }
  else
  {
    v24 = 0;
    v49 = v56;
  }
  if (!v61)
    v25 = (unint64_t)v55;
LABEL_125:
  __p[0] = 0;
  __p[1] = 0;
  v210 = 0;
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  if (a5)
    v64 = *a5;
  else
    v64 = 0.0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  if (!a12)
  {
    v65 = 0;
    if (v24)
      goto LABEL_130;
    goto LABEL_252;
  }
  v65 = *a12;
  if (!v24)
  {
LABEL_252:
    v197 = 0;
    v194 = 0;
    v121 = 0;
    v120 = 0;
    v195 = 0xFFFFFFFFLL;
    v123 = a3;
    v122 = a2;
    v126 = a10;
    v124 = a15;
    goto LABEL_254;
  }
LABEL_130:
  v197 = 0;
  v194 = 0;
  v66 = 0;
  if ((int)v49 < 0 || v25 == 0)
    v68 = v24;
  else
    v68 = v25;
  v195 = 0xFFFFFFFFLL;
  do
  {
    if (v213)
      v69 = v54 == 0;
    else
      v69 = 0;
    if (v69)
      kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward((uint64_t)v213, (uint64_t *)v24);
    if (v54 == (uint64_t *)v24)
      v54 = 0;
    v70 = *(_QWORD *)v68;
    if (a5 != 0 && !v66 && (int)v49 >= v65)
    {
      a9.n128_f32[0] = (*(float (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), *(unsigned int *)(v68 + 28), a9);
      v66 = a9.n128_f32[0] != INFINITY;
      if (a9.n128_f32[0] != INFINITY)
        v64 = a9.n128_f32[0];
    }
    v71 = v70 >> 33;
    if (v70 >> 33)
    {
      v72 = (char *)__p[1];
      if (a5 && __p[1] == __p[0] && (int)v49 >= v65)
      {
        a9.n128_f32[0] = (*(float (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), *(unsigned int *)(v68 + 28), a9);
        if (a9.n128_f32[0] == INFINITY)
          a9.n128_f32[0] = v64;
        *a5 = a9.n128_f32[0];
        v72 = (char *)__p[1];
      }
      if (v72 >= v210)
      {
        v74 = (char *)__p[0];
        v75 = (v72 - (char *)__p[0]) >> 2;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v77 = v210 - (char *)__p[0];
        if ((v210 - (char *)__p[0]) >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v210, v78);
          v74 = (char *)__p[0];
          v72 = (char *)__p[1];
        }
        else
        {
          v79 = 0;
        }
        v80 = &v79[4 * v75];
        *(_DWORD *)v80 = v71;
        v73 = v80 + 4;
        while (v72 != v74)
        {
          v81 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v80 - 1) = v81;
          v80 -= 4;
        }
        __p[0] = v80;
        __p[1] = v73;
        v210 = &v79[4 * v78];
        if (v74)
          operator delete(v74);
      }
      else
      {
        *(_DWORD *)v72 = v71;
        v73 = v72 + 4;
      }
      __p[1] = v73;
      if (a16)
      {
        v82 = v49 + 1;
        v83 = v202;
        if (v202 >= v203)
        {
          v85 = v201;
          v86 = (v202 - v201) >> 2;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v88 = v203 - v201;
          if ((v203 - v201) >> 1 > v87)
            v87 = v88 >> 1;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
            v89 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          if (v89)
          {
            v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v203, v89);
            v85 = v201;
            v83 = v202;
          }
          else
          {
            v90 = 0;
          }
          v91 = &v90[4 * v86];
          *(_DWORD *)v91 = v82;
          v84 = v91 + 4;
          while (v83 != v85)
          {
            v92 = *((_DWORD *)v83 - 1);
            v83 -= 4;
            *((_DWORD *)v91 - 1) = v92;
            v91 -= 4;
          }
          v201 = v91;
          v203 = &v90[4 * v89];
          if (v85)
            operator delete(v85);
        }
        else
        {
          *(_DWORD *)v202 = v82;
          v84 = v202 + 4;
        }
        v202 = v84;
      }
      if (a13 && (int)v49 >= v65)
        ++*a13;
    }
    if (*(_DWORD *)v24 >= 2u)
    {
      v93 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v24 >> 1);
      v94 = v93;
      v95 = (char *)v207[1];
      if (v207[1] >= v208)
      {
        v97 = (char *)v207[0];
        v98 = ((char *)v207[1] - (char *)v207[0]) >> 2;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v100 = v208 - (char *)v207[0];
        if ((v208 - (char *)v207[0]) >> 1 > v99)
          v99 = v100 >> 1;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
          v101 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v208, v101);
          v97 = (char *)v207[0];
          v95 = (char *)v207[1];
        }
        else
        {
          v102 = 0;
        }
        v103 = &v102[4 * v98];
        *(_DWORD *)v103 = v94;
        v96 = v103 + 4;
        while (v95 != v97)
        {
          v104 = *((_DWORD *)v95 - 1);
          v95 -= 4;
          *((_DWORD *)v103 - 1) = v104;
          v103 -= 4;
        }
        v207[0] = v103;
        v207[1] = v96;
        v208 = &v102[4 * v101];
        if (v97)
          operator delete(v97);
      }
      else
      {
        *(_DWORD *)v207[1] = v93;
        v96 = v95 + 4;
      }
      v207[1] = v96;
    }
    v105 = v200;
    if ((int)v49 < v65)
      v105 = 1;
    if (!(v105 & 1 | (v192 == 0)) && *(_DWORD *)v24 >= 2u)
    {
      v106 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v24 >> 1);
      v107 = kaldi::WordBoundaryInfo::TypeOfPhone(a6, v106);
      if ((v107 & 0xFFFFFFFD) == 1)
        v194 += kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v24 >> 1);
      if ((v197 & 0xFFFFFFFD) == 1 && v107 != v197)
      {
        v108 = (v49 + 1);
        v109 = v205;
        if (v205 >= v206)
        {
          v111 = ((char *)v205 - (_BYTE *)v204) >> 3;
          if ((unint64_t)(v111 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v112 = ((char *)v206 - (_BYTE *)v204) >> 2;
          if (v112 <= v111 + 1)
            v112 = v111 + 1;
          if ((unint64_t)((char *)v206 - (_BYTE *)v204) >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v112;
          if (v113)
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v206, v113);
          else
            v114 = 0;
          v115 = (uint64_t *)&v114[8 * v111];
          *v115 = v108 | (v195 << 32);
          v110 = v115 + 1;
          v117 = (char *)v204;
          v116 = (char *)v205;
          if (v205 != v204)
          {
            do
            {
              v118 = *((_QWORD *)v116 - 1);
              v116 -= 8;
              *--v115 = v118;
            }
            while (v116 != v117);
            v116 = (char *)v204;
          }
          v204 = v115;
          v205 = v110;
          v206 = (uint64_t *)&v114[8 * v113];
          if (v116)
            operator delete(v116);
        }
        else
        {
          *v205 = v108 | (v195 << 32);
          v110 = v109 + 1;
        }
        v205 = v110;
        v195 = 0xFFFFFFFFLL;
      }
      if ((v107 & 0xFFFFFFFE) == 2 && v107 != v197)
      {
        if ((_DWORD)v195 != -1 && kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Pause error - Consecutive word-end", 34);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
        }
        v195 = v49;
      }
      v197 = v107;
    }
    if (!(*(_DWORD *)(v24 + 8) >> 6))
      break;
    v49 = v49 - ((*(_QWORD *)v24 & 0xFFFFFFFELL) != 0);
    v119 = *(_QWORD *)(a1 + 328);
    v68 = v119 + (((unint64_t)*(unsigned int *)(v24 + 8) >> 1) & 0x7FFFFFE0);
    v24 = v68;
  }
  while (v119);
  v121 = __p[0];
  v120 = __p[1];
  v123 = a3;
  v122 = a2;
  v124 = a15;
  if (__p[0] == __p[1])
  {
    v126 = a10;
  }
  else
  {
    v125 = (char *)__p[1] - 4;
    v126 = a10;
    if ((char *)__p[1] - 4 > __p[0])
    {
      v127 = (char *)__p[0] + 4;
      do
      {
        v128 = *((_DWORD *)v127 - 1);
        *((_DWORD *)v127 - 1) = *(_DWORD *)v125;
        *(_DWORD *)v125 = v128;
        v125 -= 4;
        v129 = v127 >= v125;
        v127 += 4;
      }
      while (!v129);
    }
  }
LABEL_254:
  v130 = v207[0];
  v131 = v207[1];
  v132 = (char *)v207[1] - 4;
  if (v207[0] != v207[1] && v132 > v207[0])
  {
    v134 = (char *)v207[0] + 4;
    do
    {
      v135 = *((_DWORD *)v134 - 1);
      *((_DWORD *)v134 - 1) = *(_DWORD *)v132;
      *(_DWORD *)v132 = v135;
      v132 -= 4;
      v129 = v134 >= v132;
      v134 += 4;
    }
    while (!v129);
  }
  v136 = *v124;
  v137 = v124[1];
  if (*v124 != v137)
  {
    while (!a16
         || v120 - v121 != *(_QWORD *)(v136 + 8) - *(_QWORD *)v136
         || memcmp(v121, *(const void **)v136, v120 - v121))
    {
      v136 += 24;
      if (v136 == v137)
        goto LABEL_267;
    }
    *a12 = *(_DWORD *)v201;
    if (a13)
      *a13 = 0;
    if (a5)
      *a5 = 9.0;
  }
LABEL_267:
  *(_OWORD *)__p = *(_OWORD *)v122;
  *(_QWORD *)v122 = v121;
  *(_QWORD *)(v122 + 8) = v120;
  v138 = *(char **)(v122 + 16);
  *(_QWORD *)(v122 + 16) = v210;
  v210 = v138;
  v139 = *v123;
  *(_QWORD *)v123 = v130;
  *((_QWORD *)v123 + 1) = v131;
  *(_OWORD *)v207 = v139;
  v140 = (char *)*((_QWORD *)v123 + 2);
  *((_QWORD *)v123 + 2) = v208;
  v208 = v140;
  if (a11)
    *a11 = v194;
  if (a6 && v126)
  {
    v141 = v205;
    if ((_DWORD)v195 != -1 && (v197 & 0xFFFFFFFD) == 1)
    {
      if (v205 >= v206)
      {
        v142 = ((char *)v205 - (_BYTE *)v204) >> 3;
        if ((unint64_t)(v142 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v143 = ((char *)v206 - (_BYTE *)v204) >> 2;
        if (v143 <= v142 + 1)
          v143 = v142 + 1;
        if ((unint64_t)((char *)v206 - (_BYTE *)v204) >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v143;
        if (v144)
          v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v206, v144);
        else
          v145 = 0;
        v146 = &v145[8 * v142];
        v147 = &v145[8 * v144];
        *(_QWORD *)v146 = v195 << 32;
        v141 = (uint64_t *)(v146 + 8);
        v149 = (char *)v204;
        v148 = (char *)v205;
        if (v205 != v204)
        {
          do
          {
            v150 = *((_QWORD *)v148 - 1);
            v148 -= 8;
            *((_QWORD *)v146 - 1) = v150;
            v146 -= 8;
          }
          while (v148 != v149);
          v148 = (char *)v204;
        }
        v204 = v146;
        v205 = v141;
        v206 = (uint64_t *)v147;
        if (v148)
          operator delete(v148);
      }
      else
      {
        *v205 = v195 << 32;
        ++v141;
      }
      v205 = v141;
    }
    v151 = (uint64_t *)v204;
    v152 = v141 - 1;
    if (v204 != v141 && v152 > v204)
    {
      do
      {
        v154 = *(_DWORD *)v151;
        *(_DWORD *)v151 = *(_DWORD *)v152;
        *(_DWORD *)v152 = v154;
        v155 = *((_DWORD *)v151 + 1);
        *((_DWORD *)v151 + 1) = *((_DWORD *)v152 + 1);
        *((_DWORD *)v152 + 1) = v155;
        ++v151;
        --v152;
      }
      while (v151 < v152);
      v151 = (uint64_t *)v204;
    }
    if (v141 != v151)
    {
      v156 = 0;
      v157 = 0;
      v141 = v151;
      while (1)
      {
        v158 = v141[v156];
        if (v158 != -1)
          break;
        if (kaldi::g_kaldi_verbose_level > 2)
          goto LABEL_312;
        v161 = (_DWORD *)&v141[v156] + 1;
LABEL_319:
        ++v157;
        v141 = (uint64_t *)v204;
        v163 = v205;
        v164 = ((char *)v205 - (_BYTE *)v204) >> 3;
        if (v164 > v157 && *v161 > *(_DWORD *)((char *)v204 + v156 * 8 + 8) && kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Pause error - Word spans into next word", 39);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
          v141 = (uint64_t *)v204;
          v163 = v205;
          v164 = ((char *)v205 - (_BYTE *)v204) >> 3;
        }
        ++v156;
        if (v164 <= v157)
          goto LABEL_328;
      }
      v159 = kaldi::g_kaldi_verbose_level;
      if (HIDWORD(v141[v156]) == -1 && kaldi::g_kaldi_verbose_level > 2)
      {
LABEL_312:
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Pause error - Word with missing startframe or endframe", 54);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
        v158 = v141[v156];
        v159 = kaldi::g_kaldi_verbose_level;
      }
      v161 = (_DWORD *)&v141[v157] + 1;
      if (v158 > SHIDWORD(v141[v156]) && v159 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Pause error - Word-end before word-begin", 40);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
      }
      goto LABEL_319;
    }
    v164 = v141 - v151;
    v163 = v141;
LABEL_328:
    if (v164 > v194 && kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v211, (uint64_t)"Pause error - Found more word times than words", 46);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v211);
      v141 = (uint64_t *)v204;
      v163 = v205;
    }
    begin = v126->__begin_;
    v126->__end_ = v126->__begin_;
    if ((unint64_t)((char *)v163 - (char *)v141) >= 9)
    {
      v168 = 0;
      p_end_cap = &v126->__end_cap_;
      v170 = 1;
      do
      {
        v171 = v141[v170];
        v172 = HIDWORD(v141[v168]);
        v173 = __OFSUB__(v171, v172);
        v174 = v171 - v172;
        if ((v174 < 0) ^ v173 | (v174 == 0))
          v175 = 0;
        else
          v175 = 1;
        v176 = v174 - v175;
        if (v174 - v175 >= 0)
        {
          if (begin >= p_end_cap->__value_)
          {
            v178 = v126->__begin_;
            v179 = begin - v126->__begin_;
            v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v181 = (char *)p_end_cap->__value_ - (char *)v178;
            if (v181 >> 1 > v180)
              v180 = v181 >> 1;
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
              v182 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v182 = v180;
            if (v182)
            {
              v183 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v126->__end_cap_, v182);
              v178 = v126->__begin_;
              begin = v126->__end_;
            }
            else
            {
              v183 = 0;
            }
            v184 = (unsigned int *)&v183[4 * v179];
            *v184 = v176;
            v177 = v184 + 1;
            while (begin != v178)
            {
              v185 = *--begin;
              *--v184 = v185;
            }
            v126->__begin_ = v184;
            v126->__end_ = v177;
            v126->__end_cap_.__value_ = (unsigned int *)&v183[4 * v182];
            if (v178)
              operator delete(v178);
          }
          else
          {
            *begin = v176;
            v177 = begin + 1;
          }
          v126->__end_ = v177;
          begin = v177;
          v141 = (uint64_t *)v204;
          v163 = v205;
        }
        ++v168;
        ++v170;
      }
      while (v170 < v163 - v141);
    }
    if (v194 > 0)
    {
      v186 = (v194 - 1);
      if (v186 > begin - v126->__begin_)
        std::vector<int>::resize(v126, v186);
    }
  }
  if (v213)
  {
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize((uint64_t)v213);
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::GetWords((uint64_t)v213, &v211);
    std::vector<kaldi::quasar::BetterTracebackWord>::__vdeallocate(a21);
    *(_OWORD *)a21 = v211;
    a21[2] = v212;
    v212 = 0;
    v211 = 0uLL;
    v214 = (void **)&v211;
    std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&v214);
  }
  v36 = *(_QWORD *)(v122 + 8) != *(_QWORD *)v122;
  if (v201)
    operator delete(v201);
  if (v204)
  {
    v205 = (uint64_t *)v204;
    operator delete(v204);
  }
  if (v207[0])
  {
    v207[1] = v207[0];
    operator delete(v207[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v187 = v213;
  v213 = 0;
  if (v187)
    std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100]((uint64_t)&v213, v187);
  return v36;
}

void sub_1ADB42C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  _QWORD *v43;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a41);
  v43 = *(_QWORD **)(v41 - 120);
  *(_QWORD *)(v41 - 120) = 0;
  if (v43)
    std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100](v41 - 120, v43);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  unint64_t *v3;
  uint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v34;
  int v35;
  BOOL v36;

  a2[1] = *a2;
  *a3 = 0;
  v3 = *(unint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  v7 = 0;
  v8 = INFINITY;
  do
  {
    v9 = *v3;
    v10 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160), *v3);
    if (v10 != INFINITY)
    {
      v11 = *(_QWORD *)(a1 + 328) + 32 * *((unsigned int *)v3 + 2);
      v12 = v10 + *(float *)(v11 + 12);
      v13 = v12
          + (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), HIDWORD(v9));
      if (v8 > v13)
      {
        v8 = v13;
        v7 = v11;
      }
    }
    v3 = (unint64_t *)v3[2];
  }
  while (v3);
  result = 0;
  if (v7 && v8 != INFINITY)
  {
    v15 = 0;
    *a3 = 0;
    while (1)
    {
      v16 = *(_QWORD *)v7 >> 33;
      if ((_DWORD)v16 && (_DWORD)v16 != *(_DWORD *)(a1 + 612))
      {
        v18 = (_DWORD *)a2[1];
        v17 = a2[2];
        if ((unint64_t)v18 >= v17)
        {
          v20 = (_DWORD *)*a2;
          v21 = (uint64_t)((uint64_t)v18 - *a2) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v24);
            v20 = (_DWORD *)*a2;
            v18 = (_DWORD *)a2[1];
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = v16;
          v19 = v26 + 4;
          while (v18 != v20)
          {
            v27 = *--v18;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          *a2 = (unint64_t)v26;
          a2[1] = (unint64_t)v19;
          a2[2] = (unint64_t)&v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = v16;
          v19 = v18 + 1;
        }
        a2[1] = (unint64_t)v19;
      }
      if ((v15 & 1) != 0)
        goto LABEL_34;
      if (*(_DWORD *)v7 < 2u)
      {
        v15 = 0;
        goto LABEL_35;
      }
      v28 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v7 >> 1);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v28))
      {
LABEL_34:
        v15 = 1;
      }
      else
      {
        v15 = 0;
        ++*a3;
      }
LABEL_35:
      if (*(_DWORD *)(v7 + 8) >> 6)
      {
        v29 = *(_QWORD *)(a1 + 328);
        v7 = v29 + (((unint64_t)*(unsigned int *)(v7 + 8) >> 1) & 0x7FFFFFE0);
        if (v29)
          continue;
      }
      v30 = *a2;
      v31 = a2[1];
      v32 = (_DWORD *)(v31 - 4);
      if (*a2 != v31 && (unint64_t)v32 > v30)
      {
        v34 = v30 + 4;
        do
        {
          v35 = *(_DWORD *)(v34 - 4);
          *(_DWORD *)(v34 - 4) = *v32;
          *v32-- = v35;
          v36 = v34 >= (unint64_t)v32;
          v34 += 4;
        }
        while (!v36);
      }
      return 1;
    }
  }
  return result;
}

void quasar::OnlineLatticeBiglmFasterDecoder::aggregateEpFeatures(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, __int128 **a6, char **a7, int *a8, char a9, int a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 *v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _DWORD *v42;
  int v43[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  if (!*(_QWORD *)(a1 + 2440))
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, "This should only be called if endPointer exists");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  v14 = *a2;
  v15 = *a8;
  v16 = *a3;
  v17 = *a4;
  *a2 += *(_DWORD *)(a1 + 2616);
  if (v16 == v17)
    *a3 += *(_DWORD *)(a1 + 2620);
  *a4 += a10;
  if (v14 <= 0)
    *a5 = *(_DWORD *)(a1 + 2624);
  memset(v43, 0, sizeof(v43));
  *(_QWORD *)&v44 = 0;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)v43, 0, *(std::string **)(a1 + 2632), *(__int128 **)(a1 + 2640), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 2640) - *(_QWORD *)(a1 + 2632)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)v43, *(std::string **)&v43[2], (std::string *)*a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v18 = *(_OWORD *)a6;
  *(_OWORD *)a6 = *(_OWORD *)v43;
  *(_OWORD *)v43 = v18;
  v19 = a6[2];
  a6[2] = (__int128 *)v44;
  *(_QWORD *)&v44 = v19;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  if (*(int *)(a1 + 2680) >= 1 && v15 >= 1)
  {
    v20 = *(_DWORD *)(a1 + 2620);
    v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, 1uLL);
    *v21 = v20;
    v40 = v21;
    v42 = &v21[v22];
    v41 = v21 + 1;
  }
  __p = 0;
  v38 = 0;
  v39 = 0;
  (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 2440) + 48))(*(_QWORD *)(a1 + 2440), &v40, &__p);
  v23 = *a7;
  v24 = a7[1];
  if ((a9 & 1) != 0)
  {
    v25 = v24 - v23;
    if (v24 != v23)
    {
      v26 = 0;
      v27 = v25 >> 2;
      v28 = __p;
      if (v27 <= 1)
        v27 = 1;
      do
      {
        v29 = *(_DWORD *)&v23[4 * v26] || *(_DWORD *)(*(_QWORD *)(a1 + 2656) + 4 * v26) || v28[v26] != 0;
        *(_DWORD *)&v23[4 * v26++] = v29;
      }
      while (v27 != v26);
    }
  }
  else
  {
    v30 = v24 - v23;
    if (v30)
    {
      v31 = v30 >> 2;
      v32 = *(int **)(a1 + 2656);
      v33 = (int *)__p;
      if (v31 <= 1)
        v31 = 1;
      do
      {
        v35 = *v32++;
        v34 = v35;
        v36 = *v33++;
        *(_DWORD *)v23 += v36 + v34;
        v23 += 4;
        --v31;
      }
      while (v31);
    }
  }
  *a8 += *(_DWORD *)(a1 + 2680);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v40 = v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
}

void quasar::betterTracebackWordsToTokens(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int32x2_t v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  float v23;
  __int128 v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  _BYTE v29[22];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  int v45;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    v9 = 0;
    v23 = (float)v6;
    do
    {
      quasar::Token::Token((quasar::Token *)__p);
      quasar::SymbolTableList::lookup(*(quasar::SymbolTableList **)(*(_QWORD *)a3 + 472), *(_DWORD *)(v7 + v8 + 36), (uint64_t)&v25);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v25;
      v28 = v26;
      v10 = *(_DWORD *)(v7 + v8 + 28);
      v11.i32[0] = *(_DWORD *)(v7 + v8 + 24);
      v11.i32[1] = v10 + 1;
      *(uint32x2_t *)&v29[4] = vcvt_u32_f32(vmul_n_f32(vcvt_f32_s32(v11), v23));
      v12 = *(_DWORD *)(v7 + v8 + 32);
      if (v10 == v12)
        ++v12;
      *(_DWORD *)&v29[12] = (float)(v23 * (float)v12);
      v29[20] = 1;
      v13 = a4[1];
      if (v13 >= a4[2])
      {
        v21 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(a4, (__int128 *)__p);
        v22 = SHIBYTE(v43);
        a4[1] = v21;
        if (v22 < 0)
          operator delete((void *)v42);
      }
      else
      {
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 16) = v28;
        *(_OWORD *)v13 = v14;
        __p[1] = 0;
        v28 = 0;
        __p[0] = 0;
        v15 = *(_QWORD *)&v29[14];
        *(_OWORD *)(v13 + 24) = *(_OWORD *)v29;
        *(_QWORD *)(v13 + 38) = v15;
        v16 = v31;
        *(_OWORD *)(v13 + 48) = v30;
        *(_QWORD *)(v13 + 64) = v16;
        *(_QWORD *)(v13 + 72) = 0;
        v31 = 0;
        v30 = 0uLL;
        *(_QWORD *)(v13 + 80) = 0;
        *(_QWORD *)(v13 + 88) = 0;
        *(_OWORD *)(v13 + 72) = v32;
        *(_QWORD *)(v13 + 88) = v33;
        v32 = 0uLL;
        v33 = 0;
        v17 = v34;
        *(_QWORD *)(v13 + 112) = v35;
        *(_QWORD *)(v13 + 120) = 0;
        *(_OWORD *)(v13 + 96) = v17;
        v35 = 0;
        v34 = 0uLL;
        *(_QWORD *)(v13 + 128) = 0;
        *(_QWORD *)(v13 + 136) = 0;
        *(_OWORD *)(v13 + 120) = v36;
        *(_QWORD *)(v13 + 136) = v37;
        v36 = 0uLL;
        v37 = 0;
        v18 = v38;
        *(_QWORD *)(v13 + 160) = v39;
        *(_OWORD *)(v13 + 144) = v18;
        v39 = 0;
        v38 = 0uLL;
        LODWORD(v16) = v40;
        *(_WORD *)(v13 + 172) = v41;
        *(_DWORD *)(v13 + 168) = v16;
        v19 = v42;
        *(_QWORD *)(v13 + 192) = v43;
        *(_OWORD *)(v13 + 176) = v19;
        v43 = 0;
        v42 = 0uLL;
        v20 = v44;
        *(_DWORD *)(v13 + 216) = v45;
        *(_OWORD *)(v13 + 200) = v20;
        a4[1] = v13 + 224;
      }
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v38);
      *(_QWORD *)&v25 = &v36;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)v34);
      *(_QWORD *)&v25 = &v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)v30);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
      ++v9;
      v7 = *a1;
      v8 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v9);
  }
}

void sub_1ADB43594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  quasar::Token::~Token((void **)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::cleanUpAfterDecoding(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  if (*((_BYTE *)this + 440))
    quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStatesCounts(this);
  quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::clear((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 2312));
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 345);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 347);
}

void quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::clear(quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies *this)
{
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](this);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 2);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 4);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 6);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 8);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 12);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 14);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 10);
}

void quasar::OnlineLatticeBiglmFasterDecoder::clearCaches(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (uint64_t *)*((_QWORD *)this + 284);
  for (i = (uint64_t *)*((_QWORD *)this + 285); v1 != i; v1 += 2)
  {
    v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADB4371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::endTheUtteranceAfterPauseRecognition(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *((_BYTE *)this + 2801) = 1;
  std::mutex::unlock(v2);
}

void quasar::OnlineLatticeBiglmFasterDecoder::endTheUtteranceAfterResumeRecognition(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *((_BYTE *)this + 2802) = 1;
  std::mutex::unlock(v2);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetPauseResumeState(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *(_WORD *)((char *)this + 2801) = 0;
  std::mutex::unlock(v2);
}

void quasar::MuxHelper::finalizeResult(uint64_t *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  std::string::size_type size;
  const quasar::Token *v19;
  const quasar::Token *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  unsigned __int8 *v24;
  std::string *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::string v47;
  std::string __p;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  unsigned __int8 *v60;
  std::string *v61;
  unint64_t v62;
  const void **v63;
  const void **v64;
  uint64_t v65;

  v7 = *a5;
  v6 = a5[1];
  if (!a2[2])
  {
    if (v6 != v7)
    {
      do
      {
        v27 = v6 - 24;
        std::__tree<std::string>::destroy(v6 - 24, *(char **)(v6 - 16));
        v6 = v27;
      }
      while (v27 != v7);
    }
    a5[1] = v7;
    return;
  }
  if (v6 != v7)
  {
    do
    {
      v11 = v6 - 24;
      std::__tree<std::string>::destroy(v6 - 24, *(char **)(v6 - 16));
      v6 = v11;
    }
    while (v11 != v7);
  }
  a5[1] = v7;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::set<std::string>>::resize(a5, v12, (const void ***)&__p);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  if (*a3 == a3[1])
    return;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v63, (const void ***)a2);
  v13 = a3[1];
  if (v13 != *a3)
  {
    v14 = 0;
    v15 = 0;
    v13 = *a3;
    do
    {
      v16 = *a5;
      quasar::MuxHelper::choice2mux(a1, (std::string **)(v13 + v14), (uint64_t)a2, &__p);
      if (v49)
      {
        v17 = (uint64_t **)(v16 + v14);
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (size)
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v17, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
          std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v63, (const void **)&__p.__r_.__value_.__l.__data_);
        }
        else
        {
          if (v17 != a2)
            std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v17, *a2, a2 + 1);
          std::__tree<std::string>::destroy((uint64_t)&v63, (char *)v64);
          v64 = 0;
          v65 = 0;
          v63 = (const void **)&v64;
        }
        if (v49 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v15;
      v13 = *a3;
      v14 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v15);
  }
  if (!v65)
    goto LABEL_75;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v19 = *(const quasar::Token **)v13;
  v20 = *(const quasar::Token **)(v13 + 8);
  if (*(const quasar::Token **)v13 == v20)
    goto LABEL_49;
  do
  {
    quasar::Token::Token(&__p, v19);
    quasar::MuxHelper::tok2mux(a1, (std::string *)v19, (uint64_t)a2, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = v47.__r_.__value_.__l.__size_;
      operator delete(v47.__r_.__value_.__l.__data_);
      if (!v21)
        goto LABEL_28;
    }
    else if (!*((_BYTE *)&v47.__r_.__value_.__s + 23))
    {
      goto LABEL_28;
    }
    quasar::MuxHelper::scrubToken(a1, (uint64_t)v19, &v47);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v47;
LABEL_28:
    v22 = v61;
    if ((unint64_t)v61 >= v62)
    {
      v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v60, (const quasar::Token *)&__p);
    }
    else
    {
      quasar::Token::Token(v61, (const quasar::Token *)&__p);
      v23 = (std::string *)((char *)v22 + 224);
    }
    v61 = v23;
    if (v59 < 0)
      operator delete(v58);
    if (v57 < 0)
      operator delete(v56);
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (v54 < 0)
      operator delete(v53);
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (v51 < 0)
      operator delete(v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v19 = (const quasar::Token *)((char *)v19 + 224);
  }
  while (v19 != v20);
  v24 = v60;
  v25 = v61;
  v26 = *(unsigned __int8 **)*a3;
  if ((char *)v61 - (char *)v60 == *(_QWORD *)(*a3 + 8) - (_QWORD)v26)
  {
    while (v24 != (unsigned __int8 *)v25)
    {
      if (!quasar::Token::operator==(v24, v26))
        goto LABEL_50;
      v24 += 224;
      v26 += 224;
    }
LABEL_49:
    std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)*a5, v63, &v64);
  }
  else
  {
LABEL_50:
    v28 = a3[1];
    if (v28 >= a3[2])
    {
      v30 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, (uint64_t *)&v60);
      v29 = a4;
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, (uint64_t *)&v60);
      v29 = a4;
      v30 = v28 + 24;
    }
    a3[1] = v30;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    v31 = a5[1];
    if (v31 >= a5[2])
    {
      v32 = std::vector<std::set<std::string>>::__emplace_back_slow_path<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a5, (const void ***)&__p, (const void ****)&v47);
    }
    else
    {
      std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)a5[1], v63, &v64);
      v32 = v31 + 24;
      a5[1] = v31 + 24;
    }
    a5[1] = v32;
    v33 = *(char **)v29;
    v34 = *(char **)(v29 + 8);
    if (*(char **)v29 != v34)
    {
      v35 = *(_QWORD *)(v29 + 16);
      if ((unint64_t)v34 >= v35)
      {
        v37 = (v34 - v33) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v35 - (_QWORD)v33;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v29 + 16, v40);
          v33 = *(char **)v29;
          v42 = *(char **)(v29 + 8);
        }
        else
        {
          v41 = 0;
          v42 = *(char **)(v29 + 8);
        }
        v43 = &v41[8 * v37];
        v44 = &v41[8 * v40];
        *(_QWORD *)v43 = *((_QWORD *)v34 - 1);
        v36 = v43 + 8;
        while (v42 != v33)
        {
          v45 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *((_QWORD *)v43 - 1) = v45;
          v43 -= 8;
        }
        *(_QWORD *)v29 = v43;
        *(_QWORD *)(v29 + 8) = v36;
        *(_QWORD *)(v29 + 16) = v44;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v34 = *((_QWORD *)v34 - 1);
        v36 = v34 + 8;
      }
      *(_QWORD *)(v29 + 8) = v36;
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_75:
  std::__tree<std::string>::destroy((uint64_t)&v63, (char *)v64);
}

void sub_1ADB43CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;

  __p = (void *)(v19 - 144);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::string>::destroy(v19 - 120, *(char **)(v19 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::set<std::string>>::resize(uint64_t *a1, unint64_t a2, const void ***a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::set<std::string>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      do
      {
        v9 = v4 - 24;
        std::__tree<std::string>::destroy(v4 - 24, *(char **)(v4 - 16));
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void quasar::MuxHelper::choice2mux(_QWORD *a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  int v10;
  char v11;
  std::string::size_type v12;
  std::string *p_p;
  std::string *p_s1;
  uint64_t v15;
  std::string __p;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_24:
    *a4 = __s1;
    a4[1].__r_.__value_.__s.__data_[0] = 1;
    return;
  }
  while (1)
  {
    quasar::MuxHelper::tok2mux(a1, v5, a3, &__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_21;
    v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    v12 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__s1.__r_.__value_.__r.__words[2])
        : __s1.__r_.__value_.__l.__size_;
    if (v12)
    {
      if (v12 != size)
        goto LABEL_25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_))
          goto LABEL_25;
        goto LABEL_20;
      }
      if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        break;
    }
LABEL_20:
    std::string::operator=(&__s1, &__p);
    LOBYTE(v10) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_21:
    if ((v10 & 0x80) != 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = (std::string *)((char *)v5 + 224);
    if (v5 == v6)
      goto LABEL_24;
  }
  p_s1 = &__s1;
  v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    p_p = (std::string *)((char *)p_p + 1);
    if (!--v15)
      goto LABEL_20;
  }
LABEL_25:
  a4->__r_.__value_.__s.__data_[0] = 0;
  a4[1].__r_.__value_.__s.__data_[0] = 0;
  if ((v10 & 0x80000000) == 0)
  {
    if ((v11 & 0x80) == 0)
      return;
LABEL_29:
    operator delete(__s1.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_29;
}

void sub_1ADB43F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::MuxHelper::tok2mux(_QWORD *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unsigned __int8 *v7;
  std::string::size_type size;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  std::string __p;
  char v19;

  v7 = (unsigned __int8 *)&a2[6];
  if (a3 + 8 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a3, (const void **)&a2[6].__r_.__value_.__l.__data_))goto LABEL_18;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = (unsigned __int8 *)a2;
  else
    v9 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = &v9[size];
    v11 = v9;
    v12 = v10;
    do
    {
      v13 = v11;
      v14 = v11;
      while (1)
      {
        v15 = *v14++;
        if (v15 == 92)
          break;
        v13 = v14;
        if (v14 == v10)
        {
          v13 = v12;
          goto LABEL_14;
        }
      }
      v11 = v13 + 1;
      v12 = v13;
    }
    while (v14 != v10);
LABEL_14:
    if (v13 != v10 && v13 - v9 != -1)
    {
      std::string::basic_string(&__p, a2, v13 - v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
      v17 = v16;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v17)
          goto LABEL_18;
      }
      else if (v16)
      {
LABEL_18:
        std::string::basic_string[abi:ne180100]<0>(a4, "");
        return;
      }
    }
  }
  if (SHIBYTE(a2[6].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, a2[6].__r_.__value_.__l.__data_, a2[6].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
  }
}

void sub_1ADB44100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MuxHelper::scrubToken(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  std::string::size_type MetadataStartIndex;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  quasar::QsrText *v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  std::string v21;
  std::string v22;

  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 && a1[8])
  {
    v8 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    MetadataStartIndex = (int)quasar::QsrText::getMetadataStartIndex(v8, (uint64_t *)a2);
    std::string::basic_string(&v22, (const std::string *)a2, 0, MetadataStartIndex, (std::allocator<char> *)&v21);
    if (*(char *)(a2 + 23) >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::string::basic_string(&v21, (const std::string *)a2, MetadataStartIndex, v10, (std::allocator<char> *)v19);
    v19[0] = 0;
    v19[1] = 0;
    v20 = 0;
    v12 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v11);
    if ((quasar::QsrText::decodeQsrText(v12, (uint64_t)&v22, (uint64_t)v19) & 1) != 0)
    {
      v17[0] = 0;
      v17[1] = 0;
      v18 = 0;
      v13 = (quasar::QsrText *)quasar::TextSanitizer::sanitize(a1[8], (uint64_t)v19, (uint64_t)v17);
      if ((_DWORD)v13 == 1)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v16 = 0;
        v14 = quasar::QsrText::SingletonInstance(v13);
        if (quasar::QsrText::encodeTokenQsrText(v14, (uint64_t)v17, (uint64_t)__p))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)a3);
        }
        else if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        }
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
      }
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
    }
    else if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

void sub_1ADB44330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::set<std::string>>::__append(uint64_t *a1, unint64_t a2, const void ***a3)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21[2];
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (uint64_t *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        result = std::set<std::string>::set[abi:ne180100](v9, a3);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v24 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = &v14[24 * v10];
    v21[0] = v14;
    v21[1] = v17;
    v22 = v17;
    v23 = &v14[24 * v13];
    v18 = 3 * a2;
    v19 = &v17[24 * a2];
    v20 = 8 * v18;
    do
    {
      std::set<std::string>::set[abi:ne180100]((uint64_t *)v17, a3);
      v17 += 24;
      v20 -= 24;
    }
    while (v20);
    v22 = v19;
    std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, v21);
    return (uint64_t *)std::__split_buffer<std::set<std::string>>::~__split_buffer(v21);
  }
  return result;
}

void sub_1ADB444FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__emplace_back_slow_path<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *a1, const void ***a2, const void ****a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (uint64_t *)&v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v16, *a2, *a3);
  v17 = v16 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v15);
  return v13;
}

void sub_1ADB44624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _DWORD *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *i;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  _BYTE v52[12];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  v51 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::unordered_set<int>::unordered_set(a1 + 64, a4);
  *(_QWORD *)(a1 + 104) = 0;
  memset(v52, 0, sizeof(v52));
  v7 = *(_QWORD *)(a1 + 56);
  v50 = a1 + 56;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v51) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v51) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v50, v13);
    else
      v14 = 0;
    v15 = &v14[12 * v10];
    v16 = &v14[12 * v13];
    *(_QWORD *)v15 = 0;
    *((_DWORD *)v15 + 2) = 0;
    v9 = v15 + 12;
    v18 = *(_DWORD **)(a1 + 40);
    v17 = *(_DWORD **)(a1 + 48);
    if (v17 != v18)
    {
      do
      {
        v19 = *(_QWORD *)(v17 - 3);
        v17 -= 3;
        v20 = v17[2];
        *(_QWORD *)(v15 - 12) = v19;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v20;
      }
      while (v17 != v18);
      v17 = (_DWORD *)*v51;
    }
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v9 = (char *)(v8 + 12);
  }
  *(_QWORD *)(a1 + 48) = v9;
  v21 = *(uint64_t **)(a2 + 16);
  if (v21)
  {
    do
    {
      v22 = *(uint64_t *)((char *)v21 + 20);
      *(_DWORD *)v52 = *((_DWORD *)v21 + 4);
      *(_QWORD *)&v52[4] = v22;
      v23 = *(_QWORD *)v52;
      v24 = HIDWORD(v22);
      v26 = *(_QWORD *)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 56);
      if (v26 >= v25)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v51) >> 2);
        v29 = v28 + 1;
        if (v28 + 1 > 0x1555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v51) >> 2);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0xAAAAAAAAAAAAAAALL)
          v31 = 0x1555555555555555;
        else
          v31 = v29;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v50, v31);
        else
          v32 = 0;
        v33 = &v32[12 * v28];
        *(_QWORD *)v33 = v23;
        *((_DWORD *)v33 + 2) = v24;
        v35 = *(_DWORD **)(a1 + 40);
        v34 = *(_DWORD **)(a1 + 48);
        v36 = v33;
        if (v34 != v35)
        {
          do
          {
            v37 = *(_QWORD *)(v34 - 3);
            v34 -= 3;
            v38 = v34[2];
            *(_QWORD *)(v36 - 12) = v37;
            v36 -= 12;
            *((_DWORD *)v36 + 2) = v38;
          }
          while (v34 != v35);
          v34 = (_DWORD *)*v51;
        }
        v27 = v33 + 12;
        *(_QWORD *)(a1 + 40) = v36;
        *(_QWORD *)(a1 + 48) = v33 + 12;
        *(_QWORD *)(a1 + 56) = &v32[12 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v26 = *(_QWORD *)v52;
        *(_DWORD *)(v26 + 8) = v24;
        v27 = (char *)(v26 + 12);
      }
      *(_QWORD *)(a1 + 48) = v27;
      v39 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)v52 = v21 + 2;
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)v21 + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)v52)[3] = -1 - 0x5555555555555555 * ((uint64_t)&v27[-v39] >> 2);
      v41 = *(_QWORD *)(a1 + 40);
      v40 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v52 = (char *)v21 + 20;
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)v21 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)v52)[3] = -1 - 0x5555555555555555 * ((v40 - v41) >> 2);
      v43 = *(_QWORD *)(a1 + 40);
      v42 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v52 = v21 + 3;
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)v21 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)v52)[3] = -1 - 0x5555555555555555 * ((v42 - v43) >> 2);
      v21 = (uint64_t *)*v21;
    }
    while (v21);
    v9 = *(char **)(a1 + 48);
  }
  if ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v9[-*v51] >> 2)) >> 62)
    v44 = -1;
  else
    v44 = 0xAAAAAAAAAAAAAAACLL * ((uint64_t)&v9[-*v51] >> 2);
  v45 = (void *)operator new[]();
  bzero(v45, v44);
  v46 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v45;
  if (v46)
    MEMORY[0x1AF44D160](v46, 0x1000C8052888210);
  for (i = *(uint64_t **)(a3 + 16); i; i = (uint64_t *)*i)
  {
    v48 = *((_DWORD *)i + 5);
    *(_QWORD *)v52 = i + 2;
    *(_DWORD *)(*(_QWORD *)(a1 + 104)
              + 4
              * std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)i + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)v52)[3]) = v48;
  }
  return a1;
}

void sub_1ADB44A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v14;
  void *v15;

  v14 = *(_QWORD *)(v12 + 104);
  *(_QWORD *)(v12 + 104) = 0;
  if (v14)
    MEMORY[0x1AF44D160](v14, 0x1000C8052888210);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a9);
  v15 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 48) = v15;
    operator delete(v15);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v12);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 32;
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 24));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

__n128 std::__optional_storage_base<std::shared_ptr<kaldi::WordHypLattice>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::shared_ptr<kaldi::WordHypLattice>,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, (__int128 *)a2);
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1) + 16) = 0;
  }
  else
  {
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return result;
}

void std::vector<std::set<std::string>>::__vdeallocate(void **a1)
{
  char **v1;
  char **v3;
  void *v4;
  char **v5;

  v1 = (char **)*a1;
  if (*a1)
  {
    v3 = (char **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 3;
        std::__tree<std::string>::destroy((uint64_t)(v3 - 3), *(v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::LmeInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<quasar::UttInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::UttInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::UttInfo>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E7A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E7A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  return v1 & 1;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45C10;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADB44F3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<quasar::StateAccessRecordingFst>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB45020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<quasar::StateAccessRecordingFst>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44128;
  a1[1] = 0;
  quasar::StateAccessRecordingFst::StateAccessRecordingFst(a1 + 3);
  return a1;
}

void sub_1ADB4506C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3E698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20[17];
  __int128 v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (**(_BYTE **)(a1 + 16))
  {
    quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v6 + 368), a2, v20, 1.0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
    v8 = *(_QWORD *)(v6 + 368);
    v21 = v20[0];
    if (*((_QWORD *)&v20[0] + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD *)(v6 + 368);
    v21 = 0uLL;
  }
  quasar::ModelLoader::readFstNetwork(v8, (uint64_t)a2, (unsigned __int8 **)&v21, a3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, 0x10000000, 0) != 0x10000000)
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"bigGFst: input label is not sorted!", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  if (*(_BYTE *)(v6 + 2300) || *(_BYTE *)(v6 + 440))
  {
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v20);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, v20);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
    if (*((_QWORD *)&v20[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  *(_QWORD *)&v20[0] = a2;
  v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 1048), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v17 + 7, a3);
  **(_BYTE **)(a1 + 16) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1ADB45378(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3E6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 2192, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 2220), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2216), a3, *(float *)(a1 + 16));
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LRStreamingConfidence,std::allocator<quasar::LRStreamingConfidence>,std::string &,std::string &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<quasar::LRStreamingConfidence>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB45574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<quasar::LRStreamingConfidence>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43A98;
  a1[1] = 0;
  quasar::LRStreamingConfidence::LRStreamingConfidence(a1 + 3);
  return a1;
}

void sub_1ADB455C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1ADB45688(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, __int128 *a2, uint64_t a3, std::string::size_type *a4)
{
  char v6;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42AD8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1ADB456F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(int a1, std::string *this, __int128 *a3, uint64_t a4, std::string::size_type *a5)
{
  void *__p[2];
  uint64_t v6;
  char v7;

  *(_OWORD *)__p = *(_OWORD *)a4;
  v6 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v7 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, (__int128 *)__p, a5);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADB45774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D420C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D420C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  v2 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::EagerDecision,std::allocator<quasar::EagerDecision>,quasar::EagerConfig &,BOOL,void>@<X0>(const quasar::EagerConfig *a1@<X1>, BOOL *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x278uLL);
  result = std::__shared_ptr_emplace<quasar::EagerDecision>::__shared_ptr_emplace[abi:ne180100]<quasar::EagerConfig &,BOOL,std::allocator<quasar::EagerDecision>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB45870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::EagerDecision>::__shared_ptr_emplace[abi:ne180100]<quasar::EagerConfig &,BOOL,std::allocator<quasar::EagerDecision>,0>(_QWORD *a1, const quasar::EagerConfig *a2, BOOL *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D42790;
  quasar::EagerDecision::EagerDecision((quasar::EagerDecision *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1ADB458C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::__on_zero_shared(uint64_t a1)
{
  quasar::EagerDecision::~EagerDecision((quasar::EagerDecision *)(a1 + 24));
}

void quasar::EagerDecision::~EagerDecision(quasar::EagerDecision *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 69);
  v2 = (void *)*((_QWORD *)this + 62);
  if (v2)
  {
    *((_QWORD *)this + 63) = v2;
    operator delete(v2);
  }
  v7 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = (void *)*((_QWORD *)this + 53);
  if (v3)
  {
    *((_QWORD *)this + 54) = v3;
    operator delete(v3);
  }
  v7 = (void **)((char *)this + 400);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v4 = (void *)*((_QWORD *)this + 43);
  if (v4)
  {
    *((_QWORD *)this + 44) = v4;
    operator delete(v4);
  }
  v7 = (void **)((char *)this + 320);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = MEMORY[0x1E0DE4F60];
  v6 = *MEMORY[0x1E0DE4F60];
  *((_QWORD *)this + 5) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 40) = *(_QWORD *)(v5 + 24);
  *((_QWORD *)this + 6) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 152);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x148uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB45A54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_1E5D43F68;
  a1[1] = 0;
  std::allocator<quasar::LatticeGenerationOutput>::construct[abi:ne180100]<quasar::LatticeGenerationOutput>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1ADB45AB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::LatticeGenerationOutput>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::LatticeGenerationOutput>::construct[abi:ne180100]<quasar::LatticeGenerationOutput>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_QWORD *)a2 = 0x2FFFFFFFFLL;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return std::ostringstream::basic_ostringstream[abi:ne180100](a2 + 40);
}

void sub_1ADB45BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::LatticeGenerationOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a2 + 40 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a2 + 48) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a2 + 135) < 0)
    operator delete(*(void **)(a2 + 112));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](a2 + 152);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 24);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 8);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADB45CAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D41028;
  a1[1] = 0;
  std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADB45D0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(a2, a3, (uint64_t)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1ADB45DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB45EA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D410D0;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1ADB45EF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,void>@<X0>(uint64_t (****a1)(_QWORD)@<X1>, unsigned int **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB45F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(_QWORD *a1, uint64_t (****a2)(_QWORD), unsigned int **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41140;
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1ADB45FA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst(uint64_t a1, uint64_t (***a2)(_QWORD), unsigned int **a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD v10[34];
  char v11[12];
  unsigned int v12;

  *(_QWORD *)a1 = &unk_1E5D22448;
  *(_QWORD *)(a1 + 8) = a2;
  v5 = (**a2)(a2);
  *(_DWORD *)(a1 + 16) = v5;
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    v8 = v5;
    do
    {
      if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, char *))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v8, *v6, v11) & 1) != 0)
      {
        v8 = v12;
      }
      else
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid word symbol, clipping left context", 42);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
        }
        v8 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
      }
      *(_DWORD *)(a1 + 16) = v8;
      ++v6;
    }
    while (v6 != v7);
  }
  return a1;
}

void sub_1ADB46100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~LeftContextDeterministicOnDemandFst()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB4617C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41060;
  a1[1] = 0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADB461E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v4 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v24, &v22, &v21);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADB46338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char **v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t *v30;

  *(_QWORD *)a1 = &unk_1E5D222B8;
  *(_QWORD *)(a1 + 8) = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = *a3;
  v8 = (_QWORD *)(a1 + 24);
  v9 = a3[1];
  *(_QWORD *)(a1 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (char **)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = *a4;
  if ((***(unsigned int (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8)) == -1
    || (**(unsigned int (***)(_QWORD))*v8)(*v8) == -1)
  {
    *(_QWORD *)(a1 + 104) = 0xFFFFFFFF00000000;
  }
  else
  {
    *(_DWORD *)(a1 + 108) = 0;
    v13 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
    v29 = __PAIR64__((**(uint64_t (***)(_QWORD))*v8)(*v8), v13);
    v14 = *(_DWORD *)(a1 + 108);
    v30 = &v29;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a1 + 40, (int *)&v29, (uint64_t)&std::piecewise_construct, &v30)+ 6) = v14;
    v15 = *(_QWORD *)(a1 + 96);
    v16 = *(unint64_t **)(a1 + 88);
    if ((unint64_t)v16 >= v15)
    {
      v18 = ((char *)v16 - *v12) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)*v12;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v21);
      else
        v22 = 0;
      v23 = (unint64_t *)&v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v29;
      v17 = v23 + 1;
      v26 = *(char **)(a1 + 80);
      v25 = *(char **)(a1 + 88);
      if (v25 != v26)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v23 = v27;
        }
        while (v25 != v26);
        v25 = *v12;
      }
      *(_QWORD *)(a1 + 80) = v23;
      *(_QWORD *)(a1 + 88) = v17;
      *(_QWORD *)(a1 + 96) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v16 = v29;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 88) = v17;
    *(_DWORD *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_1ADB46578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;

  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 88) = v7;
    operator delete(v7);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

float fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  BOOL v12;
  float v13;

  v5 = (unsigned int *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  v6 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), *v5);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 8))(*(_QWORD *)(a1 + 24), v5[1], a3);
  if (v6 == INFINITY || v7 == INFINITY)
    return INFINITY;
  v10 = v6 * *(float *)(a1 + 112);
  v8 = NAN;
  if (v10 != -INFINITY)
  {
    v11 = v7 * *(float *)(a1 + 116);
    if (v11 != -INFINITY)
    {
      v8 = INFINITY;
      v12 = v11 == INFINITY || v10 == INFINITY;
      v13 = v10 + v11;
      if (!v12)
        return v13;
    }
  }
  return v8;
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v5;
  char **v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  int v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v47;
  int v48;
  unint64_t v49;
  float v50;
  unsigned int v51;
  char v52[4];
  int v53;
  float v54;
  unsigned int v55;

  v5 = a3;
  v7 = (char **)(a1 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  if (!(*(unsigned int (**)(_QWORD, unint64_t, uint64_t, char *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8, a3, v52))return 0;
  if (v53)
  {
    v9 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), HIDWORD(v8));
    if ((_DWORD)v9)
    {
      v47 = v55 | ((unint64_t)v51 << 32);
      v48 = *(_DWORD *)(a1 + 104);
      v10 = std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(a1 + 40, (int *)&v47, (uint64_t)&v47);
      v12 = HIDWORD(v49);
      *(_DWORD *)a4 = v5;
      *(_DWORD *)(a4 + 4) = v12;
      *(_DWORD *)(a4 + 12) = *((_DWORD *)v10 + 6);
      v13 = v54 * *(float *)(a1 + 112);
      v14 = NAN;
      if (v13 != -INFINITY)
      {
        v15 = v50 * *(float *)(a1 + 116);
        if (v15 != -INFINITY)
        {
          v14 = INFINITY;
          v16 = v15 == INFINITY || v13 == INFINITY;
          v17 = v13 + v15;
          if (!v16)
            v14 = v17;
        }
      }
      *(float *)(a4 + 8) = v14;
      if (v11)
      {
        v18 = *(_QWORD *)(a1 + 96);
        ++*(_DWORD *)(a1 + 104);
        v19 = *(unint64_t **)(a1 + 88);
        if ((unint64_t)v19 < v18)
        {
          *v19 = v47;
          v20 = v19 + 1;
LABEL_48:
          *(_QWORD *)(a1 + 88) = v20;
          return v9;
        }
        v31 = ((char *)v19 - *v7) >> 3;
        if (!((unint64_t)(v31 + 1) >> 61))
        {
          v32 = v18 - (_QWORD)*v7;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v34);
          else
            v35 = 0;
          v41 = (unint64_t *)&v35[8 * v31];
          v42 = &v35[8 * v34];
          *v41 = v47;
          v20 = v41 + 1;
          v44 = *(char **)(a1 + 80);
          v43 = *(char **)(a1 + 88);
          if (v43 != v44)
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v41 = v45;
            }
            while (v43 != v44);
            v43 = *v7;
          }
          *(_QWORD *)(a1 + 80) = v41;
          *(_QWORD *)(a1 + 88) = v20;
          *(_QWORD *)(a1 + 96) = v42;
          if (v43)
            operator delete(v43);
          goto LABEL_48;
        }
LABEL_50:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
    }
  }
  else
  {
    v49 = v8 & 0xFFFFFFFF00000000 | v55;
    v50 = *(float *)(a1 + 104);
    v21 = std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(a1 + 40, (int *)&v49, (uint64_t)&v49);
    *(_DWORD *)a4 = v5;
    *(_DWORD *)(a4 + 4) = 0;
    *(_DWORD *)(a4 + 12) = *((_DWORD *)v21 + 6);
    *(float *)(a4 + 8) = v54 * *(float *)(a1 + 112);
    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 96);
      ++*(_DWORD *)(a1 + 104);
      v24 = *(unint64_t **)(a1 + 88);
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - *v7) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_50;
        v27 = v23 - (_QWORD)*v7;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v29);
        else
          v30 = 0;
        v36 = (unint64_t *)&v30[8 * v26];
        v37 = &v30[8 * v29];
        *v36 = v49;
        v25 = v36 + 1;
        v39 = *(char **)(a1 + 80);
        v38 = *(char **)(a1 + 88);
        if (v38 != v39)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v36 = v40;
          }
          while (v38 != v39);
          v38 = *v7;
        }
        *(_QWORD *)(a1 + 80) = v36;
        *(_QWORD *)(a1 + 88) = v25;
        *(_QWORD *)(a1 + 96) = v37;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v24 = v49;
        v25 = v24 + 1;
      }
      *(_QWORD *)(a1 + 88) = v25;
    }
    return 1;
  }
  return v9;
}

_QWORD *fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeDeterministicOnDemandFst(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D222B8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeDeterministicOnDemandFst(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D222B8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalEos(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), *(unsigned int *)(*(_QWORD *)(a1 + 80) + 8 * a2 + 4));
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *a2;
  v8 = a2[1];
  v9 = v7 + 7853 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v7 + 7853 * v8;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v7 && *((_DWORD *)v13 + 5) == v8)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v13 = *v23;
LABEL_42:
    *v23 = v13;
    goto LABEL_43;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v24 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1ADB46CDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  v8 = v6 + 7853 * v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v6 + 7853 * v7;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *(_QWORD *)a3;
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a3 + 8);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_42:
    *v22 = v12;
    goto LABEL_43;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1ADB46F08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,void>@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB46F68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, unint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1ADB46FCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&>(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v10, *a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1ADB470C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,void>@<X0>(uint64_t a1@<X1>, __int128 *a2@<X2>, void (****a3)(_QWORD)@<X3>, uint64_t *a4@<X4>, _DWORD *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x3C0uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1ADB47160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(_QWORD *a1, uint64_t a2, __int128 *a3, void (****a4)(_QWORD), uint64_t *a5, _DWORD *a6, uint64_t a7, uint64_t *a8)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42100;
  a1[1] = 0;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OnlineLatticeBiglmFasterDecoder((uint64_t)(a1 + 3), a2, a3, *a4, *a5, a6, a7, *a8);
  return a1;
}

void sub_1ADB471B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OnlineLatticeBiglmFasterDecoder(uint64_t a1, uint64_t a2, __int128 *a3, void (***a4)(_QWORD), uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  clockid_t v21;

  v13 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LatticeBiglmFasterTraceBackDecoder(a1, a2, a3, a4, a8);
  *(_QWORD *)v13 = &unk_1E5D33F68;
  v14 = a3[1];
  *(_OWORD *)(v13 + 536) = *a3;
  *(_OWORD *)(v13 + 552) = v14;
  v15 = a3[2];
  v16 = a3[3];
  v17 = a3[5];
  *(_OWORD *)(v13 + 600) = a3[4];
  *(_OWORD *)(v13 + 616) = v17;
  *(_OWORD *)(v13 + 568) = v15;
  *(_OWORD *)(v13 + 584) = v16;
  v18 = a3[6];
  v19 = a3[7];
  v20 = a3[9];
  *(_OWORD *)(v13 + 664) = a3[8];
  *(_OWORD *)(v13 + 680) = v20;
  *(_OWORD *)(v13 + 632) = v18;
  *(_OWORD *)(v13 + 648) = v19;
  *(_QWORD *)(v13 + 696) = a5;
  *(_DWORD *)(v13 + 704) = *a6;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v13 + 712, (uint64_t)(a6 + 2));
  *(_QWORD *)(a1 + 776) = a7;
  *(_DWORD *)(a1 + 784) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 792) = a1 + 176;
  *(_DWORD *)(a1 + 800) = 1;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 804) = 0u;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v21);
  *(_QWORD *)(a1 + 880) = 0;
  return a1;
}

void sub_1ADB47300(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::SilencePhoneSet *v2;

  kaldi::SilencePhoneSet::~SilencePhoneSet(v2);
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LatticeBiglmFasterTraceBackDecoder(uint64_t a1, uint64_t a2, __int128 *a3, void (***a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[34];

  *(_QWORD *)a1 = &unk_1E5D34060;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = a4;
  v10 = *a3;
  v11 = a3[2];
  *(_OWORD *)(a1 + 192) = a3[1];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  v12 = a3[3];
  v13 = a3[4];
  v14 = a3[5];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 280) = a5;
  *(_DWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 295) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x10000000, 0) == 0x10000000;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  kaldi::quasar::TokenHeap::TokenHeap((kaldi::quasar::TokenHeap *)(a1 + 328), *((_DWORD *)a3 + 17), *((_DWORD *)a3 + 18));
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (**a4)(a4);
  v15 = *(_QWORD *)(a1 + 280);
  if (v15 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 48) - *(_QWORD *)(v15 + 40)) >> 2) >= 0x40)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"dynamic_class_tag_dict_->getNumOfClasses() <= TokenHeap::MAX_CLASS_ID", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v9, 0x3E8uLL);
  return a1;
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)a1 = &unk_1E5D34060;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != -1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = -1;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v7 + 16) = v6;
      v6 = v7;
    }
    while (v5);
    *(_QWORD *)(a1 + 56) = v7;
  }
  v8 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = 0;
  if (v8)
    std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100](a1 + 528, v8);
  std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__hash_table(a1 + 488);
  v9 = *(void **)(a1 + 456);
  if (v9)
  {
    free(v9);
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
  }
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v10 = *(void **)(a1 + 432);
  if (v10)
  {
    *(_QWORD *)(a1 + 440) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 400);
  if (v11)
  {
    *(_QWORD *)(a1 + 408) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 376);
  if (v12)
  {
    *(_QWORD *)(a1 + 384) = v12;
    operator delete(v12);
  }
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(a1 + 344);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear(a1 + 328);
  std::__tree<int>::destroy(a1 + 304, *(_QWORD **)(a1 + 312));
  v13 = *(void **)(a1 + 136);
  if (v13)
  {
    *(_QWORD *)(a1 + 144) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 112);
  if (v14)
  {
    *(_QWORD *)(a1 + 120) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 88);
  if (v15)
  {
    *(_QWORD *)(a1 + 96) = v15;
    operator delete(v15);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList((_QWORD *)(a1 + 8));
  return a1;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(_QWORD *a1)
{
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetDecodableOffset(uint64_t a1, int a2)
{
  uint64_t result;

  *(_DWORD *)(a1 + 368) = a2
                        - (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 696) + 40))(*(_QWORD *)(a1 + 696));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 696) + 40))(*(_QWORD *)(a1 + 696));
  *(_DWORD *)(a1 + 804) = result;
  return result;
}

void kaldi::quasar::TokenHeap::~TokenHeap(kaldi::quasar::TokenHeap *this)
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)this);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(uint64_t a1)
{
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetDecodableOffset(uint64_t result, int a2)
{
  *(_DWORD *)(result + 368) = a2;
  return result;
}

kaldi::quasar::TokenHeap *kaldi::quasar::TokenHeap::TokenHeap(kaldi::quasar::TokenHeap *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD v8[34];

  v6 = kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::LazyBuffer((uint64_t)this, a2, 0);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::LazyBuffer(v6 + 16, a3, 0);
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  if (a2 >> 26)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"max_total_tokens <= MAX_TOK_ID", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return this;
}

void sub_1ADB47898()
{
  uint64_t v0;

  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(v0);
  JUMPOUT(0x1ADB478A4);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  vm_address_t address;
  _QWORD v13[34];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3)
    *(_DWORD *)(a1 + 12) = a2;
  address = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 32 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      v8 = strlen((const char *)(0x80000001AE16249ELL & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001AE16249ELL & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = address;
  return a1;
}

void sub_1ADB47A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADB47A30(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  vm_address_t address;
  _QWORD v13[34];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3)
    *(_DWORD *)(a1 + 12) = a2;
  address = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 24 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      v8 = strlen((const char *)(0x80000001AE1624BELL & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001AE1624BELL & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = address;
  return a1;
}

void sub_1ADB47BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADB47BB8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v7[272];

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    if (*(_DWORD *)(result + 8))
    {
      result = MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0]);
      if ((_DWORD)result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        v2 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        v3 = (_QWORD *)std::ostream::operator<<();
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        v5 = strlen((const char *)(0x80000001AE1624BELL & 0x7FFFFFFFFFFFFFFFLL));
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001AE1624BELL & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v7[272];

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    if (*(_DWORD *)(result + 8))
    {
      result = MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0]);
      if ((_DWORD)result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        v2 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        v3 = (_QWORD *)std::ostream::operator<<();
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        v5 = strlen((const char *)(0x80000001AE16249ELL & 0x7FFFFFFFFFFFFFFFLL));
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001AE16249ELL & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

void std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::quasar::LazyBuffer<float>::Clear(a2);
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t kaldi::quasar::LazyBuffer<float>::Clear(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v7[272];

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    if (*(_DWORD *)(result + 8))
    {
      result = MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0]);
      if ((_DWORD)result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        v2 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        v3 = (_QWORD *)std::ostream::operator<<();
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        v5 = strlen((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EE0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(MEMORY[0x1E0DE4EE0] + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
        free(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &unk_1E5D33F68;
  v2 = (void *)a1[94];
  if (v2)
  {
    a1[95] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[91];
  if (v3)
    operator delete(v3);
  return kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder((uint64_t)a1);
}

void std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(uint64_t a1, int a2, float a3)
{
  float v5;
  uint64_t *i;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int *v30;
  char *Arcs;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  kaldi::quasar::TokenHeap *v67;
  char v68;
  int v69;
  void **v70;
  int v71;
  uint64_t v73;
  int v74;
  _OWORD v75[2];
  int v76;
  int *v77;
  float v78;
  unsigned int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *(float *)(a1 + 272);
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  if (v5 != INFINITY)
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState((uint64_t *)a1, *(_QWORD *)(a1 + 8), v75);
  v70 = (void **)(a1 + 112);
  for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)i[2])
  {
    if (v5 != INFINITY)
    {
      v7 = *(_QWORD *)(a1 + 328) + 32 * *((unsigned int *)i + 2);
      v8 = *(float *)(v7 + 12);
      v74 = *(_DWORD *)(v7 + 28);
      v77 = &v74;
      if (v8 > (float)(*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v75, &v74, (uint64_t)&std::piecewise_construct, &v77)+ 5)+ *(float *)(a1 + 272)))continue;
    }
    v9 = *i;
    v10 = *((_DWORD *)i + 2);
    v12 = *(char **)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)*v70;
      v15 = (v12 - (_BYTE *)*v70) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v18);
        v14 = *(char **)(a1 + 112);
        v12 = *(char **)(a1 + 120);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_QWORD *)v20 = v9;
      *((_DWORD *)v20 + 2) = v10;
      v21 = v20;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
          v21 -= 16;
          v12 -= 16;
        }
        while (v12 != v14);
        v14 = (char *)*v70;
      }
      v13 = v20 + 16;
      *(_QWORD *)(a1 + 112) = v21;
      *(_QWORD *)(a1 + 120) = v20 + 16;
      *(_QWORD *)(a1 + 128) = &v19[16 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v12 = v9;
      *((_DWORD *)v12 + 2) = v10;
      v13 = v12 + 16;
    }
    *(_QWORD *)(a1 + 120) = v13;
  }
  v23 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  if (v23 == v22)
  {
    if (*(_BYTE *)(a1 + 292))
      return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v75);
    v66 = *(_QWORD *)(a1 + 112);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Error in ProcessNonemitting: no surviving tokens: frame is ", 59);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      v66 = *(_QWORD *)(a1 + 112);
      v23 = *(_QWORD *)(a1 + 120);
    }
    *(_BYTE *)(a1 + 292) = 1;
    v22 = v23;
    v23 = v66;
  }
  if (v23 != v22)
  {
    v67 = (kaldi::quasar::TokenHeap *)(a1 + 328);
    do
    {
      v26 = *(_QWORD *)(v22 - 16);
      v24 = v22 - 16;
      v25 = v26;
      v27 = *(unsigned int *)(v24 + 8);
      *(_QWORD *)(a1 + 120) = v24;
      v28 = *(_QWORD *)(a1 + 328) + 32 * v27;
      v29 = *(float *)(v28 + 12);
      if (v29 <= a3)
      {
        v71 = v27;
        *(_DWORD *)(v28 + 20) = 0;
        v30 = (int *)(v28 + 20);
        Arcs = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(a1, v25, 0xFFFFFFFF);
        v69 = v25;
        v73 = HIDWORD(v25);
        v32 = *((_QWORD *)Arcs + 2);
        v33 = *((_QWORD *)Arcs + 3);
        if (v32 == v33)
        {
          v68 = 0;
        }
        else
        {
          v68 = 0;
          do
          {
            if (*(_DWORD *)v32)
            {
              if (*(_BYTE *)(a1 + 295))
                break;
            }
            else
            {
              v34 = *(unsigned int *)(v32 + 4);
              v35 = *(float *)(v32 + 8);
              v36 = *(int *)(v32 + 12);
              v37 = v29 + v35;
              if ((int)v34 >= *(_DWORD *)(a1 + 236) && (int)v34 <= *(_DWORD *)(a1 + 240)
                || (float)(v37 - *(float *)(a1 + 232)) <= a3)
              {
                v38 = *(_QWORD *)(a1 + 280);
                if (!v38
                  || (*(_DWORD *)(v28 + 8) & 0x3FLL) == 0
                  || (LODWORD(v77) = *(_DWORD *)(v32 + 4),
                      !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v38 + 64), (int *)&v77)))
                {
                  if ((_DWORD)v34)
                  {
                    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, int **))(**(_QWORD **)(a1 + 168)
                                                                                          + 32))(*(_QWORD *)(a1 + 168), v73, v34, &v77))
                    {
                      v39 = NAN;
                      if (v35 != -INFINITY)
                      {
                        v39 = NAN;
                        if (v78 != -INFINITY)
                        {
                          v39 = INFINITY;
                          if (v78 != INFINITY && v35 != INFINITY)
                            v39 = v35 + v78;
                        }
                      }
                      v34 = HIDWORD(v77);
                      v41 = v79;
                    }
                    else
                    {
                      v39 = INFINITY;
                      v41 = v73;
                    }
                    v37 = v29 + v39;
                    v35 = v39;
                  }
                  else
                  {
                    v41 = v73;
                  }
                  if (v37 < a3)
                  {
                    LOBYTE(v77) = 0;
                    v42 = v36 + (v41 << 32);
                    v43 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v42, a2, 0, (char *)&v77, *(_DWORD *)(v28 + 8) & 0x3F, v37);
                    v44 = *(_QWORD *)v67;
                    v45 = kaldi::quasar::TokenHeap::NewForwardLink(v67, v43, 0, v34, v35, 0.0, *v30);
                    v46 = v44 + 32 * v43;
                    *v30 = v45;
                    if ((*(_QWORD *)v28 & 0x100000000) != 0)
                      *(_QWORD *)v46 |= 0x100000000uLL;
                    if ((_BYTE)v77)
                    {
                      v47 = *(_DWORD *)(v46 + 8) & 0x3F | (v71 << 6);
                      *(_QWORD *)v46 = *(_QWORD *)v46 & 0x100000001 | (v34 << 33);
                      *(_DWORD *)(v46 + 8) = v47;
                      *(_DWORD *)(v44 + 32 * v43 + 28) = v41;
                      v49 = *(char **)(a1 + 120);
                      v48 = *(_QWORD *)(a1 + 128);
                      if ((unint64_t)v49 >= v48)
                      {
                        v51 = (char *)*v70;
                        v52 = (v49 - (_BYTE *)*v70) >> 4;
                        v53 = v52 + 1;
                        if ((unint64_t)(v52 + 1) >> 60)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v54 = v48 - (_QWORD)v51;
                        if (v54 >> 3 > v53)
                          v53 = v54 >> 3;
                        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
                          v55 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v55 = v53;
                        if (v55)
                        {
                          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v55);
                          v51 = *(char **)(a1 + 112);
                          v49 = *(char **)(a1 + 120);
                        }
                        else
                        {
                          v56 = 0;
                        }
                        v57 = &v56[16 * v52];
                        *(_QWORD *)v57 = v42;
                        *((_DWORD *)v57 + 2) = v43;
                        v58 = v57;
                        if (v49 != v51)
                        {
                          do
                          {
                            *((_OWORD *)v58 - 1) = *((_OWORD *)v49 - 1);
                            v58 -= 16;
                            v49 -= 16;
                          }
                          while (v49 != v51);
                          v51 = (char *)*v70;
                        }
                        v50 = v57 + 16;
                        *(_QWORD *)(a1 + 112) = v58;
                        *(_QWORD *)(a1 + 120) = v57 + 16;
                        *(_QWORD *)(a1 + 128) = &v56[16 * v55];
                        if (v51)
                          operator delete(v51);
                      }
                      else
                      {
                        *(_QWORD *)v49 = v42;
                        *((_DWORD *)v49 + 2) = v43;
                        v50 = v49 + 16;
                      }
                      *(_QWORD *)(a1 + 120) = v50;
                      v68 = 1;
                    }
                  }
                }
              }
            }
            v32 += 16;
          }
          while (v32 != v33);
        }
        if (*(_QWORD *)(a1 + 280))
        {
          v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
          v60 = *(_QWORD *)v28;
          if (v59 == v69 || a3 != INFINITY && (v60 & 0x100000000) != 0)
          {
            v61 = *(_DWORD *)(v28 + 8) & 0x3F;
            if (v61)
            {
              if (!(((v60 & 0xFFFFFFFE00000000) != 0) | v68 & 1))
              {
                LODWORD(v77) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40) + 12 * v61 + 8);
                kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, v28, v71, a2, v69, v73, &v77, 1, a3, 0, 0);
              }
            }
            else
            {
              v62 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 40);
              if (*(_QWORD *)(*(_QWORD *)(a1 + 280) + 48) - v62 != 12)
              {
                v63 = 0;
                v64 = 1;
                do
                {
                  v77 = *(int **)(v62 + v63 + 12);
                  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, v28, v71, a2, v69, v73, &v77, 2, a3, 1, v64++);
                  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 40);
                  v63 += 12;
                }
                while (v64 != 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 280) + 48) - v62) >> 2));
              }
            }
          }
        }
      }
      v22 = *(_QWORD *)(a1 + 120);
    }
    while (*(_QWORD *)(a1 + 112) != v22);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v75);
}

void sub_1ADB4870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(uint64_t a1, clockid_t a2)
{
  uint64_t v3;
  clockid_t v4;
  double result;

  v3 = a1 + 16 * a2;
  *(double *)(v3 + 888) = *(double *)(v3 + 888)
                        + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                        - *(double *)(a1 + 848);
  result = *(double *)(v3 + 896) + kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v4) - *(double *)(a1 + 864);
  *(double *)(v3 + 896) = result;
  return result;
}

uint64_t kaldi::quasar::TokenHeap::Clear(kaldi::quasar::TokenHeap *this)
{
  _QWORD v3[2];
  uint64_t v4;

  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)this);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::TokenHeap::TokenHeap((kaldi::quasar::TokenHeap *)v3, *((_DWORD *)this + 8), *((_DWORD *)this + 9));
  kaldi::quasar::TokenHeap::operator=(this, v3);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)&v4);
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)v3);
}

void sub_1ADB48834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::quasar::TokenHeap::~TokenHeap((kaldi::quasar::TokenHeap *)va);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::TokenHeap::operator=(_QWORD *a1, _QWORD *a2)
{
  if (a1 != a2)
  {
    kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)a1);
    *a1 = *a2;
    a1[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 2));
    a1[2] = a2[2];
    a1[3] = a2[3];
    a2[2] = 0;
    a2[3] = 0;
  }
  a1[4] = a2[4];
  return a1;
}

void std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  __int16 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 3)
  {
    if (a2)
    {
      v14 = v7 + 8 * a2;
      do
      {
        *(_DWORD *)v7 = 0;
        *(_WORD *)(v7 + 4) = 257;
        v7 += 8;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = v7 - (_QWORD)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[8 * v10];
    v16 = &v15[8 * a2];
    v17 = v15;
    do
    {
      *(_DWORD *)v17 = 0;
      *((_WORD *)v17 + 2) = 257;
      v17 += 8;
    }
    while (v17 != v16);
    v18 = &v13[8 * v12];
    v20 = *a1;
    v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        v21 = *((_DWORD *)v19 - 2);
        v19 -= 8;
        v22 = *((_WORD *)v19 + 2);
        *((_DWORD *)v15 - 2) = v21;
        v15 -= 8;
        *((_WORD *)v15 + 2) = v22;
      }
      while (v19 != v20);
      v19 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t kaldi::quasar::TokenHeap::NewToken(kaldi::quasar::TokenHeap *this, float a2, float a3, int a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  std::runtime_error *exception;

  v7 = *((_QWORD *)this + 1);
  result = HIDWORD(v7);
  if (HIDWORD(v7) == (_DWORD)v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  *((_DWORD *)this + 3) = HIDWORD(v7) + 1;
  v9 = *(_QWORD *)this + 32 * HIDWORD(v7);
  *(_QWORD *)(v9 + 12) = 0;
  *(_QWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = a5;
  *(_DWORD *)(v9 + 28) = 0;
  *(float *)(v9 + 12) = a2;
  *(float *)(v9 + 16) = a3;
  *(_DWORD *)(v9 + 20) = a4;
  *(_DWORD *)(v9 + 8) = a6;
  *(_QWORD *)v9 = 0;
  return result;
}

void sub_1ADB48A64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState(uint64_t *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  int *v11;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(unsigned int *)(v4 + 8);
      v7 = v5[41];
      v10 = 0;
      v8 = v7 + 32 * v6;
      v10 = *(_DWORD *)(v8 + 28);
      v9 = *(float *)(v8 + 12);
      result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v10);
      if (!result || *((float *)result + 5) > v9)
      {
        v11 = &v10;
        result = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a3, &v10, (uint64_t)&std::piecewise_construct, &v11);
        *((float *)result + 5) = v9;
      }
      v4 = *(_QWORD *)(v4 + 16);
    }
    while (v4);
  }
  return result;
}

char *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v23 = a2;
  v5 = (char *)(a1 + 456);
  if (*(_DWORD *)(a1 + 256) == 0x7FFFFFFF)
  {
    (*(void (**)(_QWORD, uint64_t, char *, _QWORD))(**(_QWORD **)(a1 + 160) + 80))(*(_QWORD *)(a1 + 160), a2, v5, *(unsigned __int8 *)(a1 + 261));
  }
  else
  {
    v6 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 488), (int *)&v23);
    if (v6)
    {
      v5 = (char *)(v6 + 3);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 160) + 80))(*(_QWORD *)(a1 + 160), v23, v5, *(unsigned __int8 *)(a1 + 261));
      v8 = *(_QWORD *)(a1 + 472);
      v7 = *(_QWORD *)(a1 + 480);
      if (*(int *)(a1 + 256) <= (unint64_t)((v7 - v8) >> 4))
      {
        v18 = v23;
        v9 = *(_QWORD *)(a1 + 464);
        v19 = *(void **)(a1 + 456);
        v20 = v9;
        v21 = v8;
        v22 = v7;
        *(_OWORD *)v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        v5 = std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::pair<int const,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1 + 488, (int *)&v18, (uint64_t)&v18)+ 24;
        if (v19)
          free(v19);
      }
    }
  }
  if (*(_BYTE *)(a1 + 261))
  {
    v10 = (*((_QWORD *)v5 + 3) - *((_QWORD *)v5 + 2)) >> 4;
    v11 = v10 - 2;
    v12 = v10 - 1;
    v13 = (unint64_t)v23 << 32;
    if (a3 - 1 >= 0xFFFFFFFE)
      v14 = 1;
    else
      v14 = a3;
    v15 = (_QWORD *)(*(_QWORD *)v5 + 16 * v11);
    *v15 = 1;
    v15[1] = v13;
    v16 = (uint64_t *)(*(_QWORD *)v5 + 16 * v12);
    *v16 = v14;
    v16[1] = v13;
  }
  return v5;
}

void sub_1ADB48C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(uint64_t a1, unint64_t a2, int a3, int a4, char *a5, int a6, float a7)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t i;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  char v29;

  v10 = (uint64_t *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = a2 % *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(v11 + 16 * v12 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v11 + 16 * v12);
    v15 = (uint64_t *)(a1 + 8);
    if (v14 != -1)
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 16 * v14 + 8) + 16);
    v16 = *(_QWORD *)(v13 + 16);
    for (i = *v15; i != v16; i = *(_QWORD *)(i + 16))
    {
      if (*(_QWORD *)i == a2)
      {
        v19 = *(unsigned int *)(i + 8);
        v26 = *(_QWORD *)(a1 + 328) + 32 * v19;
        v28 = *(float *)(v26 + 12);
        v27 = (float *)(v26 + 12);
        if (v28 > a7)
        {
          *v27 = a7;
          if (!a5)
            return v19;
          goto LABEL_17;
        }
        if (!a5)
          return v19;
        v29 = 0;
        goto LABEL_18;
      }
    }
  }
  v18 = (int *)(*(_QWORD *)(a1 + 88) + 8 * a3);
  v19 = kaldi::quasar::TokenHeap::NewToken((kaldi::quasar::TokenHeap *)(a1 + 328), a7, 0.0, 0, *v18, a6);
  *v18 = v19;
  ++*(_DWORD *)(a1 + 288);
  v20 = a2 % *(_QWORD *)(a1 + 24);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v20);
  v22 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(v10);
  *(_QWORD *)v22 = a2;
  *(_DWORD *)(v22 + 8) = v19;
  v23 = v21 + 1;
  v24 = v21[1];
  if (v24)
  {
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 + 16);
    *(_QWORD *)(v24 + 16) = v22;
    *v23 = v22;
    if (!a5)
      return v19;
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    if (v25 != -1)
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v25 + 8) + 16);
    *v10 = v22;
    *(_QWORD *)(v22 + 16) = 0;
    *v23 = v22;
    *v21 = v25;
    *(_QWORD *)(a1 + 16) = v20;
    if (!a5)
      return v19;
  }
LABEL_17:
  v29 = 1;
LABEL_18:
  *a5 = v29;
  return v19;
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, _DWORD *a7, int a8, float a9, char a10, int a11)
{
  float v17;
  _DWORD *v18;
  float v19;
  uint64_t v20;
  float v22;
  float v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  char v45[8];
  float v46;
  unsigned int v47;

  if (a8)
  {
    v17 = *(float *)(a2 + 12);
    if (!a10
      || (float)((float)(v17 + *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 104) + 4 * a11)) - *(float *)(a1 + 232)) <= a9)
    {
      v42 = a8 - 1;
      if (a8 < 1)
      {
        v19 = 0.0;
      }
      else
      {
        v18 = a7;
        v19 = 0.0;
        v20 = a8;
        do
        {
          if (*v18++)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a6))
            {
              v22 = v46 + 0.0;
              if (v46 == INFINITY)
                v22 = INFINITY;
              if (v46 == -INFINITY)
                v22 = NAN;
              v23 = v22;
              a6 = v47;
            }
            else
            {
              v23 = INFINITY;
            }
          }
          else
          {
            v23 = 0.0;
          }
          v17 = v17 + v23;
          v19 = v19 + v23;
          --v20;
        }
        while (v20);
      }
      if (v17 < a9)
      {
        v45[0] = 0;
        v24 = (a6 << 32) + a5;
        v25 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v24, a4, 0, v45, a11, v17);
        v26 = *(_QWORD *)(a1 + 328);
        *(_DWORD *)(a2 + 20) = kaldi::quasar::TokenHeap::NewForwardLink((kaldi::quasar::TokenHeap *)(a1 + 328), v25, 0, a7[v42], v19, 0.0, *(_DWORD *)(a2 + 20));
        if (v45[0])
        {
          v27 = (unint64_t *)(v26 + 32 * v25);
          v28 = *v27;
          v29 = v27[1] & 0x3F | (a3 << 6);
          *v27 &= 0xFFFFFFFF00000001;
          *((_DWORD *)v27 + 2) = v29;
          v30 = v28 & 0x100000001 | ((unint64_t)a7[v42] << 33);
          *((_DWORD *)v27 + 2) = v29;
          *v27 = v30;
          *((_DWORD *)v27 + 7) = a6;
          v31 = *(_QWORD *)(a1 + 128);
          v32 = *(char **)(a1 + 120);
          if ((unint64_t)v32 >= v31)
          {
            v34 = *(char **)(a1 + 112);
            v35 = (v32 - v34) >> 4;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 3 > v36)
              v36 = v37 >> 3;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
              v38 = 0xFFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v38);
              v34 = *(char **)(a1 + 112);
              v32 = *(char **)(a1 + 120);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[16 * v35];
            v41 = &v39[16 * v38];
            *(_QWORD *)v40 = v24;
            *((_DWORD *)v40 + 2) = v25;
            v33 = v40 + 16;
            if (v32 != v34)
            {
              do
              {
                *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
                v40 -= 16;
                v32 -= 16;
              }
              while (v32 != v34);
              v34 = *(char **)(a1 + 112);
            }
            *(_QWORD *)(a1 + 112) = v40;
            *(_QWORD *)(a1 + 120) = v33;
            *(_QWORD *)(a1 + 128) = v41;
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v24;
            *((_DWORD *)v32 + 2) = v25;
            v33 = v32 + 16;
          }
          *(_QWORD *)(a1 + 120) = v33;
        }
      }
    }
  }
}

char *std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::pair<int const,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)v10 + 3) = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v10 + 4) = v13;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v10 = *v21;
LABEL_38:
    *v21 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v20 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADB4930C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
      free(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t kaldi::quasar::TokenHeap::NewForwardLink(kaldi::quasar::TokenHeap *this, int a2, int a3, int a4, float a5, float a6, int a7)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  std::runtime_error *exception;

  v8 = *((_QWORD *)this + 3);
  result = HIDWORD(v8);
  if (HIDWORD(v8) == (_DWORD)v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(exception, "Ran out of forward links in storage");
  }
  *((_DWORD *)this + 7) = HIDWORD(v8) + 1;
  v10 = *((_QWORD *)this + 2) + 24 * HIDWORD(v8);
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a4;
  *(float *)(v10 + 12) = a5;
  *(float *)(v10 + 16) = a6;
  *(_DWORD *)(v10 + 20) = a7;
  *(_DWORD *)v10 = 2 * a3;
  return result;
}

void sub_1ADB493F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(uint64_t a1, int a2, int a3)
{
  signed int v4;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[35];
  char v13;

  if (!*(_BYTE *)(a1 + 424))
  {
    v4 = a2;
    *(_BYTE *)(a1 + 424) = 1;
    *(_BYTE *)(a1 + 425) = a3;
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(a1, a2, a3);
    if (v4 >= 1)
    {
      do
      {
        LOBYTE(v12[0]) = 0;
        v13 = 0;
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(a1, v4 - 1, v12, &v13, a3, 0.0);
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, v4, a3);
        v6 = v4-- != 0;
      }
      while (v4 != 0 && v6);
    }
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, 0, a3);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"PruneActiveTokensFinal: pruned tokens from ", 43);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" links from ", 12);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" to ", 4);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pruned_tok_frames_ ", 20);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" pruned_link_toks_ ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1ADB4958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(uint64_t a1, int a2, int a3)
{
  BOOL v5;
  unint64_t *v6;
  char **v7;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  float v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char **v75;
  unsigned int i;
  _OWORD v78[2];
  int v79;
  _DWORD *v80[34];

  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 8 * a2))
    v5 = 1;
  else
    v5 = kaldi::g_kaldi_verbose_level < -1;
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"No tokens alive at end of file", 30);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
  }
  v74 = a2;
  memset(v78, 0, sizeof(v78));
  v79 = 1065353216;
  v6 = *(unint64_t **)(a1 + 8);
  if (v6)
  {
    v7 = (char **)(a1 + 432);
    v8 = INFINITY;
    v9 = INFINITY;
    do
    {
      v10 = *v6;
      i = *((_DWORD *)v6 + 2);
      v11 = i;
      v12 = *(_QWORD *)(a1 + 328);
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160), v10);
      v14 = INFINITY;
      if ((*(_DWORD *)(v12 + 32 * v11 + 8) & 0x3F) != 0)
        v15 = INFINITY;
      else
        v15 = v13;
      if (v15 != INFINITY)
        v14 = v15
            + (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), HIDWORD(v10));
      v80[0] = &i;
      *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5) = v14;
      v16 = v12 + 32 * v11;
      v17 = *(float *)(v16 + 12);
      if ((float)(v14 + v17) < v8)
        v8 = v14 + v17;
      if (v17 < v9)
        v9 = *(float *)(v16 + 12);
      if (a3)
      {
        v18 = i | ((unint64_t)*(unsigned int *)(v16 + 16) << 32);
        v20 = *(unint64_t **)(a1 + 440);
        v19 = *(_QWORD *)(a1 + 448);
        if ((unint64_t)v20 >= v19)
        {
          v22 = ((char *)v20 - *v7) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v19 - (_QWORD)*v7;
          v24 = v23 >> 2;
          if (v23 >> 2 <= (unint64_t)(v22 + 1))
            v24 = v22 + 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 448, v25);
          else
            v26 = 0;
          v27 = (unint64_t *)&v26[8 * v22];
          *v27 = v18;
          v21 = v27 + 1;
          v29 = *(char **)(a1 + 432);
          v28 = *(char **)(a1 + 440);
          if (v28 != v29)
          {
            do
            {
              v30 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *--v27 = v30;
            }
            while (v28 != v29);
            v28 = *v7;
          }
          *(_QWORD *)(a1 + 432) = v27;
          *(_QWORD *)(a1 + 440) = v21;
          *(_QWORD *)(a1 + 448) = &v26[8 * v25];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = v18;
          v21 = v20 + 1;
        }
        *(_QWORD *)(a1 + 440) = v21;
      }
      v6 = (unint64_t *)v6[2];
    }
    while (v6);
  }
  else
  {
    v9 = INFINITY;
    v8 = INFINITY;
  }
  v31 = v74;
  *(_BYTE *)(a1 + 296) = v8 != INFINITY;
  v75 = (char **)(a1 + 400);
  v70 = 8 * v31;
  do
  {
    i = 0;
    v32 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + v70);
    i = v32;
    if (!(_DWORD)v32)
      break;
    v71 = 0;
    do
    {
      v33 = *(_QWORD *)(a1 + 328);
      if (*(_BYTE *)(a1 + 296))
      {
        v80[0] = &i;
        v34 = (float)(*((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5)+ *(float *)(v33 + 32 * v32 + 12))- v8;
      }
      else
      {
        v34 = *(float *)(v33 + 32 * v32 + 12) - v9;
      }
      v35 = v33 + 32 * v32;
      v38 = *(_DWORD *)(v35 + 20);
      v37 = (_DWORD *)(v35 + 20);
      v36 = v38;
      v72 = v33 + 32 * v32;
      v73 = v33;
      if (v38)
      {
        v39 = 0;
        v40 = (float *)(v33 + 32 * v32 + 12);
        do
        {
          v41 = *(_QWORD *)(a1 + 344);
          v42 = v41 + 24 * v36;
          v43 = *(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(v42 + 4);
          v45 = *(float *)(v43 + 12);
          v44 = *(float *)(v43 + 16);
          v46 = v44 + (float)((float)((float)(*v40 + *(float *)(v42 + 16)) + *(float *)(v42 + 12)) - v45);
          if (v46 <= *(float *)(a1 + 192))
          {
            if (v46 >= 0.0)
            {
              v53 = v44 + (float)((float)((float)(*v40 + *(float *)(v42 + 16)) + *(float *)(v42 + 12)) - v45);
            }
            else
            {
              v53 = 0.0;
              if (v46 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
              }
            }
            if (v53 < v34)
              v34 = v53;
            v47 = *(unsigned int *)(v41 + 24 * v36 + 20);
            v39 = v36;
          }
          else
          {
            v47 = *(unsigned int *)(v41 + 24 * v36 + 20);
            v48 = (_DWORD *)(v41 + 24 * v39 + 20);
            if (!v39)
              v48 = v37;
            *v48 = v47;
            if (a3)
            {
              v49 = i;
              v51 = *(unint64_t **)(a1 + 408);
              v50 = *(_QWORD *)(a1 + 416);
              if ((unint64_t)v51 >= v50)
              {
                v55 = ((char *)v51 - *v75) >> 3;
                if ((unint64_t)(v55 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v56 = v50 - (_QWORD)*v75;
                v57 = v56 >> 2;
                if (v56 >> 2 <= (unint64_t)(v55 + 1))
                  v57 = v55 + 1;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v57;
                if (v58)
                  v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 416, v58);
                else
                  v59 = 0;
                v60 = &v59[8 * v55];
                *(_QWORD *)v60 = v36 | (v49 << 32);
                v52 = v60 + 8;
                v62 = *(char **)(a1 + 400);
                v61 = *(char **)(a1 + 408);
                if (v61 != v62)
                {
                  do
                  {
                    v63 = *((_QWORD *)v61 - 1);
                    v61 -= 8;
                    *((_QWORD *)v60 - 1) = v63;
                    v60 -= 8;
                  }
                  while (v61 != v62);
                  v61 = *v75;
                }
                *(_QWORD *)(a1 + 400) = v60;
                *(_QWORD *)(a1 + 408) = v52;
                *(_QWORD *)(a1 + 416) = &v59[8 * v58];
                if (v61)
                  operator delete(v61);
              }
              else
              {
                *v51 = v36 | ((unint64_t)i << 32);
                v52 = v51 + 1;
              }
              *(_QWORD *)(a1 + 408) = v52;
            }
          }
          v36 = v47;
        }
        while (v47);
      }
      v64 = INFINITY;
      if (v34 <= *(float *)(a1 + 192))
        v64 = v34;
      v65 = *(float *)(v72 + 16);
      if (v65 != v64
        && (COERCE_INT(fabs(v65 - v64)) > 2139095039
         || fabsf(v65 - v64) > (float)((float)(fabsf(v65) + fabsf(v64)) * 0.00001)))
      {
        v71 = 1;
      }
      *(float *)(v72 + 16) = v64;
      v32 = *(unsigned int *)(v73 + 32 * v32 + 24);
      i = v32;
    }
    while ((_DWORD)v32);
  }
  while ((v71 & 1) != 0);
  v66 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + v70);
  for (i = v66; (_DWORD)v66; i = v66)
  {
    v67 = *(_QWORD *)(a1 + 328) + 32 * v66;
    if (*(float *)(v67 + 16) != INFINITY)
    {
      if (*(_BYTE *)(a1 + 296))
      {
        v80[0] = &i;
        v68 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5);
        if (v68 != INFINITY)
        {
          v80[0] = &i;
          *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 304), &i, (uint64_t)&std::piecewise_construct, v80)+ 8) = v68;
        }
      }
      else
      {
        v80[0] = &i;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 304), &i, (uint64_t)&std::piecewise_construct, v80)+ 8) = 0;
      }
    }
    v66 = *(unsigned int *)(v67 + 24);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v78);
}

void sub_1ADB49BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(uint64_t a1, unsigned int a2, _BYTE *a3, _BYTE *a4, int a5, float a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  float v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char **v55;
  char v56;
  uint64_t v57;
  int v58;
  char **v59;
  _QWORD v62[35];

  *a3 = 0;
  *a4 = 0;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 8 * a2) && !*(_BYTE *)(a1 + 293))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance", 76);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    }
    *(_BYTE *)(a1 + 293) = 1;
  }
  v53 = 8 * a2;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + v53);
  if ((_DWORD)v9)
  {
    v55 = (char **)(a1 + 432);
    v59 = (char **)(a1 + 400);
    v56 = a5;
    do
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(a1 + 328);
        if ((v56 & 1) != 0)
        {
          v12 = v9 | ((unint64_t)*(unsigned int *)(v11 + 32 * v9 + 16) << 32);
          v14 = *(unint64_t **)(a1 + 440);
          v13 = *(_QWORD *)(a1 + 448);
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((char *)v14 - *v55) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v17 = v13 - (_QWORD)*v55;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 448, v19);
            else
              v20 = 0;
            v21 = (unint64_t *)&v20[8 * v16];
            *v21 = v12;
            v15 = v21 + 1;
            v23 = *(char **)(a1 + 432);
            v22 = *(char **)(a1 + 440);
            if (v22 != v23)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = *v55;
            }
            *(_QWORD *)(a1 + 432) = v21;
            *(_QWORD *)(a1 + 440) = v15;
            *(_QWORD *)(a1 + 448) = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          *(_QWORD *)(a1 + 440) = v15;
        }
        v58 = v10;
        v25 = v11 + 32 * v9;
        v28 = *(_DWORD *)(v25 + 20);
        v27 = (_DWORD *)(v25 + 20);
        v26 = v28;
        v57 = v11 + 32 * v9;
        if (v28)
        {
          v29 = 0;
          v30 = (float *)(v11 + 32 * v9 + 12);
          v31 = v9 << 32;
          v32 = INFINITY;
          do
          {
            v33 = *(_QWORD *)(a1 + 344);
            v34 = v33 + 24 * v26;
            v35 = *(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(v34 + 4);
            v36 = *(float *)(v35 + 16)
                + (float)((float)((float)(*v30 + *(float *)(v34 + 16)) + *(float *)(v34 + 12)) - *(float *)(v35 + 12));
            if (v36 <= *(float *)(a1 + 192))
            {
              if (v36 >= 0.0)
              {
                v42 = *(float *)(v35 + 16)
                    + (float)((float)((float)(*v30 + *(float *)(v34 + 16)) + *(float *)(v34 + 12)) - *(float *)(v35 + 12));
              }
              else
              {
                v42 = 0.0;
                if (v36 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Negative extra_cost: ", 21);
                  std::ostream::operator<<();
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
                }
              }
              if (v42 < v32)
                v32 = v42;
              v38 = *(unsigned int *)(v33 + 24 * v26 + 20);
              v29 = v26;
            }
            else
            {
              v37 = v27;
              if (v29)
                v37 = (_DWORD *)(*(_QWORD *)(a1 + 344) + 24 * v29 + 20);
              v38 = *(unsigned int *)(v33 + 24 * v26 + 20);
              *v37 = v38;
              if (a5)
              {
                v40 = *(uint64_t **)(a1 + 408);
                v39 = *(_QWORD *)(a1 + 416);
                if ((unint64_t)v40 >= v39)
                {
                  v44 = ((char *)v40 - *v59) >> 3;
                  if ((unint64_t)(v44 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v45 = v39 - (_QWORD)*v59;
                  v46 = v45 >> 2;
                  if (v45 >> 2 <= (unint64_t)(v44 + 1))
                    v46 = v44 + 1;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                    v47 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v47 = v46;
                  if (v47)
                    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 416, v47);
                  else
                    v48 = 0;
                  v49 = &v48[8 * v44];
                  *(_QWORD *)v49 = v31 | v26;
                  v41 = v49 + 8;
                  v51 = *(char **)(a1 + 400);
                  v50 = *(char **)(a1 + 408);
                  if (v50 != v51)
                  {
                    do
                    {
                      v52 = *((_QWORD *)v50 - 1);
                      v50 -= 8;
                      *((_QWORD *)v49 - 1) = v52;
                      v49 -= 8;
                    }
                    while (v50 != v51);
                    v50 = *v59;
                  }
                  *(_QWORD *)(a1 + 400) = v49;
                  *(_QWORD *)(a1 + 408) = v41;
                  *(_QWORD *)(a1 + 416) = &v48[8 * v47];
                  if (v50)
                    operator delete(v50);
                }
                else
                {
                  *v40 = v31 | v26;
                  v41 = v40 + 1;
                }
                *(_QWORD *)(a1 + 408) = v41;
              }
              *a4 = 1;
            }
            v26 = v38;
          }
          while (v38);
        }
        else
        {
          v32 = INFINITY;
        }
        v10 = v58;
        if (vabds_f32(v32, *(float *)(v57 + 16)) > a6)
          v10 = 1;
        *(float *)(v57 + 16) = v32;
        v9 = *(unsigned int *)(v57 + 24);
      }
      while ((_DWORD)v9);
      if ((v10 & 1) == 0)
        break;
      v56 = 0;
      *a3 = 1;
      v9 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + v53);
    }
    while ((_DWORD)v9);
  }
}

void sub_1ADB4A07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char **v28;
  _QWORD v29[35];

  v6 = (unsigned int *)(*(_QWORD *)(a1 + 88) + 8 * a2);
  v7 = *v6;
  if (!(_DWORD)v7)
  {
    if (*(_BYTE *)(a1 + 294))
      return;
    if (kaldi::g_kaldi_verbose_level <= -2)
    {
      *(_BYTE *)(a1 + 294) = 1;
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"No tokens alive [doing pruning]", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v7 = *v6;
    *(_BYTE *)(a1 + 294) = 1;
    if (!(_DWORD)v7)
      return;
  }
  v8 = 0;
  v28 = (char **)(a1 + 376);
  v9 = (unint64_t)a2 << 32;
  do
  {
    v10 = *(_QWORD *)(a1 + 328);
    v11 = v10 + 32 * v7;
    v14 = *(_DWORD *)(v11 + 24);
    v13 = (float *)(v11 + 24);
    v12 = v14;
    if (*(v13 - 2) == INFINITY)
    {
      v15 = (_DWORD *)(v10 + 32 * v8 + 24);
      if (!v8)
        v15 = v6;
      *v15 = v12;
      if (a3)
      {
        v17 = *(unint64_t **)(a1 + 384);
        v16 = *(_QWORD *)(a1 + 392);
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((char *)v17 - *v28) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v16 - (_QWORD)*v28;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 392, v22);
          else
            v23 = 0;
          v24 = (unint64_t *)&v23[8 * v19];
          *v24 = v9 | v7;
          v18 = v24 + 1;
          v26 = *(char **)(a1 + 376);
          v25 = *(char **)(a1 + 384);
          if (v25 != v26)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v24 = v27;
            }
            while (v25 != v26);
            v25 = *v28;
          }
          *(_QWORD *)(a1 + 376) = v24;
          *(_QWORD *)(a1 + 384) = v18;
          *(_QWORD *)(a1 + 392) = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v17 = v9 | v7;
          v18 = v17 + 1;
        }
        *(_QWORD *)(a1 + 384) = v18;
      }
      *v13 = 0.0;
      --*(_DWORD *)(a1 + 288);
    }
    else
    {
      v8 = v7;
    }
    v7 = v12;
  }
  while (v12);
}

void sub_1ADB4A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADB4A4C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E748;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E748;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

float kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::DecodableInterface>(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned int *v23;
  char *Arcs;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t i;
  float v31;
  void *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  float v40;
  float *v41;
  unint64_t v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  float v51;
  char *v52;
  void *v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  unsigned int v69;
  int v70;
  _QWORD *v71;
  int *v72;
  int *v73;
  int *v75;
  char *v76;
  float v77;
  uint64_t v78;
  int v79;
  float v80;
  float v81;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  float v95;
  unsigned int v96;
  int v97;
  _QWORD *v98;
  int *v99;
  int *v100;
  int *v102;
  char *v103;
  int *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  float v117;
  float v118;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  int v128;
  kaldi::quasar::TokenHeap *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unsigned int v136;
  unsigned int v138;
  void *__p[2];
  __int128 v140;
  int v141;
  _OWORD v142[2];
  int v143;
  unint64_t v144;
  float v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  float v149;
  unsigned int v150;

  v4 = a1;
  if (*(_BYTE *)(a1 + 424))
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(a1);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 != -1)
  {
    v6 = *(_QWORD *)(v4 + 32);
    do
    {
      v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      v5 = *v7;
    }
    while (v5 != -1);
  }
  v8 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = -1;
  v146 = 0;
  v145 = 0.0;
  v144 = 0;
  v9 = kaldi::GetCutoffHelper<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>((_QWORD *)v4, v4 + 176, v8, &v144, &v145, &v146, 1, a4);
  v10 = (unint64_t)(float)(*(float *)(v4 + 208) * (float)v144);
  if (*(_QWORD *)(v4 + 24) < v10)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v4 + 8, v10);
  v131 = v8;
  v11 = *(_DWORD *)(v4 + 368);
  v12 = (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) + 1);
  v13 = *(_QWORD *)(v4 + 528);
  if (v13 && (v14 = *(unsigned int *)(v13 + 8), v14 >= v12))
  {
    bzero(*(void **)v13, 4 * v14);
  }
  else
  {
    v15 = operator new();
    kaldi::quasar::LazyBuffer<float>::LazyBuffer(v15, v12, 1);
    *(_QWORD *)&v142[0] = 0;
    v16 = *(_QWORD *)(v4 + 528);
    *(_QWORD *)(v4 + 528) = v15;
    if (v16)
    {
      std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100](v4 + 528, v16);
      v17 = *(_QWORD *)&v142[0];
      *(_QWORD *)&v142[0] = 0;
      if (v17)
        std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100]((uint64_t)v142, v17);
    }
  }
  v136 = a3 + v11 - 1;
  v18 = *(_QWORD **)(v4 + 528);
  v19 = *(unsigned __int8 *)(v4 + 260);
  v20 = 0.0;
  memset(v142, 0, sizeof(v142));
  v143 = 1065353216;
  v133 = v4;
  v135 = v18;
  v127 = v19;
  if (v19)
  {
    v21 = *(float *)(v4 + 264);
    if (*(_DWORD *)(v4 + 268) == 0x7FFFFFFF)
    {
      v22 = v131;
      goto LABEL_53;
    }
    v22 = v131;
    if (v131)
    {
      v23 = (unsigned int *)v131;
      do
      {
        Arcs = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v4, *v23, *(_DWORD *)(*(_QWORD *)(v4 + 328) + 32 * v23[2]) >> 1);
        v25 = (int *)*((_QWORD *)Arcs + 2);
        v26 = (int *)*((_QWORD *)Arcs + 3);
        if (v25 != v26)
        {
          v27 = *v18;
          do
          {
            v28 = *v25;
            v20 = *(float *)(v27 + 4 * v28);
            if (v20 == 0.0)
            {
              v20 = -(**(float (***)(uint64_t, _QWORD, _QWORD))a2)(a2, v136, *v25);
              v27 = *v18;
              *(float *)(*v18 + 4 * v28) = v20;
            }
            v25 += 4;
          }
          while (v25 != v26);
        }
        v23 = (unsigned int *)*((_QWORD *)v23 + 2);
        v4 = v133;
      }
      while (v23);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v140 = 0;
    if (!(_DWORD)v12)
      goto LABEL_53;
    v29 = 0;
    for (i = 0; i != v12; ++i)
    {
      v31 = *(float *)(*v18 + 4 * i);
      if (v31 != 0.0)
      {
        if ((unint64_t)v29 >= (unint64_t)v140)
        {
          v33 = (float *)__p[0];
          v34 = ((char *)v29 - (char *)__p[0]) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v140 - (unint64_t)__p[0];
          if ((uint64_t)(v140 - (unint64_t)__p[0]) >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v37);
            v33 = (float *)__p[0];
            v29 = (float *)__p[1];
          }
          else
          {
            v38 = 0;
          }
          v39 = (float *)&v38[4 * v34];
          *v39 = v31;
          v32 = v39 + 1;
          while (v29 != v33)
          {
            v40 = *--v29;
            v20 = v40;
            *--v39 = v40;
          }
          __p[0] = v39;
          __p[1] = v32;
          *(_QWORD *)&v140 = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v29 = v31;
          v32 = v29 + 1;
        }
        __p[1] = v32;
        v29 = (float *)v32;
      }
    }
    v41 = (float *)__p[0];
    v42 = *(int *)(v4 + 268);
    if (v42 >= ((char *)v29 - (char *)__p[0]) >> 2)
    {
      v22 = v131;
      if (!__p[0])
        goto LABEL_53;
    }
    else
    {
      v43 = (float *)((char *)__p[0] + 4 * v42);
      v22 = v131;
      if (v43 != v29)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p[0], v43, v29, v20);
        v42 = *(int *)(v4 + 268);
        v41 = (float *)__p[0];
      }
      if (v41[v42] < v21)
        v21 = v41[v42];
    }
    __p[1] = v41;
    operator delete(v41);
LABEL_53:
    if (v22)
    {
      v44 = v131;
      do
      {
        v147 = *(_QWORD *)v44;
        v45 = *(unsigned int *)(v44 + 8);
        v46 = *(_QWORD *)(v4 + 328);
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v142, (int *)&v147))
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v140 = 0;
          v47 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v4, v147, *(_DWORD *)(v46 + 32 * v45) >> 1);
          v49 = (unsigned int *)*((_QWORD *)v47 + 2);
          v48 = (unsigned int *)*((_QWORD *)v47 + 3);
          while (v49 != v48)
          {
            v50 = *v49;
            v148 = *(unsigned int **)(v49 + 1);
            v149 = *((float *)v49 + 3);
            if ((_DWORD)v50)
            {
              v51 = *(float *)(*v135 + 4 * (int)v50);
              if (v51 == 0.0)
              {
                v51 = -(**(float (***)(uint64_t, _QWORD, uint64_t))a2)(a2, v136, v50);
                *(float *)(*v135 + 4 * (int)v50) = v51;
              }
              if (v51 <= v21)
              {
                v52 = (char *)__p[1];
                if (__p[1] >= (void *)v140)
                {
                  v54 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v56 = v140 - (unint64_t)__p[0];
                  if ((uint64_t)(v140 - (unint64_t)__p[0]) >> 3 > v55)
                    v55 = v56 >> 3;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                    v57 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v140, v57);
                  else
                    v58 = 0;
                  v59 = &v58[16 * v54];
                  *(_DWORD *)v59 = v50;
                  *(_QWORD *)(v59 + 4) = v148;
                  *((float *)v59 + 3) = v149;
                  v61 = (char *)__p[0];
                  v60 = (char *)__p[1];
                  v62 = v59;
                  if (__p[1] != __p[0])
                  {
                    do
                    {
                      *((_OWORD *)v62 - 1) = *((_OWORD *)v60 - 1);
                      v62 -= 16;
                      v60 -= 16;
                    }
                    while (v60 != v61);
                    v60 = (char *)__p[0];
                  }
                  v53 = v59 + 16;
                  __p[0] = v62;
                  __p[1] = v59 + 16;
                  *(_QWORD *)&v140 = &v58[16 * v57];
                  if (v60)
                    operator delete(v60);
                }
                else
                {
                  *(_DWORD *)__p[1] = v50;
                  *(_QWORD *)(v52 + 4) = v148;
                  *((float *)v52 + 3) = v149;
                  v53 = v52 + 16;
                }
                __p[1] = v53;
              }
            }
            v49 += 4;
          }
          v148 = &v147;
          v63 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v147, (uint64_t)&std::piecewise_construct, &v148);
          v64 = (void *)v63[3];
          v18 = v135;
          if (v64)
          {
            v63[4] = v64;
            operator delete(v64);
            v63[3] = 0;
            v63[4] = 0;
            v63[5] = 0;
          }
          *(_OWORD *)(v63 + 3) = *(_OWORD *)__p;
          v63[5] = v140;
        }
        v44 = *(_QWORD *)(v44 + 16);
      }
      while (v44);
    }
  }
  if (!v146)
  {
LABEL_125:
    v77 = INFINITY;
    goto LABEL_126;
  }
  v65 = *v146;
  v66 = v146[1];
  v67 = *(_QWORD *)(v4 + 328) + 32 * v146[2];
  v68 = *(float *)(v67 + 12);
  v69 = *(_DWORD *)v67;
  v70 = *(_DWORD *)v67 >> 1;
  LODWORD(v148) = *v146;
  if (v127)
  {
    __p[0] = &v148;
    v71 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v148, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    v73 = (int *)v71[3];
    v72 = (int *)v71[4];
    if (v69 >= 2 && *(_BYTE *)(v4 + 261) != 0)
    {
      v75 = (int *)v71[3];
      if (v72 == v73)
        goto LABEL_94;
      *(v72 - 4) = v70;
    }
    v75 = v72;
  }
  else
  {
    v76 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v4, v65, v69 >> 1);
    v73 = (int *)*((_QWORD *)v76 + 2);
    v75 = (int *)*((_QWORD *)v76 + 3);
  }
LABEL_94:
  if (v73 == v75)
    goto LABEL_125;
  v77 = INFINITY;
  do
  {
    v78 = *v73;
    if ((_DWORD)v78)
    {
      v79 = v73[1];
      v80 = *((float *)v73 + 2);
      if (v79)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, void **))(**(_QWORD **)(v4 + 168) + 32))(*(_QWORD *)(v4 + 168), v66, v73[1], __p))
        {
          v81 = NAN;
          if (v80 != -INFINITY)
          {
            v81 = NAN;
            if (*(float *)&__p[1] != -INFINITY)
            {
              v81 = INFINITY;
              if (*(float *)&__p[1] != INFINITY && v80 != INFINITY)
                v81 = v80 + *(float *)&__p[1];
            }
          }
          v79 = HIDWORD(__p[0]);
        }
        else
        {
          v81 = INFINITY;
        }
        v80 = v81;
      }
      v83 = *(float *)(*v18 + 4 * v78);
      if (v83 == 0.0)
      {
        v83 = -(**(float (***)(uint64_t, _QWORD, uint64_t))a2)(a2, v136, v78);
        *(float *)(*v18 + 4 * v78) = v83;
      }
      v84 = NAN;
      if (v80 != -INFINITY && v83 != -INFINITY)
      {
        v84 = INFINITY;
        v85 = v83 == INFINITY || v80 == INFINITY;
        v86 = v80 + v83;
        if (!v85)
          v84 = v86;
      }
      if (v79)
        v87 = *(float *)(v4 + 212);
      else
        v87 = 0.0;
      v88 = (float)((float)(v68 + v84) + v87) + v145;
      if (v88 < v77)
        v77 = v88;
    }
    v73 += 4;
  }
  while (v73 != v75);
LABEL_126:
  v89 = *(float *)(v4 + 272);
  *(_OWORD *)__p = 0u;
  v140 = 0u;
  v141 = 1065353216;
  v90 = v131;
  if (v89 != INFINITY)
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState((uint64_t *)v4, v131, __p);
  if (v131)
  {
    v130 = (kaldi::quasar::TokenHeap *)(v4 + 328);
    do
    {
      v91 = *(_QWORD *)v90;
      v138 = HIDWORD(*(_QWORD *)v90);
      v92 = *(unsigned int *)(v90 + 8);
      v93 = *(_QWORD *)v130;
      v134 = *(_QWORD *)v130 + 32 * v92;
      v94 = (float *)(v134 + 12);
      v95 = *(float *)(v134 + 12);
      v132 = v90;
      if (v95 > v9)
        goto LABEL_184;
      if (v89 != INFINITY)
      {
        v148 = &v138;
        if (v95 >= (float)(*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__p, (int *)&v138, (uint64_t)&std::piecewise_construct, &v148)+ 5)+ *(float *)(v4 + 272)))goto LABEL_184;
      }
      v96 = *(_DWORD *)v134;
      v97 = *(_DWORD *)v134 >> 1;
      v147 = v91;
      if (v127)
      {
        v148 = &v147;
        v98 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v147, (uint64_t)&std::piecewise_construct, &v148);
        v100 = (int *)v98[3];
        v99 = (int *)v98[4];
        if (v96 >= 2 && *(_BYTE *)(v4 + 261) != 0)
        {
          v102 = (int *)v98[3];
          if (v99 == v100)
            goto LABEL_142;
          *(v99 - 4) = v97;
        }
        v102 = v99;
      }
      else
      {
        v103 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v4, v91, v96 >> 1);
        v100 = (int *)*((_QWORD *)v103 + 2);
        v102 = (int *)*((_QWORD *)v103 + 3);
      }
LABEL_142:
      if (v100 != v102)
      {
        v104 = (int *)(v93 + 32 * v92 + 20);
        v128 = (_DWORD)v92 << 6;
        v105 = v135;
        while (2)
        {
          v106 = *v100;
          if (!(_DWORD)v106)
            goto LABEL_183;
          v107 = v100[1];
          v108 = *((float *)v100 + 2);
          v109 = v100[3];
          v110 = *(float *)(*v105 + 4 * v106);
          if (v110 == 0.0)
          {
            v110 = -(**(float (***)(uint64_t, _QWORD, _QWORD))a2)(a2, v136, *v100);
            *(float *)(*v105 + 4 * v106) = v110;
          }
          v111 = v110 + *v94;
          if (((int)v107 < *(_DWORD *)(v4 + 236) || (int)v107 > *(_DWORD *)(v4 + 240))
            && (float)((float)(v108 + v111) - *(float *)(v4 + 232)) > v77)
          {
            goto LABEL_183;
          }
          v112 = *(_QWORD *)(v4 + 280);
          if (v112)
          {
            if ((*(_DWORD *)(v134 + 8) & 0x3FLL) != 0)
            {
              LODWORD(v148) = v107;
              if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v112 + 64), (int *)&v148))
              {
                goto LABEL_183;
              }
            }
          }
          v113 = v138;
          v114 = 0.0;
          if ((_DWORD)v107)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unsigned int **))(**(_QWORD **)(v4 + 168) + 32))(*(_QWORD *)(v4 + 168), v138, v107, &v148) & 1) != 0)
            {
              v115 = NAN;
              if (v108 != -INFINITY)
              {
                v115 = NAN;
                if (v149 != -INFINITY)
                {
                  v115 = INFINITY;
                  if (v149 != INFINITY && v108 != INFINITY)
                    v115 = v108 + v149;
                }
              }
              v107 = HIDWORD(v148);
              v113 = v150;
              if (!HIDWORD(v148))
              {
LABEL_166:
                v108 = v115;
                goto LABEL_167;
              }
            }
            else
            {
              v115 = INFINITY;
            }
            v114 = *(float *)(v4 + 212);
            goto LABEL_166;
          }
LABEL_167:
          v117 = v108 + v114;
          v118 = v111 + v117;
          if ((float)(v111 + v117) <= v77 && v118 != INFINITY)
          {
            if ((float)(v118 + v145) < v77)
              v77 = v118 + v145;
            LOBYTE(v147) = 0;
            v120 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(v4, v109 + (v113 << 32), a3, 1, (char *)&v147, *(_DWORD *)(v134 + 8) & 0x3F, v118);
            v121 = *(_QWORD *)v130;
            v122 = *(_QWORD *)v130 + 32 * v120;
            *v104 = kaldi::quasar::TokenHeap::NewForwardLink(v130, v120, v106, v107, v117, v110, *v104);
            v123 = *(_QWORD *)(v133 + 280);
            if (v123
              && (_DWORD)v107
              && (LODWORD(v148) = v107,
                  !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v123 + 64), (int *)&v148))|| (*(_DWORD *)(v134 + 8) & 0x3FLL) != 0 && (*(_QWORD *)v134 & 0x100000000) != 0)
            {
              *(_QWORD *)v122 |= 0x100000000uLL;
            }
            if ((_BYTE)v147)
            {
              v124 = *(_QWORD *)v122 & 0x100000001 | (2 * v106) | (v107 << 33);
              *(_DWORD *)(v122 + 8) = *(_DWORD *)(v122 + 8) & 0x3F | v128;
              *(_QWORD *)v122 = v124;
              *(_DWORD *)(v121 + 32 * v120 + 28) = v113;
            }
            v4 = v133;
          }
          v105 = v135;
          v94 = (float *)(v134 + 12);
LABEL_183:
          v100 += 4;
          if (v100 == v102)
            break;
          continue;
        }
      }
LABEL_184:
      v125 = *(_QWORD *)(v132 + 16);
      *(_QWORD *)(v132 + 16) = *(_QWORD *)(v4 + 56);
      *(_QWORD *)(v4 + 56) = v132;
      v90 = v125;
    }
    while (v125);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v142);
  return v77;
}

void sub_1ADB4B204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens(_QWORD *a1, clockid_t a2, float a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[35];
  char v16;

  if ((int)a2 >= 1)
  {
    v5 = a2;
    v6 = a1[11];
    v7 = (8 * a2) | 5;
    v8 = a2;
    do
    {
      v9 = v8 - 1;
      if (*(_BYTE *)(v6 + 8 * (v8 - 1) + 4))
      {
        LOBYTE(v15[0]) = 0;
        v16 = 0;
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks((uint64_t)a1, v8 - 1, v15, &v16, 0, a3);
        v6 = a1[11];
        if (v8 >= 2 && LOBYTE(v15[0]))
          *(_BYTE *)(v6 + 8 * (v8 - 2) + 4) = 1;
        v10 = (v8 - 1);
        if (v16)
          *(_BYTE *)(v6 + 8 * v10 + 5) = 1;
        *(_BYTE *)(v6 + 8 * v10 + 4) = 0;
      }
      if ((uint64_t)v8 < v5 && *(_BYTE *)(v6 + v7))
      {
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t)a1, v8, 0);
        v6 = a1[11];
        *(_BYTE *)(v6 + v7) = 0;
      }
      v7 -= 8;
      --v8;
    }
    while (v9 + 1 > 1);
  }
  v11 = (void *)a1[57];
  if (v11)
  {
    free(v11);
    a1[57] = 0;
    a1[58] = 0;
  }
  a1[59] = 0;
  a1[60] = 0;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to ", 4);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" links from ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks((uint64_t)a1, a2);
}

void sub_1ADB4B478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[35];

  if (!*(_BYTE *)(a1 + 425))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Cannot undo PruneActiveTokensFinal(undoable=false)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v2 = *(_QWORD *)(a1 + 376);
  v3 = *(_QWORD *)(a1 + 384);
  if (v3 != v2)
  {
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 328);
    do
    {
      v6 = *(_QWORD *)(v3 - 8);
      v3 -= 8;
      v7 = 8 * (v6 >> 32);
      *(_DWORD *)(v5 + 32 * v6 + 24) = *(_DWORD *)(v4 + v7);
      *(_DWORD *)(v4 + v7) = v6;
      ++*(_DWORD *)(a1 + 288);
    }
    while (v3 != v2);
  }
  *(_QWORD *)(a1 + 384) = v2;
  v8 = *(unsigned int **)(a1 + 432);
  v9 = *(unsigned int **)(a1 + 440);
  if (v8 != v9)
  {
    v10 = *(_QWORD *)(a1 + 328);
    v11 = *(unsigned int **)(a1 + 432);
    do
    {
      *(_DWORD *)(v10 + 32 * *v11 + 16) = v11[1];
      v11 += 2;
    }
    while (v11 != v9);
  }
  v12 = *(_QWORD *)(a1 + 400);
  v13 = *(_QWORD *)(a1 + 408);
  if (v13 != v12)
  {
    v14 = *(_QWORD *)(a1 + 328);
    v15 = *(_QWORD *)(a1 + 344);
    do
    {
      v16 = *(_QWORD *)(v13 - 8);
      v13 -= 8;
      v17 = v14 + 32 * HIDWORD(v16);
      *(_DWORD *)(v15 + 24 * v16 + 20) = *(_DWORD *)(v17 + 20);
      *(_DWORD *)(v17 + 20) = v16;
    }
    while (v13 != v12);
  }
  *(_WORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = v8;
  *(_QWORD *)(a1 + 384) = v2;
  *(_QWORD *)(a1 + 408) = v12;
  *(_BYTE *)(a1 + 296) = 0;
  std::__tree<int>::destroy(a1 + 304, *(_QWORD **)(a1 + 312));
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"UndoPruneActiveTokensFinal: restored tokens from ", 49);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" to ", 4);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" links from ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21);
  }
}

void sub_1ADB4B678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::GetCutoffHelper<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float *a5, _QWORD *a6, int a7, float a8)
{
  uint64_t v9;
  int v12;
  int v13;
  void **v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  float *v29;
  float v30;
  BOOL v31;
  uint64_t v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  unint64_t v40;
  float *v41;
  int v42;
  float v43;
  float v44;
  float *v45;
  int v48;
  unint64_t v49;

  v9 = a3;
  v12 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12))
    v12 = *(_DWORD *)(a2 + 12);
  if (a7)
    v13 = v12;
  else
    v13 = 0;
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v13 == 0)
  {
    v32 = 0;
    v33 = INFINITY;
    if (a3)
    {
      do
      {
        v34 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
        if (v34 >= v33)
        {
          v35 = 1;
        }
        else
        {
          v33 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
          v35 = a6 == 0;
        }
        if (!v35)
        {
          *a6 = v9;
          v33 = v34;
        }
        v9 = *(_QWORD *)(v9 + 16);
        ++v32;
      }
      while (v9);
    }
    if (a4)
      *a4 = v32;
    if (a5)
      *a5 = *(float *)a2;
    return v33 + *(float *)a2;
  }
  else
  {
    v48 = v13;
    v49 = *(int *)(a2 + 4);
    v15 = (void **)(a1 + 17);
    a1[18] = a1[17];
    v16 = 0;
    if (a3)
    {
      v17 = -INFINITY;
      v18 = INFINITY;
      do
      {
        v19 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
        v21 = (float *)a1[18];
        v20 = a1[19];
        if ((unint64_t)v21 >= v20)
        {
          v23 = (float *)*v15;
          v24 = ((char *)v21 - (_BYTE *)*v15) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v26 = v20 - (_QWORD)v23;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 19), v27);
            v23 = (float *)a1[17];
            v21 = (float *)a1[18];
          }
          else
          {
            v28 = 0;
          }
          v29 = (float *)&v28[4 * v24];
          *v29 = v19;
          v22 = v29 + 1;
          while (v21 != v23)
          {
            v30 = *--v21;
            a8 = v30;
            *--v29 = v30;
          }
          a1[17] = v29;
          a1[18] = v22;
          a1[19] = &v28[4 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v21 = v19;
          v22 = v21 + 1;
        }
        a1[18] = v22;
        if (v19 >= v18)
        {
          v31 = 1;
        }
        else
        {
          v18 = v19;
          v31 = a6 == 0;
        }
        if (!v31)
        {
          *a6 = v9;
          v18 = v19;
        }
        if (v19 > v17)
          v17 = v19;
        v9 = *(_QWORD *)(v9 + 16);
        ++v16;
      }
      while (v9);
    }
    else
    {
      v18 = INFINITY;
      v17 = -INFINITY;
    }
    if (a4)
      *a4 = v16;
    v37 = *(float *)a2;
    v36 = INFINITY;
    if (!*(_DWORD *)(a2 + 12))
      v17 = INFINITY;
    v38 = (float *)a1[17];
    v39 = (float *)a1[18];
    v40 = v39 - v38;
    if (v40 <= v49)
    {
      v42 = v48;
    }
    else
    {
      v41 = &v38[v49];
      v42 = v48;
      if (v41 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v41, v39, a8);
        v38 = (float *)a1[17];
        v39 = (float *)a1[18];
        v40 = v39 - v38;
      }
      v36 = v38[v49];
    }
    v43 = v18 + v37;
    if (v40 > v42)
      v44 = v18;
    else
      v44 = v17;
    if (v42 && v40 > v42)
    {
      v45 = &v38[v42];
      if (v40 > v49)
        v39 = &v38[v49];
      if (v45 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v45, v39, v44);
        v38 = (float *)*v15;
      }
      v44 = v38[v42];
    }
    if (v36 >= v43)
    {
      if (v44 <= v43)
      {
        *a5 = *(float *)a2;
        return v43;
      }
      else
      {
        if (a5)
          *a5 = (float)(v44 - v18) + *(float *)(a2 + 28);
        return v44;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v36 - v18) + *(float *)(a2 + 28);
    }
  }
  return v36;
}

uint64_t kaldi::quasar::LazyBuffer<float>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  vm_address_t address;
  _QWORD v13[34];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3)
    *(_DWORD *)(a1 + 12) = a2;
  address = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 4 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      v8 = strlen((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EE0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(MEMORY[0x1E0DE4EE0] + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = address;
  return a1;
}

void sub_1ADB4BB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADB4BB24(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADB4BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(uint64_t a1, clockid_t a2)
{
  kaldi::quasar::TokenHeap *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  char *v27;
  int v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  clockid_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *__p;
  char *v47;
  char *v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52[3];
  void *v53;
  void *v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57[36];

  if (*(_BYTE *)(a1 + 424))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Skipping compaction final pruning because has been done", 55);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57);
    }
    return;
  }
  v3 = (kaldi::quasar::TokenHeap *)(a1 + 328);
  v55[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v55, a2);
  v56 = 0;
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MarkAndTraceLiveTokens((kaldi::quasar::TokenHeap *)a1);
  kaldi::quasar::TokenHeap::RemoveDeadObjects(v3, (uint64_t *)v52);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = v52[0];
    do
    {
      *(_DWORD *)(v4 + 8) = v5[*(unsigned int *)(v4 + 8)];
      v4 = *(_QWORD *)(v4 + 16);
    }
    while (v4);
  }
  v6 = *(_DWORD **)(a1 + 88);
  v7 = *(_DWORD **)(a1 + 96);
  if (v6 != v7)
  {
    v8 = v52[0];
    do
    {
      *v6 = v8[*v6];
      v6 += 2;
    }
    while (v6 != v7);
  }
  v9 = *(_DWORD **)(a1 + 376);
  v10 = *(_DWORD **)(a1 + 384);
  if (v9 != v10)
  {
    v11 = v52[0];
    do
    {
      *v9 = v11[*v9];
      v9 += 2;
    }
    while (v9 != v10);
  }
  v12 = *(unsigned int **)(a1 + 400);
  v13 = *(unsigned int **)(a1 + 408);
  if (v12 != v13)
  {
    v14 = v53;
    v15 = v52[0];
    do
    {
      v16 = v12[1];
      *v12 = v14[*v12];
      v12[1] = v15[v16];
      v12 += 2;
    }
    while (v12 != v13);
  }
  v50 = 0;
  v51 = 0;
  v49 = (uint64_t *)&v50;
  v17 = *(_QWORD **)(a1 + 304);
  v18 = (_QWORD *)(a1 + 312);
  if (v17 != (_QWORD *)(a1 + 312))
  {
    do
    {
      LODWORD(v57[0]) = *((_DWORD *)v52[0] + *((unsigned int *)v17 + 7));
      HIDWORD(v57[0]) = *((_DWORD *)v17 + 8);
      std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,float>>(&v49, (unsigned int *)v57, v57);
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != v18);
  }
  std::__tree<int>::destroy(a1 + 304, *(_QWORD **)(a1 + 312));
  v22 = v50;
  *(_QWORD *)(a1 + 304) = v49;
  *(_QWORD *)(a1 + 312) = v22;
  v23 = v51;
  *(_QWORD *)(a1 + 320) = v51;
  if (v23)
  {
    v22[2] = v18;
    v49 = (uint64_t *)&v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v18;
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  v24 = (unsigned int **)(a1 + 432);
  v25 = *(unsigned int **)(a1 + 432);
  v26 = *(unsigned int **)(a1 + 440);
  if (v25 == v26)
  {
    v27 = 0;
    if (!v25)
      goto LABEL_47;
  }
  else
  {
    v27 = 0;
    do
    {
      v28 = *((_DWORD *)v52[0] + *v25);
      v29 = v25[1];
      if (v27 >= v48)
      {
        v30 = __p;
        v31 = (v27 - __p) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v33 = v48 - __p;
        if ((v48 - __p) >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v48, v34);
          v30 = __p;
          v27 = v47;
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[8 * v31];
        *(_DWORD *)v36 = v28;
        *((_DWORD *)v36 + 1) = v29;
        v37 = v36;
        if (v27 != v30)
        {
          do
          {
            v38 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          while (v27 != v30);
          v30 = __p;
        }
        v27 = v36 + 8;
        __p = v37;
        v48 = &v35[8 * v34];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v27 = v28;
        *((_DWORD *)v27 + 1) = v29;
        v27 += 8;
      }
      v47 = v27;
      v25 += 2;
    }
    while (v25 != v26);
    v25 = *v24;
    if (!*v24)
      goto LABEL_47;
  }
  *(_QWORD *)(a1 + 440) = v25;
  operator delete(v25);
  *v24 = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  v27 = v47;
LABEL_47:
  v39 = v48;
  *(_QWORD *)(a1 + 432) = __p;
  *(_QWORD *)(a1 + 440) = v27;
  *(_QWORD *)(a1 + 448) = v39;
  v48 = 0;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Compacted in ", 13);
    kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v40);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ms ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"tokens ", 7);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" -> ", 4);
    v44 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" and forward links ", 19);
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57);
  }
  std::__tree<int>::destroy((uint64_t)&v49, v50);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
}

void sub_1ADB4C208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  std::__tree<int>::destroy((uint64_t)&a13, a14);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a16);
  _Unwind_Resume(a1);
}

kaldi::quasar::TokenHeap *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MarkAndTraceLiveTokens(kaldi::quasar::TokenHeap *result)
{
  kaldi::quasar::TokenHeap *v1;
  uint64_t i;
  unsigned int *v3;
  unsigned int *j;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *k;
  uint64_t m;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int *n;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  kaldi::quasar::TokenHeap *v15;
  unsigned int v16;

  v1 = result;
  for (i = *((_QWORD *)result + 1); i; i = *(_QWORD *)(i + 16))
    result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), *(_DWORD *)(i + 8), 1);
  v3 = (unsigned int *)*((_QWORD *)v1 + 11);
  for (j = (unsigned int *)*((_QWORD *)v1 + 12);
        v3 != j;
        result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v5, 1))
  {
    v5 = *v3;
    v3 += 2;
  }
  v6 = (unsigned int *)*((_QWORD *)v1 + 50);
  for (k = (unsigned int *)*((_QWORD *)v1 + 51); v6 != k; v6 += 2)
  {
    for (m = *v6; (_DWORD)m; m = v9[5])
    {
      v9 = (_DWORD *)(*((_QWORD *)v1 + 43) + 24 * m);
      *v9 |= 1u;
    }
    result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v6[1], 1);
  }
  v10 = (unsigned int *)*((_QWORD *)v1 + 47);
  for (n = (unsigned int *)*((_QWORD *)v1 + 48);
        v10 != n;
        result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v12, 1))
  {
    v12 = *v10;
    v10 += 2;
  }
  v13 = (unsigned int *)*((_QWORD *)v1 + 54);
  v14 = (unsigned int *)*((_QWORD *)v1 + 55);
  if (v13 != v14)
  {
    v15 = (kaldi::quasar::TokenHeap *)((char *)v1 + 328);
    do
    {
      v16 = *v13;
      v13 += 2;
      result = kaldi::quasar::TokenHeap::MarkAndTraceToken(v15, v16, 1);
    }
    while (v13 != v14);
  }
  return result;
}

uint64_t kaldi::quasar::TokenHeap::RemoveDeadObjects@<X0>(kaldi::quasar::TokenHeap *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  v4 = *((unsigned int *)this + 3);
  if (v4 >= 2)
  {
    v5 = 1;
    v6 = 32;
    do
    {
      v7 = *(_QWORD *)this + v6;
      if ((*(_QWORD *)v7 & 1) != 0)
      {
        v8 = (unint64_t)*(unsigned int *)(v7 + 8) >> 6;
        if ((_DWORD)v8)
        {
          kaldi::quasar::TokenHeap::MarkAndTraceToken(this, v8, 1);
          v4 = *((unsigned int *)this + 3);
        }
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < v4);
  }
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::RemoveDeadElements((uint64_t)this, (std::vector<unsigned int> *)a2);
  result = kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::RemoveDeadElements((uint64_t)this + 16, (std::vector<unsigned int> *)a2 + 1);
  if (*((_DWORD *)this + 3) >= 2u)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = (_DWORD *)(*(_QWORD *)this + v10);
      v13 = *a2;
      v14 = v12[13];
      v12[14] = *(_DWORD *)(*a2 + 4 * v12[14]);
      v12[10] = v12[10] & 0x3F | (*(_DWORD *)(v13 + (((unint64_t)v12[10] >> 4) & 0xFFFFFFC)) << 6);
      v12[13] = *(_DWORD *)(a2[3] + 4 * v14);
      ++v11;
      v10 += 32;
    }
    while (v11 < *((unsigned int *)this + 3));
  }
  v15 = *((unsigned int *)this + 7);
  if (v15 >= 2)
  {
    v16 = *a2;
    v17 = a2[3];
    v18 = (_DWORD *)(*((_QWORD *)this + 2) + 44);
    v19 = v15 - 1;
    do
    {
      *(v18 - 4) = *(_DWORD *)(v16 + 4 * *(v18 - 4));
      *v18 = *(_DWORD *)(v17 + 4 * *v18);
      v18 += 6;
      --v19;
    }
    while (v19);
  }
  return result;
}

void sub_1ADB4C4C8(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState *v1;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::TokenHeap *kaldi::quasar::TokenHeap::MarkAndTraceToken(kaldi::quasar::TokenHeap *this, unsigned int a2, int a3)
{
  kaldi::quasar::TokenHeap *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;

  if (a2)
  {
    v3 = this;
    v4 = a2;
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)this + 32 * a2;
    if ((*(_QWORD *)v6 & 1) == 0)
    {
      v7 = *(_DWORD *)(v6 + 8);
      *(_QWORD *)v6 |= 1uLL;
      *(_DWORD *)(v6 + 8) = v7;
      for (i = *(unsigned int *)(v6 + 20); (_DWORD)i; i = v9[5])
      {
        v9 = (_DWORD *)(*((_QWORD *)this + 2) + 24 * i);
        *v9 |= 1u;
      }
      if (a3)
      {
        while (1)
        {
          v10 = v5 + 32 * v4;
          v11 = *(_DWORD *)(v10 + 24);
          if (!v11)
            break;
          this = (kaldi::quasar::TokenHeap *)kaldi::quasar::TokenHeap::MarkAndTraceToken(v3, *(_DWORD *)(v10 + 24), 0);
          v4 = v11;
          v5 = *(_QWORD *)v3;
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;

  v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    v7 = 1;
  }
  else
  {
    v5 = 1;
    v6 = 32;
    v7 = 1;
    do
    {
      v8 = *(_QWORD *)a1;
      v9 = (_OWORD *)(*(_QWORD *)a1 + v6);
      if ((*(_QWORD *)v9 & 1) != 0)
      {
        if (v5 != v7)
        {
          v10 = (_OWORD *)(v8 + 32 * v7);
          v11 = v9[1];
          *v10 = *v9;
          v10[1] = v11;
          v8 = *(_QWORD *)a1;
        }
        *(_QWORD *)(v8 + 32 * v7) &= ~1uLL;
        this->__begin_[v5] = v7++;
      }
      else
      {
        this->__begin_[v5] = -1;
      }
      ++v5;
      v6 += 32;
    }
    while (v4 != v5);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::ShrinkBuffer(a1, v7);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    v7 = 1;
  }
  else
  {
    v5 = 1;
    v6 = 24;
    v7 = 1;
    do
    {
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)a1 + v6;
      if ((*(_BYTE *)v9 & 1) != 0)
      {
        if (v5 != v7)
        {
          v10 = v8 + 24 * v7;
          v11 = *(_OWORD *)v9;
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v10 = v11;
          v8 = *(_QWORD *)a1;
        }
        *(_DWORD *)(v8 + 24 * v7) &= ~1u;
        this->__begin_[v5] = v7++;
      }
      else
      {
        this->__begin_[v5] = -1;
      }
      ++v5;
      v6 += 24;
    }
    while (v4 != v5);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::ShrinkBuffer(a1, v7);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  _QWORD v10[34];

  result = sysconf(29);
  v5 = (result - 1 + 32 * a2) & -result;
  v6 = (result - 1 + 32 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    result = madvise((void *)(v5 + *(_QWORD *)a1), v6 - v5, 7);
    if ((_DWORD)result)
    {
      v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  _QWORD v10[34];

  result = sysconf(29);
  v5 = (result - 1 + 24 * a2) & -result;
  v6 = (result - 1 + 24 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    result = madvise((void *)(v5 + *(_QWORD *)a1), v6 - v5, 7);
    if ((_DWORD)result)
    {
      v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,float>>(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void ***std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1AF44D190](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 40);
      v4 -= 40;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  int v31;
  BOOL IsSelfLoop;
  int v33;
  void *__p[2];
  unsigned __int8 v35;
  void *v36[2];
  unsigned __int8 v37;
  _QWORD v38[35];

  v3 = *a2;
  v4 = (unint64_t)*a2 >> 33;
  if ((_DWORD)v4 && (_DWORD)v4 != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 152);
    v7 = *(char **)(a1 + 144);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *(char **)(a1 + 136);
      v10 = (v7 - v9) >> 2;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = (uint64_t)(v6 - (_QWORD)v9) >> 1;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 152, v13);
        v9 = *(char **)(a1 + 136);
        v7 = *(char **)(a1 + 144);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *(_DWORD *)v15 = v4;
      v8 = v15 + 4;
      while (v7 != v9)
      {
        v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *(_QWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 144) = v8;
      *(_QWORD *)(a1 + 152) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_DWORD *)v7 = v4;
      v8 = v7 + 4;
    }
    *(_QWORD *)(a1 + 144) = v8;
    LODWORD(v3) = *(_DWORD *)a2;
  }
  if (v3 >= 2)
  {
    v18 = v3 >> 1;
    if ((*(_DWORD *)(a1 + 72) & 0x80000000) != 0)
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 64);
    v19 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)a1, v18);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"BetterTraceback STEP current_frame_: ", 37);
      v20 = (_QWORD *)std::ostream::operator<<();
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" phone: ", 8);
      v22 = *(_QWORD *)(a1 + 32);
      if (v22)
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v22 + 88))(v36, v22, v19);
      else
        std::string::basic_string[abi:ne180100]<0>(v36, "");
      if ((v37 & 0x80u) == 0)
        v23 = v36;
      else
        v23 = (void **)v36[0];
      if ((v37 & 0x80u) == 0)
        v24 = v37;
      else
        v24 = (uint64_t)v36[1];
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" final: ", 8);
      kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)a1, v18);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" isloop: ", 9);
      kaldi::TransitionModel::IsSelfLoop(*(kaldi::TransitionModel **)a1, v18);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" current_phone_: ", 17);
      kaldi::quasar::BetterTracebackPhone::ToString((uint64_t *)__p, (kaldi::quasar::BetterTracebackPhone *)(a1 + 68), *(const fst::SymbolTable **)(a1 + 32));
      if ((v35 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v35 & 0x80u) == 0)
        v30 = v35;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      if ((char)v35 < 0)
        operator delete(__p[0]);
      if ((char)v37 < 0)
        operator delete(v36[0]);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
    }
    v31 = *(_DWORD *)(a1 + 64);
    if (v31 < 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, "current_frame_ >= 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    if (v19 == *(_DWORD *)(a1 + 16))
    {
      ++*(_DWORD *)(a1 + 128);
    }
    else
    {
      if (kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)a1, v18)
        && (*(_DWORD *)(a1 + 68) & 0x80000000) == 0)
      {
        kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(a1);
      }
      IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(*(kaldi::TransitionModel **)a1, v18);
      v31 = *(_DWORD *)(a1 + 64);
      if (!IsSelfLoop)
      {
        *(_DWORD *)(a1 + 68) = v31;
        v33 = *(_DWORD *)(a1 + 80) + *(_DWORD *)(a1 + 128);
        *(_DWORD *)(a1 + 76) = v19;
        *(_DWORD *)(a1 + 80) = v33;
        *(_DWORD *)(a1 + 128) = 0;
      }
    }
    *(_DWORD *)(a1 + 64) = v31 - 1;
  }
}

void sub_1ADB4CD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a22);
  _Unwind_Resume(a1);
}

void sub_1ADB4CDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(uint64_t a1)
{
  _QWORD *v2;
  __int128 *v3;
  __n128 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  __n128 *v27;
  unsigned __int32 v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  unsigned __int32 v32;
  _OWORD *v33;
  _DWORD *v35;
  BOOL v36;
  _DWORD *v37;
  __n128 *v38;
  uint64_t v39;
  char *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  if ((*(_DWORD *)(a1 + 68) & 0x80000000) == 0)
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(a1);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"BetterTraceback FINALIZE utt_trailing_sil_start_frame_: ", 56);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", utt_speech_start_frame_: ", 27);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44);
  }
  v3 = (__int128 *)(a1 + 160);
  v4 = (__n128 **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144) - v5;
  if (v6)
  {
    v7 = 0;
    v8 = v6 >> 2;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    v10 = (void **)(a1 + 168);
    do
    {
      v11 = (char *)*v10;
      if (*v10 == v3)
      {
        v11 = (char *)operator new(0x38uLL);
        v24 = *(_DWORD *)(v5 + 4 * v7);
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 1) = v3;
        *((_QWORD *)v11 + 2) = 0;
        *((_QWORD *)v11 + 5) = -1;
        *((_DWORD *)v11 + 12) = -1;
        *((_DWORD *)v11 + 13) = v24;
        v25 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)v11 = v25;
        *(_QWORD *)(v25 + 8) = v11;
        *(_QWORD *)(a1 + 160) = v11;
        ++*(_QWORD *)(a1 + 176);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8);
        v15 = *(_QWORD *)(v12 + 40);
        v13 = v12 + 40;
        v14 = v15;
        v16 = *(_DWORD *)(v5 + 4 * v7);
        if (v15)
        {
          v17 = v13;
          do
          {
            v18 = *(_DWORD *)(v14 + 28);
            v19 = v18 < v16;
            if (v18 >= v16)
              v20 = (uint64_t *)v14;
            else
              v20 = (uint64_t *)(v14 + 8);
            if (!v19)
              v17 = v14;
            v14 = *v20;
          }
          while (*v20);
          if (v17 != v13 && v16 >= *(_DWORD *)(v17 + 28))
            goto LABEL_22;
        }
        if (v16 == *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24))
        {
LABEL_22:
          v21 = operator new(0x38uLL);
          v22 = *(_DWORD *)(v5 + 4 * v7);
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          v21[5] = -1;
          *((_DWORD *)v21 + 12) = -1;
          *((_DWORD *)v21 + 13) = v22;
          v23 = *(_QWORD *)v11;
          *(_QWORD *)(v23 + 8) = v21;
          *v21 = v23;
          *(_QWORD *)v11 = v21;
          v21[1] = v11;
          ++*(_QWORD *)(a1 + 176);
          v11 = (char *)v21;
        }
        else
        {
          *((_DWORD *)v11 + 13) = v16;
        }
      }
      v10 = (void **)(v11 + 8);
      ++v7;
    }
    while (v7 != v9);
  }
  *(_QWORD *)(a1 + 144) = v5;
  v26 = (uint64_t *)std::remove_if[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> const&)#1}>(*(_QWORD *)(a1 + 168), a1 + 160, a1);
  std::list<kaldi::quasar::BetterTracebackWord>::erase(a1 + 160, v26, (uint64_t *)(a1 + 160));
  if (*(_QWORD *)(a1 + 176))
  {
    std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>>(*v4, (__n128 *)(a1 + 160));
    v27 = *v4;
    if (*v4 != (__n128 *)v3)
    {
      v28 = *(_DWORD *)(a1 + 56);
      do
      {
        v29 = (_DWORD *)v27[1].n128_u64[0];
        v30 = (_DWORD *)v27[1].n128_u64[1];
        if (v29 == v30)
        {
          v27[2].n128_u32[2] = v28;
          v27[2].n128_u32[3] = v28;
          v31 = v29;
        }
        else
        {
          v27[2].n128_u32[2] = *(v30 - 4);
          v28 = v29[1];
          v27[2].n128_u32[3] = v28;
          if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
          {
            v27[3].n128_u32[0] = v28;
            do
            {
              if (!kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(a1 + 24), v29[2]))
                break;
              v32 = *v29;
              v29 += 4;
              v27[3].n128_u32[0] = v32;
            }
            while (v29 != v30);
            v31 = (_DWORD *)v27[1].n128_u64[0];
            v30 = (_DWORD *)v27[1].n128_u64[1];
          }
          else
          {
            v27[3].n128_u32[0] = v28 - v29[3] + 1;
            v31 = v29;
          }
          v33 = v30 - 4;
          if (v31 != v30 && v33 > (_OWORD *)v31)
          {
            v35 = v31 + 4;
            do
            {
              v44 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v35 - 1) = *v33;
              *v33-- = v44;
              v36 = v35 >= (_DWORD *)v33;
              v35 += 4;
            }
            while (!v36);
            v31 = (_DWORD *)v27[1].n128_u64[0];
            v29 = (_DWORD *)v27[1].n128_u64[1];
          }
          else
          {
            v29 = v30;
          }
        }
        v37 = std::remove_if[abi:ne180100]<std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *> const&)#2}>(v31, v29, a1);
        if ((_DWORD *)v27[1].n128_u64[1] != v37)
          v27[1].n128_u64[1] = (unint64_t)v37;
        v27 = (__n128 *)v27->n128_u64[1];
      }
      while (v27 != (__n128 *)v3);
    }
    if (*(_BYTE *)(a1 + 48) && (*(_DWORD *)(a1 + 16) & 0x80000000) == 0)
    {
      *(_QWORD *)&v44 = &v44;
      *((_QWORD *)&v44 + 1) = &v44;
      v45 = 0;
      v38 = *v4;
      if (*v4 != (__n128 *)v3)
      {
        v39 = 0;
        v40 = (char *)&v44;
        do
        {
          if (v39
            && v38[3].n128_u32[1] == *((_DWORD *)v40 + 13)
            && (v41 = (_DWORD *)v38[1].n128_u64[0], v38[1].n128_u64[1] - (_QWORD)v41 == 16)
            && (v42 = *((_QWORD *)v40 + 3), v42 - *((_QWORD *)v40 + 2) == 16)
            && v41[2] == *(_DWORD *)(v42 - 8)
            && !*(_DWORD *)(v42 - 4))
          {
            *(_QWORD *)(v40 + 44) = *(unint64_t *)((char *)&v38[2].n128_u64[1] + 4);
            *(_DWORD *)(v42 - 12) = v41[1];
            *(_DWORD *)(v42 - 4) = v41[3];
          }
          else
          {
            v40 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>((uint64_t)&v44, 0, 0, (uint64_t)&v38[1]);
            v43 = v44;
            *(_QWORD *)v40 = v44;
            *((_QWORD *)v40 + 1) = &v44;
            *(_QWORD *)(v43 + 8) = v40;
            v39 = v45 + 1;
            *(_QWORD *)&v44 = v40;
            ++v45;
          }
          v38 = (__n128 *)v38->n128_u64[1];
        }
        while (v38 != (__n128 *)v3);
      }
      if (v3 != &v44)
        std::list<kaldi::quasar::BetterTracebackWord>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>((uint64_t)v3, *((uint64_t *)&v44 + 1), (uint64_t)&v44);
      std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear((uint64_t *)&v44);
    }
  }
}

void sub_1ADB4D1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(&a9);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::GetWords@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = a1 + 160;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 == a1 + 160)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = v4;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v5);
  }
  return std::vector<kaldi::quasar::BetterTracebackWord>::__init_with_size[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(a2, v4, v5, v6);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::BetterTraceback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  int v9;
  double result;
  _QWORD v11[34];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_BYTE *)(a1 + 48) = a9;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = a8;
  *(_OWORD *)(a1 + 68) = xmmword_1AE146E50;
  v9 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 124) = v9;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 160;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_QWORD *)(a1 + 176) = 0;
  if (!*(_BYTE *)(a3 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"info_->reorder", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void sub_1ADB4D334(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 96) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(a2 + 20);
    v3 = (void *)a2[17];
    if (v3)
    {
      a2[18] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t kaldi::quasar::BetterTracebackPhone::ToString(kaldi::quasar::BetterTracebackPhone *this, const fst::SymbolTable *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  void **v10;
  uint64_t v11;
  void **p_p;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Phone(start_frame=", 18);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", end_frame=", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", phone_id=", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", trailing_blanks=", 18);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", phone=", 8);
  if (a2)
  {
    (*(void (**)(void **__return_ptr, const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 88))(&__p, a2, *((int *)this + 2));
    v9 = HIBYTE(v19);
    v10 = (void **)__p;
    v11 = v18;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    __p = 0;
    v18 = 0;
    v19 = 0;
  }
  if ((v9 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v10;
  if ((v9 & 0x80u) == 0)
    v13 = v9;
  else
    v13 = v11;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADB4D5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  __int128 *v7;
  char **v8;
  __int128 *v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *__p[2];
  unsigned __int8 v28;
  _QWORD v29[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29, 3);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"BetterTraceback ADD current_phone_: ", 36);
    kaldi::quasar::BetterTracebackPhone::ToString((uint64_t *)__p, (kaldi::quasar::BetterTracebackPhone *)(a1 + 68), *(const fst::SymbolTable **)(a1 + 32));
    if ((v28 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v28 & 0x80u) == 0)
      v4 = v28;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
    if ((char)v28 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29);
  }
  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
    {
      if (kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(a1 + 24), *(_DWORD *)(a1 + 76)))
      {
        *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 68);
        goto LABEL_17;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 80) + 1;
    }
    *(_BYTE *)(a1 + 60) = 1;
  }
LABEL_17:
  v5 = kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(a1 + 8), *(_DWORD *)(a1 + 76));
  v6 = *(_QWORD *)(a1 + 104);
  v7 = (__int128 *)(a1 + 68);
  v8 = (char **)(a1 + 88);
  v9 = *(__int128 **)(a1 + 96);
  if ((unint64_t)v9 >= v6)
  {
    v12 = ((char *)v9 - *v8) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v6 - (_QWORD)*v8;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 104, v15);
    else
      v16 = 0;
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    v10 = *v7;
    *(_OWORD *)v17 = *v7;
    v11 = v17 + 16;
    v20 = *(char **)(a1 + 88);
    v19 = *(char **)(a1 + 96);
    if (v19 != v20)
    {
      do
      {
        v10 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v17 - 1) = v10;
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = *v8;
    }
    *(_QWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v10 = *v7;
    *v9 = *v7;
    v11 = v9 + 1;
  }
  *(_QWORD *)(a1 + 96) = v11;
  v21 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 72) = v21;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if ((v5 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 112);
    v22 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord&>(a1 + 160, 0, 0, a1 + 88);
    *((_QWORD *)v22 + 1) = a1 + 160;
    v23 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)v22 = v23;
    *(_QWORD *)(v23 + 8) = v22;
    *(_QWORD *)(a1 + 160) = v22;
    ++*(_QWORD *)(a1 + 176);
    v24 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
    v25 = *(void **)(a1 + 88);
    if (v25)
    {
      *(_QWORD *)(a1 + 96) = v25;
      operator delete(v25);
      *v8 = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
    }
    *v8 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)&v10 = -1;
    *(_QWORD *)(a1 + 112) = -1;
    *(_DWORD *)(a1 + 120) = -1;
    *(_DWORD *)(a1 + 124) = v24;
  }
  return *(double *)&v10;
}

void sub_1ADB4D880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

char *std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;

  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 2) = 0;
  std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((_QWORD *)v7 + 2, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 24);
  return v7;
}

void sub_1ADB4D910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADB4D980(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<kaldi::quasar::BetterTracebackWord>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (a2 != a3)
  {
    v5 = *a3;
    v6 = *a2;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)a2[1];
      --*(_QWORD *)(a1 + 16);
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(a1, a2);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t std::remove_if[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> const&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (*(_DWORD *)(v5 + 52) != *(_DWORD *)(*(_QWORD *)(a3 + 8) + 24))
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == a2)
      return a2;
  }
  if (v5 == a2)
    return a2;
  for (i = *(_QWORD *)(v5 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 52) != *(_DWORD *)(*(_QWORD *)(a3 + 8) + 24))
    {
      std::vector<int>::__move_assign(v5 + 16, (__n128 *)(i + 16));
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(i + 40);
      v5 = *(_QWORD *)(v5 + 8);
    }
  }
  return v5;
}

__n128 *std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>>(__n128 *result, __n128 *a2)
{
  __n128 *v2;
  __n128 *i;

  v2 = a2;
  for (i = result; result != a2; i = result)
  {
    v2 = (__n128 *)a2->n128_u64[0];
    if (result == v2)
      break;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &>((uint64_t)&i, &v2);
    a2 = v2;
    result = (__n128 *)i->n128_u64[1];
  }
  return result;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &>(uint64_t a1, __n128 **a2)
{
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  void *v7;
  __n128 result;
  __n128 v9;
  __n128 v10;

  v2 = *a2;
  v3 = *a2 + 1;
  v4 = *(_QWORD *)a1 + 16;
  v5 = *(__n128 *)v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  v9 = v5;
  v10 = *(__n128 *)(v4 + 24);
  std::vector<int>::__move_assign(v4, v3);
  *(__n128 *)(v4 + 24) = *(__n128 *)((char *)v2 + 40);
  v7 = (void *)v2[1].n128_u64[0];
  if (v7)
  {
    v2[1].n128_u64[1] = (unint64_t)v7;
    operator delete(v7);
  }
  v2[1] = v9;
  v2[2].n128_u64[0] = v6;
  result = v10;
  *(__n128 *)((char *)v2 + 40) = v10;
  return result;
}

_DWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *> const&)#2}>(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  _OWORD *i;

  if (result == a2)
    return a2;
  while (*result < *(_DWORD *)(a3 + 52))
  {
    result += 4;
    if (result == a2)
      return a2;
  }
  if (result == a2)
    return a2;
  for (i = result + 4; i != (_OWORD *)a2; ++i)
  {
    if (*(_DWORD *)i < *(_DWORD *)(a3 + 52))
    {
      *(_OWORD *)result = *i;
      result += 4;
    }
  }
  return result;
}

char *std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;

  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 2) = 0;
  std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((_QWORD *)v7 + 2, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 24);
  return v7;
}

void sub_1ADB4DC4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<kaldi::quasar::BetterTracebackWord>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      if (v6 != v4)
        std::vector<kaldi::quasar::BetterTracebackPhone>::__assign_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((char *)(v6 + 16), *(char **)(v4 + 16), *(_QWORD *)(v4 + 24), (uint64_t)(*(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16)) >> 4);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v4 + 40);
      v4 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return (uint64_t *)std::list<kaldi::quasar::BetterTracebackWord>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(a1, (char **)a1, v4, a3);
  else
    return std::list<kaldi::quasar::BetterTracebackWord>::erase(a1, (uint64_t *)v6, (uint64_t *)a1);
}

char *std::list<kaldi::quasar::BetterTracebackWord>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if (a3 != a4)
  {
    v8 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(a1, 0, 0, a3 + 16);
    v9 = v8;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(a1, v12, 0, v10 + 16);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *((_QWORD *)v13 + 1) = v9;
    *(_QWORD *)v9 = v13;
    *a2 = v8;
    *((_QWORD *)v8 + 1) = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return (char *)a2;
}

void sub_1ADB4DDD4(void *a1)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;

  __cxa_begin_catch(a1);
  do
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(v1, v3);
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1ADB4DDF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::BetterTracebackPhone>::__assign_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<kaldi::quasar::BetterTracebackWord>::__init_with_size[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::BetterTracebackWord>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::BetterTracebackWord*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB4DF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::BetterTracebackWord>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::BetterTracebackWord*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((_QWORD *)v4, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 4);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(v6 + 40);
      v6 = *(_QWORD *)(v6 + 8);
      v4 = v11 + 40;
      v11 += 40;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB4E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 40);
      v3 -= 40;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 32) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::LatticeGenerationContext>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::LatticeGenerationContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 40);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 24);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 8);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,quasar::DecoderPassData&,void>@<X0>(const quasar::DecoderPassData *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x370uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderPassData&,std::allocator<quasar::DecoderPassData>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADB4E1F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderPassData&,std::allocator<quasar::DecoderPassData>,0>(_QWORD *a1, const quasar::DecoderPassData *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42C60;
  a1[1] = 0;
  quasar::DecoderPassData::DecoderPassData((quasar::DecoderPassData *)(a1 + 3), a2);
  return a1;
}

void sub_1ADB4E240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::__on_zero_shared(uint64_t a1)
{
  quasar::DecoderPassData::~DecoderPassData((void **)(a1 + 24));
}

quasar::DecoderPassData *quasar::DecoderPassData::DecoderPassData(quasar::DecoderPassData *this, const quasar::DecoderPassData *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  v13 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 7) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  v16 = *((_QWORD *)a2 + 9);
  *((_QWORD *)this + 9) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  v19 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 11) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)this + 104, (uint64_t)a2 + 104);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  v22 = *((_QWORD *)a2 + 22);
  *((_QWORD *)this + 22) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  v25 = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 24) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *((_QWORD *)a2 + 25);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_QWORD *)this + 25) = v28;
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  v29 = *((_QWORD *)a2 + 28);
  *((_QWORD *)this + 28) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_OWORD *)((char *)a2 + 232);
  *((_QWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 232) = v32;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((char *)this + 248, *((_QWORD **)a2 + 31), *((_QWORD **)a2 + 32), (uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 4);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((char *)this + 272, *((_QWORD **)a2 + 34), *((_QWORD **)a2 + 35), (uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 4);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 37, *((const void **)a2 + 37), *((_QWORD *)a2 + 38), (uint64_t)(*((_QWORD *)a2 + 38) - *((_QWORD *)a2 + 37)) >> 2);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((_QWORD *)this + 40, *((_QWORD *)a2 + 40), *((_QWORD *)a2 + 41), (uint64_t)(*((_QWORD *)a2 + 41) - *((_QWORD *)a2 + 40)) >> 5);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 43, *((const void **)a2 + 43), *((_QWORD *)a2 + 44), (uint64_t)(*((_QWORD *)a2 + 44) - *((_QWORD *)a2 + 43)) >> 2);
  std::map<int,float>::map[abi:ne180100]((uint64_t *)this + 46, (uint64_t)a2 + 368);
  *((_QWORD *)this + 49) = *((_QWORD *)a2 + 49);
  v33 = *((_QWORD *)a2 + 50);
  *((_QWORD *)this + 50) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  std::unordered_map<int,std::pair<int,int>>::unordered_map((uint64_t)this + 408, (uint64_t)a2 + 408);
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
  *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
  v36 = *((_QWORD *)a2 + 58);
  *((_QWORD *)this + 58) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((char *)this + 472, *((_QWORD **)a2 + 59), *((_QWORD **)a2 + 60), (uint64_t)(*((_QWORD *)a2 + 60) - *((_QWORD *)a2 + 59)) >> 4);
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((char *)this + 496, *((_QWORD **)a2 + 62), *((_QWORD **)a2 + 63), (uint64_t)(*((_QWORD *)a2 + 63) - *((_QWORD *)a2 + 62)) >> 4);
  *((_QWORD *)this + 65) = *((_QWORD *)a2 + 65);
  v39 = *((_QWORD *)a2 + 66);
  *((_QWORD *)this + 66) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *((_QWORD *)this + 67) = *((_QWORD *)a2 + 67);
  v42 = *((_QWORD *)a2 + 68);
  *((_QWORD *)this + 68) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *((_QWORD *)a2 + 69);
  *(_DWORD *)((char *)this + 559) = *(_DWORD *)((char *)a2 + 559);
  *((_QWORD *)this + 69) = v45;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((_QWORD *)this + 71, *((_QWORD **)a2 + 71), *((_QWORD **)a2 + 72), (uint64_t)(*((_QWORD *)a2 + 72) - *((_QWORD *)a2 + 71)) >> 4);
  *((_QWORD *)this + 74) = *((_QWORD *)a2 + 74);
  v46 = *((_QWORD *)a2 + 75);
  *((_QWORD *)this + 75) = v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  if (*((char *)a2 + 631) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 608), *((const std::string::value_type **)a2 + 76), *((_QWORD *)a2 + 77));
  }
  else
  {
    v49 = *((_OWORD *)a2 + 38);
    *((_QWORD *)this + 78) = *((_QWORD *)a2 + 78);
    *((_OWORD *)this + 38) = v49;
  }
  if (*((char *)a2 + 655) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 632), *((const std::string::value_type **)a2 + 79), *((_QWORD *)a2 + 80));
  }
  else
  {
    v50 = *(_OWORD *)((char *)a2 + 632);
    *((_QWORD *)this + 81) = *((_QWORD *)a2 + 81);
    *(_OWORD *)((char *)this + 632) = v50;
  }
  v51 = *((_QWORD *)a2 + 82);
  *((_WORD *)this + 332) = *((_WORD *)a2 + 332);
  *((_QWORD *)this + 82) = v51;
  *((_QWORD *)this + 84) = *((_QWORD *)a2 + 84);
  v52 = *((_QWORD *)a2 + 85);
  *((_QWORD *)this + 85) = v52;
  if (v52)
  {
    v53 = (unint64_t *)(v52 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  *((_QWORD *)this + 86) = *((_QWORD *)a2 + 86);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 696, (uint64_t)a2 + 696);
  *((_BYTE *)this + 736) = *((_BYTE *)a2 + 736);
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 31, *((__int128 **)a2 + 93), *((__int128 **)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 94) - *((_QWORD *)a2 + 93)) >> 3));
  *((_QWORD *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 32, *((__int128 **)a2 + 96), *((__int128 **)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 97) - *((_QWORD *)a2 + 96)) >> 3));
  *((_QWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 33, *((__int128 **)a2 + 99), *((__int128 **)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 100) - *((_QWORD *)a2 + 99)) >> 3));
  *((_WORD *)this + 408) = *((_WORD *)a2 + 408);
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)this + 103, *((uint64_t **)a2 + 103), *((uint64_t **)a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 104) - *((_QWORD *)a2 + 103)) >> 3));
  v55 = *((_DWORD *)a2 + 212);
  *((_BYTE *)this + 852) = *((_BYTE *)a2 + 852);
  *((_DWORD *)this + 212) = v55;
  return this;
}

void sub_1ADB4E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::SilencePhoneSet *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v29;
  void *v30;

  if (*(char *)(v24 + 631) < 0)
    operator delete(*v26);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 592);
  *(_QWORD *)(v27 - 96) = a9;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 536);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 520);
  *(_QWORD *)(v27 - 96) = a10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  *(_QWORD *)(v27 - 96) = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 456);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 392);
  std::__tree<int>::destroy(a13, *(_QWORD **)(v24 + 376));
  v29 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v24 + 352) = v29;
    operator delete(v29);
  }
  *(_QWORD *)(v27 - 96) = a15;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  v30 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v24 + 304) = v30;
    operator delete(v30);
  }
  *(_QWORD *)(v27 - 96) = a17;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  *(_QWORD *)(v27 - 96) = v25;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a20);
  kaldi::SilencePhoneSet::~SilencePhoneSet(a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v27 - 112));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v27 - 104));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1ADB4E9FC()
{
  JUMPOUT(0x1ADB4E8B8);
}

void sub_1ADB4EA04()
{
  JUMPOUT(0x1ADB4E8F8);
}

void sub_1ADB4EA0C()
{
  JUMPOUT(0x1ADB4E91CLL);
}

void sub_1ADB4EA14()
{
  JUMPOUT(0x1ADB4E92CLL);
}

void sub_1ADB4EA1C()
{
  JUMPOUT(0x1ADB4E93CLL);
}

void sub_1ADB4EA24()
{
  JUMPOUT(0x1ADB4E950);
}

void sub_1ADB4EA2C()
{
  JUMPOUT(0x1ADB4E964);
}

void sub_1ADB4EA34()
{
  JUMPOUT(0x1ADB4E974);
}

void sub_1ADB4EA3C()
{
  JUMPOUT(0x1ADB4E988);
}

void sub_1ADB4EA44()
{
  JUMPOUT(0x1ADB4E998);
}

void sub_1ADB4EA4C()
{
  JUMPOUT(0x1ADB4E9A4);
}

void sub_1ADB4EA54()
{
  JUMPOUT(0x1ADB4E9C4);
}

uint64_t *std::map<int,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADB4EA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,std::pair<int,int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1ADB4EB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *(_QWORD *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADB4ED30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>@<X0>(const quasar::DecoderChainOutput *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x4A8uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderChainOutput&,std::allocator<quasar::DecoderChainOutput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADB4ED88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderChainOutput&,std::allocator<quasar::DecoderChainOutput>,0>(_QWORD *a1, const quasar::DecoderChainOutput *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43248;
  a1[1] = 0;
  quasar::DecoderChainOutput::DecoderChainOutput((quasar::DecoderChainOutput *)(a1 + 3), a2);
  return a1;
}

void sub_1ADB4EDD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

quasar::DecoderChainOutput *quasar::DecoderChainOutput::DecoderChainOutput(quasar::DecoderChainOutput *this, const quasar::DecoderChainOutput *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)this + 3, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)this + 12, *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5));
  std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100]((uint64_t *)this + 15, (const void ***)a2 + 15);
  *((_WORD *)this + 72) = *((_WORD *)a2 + 72);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  v4 = *((_QWORD *)a2 + 20);
  *((_QWORD *)this + 20) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  v7 = *((_QWORD *)a2 + 22);
  *((_QWORD *)this + 22) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    v10 = *((_QWORD *)a2 + 24);
    *((_QWORD *)this + 24) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_BYTE *)this + 200) = 1;
  }
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  v13 = *((_QWORD *)a2 + 27);
  *((_QWORD *)this + 27) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  v16 = *((_QWORD *)a2 + 29);
  *((_QWORD *)this + 29) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  v19 = *((_QWORD *)a2 + 31);
  *((_QWORD *)this + 31) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  v22 = *((_QWORD *)a2 + 33);
  *((_QWORD *)this + 33) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  v25 = *((_QWORD *)a2 + 35);
  *((_QWORD *)this + 35) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  v28 = *((_QWORD *)a2 + 37);
  *((_QWORD *)this + 37) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  v31 = *((_QWORD *)a2 + 39);
  *((_QWORD *)this + 39) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  v34 = *((_QWORD *)a2 + 41);
  *((_QWORD *)this + 41) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  v37 = *((_QWORD *)a2 + 43);
  *((_QWORD *)this + 43) = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  v40 = *((_QWORD *)a2 + 45);
  *((_QWORD *)this + 45) = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)this + 46, *((const void ****)a2 + 46), *((const void ****)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 47) - *((_QWORD *)a2 + 46)) >> 3));
  *((_QWORD *)this + 49) = *((_QWORD *)a2 + 49);
  v43 = *((_QWORD *)a2 + 50);
  *((_QWORD *)this + 50) = v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
  v46 = *((_QWORD *)a2 + 52);
  *((_QWORD *)this + 52) = v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  v49 = *((_QWORD *)a2 + 54);
  *((_QWORD *)this + 54) = v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 440) = *(_OWORD *)((char *)a2 + 440);
  *(_OWORD *)((char *)this + 456) = v52;
  *((_QWORD *)this + 59) = *((_QWORD *)a2 + 59);
  v53 = *((_QWORD *)a2 + 60);
  *((_QWORD *)this + 60) = v53;
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  *((_QWORD *)this + 61) = *((_QWORD *)a2 + 61);
  v56 = *((_QWORD *)a2 + 62);
  *((_QWORD *)this + 62) = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(_OWORD *)((char *)a2 + 504);
  v60 = *(_OWORD *)((char *)a2 + 520);
  *((_QWORD *)this + 67) = *((_QWORD *)a2 + 67);
  *(_OWORD *)((char *)this + 504) = v59;
  *(_OWORD *)((char *)this + 520) = v60;
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 68);
  v61 = *((_QWORD *)a2 + 69);
  *((_QWORD *)this + 69) = v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  *((_QWORD *)this + 70) = *((_QWORD *)a2 + 70);
  v64 = *((_QWORD *)a2 + 71);
  *((_QWORD *)this + 71) = v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = *((_DWORD *)a2 + 144);
  *((_WORD *)this + 290) = *((_WORD *)a2 + 290);
  *((_DWORD *)this + 144) = v67;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 74) = 0;
  std::vector<quasar::LmeInfo>::__init_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>((_QWORD *)this + 73, *((__int128 **)a2 + 73), *((__int128 **)a2 + 74), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 74) - *((_QWORD *)a2 + 73)) >> 3));
  *((_QWORD *)this + 76) = *((_QWORD *)a2 + 76);
  v68 = *((_QWORD *)a2 + 77);
  *((_QWORD *)this + 77) = v68;
  if (v68)
  {
    v69 = (unint64_t *)(v68 + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *((_QWORD *)a2 + 78);
  *((_DWORD *)this + 158) = *((_DWORD *)a2 + 158);
  *((_QWORD *)this + 78) = v71;
  *((_QWORD *)this + 80) = *((_QWORD *)a2 + 80);
  v72 = *((_QWORD *)a2 + 81);
  *((_QWORD *)this + 81) = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  *((_QWORD *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>((std::string *)((char *)this + 656), *((__int128 **)a2 + 82), *((__int128 **)a2 + 83), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 83) - *((_QWORD *)a2 + 82)) >> 3));
  *(_OWORD *)((char *)this + 680) = *(_OWORD *)((char *)a2 + 680);
  quasar::AudioAnalytics::AudioAnalytics((quasar::DecoderChainOutput *)((char *)this + 696), (const quasar::DecoderChainOutput *)((char *)a2 + 696));
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__init_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((_QWORD *)this + 105, *((uint64_t **)a2 + 105), *((uint64_t **)a2 + 106), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 106) - *((_QWORD *)a2 + 105)) >> 3));
  *((_BYTE *)this + 864) = *((_BYTE *)a2 + 864);
  *((_BYTE *)this + 872) = *((_BYTE *)a2 + 872);
  if (*((char *)a2 + 903) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 880), *((const std::string::value_type **)a2 + 110), *((_QWORD *)a2 + 111));
  }
  else
  {
    v75 = *((_OWORD *)a2 + 55);
    *((_QWORD *)this + 112) = *((_QWORD *)a2 + 112);
    *((_OWORD *)this + 55) = v75;
  }
  v76 = *(_OWORD *)((char *)a2 + 904);
  *((_QWORD *)this + 115) = *((_QWORD *)a2 + 115);
  *(_OWORD *)((char *)this + 904) = v76;
  *((_BYTE *)this + 928) = *((_BYTE *)a2 + 928);
  if (*((char *)a2 + 959) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 39, *((const std::string::value_type **)a2 + 117), *((_QWORD *)a2 + 118));
  }
  else
  {
    v77 = *(_OWORD *)((char *)a2 + 936);
    *((_QWORD *)this + 119) = *((_QWORD *)a2 + 119);
    *(_OWORD *)((char *)this + 936) = v77;
  }
  v78 = *((_OWORD *)a2 + 60);
  *((_QWORD *)this + 122) = *((_QWORD *)a2 + 122);
  *((_OWORD *)this + 60) = v78;
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = 0;
  std::vector<std::pair<int,BOOL>>::__init_with_size[abi:ne180100]<std::pair<int,BOOL>*,std::pair<int,BOOL>*>((char *)this + 984, *((uint64_t **)a2 + 123), *((uint64_t **)a2 + 124), (uint64_t)(*((_QWORD *)a2 + 124) - *((_QWORD *)a2 + 123)) >> 3);
  *((_QWORD *)this + 128) = 0;
  *((_OWORD *)this + 63) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 126, *((const void **)a2 + 126), *((_QWORD *)a2 + 127), (uint64_t)(*((_QWORD *)a2 + 127) - *((_QWORD *)a2 + 126)) >> 2);
  if (*((char *)a2 + 1055) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 43, *((const std::string::value_type **)a2 + 129), *((_QWORD *)a2 + 130));
  }
  else
  {
    v79 = *(_OWORD *)((char *)a2 + 1032);
    *((_QWORD *)this + 131) = *((_QWORD *)a2 + 131);
    *(_OWORD *)((char *)this + 1032) = v79;
  }
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 132);
  v80 = *((_QWORD *)a2 + 133);
  *((_QWORD *)this + 133) = v80;
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = *((_OWORD *)a2 + 67);
  v84 = *((_OWORD *)a2 + 68);
  *((_DWORD *)this + 276) = *((_DWORD *)a2 + 276);
  *((_OWORD *)this + 68) = v84;
  *((_OWORD *)this + 67) = v83;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 141) = 0;
  *((_QWORD *)this + 140) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)this + 139, *((_QWORD *)a2 + 139), *((_QWORD *)a2 + 140), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 140) - *((_QWORD *)a2 + 139)) >> 5));
  *((_BYTE *)this + 1136) = *((_BYTE *)a2 + 1136);
  v85 = (std::string *)((char *)this + 1144);
  if (*((char *)a2 + 1167) < 0)
  {
    std::string::__init_copy_ctor_external(v85, *((const std::string::value_type **)a2 + 143), *((_QWORD *)a2 + 144));
  }
  else
  {
    v86 = *(_OWORD *)((char *)a2 + 1144);
    *((_QWORD *)this + 145) = *((_QWORD *)a2 + 145);
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
  }
  return this;
}

void sub_1ADB4F5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::AudioAnalytics *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22)
{
  uint64_t v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;

  *(_QWORD *)(v31 - 88) = v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 1056);
  if (*(char *)(v22 + 1055) < 0)
    operator delete(*v24);
  v33 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v22 + 1016) = v33;
    operator delete(v33);
  }
  v34 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v22 + 992) = v34;
    operator delete(v34);
  }
  if (*(char *)(v22 + 959) < 0)
    operator delete(*v29);
  if (*(char *)(v22 + 903) < 0)
    operator delete(*v28);
  *(_QWORD *)(v31 - 88) = v27;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  quasar::AudioAnalytics::~AudioAnalytics(a10);
  *(_QWORD *)(v31 - 88) = a11;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 640);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 608);
  *(_QWORD *)(v31 - 88) = a13;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 560);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 544);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 488);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 472);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 424);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 408);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 392);
  *(_QWORD *)(v31 - 88) = a14;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 352);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 336);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 320);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 304);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 288);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 272);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 + 256);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a17);
  if (*(_BYTE *)(v22 + 200))
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a19);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a20, *(_QWORD **)(v22 + 128));
  *(_QWORD *)(v31 - 88) = v26;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  v35 = *a21;
  if (*a21)
  {
    *(_QWORD *)(v22 + 80) = v35;
    operator delete(v35);
  }
  *(_QWORD *)(v31 - 88) = a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  *(_QWORD *)(v31 - 88) = *(_QWORD *)(v31 - 96);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  *(_QWORD *)(v31 - 88) = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 88));
  _Unwind_Resume(a1);
}

void sub_1ADB4F814()
{
  JUMPOUT(0x1ADB4F690);
}

void sub_1ADB4F81C()
{
  JUMPOUT(0x1ADB4F698);
}

void sub_1ADB4F824()
{
  JUMPOUT(0x1ADB4F6A8);
}

void sub_1ADB4F82C()
{
  JUMPOUT(0x1ADB4F6CCLL);
}

void sub_1ADB4F834()
{
  JUMPOUT(0x1ADB4F72CLL);
}

void sub_1ADB4F83C()
{
  JUMPOUT(0x1ADB4F7C0);
}

void sub_1ADB4F844()
{
  JUMPOUT(0x1ADB4F7CCLL);
}

void sub_1ADB4F84C()
{
  JUMPOUT(0x1ADB4F7E0);
}

void sub_1ADB4F854()
{
  JUMPOUT(0x1ADB4F7F0);
}

void sub_1ADB4F85C()
{
  JUMPOUT(0x1ADB4F800);
}

uint64_t *std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADB4F8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *std::vector<quasar::LmeInfo>::__init_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB4F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 1;
    do
    {
      v8 = v6 - 1;
      v7 = *((_QWORD *)v6 - 2);
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 - 2);
      *(_QWORD *)v4 = v7;
      v9 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v15;
      }
      else
      {
        v10 = *v6;
        *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 40;
      v15 = v4;
      v6 = (__int128 *)((char *)v6 + 40);
    }
    while ((__int128 *)((char *)v8 + 40) != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1ADB4FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 40;
  }
}

_QWORD *std::vector<std::vector<kaldi::quasar::WordConf>>::__init_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB4FB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v4, *v6, v6[1], 0xF83E0F83E0F83E1 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB4FC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB4FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF83E0F83E0F83FLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(264 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::quasar::WordConf::WordConf((std::string *)(a4 + v7), (const kaldi::quasar::WordConf *)(a2 + v7));
      v7 += 264;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADB4FDD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 264;
    do
    {
      kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v4 + v2));
      v2 -= 264;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *kaldi::quasar::WordConf::WordConf(std::string *this, const kaldi::quasar::WordConf *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::string::size_type v11;
  __int128 v12;
  int v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  v10 = *((_OWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 20);
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__r.__words[2] = v11;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[7].__r_.__value_.__r.__words[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[7].__r_.__value_.__r.__words, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  v12 = *((_OWORD *)a2 + 12);
  v13 = *((_DWORD *)a2 + 52);
  this[9].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = v13;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v12;
  this[9].__r_.__value_.__l.__size_ = 0;
  this[9].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[9].__r_.__value_.__r.__words, *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2);
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  this[10].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 10, *((__int128 **)a2 + 30), *((__int128 **)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 3));
  return this;
}

void sub_1ADB4FFD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

char *std::vector<std::pair<int,BOOL>>::__init_with_size[abi:ne180100]<std::pair<int,BOOL>*,std::pair<int,BOOL>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADB5016C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(uint64_t a1, int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  _QWORD v10[34];

  v3 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 < 2 || (a3.i32[0] = a2, v5 = (uint8x8_t)vcnt_s8(a3), v5.i16[0] = vaddlv_u8(v5), v5.i32[0] >= 2u))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"SplitRadixComplexFft called with invalid number of points ", 58);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v6 = 0;
  *(_DWORD *)(a1 + 24) = a2;
  do
  {
    ++v6;
    v7 = v3 >= 3;
    v8 = v3 == 3;
    v3 >>= 1;
  }
  while (!v8 && v7);
  *(_DWORD *)(a1 + 28) = v6;
  kaldi::SplitRadixComplexFft<float>::ComputeTables(a1);
  return a1;
}

void sub_1ADB5024C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SplitRadixComplexFft<float>::ComputeTables(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int *v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  double v26;
  int v27;
  int v28;
  int v29;
  double v30;
  int v31;
  float v32;
  __float2 v33;
  float v34;
  __float2 v35;
  BOOL v36;
  uint64_t v37;

  v1 = a1;
  v2 = (*(_DWORD *)(a1 + 28) & 1) + (*(int *)(a1 + 28) >> 1);
  v3 = (int *)operator new[]();
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)v3 = 0x100000000;
  if (v2 >= 2)
  {
    v4 = 2;
    do
    {
      v5 = v4 - 1;
      if (v4 != 32)
      {
        LODWORD(v6) = 1 << v5;
        v7 = 1 << v5;
        if ((int)v6 <= 1)
          v6 = 1;
        else
          v6 = v6;
        v8 = v3;
        do
        {
          v9 = *v8;
          *v8 *= 2;
          v8[v7] = (2 * v9) | 1;
          ++v8;
          --v6;
        }
        while (v6);
      }
    }
    while (v4++ != v2);
  }
  if (*(int *)(v1 + 28) > 3)
  {
    *(_QWORD *)(v1 + 40) = operator new[]();
    v11 = *(unsigned int *)(v1 + 28);
    if ((int)v11 >= 4)
    {
      v37 = v1;
      do
      {
        v12 = 1 << v11;
        v13 = (1 << v11) + 3;
        if (1 << v11 >= 0)
          v13 = 1 << v11;
        v14 = v13 >> 2;
        if (v12 >= 0)
          v15 = 1 << v11;
        else
          v15 = v12 + 7;
        v16 = v14 - 2;
        v17 = operator new[]();
        v18 = (v11 - 4);
        *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v18) = v17;
        if (v12 >= 8)
        {
          v19 = v15 >> 3;
          v20 = *(float **)(*(_QWORD *)(v37 + 40) + 8 * v18);
          v21 = &v20[v16];
          v22 = &v21[v16];
          v23 = &v22[v16];
          v24 = &v23[v16];
          v25 = &v24[v16];
          v26 = (double)v12;
          if (v14 <= 2)
            v27 = 2;
          else
            v27 = v14;
          v28 = 3 * v27;
          v29 = v19 - 1;
          v30 = 1.0;
          v31 = 3;
          do
          {
            if (v29)
            {
              v32 = v30 * 6.28318531 / v26;
              v33 = __sincosf_stret(v32);
              *v20++ = v33.__cosval;
              *v21++ = -(float)(v33.__sinval + v33.__cosval);
              *v22++ = v33.__sinval - v33.__cosval;
              v34 = (double)v31 * 6.28318531 / v26;
              v35 = __sincosf_stret(v34);
              *v23++ = v35.__cosval;
              *v24++ = -(float)(v35.__sinval + v35.__cosval);
              *v25++ = v35.__sinval - v35.__cosval;
            }
            v30 = v30 + 1.0;
            v31 += 3;
            --v29;
          }
          while (v28 != v31);
        }
        v36 = v11-- <= 4;
        v1 = v37;
      }
      while (!v36);
    }
  }
  else
  {
    *(_QWORD *)(v1 + 40) = 0;
  }
}

uint64_t kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, float *a2, float *a3, int a4)
{
  float *v5;
  float *v6;
  uint64_t result;
  int v8;

  if (a4)
    v5 = a3;
  else
    v5 = a2;
  if (a4)
    v6 = a2;
  else
    v6 = a3;
  result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(a1, v6, v5, *(_DWORD *)(a1 + 28));
  v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 2)
  {
    kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v6, v8);
    return kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v5, *(_DWORD *)(a1 + 28));
  }
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::ComputeRecursive(uint64_t result, float *a2, float *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  BOOL v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  _QWORD v84[35];

  if ((a4 & 0x80000000) != 0)
  {
LABEL_30:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v84, "Error: logn is out of bounds in SRFFT");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84);
  }
  v6 = result;
  v7 = a4;
  while ((unint64_t)v7 > 2)
  {
    v8 = 1 << v7;
    if (1 << v7 >= 0)
      v9 = 1 << v7;
    else
      v9 = v8 + 1;
    v10 = v9 >> 1;
    v11 = v8 / 4;
    v12 = (uint64_t)v9 >> 1;
    if (v8 >= 0)
      v13 = 1 << v7;
    else
      v13 = v8 + 7;
    v14 = &a2[v10];
    v15 = &a3[v10];
    if (v8 >= 2)
    {
      v16 = a3;
      v17 = a2;
      do
      {
        v18 = v17[v12];
        v19 = *v17 + v18;
        v17[v12] = *v17 - v18;
        *v17++ = v19;
        v20 = *v16;
        v21 = v16[v12];
        v16[v12] = *v16 - v21;
        *v16++ = v20 + v21;
        --v10;
      }
      while (v10);
      if (v8 >= 4)
      {
        v22 = v8 / 4;
        v23 = v15;
        v24 = v14;
        do
        {
          v25 = *v24 + v23[v11];
          v26 = v24[v11];
          v27 = *v23 + v26;
          *v23 = *v23 - v26;
          v24[v11] = *v24 - v23[v11];
          *v24++ = v25;
          v23[v11] = v27;
          ++v23;
          --v22;
        }
        while (v22);
      }
    }
    if (v7 < 4)
    {
      v28 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v28 = *(float **)(*(_QWORD *)(v6 + 40) + 8 * (v7 - 4));
      v29 = 4 * v11 - 8;
      v30 = (float *)((char *)v28 + v29);
      v31 = (float *)((char *)v28 + v29 + v29);
      v32 = (float *)((char *)v31 + v29);
      v33 = (float *)((char *)v31 + v29 + v29);
      v34 = (float *)((char *)v33 + v29);
    }
    if (v8 >= 8)
    {
      v35 = 0;
      v36 = v13 >> 3;
      if (v11 <= 2)
        v37 = 2;
      else
        v37 = v11;
      v38 = (uint64_t)&a2[v12 + 1];
      v39 = (uint64_t)&v14[v11 + 1];
      v40 = (uint64_t)&a3[v12 + 1];
      v41 = (uint64_t)&v15[v11 + 1];
      v42 = v37 - 1;
      v43 = v36 - 1;
      do
      {
        if (v43 == (_DWORD)v35)
        {
          v44 = *(float *)(v38 + 4 * v35);
          v45 = *(float *)(v40 + 4 * v35);
          *(float *)(v40 + 4 * v35) = (float)(v45 - v44) * 0.70711;
          *(float *)(v38 + 4 * v35) = (float)(v44 + v45) * 0.70711;
          v46 = *(float *)(v41 + 4 * v35);
          v47 = *(float *)(v39 + 4 * v35);
          *(float *)(v41 + 4 * v35) = (float)(v46 + v47) * -0.70711;
          *(float *)(v39 + 4 * v35) = (float)(v46 - v47) * 0.70711;
        }
        else
        {
          v48 = *v28++;
          v49 = *(float *)(v38 + 4 * v35);
          v50 = *(float *)(v40 + 4 * v35);
          v51 = v48 * (float)(v49 + v50);
          v52 = *v30++;
          v53 = v52;
          v54 = *v31++;
          *(float *)(v38 + 4 * v35) = v51 + (float)(v54 * v50);
          *(float *)(v40 + 4 * v35) = v51 + (float)(v53 * v49);
          v55 = *v32++;
          v56 = *(float *)(v39 + 4 * v35);
          v57 = *(float *)(v41 + 4 * v35);
          v58 = v55 * (float)(v56 + v57);
          v59 = *v33++;
          v60 = v59;
          v61 = *v34++;
          *(float *)(v39 + 4 * v35) = v58 + (float)(v61 * v57);
          *(float *)(v41 + 4 * v35) = v58 + (float)(v60 * v56);
        }
        ++v35;
      }
      while (v42 != (_DWORD)v35);
    }
    kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, a2, a3, (v7 - 1));
    result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, v14, v15, v7 - 2);
    a2 += 3 * v11;
    a3 += 3 * v11;
    v62 = v7 < 2;
    v7 -= 2;
    if (v62)
      goto LABEL_30;
  }
  if ((_DWORD)v7 == 1)
  {
    v80 = a2[1];
    v81 = *a2 - v80;
    *a2 = *a2 + v80;
    a2[1] = v81;
    v82 = a3[1];
    v83 = *a3 - v82;
    *a3 = *a3 + v82;
    a3[1] = v83;
  }
  else if ((_DWORD)v7 == 2)
  {
    v63 = a2[2];
    v64 = *a2 + v63;
    a2[2] = *a2 - v63;
    *a2 = v64;
    v65 = a3[2];
    v66 = *a3 + v65;
    a3[2] = *a3 - v65;
    *a3 = v66;
    v67 = a2[1];
    v68 = a2[3];
    a2[3] = v67 - v68;
    a2[1] = v67 + v68;
    v69 = a3[1];
    v70 = a3[3];
    a3[3] = v69 - v70;
    a3[1] = v69 + v70;
    v71 = a2[1];
    v72 = *a2 - v71;
    *a2 = *a2 + v71;
    a2[1] = v72;
    v73 = a3[1];
    v74 = *a3 - v73;
    *a3 = *a3 + v73;
    a3[1] = v74;
    v76 = a3[2];
    v75 = a3[3];
    v77 = a2[3];
    v78 = a2[2] + v75;
    a3[2] = v76 - v77;
    v79 = a2[2] - v75;
    a2[2] = v78;
    a2[3] = v79;
    a3[3] = v76 + v77;
  }
  return result;
}

void sub_1ADB50914(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::SplitRadixComplexFft<float>::BitReversePermute(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int v14;

  v3 = a3 >> 1;
  v4 = (1 << (a3 >> 1));
  if ((int)v4 >= 2)
  {
    v5 = *(_QWORD *)(result + 32);
    v6 = a2 + 4 * v4 + 4;
    for (i = 1; i != v4; ++i)
    {
      v8 = *(_DWORD *)(v5 + 4 * i);
      v9 = v8 << v3;
      v10 = *(_DWORD *)(a2 + 4 * i);
      *(_DWORD *)(a2 + 4 * i) = *(_DWORD *)(a2 + 4 * (v8 << v3));
      *(_DWORD *)(a2 + 4 * (v8 << v3)) = v10;
      if (v8 >= 2)
      {
        v11 = v8 - 1;
        v12 = (int *)(v5 + 4);
        result = v6;
        do
        {
          v13 = *v12++;
          v14 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)(a2 + 4 * (v13 + v9));
          *(_DWORD *)(a2 + 4 * (v13 + v9)) = v14;
          result += 4 * (1 << (a3 >> 1));
          --v11;
        }
        while (v11);
      }
      v6 += 4;
    }
  }
  return result;
}

float kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, _DWORD *a2, int a3, float **a4)
{
  float *v7;
  int v8;
  int *v10;
  _DWORD *v11;
  float *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  float result;

  v7 = *a4;
  v8 = *(_DWORD *)(a1 + 24);
  if (v8 != a4[1] - *a4)
  {
    std::vector<float>::resize((uint64_t)a4, v8);
    v7 = *a4;
    v8 = *(_DWORD *)(a1 + 24);
  }
  if (v8 >= 1)
  {
    v10 = a2 + 1;
    v11 = a2;
    v12 = v7;
    v13 = v8;
    do
    {
      *v11++ = *(v10 - 1);
      v14 = *v10;
      v10 += 2;
      *(_DWORD *)v12++ = v14;
      --v13;
    }
    while (v13);
  }
  memcpy(&a2[v8], v7, 4 * v8);
  kaldi::SplitRadixComplexFft<float>::Compute(a1, (float *)a2, (float *)&a2[*(int *)(a1 + 24)], a3);
  memcpy(v7, &a2[*(int *)(a1 + 24)], 4 * *(int *)(a1 + 24));
  v15 = *(unsigned int *)(a1 + 24);
  if ((int)v15 > 1)
  {
    v16 = v15 + 1;
    v17 = 2 * v15 - 1;
    do
    {
      a2[v17 - 1] = a2[(v16 - 2)];
      a2[v17] = LODWORD(v7[(v16-- - 2)]);
      v17 -= 2;
    }
    while (v16 > 2);
  }
  result = *v7;
  a2[1] = *(_DWORD *)v7;
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8052888210);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_DWORD *)(a1 + 28);
    if (v3 < 4)
      goto LABEL_10;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4);
      if (v5)
      {
        MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
        v3 = *(_DWORD *)(a1 + 28);
      }
      ++v4;
    }
    while (v4 < v3 - 3);
    if (*(_QWORD *)(a1 + 40))
LABEL_10:
      MEMORY[0x1AF44D160]();
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

float kaldi::SplitRadixRealFft<float>::Compute(float **a1, float *a2, int a3)
{
  return kaldi::SplitRadixRealFft<float>::Compute((uint64_t)a1, a2, a3, a1);
}

float kaldi::SplitRadixRealFft<float>::Compute(uint64_t a1, float *a2, int a3, float **a4)
{
  char v5;
  float *v6;
  uint64_t v8;
  int v9;
  float v10;
  __float2 v11;
  float v12;
  int v13;
  int v14;
  int v15;
  float *v16;
  float *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float result;

  v5 = a3;
  v6 = a2;
  v8 = *(unsigned int *)(a1 + 48);
  if (a3)
  {
    kaldi::SplitRadixComplexFft<float>::Compute(a1, a2, 1, a4);
    v9 = -1;
  }
  else
  {
    v9 = 1;
  }
  v10 = 6.28318531 / (double)(int)v8 * (double)v9;
  v11 = __sincosf_stret(v10);
  if ((int)v8 >= 4)
  {
    v12 = (float)-v9;
    v13 = ((int)v8 >> 1) - 1;
    v14 = 2 * ((int)v8 >> 1) - 1;
    v15 = v8 - 1;
    v16 = &v6[v8 - 2];
    v17 = v6 + 3;
    v18 = 0.0;
    v19 = 2;
    v20 = 1;
    do
    {
      v21 = -(float)(v18 * v11.__sinval);
      v18 = (float)(v11.__cosval * v18) + (float)(v12 * v11.__sinval);
      v12 = v21 + (float)(v12 * v11.__cosval);
      v22 = *(v17 - 1);
      v23 = (float)(v22 + *v16) * 0.5;
      v24 = v6[v15];
      v25 = (float)(*v17 - v24) * 0.5;
      v26 = (float)(*v17 + v24) * 0.5;
      v27 = (float)(v22 - *v16) * -0.5;
      v28 = (float)(v18 * v26) + (float)(v12 * v27);
      *(v17 - 1) = v23 + (float)((float)(v12 * v26) - (float)(v18 * v27));
      *v17 = v25 + v28;
      if (v20 != v13)
      {
        v6[v14 - 1] = v23 + (float)((float)(v18 * v27) - (float)(v12 * v26));
        v6[v14] = v28 - v25;
      }
      ++v20;
      v19 += 2;
      --v13;
      v14 -= 2;
      v15 -= 2;
      v16 -= 2;
      v17 += 2;
    }
    while (v19 <= (int)v8 >> 1);
  }
  v29 = v6[1];
  v30 = *v6 + v29;
  result = *v6 - v29;
  *v6 = v30;
  v6[1] = result;
  if ((v5 & 1) == 0)
  {
    *v6 = v30 * 0.5;
    v6[1] = result * 0.5;
    result = kaldi::SplitRadixComplexFft<float>::Compute(a1, v6, 0, a4);
    if ((int)v8 >= 1)
    {
      do
      {
        result = *v6 + *v6;
        *v6++ = result;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

_QWORD *quasar::StateAccessRecordingFst::StateAccessRecordingFst(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  const void *v4;
  void *v5;
  unint64_t v6;
  _OWORD v8[17];

  *a1 = &off_1E5D394D0;
  v3 = a1 + 1;
  std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::allocator<quasar::StateAccessRecordingFst::Data>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(a2, a1 + 1);
  v4 = *(const void **)a1[1];
  if (!v4
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"State access recording requires ExpandedFST", 43);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  v6 = (*(int (**)(void *))(*(_QWORD *)v5 + 160))(v5);
  std::vector<BOOL>::resize(*v3 + 16, v6, 0);
  std::vector<int>::resize((std::vector<unsigned int> *)(*v3 + 40), v6);
  return a1;
}

void sub_1ADB50E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::StateAccessRecordingFst::~StateAccessRecordingFst(quasar::StateAccessRecordingFst *this)
{
  *(_QWORD *)this = &off_1E5D394D0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E5D394D0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::StateAccessRecordingFst::HasSequentialStates(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 16))(**((_QWORD **)this + 1));
}

uint64_t quasar::StateAccessRecordingFst::Start(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 24))(**((_QWORD **)this + 1));
}

uint64_t quasar::StateAccessRecordingFst::Final(quasar::StateAccessRecordingFst *this, int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
}

uint64_t quasar::StateAccessRecordingFst::NumArcs(quasar::StateAccessRecordingFst *this, int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
}

uint64_t quasar::StateAccessRecordingFst::NumInputEpsilons(quasar::StateAccessRecordingFst *this, int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
}

uint64_t quasar::StateAccessRecordingFst::NumOutputEpsilons(quasar::StateAccessRecordingFst *this, int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 56))(*v2);
}

uint64_t quasar::StateAccessRecordingFst::Properties(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 64))(**((_QWORD **)this + 1));
}

uint64_t quasar::StateAccessRecordingFst::Type(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 72))(**((_QWORD **)this + 1));
}

_QWORD *quasar::StateAccessRecordingFst::Copy(quasar::StateAccessRecordingFst *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *((_QWORD *)this + 1);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *v2 = &off_1E5D394D0;
    v2[1] = v4;
    v2[2] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *v2 = &off_1E5D394D0;
    v2[1] = v4;
    v2[2] = 0;
  }
  return v3;
}

uint64_t quasar::StateAccessRecordingFst::Write(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 96))(**(_QWORD **)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 104))(**(_QWORD **)(a1 + 8));
}

uint64_t quasar::StateAccessRecordingFst::InputSymbols(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 112))(**((_QWORD **)this + 1));
}

uint64_t quasar::StateAccessRecordingFst::OutputSymbols(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 120))(**((_QWORD **)this + 1));
}

uint64_t quasar::StateAccessRecordingFst::InitStateIterator(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 128))(**(_QWORD **)(a1 + 8));
}

uint64_t quasar::StateAccessRecordingFst::InitArcIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + (((unint64_t)(int)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v6 = operator new();
  *(_QWORD *)v6 = &unk_1E5D3B280;
  *(_QWORD *)(v6 + 40) = a1;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 136))(**(_QWORD **)(a1 + 8), a2, v6 + 8);
  if (*(_QWORD *)(v6 + 8))
  {
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v8 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 8);
    *(_OWORD *)(a3 + 16) = v8;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_1ADB51200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4017EAAA55);
  _Unwind_Resume(a1);
}

uint64_t quasar::StateAccessRecordingFst::InitMatcher(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 144))(**(_QWORD **)(a1 + 8));
}

uint64_t quasar::StateAccessRecordingFst::GetArcs(uint64_t a1, int a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 80))(*v2);
}

void quasar::StateAccessRecordingFst::ResetAccessedStates(quasar::StateAccessRecordingFst *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = v1[3];
  if ((int)v1[3] >= 1)
  {
    v3 = 0;
    v4 = v1[2];
    do
    {
      if (((*(_QWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
        ++*(_DWORD *)(v1[5] + 4 * v3);
      ++v3;
    }
    while (v2 != v3);
  }
  v1[3] = 0;
  std::vector<BOOL>::resize((uint64_t)(v1 + 2), (int)v2, 0);
}

void quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(quasar::StateAccessRecordingFst *this)
{
  uint64_t v2;
  unint64_t v3;
  std::vector<int> *v4;
  std::vector<int>::value_type __u;
  char v6;

  v2 = *((_QWORD *)this + 1);
  v3 = *(int *)(v2 + 24);
  v6 = 0;
  std::vector<BOOL>::assign(v2 + 16, v3, &v6);
  v4 = (std::vector<int> *)(*((_QWORD *)this + 1) + 40);
  __u = 0;
  std::vector<int>::assign(v4, v3, &__u);
}

void std::vector<BOOL>::assign(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(_QWORD *)(a1 + 8) = a2;
    }
    else
    {
      v14 = 0;
      v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v7 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v14, v9);
      v11 = v14;
      v12 = *((_QWORD *)&v15 + 1);
      v14 = *(char **)a1;
      v10 = v14;
      v13 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = v12;
      v15 = v13;
      if (v10)
        operator delete(v10);
    }
    if (*a3)
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v14, a2);
    }
    else
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v14, a2);
    }
  }
}

void sub_1ADB51420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(result[1] + 48) - *(_QWORD *)(result[1] + 40);
  if ((int)(v1 >> 2) >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = (v1 >> 2);
    do
    {
      if (*(int *)(*(_QWORD *)(v2[1] + 40) + 4 * v3) >= 1)
      {
        v5 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
      }
      ++v3;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t quasar::StateAccessRecordingFst::getWrappedFst@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 8);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void quasar::StateAccessRecordingFstArcIterator::~StateAccessRecordingFstArcIterator(quasar::StateAccessRecordingFstArcIterator *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E5D3B280;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E5D3B280;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Reinit(quasar::StateAccessRecordingFstArcIterator *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 16);
  *(_QWORD *)(v2 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Done_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Value_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Next_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Position_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Reset_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Seek_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Flags_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
}

uint64_t quasar::StateAccessRecordingFstArcIterator::SetFlags_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::allocator<quasar::StateAccessRecordingFst::Data>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst::Data>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADB516AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst::Data>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D440F0;
  a1[1] = 0;
  std::allocator<quasar::StateAccessRecordingFst::Data>::construct[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADB5170C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D440F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D440F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::StateAccessRecordingFst::Data>::destroy[abi:ne180100]((uint64_t)&v2, (_QWORD *)(a1 + 24));
}

double std::allocator<quasar::StateAccessRecordingFst::Data>::construct[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  double result;
  unint64_t v9;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a2 = v3;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

uint64_t std::allocator<quasar::StateAccessRecordingFst::Data>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[2];
  if (v4)
    operator delete(v4);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a2);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable(uint64_t a1, uint64_t a2, kaldi::quasar::CEAcousticEncoderNet *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, int a10)
{
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  void **i;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  _QWORD *v28;
  kaldi::quasar::CELabelEncoderNet *v29;
  void **j;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t v40;
  _QWORD *v41;
  int EmbeddingDim;
  int v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void **v61;
  _BYTE v62[24];
  _QWORD *v63;
  _QWORD *v64;
  int64x2_t v65;
  _QWORD *v66;
  void **v67;
  void **v68;

  *(_QWORD *)a1 = &off_1E5D34000;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  v12 = *a9;
  v13 = *(__int128 *)((char *)a9 + 12);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 76) = v13;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 96) = 0u;
  v14 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v15 = (uint64_t *)(a1 + 144);
  v16 = (uint64_t *)(a1 + 120);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  kaldi::Matrix<float>::Matrix(a1 + 272);
  *(_OWORD *)(a1 + 392) = 0u;
  v61 = (void **)(a1 + 360);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 432) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_WORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  kaldi::quasar::CEAcousticEncoderNet::InitialStates(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16), v62);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v14);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v62;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)&v62[16];
  memset(v62, 0, sizeof(v62));
  v67 = (void **)v62;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v67);
  kaldi::quasar::CELabelEncoderNet::InitialStates(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24), &v67);
  v18 = v67;
  for (i = v68; v18 != i; ++v18)
  {
    v65 = 0uLL;
    v66 = 0;
    v64 = &v66;
    v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, 1uLL);
    v21 = &v19[v20];
    v63 = v21;
    v22 = *v18;
    *v18 = 0;
    *v19 = v22;
    v23 = v19 + 1;
    *(_QWORD *)&v62[16] = v19 + 1;
    v24 = (_QWORD *)v65.i64[1];
    v25 = (_QWORD *)v65.i64[0];
    if (v65.i64[1] == v65.i64[0])
    {
      v27 = vdupq_n_s64(v65.u64[1]);
    }
    else
    {
      do
      {
        v26 = *--v24;
        *v24 = 0;
        *--v19 = v26;
      }
      while (v24 != v25);
      v27 = v65;
      v23 = *(_QWORD **)&v62[16];
      v21 = v63;
    }
    v65.i64[0] = (uint64_t)v19;
    v65.i64[1] = (uint64_t)v23;
    *(int64x2_t *)&v62[8] = v27;
    v28 = v66;
    v66 = v21;
    v63 = v28;
    *(_QWORD *)v62 = v27.i64[0];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)v62);
    v65.i64[1] = (uint64_t)v23;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v16, (uint64_t)&v65);
    *(_QWORD *)v62 = &v65;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  }
  *(_QWORD *)v62 = &v67;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  v29 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
  if (v29 && *(float *)(a1 + 68) != 0.0)
  {
    kaldi::quasar::CELabelEncoderNet::InitialStates(v29, &v67);
    v31 = v67;
    for (j = v68; v31 != j; ++v31)
    {
      v65 = 0uLL;
      v66 = 0;
      v64 = &v66;
      v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, 1uLL);
      v34 = &v32[v33];
      v63 = v34;
      v35 = *v31;
      *v31 = 0;
      *v32 = v35;
      v36 = v32 + 1;
      *(_QWORD *)&v62[16] = v32 + 1;
      v37 = (_QWORD *)v65.i64[1];
      v38 = (_QWORD *)v65.i64[0];
      if (v65.i64[1] == v65.i64[0])
      {
        v40 = vdupq_n_s64(v65.u64[1]);
      }
      else
      {
        do
        {
          v39 = *--v37;
          *v37 = 0;
          *--v32 = v39;
        }
        while (v37 != v38);
        v40 = v65;
        v36 = *(_QWORD **)&v62[16];
        v34 = v63;
      }
      v65.i64[0] = (uint64_t)v32;
      v65.i64[1] = (uint64_t)v36;
      *(int64x2_t *)&v62[8] = v40;
      v41 = v66;
      v66 = v34;
      v63 = v41;
      *(_QWORD *)v62 = v40.i64[0];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)v62);
      v65.i64[1] = (uint64_t)v36;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v15, (uint64_t)&v65);
      *(_QWORD *)v62 = &v65;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    }
    *(_QWORD *)v62 = &v67;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  }
  EmbeddingDim = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 24));
  v43 = EmbeddingDim;
  v44 = *(char **)(a1 + 368);
  v45 = *(_QWORD *)(a1 + 376);
  if ((unint64_t)v44 >= v45)
  {
    v47 = (char *)*v61;
    v48 = 0xAAAAAAAAAAAAAAABLL * ((v44 - (_BYTE *)*v61) >> 2);
    v49 = v48 + 1;
    if (v48 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v47) >> 2);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0xAAAAAAAAAAAAAAALL)
      v51 = 0x1555555555555555;
    else
      v51 = v49;
    if (v51)
    {
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a1 + 376, v51);
      v47 = *(char **)(a1 + 360);
      v44 = *(char **)(a1 + 368);
    }
    else
    {
      v52 = 0;
    }
    v53 = &v52[12 * v48];
    v54 = &v52[12 * v51];
    *(_DWORD *)v53 = 0;
    *((_DWORD *)v53 + 1) = v43;
    *((_DWORD *)v53 + 2) = 0;
    v46 = v53 + 12;
    if (v44 != v47)
    {
      do
      {
        v55 = *(_QWORD *)(v44 - 12);
        v44 -= 12;
        v56 = *((_DWORD *)v44 + 2);
        *(_QWORD *)(v53 - 12) = v55;
        v53 -= 12;
        *((_DWORD *)v53 + 2) = v56;
      }
      while (v44 != v47);
      v47 = (char *)*v61;
    }
    *(_QWORD *)(a1 + 360) = v53;
    *(_QWORD *)(a1 + 368) = v46;
    *(_QWORD *)(a1 + 376) = v54;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *(_DWORD *)v44 = 0;
    *((_DWORD *)v44 + 1) = EmbeddingDim;
    v46 = v44 + 12;
    *((_DWORD *)v44 + 2) = 0;
  }
  *(_QWORD *)(a1 + 368) = v46;
  if (*(float *)(a1 + 64) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"opts_.max_label_fraction > 0", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (*(float *)(a1 + 76) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"opts_.softmax_temperature > 0", 29);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (*(float *)(a1 + 80) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"opts_.nnlm_softmax_temperature > 0", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (*(float *)(a1 + 84) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"opts_.ilm_softmax_temperature > 0", 33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (*(float *)(a1 + 72) != 0.0
    && kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"ILM subtraction requires non-softmax output from joint predictor", 64);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (a10 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"chunk_size >= 0", 15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (a10)
  {
    v57 = kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(a3);
    v58 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(a3) + v57 * a10;
  }
  else
  {
    v58 = 0;
  }
  *(_DWORD *)(a1 + 92) = v58;
  if (kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    v59 = *(_DWORD *)(a1 + 92);
    if (v59 != kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
    {
      kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(a3);
      kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(a3);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Acoustic encoder has fixed input size which mismatches decoder; set chunk-size to ",
        82);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
    }
  }
  return a1;
}

{
  return kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1ADB51F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, _QWORD **a14, _QWORD **a15, uint64_t a16, void **a17)
{
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v24 = v17 + 60;
  v25 = *a12;
  if (*a12)
  {
    v17[70] = v25;
    operator delete(v25);
  }
  v26 = *v24;
  if (*v24)
  {
    v17[61] = v26;
    operator delete(v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  std::__tree<int>::destroy((uint64_t)(v17 + 51), *a14);
  std::__tree<int>::destroy(a16, *a15);
  v27 = *a17;
  if (*a17)
  {
    v17[46] = v27;
    operator delete(v27);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(v17 + 42));
  v28 = *a9;
  if (*a9)
  {
    v17[40] = v28;
    operator delete(v28);
  }
  kaldi::Matrix<float>::~Matrix(a10);
  v29 = v17[33];
  v17[33] = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = v17[32];
  v17[32] = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = v17[31];
  v17[31] = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  *(_QWORD *)(v22 - 144) = v18;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(_QWORD *)(v22 - 144) = v18 - 24;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(_QWORD *)(v22 - 144) = a11;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  v32 = v17[21];
  v17[21] = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  *(_QWORD *)(v22 - 144) = v20;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(_QWORD *)(v22 - 144) = v19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(_QWORD *)(v22 - 144) = v21;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADB521B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::Encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  signed int v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  clockid_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  void **v43;
  void *v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *__p;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  v88 = 0;
  if ((_DWORD)a3)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v7 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    if (v6 < (int)(kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16))
                  + v7))
    {
      v9 = *(_QWORD *)(a1 + 248);
      v8 = *(void **)(a1 + 256);
      *(_QWORD *)(a1 + 248) = 0;
      v88 = v9;
      if (v8)
        *(_QWORD *)(a1 + 256) = 0;
      v10 = *(_QWORD *)(a1 + 264);
      if (v10)
        *(_QWORD *)(a1 + 264) = 0;
      goto LABEL_38;
    }
  }
  v86 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v83, (clockid_t)a2);
  v87 = 0;
  v75 = 0;
  __p = 0;
  v82 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(*(_QWORD *)(a1 + 16), (_QWORD *)(a1 + 96), a2, a3, (_QWORD *)(a1 + 96), &v75, &__p, &v82);
  *(double *)(a1 + 584) = *(double *)(a1 + 584) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v11) - *(double *)&v83;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
  if (__p)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)__p + 160))(__p, 0);
  }
  if (v82)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 160))(v82, 0);
  }
  if ((a3 & 1) != 0
    || !kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    v9 = v75;
    v75 = 0;
    v88 = v9;
    v8 = __p;
    if (__p)
      __p = 0;
    v10 = v82;
    if (v82)
      v82 = 0;
    v30 = *(_QWORD *)(a1 + 248);
    if (v30)
    {
      *(_QWORD *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
    v31 = *(_QWORD *)(a1 + 256);
    if (v31)
    {
      *(_QWORD *)(a1 + 256) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    v32 = *(_QWORD *)(a1 + 264);
    if (!v32)
      goto LABEL_32;
    *(_QWORD *)(a1 + 264) = 0;
    goto LABEL_31;
  }
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
  if (v12 <= (int)kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    v61 = v75;
    v75 = 0;
    v62 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v61;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = __p;
    if (__p)
    {
      __p = 0;
      v64 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v63;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    }
    v65 = v82;
    if (v82)
    {
      v82 = 0;
      v66 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v65;
      if (v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
        v9 = 0;
        v8 = 0;
        v10 = 0;
        goto LABEL_32;
      }
    }
    v9 = 0;
    v10 = 0;
    v8 = 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
    v14 = kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    v15 = (_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    v16 = (v13 - v14);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v15 + 112))(&v81, *v15, v75, 0, v16);
    v9 = v81;
    v88 = v81;
    v17 = *(_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    v18 = v75;
    v19 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 112))(&v81, v17, v18, v16, v19);
    v20 = v81;
    v81 = 0;
    v21 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v20;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = v81;
      v81 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    if (__p)
    {
      v23 = (_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr, _QWORD, void *, _QWORD, uint64_t))(*(_QWORD *)*v23 + 112))(&v81, *v23, __p, 0, v16);
      v8 = (void *)v81;
      v24 = *(_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      v25 = __p;
      v26 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)__p + 160))(__p, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v24 + 112))(&v81, v24, v25, v16, v26);
      v27 = v81;
      v81 = 0;
      v28 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = v81;
        v81 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
    }
    else
    {
      v8 = 0;
    }
    if (v82)
    {
      v67 = (_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v67 + 112))(&v81, *v67, v82, 0, v16);
      v10 = v81;
      v68 = *(_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      v69 = v82;
      v70 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 160))(v82, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 112))(&v81, v68, v69, v16, v70);
      v71 = v81;
      v81 = 0;
      v72 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v71;
      if (!v72 || ((*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72), v32 = v81, v81 = 0, !v32))
      {
LABEL_32:
        v33 = v82;
        v82 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        goto LABEL_34;
      }
LABEL_31:
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      goto LABEL_32;
    }
    v10 = 0;
  }
LABEL_34:
  v34 = __p;
  __p = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
LABEL_38:
  if (v9)
    v36 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 160))(v9, 0);
  else
    v36 = 0;
  *(int32x2_t *)(a1 + 528) = vadd_s32(*(int32x2_t *)(a1 + 528), vdup_n_s32(v36));
  v37 = (_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
  kaldi::quasar::TransducerAutoRegressiveDecodable::AppendBuffers((uint64_t)v37, v37, &v88, (uint64_t *)(a1 + 168));
  if (v8)
  {
    __p = 0;
    v79 = 0;
    v80 = 0;
    v73 = v10;
    v74 = v8;
    (*(void (**)(void *, void **))(*(_QWORD *)v8 + 56))(v8, &__p);
    v38 = kaldi::MatrixBase<float>::NumRows(a1 + 272);
    v39 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v8 + 160))(v8, 0);
    v40 = kaldi::quasar::CEAcousticEncoderNet::OutputPhoneDim(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    v41 = v40;
    kaldi::Matrix<float>::Resize((int32x2_t *)(a1 + 272), (v39 + v38), v40, 2, 0);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v83, a1 + 272, v38, v39, 0, *(_DWORD *)(a1 + 280));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v75, (uint64_t)__p, v39, v41, v41);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v83, (int *)&v75, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
    if (v39 >= 1)
    {
      v42 = 0;
      v43 = (void **)(a1 + 312);
      do
      {
        v44 = v83;
        v45 = v85;
        v46 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v83);
        v77 = 0;
        v75 = (uint64_t)v44 + 4 * v45 * v42;
        v76 = v46;
        kaldi::VectorBase<float>::ApplySoftMax((uint64_t)&v75);
        kaldi::VectorBase<float>::ApplyLog((uint64_t)&v75);
        LODWORD(v82) = 0;
        kaldi::VectorBase<float>::Max(&v75, (int *)&v82);
        v48 = *(char **)(a1 + 320);
        v47 = *(_QWORD *)(a1 + 328);
        if ((unint64_t)v48 >= v47)
        {
          v50 = (char *)*v43;
          v51 = (v48 - (_BYTE *)*v43) >> 2;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v53 = v47 - (_QWORD)v50;
          if (v53 >> 1 > v52)
            v52 = v53 >> 1;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
            v54 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
          {
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 328, v54);
            v50 = *(char **)(a1 + 312);
            v48 = *(char **)(a1 + 320);
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[4 * v51];
          *(_DWORD *)v56 = v82;
          v49 = v56 + 4;
          while (v48 != v50)
          {
            v57 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v56 - 1) = v57;
            v56 -= 4;
          }
          *(_QWORD *)(a1 + 312) = v56;
          *(_QWORD *)(a1 + 320) = v49;
          *(_QWORD *)(a1 + 328) = &v55[4 * v54];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_DWORD *)v48 = v82;
          v49 = v48 + 4;
        }
        *(_QWORD *)(a1 + 320) = v49;
        ++v42;
      }
      while (v42 != v39);
    }
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
    if (__p)
    {
      v79 = (unint64_t)__p;
      operator delete(__p);
    }
    v10 = v73;
    v8 = v74;
  }
  if (v10)
  {
    *(double *)&v83 = 0.0;
    v84 = 0;
    v85 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 56))(v10, &v83);
    v58 = *(int *)(a1 + 344);
    v59 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 160))(v10, 0);
    kaldi::Vector<float>::Resize((void **)(a1 + 336), v59 + v58, 2);
    v76 = 0;
    v77 = 0;
    v75 = *(_QWORD *)(a1 + 336) + 4 * v58;
    LODWORD(v76) = v59;
    v80 = 0;
    __p = v83;
    v79 = v59;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)&v75, (const void **)&__p);
    if (*(double *)&v83 != 0.0)
    {
      v84 = v83;
      operator delete(v83);
    }
  }
  if ((_DWORD)a3)
    *(_BYTE *)(a1 + 576) = 1;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  result = v88;
  if (v88)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  return result;
}

void sub_1ADB52A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  if (a16)
    (*(void (**)(void *))(*(_QWORD *)a16 + 8))(a16);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v25 = *(_QWORD *)(v23 - 88);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1E5D34000;
  v2 = (void *)*((_QWORD *)this + 69);
  if (v2)
  {
    *((_QWORD *)this + 70) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
  {
    *((_QWORD *)this + 61) = v3;
    operator delete(v3);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  std::__tree<int>::destroy((uint64_t)this + 408, *((_QWORD **)this + 52));
  std::__tree<int>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  v4 = (void *)*((_QWORD *)this + 45);
  if (v4)
  {
    *((_QWORD *)this + 46) = v4;
    operator delete(v4);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 336);
  v5 = (void *)*((_QWORD *)this + 39);
  if (v5)
  {
    *((_QWORD *)this + 40) = v5;
    operator delete(v5);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 272);
  v6 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v9 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (void **)((char *)this + 144);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 120);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogLikelihoods(uint64_t a1, int a2, _QWORD *a3, char *a4)
{
  unint64_t v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  clockid_t v31;
  clockid_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  int v36;
  _QWORD *v37;
  uint64_t *Trie;
  clockid_t v39;
  clockid_t v40;
  uint64_t *MultiChainMultiAudioBuffer;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Ngram *v45;
  clockid_t v46;
  clockid_t v47;
  uint64_t *v48;
  clockid_t v49;
  uint64_t *v50;
  clockid_t v51;
  int *v52;
  unint64_t v53;
  int v54;
  float v55;
  int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  float v63;
  float v64;
  int v65;
  uint64_t v66;
  float v67;
  int v68;
  char *v69;
  void *v70;
  uint64_t v71;
  void **v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  int *v76;
  int v77;
  char *v78;
  unint64_t v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  _DWORD *v87;
  int *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int *v96;
  int v97;
  float v98;
  int v99;
  int v100;
  _BOOL4 IsEndPoint;
  int v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  char *v107;
  unint64_t v108;
  _DWORD *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120[2];
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127[3];
  char *v128[3];
  uint64_t v129[3];
  void *v130[3];
  void *v131;
  char *v132;
  char *v133;
  void *__p;
  char *v135;
  char *v136;
  void *v137[2];
  uint64_t v138;
  void *v139[3];
  int *v140;
  int *v141;
  void **v142[2];

  if (!a2 && (a3[1] - *a3 != 4 || *(_DWORD *)*a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v137, "states.size() == 1 && states[0] == 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v137);
  }
  while (!*(_BYTE *)(a1 + 576) && *(_DWORD *)(a1 + 536) == *(_DWORD *)(a1 + 528))
    kaldi::quasar::TransducerAutoRegressiveDecodable::EncodeNextChunk((kaldi::quasar::TransducerAutoRegressiveDecodable *)a1);
  if (*(_QWORD *)(a1 + 168))
  {
    v107 = a4;
    kaldi::quasar::TransducerAutoRegressiveDecodable::LookupStates(a1, (uint64_t)a3, (uint64_t)v137);
    __p = 0;
    v135 = 0;
    v136 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    if (a3[1] != *a3)
    {
      v7 = 0;
      v8 = v139[0];
      do
      {
        v9 = v8[v7];
        if (v9 == kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)))
        {
          v10 = v137[0];
          v11 = v135;
          if (v135 >= v136)
          {
            v15 = (char *)__p;
            v16 = (v135 - (_BYTE *)__p) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              goto LABEL_175;
            v18 = v136 - (_BYTE *)__p;
            if ((v136 - (_BYTE *)__p) >> 1 > v17)
              v17 = v18 >> 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v19);
              v15 = (char *)__p;
              v11 = v135;
            }
            else
            {
              v20 = 0;
            }
            v27 = &v20[4 * v16];
            *(_DWORD *)v27 = v10[v7];
            v12 = v27 + 4;
            while (v11 != v15)
            {
              v28 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            __p = v27;
            v135 = v12;
            v136 = &v20[4 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *(_DWORD *)v135 = *((_DWORD *)v137[0] + v7);
            v12 = v11 + 4;
          }
          v135 = v12;
        }
        else
        {
          v13 = v132;
          if (v132 >= v133)
          {
            v21 = (char *)v131;
            v22 = (v132 - (_BYTE *)v131) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
LABEL_175:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v24 = v133 - (_BYTE *)v131;
            if ((v133 - (_BYTE *)v131) >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v25);
              v21 = (char *)v131;
              v13 = v132;
            }
            else
            {
              v26 = 0;
            }
            v29 = &v26[4 * v22];
            *(_DWORD *)v29 = v8[v7];
            v14 = v29 + 4;
            while (v13 != v21)
            {
              v30 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v29 - 1) = v30;
              v29 -= 4;
            }
            v131 = v29;
            v132 = v14;
            v133 = &v26[4 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v132 = v8[v7];
            v14 = v13 + 4;
          }
          v132 = v14;
        }
        ++v7;
      }
      while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
    }
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(a1, (uint64_t **)(a1 + 120), (int **)v137, v139, (uint64_t)v129);
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((_QWORD **)(a1 + 176), (unsigned int **)&__p, 0, v128);
    memset(v127, 0, sizeof(v127));
    if (v132 != v131)
    {
      LOBYTE(v122) = 1;
      kaldi::Timer::Reset((kaldi::Timer *)v120, v31);
      v123 = 0;
      kaldi::quasar::CELabelEncoderNet::EncodeBatch(*(_QWORD *)(a1 + 24), v130, (int **)&v131, (uint64_t)v130, v127);
      *(double *)(a1 + 592) = *(double *)(a1 + 592) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32) - *(double *)v120;
    }
    if (*(float *)(a1 + 72) != 0.0)
    {
      quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((_QWORD **)(a1 + 200), (unsigned int **)&__p, 0, (char **)&v116);
      v113 = 0uLL;
      v114 = 0;
      if (v132 != v131)
      {
        v33 = *(_QWORD *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
        v35 = v131;
        v34 = v132;
        v36 = kaldi::quasar::CEJointPredictorNet::InputDim(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32));
        v37 = operator new(0x10uLL);
        v120[1] = v37 + 2;
        v121 = v37 + 2;
        *v37 = (v34 - v35) >> 2;
        v37[1] = v36;
        v120[0] = v37;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v33 + 56))(&v126, v33, v120);
        if (v120[0])
        {
          v120[1] = v120[0];
          operator delete(v120[0]);
        }
        Trie = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
        kaldi::quasar::ComputeEngineItf::CreateConcat(*Trie, (uint64_t **)v127, 0);
        v124 = 0;
        LOBYTE(v122) = 1;
        kaldi::Timer::Reset((kaldi::Timer *)v120, v39);
        v123 = 0;
        kaldi::quasar::CEJointPredictorNet::Predict(*(_QWORD *)(a1 + 32), &v126, &v125, &v124);
        *(double *)(a1 + 608) = *(double *)(a1 + 608)
                              + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v40)
                              - *(double *)v120;
        MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
        kaldi::quasar::ComputeEngineItf::CreateSplitMove(*MultiChainMultiAudioBuffer, &v124, &v110);
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(&v113);
        v113 = v110;
        v114 = v111;
        v111 = 0;
        v110 = 0uLL;
        v142[0] = (void **)&v110;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v142);
        v42 = v124;
        v124 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v43 = v125;
        v125 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v44 = v126;
        v126 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      }
      quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs(a1, (char **)&v116, (char **)&v113, (int **)v139, (char **)v120);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 200));
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v120;
      *(_QWORD *)(a1 + 216) = v121;
      v120[1] = 0;
      v121 = 0;
      v120[0] = 0;
      *(_QWORD *)&v110 = v120;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      v120[0] = &v113;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
      v120[0] = &v116;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    }
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates(a1, v129, v130, (int **)v139, (uint64_t *)v120);
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void ***)(a1 + 120));
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v120;
    *(_QWORD *)(a1 + 136) = v121;
    v120[1] = 0;
    v121 = 0;
    v120[0] = 0;
    *(_QWORD *)&v116 = v120;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs(a1, v128, v127, (int **)v139, (char **)v120);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 176));
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v120;
    *(_QWORD *)(a1 + 192) = v121;
    v120[1] = 0;
    v121 = 0;
    v120[0] = 0;
    *(_QWORD *)&v116 = v120;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    v45 = *(Ngram **)(a1 + 56);
    if (v45 && *(float *)(a1 + 68) != 0.0)
    {
      Ngram::getTrie(v45);
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(a1, (uint64_t **)(a1 + 144), (int **)v137, v139, (uint64_t)v120);
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((_QWORD **)(a1 + 224), (unsigned int **)&__p, 0, (char **)&v113);
      v110 = 0uLL;
      v111 = 0;
      if (v132 != v131)
      {
        LOBYTE(v118) = 1;
        kaldi::Timer::Reset((kaldi::Timer *)&v116, v46);
        v119 = 0;
        kaldi::quasar::CELabelEncoderNet::EncodeBatch(*(_QWORD *)(a1 + 56), &v122, (int **)&v131, (uint64_t)&v122, &v110);
        *(double *)(a1 + 616) = *(double *)(a1 + 616)
                              + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v47)
                              - *(double *)&v116;
      }
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates(a1, (uint64_t *)v120, &v122, (int **)v139, (uint64_t *)&v116);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void ***)(a1 + 144));
      *(_OWORD *)(a1 + 144) = v116;
      *(_QWORD *)(a1 + 160) = v117;
      v117 = 0;
      v116 = 0uLL;
      v142[0] = (void **)&v116;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v142);
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs(a1, (char **)&v113, (char **)&v110, (int **)v139, (char **)&v116);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 224));
      *(_OWORD *)(a1 + 224) = v116;
      *(_QWORD *)(a1 + 240) = v117;
      v117 = 0;
      v116 = 0uLL;
      v142[0] = (void **)&v116;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v142);
      *(_QWORD *)&v116 = &v110;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(_QWORD *)&v116 = &v113;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(_QWORD *)&v116 = &v122;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(_QWORD *)&v116 = v120;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    }
    v48 = (uint64_t *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputs(v48, (_QWORD *)(a1 + 168), &v140, 1, v142);
    LOBYTE(v122) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v120, v49);
    v123 = 0;
    v126 = 0;
    v50 = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::ComputeEngineItf::CreateConcat(*v50, (uint64_t **)(a1 + 176), 0);
    kaldi::quasar::CEJointPredictorNet::Predict(*(_QWORD *)(a1 + 32), (uint64_t *)v142, &v125, &v126);
    *(double *)(a1 + 600) = *(double *)(a1 + 600) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v51) - *(double *)v120;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v126 + 56))(v126, a1 + 480);
    v52 = v140;
    if (v141 == v140)
    {
      v54 = 0;
      v55 = 0.0;
    }
    else
    {
      v53 = 0;
      v54 = 0;
      v108 = v141 - v140;
      v55 = 0.0;
      do
      {
        v56 = v52;
        v57 = v52[v53];
        LODWORD(v124) = 0;
        *((_QWORD *)&v116 + 1) = 0;
        v117 = 0;
        v118 = 0;
        *(_QWORD *)&v116 = &unk_1E5D341C8;
        if (*(_QWORD *)(a1 + 56) && *(float *)(a1 + 68) != 0.0)
        {
          v58 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v53);
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v58 + 40))(v58, &v116);
          kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v116, 1, *(unsigned __int8 *)(a1 + 88), (float *)&v124, *(float *)(a1 + 80));
        }
        v59 = *(_QWORD *)(a1 + 480);
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v115 = 0;
        *(_QWORD *)&v113 = &unk_1E5D29D70;
        *((_QWORD *)&v113 + 1) = v59 + 4 * v60 * (int)v53;
        v114 = v61;
        v62 = *(_DWORD *)(a1 + 540);
        if (v62 <= 0)
          v62 = *(_DWORD *)(a1 + 528);
        v52 = v56;
        if (v57 == v62)
        {
          kaldi::CuVectorBase<float>::Set((uint64_t)&v113, -3.4028e38);
          v63 = 0.0;
          if (*(_QWORD *)(a1 + 56))
          {
            v64 = *(float *)(a1 + 68);
            if (v64 != 0.0)
              v63 = v64 * logf(*(float *)&v124);
          }
          v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
          *(float *)(*((_QWORD *)&v113 + 1) + 4 * v65) = v63;
        }
        else
        {
          if (!kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32)))
            kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v113, 0, 0, 0, *(float *)(a1 + 76));
          if (*(float *)(a1 + 72) != 0.0)
          {
            *((_QWORD *)&v110 + 1) = 0;
            v111 = 0;
            v112 = 0;
            *(_QWORD *)&v110 = &unk_1E5D341C8;
            v66 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v53);
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v66 + 40))(v66, &v110);
            kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v110, 1, 0, 0, *(float *)(a1 + 84));
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v113, (uint64_t)&v110, -*(float *)(a1 + 72), 1.0);
            *(_QWORD *)&v110 = &unk_1E5D341C8;
            kaldi::CuVector<float>::Destroy((uint64_t)&v110);
          }
          if (*(_QWORD *)(a1 + 56))
          {
            v67 = *(float *)(a1 + 68);
            if (v67 != 0.0)
              kaldi::CuVectorBase<float>::AddVec((uint64_t)&v113, (uint64_t)&v116, v67, 1.0);
          }
          if (v57 > v54)
          {
            v54 = v57;
            v55 = *(float *)&v124;
          }
        }
        *(_QWORD *)&v116 = &unk_1E5D341C8;
        kaldi::CuVector<float>::Destroy((uint64_t)&v116);
        ++v53;
      }
      while (v108 > v53);
    }
    if (v107 && (char *)(a1 + 480) != v107)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v107, *(char **)(a1 + 480), *(_QWORD *)(a1 + 488), (uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 2);
    v71 = *(int *)(a1 + 536);
    if (v54 >= (int)v71)
    {
      *(_DWORD *)(a1 + 536) = v54 + 1;
      if (*(_QWORD *)(a1 + 312) != *(_QWORD *)(a1 + 320))
      {
        v72 = (void **)(a1 + 552);
        v73 = (_QWORD *)(a1 + 568);
        v74 = v54;
        do
        {
          v75 = *(_DWORD *)(*(_QWORD *)(a1 + 312) + 4 * v71);
          if (v75 == kaldi::quasar::CEAcousticEncoderNet::SilPhoneIndex(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
          {
            v76 = *(int **)(a1 + 560);
            if (v71)
              v77 = *(v76 - 1) + 1;
            else
              v77 = 1;
            if ((unint64_t)v76 >= *v73)
            {
              v88 = (int *)*v72;
              v89 = ((char *)v76 - (_BYTE *)*v72) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v91 = *v73 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 568, v92);
                v76 = *(int **)(a1 + 560);
                v88 = *(int **)(a1 + 552);
              }
              else
              {
                v93 = 0;
              }
              v96 = (int *)&v93[4 * v89];
              *v96 = v77;
              v87 = v96 + 1;
              while (v76 != v88)
              {
                v97 = *--v76;
                *--v96 = v97;
              }
              *(_QWORD *)(a1 + 552) = v96;
              *(_QWORD *)(a1 + 560) = v87;
              *(_QWORD *)(a1 + 568) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *v76 = v77;
              v87 = v76 + 1;
            }
            *(_QWORD *)(a1 + 560) = v87;
          }
          else
          {
            v78 = *(char **)(a1 + 560);
            v79 = *(_QWORD *)(a1 + 568);
            if ((unint64_t)v78 >= v79)
            {
              v81 = (char *)*v72;
              v82 = (v78 - (_BYTE *)*v72) >> 2;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v84 = v79 - (_QWORD)v81;
              if (v84 >> 1 > v83)
                v83 = v84 >> 1;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
                v85 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 568, v85);
                v78 = *(char **)(a1 + 560);
                v81 = *(char **)(a1 + 552);
              }
              else
              {
                v86 = 0;
              }
              v94 = &v86[4 * v82];
              *(_DWORD *)v94 = 0;
              v80 = v94 + 4;
              while (v78 != v81)
              {
                v95 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              *(_QWORD *)(a1 + 552) = v94;
              *(_QWORD *)(a1 + 560) = v80;
              *(_QWORD *)(a1 + 568) = &v86[4 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_DWORD *)v78 = 0;
              v80 = v78 + 4;
            }
            *(_QWORD *)(a1 + 560) = v80;
            ++*(_DWORD *)(a1 + 544);
          }
          ++v71;
        }
        while (v71 < *(int *)(a1 + 536));
        if (kaldi::EndPointer::Enabled(*(kaldi::EndPointer **)(a1 + 40))
          && (!*(_BYTE *)(a1 + 576) || *(_DWORD *)(a1 + 528) != *(_DWORD *)(a1 + 536)))
        {
          v98 = *(int *)(a1 + 344) < 1 ? 0.0 : *(float *)(*(_QWORD *)(a1 + 336) + 4 * v74);
          v99 = *(_DWORD *)(a1 + 544);
          v100 = v99 < 1
               ? *(_DWORD *)(*(_QWORD *)(a1 + 560) - 4) + *(_DWORD *)(a1 + 524)
               : *(_DWORD *)(*(_QWORD *)(a1 + 560) - 4);
          IsEndPoint = kaldi::EndPointer::IsEndPoint(*(kaldi::EndPointer **)(a1 + 40), v98, v55, *(_DWORD *)(a1 + 536) + *(_DWORD *)(a1 + 516), v99 + *(_DWORD *)(a1 + 520), v100);
          *(_BYTE *)(a1 + 577) = IsEndPoint;
          if (IsEndPoint)
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 536);
        }
        if (kaldi::EndPointer::Enabled(*(kaldi::EndPointer **)(a1 + 48)))
        {
          v102 = *(_DWORD *)(a1 + 536);
          if ((!*(_BYTE *)(a1 + 576) || *(_DWORD *)(a1 + 528) != v102)
            && kaldi::UtteranceDetector::IsUtteranceBoundary(*(kaldi::UtteranceDetector **)(a1 + 48), v102, *(_DWORD *)(a1 + 544), *(_DWORD *)(*(_QWORD *)(a1 + 560) - 4)))
          {
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 536);
          }
        }
      }
    }
    std::__tree<int>::destroy(a1 + 408, *(_QWORD **)(a1 + 416));
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 408) = a1 + 416;
    ++*(_DWORD *)(a1 + 504);
    v103 = v125;
    v125 = 0;
    if (v103)
      (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
    v104 = v126;
    v126 = 0;
    if (v104)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    v105 = v142[0];
    v142[0] = 0;
    if (v105)
      (*((void (**)(void **))*v105 + 1))(v105);
    v120[0] = v127;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v128;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v130;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v129;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    if (v131)
    {
      v132 = (char *)v131;
      operator delete(v131);
    }
    if (__p)
    {
      v135 = (char *)__p;
      operator delete(__p);
    }
    if (v52)
      operator delete(v52);
    if (v139[0])
      operator delete(v139[0]);
    if (v137[0])
      operator delete(v137[0]);
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"No frames to decode. Force decoding EOS.", 40);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v137);
    }
    LODWORD(v129[0]) = 0;
    v137[0] = v129;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 384), (int *)v129, (uint64_t)&std::piecewise_construct, (_DWORD **)v137)[4] = 0;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 360);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    LODWORD(v129[0]) = -8388609;
    std::vector<float>::vector(v137, v68, v129);
    v69 = (char *)(a1 + 480);
    v70 = *(void **)(a1 + 480);
    if (v70)
    {
      *(_QWORD *)(a1 + 488) = v70;
      operator delete(v70);
      *(_QWORD *)v69 = 0;
      *(_QWORD *)(a1 + 488) = 0;
      *(_QWORD *)(a1 + 496) = 0;
    }
    v109 = v137[0];
    *(_OWORD *)(a1 + 480) = *(_OWORD *)v137;
    *(_QWORD *)(a1 + 496) = v138;
    v109[(int)kaldi::quasar::CELabelEncoderNet::EOSIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24))] = 0;
    if (a4 && v69 != a4)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)(a1 + 480), *(_QWORD *)(a1 + 488), (uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 2);
    ++*(_DWORD *)(a1 + 504);
  }
  return 1;
}

void sub_1ADB53CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a37;
  a37 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = a38;
  a38 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *(_QWORD *)(v57 - 128);
  *(_QWORD *)(v57 - 128) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  a29 = &a39;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = &a42;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::pair<std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~pair(&a45);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::tuple<std::vector<int>,std::vector<int>,std::vector<int>>::~tuple((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_1ADB53EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a57);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned int *)this + 134);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EncodeNextChunk(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  int v2;
  uint64_t v3;
  signed int v4;
  _BOOL4 IsValidFrame;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11[3];
  void *v12;
  __int128 v13;
  __int128 v14;
  int32x2_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;

  kaldi::CuMatrix<float>::CuMatrix(&v15, *((unsigned int *)this + 23), *(unsigned int *)(*((_QWORD *)this + 1) + 24), 0, 0, 0);
  v2 = *((_DWORD *)this + 113);
  if (v2 < 1)
  {
    v3 = 0;
  }
  else
  {
    *((_QWORD *)&v13 + 1) = __PAIR64__(v2, v17);
    v14 = v18;
    v12 = &unk_1E5D29D40;
    *(_QWORD *)&v13 = v16;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v12, (uint64_t)this + 432, 111);
    v12 = &unk_1E5D29D40;
    v13 = 0u;
    v14 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
    v3 = *((unsigned int *)this + 113);
  }
  if ((int)v3 < *((_DWORD *)this + 23))
  {
    v4 = *((_DWORD *)this + 127);
    do
    {
      if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 1), v4, 1))
        break;
      v12 = &unk_1E5D29D70;
      *(_QWORD *)&v13 = v16 + 4 * (int)v18 * (int)v3;
      *(_QWORD *)&v14 = *((_QWORD *)&v18 + 1);
      *((_QWORD *)&v13 + 1) = v17;
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 1), *((_DWORD *)this + 127), v11);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(&v12, (uint64_t)v11);
      v3 = (v3 + 1);
      v4 = *((_DWORD *)this + 127) + 1;
      *((_DWORD *)this + 127) = v4;
    }
    while ((int)v3 < *((_DWORD *)this + 23));
  }
  if ((int)v3 >= 1)
  {
    if (!kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2))
      && (int)v3 < *((_DWORD *)this + 23))
    {
      kaldi::CuMatrix<float>::Resize(&v15, v3, *(unsigned int *)(*((_QWORD *)this + 1) + 24), 2, 0);
    }
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 1), *((_DWORD *)this + 127), 1);
    kaldi::quasar::TransducerAutoRegressiveDecodable::Encode((uint64_t)this, (uint64_t)&v15, !IsValidFrame);
    v6 = v3;
    if ((int)v3 >= (int)kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                           + 2)))
    {
      v7 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
      v8 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
      v6 = (((int)v3 - v8)
                        % (int)kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                                           + 2))
                        + v7);
    }
    kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 54, v6, *(unsigned int *)(*((_QWORD *)this + 1) + 24), 1, 0);
    v9 = v18 * (v3 - v6);
    *((_QWORD *)&v13 + 1) = __PAIR64__(v6, v17);
    LODWORD(v14) = v18;
    DWORD1(v14) = DWORD1(v18) - v9;
    *((_QWORD *)&v14 + 1) = *((_QWORD *)&v18 + 1);
    v12 = &unk_1E5D29D40;
    *(_QWORD *)&v13 = v16 + 4 * v9;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 108, (uint64_t)&v12, 111);
    v12 = &unk_1E5D29D40;
    v13 = 0u;
    v14 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v15);
}

void sub_1ADB54170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _OWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  *v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::LookupStates(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  _OWORD *v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  _DWORD *v14;
  char *v15;
  void *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  void *v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t **v47;
  char *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  void *v54[2];
  char *v55;
  void *v56[2];
  char *v57;
  void *__p[2];
  char *v59;
  _DWORD *v60;

  v6 = (uint64_t **)(a1 + 384);
  v7 = (_OWORD *)(a1 + 392);
  std::__tree<int>::destroy(a1 + 384, *(_QWORD **)(a1 + 392));
  *(_QWORD *)(a1 + 384) = v7;
  v8 = 0uLL;
  *v7 = 0u;
  v59 = 0;
  *(_OWORD *)__p = 0u;
  v57 = 0;
  *(_OWORD *)v56 = 0u;
  v55 = 0;
  *(_OWORD *)v54 = 0u;
  v9 = *(_DWORD **)a2;
  v10 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v10)
  {
    v52 = 0;
    v50 = 0;
    v48 = 0;
    v49 = 0uLL;
    v51 = 0uLL;
  }
  else
  {
    v53 = a3;
    do
    {
      v11 = *(_QWORD *)v7;
      v12 = *v9;
      if (*(_QWORD *)v7)
      {
        do
        {
          if (*(_DWORD *)(v11 + 28) >= v12)
            v13 = (uint64_t *)v11;
          else
            v13 = (uint64_t *)(v11 + 8);
          v11 = *v13;
        }
        while (*v13);
      }
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * v12);
      v15 = (char *)__p[1];
      if (__p[1] >= v59)
      {
        v17 = (char *)__p[0];
        v18 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          goto LABEL_60;
        v20 = v59 - (char *)__p[0];
        if ((v59 - (char *)__p[0]) >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v21);
          v17 = (char *)__p[0];
          v15 = (char *)__p[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = *v14;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        __p[0] = v23;
        __p[1] = v16;
        v59 = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)__p[1] = *v14;
        v16 = v15 + 4;
      }
      __p[1] = v16;
      v25 = (char *)v56[1];
      if (v56[1] >= v57)
      {
        v27 = (char *)v56[0];
        v28 = ((char *)v56[1] - (char *)v56[0]) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          goto LABEL_60;
        v30 = v57 - (char *)v56[0];
        if ((v57 - (char *)v56[0]) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v31);
          v27 = (char *)v56[0];
          v25 = (char *)v56[1];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = v14[1];
        v26 = v33 + 4;
        while (v25 != v27)
        {
          v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v56[0] = v33;
        v56[1] = v26;
        v57 = &v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)v56[1] = v14[1];
        v26 = v25 + 4;
      }
      v56[1] = v26;
      v35 = (char *)v54[1];
      if (v54[1] >= v55)
      {
        v37 = (char *)v54[0];
        v38 = ((char *)v54[1] - (char *)v54[0]) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
LABEL_60:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = v55 - (char *)v54[0];
        if ((v55 - (char *)v54[0]) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v55, v41);
          v35 = (char *)v54[1];
          v37 = (char *)v54[0];
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = v14[2];
        v36 = (uint64_t)(v43 + 4);
        while (v35 != v37)
        {
          v44 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        v54[0] = v43;
        v55 = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v54[1] = v14[2];
        v36 = (uint64_t)v54[1] + 4;
      }
      v54[1] = (void *)v36;
      v45 = *(_QWORD *)(a1 + 400);
      v46 = v14[2];
      v60 = v9;
      v47 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, v9, (uint64_t)&std::piecewise_construct, &v60);
      *((_DWORD *)v47 + 8) = v45;
      *((_DWORD *)v47 + 9) = v46;
      ++v9;
    }
    while (v9 != v10);
    v8 = *(_OWORD *)__p;
    v48 = v59;
    v49 = *(_OWORD *)v56;
    v50 = v57;
    v51 = *(_OWORD *)v54;
    v52 = v55;
    a3 = v53;
  }
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 360);
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v48;
  *(_OWORD *)(a3 + 24) = v49;
  *(_QWORD *)(a3 + 40) = v50;
  *(_OWORD *)(a3 + 48) = v51;
  *(_QWORD *)(a3 + 64) = v52;
}

void sub_1ADB54550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(uint64_t a1@<X0>, uint64_t **a2@<X2>, int **a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;
  int *v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  void **v15[3];
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void ***v21;

  v19 = 0uLL;
  v20 = 0;
  v17 = 0uLL;
  v18 = 0;
  v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve((uint64_t *)&v19, v10);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve((uint64_t *)&v17, v10);
  v11 = a3[1];
  if ((char *)v11 - (char *)*a3 == 4)
  {
    v12 = 1;
  }
  else
  {
    std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v15, *a3, v11);
    v12 = v16[0] == a3[1] - *a3;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v15);
  }
  v13 = *a2;
  v14 = a2[1];
  if (*a2 != v14)
  {
    do
    {
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherState(a1, v13, (uint64_t *)a3, a4, v12, (uint64_t)v15);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100]((uint64_t *)&v19, (uint64_t)v15);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100]((uint64_t *)&v17, (uint64_t)v16);
      v21 = (void ***)v16;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v21 = v15;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v13 += 3;
    }
    while (v13 != v14);
  }
  *(_OWORD *)a5 = v19;
  *(_QWORD *)(a5 + 16) = v20;
  v20 = 0;
  v19 = 0uLL;
  *(_OWORD *)(a5 + 24) = v17;
  *(_QWORD *)(a5 + 40) = v18;
  v17 = 0uLL;
  v18 = 0;
  v15[0] = (void **)&v17;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v15);
  v15[0] = (void **)&v19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v15);
}

void sub_1ADB54720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a9 = (void **)&a15;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch(_QWORD **a1@<X2>, unsigned int **a2@<X3>, char a3@<W4>, char **a4@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;

  if (*a1 == a1[1])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)**a1 + 152))(**a1);
    v9 = *a2;
    v8 = a2[1];
    v10 = ((char *)v8 - (char *)*a2) & 0x3FFFFFFFCLL;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    if (v10)
      v11 = v9 == v8;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v12 = *v9;
        if (((a3 & 1) == 0 || (v12 & 0x80000000) == 0) && a1[1] - *a1 > v12)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*a1)[v12] + 16))(&v35);
          v14 = a4[1];
          v13 = (unint64_t)a4[2];
          if ((unint64_t)v14 >= v13)
          {
            v17 = (v14 - *a4) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v18 = v13 - (_QWORD)*a4;
            v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1))
              v19 = v17 + 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            v34 = a4 + 2;
            if (v20)
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v20);
            else
              v21 = 0;
            v22 = &v21[8 * v17];
            v23 = &v21[8 * v20];
            v33 = v23;
            v24 = v35;
            v35 = 0;
            *(_QWORD *)v22 = v24;
            v16 = v22 + 8;
            v32.i64[1] = (uint64_t)(v22 + 8);
            v26 = *a4;
            v25 = a4[1];
            if (v25 == *a4)
            {
              v28 = vdupq_n_s64((unint64_t)v25);
            }
            else
            {
              do
              {
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *(_QWORD *)v25 = 0;
                *((_QWORD *)v22 - 1) = v27;
                v22 -= 8;
              }
              while (v25 != v26);
              v28 = *(int64x2_t *)a4;
              v16 = (char *)v32.i64[1];
              v23 = v33;
            }
            *a4 = v22;
            a4[1] = v16;
            v32 = v28;
            v29 = a4[2];
            a4[2] = v23;
            v33 = v29;
            v31 = v28.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v31);
          }
          else
          {
            v15 = v35;
            v35 = 0;
            *(_QWORD *)v14 = v15;
            v16 = v14 + 8;
          }
          a4[1] = v16;
          v30 = v35;
          v35 = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
}

void sub_1ADB54944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  void **v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    (*((void (**)(void **))*v15 + 1))(v15);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs@<X0>(uint64_t result@<X0>, char **a2@<X2>, char **a3@<X3>, int **a4@<X4>, char **a5@<X8>)
{
  char **v6;
  char *v8;
  char *v9;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int64x2_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int64x2_t v56;
  char *v57;
  _QWORD *v58;

  v6 = a3;
  v54 = result;
  v8 = *a3;
  v9 = a3[1];
  if (*a2 == a2[1])
  {
    if (v8 != v9)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v8 + 152))(*(_QWORD *)v8);
      if ((_DWORD)result != 2)
        goto LABEL_58;
      v52 = *v6;
      v51 = v6[1];
      if ((v51 - *v6) >> 3 != a4[1] - *a4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "nonblank_outputs.size() == labels.size()");
        goto LABEL_65;
      }
      goto LABEL_53;
    }
    if (a4[1] == *a4)
      goto LABEL_55;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "labels.size() == 0");
LABEL_65:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v55);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a2 + 152))(*(_QWORD *)*a2);
  if (v8 == v9)
  {
    if ((_DWORD)result != 2)
      goto LABEL_57;
    v52 = *a2;
    v51 = a2[1];
    if ((v51 - *a2) >> 3 == a4[1] - *a4)
    {
      v6 = a2;
LABEL_53:
      *a5 = v52;
      a5[1] = v51;
      a5[2] = v6[2];
      a5 = v6;
LABEL_55:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "blank_outputs.size() == labels.size()");
    goto LABEL_65;
  }
  if ((_DWORD)result != 2)
  {
LABEL_57:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "blank_outputs.front()->GetNumDims() == 2");
    goto LABEL_65;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*v6 + 152))(*(_QWORD *)*v6) != 2)
  {
LABEL_58:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "nonblank_outputs.front()->GetNumDims() == 2");
    goto LABEL_65;
  }
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)*a2 + 160))(*(_QWORD *)*a2, 1);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)*v6 + 160))(*(_QWORD *)*v6, 1);
  if (v11 != (_DWORD)result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "blank_outputs.front()->GetDimSize(1) == nonblank_outputs.front()->GetDimSize(1)");
    goto LABEL_65;
  }
  v13 = *a4;
  v12 = a4[1];
  if (((v6[1] - *v6) >> 3) + ((a2[1] - *a2) >> 3) != v12 - *a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v55, "blank_outputs.size() + nonblank_outputs.size() == labels.size()");
    goto LABEL_65;
  }
  v53 = (uint64_t *)a2;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *v13;
      result = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(v54 + 24));
      v18 = a5[1];
      v17 = (unint64_t)a5[2];
      if (v16 == (_DWORD)result)
      {
        v19 = *v53;
        if ((unint64_t)v18 >= v17)
        {
          v25 = (v18 - *a5) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            goto LABEL_66;
          v26 = v17 - (_QWORD)*a5;
          v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1))
            v27 = v25 + 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          v58 = a5 + 2;
          if (v28)
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v28);
          else
            v29 = 0;
          v35 = &v29[8 * v25];
          v36 = &v29[8 * v28];
          v57 = v36;
          v37 = *(_QWORD *)(v19 + 8 * v15);
          *(_QWORD *)(v19 + 8 * v15) = 0;
          *(_QWORD *)v35 = v37;
          v21 = v35 + 8;
          v56.i64[1] = (uint64_t)(v35 + 8);
          v39 = *a5;
          v38 = a5[1];
          if (v38 == *a5)
          {
            v41 = vdupq_n_s64((unint64_t)v38);
          }
          else
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *(_QWORD *)v38 = 0;
              *((_QWORD *)v35 - 1) = v40;
              v35 -= 8;
            }
            while (v38 != v39);
            v41 = *(int64x2_t *)a5;
            v21 = (char *)v56.i64[1];
            v36 = v57;
          }
          *a5 = v35;
          a5[1] = v21;
          v56 = v41;
          v49 = a5[2];
          a5[2] = v36;
          v57 = v49;
          v55 = v41.i64[0];
          result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v55);
        }
        else
        {
          v20 = *(_QWORD *)(v19 + 8 * v15);
          *(_QWORD *)(v19 + 8 * v15) = 0;
          *(_QWORD *)v18 = v20;
          v21 = v18 + 8;
        }
        a5[1] = v21;
        ++v15;
      }
      else
      {
        v22 = *v6;
        if ((unint64_t)v18 >= v17)
        {
          v30 = (v18 - *a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
LABEL_66:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = v17 - (_QWORD)*a5;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v58 = a5 + 2;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v33);
          else
            v34 = 0;
          v42 = &v34[8 * v30];
          v43 = &v34[8 * v33];
          v57 = v43;
          v44 = *(_QWORD *)&v22[8 * v14];
          *(_QWORD *)&v22[8 * v14] = 0;
          *(_QWORD *)v42 = v44;
          v24 = v42 + 8;
          v56.i64[1] = (uint64_t)(v42 + 8);
          v46 = *a5;
          v45 = a5[1];
          if (v45 == *a5)
          {
            v48 = vdupq_n_s64((unint64_t)v45);
          }
          else
          {
            do
            {
              v47 = *((_QWORD *)v45 - 1);
              v45 -= 8;
              *(_QWORD *)v45 = 0;
              *((_QWORD *)v42 - 1) = v47;
              v42 -= 8;
            }
            while (v45 != v46);
            v48 = *(int64x2_t *)a5;
            v24 = (char *)v56.i64[1];
            v43 = v57;
          }
          *a5 = v42;
          a5[1] = v24;
          v56 = v48;
          v50 = a5[2];
          a5[2] = v43;
          v57 = v50;
          v55 = v48.i64[0];
          result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v55);
        }
        else
        {
          v23 = *(_QWORD *)&v22[8 * v14];
          *(_QWORD *)&v22[8 * v14] = 0;
          *(_QWORD *)v18 = v23;
          v24 = v18 + 8;
        }
        a5[1] = v24;
        ++v14;
      }
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_1ADB54E3C()
{
  __break(1u);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, int **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14[34];
  char **v15;

  v6 = *a2;
  v7 = a2[1];
  if (v7 - *a2 != a3[1] - *a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "blank_states.size() == nonblank_states.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v7 != v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeState(a1, (char **)(v6 + v12), (char **)(*a3 + v12), a4, v14);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(a5, (uint64_t)v14);
      v15 = v14;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      ++v13;
      v6 = *a2;
      v12 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v13);
  }
}

void sub_1ADB54FC0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void **std::pair<std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputs(uint64_t *a1@<X1>, _QWORD *a2@<X2>, int **a3@<X3>, char a4@<W4>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  void *__p;
  void *v19;
  _QWORD *v20;

  if (*a2
    && ((*(void (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2),
        v10 = (char *)a3[1] - (char *)*a3,
        (v10 & 0x3FFFFFFFCLL) != 0))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, 1);
    v12 = *a1;
    v13 = operator new(0x10uLL);
    v19 = v13 + 2;
    v20 = v13 + 2;
    *v13 = (int)(v10 >> 2);
    v13[1] = v11;
    __p = v13;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 56))(v12, &__p);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
    v14 = *a3;
    v15 = a3[1];
    if (*a3 != v15)
    {
      v16 = 0;
      while (1)
      {
        v17 = *v14;
        if ((a4 & 1) == 0)
          break;
        if ((v17 & 0x80000000) == 0)
          goto LABEL_11;
LABEL_13:
        v16 = (v16 + v11);
        if (++v14 == v15)
          return;
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, 0);
LABEL_11:
      if (v17 < (*(int (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, 0))
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*a5 + 72))(*a5, *a2, (v17 * v11), (v17 * v11 + v11), v16);
      goto LABEL_13;
    }
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1ADB55170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(uint64_t a1, uint64_t a2, int a3, int a4, float *a5, float a6)
{
  _QWORD *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  _QWORD v16[34];

  v10 = (_QWORD *)(a2 + 8);
  if (a6 != 1.0)
  {
    if (a6 <= 0.0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "temperature > 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    kaldi::VectorBase<float>::Scale(a2 + 8, 1.0 / a6);
  }
  if (a3)
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1)) = -8388609;
  if (a4)
  {
    v11 = *(float *)(*v10 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1));
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1)) = -8388609;
  }
  else
  {
    v11 = -3.4028e38;
  }
  v12 = kaldi::VectorBase<float>::ApplySoftMax((uint64_t)v10);
  kaldi::VectorBase<float>::ApplyLog((uint64_t)v10);
  if (a3)
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1)) = 0;
  if (a5)
  {
    if (a4)
    {
      v13 = expf(v11);
      v14 = v13 / (float)(v13 + expf(v12));
    }
    else
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v14 = expf(*(float *)(*v10 + 4 * v15));
    }
    *a5 = v14;
  }
}

BOOL kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((_BYTE *)this + 576) && *((_DWORD *)this + 132) == *((_DWORD *)this + 134);
}

uint64_t std::tuple<std::vector<int>,std::vector<int>,std::vector<int>>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

unint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::LogLikelihood(kaldi::quasar::TransducerAutoRegressiveDecodable *this, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  int v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  unint64_t v25;
  unsigned int v26;
  unsigned int *v27;

  v26 = a3;
  v27 = &v26;
  v6 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 48, (int *)&v26, (uint64_t)&std::piecewise_construct, &v27)[4];
  v7 = *(unsigned int *)(*((_QWORD *)this + 60)
                       + 4
                       * (int)(a4
                             + (*(uint64_t (**)(kaldi::quasar::TransducerAutoRegressiveDecodable *))(*(_QWORD *)this + 16))(this)
                             * (_DWORD)v6));
  v25 = v26 | (unint64_t)(a4 << 32);
  v8 = (unsigned int *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>((uint64_t)this + 408, (int *)&v25);
  if ((unsigned int *)((char *)this + 416) == v8)
  {
    if (kaldi::quasar::CELabelEncoderNet::BlankIndex(*((kaldi::quasar::CELabelEncoderNet **)this + 3)) == (_DWORD)a4)
      v10 = HIDWORD(v6) + 1;
    else
      v10 = HIDWORD(v6);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
    v27 = (unsigned int *)&v25;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>((uint64_t **)this + 51, (int *)&v25, (uint64_t)&std::piecewise_construct, (_QWORD **)&v27)+ 9) = v9;
    v11 = (char *)*((_QWORD *)this + 46);
    v12 = *((_QWORD *)this + 47);
    if ((unint64_t)v11 >= v12)
    {
      v14 = (char *)*((_QWORD *)this + 45);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v14) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0xAAAAAAAAAAAAAAALL)
        v18 = 0x1555555555555555;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)this + 376, v18);
        v14 = (char *)*((_QWORD *)this + 45);
        v11 = (char *)*((_QWORD *)this + 46);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[12 * v15];
      v21 = &v19[12 * v18];
      *(_DWORD *)v20 = (_DWORD)v6;
      *((_DWORD *)v20 + 1) = a4;
      *((_DWORD *)v20 + 2) = v10;
      v13 = v20 + 12;
      if (v11 != v14)
      {
        do
        {
          v22 = *(_QWORD *)(v11 - 12);
          v11 -= 12;
          v23 = *((_DWORD *)v11 + 2);
          *(_QWORD *)(v20 - 12) = v22;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v23;
        }
        while (v11 != v14);
        v14 = (char *)*((_QWORD *)this + 45);
      }
      *((_QWORD *)this + 45) = v20;
      *((_QWORD *)this + 46) = v13;
      *((_QWORD *)this + 47) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v11 = (_DWORD)v6;
      *((_DWORD *)v11 + 1) = a4;
      v13 = v11 + 12;
      *((_DWORD *)v11 + 2) = v10;
    }
    *((_QWORD *)this + 46) = v13;
  }
  else
  {
    v9 = v8[9];
  }
  return v7 | (v9 << 32);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADB5563C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherState(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  void ***v17;
  _QWORD *v18;
  unint64_t v19;
  void **v20;
  void *v21;
  void **v22;
  BOOL v23;
  __int128 *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  void **v41;
  uint64_t v42;
  void **v43;
  void **v44;
  uint64_t v45;
  void **v46;
  void **v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void **v51;
  void **v52;
  uint64_t v53;
  void **v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v64;
  _QWORD v65[2];
  __int128 v66;
  _QWORD v67[2];
  void **v68;
  void **v69;
  void **v70;
  void **v71;
  _QWORD *v72;
  uint64_t v73;

  v7 = *a3;
  v6 = a3[1];
  v67[0] = 0;
  v8 = 0uLL;
  v66 = 0u;
  v65[0] = 0;
  v64 = 0u;
  if (v6 == v7)
  {
    v59 = 0;
    v57 = 0;
    v58 = 0uLL;
  }
  else
  {
    v60 = a6;
    v11 = 0;
    do
    {
      v12 = *(int *)(v7 + 4 * v11);
      v13 = *(_DWORD *)(*a4 + 4 * v11);
      v14 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
      v15 = v14;
      v16 = *a2;
      if (v13 == v14)
        v17 = (void ***)&v66;
      else
        v17 = (void ***)&v64;
      if (a5)
      {
        if (v13 == v14)
          v18 = v67;
        else
          v18 = v65;
        v20 = v17[1];
        v19 = (unint64_t)v17[2];
        if ((unint64_t)v20 >= v19)
        {
          v30 = v20 - *v17;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = v19 - (_QWORD)*v17;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v72 = v18;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v33);
          else
            v34 = 0;
          v40 = &v34[8 * v30];
          v41 = (void **)&v34[8 * v33];
          v71 = v41;
          v42 = *(_QWORD *)(v16 + 8 * v12);
          *(_QWORD *)(v16 + 8 * v12) = 0;
          *(_QWORD *)v40 = v42;
          v22 = (void **)(v40 + 8);
          v70 = (void **)(v40 + 8);
          v44 = *v17;
          v43 = v17[1];
          if (v43 == *v17)
          {
            v46 = v17[1];
          }
          else
          {
            do
            {
              v45 = (uint64_t)*--v43;
              *v43 = 0;
              *((_QWORD *)v40 - 1) = v45;
              v40 -= 8;
            }
            while (v43 != v44);
            v46 = *v17;
            v43 = v17[1];
            v22 = v70;
            v41 = v71;
          }
          *v17 = (void **)v40;
          v17[1] = v22;
          v47 = v17[2];
          v17[2] = v41;
          v70 = v43;
          v71 = v47;
          v68 = v46;
          v69 = v46;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v68);
        }
        else
        {
          v21 = *(void **)(v16 + 8 * v12);
          *(_QWORD *)(v16 + 8 * v12) = 0;
          *v20 = v21;
          v22 = v20 + 1;
        }
        v17[1] = v22;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v16 + 8 * v12) + 16))(&v73);
        v23 = v13 == v15;
        if (v13 == v15)
          v24 = &v66;
        else
          v24 = &v64;
        if (v23)
          v25 = v67;
        else
          v25 = v65;
        v27 = (_QWORD *)*((_QWORD *)v24 + 1);
        v26 = *((_QWORD *)v24 + 2);
        if ((unint64_t)v27 >= v26)
        {
          v35 = (void **)v27 - *v17;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v26 - (_QWORD)*v17;
          v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v72 = v25;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v25, v38);
          else
            v39 = 0;
          v48 = &v39[8 * v35];
          v49 = &v39[8 * v38];
          v71 = (void **)v49;
          v50 = v73;
          v73 = 0;
          *(_QWORD *)v48 = v50;
          v29 = (void **)(v48 + 8);
          v70 = (void **)(v48 + 8);
          v51 = (void **)*((_QWORD *)v24 + 1);
          v52 = *v17;
          if (v51 == *v17)
          {
            v54 = (void **)*((_QWORD *)v24 + 1);
          }
          else
          {
            do
            {
              v53 = (uint64_t)*--v51;
              *v51 = 0;
              *((_QWORD *)v48 - 1) = v53;
              v48 -= 8;
            }
            while (v51 != v52);
            v54 = *v17;
            v51 = (void **)*((_QWORD *)v24 + 1);
            v29 = v70;
            v49 = (char *)v71;
          }
          *v17 = (void **)v48;
          v55 = (void **)*((_QWORD *)v24 + 2);
          *((_QWORD *)v24 + 1) = v29;
          *((_QWORD *)v24 + 2) = v49;
          v70 = v51;
          v71 = v55;
          v68 = v54;
          v69 = v54;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v68);
        }
        else
        {
          v28 = v73;
          v73 = 0;
          *v27 = v28;
          v29 = (void **)(v27 + 1);
        }
        *((_QWORD *)v24 + 1) = v29;
        v56 = v73;
        v73 = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      ++v11;
      v7 = *a3;
    }
    while (v11 < (a3[1] - *a3) >> 2);
    v8 = v66;
    v57 = v67[0];
    v58 = v64;
    v59 = v65[0];
    a6 = v60;
  }
  *(_OWORD *)a6 = v8;
  *(_QWORD *)(a6 + 16) = v57;
  v67[0] = 0;
  v66 = 0uLL;
  *(_OWORD *)(a6 + 24) = v58;
  *(_QWORD *)(a6 + 40) = v59;
  v65[0] = 0;
  v64 = 0uLL;
  v68 = (void **)&v64;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v68);
  v68 = (void **)&v66;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v68);
}

void sub_1ADB559A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 88) = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  a13 = (void **)&a17;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::MergeState@<X0>(uint64_t result@<X0>, char **a2@<X2>, char **a3@<X3>, int **a4@<X4>, char **a5@<X8>)
{
  char **v6;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int64x2_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int64x2_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;

  v6 = a3;
  v8 = a2[1];
  v9 = *a3;
  v10 = a3[1];
  if (*a2 == v8)
  {
    if (v9 != v10)
    {
      if ((v10 - v9) >> 3 != a4[1] - *a4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v58, "nonblank_state.size() == labels.size()");
        goto LABEL_54;
      }
      goto LABEL_47;
    }
    if (a4[1] == *a4)
      goto LABEL_49;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v58, "labels.size() == 0");
LABEL_54:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
  }
  v11 = (v8 - *a2) >> 3;
  if (v9 == v10)
  {
    if (v11 == a4[1] - *a4)
    {
      v9 = *a2;
      v10 = a2[1];
      v6 = a2;
LABEL_47:
      *a5 = v9;
      a5[1] = v10;
      a5[2] = v6[2];
      a5 = v6;
LABEL_49:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v58, "blank_state.size() == labels.size()");
    goto LABEL_54;
  }
  v12 = v11 + ((v10 - v9) >> 3);
  if (v12 != a4[1] - *a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v58, "blank_state.size() + nonblank_state.size() == labels.size()");
    goto LABEL_54;
  }
  v13 = result;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve(a5, v12);
  v14 = *a4;
  v15 = a4[1];
  if (*a4 != v15)
  {
    v16 = 0;
    v17 = 0;
    v56 = (uint64_t)(a5 + 2);
    do
    {
      v18 = *v14;
      result = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(v13 + 24));
      v20 = a5[1];
      v19 = (unint64_t)a5[2];
      if (v18 == (_DWORD)result)
      {
        v21 = (v17 + 1);
        v22 = (int)v17;
        v23 = *a2;
        if ((unint64_t)v20 >= v19)
        {
          v30 = (v20 - *a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            goto LABEL_55;
          v31 = v19 - (_QWORD)*a5;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v61 = a5 + 2;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v56, v33);
          else
            v34 = 0;
          v40 = &v34[8 * v30];
          v41 = &v34[8 * v33];
          v60 = v41;
          v42 = *(_QWORD *)&v23[8 * v22];
          *(_QWORD *)&v23[8 * v22] = 0;
          *(_QWORD *)v40 = v42;
          v25 = v40 + 8;
          v59.i64[1] = (uint64_t)(v40 + 8);
          v44 = *a5;
          v43 = a5[1];
          if (v43 == *a5)
          {
            v46 = vdupq_n_s64((unint64_t)v43);
          }
          else
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *(_QWORD *)v43 = 0;
              *((_QWORD *)v40 - 1) = v45;
              v40 -= 8;
            }
            while (v43 != v44);
            v46 = *(int64x2_t *)a5;
            v25 = (char *)v59.i64[1];
            v41 = v60;
          }
          *a5 = v40;
          a5[1] = v25;
          v59 = v46;
          v54 = a5[2];
          a5[2] = v41;
          v60 = v54;
          v58 = v46.i64[0];
          result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
        }
        else
        {
          v24 = *(_QWORD *)&v23[8 * v22];
          *(_QWORD *)&v23[8 * v22] = 0;
          *(_QWORD *)v20 = v24;
          v25 = v20 + 8;
        }
      }
      else
      {
        v26 = v16 + 1;
        v27 = v16;
        v28 = *v6;
        if ((unint64_t)v20 >= v19)
        {
          v35 = (v20 - *a5) >> 3;
          if ((unint64_t)(v35 + 1) >> 61)
LABEL_55:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v19 - (_QWORD)*a5;
          v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v61 = a5 + 2;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v56, v38);
          else
            v39 = 0;
          v47 = &v39[8 * v35];
          v48 = &v39[8 * v38];
          v60 = v48;
          v49 = *(_QWORD *)&v28[8 * v27];
          *(_QWORD *)&v28[8 * v27] = 0;
          *(_QWORD *)v47 = v49;
          v25 = v47 + 8;
          v59.i64[1] = (uint64_t)(v47 + 8);
          v51 = *a5;
          v50 = a5[1];
          if (v50 == *a5)
          {
            v53 = vdupq_n_s64((unint64_t)v50);
          }
          else
          {
            do
            {
              v52 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *(_QWORD *)v50 = 0;
              *((_QWORD *)v47 - 1) = v52;
              v47 -= 8;
            }
            while (v50 != v51);
            v53 = *(int64x2_t *)a5;
            v25 = (char *)v59.i64[1];
            v48 = v60;
          }
          *a5 = v47;
          a5[1] = v25;
          v59 = v53;
          v55 = a5[2];
          a5[2] = v48;
          v60 = v55;
          v58 = v53.i64[0];
          result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
        }
        else
        {
          v29 = *(_QWORD *)&v28[8 * v27];
          *(_QWORD *)&v28[8 * v27] = 0;
          *(_QWORD *)v20 = v29;
          v25 = v20 + 8;
        }
        v21 = v17;
        v16 = v26;
      }
      a5[1] = v25;
      ++v14;
      v17 = v21;
    }
    while (v14 != v15);
  }
  return result;
}

void sub_1ADB55DE8()
{
  __break(1u);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::AppendBuffers(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char *v35;
  char *v36;

  v4 = *a3;
  if (*a3)
  {
    v7 = *a4;
    if (*a4)
    {
      __p = 0;
      v35 = 0;
      v36 = 0;
      v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, 1uLL);
      v11 = &v10[8 * v9];
      *(_QWORD *)v10 = v7;
      v12 = v10 + 8;
      v14 = (char *)__p;
      v13 = v35;
      v15 = v10;
      if (v35 != __p)
      {
        do
        {
          v16 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v13 != v14);
        v13 = (char *)__p;
      }
      __p = v15;
      v35 = v10 + 8;
      v36 = &v10[8 * v9];
      if (v13)
      {
        operator delete(v13);
        v11 = v36;
      }
      v35 = v10 + 8;
      v17 = *a3;
      if (v12 >= v11)
      {
        v20 = (v12 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v11 - (_BYTE *)__p;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, v23);
        else
          v24 = 0;
        v25 = &v24[8 * v20];
        v26 = &v24[8 * v23];
        *(_QWORD *)v25 = v17;
        v18 = v25 + 8;
        v28 = (char *)__p;
        v27 = v35;
        if (v35 != __p)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v25 - 1) = v29;
            v25 -= 8;
          }
          while (v27 != v28);
          v27 = (char *)__p;
        }
        __p = v25;
        v35 = v18;
        v36 = v26;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *((_QWORD *)v10 + 1) = v17;
        v18 = v10 + 16;
      }
      v35 = v18;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, _QWORD))(*(_QWORD *)*a2 + 96))(&v33, *a2, &__p, 0);
      v30 = v33;
      v33 = 0;
      v31 = *a4;
      *a4 = v30;
      if (v31)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v32 = v33;
        v33 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      if (__p)
      {
        v35 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      *a3 = 0;
      v19 = *a4;
      *a4 = v4;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

void sub_1ADB56030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::Reset(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  double v18;
  _QWORD *i;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  _QWORD *v29;
  clockid_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  unint64_t v47;
  char *v48;
  int EmbeddingDim;
  int v50;
  char *v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  char *v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  double v68;
  uint64_t v69;
  int v70;
  double v71;
  uint64_t *Trie;
  clockid_t v73;
  clockid_t v74;
  uint64_t *MultiChainMultiAudioBuffer;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  kaldi::quasar::CELabelEncoderNet *v79;
  char *v80;
  char *v81;
  uint64_t *v82;
  uint64_t *j;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int64x2_t v92;
  _QWORD *v93;
  clockid_t v94;
  int v95;
  unint64_t v96;
  char *v97;
  _DWORD *v98;
  int v99;
  int v100;
  char *v101;
  char *v102;
  char *v103;
  int64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  int v114;
  int v115;
  char *v116;
  char *v117;
  int64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  int v124;
  char *v125;
  char *v127;
  int v128;
  char *k;
  uint64_t v130;
  int v131;
  _DWORD *v132;
  int v133;
  int v134;
  char *v135;
  unint64_t v136;
  _DWORD *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  void *v153[2];
  _QWORD v154[2];
  void *v155[2];
  char *v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  _QWORD *v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  void *__p[2];
  _QWORD v165[2];
  void *v166;
  int64x2_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170[3];

  if (*(_QWORD *)(a1 + 168))
  {
    v4 = (_QWORD *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 112))(&v166, *v4, *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 536), *(unsigned int *)(a1 + 528));
    v5 = v166;
    *(double *)&v166 = 0.0;
    v6 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = v166;
      *(double *)&v166 = 0.0;
      if (v7)
        (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  if ((int)kaldi::MatrixBase<float>::NumRows(a1 + 272) >= 1)
  {
    v8 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v159, a1 + 272, *(_DWORD *)(a1 + 536), *(_DWORD *)(a1 + 528) - *(_DWORD *)(a1 + 536), 0, *(_DWORD *)(a1 + 280));
    kaldi::Matrix<float>::Matrix(&v166, &v159, 111, v8);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v159);
    kaldi::Matrix<float>::Swap((uint64_t *)(a1 + 272), (uint64_t *)&v166);
    v9 = *(int *)(a1 + 536);
    if ((_DWORD)v9)
    {
      v11 = *(_QWORD *)(a1 + 312);
      v10 = *(_BYTE **)(a1 + 320);
      v12 = (_BYTE *)(v11 + 4 * v9);
      v13 = v10 - v12;
      if (v10 != v12)
        memmove(*(void **)(a1 + 312), v12, v10 - v12);
      *(_QWORD *)(a1 + 320) = v11 + v13;
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v166);
  }
  if (*(int *)(a1 + 344) >= 1)
  {
    v14 = *(int *)(a1 + 536);
    v15 = (*(_DWORD *)(a1 + 528) - v14);
    v160 = 0;
    v161 = 0;
    *(_QWORD *)&v159 = *(_QWORD *)(a1 + 336) + 4 * v14;
    LODWORD(v160) = v15;
    v167 = 0uLL;
    *(double *)&v166 = 0.0;
    kaldi::Vector<float>::Resize(&v166, v15, 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v166, (const void **)&v159);
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 336), (uint64_t *)&v166);
    kaldi::Vector<float>::Destroy((uint64_t)&v166);
  }
  v16 = *(char **)(a1 + 120);
  v17 = *(char **)(a1 + 128);
  while (v17 != v16)
  {
    v17 -= 24;
    v166 = v17;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  }
  *(_QWORD *)(a1 + 128) = v16;
  kaldi::quasar::CELabelEncoderNet::InitialStates(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24), &v159);
  v18 = v159;
  for (i = v160; *(_QWORD **)&v18 != i; *(_QWORD *)&v18 += 8)
  {
    __p[0] = 0;
    __p[1] = 0;
    v165[0] = 0;
    v169 = v165;
    v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v165, 1uLL);
    v22 = &v20[v21];
    v168 = v22;
    v23 = **(_QWORD **)&v18;
    **(_QWORD **)&v18 = 0;
    *v20 = v23;
    v24 = v20 + 1;
    v167.i64[1] = (uint64_t)(v20 + 1);
    v26 = __p[0];
    v25 = __p[1];
    if (__p[1] == __p[0])
    {
      v28 = vdupq_n_s64((unint64_t)__p[1]);
    }
    else
    {
      do
      {
        v27 = *--v25;
        *v25 = 0;
        *--v20 = v27;
      }
      while (v25 != v26);
      v28 = *(int64x2_t *)__p;
      v24 = (void *)v167.i64[1];
      v22 = v168;
    }
    __p[0] = v20;
    __p[1] = v24;
    v167 = v28;
    v29 = (_QWORD *)v165[0];
    v165[0] = v22;
    v168 = v29;
    v166 = (void *)v28.i64[0];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v166);
    __p[1] = v24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((uint64_t *)(a1 + 120), (uint64_t)__p);
    *(double *)&v166 = COERCE_DOUBLE(__p);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  }
  *(double *)&v166 = COERCE_DOUBLE(&v159);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  v162 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v159, v30);
  v163 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v165[0] = 0;
  v31 = (_DWORD *)a2[1];
  do
  {
    if (v31 == (_DWORD *)*a2)
      break;
    v32 = *--v31;
    v33 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
    v34 = (char *)__p[1];
    if (v32 != v33)
    {
      if (__p[1] >= (void *)v165[0])
      {
        v36 = (char *)__p[0];
        v37 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v165[0] - (unint64_t)__p[0];
        if ((uint64_t)(v165[0] - (unint64_t)__p[0]) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v165, v40);
          v36 = (char *)__p[0];
          v34 = (char *)__p[1];
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = *v31;
        v35 = v42 + 4;
        while (v34 != v36)
        {
          v43 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        __p[0] = v42;
        __p[1] = v35;
        v165[0] = &v41[4 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)__p[1] = *v31;
        v35 = v34 + 4;
      }
      __p[1] = v35;
      v34 = v35;
    }
    v44 = __p[0];
  }
  while ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)) != (v34 - v44) >> 2);
  v46 = __p[0];
  v45 = __p[1];
  if ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)) == (v45 - v46) >> 2)
  {
    v48 = (char *)__p[1];
  }
  else
  {
    EmbeddingDim = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 24));
    v50 = EmbeddingDim;
    v51 = (char *)__p[1];
    if (__p[1] >= (void *)v165[0])
    {
      v52 = (char *)__p[0];
      v53 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v55 = v165[0] - (unint64_t)__p[0];
      if ((uint64_t)(v165[0] - (unint64_t)__p[0]) >> 1 > v54)
        v54 = v55 >> 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v54;
      if (v47)
      {
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v165, v47);
        v52 = (char *)__p[0];
        v51 = (char *)__p[1];
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[4 * v53];
      v58 = &v56[4 * v47];
      *(_DWORD *)v57 = v50;
      v48 = v57 + 4;
      while (v51 != v52)
      {
        v59 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v57 - 1) = v59;
        v57 -= 4;
      }
      __p[0] = v57;
      __p[1] = v48;
      v165[0] = v58;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_DWORD *)__p[1] = EmbeddingDim;
      v48 = v51 + 4;
    }
    __p[1] = v48;
  }
  v60 = (char *)__p[0];
  v61 = v48 - 4;
  if (__p[0] != v48 && v61 > __p[0])
  {
    v63 = (char *)__p[0] + 4;
    do
    {
      v64 = *((_DWORD *)v63 - 1);
      *((_DWORD *)v63 - 1) = *(_DWORD *)v61;
      *(_DWORD *)v61 = v64;
      v61 -= 4;
      v65 = v63 >= v61;
      v63 += 4;
    }
    while (!v65);
  }
  for (; v60 != v48; v60 += 4)
  {
    v66 = *(_QWORD *)(a1 + 24);
    v67 = *(_DWORD *)v60;
    v68 = COERCE_DOUBLE(operator new(4uLL));
    *(double *)&v166 = v68;
    **(_DWORD **)&v68 = v67;
    v167.i64[0] = *(_QWORD *)&v68 + 4;
    v167.i64[1] = *(_QWORD *)&v68 + 4;
    kaldi::quasar::CELabelEncoderNet::EncodeBatch(v66, (_QWORD *)(a1 + 120), (int **)&v166, a1 + 120, (_QWORD *)(a1 + 176));
    if (*(double *)&v166 != 0.0)
    {
      v167.i64[0] = (uint64_t)v166;
      operator delete(v166);
    }
  }
  *(double *)(a1 + 592) = *(double *)(a1 + 592) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v47) - v159;
  if (*(float *)(a1 + 72) != 0.0)
  {
    v69 = *(_QWORD *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
    v70 = kaldi::quasar::CEJointPredictorNet::InputDim(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32));
    v71 = COERCE_DOUBLE(operator new(0x10uLL));
    v167.i64[0] = *(_QWORD *)&v71 + 16;
    v167.i64[1] = *(_QWORD *)&v71 + 16;
    **(_QWORD **)&v71 = 1;
    *(_QWORD *)(*(_QWORD *)&v71 + 8) = v70;
    *(double *)&v166 = v71;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v69 + 56))(v170, v69, &v166);
    if (*(double *)&v166 != 0.0)
    {
      v167.i64[0] = (uint64_t)v166;
      operator delete(v166);
    }
    Trie = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::ComputeEngineItf::CreateConcat(*Trie, (uint64_t **)(a1 + 176), 0);
    v157 = 0;
    LOBYTE(v168) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v166, v73);
    v169 = 0;
    kaldi::quasar::CEJointPredictorNet::Predict(*(_QWORD *)(a1 + 32), v170, &v158, &v157);
    *(double *)(a1 + 608) = *(double *)(a1 + 608) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v74) - *(double *)&v166;
    MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
    kaldi::quasar::ComputeEngineItf::CreateSplitMove(*MultiChainMultiAudioBuffer, &v157, v155);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 200));
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v155;
    *(_QWORD *)(a1 + 216) = v156;
    v155[1] = 0;
    v156 = 0;
    v155[0] = 0;
    v153[0] = v155;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v153);
    v76 = v157;
    v157 = 0;
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    v77 = v158;
    v158 = 0;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
    v78 = v170[0];
    v170[0] = 0;
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  }
  v79 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
  if (v79 && *(float *)(a1 + 68) != 0.0)
  {
    v80 = *(char **)(a1 + 144);
    v81 = *(char **)(a1 + 152);
    if (v81 != v80)
    {
      do
      {
        v81 -= 24;
        v166 = v81;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
      }
      while (v81 != v80);
      v79 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 152) = v80;
    kaldi::quasar::CELabelEncoderNet::InitialStates(v79, v155);
    v82 = (uint64_t *)v155[0];
    for (j = (uint64_t *)v155[1]; v82 != j; ++v82)
    {
      v153[0] = 0;
      v153[1] = 0;
      v154[0] = 0;
      v169 = v154;
      v84 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v154, 1uLL);
      v86 = &v84[v85];
      v168 = v86;
      v87 = *v82;
      *v82 = 0;
      *v84 = v87;
      v88 = v84 + 1;
      v167.i64[1] = (uint64_t)(v84 + 1);
      v90 = v153[0];
      v89 = v153[1];
      if (v153[1] == v153[0])
      {
        v92 = vdupq_n_s64((unint64_t)v153[1]);
      }
      else
      {
        do
        {
          v91 = *--v89;
          *v89 = 0;
          *--v84 = v91;
        }
        while (v89 != v90);
        v92 = *(int64x2_t *)v153;
        v88 = (void *)v167.i64[1];
        v86 = v168;
      }
      v153[0] = v84;
      v153[1] = v88;
      v167 = v92;
      v93 = (_QWORD *)v154[0];
      v154[0] = v86;
      v168 = v93;
      v166 = (void *)v92.i64[0];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v166);
      v153[1] = v88;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((uint64_t *)(a1 + 144), (uint64_t)v153);
      *(double *)&v166 = COERCE_DOUBLE(v153);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
    }
    *(double *)&v166 = COERCE_DOUBLE(v155);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
    LOBYTE(v168) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v166, v94);
    v169 = 0;
    v155[0] = 0;
    v155[1] = 0;
    v156 = 0;
    v95 = kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
    if (v95 == kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)))
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v155, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      v97 = (char *)v155[1];
    }
    else
    {
      v98 = (_DWORD *)a2[1];
      do
      {
        if (v98 == (_DWORD *)*a2)
          break;
        v99 = *--v98;
        v100 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
        v101 = (char *)v155[1];
        if (v99 != v100)
        {
          if (v155[1] >= v156)
          {
            v103 = (char *)v155[0];
            v104 = ((char *)v155[1] - (char *)v155[0]) >> 2;
            v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v106 = v156 - (char *)v155[0];
            if ((v156 - (char *)v155[0]) >> 1 > v105)
              v105 = v106 >> 1;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
              v107 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107)
            {
              v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v107);
              v103 = (char *)v155[0];
              v101 = (char *)v155[1];
            }
            else
            {
              v108 = 0;
            }
            v109 = &v108[4 * v104];
            *(_DWORD *)v109 = *v98;
            v102 = v109 + 4;
            while (v101 != v103)
            {
              v110 = *((_DWORD *)v101 - 1);
              v101 -= 4;
              *((_DWORD *)v109 - 1) = v110;
              v109 -= 4;
            }
            v155[0] = v109;
            v155[1] = v102;
            v156 = &v108[4 * v107];
            if (v103)
              operator delete(v103);
          }
          else
          {
            *(_DWORD *)v155[1] = *v98;
            v102 = v101 + 4;
          }
          v155[1] = v102;
          v101 = v102;
        }
        v111 = v155[0];
      }
      while ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)) != (v101 - v111) >> 2);
      v113 = v155[0];
      v112 = v155[1];
      if ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)) == (v112 - v113) >> 2)
      {
        v97 = (char *)v155[1];
      }
      else
      {
        v114 = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 56));
        v115 = v114;
        v116 = (char *)v155[1];
        if (v155[1] >= v156)
        {
          v117 = (char *)v155[0];
          v118 = ((char *)v155[1] - (char *)v155[0]) >> 2;
          v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v120 = v156 - (char *)v155[0];
          if ((v156 - (char *)v155[0]) >> 1 > v119)
            v119 = v120 >> 1;
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v119;
          if (v96)
          {
            v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v96);
            v117 = (char *)v155[0];
            v116 = (char *)v155[1];
          }
          else
          {
            v121 = 0;
          }
          v122 = &v121[4 * v118];
          v123 = &v121[4 * v96];
          *(_DWORD *)v122 = v115;
          v97 = v122 + 4;
          while (v116 != v117)
          {
            v124 = *((_DWORD *)v116 - 1);
            v116 -= 4;
            *((_DWORD *)v122 - 1) = v124;
            v122 -= 4;
          }
          v155[0] = v122;
          v155[1] = v97;
          v156 = v123;
          if (v117)
            operator delete(v117);
        }
        else
        {
          *(_DWORD *)v155[1] = v114;
          v97 = v116 + 4;
        }
        v155[1] = v97;
      }
      v125 = v97 - 4;
      if (v155[0] != v97 && v125 > v155[0])
      {
        v127 = (char *)v155[0] + 4;
        do
        {
          v128 = *((_DWORD *)v127 - 1);
          *((_DWORD *)v127 - 1) = *(_DWORD *)v125;
          *(_DWORD *)v125 = v128;
          v125 -= 4;
          v65 = v127 >= v125;
          v127 += 4;
        }
        while (!v65);
      }
    }
    for (k = (char *)v155[0]; k != v97; k += 4)
    {
      v130 = *(_QWORD *)(a1 + 56);
      v131 = *(_DWORD *)k;
      v132 = operator new(4uLL);
      v153[0] = v132;
      *v132 = v131;
      v153[1] = v132 + 1;
      v154[0] = v132 + 1;
      kaldi::quasar::CELabelEncoderNet::EncodeBatch(v130, (_QWORD *)(a1 + 144), (int **)v153, a1 + 144, (_QWORD *)(a1 + 224));
      if (v153[0])
      {
        v153[1] = v153[0];
        operator delete(v153[0]);
      }
    }
    *(double *)(a1 + 616) = *(double *)(a1 + 616)
                          + kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v96)
                          - *(double *)&v166;
    if (v155[0])
    {
      v155[1] = v155[0];
      operator delete(v155[0]);
    }
  }
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 360);
  v133 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
  v134 = v133;
  v135 = *(char **)(a1 + 368);
  v136 = *(_QWORD *)(a1 + 376);
  if ((unint64_t)v135 >= v136)
  {
    v138 = *(char **)(a1 + 360);
    v139 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v138) >> 2);
    v140 = v139 + 1;
    if (v139 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - (_QWORD)v138) >> 2);
    if (2 * v141 > v140)
      v140 = 2 * v141;
    if (v141 >= 0xAAAAAAAAAAAAAAALL)
      v142 = 0x1555555555555555;
    else
      v142 = v140;
    if (v142)
    {
      v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a1 + 376, v142);
      v138 = *(char **)(a1 + 360);
      v135 = *(char **)(a1 + 368);
    }
    else
    {
      v143 = 0;
    }
    v144 = &v143[12 * v139];
    v145 = &v143[12 * v142];
    *(_DWORD *)v144 = 0;
    *((_DWORD *)v144 + 1) = v134;
    *((_DWORD *)v144 + 2) = 0;
    v137 = v144 + 12;
    if (v135 != v138)
    {
      do
      {
        v146 = *(_QWORD *)(v135 - 12);
        v135 -= 12;
        v147 = *((_DWORD *)v135 + 2);
        *(_QWORD *)(v144 - 12) = v146;
        v144 -= 12;
        *((_DWORD *)v144 + 2) = v147;
      }
      while (v135 != v138);
      v138 = *(char **)(a1 + 360);
    }
    *(_QWORD *)(a1 + 360) = v144;
    *(_QWORD *)(a1 + 368) = v137;
    *(_QWORD *)(a1 + 376) = v145;
    if (v138)
      operator delete(v138);
  }
  else
  {
    *(_DWORD *)v135 = 0;
    *((_DWORD *)v135 + 1) = v133;
    v137 = v135 + 12;
    *((_DWORD *)v135 + 2) = 0;
  }
  *(_QWORD *)(a1 + 368) = v137;
  std::__tree<int>::destroy(a1 + 384, *(_QWORD **)(a1 + 392));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  std::__tree<int>::destroy(a1 + 408, *(_QWORD **)(a1 + 416));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_DWORD *)(a1 + 512) += kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a1);
  *(_DWORD *)(a1 + 516) += *(_DWORD *)(a1 + 536);
  v148 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a1 + 520) += v148;
  v149 = *(_QWORD *)(a1 + 552);
  v150 = *(_QWORD *)(a1 + 560);
  if (v149 != v150)
  {
    if (v148 <= 0)
      v151 = *(_DWORD *)(v150 - 4) + *(_DWORD *)(a1 + 524);
    else
      v151 = *(_DWORD *)(v150 - 4);
    *(_DWORD *)(a1 + 524) = v151;
  }
  *(_DWORD *)(a1 + 504) = 0;
  v152 = *(_QWORD *)(a1 + 168);
  if (v152)
  {
    LODWORD(v152) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 160))(v152, 0);
    v149 = *(_QWORD *)(a1 + 552);
  }
  *(_DWORD *)(a1 + 528) = v152;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = v149;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADB56D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  int v2;
  int v4;

  if (*((_BYTE *)this + 576))
  {
    v2 = *((_DWORD *)this + 134);
    if (*((_DWORD *)this + 132) == v2)
      return (*((_DWORD *)this + 127) - *((_DWORD *)this + 128));
  }
  else
  {
    v2 = *((_DWORD *)this + 134);
  }
  v4 = kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
  return kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                         + 2))
       + v4 * v2;
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::OutputDim(kaldi::quasar::CEJointPredictorNet **this)
{
  return kaldi::quasar::CEJointPredictorNet::OutputDim(this[4]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::BOSIndex(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getEmbeddingDim(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EOSIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::EOSIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::SilIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::SilIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::BlankIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::BlankIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::MaxSteps(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return ((int)(float)((float)(*((float *)this + 16) + 1.0) * (float)*((int *)this + 132)) + 1);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EndPointed(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned __int8 *)this + 577);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumTotalEncodedFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned int *)this + 133);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::FrameSubsamplingFactor(kaldi::quasar::CEAcousticEncoderNet **this)
{
  return kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(this[2]);
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((_DWORD *)v3 + 7);
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((_DWORD *)v7 + 7);
  if (v6 < v9 || v9 >= v6 && v5 < *((_DWORD *)v7 + 8))
    return v2;
  return v7;
}

char *std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v10, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__find_equal<std::pair<int,int>>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1ADB57218(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm_ext::IterateTrie(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::vector<unsigned int> __p;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::vector<unsigned int>::vector(&__p, a2 + 2, &Vocab_None);
  v12 = 0;
  v5 = operator new(0x20uLL);
  *v5 = &off_1E5D3E640;
  v5[1] = &__p;
  v5[2] = a3;
  v5[3] = v11;
  v14 = v5;
  std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::swap[abi:ne180100](v13, v11);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()((uint64_t)v11, a1, 0, -1, 0);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADB57354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t quasar::lm::srilm_ext::GetUnigramContextTrie(_DWORD **a1, unsigned int a2)
{
  char v3;
  unsigned int v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4[0] = a2;
  v4[1] = -1;
  v3 = 0;
  return Trie<unsigned int,BOnode>::findTrie(a1, v4, &v3);
}

void std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3E640;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E640;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(_QWORD *a1, uint64_t *a2, unsigned int *a3, int *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int i;
  uint64_t v12;
  int v14;
  _BYTE v15[32];

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = (_QWORD *)a1[1];
  *(_DWORD *)(*v10 + 4 * v7) = v8;
  std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(a1[2], v6, v7, (uint64_t)v10, v9);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(v15, v6, 0);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::init((uint64_t)v15);
  v14 = -1;
  for (i = v7 + 1;
        ;
        std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(a1[3], v12, i, v14, v6))
  {
    v12 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v15, &v14);
    if (!v12)
      break;
  }
  return LHashIter<unsigned int,double>::~LHashIter((uint64_t)v15);
}

void sub_1ADB57588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

uint64_t std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = a2;
  v8 = a3;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9, &v8, a4, &v7);
}

_QWORD *std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADB57798(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1ADB57B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::ContextualData>::operator=[abi:ne180100]<quasar::ContextualData,std::default_delete<quasar::ContextualData>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46038;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1ADB5804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  quasar::ContextualData::NamedEntity::~NamedEntity(&a9);

  _Unwind_Resume(a1);
}

void sub_1ADB580EC()
{
  void *v0;

  JUMPOUT(0x1ADB580D8);
}

void sub_1ADB580F8()
{
  void *v0;

  JUMPOUT(0x1ADB580DCLL);
}

void quasar::ContextualData::NamedEntity::~NamedEntity(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_1ADB582DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1ADB585F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADB587E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1ADB589C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADB58AD0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  void *v25;
  id v28;

  std::unique_ptr<quasar::PTree>::reset[abi:ne180100]((quasar::PTree **)&a9, 0);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Internal C++ exception: %s", 26);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Internal unknown exception", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  }
  v28 = v25;
  __cxa_end_catch();
  JUMPOUT(0x1ADB58AB4);
}

void sub_1ADB58BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::ContextualData>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::ContextualData::~ContextualData(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::ContextualData::~ContextualData(void **this)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 40));
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)(this + 33), this[34]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 27));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 14));
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)(this + 9));
  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table((uint64_t)(this + 4));
  v2 = this[3];
  this[3] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_pointer<quasar::ContextualData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void **std::__shared_ptr_pointer<quasar::ContextualData  *>::__on_zero_shared(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    quasar::ContextualData::~ContextualData(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ContextualData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void kaldi::TransitionModel::ComputeDerived(std::vector<unsigned int> *this)
{
  std::vector<unsigned int> *v2;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  signed int v14;
  int v15;
  _QWORD *v16;
  BOOL v17;
  std::vector<unsigned int>::pointer v18;
  std::vector<unsigned int>::pointer v19;
  int v20;
  std::vector<unsigned int>::pointer v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 IsSelfLoop;
  uint64_t v26;
  std::vector<unsigned int>::pointer v27;
  unint64_t v28;
  std::vector<unsigned int>::pointer v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;

  v2 = this + 5;
  std::vector<int>::resize(this + 5, (((char *)this[3].__end_ - (char *)this[3].__begin_) >> 4) + 2);
  LODWORD(this[10].__begin_) = 0;
  begin = this[3].__begin_;
  end = this[3].__end_;
  v5 = ((char *)end - (char *)begin) >> 4;
  if (v5 <= 0x7FFFFFFE)
  {
    v7 = 0;
    v8 = 1;
    v6 = 1;
    do
    {
      v2->__begin_[v8] = v6;
      if (v5 >= v8)
      {
        v9 = &begin[v7];
        v10 = begin[v7];
        v11 = (int)begin[v7 + 1];
        v13 = begin[v7 + 2];
        v12 = v9[3];
        if (SLODWORD(this[10].__begin_) <= (signed int)(v13 + 1))
          v14 = v13 + 1;
        else
          v14 = (signed int)this[10].__begin_;
        if (v14 <= (int)(v12 + 1))
          v15 = v12 + 1;
        else
          v15 = v14;
        LODWORD(this[10].__begin_) = v15;
        v16 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone((kaldi::HmmTopology *)this, v10);
        v6 += (*(_QWORD *)(*v16 + 32 * v11 + 16) - *(_QWORD *)(*v16 + 32 * v11 + 8)) >> 3;
        begin = this[3].__begin_;
        end = this[3].__end_;
      }
      v17 = v8++ < ((((char *)end - (char *)begin) << 28) + 0x100000000) >> 32;
      v5 = ((char *)end - (char *)begin) >> 4;
      v7 += 4;
    }
    while (v17);
  }
  else
  {
    v6 = 1;
  }
  std::vector<int>::resize(this + 6, v6);
  std::vector<int>::resize(this + 7, v6);
  v18 = this[3].__begin_;
  v19 = this[3].__end_;
  if ((int)((unint64_t)((char *)v19 - (char *)v18) >> 4) < 1)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    v21 = v2->__begin_;
    v22 = 1;
    do
    {
      v23 = v22;
      v24 = (int)v21[v22++];
      if ((int)v24 < (int)v21[v22])
      {
        do
        {
          this[6].__begin_[v24] = v23;
          if (v20 <= (int)v24)
            v20 = v24;
          IsSelfLoop = kaldi::TransitionModel::IsSelfLoop((kaldi::TransitionModel *)this, v24);
          v18 = this[3].__begin_;
          if (IsSelfLoop)
            v26 = 3;
          else
            v26 = 2;
          this[7].__begin_[v24++] = v18[4 * v23 - 4 + v26];
          v21 = this[5].__begin_;
        }
        while (v24 < (int)v21[v22]);
        v19 = this[3].__end_;
      }
    }
    while (v23 < (int)((unint64_t)((char *)v19 - (char *)v18) >> 4));
  }
  std::vector<int>::resize(this + 4, v20 + 1);
  v27 = this[3].__begin_;
  v28 = (unint64_t)((char *)this[3].__end_ - (char *)v27) >> 4;
  if ((int)v28 >= 1)
  {
    v29 = v2->__begin_;
    v30 = (v28 + 1);
    v31 = 1;
    do
    {
      v32 = v31 + 1;
      v33 = (int)v29[v31 + 1];
      v34 = (int)v29[v31];
      if ((int)v34 < (int)v33)
      {
        v35 = &v27[4 * v31 - 2];
        v36 = &this[4].__begin_[v34];
        v37 = v33 - v34;
        do
        {
          *v36++ = *v35;
          --v37;
        }
        while (v37);
      }
      v31 = v32;
    }
    while (v32 != v30);
  }
}

BOOL kaldi::TransitionModel::IsSelfLoop(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(int *)(*((_QWORD *)this + 18) + 4 * a2);
  v3 = a2 - (uint64_t)*(int *)(*((_QWORD *)this + 15) + 4 * v2);
  v4 = *((_QWORD *)this + 9) + 16 * v2;
  v5 = *(int *)(v4 - 12);
  v6 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  v7 = *(_QWORD *)(*v6 + 32 * v5 + 8);
  return v3 < (*(_QWORD *)(*v6 + 32 * v5 + 16) - v7) >> 3 && *(_DWORD *)(v7 + 8 * v3) == (_DWORD)v5;
}

void kaldi::TransitionModel::ComputeDerivedOfProbs(void **this)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  float v6;
  _QWORD v8[34];

  kaldi::Vector<float>::Resize(this + 27, ((unint64_t)((_BYTE *)this[10] - (_BYTE *)this[9]) >> 4) + 1, 0);
  if ((int)((unint64_t)((_BYTE *)this[10] - (_BYTE *)this[9]) >> 4) >= 1)
  {
    v2 = 1;
    do
    {
      v3 = kaldi::TransitionModel::SelfLoopOf((kaldi::TransitionModel *)this, v2);
      if (v3)
      {
        v4 = expf(*((float *)this[24] + v3));
        if ((float)(1.0 - v4) <= 0.0)
        {
          v5 = 1.0e-10;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ComputeDerivedOfProbs(): non-self-loop prob is ", 47);
            std::ostream::operator<<();
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
            v5 = 1.0e-10;
          }
        }
        else
        {
          v5 = 1.0 - v4;
        }
        v6 = logf(v5);
      }
      else
      {
        v6 = 0.0;
      }
      *((float *)this[27] + v2) = v6;
    }
    while (v2++ < (int)((unint64_t)((_BYTE *)this[10] - (_BYTE *)this[9]) >> 4));
  }
}

void sub_1ADB5920C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

kaldi::TransitionModel *kaldi::TransitionModel::Check(kaldi::TransitionModel *this)
{
  kaldi::TransitionModel *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;

  v1 = this;
  v2 = *((_QWORD *)this + 18);
  v3 = (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4;
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = *((_QWORD *)this + 15);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (v3 + 1) - 1;
    v9 = v6 + 8;
    do
    {
      v10 = *(_DWORD *)(v9 + 4 * v4);
      v5 = v10 + v5 - v7;
      ++v4;
      v7 = v10;
    }
    while (v8 != v4);
  }
  if ((int)(((unint64_t)(*((_QWORD *)this + 19) - v2) >> 2) - 1) >= 1)
  {
    v11 = 1;
    do
    {
      v12 = (int *)(*((_QWORD *)v1 + 9) + 16 * (*(_DWORD *)(v2 + 4 * v11) - 1));
      this = (kaldi::TransitionModel *)kaldi::TransitionModel::TupleToTransitionState(v1, *v12, v12[1], v12[2], v12[3]);
      v2 = *((_QWORD *)v1 + 18);
    }
    while (v11++ < (((*((_QWORD *)v1 + 19) - v2) << 30) - 0x100000000) >> 32);
  }
  return this;
}

uint64_t kaldi::TransitionModel::TransitionIdToTransitionState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 18) + 4 * a2);
}

uint64_t kaldi::TransitionModel::TransitionIdToTransitionIndex(kaldi::TransitionModel *this, int a2)
{
  return (a2 - *(_DWORD *)(*((_QWORD *)this + 15) + 4 * *(int *)(*((_QWORD *)this + 18) + 4 * a2)));
}

uint64_t kaldi::TransitionModel::PairToTransitionId(kaldi::TransitionModel *this, int a2, int a3)
{
  return (*(_DWORD *)(*((_QWORD *)this + 15) + 4 * a2) + a3);
}

uint64_t kaldi::TransitionModel::TransitionStateToPhone(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 9) + 16 * (a2 - 1));
}

uint64_t kaldi::TransitionModel::TransitionStateToHmmState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 9) + 16 * a2 - 12);
}

uint64_t kaldi::TransitionModel::TransitionStateToForwardPdf(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 9) + 16 * a2 - 8);
}

uint64_t kaldi::TransitionModel::TupleToTransitionState(kaldi::TransitionModel *this, int a2, int a3, int a4, int a5)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  int v11;
  int v12;
  _QWORD *v14;
  _QWORD v15[34];

  v5 = (char *)*((_QWORD *)this + 9);
  v6 = (char *)*((_QWORD *)this + 10);
  if (v6 == v5)
  {
    v8 = (char *)*((_QWORD *)this + 10);
  }
  else
  {
    v7 = (v6 - v5) >> 4;
    v8 = (char *)*((_QWORD *)this + 9);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[16 * (v7 >> 1)];
      if (*(_DWORD *)v10 < a2
        || *(_DWORD *)v10 <= a2
        && ((v11 = *(_DWORD *)&v8[16 * v9 + 4], v11 < a3)
         || v11 <= a3
         && ((v12 = *(_DWORD *)&v8[16 * v9 + 8], v12 < a4) || v12 <= a4 && *(_DWORD *)&v8[16 * v9 + 12] < a5)))
      {
        v9 = v7 + ~v9;
        v8 = v10 + 16;
      }
      v7 = v9;
    }
    while (v9);
  }
  if (v6 == v8
    || *(_DWORD *)v8 != a2
    || *((_DWORD *)v8 + 1) != a3
    || *((_DWORD *)v8 + 2) != a4
    || *((_DWORD *)v8 + 3) != a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"TransitionModel::TupleToTransitionState, tuple not found.", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (incompatible tree and model?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return ((unint64_t)(v8 - v5) >> 4) + 1;
}

uint64_t kaldi::TransitionModel::TransitionStateToForwardPdfClass(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 9) + 16 * a2;
  return *(unsigned int *)(*(_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v2 - 16))
                         + 32 * *(int *)(v2 - 12));
}

uint64_t kaldi::TransitionModel::TransitionStateToSelfLoopPdfClass(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 9) + 16 * a2;
  return *(unsigned int *)(*(_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v2 - 16))
                         + 32 * *(int *)(v2 - 12)
                         + 4);
}

BOOL kaldi::TransitionModel::IsFinal(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(int *)(*((_QWORD *)this + 18) + 4 * a2);
  v3 = a2 - *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v2);
  v4 = *((_QWORD *)this + 9) + 16 * v2;
  v5 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  return *(_DWORD *)(*(_QWORD *)(*v5 + 32 * *(int *)(v4 - 12) + 8) + 8 * v3) + 1 == ((v5[1] - *v5) >> 5);
}

uint64_t kaldi::TransitionModel::SelfLoopOf(kaldi::TransitionModel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *((_QWORD *)this + 9) + 16 * a2;
  v5 = *(int *)(v4 - 12);
  v6 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  v7 = *(int **)(*v6 + 32 * v5 + 8);
  v8 = (*(_QWORD *)(*v6 + 32 * v5 + 16) - (_QWORD)v7) >> 3;
  if ((int)v8 < 1)
    return 0;
  v9 = 0;
  v10 = -(uint64_t)v8;
  while (1)
  {
    v11 = *v7;
    v7 += 2;
    if (v11 == (_DWORD)v5)
      break;
    if (v10 == --v9)
      return 0;
  }
  return (*(_DWORD *)(*((_QWORD *)this + 15) + 4 * a2) - v9);
}

float kaldi::TransitionModel::GetTransitionLogProb(kaldi::TransitionModel *this, int a2)
{
  return *(float *)(*((_QWORD *)this + 24) + 4 * a2);
}

void kaldi::TransitionModel::Read(std::vector<int> *a1, uint64_t *a2, uint64_t a3, int a4)
{
  std::vector<int> *v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 *p_p;
  uint64_t v12;
  int v13;
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  kaldi::ExpectToken(a2, a3, "<TransitionModel>");
  kaldi::HmmTopology::Read(a1, a2, a3);
  __p = 0;
  v17 = 0;
  v18 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  v15 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v15);
  v8 = a1 + 3;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize((uint64_t)&a1[3], v15);
  if (v15 >= 1)
  {
    v9 = 0;
    for (i = 0; i < v15; ++i)
    {
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9]);
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 1]);
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 2]);
      if (SHIBYTE(v18) < 0)
      {
        if (v17 == 8 && *(_QWORD *)__p == 0x3E73656C7075543CLL)
        {
LABEL_18:
          kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 3]);
          goto LABEL_19;
        }
        if (v17 == 9)
        {
          p_p = (unsigned __int8 *)__p;
LABEL_11:
          v12 = *(_QWORD *)p_p;
          v13 = p_p[8];
          if (v12 == 0x73656C706972543CLL && v13 == 62)
            v8->__begin_[v9 + 3] = v8->__begin_[v9 + 2];
        }
      }
      else if (HIBYTE(v18) == 8)
      {
        if (__p == (void *)0x3E73656C7075543CLL)
          goto LABEL_18;
      }
      else if (HIBYTE(v18) == 9)
      {
        p_p = (unsigned __int8 *)&__p;
        goto LABEL_11;
      }
LABEL_19:
      v9 += 4;
    }
  }
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  kaldi::TransitionModel::ComputeDerived((std::vector<unsigned int> *)a1);
  if (a4)
  {
    kaldi::Vector<float>::Resize((void **)&a1[8].__begin_, (unint64_t)((char *)a1[6].__end_ - (char *)a1[6].__begin_) >> 2, 0);
  }
  else
  {
    kaldi::ExpectToken(a2, a3, "<LogProbs>");
    kaldi::Vector<float>::Read((uint64_t)&a1[8], a2, a3, 0);
    kaldi::ExpectToken(a2, a3, "</LogProbs>");
    kaldi::ExpectToken(a2, a3, "</TransitionModel>");
    kaldi::TransitionModel::ComputeDerivedOfProbs((void **)&a1->__begin_);
  }
  kaldi::TransitionModel::Check((kaldi::TransitionModel *)a1);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
}

void sub_1ADB598B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::TransitionModel::GetNonSelfLoopLogProb(kaldi::TransitionModel *this, int a2)
{
  return *(float *)(*((_QWORD *)this + 27) + 4 * a2);
}

float kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(kaldi::TransitionModel *this, int a2)
{
  kaldi::TransitionModel::IsSelfLoop(this, a2);
  return *(float *)(*((_QWORD *)this + 24) + 4 * a2)
       - *(float *)(*((_QWORD *)this + 27) + 4 * *(int *)(*((_QWORD *)this + 18) + 4 * a2));
}

uint64_t kaldi::TransitionModel::TransitionIdToPhone(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 9) + 16 * *(int *)(*((_QWORD *)this + 18) + 4 * a2) - 16);
}

uint64_t kaldi::TransitionModel::TransitionIdToHmmState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 9) + 16 * *(int *)(*((_QWORD *)this + 18) + 4 * a2) - 12);
}

BOOL kaldi::GetPdfsForPhones(uint64_t a1, _QWORD *a2, int **a3)
{
  int *v6;
  int *v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  _DWORD *v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  int v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int *v56;
  unint64_t v57;
  unint64_t v58;
  int *v59;
  int *v60;
  int v61;
  int v62;
  int *v63;
  unint64_t v64;
  unint64_t v65;
  int *v66;
  int *v67;
  int v68;
  int v69;
  _DWORD *v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  _DWORD *v74;
  int v75;

  v6 = (int *)a2[1];
  if ((int *)*a2 != v6)
  {
    v7 = (int *)(*a2 + 4);
    do
    {
      if (v7 == v6)
        break;
      v9 = *(v7 - 1);
      v8 = *v7++;
    }
    while (v8 > v9);
  }
  v10 = *a3;
  a3[1] = *a3;
  v12 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  if ((int)((unint64_t)(v11 - v12) >> 4) >= 1)
  {
    v13 = a3 + 2;
    v14 = 1;
    do
    {
      v15 = (_DWORD *)*a2;
      v16 = (_DWORD *)a2[1];
      if (v16 != (_DWORD *)*a2)
      {
        v17 = v14 - 1;
        v18 = *(_DWORD *)(v12 + 16 * (v14 - 1));
        v19 = ((uint64_t)v16 - *a2) >> 2;
        do
        {
          v20 = v19 >> 1;
          v21 = &v15[v19 >> 1];
          v23 = *v21;
          v22 = v21 + 1;
          v19 += ~(v19 >> 1);
          if (v23 < v18)
            v15 = v22;
          else
            v19 = v20;
        }
        while (v19);
        if (v15 != v16 && v18 >= *v15)
        {
          v24 = *(_DWORD *)(v12 + 16 * v17 + 8);
          v25 = *v13;
          if (v10 >= *v13)
          {
            v27 = *a3;
            v28 = v10 - *a3;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              goto LABEL_80;
            v30 = (char *)v25 - (char *)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v31);
              v27 = *a3;
              v10 = a3[1];
            }
            else
            {
              v32 = 0;
            }
            v33 = (int *)&v32[4 * v28];
            *v33 = v24;
            v26 = v33 + 1;
            while (v10 != v27)
            {
              v34 = *--v10;
              *--v33 = v34;
            }
            v25 = (int *)&v32[4 * v31];
            *a3 = v33;
            a3[1] = v26;
            a3[2] = v25;
            if (v27)
            {
              operator delete(v27);
              v25 = *v13;
            }
          }
          else
          {
            *v10 = v24;
            v26 = v10 + 1;
          }
          a3[1] = v26;
          v35 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 16 * v17 + 12);
          if (v26 >= v25)
          {
            v36 = *a3;
            v37 = v26 - *a3;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
LABEL_80:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = (char *)v25 - (char *)v36;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v40);
              v36 = *a3;
              v26 = a3[1];
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v35;
            v10 = (int *)(v42 + 4);
            while (v26 != v36)
            {
              v43 = *--v26;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *a3 = (int *)v42;
            a3[1] = v10;
            a3[2] = (int *)&v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v26 = v35;
            v10 = v26 + 1;
          }
          a3[1] = v10;
          v12 = *(_QWORD *)(a1 + 72);
          v11 = *(_QWORD *)(a1 + 80);
        }
      }
    }
    while (v14++ < (int)((unint64_t)(v11 - v12) >> 4));
  }
  std::__sort<std::__less<int,int> &,int *>();
  v45 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*a3, a3[1]);
  if (a3[1] != v45)
    a3[1] = v45;
  v46 = *(_QWORD *)(a1 + 72);
  v47 = *(_QWORD *)(a1 + 80) - v46;
  v48 = (unint64_t)v47 >> 4;
  if ((int)((unint64_t)v47 >> 4) < 1)
  {
    return 1;
  }
  else
  {
    v49 = 0;
    v50 = (_DWORD *)a2[1];
    v51 = (int)(v47 >> 4);
    v52 = (v48 + 1);
    v53 = 1;
    do
    {
      if (v45 != *a3)
      {
        v54 = v53 - 1;
        v55 = *(_DWORD *)(v46 + 16 * (v53 - 1) + 8);
        v56 = *a3;
        v57 = v45 - *a3;
        do
        {
          v58 = v57 >> 1;
          v59 = &v56[v57 >> 1];
          v61 = *v59;
          v60 = v59 + 1;
          v57 += ~(v57 >> 1);
          if (v61 < v55)
            v56 = v60;
          else
            v57 = v58;
        }
        while (v57);
        if (v56 != v45 && v55 >= *v56)
          goto LABEL_68;
        v62 = *(_DWORD *)(v46 + 16 * v54 + 12);
        v63 = *a3;
        v64 = v45 - *a3;
        do
        {
          v65 = v64 >> 1;
          v66 = &v63[v64 >> 1];
          v68 = *v66;
          v67 = v66 + 1;
          v64 += ~(v64 >> 1);
          if (v68 < v62)
            v63 = v67;
          else
            v64 = v65;
        }
        while (v64);
        if (v63 != v45 && v62 >= *v63)
        {
LABEL_68:
          if (v50 == (_DWORD *)*a2)
            break;
          v69 = *(_DWORD *)(v46 + 16 * v54);
          v70 = (_DWORD *)*a2;
          v71 = ((uint64_t)v50 - *a2) >> 2;
          do
          {
            v72 = v71 >> 1;
            v73 = &v70[v71 >> 1];
            v75 = *v73;
            v74 = v73 + 1;
            v71 += ~(v71 >> 1);
            if (v75 < v69)
              v70 = v74;
            else
              v71 = v72;
          }
          while (v71);
          if (v70 == v50 || v69 < *v70)
            break;
        }
      }
      v49 = v53++ >= v51;
    }
    while (v53 != v52);
  }
  return v49;
}

BOOL kaldi::HmmTopology::operator==(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v6;
  const void *v7;
  const void *v9;
  size_t v10;
  const void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BOOL8 result;
  char v18;

  v4 = *(const void **)a1;
  v6 = *(_QWORD *)(a1 + 8) - (_QWORD)v4;
  v7 = *(const void **)a2;
  if (v6 != *(_QWORD *)(a2 + 8) - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = *(const void **)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32) - (_QWORD)v9;
  v11 = *(const void **)(a2 + 24);
  if (v10 != *(_QWORD *)(a2 + 32) - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v14 = a1 + 48;
  v12 = *(uint64_t **)(a1 + 48);
  v13 = *(uint64_t **)(v14 + 8);
  v16 = a2 + 48;
  v15 = *(uint64_t **)(a2 + 48);
  if ((char *)v13 - (char *)v12 != *(_QWORD *)(v16 + 8) - (_QWORD)v15)
    return 0;
  if (v12 == v13)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState>,std::vector<kaldi::HmmTopology::HmmState>>((uint64_t)&v18, v12, v15);
    if (!result)
      break;
    v12 += 3;
    v15 += 3;
  }
  while (v12 != v13);
  return result;
}

_QWORD *std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB59E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)(v4 + 8), *(uint64_t **)(v6 + 8), *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB59F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState>,std::vector<kaldi::HmmTopology::HmmState>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  if (v4 - *a2 != a3[1] - *a3)
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = kaldi::HmmTopology::HmmState::operator==(v3, v5);
    if (!result)
      break;
    v3 += 32;
    v5 += 32;
  }
  while (v3 != v4);
  return result;
}

BOOL kaldi::HmmTopology::HmmState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - v4)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = *(float *)(v3 + 4) == *(float *)(v4 + 4) && *(_DWORD *)v3 == *(_DWORD *)v4;
    v3 += 8;
    v4 += 8;
  }
  while (result && v3 != v2);
  return result;
}

void kaldi::quasar::GetKthNBest(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char **a6@<X8>)
{
  char *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = a6 + 2;
    v13 = a5;
    v14 = a4;
    do
    {
      v15 = *(_DWORD *)(*a1 + 4 * v13);
      if (v15 < 0 || v15 == a2)
        break;
      if ((unint64_t)v10 >= *v12)
      {
        v17 = *a6;
        v18 = (v10 - *a6) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = *v12 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v12, v21);
          v17 = *a6;
          v10 = a6[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v15;
        v16 = v23 + 4;
        while (v10 != v17)
        {
          v24 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a6 = v23;
        a6[1] = v16;
        a6[2] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v10 = v15;
        v16 = v10 + 4;
      }
      a6[1] = v16;
      v13 += v14;
      ++v11;
      v10 = v16;
    }
    while (v11 != a3);
  }
}

void sub_1ADB5A23C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *kaldi::quasar::TooManyTokensError::TooManyTokensError(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E5D336D8;
  return result;
}

void kaldi::quasar::TooManyTokensError::~TooManyTokensError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

std::runtime_error *kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E5D33DA8;
  return result;
}

void kaldi::quasar::TooManyForwardLinksError::~TooManyForwardLinksError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::LatticeFasterDecoder::LatticeFasterDecoder(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1AE146E50;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a2;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  *(_OWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1, 0x3E8uLL);
  return a1;
}

void sub_1ADB5A3A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;

  v5 = v4;
  v6 = v3;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v5);
  v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(v2);
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(v1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::~LatticeFasterDecoder(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 3);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v7 + 16) = v6;
      v6 = v7;
    }
    while (v5);
    *((_QWORD *)this + 6) = v7;
  }
  kaldi::LatticeFasterDecoder::ClearActiveTokens((uint64_t)this);
  if (*((_BYTE *)this + 160))
  {
    v8 = *((_QWORD *)this + 19);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 256);
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 16);
  if (v10)
  {
    *((_QWORD *)this + 17) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 13);
  if (v11)
  {
    *((_QWORD *)this + 14) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 10);
  if (v12)
  {
    *((_QWORD *)this + 11) = v12;
    operator delete(v12);
  }
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(this);
}

uint64_t kaldi::LatticeFasterDecoder::ClearActiveTokens(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v3 = *(_QWORD *)(this + 80);
  v2 = *(_QWORD *)(this + 88);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(this + 88);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 16 * v4);
      if (v5)
      {
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            do
            {
              v7 = *(_QWORD *)(v6 + 24);
              MEMORY[0x1AF44D190]();
              v6 = v7;
            }
            while (v7);
          }
          *(_QWORD *)(v5 + 8) = 0;
          v8 = *(_QWORD *)(v5 + 16);
          this = MEMORY[0x1AF44D190](v5, 0x1020C4023CB03E4);
          --*(_DWORD *)(v1 + 248);
          v5 = v8;
        }
        while (v8);
        v3 = *(_QWORD *)(v1 + 80);
        v2 = *(_QWORD *)(v1 + 88);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 4);
  }
  *(_QWORD *)(v1 + 88) = v3;
  return this;
}

void kaldi::LatticeFasterDecoder::InitDecoding(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  kaldi::LatticeFasterDecoder *v16;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 3);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v7 + 16) = v6;
      v6 = v7;
    }
    while (v5);
    *((_QWORD *)this + 6) = v7;
  }
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  kaldi::LatticeFasterDecoder::ClearActiveTokens((uint64_t)this);
  *((_WORD *)this + 126) = 0;
  *((_DWORD *)this + 62) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 32);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19));
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, 1uLL);
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  **((_QWORD **)this + 10) = v9;
  v10 = (unint64_t)v8 % *((_QWORD *)this + 2);
  v11 = (_QWORD *)(*((_QWORD *)this + 3) + 16 * v10);
  v12 = kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(this);
  *(_DWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v9;
  v13 = v11 + 1;
  v14 = v11[1];
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v12;
    *v13 = v12;
  }
  else
  {
    v15 = *((_QWORD *)this + 1);
    v16 = this;
    if (v15 != -1)
      v16 = (kaldi::LatticeFasterDecoder *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v15 + 8) + 16);
    *(_QWORD *)v16 = v12;
    *(_QWORD *)(v12 + 16) = 0;
    *v13 = v12;
    *v11 = v15;
    *((_QWORD *)this + 1) = v10;
  }
  ++*((_DWORD *)this + 62);
  kaldi::LatticeFasterDecoder::ProcessNonemitting(this);
}

void kaldi::LatticeFasterDecoder::ProcessNonemitting(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2;
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  float v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  float *v17;
  char *v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  kaldi::LatticeFasterDecoder *v24;
  uint64_t i;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  BOOL v49;
  _QWORD v50[3];
  _DWORD *v51;
  unint64_t v52;

  v2 = (*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4;
  v4 = (void **)((char *)this + 104);
  v3 = (char *)*((_QWORD *)this + 13);
  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = INFINITY;
LABEL_26:
    if (*((_BYTE *)this + 252))
      return;
    v18 = v3;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Error, no surviving tokens: frame is ", 37);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      v18 = (char *)*((_QWORD *)this + 13);
      v3 = (char *)*((_QWORD *)this + 14);
    }
    *((_BYTE *)this + 252) = 1;
    goto LABEL_30;
  }
  v6 = (_QWORD *)((char *)this + 120);
  v7 = INFINITY;
  do
  {
    if ((unint64_t)v3 >= *v6)
    {
      v8 = (char *)*v4;
      v9 = (v3 - (_BYTE *)*v4) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = *v6 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v12);
        v8 = (char *)*((_QWORD *)this + 13);
        v3 = (char *)*((_QWORD *)this + 14);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[4 * v9];
      *(_DWORD *)v14 = *(_DWORD *)v5;
      v15 = v14 + 4;
      while (v3 != v8)
      {
        v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v14 - 1) = v16;
        v14 -= 4;
      }
      *((_QWORD *)this + 13) = v14;
      *((_QWORD *)this + 14) = v15;
      *((_QWORD *)this + 15) = &v13[4 * v12];
      if (v8)
        operator delete(v8);
      v3 = v15;
    }
    else
    {
      *(_DWORD *)v3 = *(_DWORD *)v5;
      v3 += 4;
    }
    *((_QWORD *)this + 14) = v3;
    v17 = *(float **)(v5 + 8);
    v5 = *(_QWORD *)(v5 + 16);
    if (*v17 < v7)
      v7 = *v17;
  }
  while (v5);
  v18 = (char *)*v4;
  if (*v4 == v3)
    goto LABEL_26;
LABEL_30:
  if (v18 == v3)
    return;
  v19 = v7 + *((float *)this + 48);
  do
  {
    v21 = *((int *)v3 - 1);
    v3 -= 4;
    v20 = v21;
    *((_QWORD *)this + 14) = v3;
    v22 = *((_QWORD *)this + 3);
    v23 = *(_QWORD *)(v22 + 16 * (v21 % *((_QWORD *)this + 2)));
    v24 = this;
    if (v23 != -1)
      v24 = (kaldi::LatticeFasterDecoder *)(*(_QWORD *)(v22 + 16 * v23 + 8) + 16);
    for (i = *(_QWORD *)v24; *(_DWORD *)i != (_DWORD)v20; i = *(_QWORD *)(i + 16))
      ;
    v26 = *(_QWORD *)(i + 8);
    v27 = *(float *)v26;
    if (*(float *)v26 > v19)
      continue;
    v28 = *(_QWORD *)(v26 + 8);
    if (v28)
    {
      do
      {
        v29 = *(_QWORD *)(v28 + 24);
        MEMORY[0x1AF44D190]();
        v28 = v29;
      }
      while (v29);
    }
    *(_QWORD *)(v26 + 8) = 0;
    v30 = *((_QWORD *)this + 19);
    v52 = 0;
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v30 + 136))(v30, v20, v50);
    while (1)
    {
      if (!v50[0])
      {
        if (v52 >= v50[2])
          goto LABEL_72;
LABEL_46:
        v32 = v50[1] + 16 * v52;
        goto LABEL_47;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v50[0] + 24))(v50[0]))
        break;
      if (!v50[0])
        goto LABEL_46;
      v32 = (*(uint64_t (**)(void))(*(_QWORD *)v50[0] + 32))();
LABEL_47:
      if (!*(_DWORD *)v32)
      {
        v33 = *(float *)(v32 + 8);
        v31.n128_f32[0] = v27 + v33;
        if ((float)(v27 + v33) < v19)
        {
          v49 = 0;
          v34 = kaldi::LatticeFasterDecoder::FindOrAddToken(this, *(_DWORD *)(v32 + 12), (int)v2 - 1, v31.n128_f32[0], &v49);
          v35 = operator new();
          v36 = *(_DWORD *)(v32 + 4);
          v37 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)v35 = v34;
          *(_DWORD *)(v35 + 8) = 0;
          *(_DWORD *)(v35 + 12) = v36;
          *(float *)(v35 + 16) = v33;
          *(_DWORD *)(v35 + 20) = 0;
          *(_QWORD *)(v35 + 24) = v37;
          *(_QWORD *)(v26 + 8) = v35;
          if (v49)
          {
            v39 = (char *)*((_QWORD *)this + 14);
            v38 = *((_QWORD *)this + 15);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v4;
              v42 = (v39 - (_BYTE *)*v4) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v45);
                v41 = (char *)*((_QWORD *)this + 13);
                v39 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = *(_DWORD *)(v32 + 12);
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *((_QWORD *)this + 13) = v47;
              *((_QWORD *)this + 14) = v40;
              *((_QWORD *)this + 15) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = *(_DWORD *)(v32 + 12);
              v40 = v39 + 4;
            }
            *((_QWORD *)this + 14) = v40;
          }
        }
      }
      if (v50[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v50[0] + 40))(v50[0], v31);
      else
        ++v52;
    }
    if (v50[0])
    {
      (*(void (**)(void))(*(_QWORD *)v50[0] + 8))();
      goto LABEL_74;
    }
LABEL_72:
    if (v51)
      --*v51;
LABEL_74:
    v18 = (char *)*((_QWORD *)this + 13);
    v3 = (char *)*((_QWORD *)this + 14);
  }
  while (v18 != v3);
}

void sub_1ADB5AB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::LatticeFasterDecoder::Decode(kaldi::LatticeFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  uint64_t v4;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19)) == -1)
    return 0;
  kaldi::LatticeFasterDecoder::InitDecoding(this);
  if (((*(uint64_t (**)(kaldi::DecodableInterface *, _QWORD))(*(_QWORD *)a2 + 8))(a2, ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4) - 2) & 1) == 0)
  {
    do
    {
      if (!((int)(((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4) - 1) % *((_DWORD *)this + 53)))
        kaldi::LatticeFasterDecoder::PruneActiveTokens(this, *((float *)this + 52) * *((float *)this + 58));
      kaldi::LatticeFasterDecoder::ProcessEmitting(this, a2);
      kaldi::LatticeFasterDecoder::ProcessNonemitting(this);
    }
    while (!(*(unsigned int (**)(kaldi::DecodableInterface *, _QWORD))(*(_QWORD *)a2 + 8))(a2, ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4) - 2));
  }
  kaldi::LatticeFasterDecoder::FinalizeDecoding(this);
  v4 = *((_QWORD *)this + 11);
  return *((_QWORD *)this + 10) != v4 && *(_QWORD *)(v4 - 16) != 0;
}

void kaldi::LatticeFasterDecoder::PruneActiveTokens(kaldi::LatticeFasterDecoder *this, float a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  _QWORD v14[35];
  BOOL v15;

  v3 = *((_QWORD *)this + 10);
  v4 = (unint64_t)(*((_QWORD *)this + 11) - v3) >> 4;
  v5 = v4 - 1;
  if ((int)v4 - 1 >= 1)
  {
    v7 = 0;
    v8 = (v4 - 2);
    v9 = 16 * (v4 - 1);
    v10 = 16 * v8;
    v11 = (v4 - 1);
    do
    {
      if (*(_BYTE *)(v3 + v10 + v7 + 8))
      {
        LOBYTE(v14[0]) = 0;
        v15 = 0;
        kaldi::LatticeFasterDecoder::PruneForwardLinks(this, v8, (BOOL *)v14, &v15, a2);
        v3 = *((_QWORD *)this + 10);
        if (v11 >= 2 && LOBYTE(v14[0]))
          *(_BYTE *)(v3 + v9 + v7 - 24) = 1;
        if (v15)
          *(_BYTE *)(v3 + v10 + v7 + 9) = 1;
        *(_BYTE *)(v3 + v10 + v7 + 8) = 0;
      }
      if (v5 > (int)v11 && *(_BYTE *)(v3 + v9 + v7 + 9))
      {
        kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, v11);
        v3 = *((_QWORD *)this + 10);
        *(_BYTE *)(v3 + v9 + v7 + 9) = 0;
      }
      v7 -= 16;
      --v11;
    }
    while (v8-- > 0);
  }
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
}

void sub_1ADB5AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::ProcessEmitting(kaldi::LatticeFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  unsigned int *v50;

  v4 = (char *)this + 80;
  v5 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  v6 = v5 >> 4;
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, (v5 >> 4) + 1);
  v8 = *((_QWORD *)v4 - 9);
  if (v8 != -1)
  {
    v9 = *((_QWORD *)this + 3);
    do
    {
      v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      v8 = *v10;
    }
    while (v8 != -1);
  }
  v11 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  v50 = 0;
  v49 = 0.0;
  v48 = 0;
  v12 = kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(this, (uint64_t)this + 192, (uint64_t)v11, &v48, &v49, &v50, 1, v7);
  v13 = (unint64_t)(float)(*((float *)this + 56) * (float)v48);
  if (*((_QWORD *)this + 2) < v13)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)this, v13);
  if (!v50)
  {
    v16 = 0.0;
    v18 = INFINITY;
    goto LABEL_35;
  }
  v14 = *v50;
  v15 = (float *)*((_QWORD *)v50 + 1);
  v16 = -*v15;
  v17 = *((_QWORD *)this + 19);
  v47 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 136))(v17, v14, &v43);
  v18 = INFINITY;
  while (1)
  {
    if (!v43)
    {
      if (v47 >= v45)
        goto LABEL_32;
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      break;
    if (v43)
    {
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 32))();
      goto LABEL_14;
    }
LABEL_13:
    v19 = v44 + 16 * v47;
LABEL_14:
    if (*(_DWORD *)v19)
    {
      v20 = *(_DWORD *)(v19 + 4);
      v21 = *(float *)(v19 + 8);
      (**(void (***)(kaldi::DecodableInterface *, _QWORD))a2)(a2, (v6 - 1));
      v23 = NAN;
      if (v21 != -INFINITY)
      {
        v24 = v16 - v22;
        if (v24 != -INFINITY)
        {
          v23 = INFINITY;
          v25 = v24 == INFINITY || v21 == INFINITY;
          v26 = v21 + v24;
          if (!v25)
            v23 = v26;
        }
      }
      if (v20)
        v27 = *((float *)this + 57);
      else
        v27 = 0.0;
      v28 = (float)((float)(v23 + *v15) + v27) + v49;
      if (v28 < v18)
        v18 = v28;
    }
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
    else
      ++v47;
  }
  if (v43)
  {
    (*(void (**)(void))(*(_QWORD *)v43 + 8))();
    goto LABEL_35;
  }
LABEL_32:
  if (v46)
    --*v46;
LABEL_35:
  LODWORD(v43) = 0;
  std::vector<float>::resize((uint64_t)this + 168, (int)(v5 >> 4), &v43);
  *(float *)(*((_QWORD *)this + 21) + 4 * ((int)v6 - 1)) = v16;
  if (!v11)
    return;
  while (2)
  {
    v29 = *((_QWORD *)v11 + 1);
    v30 = *(float *)v29;
    if (*(float *)v29 > v12)
      goto LABEL_59;
    v31 = *v11;
    v32 = *((_QWORD *)this + 19);
    v47 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, float))(*(_QWORD *)v32 + 136))(v32, v31, &v43, v30);
    while (2)
    {
      if (!v43)
      {
        if (v47 >= v45)
          goto LABEL_57;
        goto LABEL_43;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      {
        if (v43)
        {
          v33 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 32))();
          goto LABEL_44;
        }
LABEL_43:
        v33 = v44 + 16 * v47;
LABEL_44:
        if (*(_DWORD *)v33)
        {
          (**(void (***)(kaldi::DecodableInterface *, _QWORD))a2)(a2, (v6 - 1));
          v35 = *(_DWORD *)(v33 + 4) ? *((float *)this + 57) : 0.0;
          v36 = v16 - v34;
          v37 = *(float *)(v33 + 8) + v35;
          v38 = (float)((float)(v16 - v34) + *(float *)v29) + v37;
          if (v38 <= v18)
          {
            if ((float)(v38 + *((float *)this + 48)) < v18)
              v18 = v38 + *((float *)this + 48);
            v39 = kaldi::LatticeFasterDecoder::FindOrAddToken(this, *(_DWORD *)(v33 + 12), v6, v38, 0);
            v40 = operator new();
            v41 = *(_QWORD *)(v29 + 8);
            *(_QWORD *)v40 = v39;
            *(_QWORD *)(v40 + 8) = *(_QWORD *)v33;
            *(float *)(v40 + 16) = v37;
            *(float *)(v40 + 20) = v36;
            *(_QWORD *)(v40 + 24) = v41;
            *(_QWORD *)(v29 + 8) = v40;
          }
        }
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
        else
          ++v47;
        continue;
      }
      break;
    }
    if (v43)
    {
      (*(void (**)(void))(*(_QWORD *)v43 + 8))();
      goto LABEL_59;
    }
LABEL_57:
    if (v46)
      --*v46;
LABEL_59:
    v42 = (unsigned int *)*((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 2) = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v11;
    v11 = v42;
    if (v42)
      continue;
    break;
  }
}

void sub_1ADB5B284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterDecoder::FinalizeDecoding(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[35];
  BOOL v5;

  v2 = (*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4;
  kaldi::LatticeFasterDecoder::PruneForwardLinksFinal(this);
  if ((int)v2 - 1 >= 1)
  {
    do
    {
      kaldi::LatticeFasterDecoder::PruneForwardLinks(this, v2 - 2, (BOOL *)v4, &v5, 0.0);
      kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, v2 - 1);
      LODWORD(v2) = v2 - 1;
    }
    while (v2 > 1);
  }
  kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, 0);
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"pruned tokens from ", 19);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1ADB5B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL kaldi::LatticeFasterDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  __int128 *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t i;
  uint64_t v29;
  uint64_t j;
  _QWORD *v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  _QWORD *v37;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  _DWORD v44[2];
  uint64_t v45;
  char *v46;
  int v47;
  float v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[4];
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;

  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
    return 0;
  v6 = *(unsigned __int8 *)(a1 + 253);
  if (*(_BYTE *)(a1 + 253) && (a3 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"You cannot call FinalizeDecoding() and then call ", 49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "GetRawLattice() with use_final_probs == false");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
  }
  v55 = 0u;
  v56 = 0u;
  v57 = 1065353216;
  v7 = (__int128 *)(a1 + 256);
  if (!v6)
    v7 = &v55;
  v42 = v7;
  if (v6)
    v8 = 1;
  else
    v8 = a3 == 0;
  if (!v8)
    kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)a1, &v55, 0, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v40 = v6;
  v10 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(a1 + 248);
  memset(v53, 0, sizeof(v53));
  v54 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v53, v11 / 2 + 3);
  v12 = 0;
  v13 = ((unint64_t)(v9 - v10) >> 4) - 1;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v14 = ((unint64_t)(v9 - v10) >> 4);
  while (1)
  {
    v15 = *(char **)(*(_QWORD *)(a1 + 80) + 16 * v12);
    if (!v15)
      break;
    kaldi::LatticeFasterDecoder::TopSortTokens(v15, &v50);
    v17 = v50;
    v16 = v51;
    if (v51 != v50)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        if (*(_QWORD *)&v17[8 * v19])
        {
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v46 = &v50[v18];
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v50[v18], (uint64_t)&std::piecewise_construct, (_QWORD **)&v46)+ 6) = v20;
          v17 = v50;
          v16 = v51;
        }
        ++v19;
        v18 += 8;
      }
      while (v19 < (v16 - v17) >> 3);
    }
    if (++v12 == v14)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"init:", 5);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" buckets:", 9);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" load:", 6);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46);
      }
      v41 = v14;
      v26 = 0;
      if (v40)
        v27 = (_QWORD *)(a1 + 280);
      else
        v27 = (_QWORD *)&v56 + 1;
      do
      {
        v45 = 0;
        for (i = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * v26); ; i = *(_QWORD *)(v45 + 16))
        {
          v45 = i;
          if (!i)
            break;
          v46 = (char *)&v45;
          v29 = *((unsigned int *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)&v46)+ 6);
          for (j = *(_QWORD *)(v45 + 8); j; j = *(_QWORD *)(j + 24))
          {
            v31 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v53, (_QWORD *)j);
            if (*(_DWORD *)(j + 8))
              v32 = *(float *)(*(_QWORD *)(a1 + 168) + 4 * v26);
            else
              v32 = 0.0;
            v33 = *((_DWORD *)v31 + 6);
            v34 = *(_DWORD *)(j + 12);
            v35 = *(_DWORD *)(j + 16);
            v36 = *(float *)(j + 20) - v32;
            LODWORD(v46) = *(_DWORD *)(j + 8);
            HIDWORD(v46) = v34;
            v47 = v35;
            v48 = v36;
            v49 = v33;
            (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)a2 + 208))(a2, v29, &v46);
          }
          if (v26 == v13)
          {
            if (a3 && *v27)
            {
              v37 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v42, &v45);
              if (v37)
              {
                v44[0] = *((_DWORD *)v37 + 6);
                v44[1] = 0;
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v29, v44);
              }
            }
            else
            {
              v43 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v29, &v43);
            }
          }
        }
        ++v26;
      }
      while (v26 != v41);
      v23 = (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) > 0;
      goto LABEL_44;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": not producing lattice.\n", 25);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
  }
  v23 = 0;
LABEL_44:
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v53);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v55);
  return v23;
}

uint64_t kaldi::LatticeFasterDecoder::TopSortTokens(char *a1, _QWORD *a2)
{
  int v2;
  char *v3;
  int v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t **i;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t *v40;

  v37 = 0u;
  v38 = 0u;
  v39 = 1065353216;
  if (a1)
  {
    v2 = -1;
    v3 = a1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 2);
      ++v2;
    }
    while (v3);
    v31 = a1;
    v4 = 0;
    do
    {
      *(_QWORD *)&v34 = &v31;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v31, (uint64_t)&std::piecewise_construct, (_QWORD **)&v34)+ 6) = v2 + v4;
      v31 = (char *)*((_QWORD *)v31 + 2);
      --v4;
    }
    while (v31);
    v5 = (uint64_t *)v38;
    v34 = 0u;
    v35 = 0u;
    v36 = 1065353216;
    v6 = -v4;
    if ((_QWORD)v38)
    {
      do
      {
        v31 = (char *)v5[2];
        v7 = *((_QWORD *)v31 + 1);
        if (v7)
        {
          v8 = *((_DWORD *)v5 + 6);
          do
          {
            if (!*(_DWORD *)(v7 + 8))
            {
              v9 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (_QWORD *)v7);
              if (v9)
              {
                if (*((_DWORD *)v9 + 6) < v8)
                {
                  *((_DWORD *)v9 + 6) = v6;
                  std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (_QWORD *)v7, (_QWORD *)v7);
                  ++v6;
                }
              }
            }
            v7 = *(_QWORD *)(v7 + 24);
          }
          while (v7);
        }
        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(&v34, &v31);
        v5 = (uint64_t *)*v5;
      }
      while (v5);
      if (*((_QWORD *)&v35 + 1))
      {
        v10 = 0;
        do
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v11 = (_QWORD *)v35;
          if ((_QWORD)v35)
          {
            v12 = 0;
            do
            {
              if (v12 >= v33)
              {
                v13 = (v12 - v31) >> 3;
                if ((unint64_t)(v13 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v14 = (v33 - v31) >> 2;
                if (v14 <= v13 + 1)
                  v14 = v13 + 1;
                if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v14;
                if (v15)
                  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v33, v15);
                else
                  v16 = 0;
                v17 = &v16[8 * v13];
                *(_QWORD *)v17 = v11[2];
                v12 = v17 + 8;
                v19 = v31;
                v18 = v32;
                if (v32 != v31)
                {
                  do
                  {
                    v20 = *((_QWORD *)v18 - 1);
                    v18 -= 8;
                    *((_QWORD *)v17 - 1) = v20;
                    v17 -= 8;
                  }
                  while (v18 != v19);
                  v18 = v31;
                }
                v31 = v17;
                v32 = v12;
                v33 = &v16[8 * v15];
                if (v18)
                  operator delete(v18);
              }
              else
              {
                *(_QWORD *)v12 = v11[2];
                v12 += 8;
              }
              v32 = v12;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v34);
          v21 = v31;
          if (v31 != v32)
          {
            do
            {
              v30 = 0;
              v30 = *(_QWORD *)v21;
              v40 = &v30;
              v22 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v30, (uint64_t)&std::piecewise_construct, &v40);
              v23 = *(_QWORD *)(v30 + 8);
              if (v23)
              {
                v24 = *((_DWORD *)v22 + 6);
                do
                {
                  if (!*(_DWORD *)(v23 + 8))
                  {
                    v25 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (_QWORD *)v23);
                    if (v25)
                    {
                      if (*((_DWORD *)v25 + 6) < v24)
                      {
                        *((_DWORD *)v25 + 6) = v6;
                        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (_QWORD *)v23, (_QWORD *)v23);
                        ++v6;
                      }
                    }
                  }
                  v23 = *(_QWORD *)(v23 + 24);
                }
                while (v23);
              }
              v21 += 8;
            }
            while (v21 != v32);
            v21 = v31;
          }
          if (v21)
          {
            v32 = v21;
            operator delete(v21);
          }
          if (!*((_QWORD *)&v35 + 1))
            break;
        }
        while (v10++ < 0xF423F);
      }
    }
  }
  else
  {
    v6 = 0;
    v34 = 0u;
    v35 = 0u;
    v36 = 1065353216;
  }
  a2[1] = *a2;
  v31 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v6, &v31);
  for (i = (uint64_t **)v38; i; i = (uint64_t **)*i)
    *(_QWORD *)(*a2 + 8 * *((int *)i + 6)) = i[2];
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v37);
}

void sub_1ADB5BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::PruneForwardLinks(kaldi::LatticeFasterDecoder *this, unsigned int a2, BOOL *a3, BOOL *a4, float a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  uint64_t v21;
  _QWORD v23[35];

  *a3 = 0;
  *a4 = 0;
  if (!*(_QWORD *)(*((_QWORD *)this + 10) + 16 * a2) && !*((_BYTE *)this + 252))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance\n", 77);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    }
    *((_BYTE *)this + 252) = 1;
  }
  v21 = 16 * a2;
  v9 = *(_QWORD *)(*((_QWORD *)this + 10) + v21);
  if (v9)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
      {
        v12 = 0;
        v13 = INFINITY;
        do
        {
          v15 = **(float **)v11;
          v14 = *(float *)(*(_QWORD *)v11 + 4);
          v16 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
          if (v16 <= *((float *)this + 52))
          {
            if (v16 >= 0.0)
            {
              v19 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
            }
            else
            {
              v19 = 0.0;
              if (v16 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              }
            }
            if (v19 < v13)
              v13 = v19;
            v17 = *(_QWORD *)(v11 + 24);
            v12 = v11;
          }
          else
          {
            v17 = *(_QWORD *)(v11 + 24);
            v18 = (_QWORD *)(v12 + 24);
            if (!v12)
              v18 = (_QWORD *)(v9 + 8);
            *v18 = v17;
            MEMORY[0x1AF44D190](v11, 0x1020C40D9E1CEDCLL);
            *a4 = 1;
          }
          v11 = v17;
        }
        while (v17);
      }
      else
      {
        v13 = INFINITY;
      }
      if (vabds_f32(v13, *(float *)(v9 + 4)) > a5)
        v10 = 1;
      *(float *)(v9 + 4) = v13;
      v9 = *(_QWORD *)(v9 + 16);
      if (!v9)
      {
        if ((v10 & 1) == 0)
          break;
        v10 = 0;
        *a3 = 1;
        v9 = *(_QWORD *)(*((_QWORD *)this + 10) + v21);
        if (!v9)
          break;
      }
    }
  }
}

void sub_1ADB5BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::PruneForwardLinksFinal(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD v28[35];

  v2 = *((_QWORD *)this + 10);
  v3 = ((*((_QWORD *)this + 11) - v2) << 28) - 0x100000000;
  if (*(_QWORD *)(v2 + (v3 >> 28)))
    v4 = 1;
  else
    v4 = kaldi::g_kaldi_verbose_level < -1;
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"No tokens alive at end of file", 30);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
  }
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, (_QWORD *)this + 32, (float *)this + 74, (float *)this + 75);
  *((_BYTE *)this + 253) = 1;
  v5 = *((_QWORD *)this + 1);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 3);
    do
    {
      v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      v5 = *v7;
    }
    while (v5 != -1);
  }
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v8)
  {
    v9 = *((_QWORD *)this + 6);
    do
    {
      v10 = v8;
      v8 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v10 + 16) = v9;
      v9 = v10;
    }
    while (v8);
    *((_QWORD *)this + 6) = v10;
  }
  do
  {
    v27 = 0;
    v27 = *(_QWORD *)(*((_QWORD *)this + 10) + 16 * (v3 >> 32));
    if (!v27)
      break;
    v11 = 0;
    do
    {
      if (*((_QWORD *)this + 35))
      {
        v12 = (float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((_QWORD *)this + 32, &v27);
        if (v12)
          v13 = v12[6];
        else
          v13 = INFINITY;
      }
      else
      {
        v13 = 0.0;
      }
      v14 = v27;
      v15 = (float)(v13 + *(float *)v27) - *((float *)this + 75);
      v16 = *(_QWORD *)(v27 + 8);
      if (v16)
      {
        v17 = 0;
        do
        {
          v19 = **(float **)v16;
          v18 = *(float *)(*(_QWORD *)v16 + 4);
          v20 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
          if (v20 <= *((float *)this + 52))
          {
            if (v20 >= 0.0)
            {
              v23 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
            }
            else
            {
              v23 = 0.0;
              if (v20 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
              }
            }
            if (v23 < v15)
              v15 = v23;
            v21 = *(_QWORD *)(v16 + 24);
            v17 = v16;
          }
          else
          {
            v21 = *(_QWORD *)(v16 + 24);
            v22 = (_QWORD *)(v27 + 8);
            if (v17)
              v22 = (_QWORD *)(v17 + 24);
            *v22 = v21;
            MEMORY[0x1AF44D190](v16, 0x1020C40D9E1CEDCLL);
          }
          v16 = v21;
        }
        while (v21);
        v14 = v27;
      }
      v25 = INFINITY;
      if (v15 <= *((float *)this + 52))
        v25 = v15;
      v26 = *(float *)(v14 + 4);
      if (v26 != v25
        && (COERCE_INT(fabs(v26 - v25)) > 2139095039
         || fabsf(v26 - v25) > (float)((float)(fabsf(v26) + fabsf(v25)) * 0.00001)))
      {
        v11 = 1;
      }
      *(float *)(v14 + 4) = v25;
      v27 = *(_QWORD *)(v14 + 16);
    }
    while (v27);
  }
  while ((v11 & 1) != 0);
}

void sub_1ADB5C210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeFasterDecoder::PruneTokensForFrame(kaldi::LatticeFasterDecoder *this, unsigned int a2)
{
  uint64_t *v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[34];

  v3 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * a2);
  result = *v3;
  if (*v3)
    v5 = 1;
  else
    v5 = kaldi::g_kaldi_verbose_level < -1;
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No tokens alive [doing pruning]", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    result = *v3;
  }
  if (result)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(result + 16);
      if (*(float *)(result + 4) == INFINITY)
      {
        v8 = (uint64_t *)(v6 + 16);
        if (!v6)
          v8 = v3;
        *v8 = v7;
        MEMORY[0x1AF44D190]();
        --*((_DWORD *)this + 62);
      }
      else
      {
        v6 = result;
      }
      result = v7;
    }
    while (v7);
  }
  return result;
}

void sub_1ADB5C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeFasterDecoder::FindOrAddToken(kaldi::LatticeFasterDecoder *this, int a2, int a3, float a4, BOOL *a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  kaldi::LatticeFasterDecoder *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  kaldi::LatticeFasterDecoder *v27;
  BOOL v28;

  v9 = a2;
  v10 = *((_QWORD *)this + 3);
  v11 = (unint64_t)a2 % *((_QWORD *)this + 2);
  v12 = *(_QWORD *)(v10 + 16 * v11 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v10 + 16 * v11);
    v14 = this;
    if (v13 != -1)
      v14 = (kaldi::LatticeFasterDecoder *)(*(_QWORD *)(v10 + 16 * v13 + 8) + 16);
    v15 = *(_QWORD *)(v12 + 16);
    for (i = *(_QWORD *)v14; i != v15; i = *(_QWORD *)(i + 16))
    {
      if (*(_DWORD *)i == a2)
      {
        v18 = *(_QWORD *)(i + 8);
        if (*(float *)v18 > a4)
        {
          *(float *)v18 = a4;
          if (!a5)
            return v18;
          goto LABEL_17;
        }
        if (!a5)
          return v18;
        v28 = 0;
        goto LABEL_18;
      }
    }
  }
  v17 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * a3);
  v18 = operator new();
  v19 = *v17;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = v19;
  *v17 = v18;
  v20 = *((_QWORD *)this + 3);
  v21 = v9 % *((_QWORD *)this + 2);
  *(float *)v18 = a4;
  *(_DWORD *)(v18 + 4) = 0;
  ++*((_DWORD *)this + 62);
  v22 = (_QWORD *)(v20 + 16 * v21);
  v23 = kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(this);
  *(_DWORD *)v23 = a2;
  *(_QWORD *)(v23 + 8) = v18;
  v24 = v22 + 1;
  v25 = v22[1];
  if (v25)
  {
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v25 + 16);
    *(_QWORD *)(v25 + 16) = v23;
    *v24 = v23;
    if (!a5)
      return v18;
  }
  else
  {
    v26 = *((_QWORD *)this + 1);
    v27 = this;
    if (v26 != -1)
      v27 = (kaldi::LatticeFasterDecoder *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v26 + 8) + 16);
    *(_QWORD *)v27 = v23;
    *(_QWORD *)(v23 + 16) = 0;
    *v24 = v23;
    *v22 = v26;
    *((_QWORD *)this + 1) = v21;
    if (!a5)
      return v18;
  }
LABEL_17:
  v28 = 1;
LABEL_18:
  *a5 = v28;
  return v18;
}

uint64_t kaldi::nnet1::Component::GetComponentTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetGradientNormTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetMatrixInitTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap;
}

void kaldi::nnet1::Component::TypeToMarker(kaldi::nnet1::Component *a1@<X0>, std::string *a2@<X8>)
{
  int v2;
  kaldi::nnet1::Component *ComponentTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  ComponentTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(a1);
  v5 = *(_QWORD **)ComponentTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(ComponentTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown component type: ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *GradientNormTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  GradientNormTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  v5 = *(_QWORD **)GradientNormTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(GradientNormTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown gradient normalizaiton type: ", 37);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *MatrixInitTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  MatrixInitTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  v5 = *(_QWORD **)MatrixInitTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(MatrixInitTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown matrix initialization type: ", 36);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1ADB5C6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1ADB5C7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1ADB5C904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

std::string::size_type kaldi::nnet1::Component::MarkerToComponentType(std::string::size_type *a1)
{
  std::string::size_type v1;
  uint64_t ComponentTypeMap;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t v15;
  std::string::size_type size;
  std::string::size_type v17;
  std::string *v18;
  std::string *v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[34];
  std::string v38;
  std::string v39;

  ComponentTypeMap = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)a1);
  v4 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(ComponentTypeMap, (const void **)a1);
  v5 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v4);
  if ((unsigned int *)(v5 + 8) != v4)
    return v4[14];
  v6 = *((char *)a1 + 23);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*a1, a1[1]);
    v6 = *((char *)a1 + 23);
    if (v6 < 0)
    {
      v8 = (char *)*a1;
      v7 = a1[1];
      if (v7)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else
  {
    v39 = *(std::string *)a1;
  }
  v7 = v6;
  v8 = (char *)a1;
  if ((_BYTE)v6)
  {
LABEL_7:
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1 = (std::string::size_type)&v39;
    else
      v1 = v39.__r_.__value_.__r.__words[0];
    do
    {
      v5 = __tolower(*v8);
      *(_BYTE *)v1++ = v5;
      ++v8;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  v9 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v5);
  v10 = *(_QWORD **)v9;
  while (1)
  {
    v9 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v9);
    if (v10 == (_QWORD *)(v9 + 8))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unknown component type marker: ", 31);
      v34 = *((char *)a1 + 23);
      if (v34 >= 0)
        v35 = (uint64_t)a1;
      else
        v35 = *a1;
      if (v34 >= 0)
        v36 = *((unsigned __int8 *)a1 + 23);
      else
        v36 = a1[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    }
    if ((*((char *)v10 + 55) & 0x80000000) == 0)
    {
      v11 = *((unsigned __int8 *)v10 + 55);
      v38 = *(std::string *)(v10 + 4);
LABEL_17:
      v12 = (char *)(v10 + 4);
      goto LABEL_18;
    }
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v10[4], v10[5]);
    if ((*((char *)v10 + 55) & 0x80000000) == 0)
    {
      v11 = *((unsigned __int8 *)v10 + 55);
      goto LABEL_17;
    }
    v12 = (char *)v10[4];
    v11 = v10[5];
LABEL_18:
    v13 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if (v11)
    {
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v38;
      else
        v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
      do
      {
        v9 = __tolower(*v12);
        v14->__r_.__value_.__s.__data_[0] = v9;
        v14 = (std::string *)((char *)v14 + 1);
        ++v12;
        --v11;
      }
      while (v11);
      v13 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    v15 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v17 = v38.__r_.__value_.__l.__size_;
    if ((v13 & 0x80u) == 0)
      v17 = v13;
    if (size != v17)
      goto LABEL_40;
    v18 = (v13 & 0x80u) == 0 ? &v38 : (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v9 = memcmp(v39.__r_.__value_.__l.__data_, v18, v39.__r_.__value_.__l.__size_);
      if ((_DWORD)v9)
        goto LABEL_40;
    }
    else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
    {
      v19 = &v39;
      while (v19->__r_.__value_.__s.__data_[0] == v18->__r_.__value_.__s.__data_[0])
      {
        v19 = (std::string *)((char *)v19 + 1);
        v18 = (std::string *)((char *)v18 + 1);
        if (!--v15)
          goto LABEL_48;
      }
LABEL_40:
      v20 = 0;
      if ((v13 & 0x80) == 0)
        goto LABEL_42;
LABEL_41:
      operator delete(v38.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_48:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"please update to formatted name ", 32);
      v24 = *((char *)v10 + 55);
      if (v24 >= 0)
        v25 = (uint64_t)(v10 + 4);
      else
        v25 = v10[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v10 + 55);
      else
        v26 = v10[5];
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ASAP, you used ", 16);
      v29 = *((char *)a1 + 23);
      if (v29 >= 0)
        v30 = (uint64_t)a1;
      else
        v30 = *a1;
      if (v29 >= 0)
        v31 = *((unsigned __int8 *)a1 + 23);
      else
        v31 = a1[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v37);
      LOBYTE(v13) = *((_BYTE *)&v38.__r_.__value_.__s + 23);
    }
    v1 = *((unsigned int *)v10 + 14);
    v20 = 1;
    if ((v13 & 0x80) != 0)
      goto LABEL_41;
LABEL_42:
    if ((v20 & 1) != 0)
      break;
    v21 = (_QWORD *)v10[1];
    if (v21)
    {
      do
      {
        v10 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        v22 = v10;
        v10 = (_QWORD *)v10[2];
      }
      while ((_QWORD *)*v10 != v22);
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1ADB5CC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  JUMPOUT(0x1ADB5CC70);
}

void sub_1ADB5CC64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::MarkerToGradientNormType(kaldi::nnet1::Component *a1)
{
  uint64_t GradientNormTypeMap;
  unsigned int *v3;
  _QWORD *v5;
  _QWORD v6[34];

  GradientNormTypeMap = kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  v3 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(GradientNormTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetGradientNormTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown gradient normalization marker: ", 39);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::MarkerToMatrixInitType(kaldi::nnet1::Component *a1)
{
  uint64_t MatrixInitTypeMap;
  unsigned int *v3;
  _QWORD *v5;
  _QWORD v6[34];

  MatrixInitTypeMap = kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  v3 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(MatrixInitTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetMatrixInitTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown matrix initialization marker: ", 38);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::NewComponentOfType(kaldi::nnet1::Component *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (**v8)(kaldi::nnet1::IdentityComponent *__hidden);
  uint64_t v9;
  void (**v10)(kaldi::nnet1::CnnRearrangeComponent *__hidden);
  uint64_t v11;
  void (**v12)(kaldi::nnet1::MaxPooling2DComponent *__hidden);
  kaldi::nnet1::ParallelComponent *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void (**v19)(kaldi::nnet1::DuplicateComponent *__hidden);
  _QWORD *v21;
  std::string v22;
  _QWORD v23[34];

  if ((int)a1 > 512)
  {
    switch((int)a1)
    {
      case 1025:
        v7 = operator new();
        kaldi::nnet1::Rbm::Rbm((kaldi::nnet1::Rbm *)v7, a2, a3);
        return v7;
      case 1026:
        v11 = operator new();
        v7 = v11;
        *(_DWORD *)(v11 + 8) = a2;
        *(_DWORD *)(v11 + 12) = a3;
        *(_WORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        v12 = &off_1E5D31E10;
        goto LABEL_78;
      case 1027:
        v7 = operator new();
        *(_DWORD *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 12) = a3;
        *(_WORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)v7 = &off_1E5D32448;
        *(_QWORD *)(v7 + 48) = 0x100000001;
        *(_DWORD *)(v7 + 56) = 1;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        return v7;
      case 1028:
        v11 = operator new();
        v7 = v11;
        *(_DWORD *)(v11 + 8) = a2;
        *(_DWORD *)(v11 + 12) = a3;
        *(_WORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        v12 = &off_1E5D2B5A0;
LABEL_78:
        *(_QWORD *)v11 = v12;
        *(_QWORD *)(v11 + 56) = 0;
        *(_QWORD *)(v11 + 64) = 0;
        return v7;
      case 1029:
      case 1030:
        goto LABEL_90;
      case 1031:
        v7 = operator new();
        kaldi::nnet1::AddShift::AddShift((kaldi::nnet1::AddShift *)v7, a2, a3);
        return v7;
      case 1032:
        v7 = operator new();
        kaldi::nnet1::Rescale::Rescale((kaldi::nnet1::Rescale *)v7, a2, a3);
        return v7;
      case 1033:
        v7 = operator new();
        kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1034:
        v6 = operator new();
        v7 = v6;
        *(_DWORD *)(v6 + 8) = a2;
        *(_DWORD *)(v6 + 12) = a3;
        *(_WORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        v8 = &off_1E5D2DFA8;
LABEL_85:
        *(_QWORD *)v6 = v8;
        return v7;
      case 1035:
        v7 = operator new();
        kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1036:
        v9 = operator new();
        v7 = v9;
        *(_DWORD *)(v9 + 8) = a2;
        *(_DWORD *)(v9 + 12) = a3;
        *(_WORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 24) = 0;
        v10 = &off_1E5D2E850;
LABEL_68:
        *(_QWORD *)v9 = v10;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        return v7;
      case 1037:
        v7 = operator new();
        *(_DWORD *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 12) = a3;
        *(_WORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)v7 = &off_1E5D2D170;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        return v7;
      case 1038:
        v7 = operator new();
        kaldi::nnet1::Padding2DComponent::Padding2DComponent((kaldi::nnet1::Padding2DComponent *)v7, a2, a3);
        return v7;
      case 1039:
        v7 = operator new();
        kaldi::nnet1::InterpolationComponent::InterpolationComponent((kaldi::nnet1::InterpolationComponent *)v7, a2, a3);
        return v7;
      case 1040:
        v7 = operator new();
        kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent((kaldi::nnet1::CompressedWordTransComponent *)v7, a2, a3);
        return v7;
      case 1041:
        v7 = operator new();
        kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1042:
        v7 = operator new();
        kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(v7, a2, a3);
        return v7;
      default:
        switch((int)a1)
        {
          case 513:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D32260;
            goto LABEL_85;
          case 514:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D2B360;
            goto LABEL_85;
          case 515:
            v9 = operator new();
            v7 = v9;
            *(_DWORD *)(v9 + 8) = a2;
            *(_DWORD *)(v9 + 12) = a3;
            *(_WORD *)(v9 + 16) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            *(_QWORD *)(v9 + 40) = 0;
            v10 = &off_1E5D2B420;
            *(_QWORD *)(v9 + 24) = 0;
            goto LABEL_68;
          case 516:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D321A0;
            goto LABEL_85;
          case 517:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D31C20;
            goto LABEL_85;
          case 518:
            v7 = operator new();
            *(_DWORD *)(v7 + 8) = a2;
            *(_DWORD *)(v7 + 12) = a3;
            *(_WORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)v7 = &off_1E5D31ED0;
            *(_OWORD *)(v7 + 96) = 0u;
            *(_OWORD *)(v7 + 112) = 0u;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 64) = 0u;
            *(_DWORD *)(v7 + 80) = 0;
            *(_QWORD *)(v7 + 88) = &unk_1E5D34170;
            *(_BYTE *)(v7 + 128) = 0;
            *(_OWORD *)(v7 + 152) = 0u;
            *(_OWORD *)(v7 + 168) = 0u;
            *(_QWORD *)(v7 + 136) = 0;
            *(_QWORD *)(v7 + 144) = &unk_1E5D34170;
            *(_BYTE *)(v7 + 184) = 0;
            *(_DWORD *)(v7 + 192) = 1056964608;
            return v7;
          case 519:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D2CDA0;
            goto LABEL_85;
          case 520:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1E5D30438;
            goto LABEL_85;
          case 521:
            v16 = operator new();
            v7 = v16;
            *(_DWORD *)(v16 + 8) = a2;
            *(_DWORD *)(v16 + 12) = a3;
            *(_WORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 32) = 0;
            *(_QWORD *)(v16 + 40) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)v16 = &off_1E5D2C5D0;
            v17 = 0x40000000;
            goto LABEL_88;
          case 522:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_OWORD *)(v6 + 24) = 0u;
            *(_OWORD *)(v6 + 40) = 0u;
            *(_OWORD *)(v6 + 56) = 0u;
            *(_OWORD *)(v6 + 72) = 0u;
            *(_QWORD *)(v6 + 88) = 0;
            v8 = &off_1E5D2B4E0;
            goto LABEL_85;
          case 523:
            v16 = operator new();
            v7 = v16;
            *(_DWORD *)(v16 + 8) = a2;
            *(_DWORD *)(v16 + 12) = a3;
            *(_WORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 32) = 0;
            *(_QWORD *)(v16 + 40) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)v16 = &off_1E5D2C690;
            v17 = 1092616192;
            goto LABEL_88;
          case 524:
            v16 = operator new();
            v7 = v16;
            *(_DWORD *)(v16 + 8) = a2;
            *(_DWORD *)(v16 + 12) = a3;
            *(_WORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 32) = 0;
            *(_QWORD *)(v16 + 40) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)v16 = &off_1E5D306B8;
            v17 = 1065353216;
LABEL_88:
            *(_DWORD *)(v16 + 48) = v17;
            break;
          case 525:
            v7 = operator new();
            *(_DWORD *)(v7 + 8) = a2;
            *(_DWORD *)(v7 + 12) = a3;
            *(_WORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)v7 = &off_1E5D31888;
            *(_QWORD *)(v7 + 48) = 0x3F867D5F3FD62D7DLL;
            break;
          default:
            switch((int)a1)
            {
              case 2048:
                v7 = operator new();
                kaldi::nnet1::KlHmm::KlHmm((kaldi::nnet1::KlHmm *)v7, a2, a3);
                return v7;
              case 2049:
                v7 = operator new();
                kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent((kaldi::nnet1::SentenceAveragingComponent *)v7, a2, a3, 100.0);
                return v7;
              case 2050:
                v7 = operator new();
                *(_DWORD *)(v7 + 8) = a2;
                *(_DWORD *)(v7 + 12) = a3;
                *(_WORD *)(v7 + 16) = 0;
                *(_QWORD *)(v7 + 32) = 0;
                *(_QWORD *)(v7 + 40) = 0;
                *(_QWORD *)(v7 + 24) = 0;
                *(_QWORD *)v7 = &off_1E5D2EF98;
                *(_QWORD *)(v7 + 48) = 0;
                *(_QWORD *)(v7 + 56) = 0x3F80000000000000;
                return v7;
              case 2051:
                v11 = operator new();
                v7 = v11;
                *(_DWORD *)(v11 + 8) = a2;
                *(_DWORD *)(v11 + 12) = a3;
                *(_WORD *)(v11 + 16) = 0;
                *(_QWORD *)(v11 + 24) = 0;
                *(_QWORD *)(v11 + 32) = 0;
                *(_QWORD *)(v11 + 40) = 0;
                *(_QWORD *)(v11 + 48) = 0;
                v12 = &off_1E5D304F8;
                goto LABEL_78;
              case 2052:
                v18 = operator new();
                v7 = v18;
                *(_DWORD *)(v18 + 8) = a2;
                *(_DWORD *)(v18 + 12) = a3;
                *(_WORD *)(v18 + 16) = 0;
                *(_QWORD *)(v18 + 32) = 0;
                *(_QWORD *)(v18 + 40) = 0;
                *(_QWORD *)(v18 + 24) = 0;
                v19 = &off_1E5D2E638;
                goto LABEL_83;
              case 2053:
                v11 = operator new();
                v7 = v11;
                *(_DWORD *)(v11 + 8) = a2;
                *(_DWORD *)(v11 + 12) = a3;
                *(_WORD *)(v11 + 16) = 0;
                *(_QWORD *)(v11 + 24) = 0;
                *(_QWORD *)(v11 + 32) = 0;
                *(_QWORD *)(v11 + 40) = 0;
                *(_QWORD *)(v11 + 48) = 0;
                v12 = &off_1E5D2EA38;
                goto LABEL_78;
              case 2054:
                v7 = operator new();
                kaldi::nnet1::FramePoolingComponent::FramePoolingComponent((kaldi::nnet1::FramePoolingComponent *)v7, a2, a3);
                return v7;
              case 2055:
                v13 = (kaldi::nnet1::ParallelComponent *)operator new();
                kaldi::nnet1::ParallelComponent::ParallelComponent(v13, a2, a3);
                goto LABEL_71;
              case 2056:
                v18 = operator new();
                v7 = v18;
                *(_DWORD *)(v18 + 8) = a2;
                *(_DWORD *)(v18 + 12) = a3;
                *(_WORD *)(v18 + 16) = 0;
                *(_QWORD *)(v18 + 32) = 0;
                *(_QWORD *)(v18 + 40) = 0;
                *(_QWORD *)(v18 + 24) = 0;
                v19 = &off_1E5D2D900;
LABEL_83:
                *(_QWORD *)v18 = v19;
                *(_QWORD *)(v18 + 48) = 0;
                *(_DWORD *)(v18 + 56) = 0;
                return v7;
              case 2057:
                v6 = operator new();
                v7 = v6;
                *(_DWORD *)(v6 + 8) = a2;
                *(_DWORD *)(v6 + 12) = a3;
                *(_WORD *)(v6 + 16) = 0;
                *(_QWORD *)(v6 + 32) = 0;
                *(_QWORD *)(v6 + 40) = 0;
                *(_QWORD *)(v6 + 24) = 0;
                v8 = &off_1E5D2D388;
                goto LABEL_85;
              case 2058:
                v6 = operator new();
                v7 = v6;
                *(_DWORD *)(v6 + 8) = a2;
                *(_DWORD *)(v6 + 12) = a3;
                *(_WORD *)(v6 + 16) = 0;
                *(_QWORD *)(v6 + 32) = 0;
                *(_QWORD *)(v6 + 40) = 0;
                *(_QWORD *)(v6 + 24) = 0;
                v8 = &off_1E5D30C08;
                goto LABEL_85;
              default:
                goto LABEL_90;
            }
        }
        return v7;
    }
  }
  switch((int)a1)
  {
    case 257:
      v7 = operator new();
      kaldi::nnet1::AffineTransform::AffineTransform((kaldi::nnet1::AffineTransform *)v7, a2, a3);
      return v7;
    case 258:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v7, a2, a3);
      return v7;
    case 259:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v7, a2, a3);
      return v7;
    case 260:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v7, a2, a3);
      return v7;
    case 261:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent((kaldi::nnet1::ConvolutionalComponent *)v7, a2, a3);
      return v7;
    case 262:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 263:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 264:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 265:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 266:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 267:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 268:
      v7 = operator new();
      kaldi::nnet1::WordVecComponent::WordVecComponent((kaldi::nnet1::WordVecComponent *)v7, a2, a3);
      return v7;
    case 269:
      v7 = operator new();
      kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)v7, a2, a3);
      return v7;
    case 270:
      v7 = operator new();
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(v7, a2, a3);
      return v7;
    case 271:
      v7 = operator new();
      *(_DWORD *)(v7 + 8) = a2;
      *(_DWORD *)(v7 + 12) = a3;
      *(_WORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)v7 = &off_1E5D305F8;
      *(_BYTE *)(v7 + 56) = 0;
      return v7;
    case 272:
      v7 = operator new();
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v7, a2, a3);
      return v7;
    case 273:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::Recurrent::Recurrent(v13, a2, a3);
      goto LABEL_71;
    case 274:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent((uint64_t)v13, a2, a3);
      goto LABEL_71;
    case 275:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v13, a2, a3);
      goto LABEL_71;
    case 276:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v13, a2, a3);
      goto LABEL_71;
    case 277:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(v13, a2, a3);
      goto LABEL_71;
    case 278:
      v14 = operator new();
      *(_DWORD *)(v14 + 56) = a2;
      *(_DWORD *)(v14 + 60) = a3;
      *(_WORD *)(v14 + 64) = 0;
      *(_QWORD *)(v14 + 72) = 0;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 120) = 0;
      *(_QWORD *)(v14 + 128) = 0;
      *(_QWORD *)(v14 + 136) = &unk_1E5D2C5B0;
      *(_DWORD *)(v14 + 144) = 1;
      *(_QWORD *)(v14 + 48) = &off_1E5D30A20;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 96) = &off_1E5D30AF0;
      *(_QWORD *)(v14 + 104) = &off_1E5D30B70;
      *(_QWORD *)(v14 + 112) = 0;
      *(_QWORD *)v14 = &off_1E5D308D0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      v7 = v14 + 48;
      *(_QWORD *)(v14 + 16) = &unk_1E5D341C8;
      *(_QWORD *)(v14 + 24) = 0;
      return v7;
    case 279:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(v13, a2, a3);
      goto LABEL_71;
    case 280:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(v13, a2, a3);
      goto LABEL_71;
    case 281:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(v13, a2, a3);
      goto LABEL_71;
    case 282:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(v13, a2, a3);
      goto LABEL_71;
    case 283:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(v13, a2, a3);
LABEL_71:
      v15 = *(_QWORD *)(*(_QWORD *)v13 - 24);
      goto LABEL_72;
    case 284:
      v7 = operator new();
      kaldi::nnet1::SharedNceComponent::SharedNceComponent((kaldi::nnet1::SharedNceComponent *)v7, a2, a3);
      return v7;
    case 285:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(v13, a2, a3);
      goto LABEL_58;
    case 286:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(v13, a2, a3);
      goto LABEL_58;
    case 287:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v13, a2, a3);
      goto LABEL_58;
    case 288:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::SelfAttention::SelfAttention((uint64_t)v13, a2, a3);
      goto LABEL_58;
    case 289:
      v13 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::AverageAttention::AverageAttention((uint64_t)v13, a2, a3);
LABEL_58:
      v15 = *(_QWORD *)(*(_QWORD *)v13 - 40);
LABEL_72:
      v7 = (uint64_t)v13 + v15;
      break;
    case 290:
      v7 = operator new();
      *(_DWORD *)(v7 + 8) = a2;
      *(_DWORD *)(v7 + 12) = a3;
      *(_WORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)v7 = &off_1E5D325C8;
      *(_DWORD *)(v7 + 48) = 730643660;
      *(_BYTE *)(v7 + 52) = 1;
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 56) = &unk_1E5D341C8;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      *(_QWORD *)(v7 + 88) = &unk_1E5D341C8;
      *(_QWORD *)(v7 + 96) = 0;
      break;
    default:
LABEL_90:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Missing type: ", 14);
      kaldi::nnet1::Component::TypeToMarker(a1, &v22);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (uint64_t)&v22);
      std::string::~string(&v22);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return v7;
}

void sub_1ADB5DE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40B638E8C8);
  _Unwind_Resume(a1);
}

void sub_1ADB5E124()
{
  JUMPOUT(0x1ADB5E198);
}

void sub_1ADB5E150()
{
  JUMPOUT(0x1ADB5E160);
}

void sub_1ADB5E16C()
{
  JUMPOUT(0x1ADB5E114);
}

void sub_1ADB5E188()
{
  JUMPOUT(0x1ADB5E114);
}

double kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 224) = a2;
  *((_DWORD *)this + 225) = a3;
  *((_WORD *)this + 452) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 111) = off_1E5D2E4A0;
  *((_QWORD *)this + 117) = &off_1E5D2D150;
  *((_OWORD *)this + 59) = xmmword_1AE13F660;
  *((_QWORD *)this + 120) = 0x3BF800000;
  *((_DWORD *)this + 242) = 1;
  *((_WORD *)this + 486) = 0;
  *((_BYTE *)this + 974) = 0;
  *(_QWORD *)this = off_1E5D2E5C8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = 1;
  *(_QWORD *)this = &unk_1E5D01240;
  *((_QWORD *)this + 111) = &unk_1E5D013E8;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1E5D2D9C8;
  *((_QWORD *)this + 111) = &off_1E5D2DC30;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &unk_1E5D34170;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 26) = &unk_1E5D34170;
  *((_BYTE *)this + 248) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 32) = &unk_1E5D34170;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = &unk_1E5D341C8;
  *((_QWORD *)this + 39) = 0;
  *((_WORD *)this + 168) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 75) = 0;
  *((_DWORD *)this + 152) = 1065353216;
  *(_QWORD *)((char *)this + 620) = 0;
  *(_QWORD *)((char *)this + 628) = 0;
  *(_QWORD *)((char *)this + 612) = 0;
  *(_QWORD *)((char *)this + 633) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  return result;
}

double kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this, int a2, int a3)
{
  uint64_t v3;
  double result;

  kaldi::nnet1::WordVecComponent::WordVecComponent(this, a2, a3);
  *(_QWORD *)v3 = &off_1E5D2E6F8;
  *(_QWORD *)(v3 + 88) = &unk_1E5D2E828;
  *(_DWORD *)(v3 + 384) = 1060320051;
  result = 0.0;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_QWORD *)(v3 + 392) = &unk_1E5D34170;
  *(_BYTE *)(v3 + 432) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_QWORD *)(v3 + 440) = &unk_1E5D34170;
  *(_BYTE *)(v3 + 480) = 0;
  return result;
}

double kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D2E910;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1008981770;
  *((_BYTE *)this + 172) = 0;
  return result;
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 134) = a2;
  *((_DWORD *)this + 135) = a3;
  *((_WORD *)this + 272) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 584) = xmmword_1AE13F660;
  *((_QWORD *)this + 75) = 0x3BF800000;
  *((_DWORD *)this + 152) = 1;
  *((_WORD *)this + 306) = 0;
  *((_BYTE *)this + 614) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = 0x100000001;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = &off_1E5D32690;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 66) = &off_1E5D328E0;
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)this + 20, a3, a2, 1, 0, 0);
  *((_QWORD *)this + 26) = &unk_1E5D341C8;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, a3, 1);
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 96) = 516;
  *((_WORD *)this + 194) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 49) = _D1;
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = &unk_1E5D34170;
  *((_BYTE *)this + 472) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  return this;
}

void sub_1ADB5E5DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v1, (uint64_t *)&off_1E5D150B0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3)
{
  double result;

  *((_QWORD *)this + 18) = off_1E5D32508;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = off_1E5D30D88;
  *(_QWORD *)this = &unk_1E5D01990;
  *((_QWORD *)this + 18) = &unk_1E5D01A78;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1E5D01990;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1E5D01B48;
  *((_QWORD *)this + 18) = &off_1E5D2E280;
  *((_QWORD *)this + 24) = &off_1E5D2E350;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)this = &off_1E5D2E150;
  *((_QWORD *)this + 1) = &unk_1E5D34170;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1E5D34170;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, int a3)
{
  *((_QWORD *)this + 19) = off_1E5D32508;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)this = off_1E5D30BE0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = off_1E5D30D88;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1E5D14E98);
  *((_QWORD *)this + 19) = &off_1E5D2DEB0;
  *(_QWORD *)this = &off_1E5D2DD80;
  *((_QWORD *)this + 25) = &off_1E5D2DF80;
  *((_DWORD *)this + 36) = -1;
  return this;
}

void sub_1ADB5E754(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  v1[19] = v3;
  v5 = (void *)v1[22];
  if (v5)
  {
    v1[23] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SelfAttention::SelfAttention(uint64_t this, int a2, int a3)
{
  *(_QWORD *)(this + 80) = off_1E5D32508;
  *(_DWORD *)(this + 88) = a2;
  *(_DWORD *)(this + 92) = a3;
  *(_WORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = off_1E5D30D88;
  *(_QWORD *)this = &unk_1E5D00B78;
  *(_QWORD *)(this + 80) = &unk_1E5D00C60;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1E5D00B78;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1E5D00D30;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1E5D2C5B0;
  *(_DWORD *)(this + 48) = 1;
  *(_QWORD *)(this + 128) = &off_1E5D2C588;
  *(_QWORD *)this = &off_1E5D2C2E8;
  *(_QWORD *)(this + 8) = &off_1E5D2C3A0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = &off_1E5D2C4B8;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, int a3)
{
  *((_QWORD *)this + 25) = off_1E5D32508;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_QWORD *)this = off_1E5D30BE0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = off_1E5D30D88;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1E5D15018);
  *(_QWORD *)this = &unk_1E5D02BE0;
  *((_QWORD *)this + 25) = &unk_1E5D02D10;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1E5D02BE0;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1E5D02DE0;
  *((_QWORD *)this + 25) = &off_1E5D30F08;
  *(_QWORD *)this = &off_1E5D30DD8;
  *((_QWORD *)this + 31) = &off_1E5D30FD8;
  *((_QWORD *)this + 18) = -1;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 19) = &unk_1E5D34170;
  *((_BYTE *)this + 192) = 0;
  return this;
}

void sub_1ADB5E8FC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  v1[25] = v3;
  v5 = (void *)v1[28];
  if (v5)
  {
    v1[29] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AverageAttention::AverageAttention(uint64_t this, int a2, int a3)
{
  *(_QWORD *)(this + 72) = off_1E5D32508;
  *(_DWORD *)(this + 80) = a2;
  *(_DWORD *)(this + 84) = a3;
  *(_WORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = off_1E5D30D88;
  *(_QWORD *)this = &unk_1E5D00D80;
  *(_QWORD *)(this + 72) = &unk_1E5D00E68;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1E5D00D80;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1E5D00F38;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1E5D2C5B0;
  *(_DWORD *)(this + 48) = 1;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = &off_1E5D2D058;
  *(_QWORD *)(this + 120) = &off_1E5D2D128;
  *(_QWORD *)this = &off_1E5D2CE88;
  *(_QWORD *)(this + 8) = &off_1E5D2CF40;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

void *kaldi::nnet1::Component::Delete(void *this, kaldi::nnet1::Component *a2)
{
  int v2;
  void *v3;
  uint64_t v4;
  kaldi::nnet1::Component *v5;
  const struct __class_type_info *v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  const void *v10;
  ptrdiff_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string __p;
  _QWORD v15[34];

  if (this)
  {
    v2 = (int)a2;
    v3 = this;
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)this + 24))(this);
    v5 = (kaldi::nnet1::Component *)v4;
    if ((int)v4 > 512)
    {
      switch((int)v4)
      {
        case 1025:
          goto LABEL_95;
        case 1026:
          goto LABEL_95;
        case 1027:
          goto LABEL_95;
        case 1028:
          goto LABEL_95;
        case 1029:
        case 1030:
          goto LABEL_12;
        case 1031:
          goto LABEL_95;
        case 1032:
          goto LABEL_95;
        case 1033:
          goto LABEL_95;
        case 1034:
          goto LABEL_95;
        case 1035:
          goto LABEL_95;
        case 1036:
          goto LABEL_95;
        case 1037:
          goto LABEL_95;
        case 1038:
          goto LABEL_95;
        case 1039:
          goto LABEL_95;
        case 1040:
          goto LABEL_95;
        case 1041:
          goto LABEL_95;
        case 1042:
          goto LABEL_95;
        default:
          switch((int)v4)
          {
            case 513:
              break;
            case 514:
              break;
            case 515:
              break;
            case 516:
              break;
            case 517:
              break;
            case 518:
              break;
            case 519:
              break;
            case 520:
              break;
            case 521:
              break;
            case 522:
              break;
            case 523:
              break;
            case 524:
              break;
            case 525:
              break;
            default:
              switch((int)v4)
              {
                case 2048:
                  goto LABEL_95;
                case 2049:
                  goto LABEL_95;
                case 2050:
                  goto LABEL_95;
                case 2051:
                  goto LABEL_95;
                case 2052:
                  goto LABEL_95;
                case 2053:
                  goto LABEL_95;
                case 2054:
                  goto LABEL_95;
                case 2055:
                  goto LABEL_81;
                case 2056:
                  goto LABEL_95;
                case 2057:
                  goto LABEL_95;
                case 2058:
                  goto LABEL_95;
                default:
                  goto LABEL_12;
              }
          }
          goto LABEL_95;
      }
    }
    switch((int)v4)
    {
      case 257:
        goto LABEL_95;
      case 258:
        goto LABEL_95;
      case 259:
        goto LABEL_95;
      case 260:
        goto LABEL_95;
      case 261:
        goto LABEL_95;
      case 262:
        goto LABEL_95;
      case 263:
        goto LABEL_95;
      case 264:
        goto LABEL_95;
      case 265:
        goto LABEL_95;
      case 266:
        goto LABEL_95;
      case 267:
        goto LABEL_95;
      case 268:
        goto LABEL_95;
      case 269:
        goto LABEL_95;
      case 270:
        goto LABEL_95;
      case 271:
        goto LABEL_95;
      case 272:
        goto LABEL_95;
      case 273:
        goto LABEL_81;
      case 274:
        goto LABEL_81;
      case 275:
        goto LABEL_81;
      case 276:
        goto LABEL_81;
      case 277:
        goto LABEL_81;
      case 278:
        goto LABEL_81;
      case 279:
        goto LABEL_81;
      case 280:
        goto LABEL_81;
      case 281:
        goto LABEL_81;
      case 282:
        goto LABEL_81;
      case 283:
        goto LABEL_81;
      case 284:
        goto LABEL_95;
      case 285:
        goto LABEL_81;
      case 286:
        goto LABEL_81;
      case 287:
        goto LABEL_81;
      case 288:
        goto LABEL_81;
      case 289:
LABEL_81:
        v10 = v3;
        v11 = -1;
        goto LABEL_96;
      case 290:
LABEL_95:
        v10 = v3;
        v11 = 0;
LABEL_96:
        if (this)
          this = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)this + 8))(this);
        break;
      default:
LABEL_12:
        if (!v2)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Missing type: ", 14);
          v12 = (_QWORD *)std::ostream::operator<<();
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
          kaldi::nnet1::Component::TypeToMarker(v5, &__p);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)&__p);
          std::string::~string(&__p);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Missing type: ", 14);
          kaldi::nnet1::Component::TypeToMarker(v5, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
        }
        this = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 8))(v3);
        break;
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Component::Init(const std::string *a1, uint64_t a2)
{
  kaldi::nnet1::Component *v3;
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[35];
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[12];
  char v15;
  uint64_t v16;

  std::istringstream::basic_istringstream[abi:ne180100](v14, a1, 8);
  __p = 0;
  v12 = 0;
  v13 = 0;
  v10 = 0;
  kaldi::ReadToken(v14, 0, (uint64_t)&__p);
  v3 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Initializing component of type ", 31);
    if (v13 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v13 >= 0)
      v6 = HIBYTE(v13);
    else
      v6 = v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::ExpectToken(v14, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(v14, 0, (uint64_t)&v10 + 4);
  kaldi::ExpectToken(v14, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(v14, 0, (uint64_t)&v10);
  v7 = kaldi::nnet1::Component::NewComponentOfType(v3, HIDWORD(v10), v10);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 96))(v7, v14, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  v14[0] = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v14[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v16);
  return v7;
}

void sub_1ADB5F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a51 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned __int16 *p_p;
  uint64_t v8;
  int v9;
  int v10;
  int *v12;
  int v13;
  int v14;
  kaldi::nnet1::Component *v16;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  __p = 0;
  v19 = 0;
  if (kaldi::Peek(a1, a2) == -1)
    return 0;
  kaldi::ReadToken(a1, a2, (uint64_t)&__p);
  v6 = HIBYTE(v20);
  if (SHIBYTE(v20) < 0)
  {
    if (v19 != 6)
      goto LABEL_16;
    p_p = (unsigned __int16 *)__p;
  }
  else
  {
    if (HIBYTE(v20) != 6)
      goto LABEL_13;
    p_p = (unsigned __int16 *)&__p;
  }
  v9 = *(_DWORD *)p_p;
  v10 = p_p[2];
  if (v9 == 1701727804 && v10 == 15988)
  {
    kaldi::ReadToken(a1, a2, (uint64_t)&__p);
    v6 = HIBYTE(v20);
    if ((v20 & 0x8000000000000000) == 0)
    {
LABEL_13:
      if (v6 == 7)
      {
        v12 = (int *)&__p;
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  else if ((v20 & 0x8000000000000000) == 0)
  {
    goto LABEL_13;
  }
LABEL_16:
  if (v19 == 7)
  {
    v12 = (int *)__p;
LABEL_18:
    v13 = *v12;
    v14 = *(int *)((char *)v12 + 3);
    if (v13 == 1850617660 && v14 == 1047815534)
    {
      v8 = 0;
      if ((v6 & 0x80) == 0)
        return v8;
      goto LABEL_23;
    }
  }
LABEL_22:
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v21 + 4);
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v21);
  v16 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  v8 = kaldi::nnet1::Component::NewComponentOfType(v16, v21, HIDWORD(v21));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 160))(v8, a1, a2, a3);
  if (v20 < 0)
LABEL_23:
    operator delete(__p);
  return v8;
}

void sub_1ADB5F550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::Write(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Component *v8;
  std::string __p;

  v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v8, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4);
}

void sub_1ADB5F630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, int *a2, float a3)
{
  float v6;
  _QWORD v7[34];

  if (a3 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_9;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "either the gradient or the gradient norm data is not initialized");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, a1, 111);
  kaldi::CuMatrixBase<float>::ApplyPow((uint64_t)a2, 2.0);
  v6 = sqrtf(kaldi::CuMatrixBase<float>::Sum((uint64_t)a2));
  if (v6 > a3)
    kaldi::CuMatrixBase<float>::Scale(a1, a3 / v6);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, _QWORD *a2, float a3)
{
  float v6;
  _QWORD v7[34];

  if (a3 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_9;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "either the gradient or the gradient norm data is not initialized");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a2, a1);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)a2, 2.0);
  v6 = sqrtf(kaldi::CuVectorBase<float>::Sum((uint64_t)a2));
  if (v6 > a3)
    kaldi::CuVectorBase<float>::Scale(a1, a3 / v6);
}

uint64_t kaldi::nnet1::UpdatableComponent::ClipGradient(uint64_t a1, float a2)
{
  _QWORD v5[34];

  if (a2 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_6;
  }
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuMatrixBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuMatrixBase<float>::ApplyFloor(a1, -a2);
}

{
  _QWORD v5[34];

  if (a2 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_6;
  }
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuVectorBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuVectorBase<float>::ApplyFloor(a1, -a2);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3)
{
  _QWORD v6[34];

  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "either the gradient or the gradient norm data is not initialized");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  kaldi::CuMatrixBase<float>::AddMatEwpMat(a2, a1, 111, a1, 111, 1.0 - a3, a3);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuMatrixBase<float>::DivElements(a1, a2);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, 2.0);
}

{
  _QWORD v6[34];

  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "either the gradient or the gradient norm data is not initialized");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  kaldi::CuVectorBase<float>::AddVecVec(a2, a1, a1, 1.0 - a3, a3);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuVectorBase<float>::DivElements(a1, a2);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 2.0);
}

uint64_t kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable8BitComponentItf *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::Quantizable8BitComponentItf *))(*(_QWORD *)this + 16))(this);
}

void kaldi::nnet1::Component::~Component(kaldi::nnet1::Component *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::MaxPooling2DComponent::~MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::AddShift::~AddShift(kaldi::nnet1::AddShift *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D32320;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::AddShift::~AddShift(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::UpdatableComponent::~UpdatableComponent(kaldi::nnet1::UpdatableComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D2E4A0;
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::UpdatableComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::AveragePooling2DComponent::~AveragePooling2DComponent(kaldi::nnet1::AveragePooling2DComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::AveragePoolingComponent::~AveragePoolingComponent(kaldi::nnet1::AveragePoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::BlockSoftmax::~BlockSoftmax(kaldi::nnet1::BlockSoftmax *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5D2B420;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E5D32508;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(kaldi::nnet1::CompressedWordVecComponent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D305F8;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordVecComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D2EDA8;
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 216);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 192);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 104);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::CopyComponent::~CopyComponent(kaldi::nnet1::CopyComponent *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5D2B5A0;
  v2 = (_QWORD *)((char *)this + 48);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)this = off_1E5D32508;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::CopyComponent::~CopyComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Desplice::~Desplice(kaldi::nnet1::Desplice *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E5D32448;
  v2 = (_QWORD *)((char *)this + 136);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    free(v4);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
    free(v5);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
    free(v6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_1E5D32508;
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  kaldi::nnet1::Desplice::~Desplice(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Dropout::~Dropout(kaldi::nnet1::Dropout *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D31ED0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuRand<float>::~CuRand((uint64_t)this + 48);
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::Dropout::~Dropout(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::DuplicateComponent::~DuplicateComponent(kaldi::nnet1::DuplicateComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  *(_QWORD *)this = &off_1E5D2E6F8;
  *((_QWORD *)this + 11) = &unk_1E5D2E828;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
}

{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  *(_QWORD *)this = &off_1E5D2D230;
  *((_QWORD *)this + 11) = &unk_1E5D2D360;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));
}

{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D2E910;
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::HistoricalComponent::~HistoricalComponent(kaldi::nnet1::HistoricalComponent *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_1E5D2E5C8;
  v1 = (void **)((char *)this + 8);
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoricalComponent *)((char *)this + 32));
  v2 = v1;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void kaldi::nnet1::IdentityComponent::~IdentityComponent(kaldi::nnet1::IdentityComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::InterpolationComponent::~InterpolationComponent(kaldi::nnet1::InterpolationComponent *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E5D2EED0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E5D32508;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  kaldi::nnet1::InterpolationComponent::~InterpolationComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::KlHmm::~KlHmm(kaldi::nnet1::KlHmm *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D31D50;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::KlHmm::~KlHmm(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::LogSoftmax::~LogSoftmax(kaldi::nnet1::LogSoftmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::MaxoutComponent::~MaxoutComponent(kaldi::nnet1::MaxoutComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::MaxPoolingComponent::~MaxPoolingComponent(kaldi::nnet1::MaxPoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::MultiSoftmax::~MultiSoftmax(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Nnet1InferenceNet::~Nnet1InferenceNet(kaldi::nnet1::Nnet1InferenceNet *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D2D448;
  v2 = (void *)*((_QWORD *)this + 49);
  if (v2)
  {
    *((_QWORD *)this + 50) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::nnet1::Nnet1InferenceNet::~Nnet1InferenceNet(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this, uint64_t *a2)
{
  uint64_t v4;
  void **v5;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_QWORD *)this + 20) = &off_1E5D2D678;
  *((_QWORD *)this + 21) = &unk_1E5D2D6A0;
  v5 = (void **)((char *)this + 184);
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  uint64_t v3;
  void **v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  v4 = (void **)((char *)this + 128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 104);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1E5D2E5C8;
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 32));
  v4 = (void **)((char *)this + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 48));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 40));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void kaldi::nnet1::PNormComponent::~PNormComponent(kaldi::nnet1::PNormComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Rbm::~Rbm(kaldi::nnet1::Rbm *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D31B38;
  *((_QWORD *)this + 33) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 264);
  *((_QWORD *)this + 29) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 232);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 184);
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  *((_QWORD *)this + 15) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::Rbm::~Rbm(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::RectifiedLinearComponent::~RectifiedLinearComponent(kaldi::nnet1::RectifiedLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::ExponentialLinearComponent::~ExponentialLinearComponent(kaldi::nnet1::ExponentialLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::~ScaledExponentialLinearComponent(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  v6 = (void **)((char *)this + 504);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 480);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  v5 = (void *)*((_QWORD *)this + 51);
  if (v5)
  {
    *((_QWORD *)this + 52) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 312);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((_QWORD *)this + 26) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  kaldi::nnet1::Recurrent::~Recurrent((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t a2)
{
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)((char *)this + 16), (uint64_t *)(a2 + 24));
}

void kaldi::nnet1::RelaxedSoftmax::~RelaxedSoftmax(kaldi::nnet1::RelaxedSoftmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Rescale::~Rescale(kaldi::nnet1::Rescale *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D32078;
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::Rescale::~Rescale(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::SentenceAveragingComponent::~SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this)
{
  *(_QWORD *)this = &off_1E5D30778;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  *(_QWORD *)this = &off_1E5D30778;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::SharedNceComponent::~SharedNceComponent(kaldi::nnet1::SharedNceComponent *this)
{
  *(_QWORD *)this = &off_1E5D2E378;
  *((_QWORD *)this + 47) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 376);
  *((_QWORD *)this + 43) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 344);
  *((_QWORD *)this + 39) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  *((_QWORD *)this + 17) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 136);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::SharedNceComponent::~SharedNceComponent(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Sigmoid::~Sigmoid(kaldi::nnet1::Sigmoid *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Softmax::~Softmax(kaldi::nnet1::Softmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Splice::~Splice(kaldi::nnet1::Splice *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5D31E10;
  v2 = (_QWORD *)((char *)this + 48);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)this = off_1E5D32508;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::Splice::~Splice(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::Tanh::~Tanh(kaldi::nnet1::Tanh *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::TemporalMaxPoolingComponent::~TemporalMaxPoolingComponent(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
}

{
  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D30CC8;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordTransComponent *)((char *)this + 80));
  *((_QWORD *)this + 6) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 48);
  *(_QWORD *)this = off_1E5D32508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::HistoricalComponent::GetHistoryOptions(kaldi::nnet1::HistoricalComponent *this)
{
  return (uint64_t)this + 32;
}

uint64_t kaldi::nnet1::HistoricalComponent::SetHistoryOptions(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t kaldi::nnet1::RelaxedSoftmax::Copy(kaldi::nnet1::RelaxedSoftmax *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(v2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((float *)this + 12));
  return v2;
}

void sub_1ADB615E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::GetType(kaldi::nnet1::RelaxedSoftmax *this)
{
  return 523;
}

float kaldi::nnet1::RelaxedSoftmax::InitData(uint64_t a1, uint64_t *a2)
{
  float result;
  _QWORD v5[34];

  kaldi::ExpectToken(a2, 0, "<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
  result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

_QWORD *kaldi::nnet1::RelaxedSoftmax::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<RelaxFactor>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, *(float *)(a1 + 48), 0.0);
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a3);
}

float kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuVectorBase<float>::AddVec(a3, a2, *(float *)(a1 + 48), 0.0);
  return kaldi::CuVectorBase<float>::ApplySoftMax(a3);
}

void kaldi::nnet1::RelaxedSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::AddMat(a5, a4, 111, *(float *)(a1 + 48), 0.0);
}

float kaldi::nnet1::RelaxedSoftmax::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  float result;
  _QWORD v7[34];

  kaldi::ExpectToken(a2, a3, "<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
  result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::nnet1::LogSoftmax::Copy(kaldi::nnet1::LogSoftmax *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2B360;
  return v2;
}

void sub_1ADB618A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LogSoftmax::GetType(kaldi::nnet1::LogSoftmax *this)
{
  return 514;
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a3);
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);
  kaldi::CuVectorBase<float>::ApplyLog((uint64_t)a3);
}

int *kaldi::nnet1::LogSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

uint64_t kaldi::nnet1::Softmax::Copy(kaldi::nnet1::Softmax *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D32260;
  return v2;
}

void sub_1ADB619D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Softmax::GetType(kaldi::nnet1::Softmax *this)
{
  return 513;
}

uint64_t kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2);
}

float kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
}

int *kaldi::nnet1::Softmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::Copy(kaldi::nnet1::BlockSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax *v2;

  v2 = (kaldi::nnet1::BlockSoftmax *)operator new();
  kaldi::nnet1::BlockSoftmax::BlockSoftmax(v2, this);
  return v2;
}

void sub_1ADB61A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::GetType(kaldi::nnet1::BlockSoftmax *this)
{
  return 515;
}

void kaldi::nnet1::BlockSoftmax::InitData(std::vector<int> *this, uint64_t *a2)
{
  uint64_t *v4;
  std::vector<int> *v5;
  BOOL v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[34];
  __int128 v18;
  uint64_t v19;

  v18 = 0uLL;
  v19 = 0;
  v4 = a2 + 4;
  v5 = this + 2;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_26;
    kaldi::ReadToken(a2, 0, (uint64_t)&v18);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      break;
    if (*((_QWORD *)&v18 + 1) != 11
      || (*(_QWORD *)v18 == 0x69446B636F6C423CLL ? (v7 = *(_QWORD *)(v18 + 3) == 0x3E736D69446B636FLL) : (v7 = 0), !v7))
    {
      if (*((_QWORD *)&v18 + 1) == 12)
      {
        v8 = (__int128 *)v18;
        goto LABEL_21;
      }
LABEL_29:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown token ", 14);
      if (v19 >= 0)
        v13 = &v18;
      else
        v13 = (__int128 *)v18;
      if (v19 >= 0)
        v14 = HIBYTE(v19);
      else
        v14 = *((_QWORD *)&v18 + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" (BlockDims)", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
LABEL_16:
    kaldi::ReadIntegerVector<int>(a2, 0, v5, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v19) == 11)
  {
    if ((_QWORD)v18 != 0x69446B636F6C423CLL || *(_QWORD *)((char *)&v18 + 3) != 0x3E736D69446B636FLL)
      goto LABEL_29;
    goto LABEL_16;
  }
  if (HIBYTE(v19) != 12)
    goto LABEL_29;
  v8 = &v18;
LABEL_21:
  v9 = *(_QWORD *)v8;
  v10 = *((_DWORD *)v8 + 2);
  if (v9 != 0x6E6F706D6F432F3CLL || v10 != 1047817829)
    goto LABEL_29;
LABEL_26:
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
}

void sub_1ADB61C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  return kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2, *(_QWORD *)(a1 + 48));
}

void kaldi::nnet1::BlockSoftmax::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[5];

  v3 = a1[6];
  if (a1[7] != v3)
  {
    v7 = 0;
    do
    {
      v8 = a1[9];
      v9 = *(unsigned int *)(v8 + 4 * v7);
      v10 = *(_QWORD *)(a2 + 8) + 4 * v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 28) - v9;
      v11 = *(_QWORD *)(a2 + 32);
      LODWORD(v16[2]) = *(_DWORD *)(v3 + 4 * v7);
      *(_QWORD *)((char *)&v16[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v16[3]) = v9;
      v16[4] = v11;
      v16[0] = &unk_1E5D29D40;
      v16[1] = v10;
      v12 = *(unsigned int *)(v8 + 4 * v7);
      v13 = *(_QWORD *)(a3 + 8) + 4 * v12;
      LODWORD(v12) = *(_DWORD *)(a3 + 28) - v12;
      v14 = *(_QWORD *)(a3 + 32);
      LODWORD(v15[2]) = *(_DWORD *)(v3 + 4 * v7);
      *(_QWORD *)((char *)&v15[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v15[3]) = v12;
      v15[4] = v14;
      v15[0] = &unk_1E5D29D40;
      v15[1] = v13;
      kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)v15, (uint64_t)v16);
      v15[0] = &unk_1E5D29D40;
      memset(&v15[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
      v16[0] = &unk_1E5D29D40;
      memset(&v16[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
      ++v7;
      v3 = a1[6];
    }
    while (v7 < (a1[7] - v3) >> 2);
  }
}

void sub_1ADB61E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;

  a9 = v16 + 16;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v16 + 16;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a4, 111);
  v7 = a1[6];
  if (a1[7] != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(a1[9] + 4 * v8);
      v10 = *(_QWORD *)(a5 + 8) + 4 * v9;
      LODWORD(v9) = *(_DWORD *)(a5 + 28) - v9;
      v11 = *(_QWORD *)(a5 + 32);
      LODWORD(v16[2]) = *(_DWORD *)(v7 + 4 * v8);
      *(_QWORD *)((char *)&v16[2] + 4) = *(_QWORD *)(a5 + 20);
      HIDWORD(v16[3]) = v9;
      v16[4] = v11;
      v16[0] = &unk_1E5D29D40;
      v16[1] = v10;
      v13[1] = 0;
      v14 = 0;
      v13[0] = &unk_1E5D341C8;
      v15 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, HIDWORD(v16[2]), 0);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v13, (uint64_t)v16, 1.0, 0.0);
      v12[1] = 0;
      v12[2] = 0;
      v12[0] = &unk_1E5D341C8;
      v12[3] = v15;
      kaldi::CuVector<float>::Resize((uint64_t)v12, v14, 1);
      kaldi::CuVectorBase<float>::CopyFromVec(v12, (uint64_t)v13);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v12, -1.0);
      kaldi::CuVectorBase<float>::Add((uint64_t)v12, 1.0);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)v16, (uint64_t)v12);
      v12[0] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v12);
      v13[0] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v13);
      v16[0] = &unk_1E5D29D40;
      memset(&v16[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
      ++v8;
      v7 = a1[6];
    }
    while (v8 < (a1[7] - v7) >> 2);
  }
}

void sub_1ADB61FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _OWORD *v18;

  kaldi::CuVector<float>::~CuVector(&a14);
  a18 = &unk_1E5D29D40;
  *v18 = 0u;
  v18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::ReadData(std::vector<int> *a1, _QWORD *a2, int a3)
{
  kaldi::ReadIntegerVector<int>(a2, a3, a1 + 2, 0, 0, 0, 0);
  kaldi::nnet1::BlockSoftmax::InitOffset(a1);
}

uint64_t kaldi::nnet1::Sigmoid::Copy(kaldi::nnet1::Sigmoid *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D321A0;
  return v2;
}

void sub_1ADB620F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Sigmoid::GetType(kaldi::nnet1::Sigmoid *this)
{
  return 516;
}

void kaldi::nnet1::Sigmoid::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::Sigmoid(a3, a2);
}

{
  kaldi::CuVectorBase<float>::Sigmoid(a3, a2);
}

uint64_t *kaldi::nnet1::Sigmoid::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffSigmoid(a5, a3, a4);
}

uint64_t kaldi::nnet1::Tanh::Copy(kaldi::nnet1::Tanh *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D31C20;
  return v2;
}

void sub_1ADB621B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Tanh::GetType(kaldi::nnet1::Tanh *this)
{
  return 517;
}

void kaldi::nnet1::Tanh::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::Tanh(a3, a2);
}

{
  kaldi::CuVectorBase<float>::Tanh(a3, a2);
}

uint64_t *kaldi::nnet1::Tanh::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffTanh(a5, a3, a4);
}

uint64_t kaldi::nnet1::Dropout::Copy(kaldi::nnet1::Dropout *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D31ED0;
  v4 = *((_OWORD *)this + 4);
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_OWORD *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 80) = *((_DWORD *)this + 20);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 88, (char *)this + 88, 111);
  *(_QWORD *)(v2 + 136) = *((_QWORD *)this + 17);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 144, (char *)this + 144, 111);
  *(_DWORD *)(v2 + 192) = *((_DWORD *)this + 48);
  return v2;
}

void sub_1ADB622C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  kaldi::CuRand<float>::~CuRand(v2);
  *v1 = v3;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1AF44D190](v1, 0x1091C4081AB2DD6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Dropout::GetType(kaldi::nnet1::Dropout *this)
{
  return 518;
}

void kaldi::nnet1::Dropout::InitData(uint64_t a1, _QWORD *a2)
{
  float *v4;
  char v5;
  BOOL v8;
  BOOL v9;
  _QWORD **v10;
  uint64_t v11;
  int v12;
  _QWORD *v14;
  _QWORD **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  v20 = 0;
  v21 = 0;
  v4 = (float *)(a1 + 192);
  v22 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
    {
      v5 = HIBYTE(v22);
      goto LABEL_33;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v20);
    v5 = HIBYTE(v22);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      break;
    if (v21 != 18
      || (*v20 == 0x74756F706F72443CLL ? (v8 = v20[1] == 0x6F69746E65746552) : (v8 = 0),
          v8 ? (v9 = *((unsigned __int16 *)v20 + 8) == 15982) : (v9 = 0),
          !v9))
    {
      if (v21 == 12)
      {
        v10 = (_QWORD **)v20;
        goto LABEL_28;
      }
LABEL_36:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unknown token ", 14);
      if (v22 >= 0)
        v15 = &v20;
      else
        v15 = (_QWORD **)v20;
      if (v22 >= 0)
        v16 = HIBYTE(v22);
      else
        v16 = v21;
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (DropoutRetention)", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
LABEL_22:
    kaldi::ReadBasicType<float>(a2, 0, v4);
  }
  if (HIBYTE(v22) == 18)
  {
    if (v20 != (_QWORD *)0x74756F706F72443CLL || v21 != 0x6F69746E65746552 || (unsigned __int16)v22 != 15982)
      goto LABEL_36;
    goto LABEL_22;
  }
  if (HIBYTE(v22) != 12)
    goto LABEL_36;
  v10 = &v20;
LABEL_28:
  v11 = (uint64_t)*v10;
  v12 = *((_DWORD *)v10 + 2);
  if (v11 != 0x6E6F706D6F432F3CLL || v12 != 1047817829)
    goto LABEL_36;
LABEL_33:
  if (v5 < 0)
    operator delete(v20);
}

void sub_1ADB624F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::Dropout::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<DropoutRetention>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::Dropout::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 144), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::Set(a1 + 144, *(float *)(a1 + 192));
  kaldi::CuRand<float>::BinarizeProbs(a1 + 48, a1 + 144, a1 + 144);
  kaldi::CuMatrixBase<float>::MulElements(a3, a1 + 144);
  kaldi::CuMatrixBase<float>::Scale(a3, 1.0 / *(float *)(a1 + 192));
}

void kaldi::nnet1::Dropout::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a1 + 144);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, 1.0 / *(float *)(a1 + 192));
}

float kaldi::nnet1::Dropout::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  float result;

  if (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ExpectToken(a2, a3, "<DropoutRetention>");
    return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 192));
  }
  return result;
}

double kaldi::nnet1::MaxoutComponent::Copy(kaldi::nnet1::MaxoutComponent *this)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = *((double *)this + 1);
  *(double *)(v2 + 8) = result;
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1E5D2CDA0;
  return result;
}

uint64_t kaldi::nnet1::MaxoutComponent::GetType(kaldi::nnet1::MaxoutComponent *this)
{
  return 519;
}

uint64_t *kaldi::nnet1::MaxoutComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::MaxoutForward(a3, a2);
}

void kaldi::nnet1::MaxoutComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::MaxoutDerivative(a5, a2, a3);
  kaldi::CuMatrixBase<float>::MulRowsGroupMat(a5, a4);
}

float kaldi::nnet1::PNormComponent::Copy(kaldi::nnet1::PNormComponent *this)
{
  uint64_t v2;
  float result;

  v2 = operator new();
  result = *((float *)this + 12);
  *(_QWORD *)(v2 + 8) = *((_QWORD *)this + 1);
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1E5D2C5D0;
  *(float *)(v2 + 48) = result;
  return result;
}

uint64_t kaldi::nnet1::PNormComponent::GetType(kaldi::nnet1::PNormComponent *this)
{
  return 521;
}

float kaldi::nnet1::PNormComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, "<P>");
  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
}

_QWORD *kaldi::nnet1::PNormComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<P>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::PNormComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::GroupPnorm(a3, a2, *(float *)(a1 + 48));
}

void kaldi::nnet1::PNormComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::GroupPnormDeriv(a5, a2, a3, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::MulRowsGroupMat(a5, a4);
}

float kaldi::nnet1::PNormComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<P>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::Copy(kaldi::nnet1::RectifiedLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D30438;
  return v2;
}

void sub_1ADB6292C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::GetType(kaldi::nnet1::RectifiedLinearComponent *this)
{
  return 520;
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  return kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffRelu(a5, a3, a4);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::Copy(kaldi::nnet1::ExponentialLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D306B8;
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  return v2;
}

void sub_1ADB62A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::GetType(kaldi::nnet1::ExponentialLinearComponent *this)
{
  return 524;
}

float kaldi::nnet1::ExponentialLinearComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, "<Alpha>");
  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
}

_QWORD *kaldi::nnet1::ExponentialLinearComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<Alpha>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v7, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v7, 111, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADB62BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[4];

  v6 = *(unsigned int *)(a3 + 16);
  v7[0] = &unk_1E5D341C8;
  memset(&v7[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v7, v6, 0);
  kaldi::CuVectorBase<float>::CopyFromVec(v7, a2);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuVectorBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)a3, a2);
  kaldi::CuVectorBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v7, 1.0, 1.0);
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
}

void sub_1ADB62CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int32x2_t v10[6];
  int32x2_t v11[6];

  kaldi::CuMatrix<float>::CuMatrix(v11, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v11, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v11, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v11, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v11, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v10, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v10);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v10, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v10, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside(a5);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v11, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v10, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements(a5, a4);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1ADB62DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::ExponentialLinearComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<Alpha>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::Copy(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D31888;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  return v2;
}

void sub_1ADB62EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4071A33DADLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::GetType(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  return 525;
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v7, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v7, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, *(float *)(a1 + 52));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADB62FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[4];

  v6 = *(unsigned int *)(a3 + 16);
  v7[0] = &unk_1E5D341C8;
  memset(&v7[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v7, v6, 0);
  kaldi::CuVectorBase<float>::CopyFromVec(v7, a2);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuVectorBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)a3, a2);
  kaldi::CuVectorBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v7, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Scale(a3, *(float *)(a1 + 52));
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
}

void sub_1ADB630D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int32x2_t v10[6];
  int32x2_t v11[6];

  kaldi::CuMatrix<float>::CuMatrix(v11, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v11, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v11, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v11, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v11, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v10, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v10);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v10, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v10, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside(a5);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v11, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v10, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 52));
  kaldi::CuMatrixBase<float>::MulElements(a5, a4);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1ADB6322C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::InputDim(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return *(unsigned int *)(kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8), 0) + 8);
}

void kaldi::nnet1::Nnet1InferenceNet::Feedforward(uint64_t a1, uint64_t a2, int32x2_t *a3, int a4)
{
  int v4;

  if (a4)
    v4 = *(_DWORD *)(a1 + 384);
  else
    v4 = -1;
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, a3, v4, 0);
}

_QWORD *kaldi::nnet1::Nnet1InferenceNet::Feedforward(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  int v4;

  if (a4)
    v4 = *(_DWORD *)(a1 + 384);
  else
    v4 = -1;
  return kaldi::nnet1::Nnet::Feedforward((_QWORD *)(a1 + 8), a2, a3, v4);
}

void kaldi::nnet1::Nnet1InferenceNet::MultiIOFeedforward()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implmented! Should not be called!!!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implmented! Should not be called!!!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return kaldi::nnet1::Component::GetUnitOutput(*(_DWORD **)(a1 + 416), a2, a3, a4);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::Component::GetUnitOutput(*(_DWORD **)(a1 + 416), a2, a3);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetOutput(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  return kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 416), a2, a3, 0);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::ResetHistoryState(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 392);
  v2 = *(uint64_t **)(this + 400);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  return this;
}

BOOL kaldi::nnet1::Nnet1InferenceNet::IsRnn(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return *((_QWORD *)this + 49) != *((_QWORD *)this + 50);
}

BOOL kaldi::nnet1::Nnet1InferenceNet::IsFofeNet(kaldi::nnet1::Nnet1InferenceNet *this)
{
  uint64_t v2;
  uint64_t v3;
  kaldi::nnet1::Nnet *v4;
  uint64_t Component;

  if (((*(uint64_t (**)(kaldi::nnet1::Nnet1InferenceNet *))(*(_QWORD *)this + 160))(this) & 1) != 0)
    return 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = (kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8);
  if ((int)((unint64_t)(v3 - v2) >> 3) < 1)
    return 0;
  Component = kaldi::nnet1::Nnet::GetComponent(v4, 0);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) == 269;
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::OutputDim(kaldi::nnet1::Nnet1InferenceNet *this, int a2)
{
  uint64_t v2;

  v2 = 12;
  if (a2)
    v2 = 8;
  return *(unsigned int *)(*((_QWORD *)this + 52) + v2);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::HasMultiOutputs(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return 0;
}

uint64_t kaldi::nnet1::Splice::Copy(kaldi::nnet1::Splice *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D31E10;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48);
  return v2;
}

void sub_1ADB634A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1AF44D190](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Splice::GetType(kaldi::nnet1::Splice *this)
{
  return 1026;
}

uint64_t kaldi::nnet1::Splice::Info@<X0>(const void **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  frame_offsets ", 17);
  kaldi::operator<<<int>(v4, this + 6);
  std::stringbuf::str();
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = (char)v5;
  v7 = (std::string::size_type)a2 + v5;
  if (v6 >= 0)
  {
    v8 = (std::string::size_type)a2;
  }
  else
  {
    v7 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v8 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v8 + v7, 1uLL);
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADB635E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Splice::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *p_p;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  __int128 *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  std::vector<int>::pointer v25;
  int *v26;
  int v27;
  int v28;
  std::vector<int>::pointer v29;
  int *v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  std::vector<int>::pointer end;
  int *v43;
  std::vector<int>::pointer begin;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  int *v50;
  int v51;
  std::vector<int>::pointer v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  int *v58;
  int v59;
  _QWORD *v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *__p;
  uint64_t v67;
  uint64_t v68;
  std::vector<unsigned int> v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  std::vector<int> v75;

  memset(&v75, 0, sizeof(v75));
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v3 = a2 + 4;
  v70 = 0uLL;
  v71 = 0;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v70);
    if (SHIBYTE(v71) < 0)
      break;
    if (HIBYTE(v71) != 12)
    {
      if (HIBYTE(v71) == 13)
      {
        v4 = (_QWORD)v70 == 0x6556646C6975423CLL && *(_QWORD *)((char *)&v70 + 5) == 0x3E726F7463655664;
        if (v4)
          goto LABEL_22;
      }
      goto LABEL_128;
    }
    if ((_QWORD)v70 != 0x636556646165523CLL || DWORD2(v70) != 1047687028)
    {
      v16 = &v70;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v75, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v5 = *((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1) == 12 && *(_QWORD *)v70 == 0x636556646165523CLL && *(_DWORD *)(v70 + 8) == 1047687028)
    goto LABEL_48;
  if (*((_QWORD *)&v70 + 1) != 13)
    goto LABEL_50;
  if (*(_QWORD *)v70 == 0x6556646C6975423CLL && *(_QWORD *)(v70 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_49;
      __p = 0;
      v67 = 0;
      v68 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p);
      if (SHIBYTE(v68) < 0)
      {
        if (v67 != 14)
          goto LABEL_32;
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v68) != 14)
          goto LABEL_32;
        p_p = (uint64_t *)&__p;
      }
      v9 = *p_p;
      v10 = *(uint64_t *)((char *)p_p + 6);
      if (v9 == 0x56646C6975422F3CLL && v10 == 0x3E726F7463655664)
      {
        v14 = 0;
        if (v68 < 0)
          goto LABEL_41;
LABEL_38:
        if ((v14 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
LABEL_32:
        memset(&v69, 0, sizeof(v69));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v69);
        v12 = v73;
        if ((unint64_t)v73 >= v74)
        {
          v13 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v72, (uint64_t)&v69);
        }
        else
        {
          *v73 = 0;
          v12[1] = 0;
          v12[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, v69.__begin_, (uint64_t)v69.__end_, v69.__end_ - v69.__begin_);
          v13 = (uint64_t)(v12 + 3);
        }
        v73 = (_QWORD *)v13;
        if (v69.__begin_)
        {
          v69.__end_ = v69.__begin_;
          operator delete(v69.__begin_);
        }
        v14 = 1;
        if ((v68 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_41:
        operator delete(__p);
        if ((v14 & 1) == 0)
          goto LABEL_49;
      }
    }
  }
  v5 = *((_QWORD *)&v70 + 1);
LABEL_50:
  if (v5 != 12)
    goto LABEL_128;
  v16 = (__int128 *)v70;
LABEL_52:
  v17 = *(_QWORD *)v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_128:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v71 >= 0)
      v61 = &v70;
    else
      v61 = (__int128 *)v70;
    if (v71 >= 0)
      v62 = HIBYTE(v71);
    else
      v62 = *((_QWORD *)&v70 + 1);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  v20 = (uint64_t)v72;
  if (v73 != v72)
  {
    v21 = 0;
    do
    {
      v22 = v20 + 24 * v21;
      v23 = *(int **)v22;
      v24 = (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 2;
      switch(v24)
      {
        case 3:
          v39 = *v23;
          v40 = v23[2];
          if (*v23 <= v40)
          {
            v41 = v23[1];
            end = v75.__end_;
            do
            {
              if (end >= v75.__end_cap_.__value_)
              {
                begin = v75.__begin_;
                v45 = end - v75.__begin_;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v47 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
                if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v46)
                  v46 = v47 >> 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                  v48 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v48);
                  begin = v75.__begin_;
                  end = v75.__end_;
                }
                else
                {
                  v49 = 0;
                }
                v50 = (int *)&v49[4 * v45];
                *v50 = v39;
                v43 = v50 + 1;
                while (end != begin)
                {
                  v51 = *--end;
                  *--v50 = v51;
                }
                v75.__begin_ = v50;
                v75.__end_ = v43;
                v75.__end_cap_.__value_ = (int *)&v49[4 * v48];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *end = v39;
                v43 = end + 1;
              }
              v75.__end_ = v43;
              v39 += v41;
              end = v43;
            }
            while (v39 <= v40);
          }
          break;
        case 2:
          v27 = *v23;
          v28 = v23[1];
          v29 = v75.__end_;
          do
          {
            if (v29 >= v75.__end_cap_.__value_)
            {
              v31 = v75.__begin_;
              v32 = v29 - v75.__begin_;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v34 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
              if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v35);
                v31 = v75.__begin_;
                v29 = v75.__end_;
              }
              else
              {
                v36 = 0;
              }
              v37 = (int *)&v36[4 * v32];
              *v37 = v27;
              v30 = v37 + 1;
              while (v29 != v31)
              {
                v38 = *--v29;
                *--v37 = v38;
              }
              v75.__begin_ = v37;
              v75.__end_ = v30;
              v75.__end_cap_.__value_ = (int *)&v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *v29 = v27;
              v30 = v29 + 1;
            }
            v75.__end_ = v30;
            v29 = v30;
            v4 = v27++ == v28;
          }
          while (!v4);
          break;
        case 1:
          v25 = v75.__end_;
          if (v75.__end_ >= v75.__end_cap_.__value_)
          {
            v52 = v75.__begin_;
            v53 = v75.__end_ - v75.__begin_;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v55 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
            if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v56);
              v52 = v75.__begin_;
              v25 = v75.__end_;
            }
            else
            {
              v57 = 0;
            }
            v58 = (int *)&v57[4 * v53];
            *v58 = *v23;
            v26 = v58 + 1;
            while (v25 != v52)
            {
              v59 = *--v25;
              *--v58 = v59;
            }
            v75.__begin_ = v58;
            v75.__end_ = v26;
            v75.__end_cap_.__value_ = (int *)&v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v75.__end_ = *v23;
            v26 = v25 + 1;
          }
          v75.__end_ = v26;
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v21;
      v20 = (uint64_t)v72;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v73 - v72) > v21);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v75.__end_ - (char *)v75.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v75.__begin_, (char *)v75.__end_ - (char *)v75.__begin_);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  __p = &v72;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
}

void sub_1ADB63CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;

  *(_QWORD *)(v16 - 128) = v15;
  v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(_QWORD *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(_QWORD *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1ADB63CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1ADB63CD4()
{
  JUMPOUT(0x1ADB63CF0);
}

void kaldi::nnet1::Splice::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  const void **v5;
  std::vector<int> v6;

  v5 = (const void **)(a1 + 48);
  std::vector<int>::vector(&v6, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, (std::vector<unsigned int> *)&v6);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v6.__end_ - v6.__begin_, (uint64_t)v6.__begin_);
  if (v6.__begin_)
  {
    v6.__end_ = v6.__begin_;
    operator delete(v6.__begin_);
  }
}

void sub_1ADB63DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Splice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Splice<float>(a2, (unsigned int *)(a1 + 48), a3);
}

void kaldi::nnet1::Splice::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Splice::ReadData(uint64_t a1, _QWORD *a2, int a3)
{
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADB63EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::Copy(kaldi::nnet1::CopyComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2B5A0;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48);
  return v2;
}

void sub_1ADB63F5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1AF44D190](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CopyComponent::GetType(kaldi::nnet1::CopyComponent *this)
{
  return 1028;
}

_QWORD *kaldi::nnet1::CopyComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::CopyComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *p_p;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  __int128 *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  std::vector<int>::pointer v25;
  int *v26;
  int v27;
  int v28;
  std::vector<int>::pointer v29;
  int *v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  std::vector<int>::pointer end;
  int *v43;
  std::vector<int>::pointer begin;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  int *v50;
  int v51;
  std::vector<int>::pointer v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  int *v58;
  int v59;
  std::vector<int>::pointer v60;
  std::vector<int>::pointer v61;
  std::vector<int>::pointer v62;
  _QWORD *v63;
  __int128 *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *__p;
  uint64_t v70;
  uint64_t v71;
  std::vector<unsigned int> v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  std::vector<int> v78;

  memset(&v78, 0, sizeof(v78));
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v3 = a2 + 4;
  v73 = 0uLL;
  v74 = 0;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v73);
    if (SHIBYTE(v74) < 0)
      break;
    if (HIBYTE(v74) != 12)
    {
      if (HIBYTE(v74) == 13)
      {
        v4 = (_QWORD)v73 == 0x6556646C6975423CLL && *(_QWORD *)((char *)&v73 + 5) == 0x3E726F7463655664;
        if (v4)
          goto LABEL_22;
      }
      goto LABEL_131;
    }
    if ((_QWORD)v73 != 0x636556646165523CLL || DWORD2(v73) != 1047687028)
    {
      v16 = &v73;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v78, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v5 = *((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1) == 12 && *(_QWORD *)v73 == 0x636556646165523CLL && *(_DWORD *)(v73 + 8) == 1047687028)
    goto LABEL_48;
  if (*((_QWORD *)&v73 + 1) != 13)
    goto LABEL_50;
  if (*(_QWORD *)v73 == 0x6556646C6975423CLL && *(_QWORD *)(v73 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_49;
      __p = 0;
      v70 = 0;
      v71 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p);
      if (SHIBYTE(v71) < 0)
      {
        if (v70 != 14)
          goto LABEL_32;
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v71) != 14)
          goto LABEL_32;
        p_p = (uint64_t *)&__p;
      }
      v9 = *p_p;
      v10 = *(uint64_t *)((char *)p_p + 6);
      if (v9 == 0x56646C6975422F3CLL && v10 == 0x3E726F7463655664)
      {
        v14 = 0;
        if (v71 < 0)
          goto LABEL_41;
LABEL_38:
        if ((v14 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
LABEL_32:
        memset(&v72, 0, sizeof(v72));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v72);
        v12 = v76;
        if ((unint64_t)v76 >= v77)
        {
          v13 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v75, (uint64_t)&v72);
        }
        else
        {
          *v76 = 0;
          v12[1] = 0;
          v12[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, v72.__begin_, (uint64_t)v72.__end_, v72.__end_ - v72.__begin_);
          v13 = (uint64_t)(v12 + 3);
        }
        v76 = (_QWORD *)v13;
        if (v72.__begin_)
        {
          v72.__end_ = v72.__begin_;
          operator delete(v72.__begin_);
        }
        v14 = 1;
        if ((v71 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_41:
        operator delete(__p);
        if ((v14 & 1) == 0)
          goto LABEL_49;
      }
    }
  }
  v5 = *((_QWORD *)&v73 + 1);
LABEL_50:
  if (v5 != 12)
    goto LABEL_131;
  v16 = (__int128 *)v73;
LABEL_52:
  v17 = *(_QWORD *)v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_131:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v74 >= 0)
      v64 = &v73;
    else
      v64 = (__int128 *)v73;
    if (v74 >= 0)
      v65 = HIBYTE(v74);
    else
      v65 = *((_QWORD *)&v73 + 1);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  v20 = (uint64_t)v75;
  if (v76 != v75)
  {
    v21 = 0;
    do
    {
      v22 = v20 + 24 * v21;
      v23 = *(int **)v22;
      v24 = (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 2;
      switch(v24)
      {
        case 3:
          v39 = *v23;
          v40 = v23[2];
          if (*v23 <= v40)
          {
            v41 = v23[1];
            end = v78.__end_;
            do
            {
              if (end >= v78.__end_cap_.__value_)
              {
                begin = v78.__begin_;
                v45 = end - v78.__begin_;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v47 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
                if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v46)
                  v46 = v47 >> 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                  v48 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v48);
                  begin = v78.__begin_;
                  end = v78.__end_;
                }
                else
                {
                  v49 = 0;
                }
                v50 = (int *)&v49[4 * v45];
                *v50 = v39;
                v43 = v50 + 1;
                while (end != begin)
                {
                  v51 = *--end;
                  *--v50 = v51;
                }
                v78.__begin_ = v50;
                v78.__end_ = v43;
                v78.__end_cap_.__value_ = (int *)&v49[4 * v48];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *end = v39;
                v43 = end + 1;
              }
              v78.__end_ = v43;
              v39 += v41;
              end = v43;
            }
            while (v39 <= v40);
          }
          break;
        case 2:
          v27 = *v23;
          v28 = v23[1];
          v29 = v78.__end_;
          do
          {
            if (v29 >= v78.__end_cap_.__value_)
            {
              v31 = v78.__begin_;
              v32 = v29 - v78.__begin_;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v34 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
              if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v35);
                v31 = v78.__begin_;
                v29 = v78.__end_;
              }
              else
              {
                v36 = 0;
              }
              v37 = (int *)&v36[4 * v32];
              *v37 = v27;
              v30 = v37 + 1;
              while (v29 != v31)
              {
                v38 = *--v29;
                *--v37 = v38;
              }
              v78.__begin_ = v37;
              v78.__end_ = v30;
              v78.__end_cap_.__value_ = (int *)&v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *v29 = v27;
              v30 = v29 + 1;
            }
            v78.__end_ = v30;
            v29 = v30;
            v4 = v27++ == v28;
          }
          while (!v4);
          break;
        case 1:
          v25 = v78.__end_;
          if (v78.__end_ >= v78.__end_cap_.__value_)
          {
            v52 = v78.__begin_;
            v53 = v78.__end_ - v78.__begin_;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v55 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
            if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v56);
              v52 = v78.__begin_;
              v25 = v78.__end_;
            }
            else
            {
              v57 = 0;
            }
            v58 = (int *)&v57[4 * v53];
            *v58 = *v23;
            v26 = v58 + 1;
            while (v25 != v52)
            {
              v59 = *--v25;
              *--v58 = v59;
            }
            v78.__begin_ = v58;
            v78.__end_ = v26;
            v78.__end_cap_.__value_ = (int *)&v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v78.__end_ = *v23;
            v26 = v25 + 1;
          }
          v78.__end_ = v26;
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v21;
      v20 = (uint64_t)v75;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v76 - v75) > v21);
  }
  v60 = v78.__begin_;
  v61 = v78.__end_;
  if (v78.__begin_ != v78.__end_)
  {
    v62 = v78.__begin_;
    do
      --*v62++;
    while (v62 != v61);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v61 - (char *)v60) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v78.__begin_, (char *)v78.__end_ - (char *)v78.__begin_);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  __p = &v75;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_1ADB64684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;

  *(_QWORD *)(v16 - 128) = v15;
  v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(_QWORD *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(_QWORD *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1ADB64694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1ADB6469C()
{
  JUMPOUT(0x1ADB646B8);
}

void kaldi::nnet1::CopyComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  const void **v5;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v8;
  std::vector<int> v9;

  v5 = (const void **)(a1 + 48);
  std::vector<int>::vector(&v9, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, (std::vector<unsigned int> *)&v9);
  begin = v9.__begin_;
  end = v9.__end_;
  if (v9.__begin_ != v9.__end_)
  {
    v8 = v9.__begin_;
    do
      ++*v8++;
    while (v8 != end);
  }
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, end - begin, (uint64_t)begin);
  if (v9.__begin_)
  {
    v9.__end_ = v9.__begin_;
    operator delete(v9.__begin_);
  }
}

void sub_1ADB64798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3);
}

void kaldi::nnet1::CopyComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD v7[34];

  if (!kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"BackpropagateFnc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented!", 16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed = 1;
  }
  kaldi::CuMatrixBase<float>::SetZero(a5);
}

void sub_1ADB64858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::CopyComponent::ReadData(uint64_t a1, _QWORD *a2, int a3)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v6;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  begin = __p.__begin_;
  end = __p.__end_;
  if (__p.__begin_ != __p.__end_)
  {
    v6 = __p.__begin_;
    do
      --*v6++;
    while (v6 != end);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)end - (char *)begin) >> 2, 1);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADB64918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::IdentityComponent::Copy(kaldi::nnet1::IdentityComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2D388;
  return v2;
}

void sub_1ADB649B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::IdentityComponent::GetType(kaldi::nnet1::IdentityComponent *this)
{
  return 2057;
}

_QWORD *kaldi::nnet1::IdentityComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *kaldi::nnet1::IdentityComponent::InitData(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD v4[34];

  result = std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unity component doesn't expect any tokens");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

int *kaldi::nnet1::IdentityComponent::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
}

int *kaldi::nnet1::IdentityComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

float kaldi::nnet1::IdentityComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return kaldi::CuVectorBase<float>::CopyColFromMat(a4, a2, a3);
}

uint64_t kaldi::nnet1::DuplicateComponent::Copy(kaldi::nnet1::DuplicateComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2D900;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  *(_DWORD *)(v2 + 56) = *((_DWORD *)this + 14);
  return v2;
}

void sub_1ADB64B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::GetType(kaldi::nnet1::DuplicateComponent *this)
{
  return 2056;
}

_QWORD *kaldi::nnet1::DuplicateComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::DuplicateComponent::InitData(_DWORD *a1, uint64_t *a2)
{
  __int128 *v4;
  _DWORD *v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v22;
  int v23;
  int v24;
  _QWORD v25[34];
  __int128 v26;
  uint64_t v27;

  v4 = &v26;
  a1[14] = 1;
  v5 = a1 + 14;
  v26 = 0uLL;
  v27 = 0;
  v6 = a2 + 4;
  v7 = a1 + 13;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 16)
        {
          if (HIBYTE(v27) == 12)
            goto LABEL_52;
          goto LABEL_40;
        }
        if ((_QWORD)v26 != 0x6163696C7075443CLL || *((_QWORD *)&v26 + 1) != 0x3E74726174536574)
          goto LABEL_40;
        goto LABEL_11;
      }
      v14 = (_QWORD)v26 == 0x6163696C7075443CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E657A6953657461;
      v12 = (uint64_t)v7;
      if (!v14)
      {
        v15 = (_QWORD)v26 == 0x6C7075446D754E3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E7365746163696CLL;
        v12 = (uint64_t)v5;
        if (!v15)
          goto LABEL_40;
      }
      goto LABEL_37;
    }
    v9 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) != 15)
    {
      if (*((_QWORD *)&v26 + 1) != 16)
        goto LABEL_50;
      if (*(_QWORD *)v26 != 0x6163696C7075443CLL || *(_QWORD *)(v26 + 8) != 0x3E74726174536574)
        goto LABEL_50;
LABEL_11:
      LODWORD(v25[0]) = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v25);
      a1[12] = v25[0];
      goto LABEL_38;
    }
    v11 = *(_QWORD *)v26 == 0x6163696C7075443CLL && *(_QWORD *)(v26 + 7) == 0x3E657A6953657461;
    v12 = (uint64_t)v7;
    if (!v11)
    {
      v9 = *((_QWORD *)&v26 + 1);
      v13 = *(_QWORD *)v26 == 0x6C7075446D754E3CLL && *(_QWORD *)(v26 + 7) == 0x3E7365746163696CLL;
      v12 = (uint64_t)v5;
      if (!v13)
        break;
    }
LABEL_37:
    kaldi::ReadBasicType<int>(a2, 0, v12);
LABEL_38:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((v27 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v27) == 12)
    {
      v4 = &v26;
      goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_50:
  if (v9 != 12)
    goto LABEL_40;
  v4 = (__int128 *)v26;
LABEL_52:
  if (*(_QWORD *)v4 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v4 + 2) != 1047817829)
  {
LABEL_40:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v27 >= 0)
      v17 = &v26;
    else
      v17 = (__int128 *)v26;
    if (v27 >= 0)
      v18 = HIBYTE(v27);
    else
      v18 = *((_QWORD *)&v26 + 1);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (DuplicateStart|DuplicateSize|NumDuplicates)", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_57:
  v22 = a1[13];
  v23 = a1[2];
  if (v23 + a1[14] * v22 != a1[3])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Requested duplication doesn't match the output and input sizes", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if (v22 < 0 || (v24 = a1[12], v24 < 0) || v24 + v22 > v23)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Duplication parameters out of range", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
}

void sub_1ADB64EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::DuplicateComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];

  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 28);
  v8 = *(_QWORD *)(a3 + 32);
  LODWORD(v19[2]) = a1[2];
  *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v19[3]) = v7;
  v19[4] = v8;
  v19[0] = &unk_1E5D29D40;
  v19[1] = v6;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v19, a2, 111);
  if ((int)a1[13] >= 1)
  {
    v9 = (int)a1[12];
    v10 = *(_QWORD *)(a2 + 8) + 4 * v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 28) - v9;
    v11 = *(_QWORD *)(a2 + 32);
    LODWORD(v18[2]) = a1[13];
    *(_QWORD *)((char *)&v18[2] + 4) = *(_QWORD *)(a2 + 20);
    HIDWORD(v18[3]) = v9;
    v18[4] = v11;
    v18[0] = &unk_1E5D29D40;
    v18[1] = v10;
    if ((int)a1[14] >= 1)
    {
      v12 = 0;
      v13 = a1[2];
      do
      {
        v14 = *(_QWORD *)(a3 + 8) + 4 * v13;
        v15 = *(_DWORD *)(a3 + 28) - v13;
        v16 = *(_QWORD *)(a3 + 32);
        LODWORD(v17[2]) = a1[13];
        *(_QWORD *)((char *)&v17[2] + 4) = *(_QWORD *)(a3 + 20);
        HIDWORD(v17[3]) = v15;
        v17[4] = v16;
        v17[0] = &unk_1E5D29D40;
        v17[1] = v14;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v17, (uint64_t)v18, 111);
        v13 += a1[13];
        v17[0] = &unk_1E5D29D40;
        memset(&v17[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
        ++v12;
      }
      while (v12 < a1[14]);
    }
    v18[0] = &unk_1E5D29D40;
    memset(&v18[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
  }
  v19[0] = &unk_1E5D29D40;
  memset(&v19[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
}

void sub_1ADB650C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _OWORD *v20;
  uint64_t v21;

  a20 = v21 + 16;
  *v20 = 0u;
  v20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::DuplicateComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v19[5];
  void *v20;
  _QWORD v21[4];

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_DWORD *)(a4 + 28);
  v10 = *(_QWORD *)(a4 + 32);
  LODWORD(v21[1]) = a1[2];
  *(_QWORD *)((char *)&v21[1] + 4) = *(_QWORD *)(a4 + 20);
  HIDWORD(v21[2]) = v9;
  v21[3] = v10;
  v20 = &unk_1E5D29D40;
  v21[0] = v8;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, (uint64_t)&v20, 111);
  v20 = &unk_1E5D29D40;
  memset(v21, 0, sizeof(v21));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  if ((int)a1[13] >= 1)
  {
    v11 = (int)a1[12];
    v12 = *(_QWORD *)(a5 + 8) + 4 * v11;
    LODWORD(v11) = *(_DWORD *)(a5 + 28) - v11;
    v13 = *(_QWORD *)(a5 + 32);
    LODWORD(v21[1]) = a1[13];
    *(_QWORD *)((char *)&v21[1] + 4) = *(_QWORD *)(a5 + 20);
    HIDWORD(v21[2]) = v11;
    v21[3] = v13;
    v20 = &unk_1E5D29D40;
    v21[0] = v12;
    if ((int)a1[14] >= 1)
    {
      v14 = 0;
      v15 = a1[2];
      do
      {
        v16 = *(_QWORD *)(a4 + 8) + 4 * v15;
        v17 = *(_DWORD *)(a4 + 28) - v15;
        v18 = *(_QWORD *)(a4 + 32);
        LODWORD(v19[2]) = a1[13];
        *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a4 + 20);
        HIDWORD(v19[3]) = v17;
        v19[4] = v18;
        v19[0] = &unk_1E5D29D40;
        v19[1] = v16;
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v20, (uint64_t)v19, 111, 1.0, 1.0);
        v15 += a1[13];
        v19[0] = &unk_1E5D29D40;
        memset(&v19[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
        ++v14;
      }
      while (v14 < a1[14]);
    }
    v20 = &unk_1E5D29D40;
    memset(v21, 0, sizeof(v21));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  }
}

void sub_1ADB652AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _OWORD *v6;
  va_list va;

  va_start(va, a6);
  *v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::ReadData(_DWORD *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  int v7;

  v7 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[12] = v7;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[13] = v7;
  result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[14] = v7;
  return result;
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::Copy(kaldi::nnet1::AddShift *this)
{
  kaldi::nnet1::AddShift *v2;

  v2 = (kaldi::nnet1::AddShift *)operator new();
  kaldi::nnet1::AddShift::AddShift(v2, this);
  return v2;
}

void sub_1ADB653B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40582A63A6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AddShift::GetType(kaldi::nnet1::AddShift *this)
{
  return 1031;
}

uint64_t kaldi::nnet1::AddShift::Info(kaldi::nnet1::AddShift *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::AddShift *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n shift_data", 12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1ADB654F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::InfoGradient(kaldi::nnet1::AddShift *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  shift_data_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 15);
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (std::string::size_type)v15[1];
  v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1ADB65670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AddShift::InitData(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  float *v9;
  BOOL v12;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[34];
  __int128 v26;
  uint64_t v27;
  std::string v28;
  float v29;

  v29 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &v28);
  v26 = 0uLL;
  v27 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_67;
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      break;
    v6 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) == 11
      && (*(_QWORD *)v26 == 0x72615074696E493CLL ? (v7 = *(_QWORD *)(v26 + 3) == 0x3E6D617261507469) : (v7 = 0), v7))
    {
LABEL_36:
      v9 = &v29;
    }
    else
    {
      if (*((_QWORD *)&v26 + 1) == 15)
      {
        v8 = *(_QWORD *)v26 == 0x61526E7261654C3CLL && *(_QWORD *)(v26 + 7) == 0x3E66656F43657461;
        v9 = (float *)(a1 + 176);
        if (v8)
          goto LABEL_56;
        v6 = *((_QWORD *)&v26 + 1);
      }
      if (v6 == 18)
      {
        if (*(_QWORD *)v26 == 0x6E6569646172473CLL
          && *(_QWORD *)(v26 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v26 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v28);
          goto LABEL_57;
        }
        v6 = *((_QWORD *)&v26 + 1);
      }
      if (v6 != 9)
        goto LABEL_58;
      v12 = *(_QWORD *)v26 == 0x6461724778614D3CLL && *(_BYTE *)(v26 + 8) == 62;
      v9 = (float *)(a1 + 172);
      if (!v12)
      {
        v6 = *((_QWORD *)&v26 + 1);
LABEL_58:
        if (v6 == 12)
        {
          v4 = (__int128 *)v26;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
        if (v27 >= 0)
          v21 = &v26;
        else
          v21 = (__int128 *)v26;
        if (v27 >= 0)
          v22 = HIBYTE(v27);
        else
          v22 = *((_QWORD *)&v26 + 1);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (InitParam|LearnRateCoef|GradientNormType|MaxGrad)", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v9);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v4 = &v26;
  switch(HIBYTE(v27))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((_QWORD)v26 != 0x72615074696E493CLL || *(_QWORD *)((char *)&v26 + 3) != 0x3E6D617261507469)
        goto LABEL_72;
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      v15 = (_QWORD)v26 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 176);
      if (!v15)
        goto LABEL_50;
      goto LABEL_56;
    case 0x12:
      if ((_QWORD)v26 == 0x6E6569646172473CLL
        && *((_QWORD *)&v26 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v27 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v27) == 9)
      {
LABEL_51:
        v16 = (_QWORD)v26 == 0x6461724778614D3CLL && BYTE8(v26) == 62;
        v9 = (float *)(a1 + 172);
        if (!v16)
          goto LABEL_72;
        goto LABEL_56;
      }
      if (HIBYTE(v27) != 12)
        goto LABEL_72;
      v4 = &v26;
LABEL_62:
      v17 = *(_QWORD *)v4;
      v18 = *((_DWORD *)v4 + 2);
      if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
        goto LABEL_72;
LABEL_67:
      *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v28);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v29);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1ADB65AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = a1 + 88;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuVectorBase<float>::Write(v5, a2, a3);
}

uint64_t *kaldi::nnet1::AddShift::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, a1 + 88, 1.0, 1.0);
}

int *kaldi::nnet1::AddShift::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

double kaldi::nnet1::AddShift::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6;
  __int128 *v8;
  uint64_t v9;
  BOOL v10;
  float *v11;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v24 = 0uLL;
    v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if (SHIBYTE(v25) < 0)
    {
      v9 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) != 15
        || (*(_QWORD *)v24 == 0x61526E7261654C3CLL ? (v10 = *(_QWORD *)(v24 + 7) == 0x3E66656F43657461) : (v10 = 0),
            v11 = (float *)(a1 + 176),
            !v10))
      {
        if (*((_QWORD *)&v24 + 1) == 18)
        {
          if (*(_QWORD *)v24 == 0x6E6569646172473CLL
            && *(_QWORD *)(v24 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v24 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v9 = *((_QWORD *)&v24 + 1);
        }
        if (v9 != 9)
          goto LABEL_49;
        v8 = (__int128 *)v24;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v25) == 9)
      {
        v8 = &v24;
LABEL_31:
        v14 = *(_QWORD *)v8;
        v15 = *((unsigned __int8 *)v8 + 8);
        v16 = v14 == 0x6461724778614D3CLL && v15 == 62;
        v11 = (float *)(a1 + 172);
        if (!v16)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0)
            v20 = &v24;
          else
            v20 = (__int128 *)v24;
          if (v25 >= 0)
            v21 = HIBYTE(v25);
          else
            v21 = *((_QWORD *)&v24 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v25) != 15)
      {
        if (HIBYTE(v25) != 18)
          goto LABEL_49;
        v6 = (_QWORD)v24 == 0x6E6569646172473CLL && *((_QWORD *)&v24 + 1) == 0x7079546D726F4E74;
        if (!v6 || (unsigned __int16)v25 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v23 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v17 = (_QWORD)v24 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v24 + 7) == 0x3E66656F43657461;
      v11 = (float *)(a1 + 176);
      if (!v17)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v11);
LABEL_42:
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void sub_1ADB65E44()
{
  JUMPOUT(0x1ADB65E4CLL);
}

_QWORD *kaldi::nnet1::AddShift::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADB65F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AddShift::NumParams(kaldi::nnet1::AddShift *this)
{
  return *((unsigned int *)this + 26);
}

const void **kaldi::nnet1::AddShift::GetParams(uint64_t a1, void **a2)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0);
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 88), (uint64_t)a2);
}

void *kaldi::nnet1::AddShift::SetParams(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)(a1 + 88);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v3, a2);
}

float kaldi::nnet1::AddShift::SumParams(kaldi::nnet1::AddShift *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void kaldi::nnet1::AddShift::PerturbParams(kaldi::nnet1::AddShift *this, float a2)
{
  uint64_t v4;
  _QWORD v5[4];

  v4 = *((unsigned int *)this + 26);
  v5[0] = &unk_1E5D341C8;
  memset(&v5[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v5, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v5, a2, 1.0);
  v5[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v5);
}

void sub_1ADB6603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AddShift::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void ***v8;
  uint64_t v9;

  v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ((void (*)(const void ***, uint64_t, uint64_t, _QWORD, _QWORD))(*v8)[29])(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4);
  return ((uint64_t (*)(const void ***))(*v8)[1])(v8);
}

void kaldi::nnet1::AddShift::AccumGradients(kaldi::nnet1::AddShift *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;

  kaldi::nnet1::AddShift::EnsureCorrs(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 23) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v10 = *((_QWORD *)a1 + 15) + 32 * a5;
  *(_QWORD *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::AddRowSumMat(v10, a3, 1.0, 0.0);
}

uint64_t kaldi::nnet1::AddShift::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 172) = a3;
  *(_DWORD *)(result + 168) = a2;
  *(_BYTE *)(result + 208) = 0;
  return result;
}

void kaldi::nnet1::AddShift::NormalizeGradients(kaldi::nnet1::AddShift *this, float a2, int a3)
{
  int v3;

  v3 = *((_DWORD *)this + 42);
  if (v3 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 15) + 32 * a3, *((_QWORD *)this + 18) + 32 * a3, a2);
  }
  else if (v3 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((_BYTE *)this + 84))
        a2 = (float)*(int *)(*((_QWORD *)this + 23) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 15) + 32 * a3, (_QWORD *)(*((_QWORD *)this + 18) + 32 * a3), a2);
    }
  }
  else if (v3 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      a2 = (float)*(int *)(*((_QWORD *)this + 23) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::AddShift::UpdateWeights(kaldi::nnet1::AddShift *this, void *a2, int a3)
{
  float v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;

  kaldi::nnet1::AddShift::EnsureCorrs(this);
  v6 = *((float *)this + 14);
  v7 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v8 = a3;
  else
    v8 = *((_DWORD *)this + 20);
  if ((_DWORD)v7 == 1)
    v8 = 0;
  v9 = v8;
  v10 = *((_QWORD *)this + 15);
  v11 = v10 + 32 * v8;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 18) + 32 * v8 + 24) = a2;
  if (v8 == (_DWORD)v7)
  {
    kaldi::CuVectorBase<float>::AddVec(v11, v10, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v12 = 1;
      v13 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 15) + 32 * v9, *((_QWORD *)this + 15) + v13, 1.0, 1.0);
        ++v12;
        v13 += 32;
      }
      while (v12 < *((int *)this + 20));
    }
    v14 = (int *)*((_QWORD *)this + 23);
    v14[v9] = 0;
    if ((int)v7 >= 1)
    {
      v15 = 0;
      v16 = v14;
      do
      {
        v17 = *v16++;
        v15 += v17;
        v14[v9] = v15;
        --v7;
      }
      while (v7);
    }
  }
  if (*((_BYTE *)this + 84))
    v6 = v6 / (float)*(int *)(*((_QWORD *)this + 23) + 4 * v9);
  if (*((float *)this + 43) >= 0.0)
    (*(void (**)(kaldi::nnet1::AddShift *, uint64_t))(*(_QWORD *)this + 248))(this, v9);
  *((_QWORD *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((_QWORD *)this + 15) + 32 * v9, -(float)(v6 * *((float *)this + 44)), 1.0);
  v18 = (_BYTE *)*((_QWORD *)this + 23);
  if ((_DWORD)v9 == *((_DWORD *)this + 20))
  {
    v19 = (_BYTE *)*((_QWORD *)this + 24);
    if (v18 != v19)
      bzero(v18, ((v19 - v18 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v18[4 * v9] = 0;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Copy(kaldi::nnet1::Rescale *this)
{
  kaldi::nnet1::Rescale *v2;

  v2 = (kaldi::nnet1::Rescale *)operator new();
  kaldi::nnet1::Rescale::Rescale(v2, this);
  return v2;
}

void sub_1ADB6640C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C404CB9A218);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::GetType(kaldi::nnet1::Rescale *this)
{
  return 1032;
}

uint64_t kaldi::nnet1::Rescale::Info(kaldi::nnet1::Rescale *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::Rescale *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n scale_data", 12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1ADB66550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::InfoGradient(kaldi::nnet1::Rescale *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  scale_data_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 15);
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (std::string::size_type)v15[1];
  v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1ADB666C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rescale::InitData(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  float *v9;
  BOOL v12;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[34];
  __int128 v26;
  uint64_t v27;
  std::string v28;
  float v29;

  v29 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &v28);
  v26 = 0uLL;
  v27 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_67;
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      break;
    v6 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) == 11
      && (*(_QWORD *)v26 == 0x72615074696E493CLL ? (v7 = *(_QWORD *)(v26 + 3) == 0x3E6D617261507469) : (v7 = 0), v7))
    {
LABEL_36:
      v9 = &v29;
    }
    else
    {
      if (*((_QWORD *)&v26 + 1) == 15)
      {
        v8 = *(_QWORD *)v26 == 0x61526E7261654C3CLL && *(_QWORD *)(v26 + 7) == 0x3E66656F43657461;
        v9 = (float *)(a1 + 224);
        if (v8)
          goto LABEL_56;
        v6 = *((_QWORD *)&v26 + 1);
      }
      if (v6 == 18)
      {
        if (*(_QWORD *)v26 == 0x6E6569646172473CLL
          && *(_QWORD *)(v26 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v26 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v28);
          goto LABEL_57;
        }
        v6 = *((_QWORD *)&v26 + 1);
      }
      if (v6 != 9)
        goto LABEL_58;
      v12 = *(_QWORD *)v26 == 0x6461724778614D3CLL && *(_BYTE *)(v26 + 8) == 62;
      v9 = (float *)(a1 + 220);
      if (!v12)
      {
        v6 = *((_QWORD *)&v26 + 1);
LABEL_58:
        if (v6 == 12)
        {
          v4 = (__int128 *)v26;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
        if (v27 >= 0)
          v21 = &v26;
        else
          v21 = (__int128 *)v26;
        if (v27 >= 0)
          v22 = HIBYTE(v27);
        else
          v22 = *((_QWORD *)&v26 + 1);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (InitParam)", 12);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v9);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v4 = &v26;
  switch(HIBYTE(v27))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((_QWORD)v26 != 0x72615074696E493CLL || *(_QWORD *)((char *)&v26 + 3) != 0x3E6D617261507469)
        goto LABEL_72;
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      v15 = (_QWORD)v26 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 224);
      if (!v15)
        goto LABEL_50;
      goto LABEL_56;
    case 0x12:
      if ((_QWORD)v26 == 0x6E6569646172473CLL
        && *((_QWORD *)&v26 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v27 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v27) == 9)
      {
LABEL_51:
        v16 = (_QWORD)v26 == 0x6461724778614D3CLL && BYTE8(v26) == 62;
        v9 = (float *)(a1 + 220);
        if (!v16)
          goto LABEL_72;
        goto LABEL_56;
      }
      if (HIBYTE(v27) != 12)
        goto LABEL_72;
      v4 = &v26;
LABEL_62:
      v17 = *(_QWORD *)v4;
      v18 = *((_DWORD *)v4 + 2);
      if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
        goto LABEL_72;
LABEL_67:
      *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v28);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v29);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1ADB66B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = a1 + 88;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuVectorBase<float>::Write(v5, a2, a3);
}

uint64_t kaldi::nnet1::Rescale::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a3, a1 + 88);
}

uint64_t kaldi::nnet1::Rescale::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a5, a1 + 88);
}

double kaldi::nnet1::Rescale::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6;
  __int128 *v8;
  uint64_t v9;
  BOOL v10;
  float *v11;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v24 = 0uLL;
    v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if (SHIBYTE(v25) < 0)
    {
      v9 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) != 15
        || (*(_QWORD *)v24 == 0x61526E7261654C3CLL ? (v10 = *(_QWORD *)(v24 + 7) == 0x3E66656F43657461) : (v10 = 0),
            v11 = (float *)(a1 + 224),
            !v10))
      {
        if (*((_QWORD *)&v24 + 1) == 18)
        {
          if (*(_QWORD *)v24 == 0x6E6569646172473CLL
            && *(_QWORD *)(v24 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v24 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v9 = *((_QWORD *)&v24 + 1);
        }
        if (v9 != 9)
          goto LABEL_49;
        v8 = (__int128 *)v24;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v25) == 9)
      {
        v8 = &v24;
LABEL_31:
        v14 = *(_QWORD *)v8;
        v15 = *((unsigned __int8 *)v8 + 8);
        v16 = v14 == 0x6461724778614D3CLL && v15 == 62;
        v11 = (float *)(a1 + 220);
        if (!v16)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0)
            v20 = &v24;
          else
            v20 = (__int128 *)v24;
          if (v25 >= 0)
            v21 = HIBYTE(v25);
          else
            v21 = *((_QWORD *)&v24 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v25) != 15)
      {
        if (HIBYTE(v25) != 18)
          goto LABEL_49;
        v6 = (_QWORD)v24 == 0x6E6569646172473CLL && *((_QWORD *)&v24 + 1) == 0x7079546D726F4E74;
        if (!v6 || (unsigned __int16)v25 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v23 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v17 = (_QWORD)v24 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v24 + 7) == 0x3E66656F43657461;
      v11 = (float *)(a1 + 224);
      if (!v17)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v11);
LABEL_42:
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void sub_1ADB66EBC()
{
  JUMPOUT(0x1ADB66EC4);
}

_QWORD *kaldi::nnet1::Rescale::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADB66F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Rescale::NumParams(kaldi::nnet1::Rescale *this)
{
  return *((unsigned int *)this + 26);
}

const void **kaldi::nnet1::Rescale::GetParams(uint64_t a1, void **a2)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0);
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 88), (uint64_t)a2);
}

void *kaldi::nnet1::Rescale::SetParams(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)(a1 + 88);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v3, a2);
}

float kaldi::nnet1::Rescale::SumParams(kaldi::nnet1::Rescale *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void kaldi::nnet1::Rescale::PerturbParams(kaldi::nnet1::Rescale *this, float a2)
{
  uint64_t v4;
  _QWORD v5[4];

  v4 = *((unsigned int *)this + 26);
  v5[0] = &unk_1E5D341C8;
  memset(&v5[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v5, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v5, a2, 1.0);
  v5[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v5);
}

void sub_1ADB670B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void ***v8;
  uint64_t v9;

  v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ((void (*)(const void ***, uint64_t, uint64_t, _QWORD, _QWORD))(*v8)[29])(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4);
  return ((uint64_t (*)(const void ***))(*v8)[1])(v8);
}

void kaldi::nnet1::Rescale::AccumGradients(int32x2_t *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int a5)
{
  uint64_t v10;

  kaldi::nnet1::Rescale::EnsureCorrs((kaldi::nnet1::Rescale *)a1);
  v10 = *(_QWORD *)&a1[15] + 32 * a5;
  *(_QWORD *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::SetZero(v10);
  *(_DWORD *)(*(_QWORD *)&a1[29] + 4 * a5) = *(_DWORD *)(a2 + 20);
  a1[25] = (int32x2_t)a4;
  kaldi::CuMatrix<float>::operator=(a1 + 21, a3);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&a1[21], a2);
  kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)&a1[15] + 32 * a5, (uint64_t)&a1[21], 1.0, 1.0);
}

uint64_t kaldi::nnet1::Rescale::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 220) = a3;
  *(_DWORD *)(result + 216) = a2;
  *(_BYTE *)(result + 256) = 0;
  return result;
}

void kaldi::nnet1::Rescale::NormalizeGradients(kaldi::nnet1::Rescale *this, float a2, int a3)
{
  int v3;

  v3 = *((_DWORD *)this + 54);
  if (v3 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 15) + 32 * a3, *((_QWORD *)this + 18) + 32 * a3, a2);
  }
  else if (v3 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((_BYTE *)this + 84))
        a2 = (float)*(int *)(*((_QWORD *)this + 29) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 15) + 32 * a3, (_QWORD *)(*((_QWORD *)this + 18) + 32 * a3), a2);
    }
  }
  else if (v3 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      a2 = (float)*(int *)(*((_QWORD *)this + 29) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::Rescale::UpdateWeights(kaldi::nnet1::Rescale *this, void *a2, int a3)
{
  float v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;

  kaldi::nnet1::Rescale::EnsureCorrs(this);
  v6 = *((float *)this + 14);
  v7 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v8 = a3;
  else
    v8 = *((_DWORD *)this + 20);
  if ((_DWORD)v7 == 1)
    v8 = 0;
  v9 = v8;
  v10 = *((_QWORD *)this + 15);
  v11 = v10 + 32 * v8;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 18) + 32 * v8 + 24) = a2;
  if (v8 == (_DWORD)v7)
  {
    kaldi::CuVectorBase<float>::AddVec(v11, v10, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v12 = 1;
      v13 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 15) + 32 * v9, *((_QWORD *)this + 15) + v13, 1.0, 1.0);
        ++v12;
        v13 += 32;
      }
      while (v12 < *((int *)this + 20));
    }
    v14 = (int *)*((_QWORD *)this + 29);
    v14[v9] = 0;
    if ((int)v7 >= 1)
    {
      v15 = 0;
      v16 = v14;
      do
      {
        v17 = *v16++;
        v15 += v17;
        v14[v9] = v15;
        --v7;
      }
      while (v7);
    }
  }
  if (*((_BYTE *)this + 84))
    v6 = v6 / (float)*(int *)(*((_QWORD *)this + 29) + 4 * v9);
  if (*((float *)this + 55) >= 0.0)
    (*(void (**)(kaldi::nnet1::Rescale *, uint64_t))(*(_QWORD *)this + 248))(this, v9);
  *((_QWORD *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((_QWORD *)this + 15) + 32 * v9, -(float)(v6 * *((float *)this + 56)), 1.0);
  v18 = (_BYTE *)*((_QWORD *)this + 29);
  if ((_DWORD)v9 == *((_DWORD *)this + 20))
  {
    v19 = (_BYTE *)*((_QWORD *)this + 30);
    if (v18 != v19)
      bzero(v18, ((v19 - v18 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v18[4 * v9] = 0;
  }
}

uint64_t kaldi::nnet1::KlHmm::Copy(kaldi::nnet1::KlHmm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D31D50;
  kaldi::Matrix<double>::Matrix(v2 + 48, (char *)this + 48);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 88, (char *)this + 88, 111);
  return v2;
}

void sub_1ADB6750C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  kaldi::Matrix<float>::~Matrix(v2);
  *v1 = v3;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1AF44D190](v1, 0x1081C404EFE5F1CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::KlHmm::GetType(kaldi::nnet1::KlHmm *this)
{
  return 2048;
}

void kaldi::nnet1::KlHmm::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::MatrixBase<double>::Write((_DWORD *)(a1 + 48), a2, a3, 0);
}

uint64_t kaldi::nnet1::KlHmm::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  _QWORD v14[6];
  int32x2_t v15[6];
  void *v16[5];

  v5 = a1 + 11;
  if (!a1[13].i32[1])
  {
    v6 = (uint64_t)a1;
    kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)v15, 111);
    v14[2] = 0;
    v14[0] = v15[0];
    v14[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v15);
    v7 = kaldi::VectorBase<float>::Sum((uint64_t)v14);
    v6 += 48;
    kaldi::Matrix<float>::Matrix<double>(v14, v6, 111, v7);
    v8 = kaldi::MatrixBase<float>::NumRows(v6);
    memset(v16, 0, 24);
    kaldi::Vector<float>::Resize(v16, v8, 0);
    kaldi::VectorBase<float>::AddColSumMat((uint64_t *)v16, (uint64_t)v14, 1.0, 1.0);
    kaldi::VectorBase<float>::ApplyFloor((uint64_t)v16, 1.0e-20);
    kaldi::VectorBase<float>::InvertElements((uint64_t)v16);
    kaldi::MatrixBase<float>::MulRowsVec((uint64_t)v14, (uint64_t *)v16);
    kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v14, 1.0e-20);
    kaldi::MatrixBase<float>::InvertElements((uint64_t)v14);
    kaldi::MatrixBase<float>::ApplyLog((uint64_t)v14);
    v9 = kaldi::MatrixBase<float>::NumRows(v6);
    v10 = kaldi::MatrixBase<float>::NumCols(v6);
    kaldi::CuMatrix<float>::Resize(v5, v9, v10, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v5, (int *)v14, 111);
    kaldi::Vector<float>::Destroy((uint64_t)v16);
    kaldi::Matrix<float>::~Matrix((uint64_t)v14);
    kaldi::Matrix<float>::~Matrix((uint64_t)v15);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v16, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)v16, 111);
  kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v16, 1.0e-20);
  kaldi::MatrixBase<float>::ApplyLog((uint64_t)v16);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v15, (int *)v16, 111);
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v14, (uint64_t)v15);
  v11 = *(unsigned int *)(a2 + 20);
  v13[0] = &unk_1E5D341C8;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v11, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v13, (uint64_t)v14, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, (uint64_t)v5, CblasTrans, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)v13, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, -1.0);
  v13[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v16);
}

void sub_1ADB67814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::KlHmm::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::KlHmm::ReadData(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = (uint64_t)&a1[6];
  kaldi::Matrix<double>::Read(a1 + 6, a2, a3, 0, 0);
  kaldi::MatrixBase<float>::NumRows(v3);
  return kaldi::MatrixBase<float>::NumCols(v3);
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Copy(kaldi::nnet1::Rbm *this)
{
  kaldi::nnet1::Rbm *v2;

  v2 = (kaldi::nnet1::Rbm *)operator new();
  kaldi::nnet1::Rbm::Rbm(v2, this);
  return v2;
}

void sub_1ADB67964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40502BA4E3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rbm::GetType(kaldi::nnet1::Rbm *this)
{
  return 1025;
}

void kaldi::nnet1::Rbm::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t *v6;
  uint64_t v8;
  __int128 *v22;
  void **v26;
  float *v35;
  _QWORD *v38;
  uint64_t v39;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  _QWORD *v64;
  void **v65;
  uint64_t v66;
  const void *Component;
  const void **v68;
  const void **v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float *v74;
  double v75;
  float v76;
  float v77;
  double v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  int32x2_t *v86;
  int32x2_t *v87;
  _QWORD *v88;
  _BYTE **v89;
  uint64_t v90;
  _QWORD *v91;
  _BYTE **v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  int v111[4];
  int v112;
  _BYTE v113[16];
  uint64_t v114;
  void *__p;
  void *v116;
  __int128 v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;

  v129 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v124 = 0;
  v125 = 0;
  v123 = 1036831949;
  v122 = -1;
  v6 = a2 + 4;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v117 = 0uLL;
  v118 = 0;
  while ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v117);
    if (SHIBYTE(v118) < 0)
    {
      v8 = *((_QWORD *)&v117 + 1);
      if (*((_QWORD *)&v117 + 1) == 12)
      {
        if (*(_QWORD *)v117 == 0x546E65646469483CLL && *(_DWORD *)(v117 + 8) == 1046835321)
        {
LABEL_128:
          v26 = (void **)&v126;
          goto LABEL_129;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      else if (*((_QWORD *)&v117 + 1) == 13
             && *(_QWORD *)v117 == 0x656C62697369563CLL
             && *(_QWORD *)(v117 + 5) == 0x3E65707954656C62)
      {
LABEL_101:
        v26 = (void **)&v129;
        goto LABEL_129;
      }
      if (v8 == 17)
      {
        if (*(_QWORD *)v117 == 0x656C62697369563CLL
          && *(_QWORD *)(v117 + 8) == 0x6E61654D73616942
          && *(_BYTE *)(v117 + 16) == 62)
        {
LABEL_130:
          v35 = (float *)&v125 + 1;
LABEL_143:
          kaldi::ReadBasicType<float>(a2, 0, v35);
          goto LABEL_144;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 == 18)
      {
        if (*(_QWORD *)v117 == 0x656C62697369563CLL
          && *(_QWORD *)(v117 + 8) == 0x676E615273616942
          && *(_WORD *)(v117 + 16) == 15973)
        {
LABEL_132:
          v35 = (float *)&v125;
          goto LABEL_143;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 == 16)
      {
        if (*(_QWORD *)v117 == 0x426E65646469483CLL && *(_QWORD *)(v117 + 8) == 0x3E6E61654D736169)
        {
LABEL_131:
          v35 = (float *)&v124 + 1;
          goto LABEL_143;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 == 17)
      {
        if (*(_QWORD *)v117 == 0x426E65646469483CLL
          && *(_QWORD *)(v117 + 8) == 0x65676E6152736169
          && *(_BYTE *)(v117 + 16) == 62)
        {
LABEL_142:
          v35 = (float *)&v124;
          goto LABEL_143;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 == 13)
      {
        if (*(_QWORD *)v117 == 0x74536D617261503CLL && *(_QWORD *)(v117 + 5) == 0x3E7665646474536DLL)
        {
LABEL_133:
          v35 = (float *)&v123;
          goto LABEL_143;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 == 25)
      {
        if (*(_QWORD *)v117 == 0x656C62697369563CLL
          && *(_QWORD *)(v117 + 8) == 0x6E766D4373616942
          && *(_QWORD *)(v117 + 16) == 0x656D616E656C6946
          && *(_BYTE *)(v117 + 24) == 62)
        {
LABEL_87:
          v26 = (void **)&v119;
LABEL_129:
          kaldi::ReadToken(a2, 0, (uint64_t)v26);
          goto LABEL_144;
        }
        v8 = *((_QWORD *)&v117 + 1);
      }
      if (v8 != 12)
        goto LABEL_145;
      v22 = (__int128 *)v117;
    }
    else
    {
      switch(HIBYTE(v118))
      {
        case 0xC:
          if ((_QWORD)v117 == 0x546E65646469483CLL && DWORD2(v117) == 1046835321)
            goto LABEL_128;
          goto LABEL_120;
        case 0xD:
          if ((_QWORD)v117 == 0x656C62697369563CLL && *(_QWORD *)((char *)&v117 + 5) == 0x3E65707954656C62)
            goto LABEL_101;
          goto LABEL_116;
        case 0x10:
LABEL_110:
          if ((_QWORD)v117 == 0x426E65646469483CLL && *((_QWORD *)&v117 + 1) == 0x3E6E61654D736169)
            goto LABEL_131;
LABEL_114:
          if (HIBYTE(v118) == 12)
            goto LABEL_121;
          if (HIBYTE(v118) != 13)
            goto LABEL_145;
LABEL_116:
          if ((_QWORD)v117 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v117 + 5) == 0x3E7665646474536DLL)
            goto LABEL_133;
LABEL_120:
          if (HIBYTE(v118) != 12)
            goto LABEL_145;
LABEL_121:
          v22 = &v117;
          break;
        case 0x11:
          if ((_QWORD)v117 != 0x656C62697369563CLL
            || *((_QWORD *)&v117 + 1) != 0x6E61654D73616942
            || v118 != 62)
          {
            v22 = &v117;
            switch(HIBYTE(v118))
            {
              case 0xC:
                goto LABEL_122;
              case 0xD:
                goto LABEL_116;
              case 0x10:
                goto LABEL_110;
              case 0x11:
                goto LABEL_134;
              default:
                goto LABEL_145;
            }
          }
          goto LABEL_130;
        case 0x12:
          if ((_QWORD)v117 != 0x656C62697369563CLL
            || *((_QWORD *)&v117 + 1) != 0x676E615273616942
            || (unsigned __int16)v118 != 15973)
          {
            v22 = &v117;
            switch(HIBYTE(v118))
            {
              case 0xC:
                goto LABEL_122;
              case 0xD:
                goto LABEL_116;
              case 0x10:
                goto LABEL_110;
              case 0x11:
LABEL_134:
                if ((_QWORD)v117 != 0x426E65646469483CLL
                  || *((_QWORD *)&v117 + 1) != 0x65676E6152736169
                  || v118 != 62)
                {
                  goto LABEL_114;
                }
                goto LABEL_142;
              default:
                goto LABEL_145;
            }
          }
          goto LABEL_132;
        case 0x19:
          if ((_QWORD)v117 == 0x656C62697369563CLL
            && *((_QWORD *)&v117 + 1) == 0x6E766D4373616942
            && v118 == 0x656D616E656C6946
            && v119 == 62)
          {
            goto LABEL_87;
          }
          goto LABEL_120;
        default:
          goto LABEL_145;
      }
    }
LABEL_122:
    if (*(_QWORD *)v22 != 0x536D6F646E61523CLL || *((_DWORD *)v22 + 2) != 1046766949)
    {
LABEL_145:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v117, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v105);
        v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"Unknown token ", 14);
        if (v118 >= 0)
          v95 = &v117;
        else
          v95 = (__int128 *)v117;
        if (v118 >= 0)
          v96 = HIBYTE(v118);
        else
          v96 = *((_QWORD *)&v117 + 1);
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" Typo in config?", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" (VisibleType|HiddenType|VisibleBiasMean|VisibleBiasRange|HiddenBiasMean|HiddenBiasRange|ParamStddev|VisibleBiasCmvnFilename|RandomSeed)", 136);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v105);
      }
      break;
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v122);
LABEL_144:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((SHIBYTE(v131) & 0x80000000) == 0)
  {
    v38 = &v129;
    switch(HIBYTE(v131))
    {
      case 4:
        if ((_DWORD)v129 != 1852990818)
          goto LABEL_276;
        goto LABEL_180;
      case 5:
        goto LABEL_174;
      case 8:
        goto LABEL_166;
      case 9:
        if (v129 == (_BYTE *)0x6C6C756F6E726542 && v130 == 105)
          goto LABEL_180;
        if (HIBYTE(v131) == 8)
        {
          v38 = &v129;
          goto LABEL_166;
        }
        if (HIBYTE(v131) != 5)
          goto LABEL_276;
LABEL_174:
        if ((_DWORD)v129 != 1937072487 || BYTE4(v129) != 115)
        {
LABEL_276:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v105);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"Wrong <VisibleType>", 19);
          if (v131 >= 0)
            v89 = &v129;
          else
            v89 = (_BYTE **)v129;
          if (v131 >= 0)
            v90 = HIBYTE(v131);
          else
            v90 = v130;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v105);
        }
        return;
      default:
        goto LABEL_276;
    }
    goto LABEL_179;
  }
  v39 = v130;
  if (v130 != 4 || *(_DWORD *)v129 != 1852990818)
  {
    if (v130 != 9)
      goto LABEL_158;
    if (*(_QWORD *)v129 != 0x6C6C756F6E726542 || v129[8] != 105)
    {
      v39 = v130;
LABEL_158:
      if (v39 == 5)
      {
        if (*(_DWORD *)v129 == 1937072487 && v129[4] == 115)
        {
LABEL_179:
          v44 = 1;
          goto LABEL_181;
        }
        v39 = v130;
      }
      if (v39 != 8)
        goto LABEL_276;
      v38 = v129;
LABEL_166:
      if (*v38 != 0x6E61697373756147)
        goto LABEL_276;
      goto LABEL_179;
    }
  }
LABEL_180:
  v44 = 0;
LABEL_181:
  a1[37].i32[0] = v44;
  if ((v128 & 0x8000000000000000) == 0)
  {
    v45 = &v126;
    switch(HIBYTE(v128))
    {
      case 4:
        if ((_DWORD)v126 != 1852990818)
          goto LABEL_283;
        goto LABEL_215;
      case 5:
        goto LABEL_209;
      case 8:
        goto LABEL_201;
      case 9:
        if (v126 == (_BYTE *)0x6C6C756F6E726542 && v127 == 105)
          goto LABEL_215;
        if (HIBYTE(v128) == 8)
        {
          v45 = &v126;
          goto LABEL_201;
        }
        if (HIBYTE(v128) != 5)
          goto LABEL_283;
LABEL_209:
        if ((_DWORD)v126 != 1937072487 || BYTE4(v126) != 115)
        {
LABEL_283:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v105);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"Wrong <HiddenType>", 18);
          if (v128 >= 0)
            v92 = &v126;
          else
            v92 = (_BYTE **)v126;
          if (v128 >= 0)
            v93 = HIBYTE(v128);
          else
            v93 = v127;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v92, v93);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v105);
        }
        return;
      default:
        goto LABEL_283;
    }
    goto LABEL_214;
  }
  v46 = v127;
  if (v127 != 4 || *(_DWORD *)v126 != 1852990818)
  {
    if (v127 != 9)
      goto LABEL_193;
    if (*(_QWORD *)v126 != 0x6C6C756F6E726542 || v126[8] != 105)
    {
      v46 = v127;
LABEL_193:
      if (v46 == 5)
      {
        if (*(_DWORD *)v126 == 1937072487 && v126[4] == 115)
        {
LABEL_214:
          v51 = 1;
          goto LABEL_216;
        }
        v46 = v127;
      }
      if (v46 != 8)
        goto LABEL_283;
      v45 = v126;
LABEL_201:
      if (*v45 != 0x6E61697373756147)
        goto LABEL_283;
      goto LABEL_214;
    }
  }
LABEL_215:
  v51 = 0;
LABEL_216:
  a1[37].i32[1] = v51;
  if (v122 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v122);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v113, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v111, a1[1].u32[1], a1[1].u32[0], 0, 0);
  v52 = a1[1].i32[1];
  if (v52 >= 1)
  {
    v53 = 0;
    LODWORD(v54) = a1[1].i32[0];
    do
    {
      if ((int)v54 >= 1)
      {
        v55 = 0;
        do
        {
          v56 = *(float *)&v123;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v113, 0);
          *(float *)(*(_QWORD *)v111 + 4 * v53 * v112 + 4 * v55++) = v56 * v57;
          v54 = a1[1].i32[0];
        }
        while (v55 < v54);
        v52 = a1[1].i32[1];
      }
      ++v53;
    }
    while (v53 < v52);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 9, v111);
  v58 = a1[1].u32[1];
  v109 = 0;
  v110 = 0;
  v108 = 0;
  kaldi::Vector<float>::Resize((void **)&v108, v58, 0);
  if (a1[1].i32[1] < 1)
  {
    v63 = v109;
  }
  else
  {
    v59 = 0;
    do
    {
      v60 = *((float *)&v124 + 1);
      v61 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v62 = v60 + (v61 + -0.5) * *(float *)&v124;
      v63 = v109;
      v108[v59++] = v62;
    }
    while (v59 < a1[1].i32[1]);
  }
  kaldi::CuVector<float>::Resize((uint64_t)&a1[19], v63, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(&a1[19], (uint64_t)&v108);
  if (SHIBYTE(v121) < 0)
  {
    if (v120)
      goto LABEL_232;
LABEL_255:
    v80 = a1[1].u32[0];
    v106 = 0;
    v107 = 0;
    v105 = 0;
    kaldi::Vector<float>::Resize((void **)&v105, v80, 0);
    if (a1[1].i32[0] < 1)
    {
      v85 = v106;
    }
    else
    {
      v81 = 0;
      do
      {
        v82 = *((float *)&v125 + 1);
        v83 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
        v84 = v82 + (v83 + -0.5) * *(float *)&v125;
        v85 = v106;
        v105[v81++] = v84;
      }
      while (v81 < a1[1].i32[0]);
    }
    v87 = a1 + 15;
    kaldi::CuVector<float>::Resize((uint64_t)v87, v85, 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(v87, (uint64_t)&v105);
    kaldi::Vector<float>::Destroy((uint64_t)&v105);
    goto LABEL_263;
  }
  if (!HIBYTE(v121))
    goto LABEL_255;
LABEL_232:
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v105);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"Initializing from <VisibleBiasCmvnFilename> ", 44);
    if (v121 >= 0)
      v65 = (void **)&v119;
    else
      v65 = v119;
    if (v121 >= 0)
      v66 = HIBYTE(v121);
    else
      v66 = v120;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v105);
  }
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v105);
  kaldi::nnet1::Nnet::Read((uint64_t)&v105, (uint64_t)&v119);
  Component = (const void *)kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)&v105, 0);
  if (!v68)
    __cxa_bad_cast();
  v69 = v68;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  kaldi::Vector<float>::Init((void **)&v102, *((_DWORD *)v68 + 26));
  kaldi::CuVectorBase<float>::CopyToVec<float>(v69 + 11, (uint64_t)&v102);
  kaldi::VectorBase<float>::Scale((uint64_t)&v102, -1.0);
  v100 = 0;
  v101 = 0;
  v99 = 0;
  kaldi::Vector<float>::Resize((void **)&v99, v103, 0);
  v70 = v103;
  if ((int)v103 <= 0)
  {
    v73 = v100;
  }
  else
  {
    v71 = 0;
    v72 = v102;
    v73 = v100;
    v74 = v99;
    do
    {
      v75 = v72[v71];
      if (v75 >= 0.0001)
        v76 = v72[v71];
      else
        v76 = 0.0001;
      if (v76 <= 0.9999)
        v77 = v76;
      else
        v77 = 0.9999;
      if (v75 < 0.0001 || v76 > 0.9999)
        v72[v71] = v77;
      v78 = logf(v77);
      v79 = v78 - log(1.0 - v77);
      v74[v71++] = v79;
    }
    while (v70 != v71);
  }
  v86 = a1 + 15;
  kaldi::CuVector<float>::Resize((uint64_t)v86, v73, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v86, (uint64_t)&v99);
  kaldi::Vector<float>::Destroy((uint64_t)&v99);
  kaldi::Vector<float>::Destroy((uint64_t)&v102);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&v105);
LABEL_263:
  kaldi::Vector<float>::Destroy((uint64_t)&v108);
  kaldi::Matrix<float>::~Matrix((uint64_t)v111);
  if (__p)
  {
    v116 = __p;
    operator delete(__p);
  }
  v105 = (float *)&v114;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  if (SHIBYTE(v121) < 0)
    operator delete(v119);
  if (SHIBYTE(v128) < 0)
    operator delete(v126);
  if (SHIBYTE(v131) < 0)
    operator delete(v129);
}

void sub_1ADB68778(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)va1);
  kaldi::Vector<float>::Destroy((uint64_t)&v3);
  JUMPOUT(0x1ADB68830);
}

void kaldi::nnet1::Rbm::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  _QWORD v10[34];

  v6 = *(_DWORD *)(a1 + 296);
  if (v6)
  {
    if (v6 != 1)
      goto LABEL_10;
    v7 = "gauss";
  }
  else
  {
    v7 = "bern";
  }
  kaldi::WriteToken(a2, a3, v7);
  v8 = *(_DWORD *)(a1 + 300);
  if (!v8)
  {
    v9 = "bern";
    goto LABEL_9;
  }
  if (v8 != 1)
  {
LABEL_10:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown type ", 13);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v9 = "gauss";
LABEL_9:
  kaldi::WriteToken(a2, a3, v9);
  kaldi::CuMatrixBase<float>::Write(a1 + 72, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 120, a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 152, a2, a3);
}

void kaldi::nnet1::Rbm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 152, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 72, CblasTrans, 1.0, 1.0);
  if (!*(_DWORD *)(a1 + 300))
    kaldi::CuMatrixBase<float>::Sigmoid(a3, a3);
}

void kaldi::nnet1::Rbm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v10;
  unsigned __int8 *p_p;
  int v12;
  int v13;
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v19);
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21) != 4)
    {
      if (HIBYTE(v21) != 5)
        goto LABEL_18;
      v6 = (unsigned __int8 *)&v19;
      goto LABEL_9;
    }
    if ((_DWORD)v19 != 1852990818)
      goto LABEL_18;
LABEL_16:
    v10 = 0;
    goto LABEL_17;
  }
  if (v20 == 4 && *(_DWORD *)v19 == 1852990818)
    goto LABEL_16;
  if (v20 != 5)
    goto LABEL_18;
  v6 = (unsigned __int8 *)v19;
LABEL_9:
  v7 = *(_DWORD *)v6;
  v8 = v6[4];
  if (v7 == 1937072487 && v8 == 115)
  {
    v10 = 1;
LABEL_17:
    *(_DWORD *)(a1 + 296) = v10;
  }
LABEL_18:
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if (HIBYTE(v18) != 4)
    {
      if (HIBYTE(v18) != 5)
        goto LABEL_35;
      p_p = (unsigned __int8 *)&__p;
      goto LABEL_26;
    }
    if ((_DWORD)__p != 1852990818)
      goto LABEL_35;
LABEL_33:
    v15 = 0;
    goto LABEL_34;
  }
  if (v17 == 4 && *(_DWORD *)__p == 1852990818)
    goto LABEL_33;
  if (v17 != 5)
    goto LABEL_35;
  p_p = (unsigned __int8 *)__p;
LABEL_26:
  v12 = *(_DWORD *)p_p;
  v13 = p_p[4];
  if (v12 == 1937072487 && v13 == 115)
  {
    v15 = 1;
LABEL_34:
    *(_DWORD *)(a1 + 300) = v15;
  }
LABEL_35:
  kaldi::CuMatrix<float>::Read(a1 + 72, a2, a3, 0);
  kaldi::CuVector<float>::Read(a1 + 120, a2, a3);
  kaldi::CuVector<float>::Read(a1 + 152, a2, a3);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
}

void sub_1ADB68C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rbm::Reconstruct(unsigned int *a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[34];

  if (a1[3] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Nonmatching dims, component:", 28);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = a1[2];
  v7 = *(unsigned int *)(a2 + 20);
  if (__PAIR64__(v7, v6) != *(_QWORD *)&a3[2])
    kaldi::CuMatrix<float>::Resize(a3, v7, v6, 0, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, (uint64_t)(a1 + 30), 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, (uint64_t)(a1 + 18), CblasNoTrans, 1.0, 1.0);
  if (!a1[74])
    kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)a3, (uint64_t)a3);
}

void kaldi::nnet1::Rbm::RbmUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  _QWORD v28[34];

  v10 = a1 + 184;
  v11 = a1 + 72;
  v12 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(a1 + 204) == (_DWORD)v12)
  {
    v13 = *(unsigned int *)(a1 + 88);
    if (*(_DWORD *)(a1 + 200) == (_DWORD)v13)
    {
      if (*(_DWORD *)(a1 + 248) == *(_DWORD *)(a1 + 136))
      {
        v13 = *(unsigned int *)(a1 + 200);
        if (*(_DWORD *)(a1 + 280) == *(_DWORD *)(a1 + 168))
          goto LABEL_8;
      }
      else
      {
        v13 = *(unsigned int *)(a1 + 200);
      }
    }
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 88);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 184), v12, v13, 0, 0);
  kaldi::CuVector<float>::Resize(a1 + 232, *(unsigned int *)(a1 + 136), 0);
  kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 168), 0);
LABEL_8:
  if (*(_DWORD *)(a1 + 296) == 1
    && (kaldi::nnet1::CheckNanInf<float>(a2, "pos_vis"),
        kaldi::nnet1::CheckNanInf<float>(a3, "pos_hid"),
        kaldi::nnet1::CheckNanInf<float>(a4, "neg_vis"),
        kaldi::nnet1::CheckNanInf<float>(a5, "pos_hid"),
        v14 = kaldi::nnet1::ComputeStdDev<float>(a2),
        v15 = kaldi::nnet1::ComputeStdDev<float>(a4),
        (float)(v14 + v14) < v15))
  {
    kaldi::CuMatrixBase<float>::Scale(v11, v14 / v15);
    kaldi::CuVectorBase<float>::Scale(a1 + 120, v14 / v15);
    kaldi::CuVectorBase<float>::Scale(a1 + 152, v14 / v15);
    v16 = *(float *)(a1 + 48) * 0.9;
    *(float *)(a1 + 48) = v16;
    kaldi::CuMatrixBase<float>::SetZero(v10);
    kaldi::CuVectorBase<float>::SetZero(a1 + 232);
    kaldi::CuVectorBase<float>::SetZero(a1 + 264);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch between pos_vis and neg_vis variances, ", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"danger of weight explosion. a) Reducing weights with scale ", 59);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" b) Lowering learning rate to ", 30);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" [pos_vis_std:", 14);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",neg_vis_std:", 13);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    }
  }
  else
  {
    v23 = *(float *)(a1 + 48);
    v22 = *(float *)(a1 + 52);
    v24 = *(float *)(a1 + 68);
    v25 = (float)*(int *)(a2 + 20);
    v26 = (float)-v23 / v25;
    kaldi::CuMatrixBase<float>::AddMatMat(v10, a5, CblasTrans, a4, CblasNoTrans, v26, v22);
    v27 = v23 / v25;
    kaldi::CuMatrixBase<float>::AddMatMat(v10, a3, CblasTrans, a2, CblasNoTrans, v27, 1.0);
    kaldi::CuMatrixBase<float>::AddMat(v10, v11, 111, -(float)(v23 * v24), 1.0);
    kaldi::CuMatrixBase<float>::AddMat(v11, v10, 111, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a4, v26, v22);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a2, v27, 1.0);
    kaldi::CuVectorBase<float>::AddVec(a1 + 120, a1 + 232, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a5, v26, v22);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a3, v27, 1.0);
    kaldi::CuVectorBase<float>::AddVec(a1 + 152, a1 + 264, 1.0, 1.0);
  }
}

void sub_1ADB69108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rbm::VisType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::nnet1::Rbm::HidType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 75);
}

_QWORD *kaldi::nnet1::Rbm::WriteAsNnet(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  std::string __p;

  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x101, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  kaldi::CuMatrixBase<float>::Write(a1 + 72, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 152, a2, a3);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  if ((_DWORD)result)
  {
    if ((a3 & 1) != 0)
      return result;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x204, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  result = (_QWORD *)kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  return result;
}

void sub_1ADB6926C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::MultiSoftmax::Copy(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax *v2;

  v2 = (kaldi::nnet1::BlockSoftmax *)operator new();
  kaldi::nnet1::BlockSoftmax::BlockSoftmax(v2, this);
  *(_QWORD *)v2 = &off_1E5D2B4E0;
  return v2;
}

void sub_1ADB692DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiSoftmax::GetType(kaldi::nnet1::MultiSoftmax *this)
{
  return 522;
}

void kaldi::nnet1::MultiSoftmax::InitData(std::vector<int> *this, uint64_t *a2)
{
  uint64_t *v4;
  std::vector<int> *v5;
  void **v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];
  void **v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v4 = a2 + 4;
  v5 = this + 2;
  while ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v13);
    if (SHIBYTE(v15) < 0)
    {
      if (v14 != 8)
        goto LABEL_13;
      v6 = v13;
    }
    else
    {
      if (SHIBYTE(v15) != 8)
        goto LABEL_13;
      v6 = (void **)&v13;
    }
    if (*v6 != (void *)0x3E736D6944534D3CLL)
    {
LABEL_13:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown token ", 14);
      if (v15 >= 0)
        v8 = (void **)&v13;
      else
        v8 = v13;
      if (v15 >= 0)
        v9 = HIBYTE(v15);
      else
        v9 = v14;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (MSDims)", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    kaldi::ReadIntegerVector<int>(a2, 0, v5, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
}

void sub_1ADB69474(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(a1);
}

int *kaldi::nnet1::MultiSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

uint64_t kaldi::nnet1::Recurrent::HistoryStateSize(kaldi::nnet1::Recurrent *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
}

void kaldi::nnet1::Recurrent::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a2[1];
  *(_QWORD *)(a1[1] + 48 * a4 + 32) = a3;
  if (v8)
  {
    for (i = 0; i < v8; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v10 = a1[1] + 48 * a4;
        v11 = *(_QWORD *)(v10 + 8) + 4 * *(_DWORD *)(v10 + 24) * (int)i;
        v12 = *(_DWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 32);
        v14[0] = &unk_1E5D29D70;
        v14[1] = v11;
        v14[3] = v13;
        v14[2] = v12;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v14);
        v8 = a2[1];
      }
    }
  }
}

void kaldi::nnet1::Recurrent::ResetHistoryState(kaldi::nnet1::Recurrent *this)
{
  uint64_t i;

  (*(void (**)(kaldi::nnet1::Recurrent *))(*(_QWORD *)this + 88))(this);
  for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

int *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111);
}

_QWORD *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a4;
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v9;
  v13[3] = v11;
  v13[2] = v10;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::Recurrent::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1[1] + 48 * a3), a2, 111);
}

_QWORD *kaldi::nnet1::Recurrent::SetHistoryState(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a1[1] + 48 * a4;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v10;
  v13[3] = v11;
  v13[2] = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

void kaldi::nnet1::Recurrent::EnsureBuffers(kaldi::nnet1::Recurrent *this)
{
  int v2;
  int v3;
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  if (!*((_BYTE *)this + 388))
  {
    if (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8) != *(_DWORD *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                          + 12))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"this implementation only models the strict recurrent component, i.e, it requests the input ", 91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"and output dimensions be the same,  you set input/out dimension to ", 67);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" and ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    v2 = *((_DWORD *)this + 20);
    if (v2 > 1)
      v3 = v2 + 1;
    else
      v3 = 1;
    v4 = v3;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 42, v3);
    if (v3 >= 1)
    {
      v5 = 0;
      v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      v7 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 1) + v5), *((unsigned int *)this + 24), *(unsigned int *)&v7[*(_QWORD *)(*(_QWORD *)this - 24)], 0, 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 42) + v5), v6, *(unsigned int *)&v7[*(_QWORD *)(*(_QWORD *)this - 24)], 0, 0);
        v5 += 48;
      }
      while (48 * v4 != v5);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)this + 17, v4);
    *((_BYTE *)this + 388) = 1;
  }
}

_QWORD *kaldi::nnet1::Recurrent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(a1 + 480);
  v6 = *(_QWORD *)(a1 + 480);
  if (v6 == *(_QWORD *)(a1 + 488))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 480), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 504), *(int *)(a1 + 80));
    v6 = *(_QWORD *)(a1 + 480);
  }
  kaldi::CuVector<float>::Resize(v6 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  return kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*v5 + 32 * a3), a2);
}

void kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  *((_WORD *)this + 194) = 0;
}

uint64_t kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
  kaldi::nnet1::Recurrent *v2;

  v2 = (kaldi::nnet1::Recurrent *)operator new();
  kaldi::nnet1::Recurrent::Recurrent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADB69A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C408B51CE60);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

void kaldi::nnet1::Recurrent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void *v7;
  BOOL v11;
  float *v12;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  void **v21;
  BOOL v23;
  void *v24;
  void *v25;
  uint64_t v26;
  std::string *v29;
  BOOL v31;
  BOOL v32;
  BOOL v36;
  int inited;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  int32x2_t *v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64[2];
  int v65;
  _QWORD v66[2];
  uint64_t v67;
  void *__p;
  void *v69;
  void *v70[3];
  int v71;
  std::string v72;
  std::string v73;
  std::string v74;
  int v75;
  float v76;
  int v77;

  v76 = 2.0;
  v77 = -1073741824;
  v75 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v74);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[19].u32[1], &v73);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[48].u32[0], &v72);
  v71 = -1;
  memset(v70, 0, sizeof(v70));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_152;
    kaldi::ReadToken(a2, 0, (uint64_t)v70);
    if ((SHIBYTE(v70[2]) & 0x80000000) == 0)
      break;
    v7 = v70[1];
    if (v70[1] == (void *)10)
    {
      if (*(_QWORD *)v70[0] == 0x61654D736169423CLL && *((_WORD *)v70[0] + 4) == 15982)
      {
LABEL_79:
        v12 = (float *)&v77;
LABEL_146:
        kaldi::ReadBasicType<float>(a2, 0, v12);
        goto LABEL_150;
      }
      v7 = v70[1];
    }
    else if (v70[1] == (void *)13
           && *(_QWORD *)v70[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v70[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_120:
      v12 = (float *)&v75;
      goto LABEL_146;
    }
    if (v7 == (void *)11)
    {
      if (*(_QWORD *)v70[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v70[0] + 3) == 0x3E65676E61527361)
      {
LABEL_114:
        v12 = &v76;
        goto LABEL_146;
      }
      v7 = v70[1];
    }
    if (v7 == (void *)9)
    {
      v11 = *(_QWORD *)v70[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v70[0] + 8) == 62;
      v12 = (float *)&a1[50];
      if (v11)
        goto LABEL_146;
      v7 = v70[1];
    }
    if (v7 == (void *)18)
    {
      if (*(_QWORD *)v70[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v70[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v70[0] + 8) == 15973)
      {
LABEL_147:
        v29 = &v73;
        goto LABEL_149;
      }
      v7 = v70[1];
    }
    if (v7 == (void *)9)
    {
      v15 = *(_QWORD *)v70[0] == 0x6461724778614D3CLL && *((_BYTE *)v70[0] + 8) == 62;
      v12 = (float *)&a1[19];
      if (v15)
        goto LABEL_146;
      v7 = v70[1];
    }
    if (v7 == (void *)15)
    {
      v16 = *(_QWORD *)v70[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v70[0] + 7) == 0x3E66656F43657461;
      v12 = (float *)&a1[49];
      if (v16)
        goto LABEL_146;
      v7 = v70[1];
    }
    if (v7 == (void *)19)
    {
      v18 = *(_QWORD *)v70[0] == 0x61654C736169423CLL
         && *((_QWORD *)v70[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v70[0] + 11) == 0x3E66656F43657461;
      v12 = (float *)&a1[49] + 1;
      if (v18)
        goto LABEL_146;
      v7 = v70[1];
    }
    if (v7 != (void *)14)
      goto LABEL_71;
    if (*(_QWORD *)v70[0] != 0x656E696C6E6F4E3CLL || *(_QWORD *)((char *)v70[0] + 6) != 0x3E7974697261656ELL)
    {
      v7 = v70[1];
LABEL_71:
      if (v7 == (void *)12)
      {
        if (*(_QWORD *)v70[0] == 0x536D6F646E61523CLL && *((_DWORD *)v70[0] + 2) == 1046766949)
          goto LABEL_145;
        v7 = v70[1];
      }
      if (v7 != (void *)19)
        goto LABEL_151;
      v21 = (void **)v70[0];
LABEL_90:
      v24 = *v21;
      v25 = v21[1];
      v26 = *(uint64_t *)((char *)v21 + 11);
      if (v24 != (void *)0x61725474696E493CLL || v25 != (void *)0x79546D726F66736ELL || v26 != 0x3E657079546D726FLL)
        goto LABEL_151;
      v29 = &v74;
      goto LABEL_149;
    }
LABEL_148:
    v29 = &v72;
LABEL_149:
    kaldi::ReadToken(a2, 0, (uint64_t)v29);
LABEL_150:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v70[2]))
  {
    case 9:
      goto LABEL_104;
    case 0xA:
      if (v70[0] == (void *)0x61654D736169423CLL && LOWORD(v70[1]) == 15982)
        goto LABEL_79;
      goto LABEL_103;
    case 0xB:
      if (v70[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v70 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_114;
LABEL_103:
      if (HIBYTE(v70[2]) != 9)
        goto LABEL_151;
LABEL_104:
      v31 = v70[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v70[1]) == 62;
      v12 = (float *)&a1[50];
      if (v31)
        goto LABEL_146;
      if (HIBYTE(v70[2]) != 9)
        goto LABEL_151;
LABEL_109:
      v32 = v70[0] == (void *)0x6461724778614D3CLL && LOBYTE(v70[1]) == 62;
      v12 = (float *)&a1[19];
      if (!v32)
        goto LABEL_151;
      goto LABEL_146;
    case 0xC:
      goto LABEL_140;
    case 0xD:
      if (v70[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v70 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_151;
      goto LABEL_120;
    case 0xE:
      goto LABEL_135;
    case 0xF:
LABEL_129:
      v36 = v70[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v70 + 7) == (void *)0x3E66656F43657461;
      v12 = (float *)&a1[49];
      if (v36)
        goto LABEL_146;
      if (HIBYTE(v70[2]) != 12)
        goto LABEL_134;
      goto LABEL_140;
    case 0x12:
      if (v70[0] != (void *)0x6E6569646172473CLL || v70[1] != (void *)0x7079546D726F4E74 || LOWORD(v70[2]) != 15973)
      {
        switch(HIBYTE(v70[2]))
        {
          case 9:
            goto LABEL_109;
          case 0xC:
            goto LABEL_140;
          case 0xE:
            goto LABEL_135;
          case 0xF:
            goto LABEL_129;
          default:
            goto LABEL_151;
        }
      }
      goto LABEL_147;
    case 0x13:
      v23 = v70[0] == (void *)0x61654C736169423CLL
         && v70[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v70[1] + 3) == (void *)0x3E66656F43657461;
      v12 = (float *)&a1[49] + 1;
      if (v23)
        goto LABEL_146;
      if (HIBYTE(v70[2]) == 12)
        goto LABEL_140;
      if (HIBYTE(v70[2]) == 19)
      {
        v21 = v70;
        goto LABEL_90;
      }
LABEL_134:
      if (HIBYTE(v70[2]) != 14)
        goto LABEL_151;
LABEL_135:
      if (v70[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v70 + 6) == (void *)0x3E7974697261656ELL)
        goto LABEL_148;
      if (HIBYTE(v70[2]) != 12)
        goto LABEL_151;
LABEL_140:
      if (v70[0] == (void *)0x536D6F646E61523CLL && LODWORD(v70[1]) == 1046766949)
      {
LABEL_145:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v71);
        goto LABEL_150;
      }
LABEL_151:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v70[2]) >= 0)
          v57 = v70;
        else
          v57 = (void **)v70[0];
        if (SHIBYTE(v70[2]) >= 0)
          v58 = HIBYTE(v70[2]);
        else
          v58 = (uint64_t)v70[1];
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" (Nonlinearity|ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed|MaxGrad|InitTransformType|GradientNormType)", 140);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
      }
LABEL_152:
      a1[48].i32[0] = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v72);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v74);
      a1[19].i32[1] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v73);
      if (v71 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v71);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v66, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)v64, *(unsigned int *)((char *)&a1[1].u32[1] + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)((char *)a1[1].u32 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0);
      v40 = (char *)&a1[1] + 4;
      v41 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      if (*(int *)((char *)&a1[1].i32[1] + v41) >= 1)
      {
        v42 = 0;
        v43 = a1 + 1;
        while (*(int *)((char *)v43->i32 + v41) < 1)
        {
LABEL_168:
          if (++v42 >= *(int *)&v40[v41])
            goto LABEL_169;
        }
        v44 = 0;
        while (2)
        {
          if (inited)
          {
            if (inited != 2)
            {
              if (inited == 1)
              {
                v45 = *(float *)&v75;
                v46 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v45 + v45);
                break;
              }
LABEL_167:
              ++v44;
              v41 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              if (v44 >= *(int *)((char *)v43->i32 + v41))
                goto LABEL_168;
              continue;
            }
            v47 = *(float *)&v75;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v66, 0);
            v46 = v47 * v48;
          }
          else if (v42 == v44)
          {
            v46 = 1.0;
          }
          else
          {
            v46 = 0.0;
          }
          break;
        }
        *((float *)v64[0] + (int)v42 * v65 + v44) = v46;
        goto LABEL_167;
      }
LABEL_169:
      kaldi::CuMatrix<float>::operator=(a1 + 20, (int *)v64);
      v49 = *(unsigned int *)((char *)&a1[1].u32[1] + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v62 = 0;
      v63 = 0;
      v61 = 0;
      kaldi::Vector<float>::Resize((void **)&v61, v49, 0);
      if (*(int *)&v40[*(_QWORD *)(*(_QWORD *)a1 - 24)] < 1)
      {
        v54 = v62;
      }
      else
      {
        v50 = 0;
        do
        {
          v51 = *(float *)&v77;
          v52 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v53 = v51 + (v52 + -0.5) * v76;
          v54 = v62;
          v61[v50++] = v53;
        }
        while (v50 < *(int *)&v40[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
      }
      v55 = a1 + 26;
      kaldi::CuVector<float>::Resize((uint64_t)v55, v54, 1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v55, (uint64_t)&v61);
      kaldi::Vector<float>::Destroy((uint64_t)&v61);
      kaldi::Matrix<float>::~Matrix((uint64_t)v64);
      if (__p)
      {
        v69 = __p;
        operator delete(__p);
      }
      v64[0] = (void **)&v67;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SHIBYTE(v70[2]) < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_151;
  }
}

void sub_1ADB6A42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 217) < 0)
    operator delete(*(void **)(v19 - 240));
  if (*(char *)(v19 - 185) < 0)
    operator delete(*(void **)(v19 - 208));
  if (*(char *)(v19 - 161) < 0)
    operator delete(*(void **)(v19 - 184));
  if (*(char *)(v19 - 137) < 0)
    operator delete(*(void **)(v19 - 160));
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::Recurrent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  BOOL v9;
  float *v10;
  BOOL v12;
  BOOL v14;
  void **v17;
  BOOL v19;
  BOOL v20;
  void *v23;
  int v24;
  BOOL v25;
  BOOL v26;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  void *__p;
  uint64_t v33;
  uint64_t v34;
  void *v35[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v35, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v35);
    if ((SHIBYTE(v35[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v35[2]))
      {
        case 9:
          goto LABEL_58;
        case 0xE:
          goto LABEL_4;
        case 0xF:
          v26 = v35[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v35 + 7) == (void *)0x3E66656F43657461;
          v10 = (float *)(a1 + 392);
          if (!v26)
            goto LABEL_93;
          goto LABEL_83;
        case 0x12:
          goto LABEL_64;
        case 0x13:
          v19 = v35[0] == (void *)0x61654C736169423CLL
             && v35[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v35[1] + 3) == (void *)0x3E66656F43657461;
          v10 = (float *)(a1 + 396);
          if (v19)
            goto LABEL_83;
          switch(HIBYTE(v35[2]))
          {
            case 9u:
              goto LABEL_58;
            case 0x12u:
LABEL_64:
              if (v35[0] == (void *)0x6E6569646172473CLL
                && v35[1] == (void *)0x7079546D726F4E74
                && LOWORD(v35[2]) == 15973)
              {
                goto LABEL_89;
              }
              break;
            case 0xEu:
LABEL_4:
              if (v35[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v35 + 6) == (void *)0x3E7974697261656ELL)
                goto LABEL_88;
              if (HIBYTE(v35[2]) != 9)
                goto LABEL_93;
LABEL_58:
              v20 = v35[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v35[1]) == 62;
              v10 = (float *)(a1 + 400);
              if (v20)
                goto LABEL_83;
              break;
            default:
              goto LABEL_93;
          }
          if (HIBYTE(v35[2]) != 9)
            goto LABEL_93;
          v17 = v35;
          break;
        default:
          goto LABEL_93;
      }
      goto LABEL_73;
    }
    v8 = v35[1];
    if (v35[1] != (void *)15
      || (*(_QWORD *)v35[0] == 0x61526E7261654C3CLL
        ? (v9 = *(_QWORD *)((char *)v35[0] + 7) == 0x3E66656F43657461)
        : (v9 = 0),
          v10 = (float *)(a1 + 392),
          !v9))
    {
      if (v35[1] == (void *)19)
      {
        v12 = *(_QWORD *)v35[0] == 0x61654C736169423CLL
           && *((_QWORD *)v35[0] + 1) == 0x6F43657461526E72
           && *(_QWORD *)((char *)v35[0] + 11) == 0x3E66656F43657461;
        v10 = (float *)(a1 + 396);
        if (v12)
          goto LABEL_83;
        v8 = v35[1];
      }
      if (v8 == (void *)14)
      {
        if (*(_QWORD *)v35[0] == 0x656E696C6E6F4E3CLL && *(_QWORD *)((char *)v35[0] + 6) == 0x3E7974697261656ELL)
        {
LABEL_88:
          __p = 0;
          v33 = 0;
          v34 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          *(_DWORD *)(a1 + 384) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
          goto LABEL_90;
        }
        v8 = v35[1];
      }
      if (v8 != (void *)9)
        goto LABEL_36;
      v14 = *(_QWORD *)v35[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v35[0] + 8) == 62;
      v10 = (float *)(a1 + 400);
      if (!v14)
      {
        v8 = v35[1];
LABEL_36:
        if (v8 == (void *)18)
        {
          if (*(_QWORD *)v35[0] == 0x6E6569646172473CLL
            && *((_QWORD *)v35[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v35[0] + 8) == 15973)
          {
LABEL_89:
            __p = 0;
            v33 = 0;
            v34 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
LABEL_90:
            if (SHIBYTE(v34) < 0)
              operator delete(__p);
            goto LABEL_84;
          }
          v8 = v35[1];
        }
        if (v8 != (void *)9)
          goto LABEL_93;
        v17 = (void **)v35[0];
LABEL_73:
        v23 = *v17;
        v24 = *((unsigned __int8 *)v17 + 8);
        v25 = v23 == (void *)0x6461724778614D3CLL && v24 == 62;
        v10 = (float *)(a1 + 152);
        if (!v25)
        {
LABEL_93:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v35[2]) >= 0)
            v29 = v35;
          else
            v29 = (void **)v35[0];
          if (SHIBYTE(v35[2]) >= 0)
            v30 = HIBYTE(v35[2]);
          else
            v30 = (uint64_t)v35[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
      }
    }
LABEL_83:
    kaldi::ReadBasicType<float>(a2, a3, v10);
LABEL_84:
    if (SHIBYTE(v35[2]) < 0)
      operator delete(v35[0]);
  }
  kaldi::CuMatrix<float>::Read(a1 + 160, a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 208, a2, a3);
}

void sub_1ADB6A99C()
{
  JUMPOUT(0x1ADB6A9A4);
}

_QWORD *kaldi::nnet1::Recurrent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<Nonlinearity>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADB6AB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Recurrent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  v8 = a1 + 208;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 160, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*((_DWORD *)this + 56) + *((_DWORD *)this + 44) * *((_DWORD *)this + 45));
}

const void **kaldi::nnet1::Recurrent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = *(_DWORD *)(a1 + 176) * *(_DWORD *)(a1 + 180);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2;
  LODWORD(v9) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v8, a1 + 160);
  v6 = *(_DWORD *)(a1 + 224);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v6;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 208), (uint64_t)&v8);
}

void *kaldi::nnet1::Recurrent::SetParams(_DWORD *a1, char **a2)
{
  int v4;
  int v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  v4 = a1[44] * a1[45];
  v8 = 0;
  v9 = 0;
  v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v7);
  v5 = a1[56];
  v8 = 0;
  v9 = 0;
  v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 52, (uint64_t)&v7);
}

float kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160);
  return v2 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 208);
}

uint64_t kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  uint64_t v4;
  _QWORD v6[4];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v7, 111, a2, 1.0);
  v4 = *((unsigned int *)this + 56);
  v6[0] = &unk_1E5D341C8;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, (uint64_t)v6, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADB6ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void *v12[2];
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::Recurrent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v14, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v13 & 0x80u) == 0)
    v3 = v12;
  else
    v3 = (void **)v12[0];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (uint64_t)v12[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADB6AF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void *__p[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  void *v36[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;

  if (*((_BYTE *)this + 388) && *((_BYTE *)this + 389))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 30);
    if ((v41 & 0x80u) == 0)
      v4 = v40;
    else
      v4 = (void **)v40[0];
    if ((v41 & 0x80u) == 0)
      v5 = v41;
    else
      v5 = (std::string::size_type)v40[1];
    v6 = std::string::append(&v42, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v43, ", lr-coef ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v39 & 0x80u) == 0)
      v10 = v38;
    else
      v10 = (void **)v38[0];
    if ((v39 & 0x80u) == 0)
      v11 = v39;
    else
      v11 = (std::string::size_type)v38[1];
    v12 = std::string::append(&v44, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v45, ", max-norm ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v37 & 0x80u) == 0)
      v16 = v36;
    else
      v16 = (void **)v36[0];
    if ((v37 & 0x80u) == 0)
      v17 = v37;
    else
      v17 = (std::string::size_type)v36[1];
    v18 = std::string::append(&v46, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v47, "\n  bias_grad");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 33);
    if ((v35 & 0x80u) == 0)
      v22 = v34;
    else
      v22 = (void **)v34[0];
    if ((v35 & 0x80u) == 0)
      v23 = v35;
    else
      v23 = (std::string::size_type)v34[1];
    v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v49, ", lr-coef ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v33 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v29 = v33;
    else
      v29 = (std::string::size_type)__p[1];
    v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((char)v33 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if ((char)v35 < 0)
      operator delete(v34[0]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if ((char)v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if ((char)v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1ADB6B2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1ADB6B41C()
{
  JUMPOUT(0x1ADB6B3C4);
}

void sub_1ADB6B424()
{
  JUMPOUT(0x1ADB6B3D4);
}

void sub_1ADB6B42C()
{
  JUMPOUT(0x1ADB6B3E4);
}

void sub_1ADB6B434()
{
  JUMPOUT(0x1ADB6B3F4);
}

void sub_1ADB6B43C()
{
  JUMPOUT(0x1ADB6B404);
}

uint64_t kaldi::nnet1::Recurrent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 388) = 0;
  return result;
}

void kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, int32x2_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  std::string *p_p;
  std::string::size_type size;
  unsigned int v73;
  int *v74;
  uint64_t v75;
  int v76;
  std::string __p;
  void *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  __int128 v82;
  __int128 v83;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v8 = *(unsigned int *)(a1 + 96);
  v9 = *(unsigned int *)(a1 + 100);
  v10 = *(_DWORD *)(a2 + 20);
  v11 = a3[4];
  v12 = a4;
  v13 = *(_QWORD *)(a1 + 336);
  v14 = (int32x2_t *)(v13 + 48 * a4);
  v14[4] = v11;
  v15 = *(_QWORD *)(a1 + 8);
  *(int32x2_t *)(v15 + 48 * a4 + 32) = v11;
  v16 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) == v16 || *(int *)(v16 + 32 * a4 + 16) < 1)
  {
    v76 = 0;
  }
  else
  {
    v17 = (int32x2_t *)(*(_QWORD *)(a1 + 504) + 48 * a4);
    v17[4] = v11;
    v76 = 1;
    kaldi::CuMatrix<float>::Resize(v17, v8, v14[2].u32[0], 1, 0);
    v13 = *(_QWORD *)(a1 + 336);
    v15 = *(_QWORD *)(a1 + 8);
  }
  v18 = v13 + 48 * a4;
  v19 = *(_DWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)&v79 = *(_QWORD *)(v18 + 8);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v8, v19);
  *(_QWORD *)&v80 = *(_QWORD *)(v18 + 24);
  *((_QWORD *)&v80 + 1) = v20;
  v78 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v78, v15 + 48 * a4, 111);
  v74 = (int *)a3;
  v78 = &unk_1E5D29D40;
  v79 = 0u;
  v80 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
  v21 = *(_QWORD *)(a1 + 336) + 48 * a4;
  v22 = *(_DWORD *)(v21 + 16);
  v23 = *(_DWORD *)(v21 + 24);
  v24 = *(_QWORD *)(v21 + 8) + 4 * (int)(v23 * v8);
  v25 = *(_DWORD *)(v21 + 28) - v23 * v8;
  v26 = *(_QWORD *)(v21 + 32);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v10, v22);
  *(_QWORD *)&v80 = __PAIR64__(v25, v23);
  *((_QWORD *)&v80 + 1) = v26;
  v78 = &unk_1E5D29D40;
  *(_QWORD *)&v79 = v24;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v78, a2, 111);
  v78 = &unk_1E5D29D40;
  v79 = 0u;
  v80 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
  v27 = *(_QWORD *)(a1 + 336) + 48 * a4;
  v28 = *(_DWORD *)(v27 + 16);
  v29 = *(_DWORD *)(v27 + 24);
  v30 = *(_QWORD *)(v27 + 8) + 4 * (int)(v29 * v8);
  v31 = *(_DWORD *)(v27 + 28) - v29 * v8;
  v32 = *(_QWORD *)(v27 + 32);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v10, v28);
  v73 = v10;
  *(_QWORD *)&v80 = __PAIR64__(v31, v29);
  *((_QWORD *)&v80 + 1) = v32;
  v78 = &unk_1E5D29D40;
  *(_QWORD *)&v79 = v30;
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v78, a1 + 208, 1.0, 1.0);
  v78 = &unk_1E5D29D40;
  v79 = 0u;
  v80 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
  if ((int)v9 >= 1)
  {
    v33 = 0;
    v34 = 0;
    v75 = v9 + 1;
    v35 = 1;
    do
    {
      v36 = *(_QWORD *)(a1 + 336);
      v37 = v36 + 48 * (int)v12;
      v38 = *(_DWORD *)(v37 + 16);
      v39 = *(_DWORD *)(v37 + 24);
      v40 = v39 * (v8 + v34);
      v41 = *(_QWORD *)(v37 + 8) + 4 * v40;
      v42 = *(_DWORD *)(v37 + 28) - v40;
      v43 = *(_QWORD *)(v37 + 32);
      *((_QWORD *)&v82 + 1) = __PAIR64__(v8, v38);
      *(_QWORD *)&v83 = __PAIR64__(v42, v39);
      *((_QWORD *)&v83 + 1) = v43;
      v81 = &unk_1E5D29D40;
      *(_QWORD *)&v82 = v41;
      if (v35 > 1)
        v44 = v76;
      else
        v44 = 0;
      v45 = v34;
      if (v44 == 1)
      {
        v46 = *(_QWORD *)(a1 + 504) + 48 * (int)v12;
        v47 = *(_QWORD *)(a1 + 480) + 32 * v12;
        *((_QWORD *)&v79 + 1) = 0;
        v78 = &unk_1E5D29D70;
        *(_QWORD *)&v79 = *(_QWORD *)(v47 + 8) + v33;
        DWORD2(v79) = v8;
        *(_QWORD *)&v80 = *(_QWORD *)(v47 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v46, (uint64_t)&v81, (uint64_t)&v78, 0);
        v45 = (v35 - 1) * v8;
        v36 = *(_QWORD *)(a1 + 336);
      }
      v48 = v36 + 48 * (int)v12;
      v49 = *(_DWORD *)(v48 + 16);
      v50 = *(_DWORD *)(v48 + 24);
      v51 = *(_QWORD *)(v48 + 8) + 4 * (int)(v50 * v45);
      v52 = *(_DWORD *)(v48 + 28) - v50 * v45;
      v53 = *(_QWORD *)(v48 + 32);
      *((_QWORD *)&v79 + 1) = __PAIR64__(v8, v49);
      *(_QWORD *)&v80 = __PAIR64__(v52, v50);
      *((_QWORD *)&v80 + 1) = v53;
      v78 = &unk_1E5D29D40;
      *(_QWORD *)&v79 = v51;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v81, (uint64_t)&v78, CblasNoTrans, a1 + 160, CblasTrans, 1.0, 1.0);
      v78 = &unk_1E5D29D40;
      v79 = 0u;
      v80 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
      if (v44)
      {
        v54 = *(_QWORD *)(a1 + 504) + 48 * (int)v12;
        v55 = *(_QWORD *)(a1 + 480) + 32 * v12;
        *((_QWORD *)&v79 + 1) = 0;
        v78 = &unk_1E5D29D70;
        *(_QWORD *)&v79 = *(_QWORD *)(v55 + 8) + 4 * v45;
        DWORD2(v79) = v8;
        *(_QWORD *)&v80 = *(_QWORD *)(v55 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v81, v54, (uint64_t)&v78, 0);
      }
      v56 = *(_DWORD *)(a1 + 384);
      switch(v56)
      {
        case 520:
          kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v81, 0.0);
          break;
        case 517:
          kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v81, (uint64_t)&v81);
          break;
        case 516:
          kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v81, (uint64_t)&v81);
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Unknown nonlinearity type: ", 27);
          kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v78);
      }
      v81 = &unk_1E5D29D40;
      v82 = 0u;
      v83 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
      ++v35;
      v34 += v8;
      v33 += 4 * v8;
    }
    while (v75 != v35);
  }
  v57 = *(_QWORD *)(a1 + 336) + 48 * (int)v12;
  v58 = *(_DWORD *)(v57 + 16);
  v59 = *(_DWORD *)(v57 + 24);
  v60 = *(_QWORD *)(v57 + 8) + 4 * (int)(v59 * v8);
  v61 = *(_DWORD *)(v57 + 28) - v59 * v8;
  v62 = *(_QWORD *)(v57 + 32);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v73, v58);
  *(_QWORD *)&v80 = __PAIR64__(v61, v59);
  *((_QWORD *)&v80 + 1) = v62;
  v78 = &unk_1E5D29D40;
  *(_QWORD *)&v79 = v60;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v74, (uint64_t)&v78, 111);
  v78 = &unk_1E5D29D40;
  v79 = 0u;
  v80 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
  v63 = (int *)(*(_QWORD *)(a1 + 8) + 48 * v12);
  v64 = *(_QWORD *)(a1 + 336) + 48 * v12;
  v65 = *(_DWORD *)(v64 + 16);
  v66 = *(_QWORD *)(v64 + 8);
  v67 = *(_DWORD *)(v64 + 24);
  v68 = *(_DWORD *)(v64 + 28);
  v69 = *(_QWORD *)(v64 + 32);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v8, v65);
  LODWORD(v80) = v67;
  DWORD1(v80) = v68 - v67 * v73;
  *((_QWORD *)&v80 + 1) = v69;
  v78 = &unk_1E5D29D40;
  *(_QWORD *)&v79 = v66 + 4 * (int)(v67 * v73);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v63, (uint64_t)&v78, 111);
  v78 = &unk_1E5D29D40;
  v79 = 0u;
  v80 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
}

void sub_1ADB6BAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 128) = &unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  JUMPOUT(0x1ADB6BAF4);
}

void kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v10 = &unk_1E5D29D40;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v3 | 0x100000000;
  LODWORD(v12) = v3;
  DWORD1(v12) = v3;
  *((_QWORD *)&v12 + 1) = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = &unk_1E5D29D40;
  *(_QWORD *)&v8 = v6;
  *((_QWORD *)&v8 + 1) = v5 | 0x100000000;
  LODWORD(v9) = v5;
  DWORD1(v9) = v5;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)a1 + 248))(a1, &v10, &v7, 0);
  v7 = &unk_1E5D29D40;
  v8 = 0u;
  v9 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v7);
  v10 = &unk_1E5D29D40;
  v11 = 0u;
  v12 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
}

void sub_1ADB6BBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v17 = v14;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v15;
  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  std::string *p_p;
  std::string::size_type size;
  int *v65;
  int v66;
  uint64_t v67;
  std::string __p;
  void *v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  __int128 v76;
  __int128 v77;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  if (a5)
    v10 = (uint64_t)a5;
  else
    v10 = a4;
  v11 = *(int32x2_t *)(v10 + 32);
  v12 = a6;
  *(int32x2_t *)(*(_QWORD *)(a1 + 336) + 48 * a6 + 32) = v11;
  v13 = *(_QWORD *)(a1 + 360);
  v14 = (int32x2_t *)(v13 + 48 * a6);
  v14[4] = v11;
  v15 = *(unsigned int *)(a1 + 96);
  v67 = *(unsigned int *)(a1 + 100);
  v16 = *(_QWORD *)(a1 + 480);
  v65 = a5;
  if (*(_QWORD *)(a1 + 488) == v16 || *(int *)(v16 + 32 * v12 + 16) < 1)
  {
    v66 = 0;
  }
  else
  {
    v17 = (int32x2_t *)(*(_QWORD *)(a1 + 504) + 48 * v12);
    v17[4] = v11;
    v66 = 1;
    kaldi::CuMatrix<float>::Resize(v17, v15, v14[2].u32[0], 1, 0);
    v13 = *(_QWORD *)(a1 + 360);
    v11 = *(int32x2_t *)(v13 + 48 * v12 + 32);
  }
  v18 = v13 + 48 * (int)v12;
  v19 = (v15 * v67);
  v20 = *(_DWORD *)(v18 + 16);
  *(_QWORD *)&v70 = *(_QWORD *)(v18 + 8);
  DWORD2(v70) = v20;
  HIDWORD(v70) = v15 * v67;
  *(_QWORD *)&v71 = *(_QWORD *)(v18 + 24);
  *((int32x2_t *)&v71 + 1) = v11;
  v69 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v69, a4, 111);
  v69 = &unk_1E5D29D40;
  v70 = 0u;
  v71 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
  v22 = *(_QWORD *)(a1 + 360) + 48 * (int)v12;
  v23 = *(_DWORD *)(v22 + 16);
  v24 = *(_DWORD *)(v22 + 24);
  v25 = *(_QWORD *)(v22 + 8) + 4 * (int)(v24 * v19);
  v26 = *(_DWORD *)(v22 + 28) - v24 * v19;
  v27 = *(_QWORD *)(v22 + 32);
  *((_QWORD *)&v70 + 1) = __PAIR64__(v15, v23);
  *(_QWORD *)&v71 = __PAIR64__(v26, v24);
  *((_QWORD *)&v71 + 1) = v27;
  v69 = &unk_1E5D29D40;
  *(_QWORD *)&v70 = v25;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v69);
  v69 = &unk_1E5D29D40;
  v70 = 0u;
  v71 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
  if ((int)v67 >= 1)
  {
    v28 = 0;
    v29 = v67;
    do
    {
      v30 = *(_QWORD *)(a1 + 336) + 48 * v12;
      v31 = v19;
      v32 = v19 + v28;
      v33 = *(_DWORD *)(v30 + 16);
      v34 = *(_DWORD *)(v30 + 24);
      v35 = *(_QWORD *)(v30 + 8) + 4 * (int)(v34 * (v19 + v28));
      v36 = *(_DWORD *)(v30 + 28) - v34 * (v19 + v28);
      v37 = *(_QWORD *)(v30 + 32);
      *((_QWORD *)&v76 + 1) = __PAIR64__(v15, v33);
      *(_QWORD *)&v77 = __PAIR64__(v36, v34);
      *((_QWORD *)&v77 + 1) = v37;
      v75 = &unk_1E5D29D40;
      *(_QWORD *)&v76 = v35;
      v38 = *(_QWORD *)(a1 + 360);
      v39 = v38 + 48 * v12;
      LODWORD(v35) = *(_DWORD *)(v39 + 16);
      v40 = *(_DWORD *)(v39 + 24);
      v41 = v40 * (v15 * (v67 - 1) + v28);
      v42 = *(_QWORD *)(v39 + 8) + 4 * v41;
      v43 = *(_DWORD *)(v39 + 28) - v41;
      v44 = *(_QWORD *)(v39 + 32);
      *((_QWORD *)&v73 + 1) = __PAIR64__(v15, v35);
      *(_QWORD *)&v74 = __PAIR64__(v43, v40);
      *((_QWORD *)&v74 + 1) = v44;
      v72 = &unk_1E5D29D40;
      *(_QWORD *)&v73 = v42;
      if (v29 < v67)
        v45 = v66;
      else
        v45 = 0;
      if (v45 == 1)
      {
        v46 = *(_QWORD *)(a1 + 504) + 48 * (int)v12;
        v47 = *(_QWORD *)(a1 + 480) + 32 * v12;
        *((_QWORD *)&v70 + 1) = 0;
        v69 = &unk_1E5D29D70;
        *(_QWORD *)&v70 = *(_QWORD *)(v47 + 8) + 4 * v32;
        DWORD2(v70) = v15;
        *(_QWORD *)&v71 = *(_QWORD *)(v47 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v46, (uint64_t)&v72, (uint64_t)&v69, 0);
        v38 = *(_QWORD *)(a1 + 360);
      }
      v48 = v38 + 48 * (int)v12;
      v49 = *(_DWORD *)(v48 + 16);
      v50 = *(_DWORD *)(v48 + 24);
      v51 = *(_QWORD *)(v48 + 8) + 4 * (int)(v50 * v32);
      v52 = *(_DWORD *)(v48 + 28) - v50 * v32;
      v53 = *(_QWORD *)(v48 + 32);
      *((_QWORD *)&v70 + 1) = __PAIR64__(v15, v49);
      *(_QWORD *)&v71 = __PAIR64__(v52, v50);
      *((_QWORD *)&v71 + 1) = v53;
      v54 = v21;
      v55 = v21 + 16;
      v69 = v55;
      *(_QWORD *)&v70 = v51;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v72, (uint64_t)&v69, CblasNoTrans, a1 + 160, CblasNoTrans, 1.0, 1.0);
      v69 = v55;
      v70 = 0u;
      v71 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
      v21 = v54;
      if (v45)
      {
        v56 = *(_QWORD *)(a1 + 504) + 48 * (int)v12;
        v57 = *(_QWORD *)(a1 + 480) + 32 * v12;
        *((_QWORD *)&v70 + 1) = 0;
        v69 = &unk_1E5D29D70;
        *(_QWORD *)&v70 = *(_QWORD *)(v57 + 8) + 4 * v32;
        DWORD2(v70) = v15;
        *(_QWORD *)&v71 = *(_QWORD *)(v57 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v72, v56, (uint64_t)&v69, 0);
      }
      v58 = *(_DWORD *)(a1 + 384);
      if (v58 == 520)
      {
        kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)&v75);
        v19 = v31;
        kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v72, (uint64_t)&v75);
      }
      else
      {
        v19 = v31;
        if (v58 == 517)
        {
          kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v72, (uint64_t)&v75, (uint64_t)&v72);
        }
        else
        {
          if (v58 != 516)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Unknown nonlinearity type: ", 27);
            kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v69);
          }
          kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v72, (uint64_t)&v75, (uint64_t)&v72);
        }
      }
      v72 = v54 + 16;
      --v29;
      v73 = 0u;
      v74 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
      v75 = v54 + 16;
      v76 = 0u;
      v77 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v28 -= v15;
    }
    while ((unint64_t)(v29 + 1) > 1);
  }
  if (v65)
  {
    v59 = *(_QWORD *)(a1 + 360) + 48 * (int)v12;
    v60 = *(_DWORD *)(v59 + 16);
    v61 = *(_QWORD *)(v59 + 32);
    *(_QWORD *)&v70 = *(_QWORD *)(v59 + 8);
    *((_QWORD *)&v70 + 1) = __PAIR64__(v19, v60);
    *(_QWORD *)&v71 = *(_QWORD *)(v59 + 24);
    *((_QWORD *)&v71 + 1) = v61;
    v69 = v21 + 16;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v65, (uint64_t)&v69, 111);
    v69 = v21 + 16;
    v70 = 0u;
    v71 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
  }
}

void sub_1ADB6C1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _OWORD *a13, _OWORD *a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 168) = v14 + 16;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v15 - 168));
  *(_QWORD *)(v15 - 128) = v14 + 16;
  *a14 = 0u;
  a14[1] = 0u;
  JUMPOUT(0x1ADB6C20CLL);
}

void kaldi::nnet1::Recurrent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  int v10;
  int v11;
  float v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  __int128 v28;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  v9 = *(_QWORD *)(a1 + 240) + 48 * a5;
  *(_QWORD *)(v9 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 32 * a5 + 24) = a4;
  v10 = *(_DWORD *)(a1 + 96);
  v11 = *(_DWORD *)(a1 + 100);
  v12 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 408) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(a1 + 360) + 48 * a5;
  LODWORD(a2) = v11 * v10;
  v14 = *(_DWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)&v27 = *(_QWORD *)(v13 + 8);
  *((_QWORD *)&v27 + 1) = __PAIR64__(a2, v14);
  *(_QWORD *)&v28 = *(_QWORD *)(v13 + 24);
  *((_QWORD *)&v28 + 1) = v15;
  v26 = &unk_1E5D29D40;
  v16 = *(_QWORD *)(a1 + 336) + 48 * a5;
  v17 = *(_DWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)&v24 = *(_QWORD *)(v16 + 8);
  *((_QWORD *)&v24 + 1) = __PAIR64__(a2, v17);
  *(_QWORD *)&v25 = *(_QWORD *)(v16 + 24);
  *((_QWORD *)&v25 + 1) = v18;
  v23 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v9, (uint64_t)&v26, CblasTrans, (uint64_t)&v23, CblasNoTrans, 1.0, v12);
  v23 = &unk_1E5D29D40;
  v24 = 0u;
  v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  v26 = &unk_1E5D29D40;
  v27 = 0u;
  v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  v19 = *(_QWORD *)(a1 + 264) + 32 * a5;
  v20 = *(_QWORD *)(a1 + 360) + 48 * a5;
  v21 = *(_DWORD *)(v20 + 16);
  v22 = *(_QWORD *)(v20 + 32);
  *(_QWORD *)&v27 = *(_QWORD *)(v20 + 8);
  *((_QWORD *)&v27 + 1) = __PAIR64__(a2, v21);
  *(_QWORD *)&v28 = *(_QWORD *)(v20 + 24);
  *((_QWORD *)&v28 + 1) = v22;
  v26 = &unk_1E5D29D40;
  kaldi::CuVectorBase<float>::AddRowSumMat(v19, (uint64_t)&v26, 1.0, v12);
  v26 = &unk_1E5D29D40;
  v27 = 0u;
  v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
}

void sub_1ADB6C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _OWORD *v15;

  a14 = v14 + 16;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3)
{
  float v3;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v3 = a2;
  v5 = *((_DWORD *)this + 39);
  if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v8 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 30) + 48 * a3, *((_QWORD *)this + 36) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 33) + 32 * v8, *((_QWORD *)this + 39) + 32 * v8, v3);
    }
  }
  else if (v5 == 1)
  {
    if (a2 > 0.0)
    {
      v6 = a3;
      if (*((_BYTE *)this + 84))
        v3 = (float)*(int *)(*((_QWORD *)this + 51) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 30) + 48 * a3, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 33) + 32 * v6, v3);
    }
  }
  else if (a2 > 0.0 && v5 == 2)
  {
    v10 = a3;
    if (*((_BYTE *)this + 84))
      v3 = (float)*(int *)(*((_QWORD *)this + 51) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 30) + 48 * a3, (int *)(*((_QWORD *)this + 36) + 48 * a3), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 33) + 32 * v10, (_QWORD *)(*((_QWORD *)this + 39) + 32 * v10), v3);
  }
}

void kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[2];
  uint64_t v25;
  void *v26;

  (*(void (**)(kaldi::nnet1::Recurrent *))(*(_QWORD *)this + 88))(this);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers(this);
  v6 = *(float *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 56);
  v8 = *((float *)this + 16);
  v7 = *((float *)this + 17);
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 29) = a2;
  v9 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = *((_DWORD *)this + 20);
  if ((_DWORD)v9 == 1)
    v10 = 0;
  v11 = v10;
  v12 = *((_QWORD *)this + 30);
  v13 = v12 + 48 * v10;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 33) + 32 * v10 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 36) + 48 * v10 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 39) + 32 * v10 + 24) = a2;
  if (v10 == (_DWORD)v9)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13, v12, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 33) + 32 * v11, *((_QWORD *)this + 33), 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v14 = 1;
      v15 = 32;
      v16 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 30) + 48 * (int)v11, *((_QWORD *)this + 30) + v16, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 33) + 32 * v11, *((_QWORD *)this + 33) + v15, 1.0, 1.0);
        ++v14;
        v16 += 48;
        v15 += 32;
      }
      while (v14 < *((int *)this + 20));
    }
    v17 = (int *)*((_QWORD *)this + 51);
    v17[v11] = 0;
    if ((int)v9 >= 1)
    {
      v18 = 0;
      v19 = v17;
      do
      {
        v20 = *v19++;
        v18 += v20;
        v17[v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((_BYTE *)this + 84))
    v6 = v6 / (float)*(int *)(*((_QWORD *)this + 51) + 4 * v11);
  if (*((float *)this + 38) >= 0.0)
    (*(void (**)(kaldi::nnet1::Recurrent *, uint64_t))(*(_QWORD *)this + 280))(this, v11);
  if (v8 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, (float)-(float)(v6 * v8) * (float)*(int *)(*((_QWORD *)this + 51) + 4 * v11), 1.0);
  v21 = *((_QWORD *)this + 30);
  if (v7 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v21 + 48 * (int)v11, (float)(v7 * v6) * (float)*(int *)(*((_QWORD *)this + 51) + 4 * v11), v6);
    v21 = *((_QWORD *)this + 30);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v21 + 48 * (int)v11, 111, -(float)(v6 * *((float *)this + 98)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, *((_QWORD *)this + 33) + 32 * v11, -(float)(v6 * *((float *)this + 99)), 1.0);
  if (*((float *)this + 100) > 0.0)
  {
    *((_QWORD *)this + 58) = a2;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 108, (uint64_t)this + 160, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 432, (uint64_t)this + 160);
    v22 = *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
    v25 = 0;
    v26 = 0;
    v24[0] = &unk_1E5D341C8;
    v24[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v24, v22, 0);
    v26 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v24, (uint64_t)this + 432, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v24, 0.5);
    v23[0] = &unk_1E5D341C8;
    v23[1] = 0;
    v23[2] = 0;
    v23[3] = v26;
    kaldi::CuVector<float>::Resize((uint64_t)v23, v25, 1);
    kaldi::CuVectorBase<float>::CopyFromVec(v23, (uint64_t)v24);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v23, 1.0 / *((float *)this + 100));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v23, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v23);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 160, (uint64_t)v23);
    v23[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v23);
    v24[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v24);
  }
}

void sub_1ADB6C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*v9 + 272))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 1);
  v11 = a1[44] * a1[45];
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4;
  LODWORD(v15) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v14, v9[30]);
  v12 = a1[56];
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4 + 4 * v11;
  LODWORD(v15) = v12;
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v9[33], (uint64_t)&v14);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Copy((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Info((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void `virtual thunk to'kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::Recurrent::InfoGradient((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::Recurrent::InitData((int32x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  kaldi::nnet1::Recurrent::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(_QWORD *a1, uint64_t a2, int32x2_t *a3, int a4)
{
  kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  kaldi::nnet1::Recurrent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

double `virtual thunk to'kaldi::nnet1::Recurrent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Recurrent::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *`virtual thunk to'kaldi::nnet1::Recurrent::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::Recurrent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 224)
                      + *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 176)
                      * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 180));
}

const void **`virtual thunk to'kaldi::nnet1::Recurrent::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::Recurrent::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void *`virtual thunk to'kaldi::nnet1::Recurrent::SetParams(_QWORD *a1, char **a2)
{
  return kaldi::nnet1::Recurrent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float `virtual thunk to'kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this)
{
  char *v1;
  float v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)(v1 + 160));
  return v2 + kaldi::CuVectorBase<float>::Sum((uint64_t)(v1 + 208));
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  return kaldi::nnet1::Recurrent::PerturbParams((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::Recurrent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Recurrent::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

_QWORD *`virtual thunk to'kaldi::nnet1::Recurrent::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 388) = 0;
  return result;
}

void `virtual thunk to'kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3)
{
  kaldi::nnet1::Recurrent::NormalizeGradients((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 264)), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  kaldi::nnet1::Recurrent::UpdateWeights((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 194) = 0;
}

uint64_t kaldi::nnet1::AveragePoolingComponent::Copy(kaldi::nnet1::AveragePoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2EF98;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  return v2;
}

void sub_1ADB6CC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePoolingComponent::GetType(kaldi::nnet1::AveragePoolingComponent *this)
{
  return 2050;
}

void kaldi::nnet1::AveragePoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v16;
  BOOL v17;
  char **v19;
  uint64_t v20;
  int v21;
  _QWORD *v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[34];
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v3 = a2 + 4;
  v4 = (float *)(a1 + 60);
  v5 = a1 + 56;
  v6 = a1 + 52;
  v7 = a1 + 48;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
    {
      v8 = HIBYTE(v31);
      goto LABEL_59;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v29);
    v8 = HIBYTE(v31);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
      if (HIBYTE(v31) != 7)
      {
        if (HIBYTE(v31) == 10)
        {
          v16 = v29 == (char *)0x7A69536C6F6F503CLL && (unsigned __int16)v30 == 15973;
          v10 = v7;
          if (!v16)
          {
            v17 = v29 == (char *)0x6574536C6F6F503CLL && (unsigned __int16)v30 == 15984;
            v10 = v6;
            if (!v17)
              goto LABEL_62;
          }
        }
        else
        {
          if (HIBYTE(v31) != 12)
            goto LABEL_62;
          v9 = v29 == (char *)0x7274536C6F6F503CLL && v30 == 1046832233;
          v10 = v5;
          if (!v9)
          {
            v19 = &v29;
            goto LABEL_54;
          }
        }
        goto LABEL_49;
      }
      if ((_DWORD)v29 != 1633899324 || *(_DWORD *)((char *)&v29 + 3) != 1046834273)
        goto LABEL_62;
LABEL_48:
      kaldi::ReadBasicType<float>(a2, 0, v4);
      goto LABEL_50;
    }
    v11 = v30;
    if (v30 == 10)
    {
      v12 = *(_QWORD *)v29 == 0x7A69536C6F6F503CLL && *((_WORD *)v29 + 4) == 15973;
      v10 = v7;
      if (v12)
        goto LABEL_49;
      v13 = *(_QWORD *)v29 == 0x6574536C6F6F503CLL && *((_WORD *)v29 + 4) == 15984;
      v10 = v6;
      if (v13)
        goto LABEL_49;
      v11 = v30;
    }
    if (v11 != 12)
      goto LABEL_28;
    v14 = *(_QWORD *)v29 == 0x7274536C6F6F503CLL && *((_DWORD *)v29 + 2) == 1046832233;
    v10 = v5;
    if (!v14)
      break;
LABEL_49:
    kaldi::ReadBasicType<int>(a2, 0, v10);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v30;
LABEL_28:
  if (v11 != 7)
    goto LABEL_52;
  if (*(_DWORD *)v29 == 1633899324 && *(_DWORD *)(v29 + 3) == 1046834273)
    goto LABEL_48;
  v11 = v30;
LABEL_52:
  if (v11 != 12)
    goto LABEL_62;
  v19 = (char **)v29;
LABEL_54:
  v20 = (uint64_t)*v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_62:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
    if (v31 >= 0)
      v24 = &v29;
    else
      v24 = (char **)v29;
    if (v31 >= 0)
      v25 = HIBYTE(v31);
    else
      v25 = v30;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (PoolSize|PoolStep|PoolStride|Scale)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
LABEL_59:
  if (v8 < 0)
    operator delete(v29);
}

void sub_1ADB6CFD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::AveragePoolingComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Scale>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::AveragePoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  _QWORD v19[5];
  _QWORD v20[5];

  v18 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 52);
  if ((v18 & 0x80000000) == 0)
  {
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a3 + 8) + 4 * (v7 * v6);
      v9 = *(_DWORD *)(a3 + 28) - v7 * v6;
      v10 = *(_QWORD *)(a3 + 32);
      LODWORD(v20[2]) = v7;
      *(_QWORD *)((char *)&v20[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v20[3]) = v9;
      v20[4] = v10;
      v20[0] = &unk_1E5D29D40;
      v20[1] = v8;
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v20);
      v11 = *(_DWORD *)(a1 + 48);
      if (v11 >= 1)
      {
        for (i = 0; i < v11; ++i)
        {
          v13 = (i + v6 * *(_DWORD *)(a1 + 52)) * *(_DWORD *)(a1 + 56);
          v14 = *(_QWORD *)(a2 + 8) + 4 * v13;
          v15 = *(_DWORD *)(a2 + 28) - v13;
          v16 = *(_QWORD *)(a2 + 32);
          LODWORD(v19[2]) = *(_DWORD *)(a1 + 56);
          *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v19[3]) = v15;
          v19[4] = v16;
          v19[0] = &unk_1E5D29D40;
          v19[1] = v14;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v20, (uint64_t)v19, 111, 1.0, 1.0);
          v19[0] = &unk_1E5D29D40;
          memset(&v19[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
          v11 = *(_DWORD *)(a1 + 48);
        }
      }
      kaldi::CuMatrixBase<float>::Scale((uint64_t)v20, *(float *)(a1 + 60) / (float)v11);
      v20[0] = &unk_1E5D29D40;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
    }
    while (v6++ != v18);
  }
}

void sub_1ADB6D240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v17;

  a16 = v17 + 16;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  float v29;
  int v30;
  _QWORD v31[5];
  std::vector<int>::value_type __x[2];
  _QWORD v33[4];
  std::vector<int> v34;

  v8 = *(_DWORD *)(a1 + 52);
  v9 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56));
  v10 = *(_DWORD *)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::vector(&v34, (int)v9, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v11 = *(_DWORD *)(a1 + 48);
  v30 = ((int)v9 - v10) / v8;
  if ((v30 & 0x80000000) == 0)
  {
    v12 = 0;
    do
    {
      if (v11 >= 1)
      {
        v13 = 0;
        do
        {
          v15 = *(_DWORD *)(a1 + 52);
          v14 = *(_DWORD *)(a1 + 56);
          v16 = (v13 + v12 * v15) * v14;
          v17 = *(_QWORD *)(a5 + 8) + 4 * v16;
          v18 = *(_DWORD *)(a5 + 28) - v16;
          v19 = *(_QWORD *)(a5 + 32);
          LODWORD(v33[1]) = v14;
          *(_QWORD *)((char *)&v33[1] + 4) = *(_QWORD *)(a5 + 20);
          HIDWORD(v33[2]) = v18;
          v33[3] = v19;
          *(_QWORD *)__x = &unk_1E5D29D40;
          v33[0] = v17;
          v20 = *(_QWORD *)(a4 + 8) + 4 * (v14 * v12);
          v21 = *(_DWORD *)(a4 + 28) - v14 * v12;
          v22 = *(_QWORD *)(a4 + 32);
          LODWORD(v31[2]) = v14;
          *(_QWORD *)((char *)&v31[2] + 4) = *(_QWORD *)(a4 + 20);
          HIDWORD(v31[3]) = v21;
          v31[4] = v22;
          v31[0] = &unk_1E5D29D40;
          v31[1] = v20;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)__x, (uint64_t)v31, 111, 1.0, 1.0);
          ++v34.__begin_[v13 + v12 * v15];
          v31[0] = &unk_1E5D29D40;
          memset(&v31[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v31);
          *(_QWORD *)__x = &unk_1E5D29D40;
          memset(v33, 0, sizeof(v33));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
          v11 = *(_DWORD *)(a1 + 48);
          ++v13;
        }
        while ((int)v13 < v11);
      }
    }
    while (v12++ != v30);
  }
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 60) / (float)v11);
  if ((int)v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      v25 = *(_DWORD *)(a1 + 56);
      v26 = *(_QWORD *)(a5 + 8) + 4 * (v25 * i);
      v27 = *(_DWORD *)(a5 + 28) - v25 * i;
      v28 = *(_QWORD *)(a5 + 32);
      LODWORD(v33[1]) = v25;
      *(_QWORD *)((char *)&v33[1] + 4) = *(_QWORD *)(a5 + 20);
      HIDWORD(v33[2]) = v27;
      v33[3] = v28;
      *(_QWORD *)__x = &unk_1E5D29D40;
      v33[0] = v26;
      v29 = 1.0 / (double)v34.__begin_[i];
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v29);
      *(_QWORD *)__x = &unk_1E5D29D40;
      memset(v33, 0, sizeof(v33));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
    }
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_1ADB6D4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::nnet1::AveragePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolStride>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<Scale>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 60));
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::Copy(kaldi::nnet1::ConvolutionalComponent *this)
{
  kaldi::nnet1::ConvolutionalComponent *v2;

  v2 = (kaldi::nnet1::ConvolutionalComponent *)operator new();
  kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(v2, this);
  return v2;
}

void sub_1ADB6D648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40F3A04191);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetType(kaldi::nnet1::ConvolutionalComponent *this)
{
  return 261;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::Info(kaldi::nnet1::ConvolutionalComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void *v12[2];
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v14, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 104);
  if ((v13 & 0x80u) == 0)
    v3 = v12;
  else
    v3 = (void **)v12[0];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (uint64_t)v12[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 152);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADB6D7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::InfoGradient(kaldi::nnet1::ConvolutionalComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  void *__p[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;

  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  filters_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 24);
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v41, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v42, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v10 = v37;
  else
    v10 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v11 = v38;
  else
    v11 = (std::string::size_type)v37[1];
  v12 = std::string::append(&v43, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v44, ", max-norm ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v36 & 0x80u) == 0)
    v16 = v35;
  else
    v16 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v17 = v36;
  else
    v17 = (std::string::size_type)v35[1];
  v18 = std::string::append(&v45, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v46, "\n  bias_grad");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 27);
  if ((v34 & 0x80u) == 0)
    v22 = v33;
  else
    v22 = (void **)v33[0];
  if ((v34 & 0x80u) == 0)
    v23 = v34;
  else
    v23 = (std::string::size_type)v33[1];
  v24 = std::string::append(&v47, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v48, ", lr-coef ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v32 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v32 & 0x80u) == 0)
    v29 = v32;
  else
    v29 = (std::string::size_type)__p[1];
  v30 = std::string::append(&v49, (const std::string::value_type *)v28, v29);
  *a2 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((char)v34 < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1ADB6DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1ADB6DC88()
{
  JUMPOUT(0x1ADB6DC30);
}

void sub_1ADB6DC90()
{
  JUMPOUT(0x1ADB6DC40);
}

void sub_1ADB6DC98()
{
  JUMPOUT(0x1ADB6DC50);
}

void sub_1ADB6DCA0()
{
  JUMPOUT(0x1ADB6DC60);
}

void sub_1ADB6DCA8()
{
  JUMPOUT(0x1ADB6DC70);
}

void kaldi::nnet1::ConvolutionalComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int32x2_t *v6;
  void **v7;
  void *v9;
  BOOL v13;
  int *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  float *v18;
  BOOL v20;
  BOOL v21;
  BOOL v24;
  BOOL v25;
  BOOL v27;
  BOOL v30;
  void *v31;
  void *v32;
  int v33;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  __int32 v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  int32x2_t *v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63[2];
  int v64;
  _QWORD v65[2];
  uint64_t v66;
  void *__p;
  void *v68;
  void *v69[3];
  std::string v70;
  int v71;
  int v72;
  float v73;
  int v74;

  v73 = 2.0;
  v74 = -1073741824;
  v72 = 1036831949;
  v71 = -1;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[23].u32[0], &v70);
  memset(v69, 0, sizeof(v69));
  v6 = a1 + 11;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_148;
    kaldi::ReadToken(a2, 0, (uint64_t)v69);
    if ((SHIBYTE(v69[2]) & 0x80000000) == 0)
    {
      v7 = v69;
      switch(HIBYTE(v69[2]))
      {
        case 9:
          goto LABEL_140;
        case 0xA:
          if (v69[0] == (void *)0x61654D736169423CLL && LOWORD(v69[1]) == 15982)
            goto LABEL_76;
          if (HIBYTE(v69[2]) == 9)
            goto LABEL_140;
          goto LABEL_116;
        case 0xB:
          if (v69[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v69 + 3) == (void *)0x3E65676E61527361)
            goto LABEL_123;
          if (HIBYTE(v69[2]) == 9)
            goto LABEL_140;
          if (HIBYTE(v69[2]) == 11)
          {
            v36 = v69[0] == (void *)0x745368637461503CLL && *(void **)((char *)v69 + 3) == (void *)0x3E70657453686374;
            v14 = (int *)&a1[11] + 1;
            if (v36)
              goto LABEL_109;
          }
          else
          {
LABEL_116:
            if (HIBYTE(v69[2]) != 10)
              goto LABEL_144;
            v30 = v69[0] == (void *)0x694468637461503CLL && LOWORD(v69[1]) == 15981;
            v14 = (int *)&a1[11];
            if (v30)
              goto LABEL_109;
          }
          goto LABEL_139;
        case 0xC:
          goto LABEL_103;
        case 0xD:
          if (v69[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v69 + 5) == (void *)0x3E7665646474536DLL)
            goto LABEL_124;
          v24 = v69[0] == (void *)0x745368637461503CLL && *(void **)((char *)v69 + 5) == (void *)0x3E65646972745368;
          v14 = (int *)&a1[12];
          if (!v24)
            goto LABEL_91;
          goto LABEL_109;
        case 0xF:
          v25 = v69[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v69 + 7) == (void *)0x3E66656F43657461;
          v18 = (float *)&a1[36];
          if (v25)
            goto LABEL_145;
LABEL_91:
          if (HIBYTE(v69[2]) == 9)
            goto LABEL_140;
          if (HIBYTE(v69[2]) != 12)
            goto LABEL_144;
          goto LABEL_103;
        case 0x12:
          goto LABEL_126;
        case 0x13:
          v27 = v69[0] == (void *)0x61654C736169423CLL
             && v69[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v69[1] + 3) == (void *)0x3E66656F43657461;
          v18 = (float *)&a1[36] + 1;
          if (v27)
            goto LABEL_145;
          if (HIBYTE(v69[2]) == 18)
          {
            v7 = v69;
            goto LABEL_126;
          }
          if (HIBYTE(v69[2]) == 12)
          {
LABEL_103:
            if (v69[0] == (void *)0x536D6F646E61523CLL && LODWORD(v69[1]) == 1046766949)
              goto LABEL_108;
          }
          else
          {
LABEL_139:
            if (HIBYTE(v69[2]) == 9)
            {
LABEL_140:
              v37 = v69[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v69[1]) == 62;
              v18 = (float *)&a1[37];
              if (v37)
                goto LABEL_145;
            }
          }
          break;
        default:
          goto LABEL_144;
      }
      goto LABEL_144;
    }
    v9 = v69[1];
    if (v69[1] != (void *)10)
      break;
    if (*(_QWORD *)v69[0] != 0x61654D736169423CLL || *((_WORD *)v69[0] + 4) != 15982)
    {
      v9 = v69[1];
      goto LABEL_23;
    }
LABEL_76:
    v18 = (float *)&v74;
LABEL_145:
    kaldi::ReadBasicType<float>(a2, 0, v18);
LABEL_146:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v69[1] == (void *)13
    && *(_QWORD *)v69[0] == 0x74536D617261503CLL
    && *(_QWORD *)((char *)v69[0] + 5) == 0x3E7665646474536DLL)
  {
LABEL_124:
    v18 = (float *)&v72;
    goto LABEL_145;
  }
LABEL_23:
  if (v9 != (void *)11)
    goto LABEL_29;
  if (*(_QWORD *)v69[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v69[0] + 3) == 0x3E65676E61527361)
  {
LABEL_123:
    v18 = &v73;
    goto LABEL_145;
  }
  v9 = v69[1];
LABEL_29:
  if (v9 == (void *)10)
  {
    v13 = *(_QWORD *)v69[0] == 0x694468637461503CLL && *((_WORD *)v69[0] + 4) == 15981;
    v14 = (int *)&a1[11];
    if (v13)
      goto LABEL_109;
    v9 = v69[1];
  }
  if (v9 == (void *)11)
  {
    v15 = *(_QWORD *)v69[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v69[0] + 3) == 0x3E70657453686374;
    v14 = (int *)&a1[11] + 1;
    if (v15)
      goto LABEL_109;
    v9 = v69[1];
  }
  if (v9 == (void *)13)
  {
    v16 = *(_QWORD *)v69[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v69[0] + 5) == 0x3E65646972745368;
    v14 = (int *)&a1[12];
    if (v16)
      goto LABEL_109;
    v9 = v69[1];
  }
  if (v9 == (void *)15)
  {
    v17 = *(_QWORD *)v69[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v69[0] + 7) == 0x3E66656F43657461;
    v18 = (float *)&a1[36];
    if (v17)
      goto LABEL_145;
    v9 = v69[1];
  }
  if (v9 == (void *)19)
  {
    v20 = *(_QWORD *)v69[0] == 0x61654C736169423CLL
       && *((_QWORD *)v69[0] + 1) == 0x6F43657461526E72
       && *(_QWORD *)((char *)v69[0] + 11) == 0x3E66656F43657461;
    v18 = (float *)&a1[36] + 1;
    if (v20)
      goto LABEL_145;
    v9 = v69[1];
  }
  if (v9 == (void *)9)
  {
    v21 = *(_QWORD *)v69[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v69[0] + 8) == 62;
    v18 = (float *)&a1[37];
    if (v21)
      goto LABEL_145;
    v9 = v69[1];
  }
  if (v9 == (void *)12)
  {
    if (*(_QWORD *)v69[0] == 0x536D6F646E61523CLL && *((_DWORD *)v69[0] + 2) == 1046766949)
    {
LABEL_108:
      v14 = &v71;
LABEL_109:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14);
      goto LABEL_146;
    }
    v9 = v69[1];
  }
  if (v9 == (void *)18)
  {
    v7 = (void **)v69[0];
LABEL_126:
    v31 = *v7;
    v32 = v7[1];
    v33 = *((unsigned __int16 *)v7 + 8);
    if (v31 == (void *)0x6E6569646172473CLL && v32 == (void *)0x7079546D726F4E74 && v33 == 15973)
    {
      kaldi::ReadToken(a2, 0, (uint64_t)&v70);
      goto LABEL_146;
    }
  }
LABEL_144:
  v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v69, "<MaxGrad>");
  v18 = (float *)&a1[23] + 1;
  if (v38)
    goto LABEL_145;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v69, "</Component>"))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v69[2]) >= 0)
      v56 = v69;
    else
      v56 = (void **)v69[0];
    if (SHIBYTE(v69[2]) >= 0)
      v57 = HIBYTE(v69[2]);
    else
      v57 = (uint64_t)v69[1];
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" (ParamStddev|BiasMean|BiasRange|PatchDim|PatchStep|PatchStride|MaxNorm|GradientNormType|MaxGrad|RandomSeed)", 108);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
LABEL_148:
  a1[23].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v70);
  v39 = a1[12].i32[0];
  v40 = kaldi::g_kaldi_verbose_level;
  v41 = a1[1].i32[0] / v39;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"num_splice ", 11);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
    v39 = a1[12].i32[0];
    v40 = kaldi::g_kaldi_verbose_level;
  }
  v42 = (v39 - v6->i32[0]) / a1[11].i32[1] + 1;
  if (v40 < 0)
  {
    v43 = (v6->i32[0] * v41);
    goto LABEL_155;
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"num_patches ", 12);
  std::ostream::operator<<();
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
  v43 = (v6->i32[0] * v41);
  if (kaldi::g_kaldi_verbose_level < 0)
  {
LABEL_155:
    v44 = (a1[1].i32[1] / v42);
    goto LABEL_156;
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"filter_dim ", 11);
  std::ostream::operator<<();
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
  v44 = (a1[1].i32[1] / v42);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"num_filters ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
  }
LABEL_156:
  if (v71 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v71);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v65, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v63, v44, v43, 0, 0);
  if ((int)v44 >= 1)
  {
    v45 = 0;
    do
    {
      if ((int)v43 >= 1)
      {
        v46 = 0;
        do
        {
          v47 = *(float *)&v72;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v65, 0);
          *((float *)v63[0] + v45 * v64 + v46++) = v47 * v48;
        }
        while (v43 != v46);
      }
      ++v45;
    }
    while (v45 != (_DWORD)v44);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 13, (int *)v63);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  kaldi::Vector<float>::Resize((void **)&v60, v44, 0);
  if ((int)v44 <= 0)
  {
    v53 = v61;
  }
  else
  {
    v49 = 0;
    do
    {
      v50 = *(float *)&v74;
      v51 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v52 = v50 + (v51 + -0.5) * v73;
      v53 = v61;
      v60[v49++] = v52;
    }
    while (v44 != v49);
  }
  v54 = a1 + 19;
  kaldi::CuVector<float>::Resize((uint64_t)v54, v53, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v54, (uint64_t)&v60);
  kaldi::Vector<float>::Destroy((uint64_t)&v60);
  kaldi::Matrix<float>::~Matrix((uint64_t)v63);
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  v63[0] = (void **)&v66;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v63);
  if (SHIBYTE(v69[2]) < 0)
    operator delete(v69[0]);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
}

void sub_1ADB6E6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 145) < 0)
    operator delete(*(void **)(v22 - 168));
  if (*(char *)(v22 - 121) < 0)
    operator delete(*(void **)(v22 - 144));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;

  v6 = a1 + 152;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 104, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(v6, a2, a3);
}

void kaldi::nnet1::ConvolutionalComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int i;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  _BYTE __p[40];

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 96);
  v37 = *(_DWORD *)(a2 + 20);
  v6 = *(_DWORD *)(a1 + 124);
  v36 = *(_DWORD *)(a1 + 120);
  v39 = v6;
  v40 = (uint64_t *)(a1 + 304);
  v7 = (v5 - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  if (*(_QWORD *)(a1 + 312) == *(_QWORD *)(a1 + 304))
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v40, v7 + 1);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), v7 + 1);
    v6 = v39;
    if (v7 < 0)
      return;
  }
  else if (v7 < 0)
  {
    return;
  }
  v8 = 0;
  v32 = v6;
  v33 = a1 + 104;
  v38 = (v7 + 1);
  v9 = v4 / v5;
  do
  {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v40 + 48 * v8), v37, v36, 0, 0);
    memset(__p, 0, 24);
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = *(_DWORD *)(a1 + 88);
      do
      {
        if (v12 >= 1)
        {
          for (i = 0; i < v12; ++i)
          {
            v14 = i + *(_DWORD *)(a1 + 92) * v8 + *(_DWORD *)(a1 + 96) * v11;
            if ((unint64_t)v10 >= *(_QWORD *)&__p[16])
            {
              v15 = *(_DWORD **)__p;
              v16 = ((uint64_t)v10 - *(_QWORD *)__p) >> 2;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v18 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
              if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 1 > v17)
                v17 = v18 >> 1;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
                v19 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[16], v19);
                v15 = *(_DWORD **)__p;
                v10 = *(_DWORD **)&__p[8];
              }
              else
              {
                v20 = 0;
              }
              v21 = &v20[4 * v16];
              *(_DWORD *)v21 = v14;
              v22 = v21 + 4;
              while (v10 != v15)
              {
                v23 = *--v10;
                *((_DWORD *)v21 - 1) = v23;
                v21 -= 4;
              }
              *(_QWORD *)__p = v21;
              *(_QWORD *)&__p[8] = v22;
              *(_QWORD *)&__p[16] = &v20[4 * v19];
              if (v15)
                operator delete(v15);
              v10 = v22;
            }
            else
            {
              *v10++ = v14;
            }
            *(_QWORD *)&__p[8] = v10;
            v12 = *(_DWORD *)(a1 + 88);
          }
        }
        ++v11;
      }
      while (v11 != v9);
    }
    kaldi::CuMatrixBase<float>::CopyCols(*v40 + 48 * v8, a2, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    ++v8;
  }
  while (v8 != v38);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = a1 + 152;
  v28 = v39;
  do
  {
    v29 = *(_QWORD *)(a3 + 8) + 4 * v26;
    v30 = v25 + *(_DWORD *)(a3 + 28);
    v31 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)&__p[16] = v28;
    *(_QWORD *)&__p[20] = *(_QWORD *)(a3 + 20);
    *(_DWORD *)&__p[28] = v30;
    *(_QWORD *)&__p[32] = v31;
    *(_QWORD *)__p = &unk_1E5D29D40;
    *(_QWORD *)&__p[8] = v29;
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, v27, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *v40 + v24, CblasNoTrans, v33, CblasTrans, 1.0, 1.0);
    *(_QWORD *)__p = &unk_1E5D29D40;
    memset(&__p[8], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
    v26 += v32;
    v28 = v39;
    v25 -= v39;
    v24 += 48;
  }
  while (48 * v38 != v24);
}

void sub_1ADB6EAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int i;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD v31[5];
  void *v32;
  _QWORD v33[4];

  v5 = *(_DWORD *)(a1 + 96);
  v6 = (v5 - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  if ((v6 & 0x80000000) == 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v30 = a1 + 104;
    v29 = *(_DWORD *)(a2 + 20);
    v13 = *(_DWORD *)(a1 + 124);
    v28 = *(_DWORD *)(a1 + 120);
    v27 = (v6 + 1);
    v14 = *(_DWORD *)(a1 + 8) / v5;
    do
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 328) + v10), v29, v28, 0, 0);
      v15 = *(_QWORD *)(a4 + 8) + 4 * v12;
      v16 = v11 + *(_DWORD *)(a4 + 28);
      v17 = *(_QWORD *)(a4 + 32);
      LODWORD(v33[1]) = v13;
      *(_QWORD *)((char *)&v33[1] + 4) = *(_QWORD *)(a4 + 20);
      HIDWORD(v33[2]) = v16;
      v33[3] = v17;
      v32 = &unk_1E5D29D40;
      v33[0] = v15;
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(a1 + 328) + v10, (uint64_t)&v32, CblasNoTrans, v30, CblasNoTrans, 1.0, 0.0);
      v32 = &unk_1E5D29D40;
      memset(v33, 0, sizeof(v33));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
      v12 += v13;
      v11 -= v13;
      v10 += 48;
    }
    while (48 * v27 != v10);
    v18 = 0;
    do
    {
      if (v14 >= 1)
      {
        for (i = 0; i != v14; ++i)
        {
          v20 = *(_QWORD *)(a1 + 328) + 48 * v18;
          v21 = *(_DWORD *)(a1 + 88);
          v22 = *(_DWORD *)(a1 + 92);
          v23 = *(_DWORD *)(v20 + 28) - v21 * i;
          v24 = *(_QWORD *)(v20 + 32);
          v33[0] = *(_QWORD *)(v20 + 8) + 4 * v21 * i;
          LODWORD(v33[1]) = v21;
          *(_QWORD *)((char *)&v33[1] + 4) = *(_QWORD *)(v20 + 20);
          HIDWORD(v33[2]) = v23;
          v33[3] = v24;
          LODWORD(v20) = v22 * v18 + *(_DWORD *)(a1 + 96) * i;
          v25 = *(_QWORD *)(a5 + 8) + 4 * v20;
          LODWORD(v20) = *(_DWORD *)(a5 + 28) - v20;
          v26 = *(_QWORD *)(a5 + 32);
          LODWORD(v31[2]) = v21;
          *(_QWORD *)((char *)&v31[2] + 4) = *(_QWORD *)(a5 + 20);
          HIDWORD(v31[3]) = v20;
          v31[4] = v26;
          v32 = &unk_1E5D29D40;
          v31[0] = &unk_1E5D29D40;
          v31[1] = v25;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v31, (uint64_t)&v32, 111, 1.0, 1.0);
          v31[0] = &unk_1E5D29D40;
          memset(&v31[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v31);
          v32 = &unk_1E5D29D40;
          memset(v33, 0, sizeof(v33));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
        }
      }
      ++v18;
    }
    while (v18 != v27);
  }
}

void sub_1ADB6ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _OWORD *v20;

  a20 = &unk_1E5D29D40;
  *v20 = 0u;
  v20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a20);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  float *v13;
  BOOL v15;
  BOOL v16;
  void **v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  void *v28;
  int v29;
  BOOL v30;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  void *v37[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v37, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v37);
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v37[2]))
      {
        case 9:
          goto LABEL_85;
        case 0xA:
          v6 = v37[0] == (void *)0x694468637461503CLL && LOWORD(v37[1]) == 15981;
          v7 = a1 + 88;
          if (!v6)
            goto LABEL_113;
          goto LABEL_75;
        case 0xB:
          v21 = v37[0] == (void *)0x745368637461503CLL && *(void **)((char *)v37 + 3) == (void *)0x3E70657453686374;
          v7 = a1 + 92;
          if (!v21)
            goto LABEL_84;
          goto LABEL_75;
        case 0xD:
          v22 = v37[0] == (void *)0x745368637461503CLL && *(void **)((char *)v37 + 5) == (void *)0x3E65646972745368;
          v7 = a1 + 96;
          if (!v22)
            goto LABEL_84;
          goto LABEL_75;
        case 0xF:
          v20 = v37[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v37 + 7) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 288);
          if (!v20)
            goto LABEL_84;
          goto LABEL_105;
        case 0x12:
          goto LABEL_91;
        case 0x13:
          v24 = v37[0] == (void *)0x61654C736169423CLL
             && v37[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v37[1] + 3) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 292);
          if (v24)
            goto LABEL_105;
          if (HIBYTE(v37[2]) == 18)
          {
LABEL_91:
            if (v37[0] == (void *)0x6E6569646172473CLL
              && v37[1] == (void *)0x7079546D726F4E74
              && LOWORD(v37[2]) == 15973)
            {
              goto LABEL_110;
            }
          }
          else
          {
LABEL_84:
            if (HIBYTE(v37[2]) != 9)
              goto LABEL_113;
LABEL_85:
            v25 = v37[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v37[1]) == 62;
            v13 = (float *)(a1 + 296);
            if (v25)
              goto LABEL_105;
          }
          if (HIBYTE(v37[2]) != 9)
            goto LABEL_113;
          v19 = v37;
          break;
        default:
          goto LABEL_113;
      }
      goto LABEL_100;
    }
    v8 = v37[1];
    if (v37[1] != (void *)10
      || (*(_QWORD *)v37[0] == 0x694468637461503CLL ? (v9 = *((unsigned __int16 *)v37[0] + 4) == 15981) : (v9 = 0),
          v7 = a1 + 88,
          !v9))
    {
      if (v37[1] == (void *)11)
      {
        v10 = *(_QWORD *)v37[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v37[0] + 3) == 0x3E70657453686374;
        v7 = a1 + 92;
        if (v10)
          goto LABEL_75;
        v8 = v37[1];
      }
      if (v8 != (void *)13)
        goto LABEL_26;
      v11 = *(_QWORD *)v37[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v37[0] + 5) == 0x3E65646972745368;
      v7 = a1 + 96;
      if (!v11)
      {
        v8 = v37[1];
LABEL_26:
        if (v8 == (void *)15)
        {
          v12 = *(_QWORD *)v37[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v37[0] + 7) == 0x3E66656F43657461;
          v13 = (float *)(a1 + 288);
          if (!v12)
          {
            v8 = v37[1];
            goto LABEL_32;
          }
LABEL_105:
          kaldi::ReadBasicType<float>(a2, a3, v13);
          goto LABEL_106;
        }
LABEL_32:
        if (v8 == (void *)19)
        {
          v15 = *(_QWORD *)v37[0] == 0x61654C736169423CLL
             && *((_QWORD *)v37[0] + 1) == 0x6F43657461526E72
             && *(_QWORD *)((char *)v37[0] + 11) == 0x3E66656F43657461;
          v13 = (float *)(a1 + 292);
          if (v15)
            goto LABEL_105;
          v8 = v37[1];
        }
        if (v8 == (void *)9)
        {
          v16 = *(_QWORD *)v37[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v37[0] + 8) == 62;
          v13 = (float *)(a1 + 296);
          if (v16)
            goto LABEL_105;
          v8 = v37[1];
        }
        if (v8 == (void *)18)
        {
          if (*(_QWORD *)v37[0] == 0x6E6569646172473CLL
            && *((_QWORD *)v37[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v37[0] + 8) == 15973)
          {
LABEL_110:
            __p[0] = 0;
            __p[1] = 0;
            v36 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 184) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v36) < 0)
              operator delete(__p[0]);
            goto LABEL_106;
          }
          v8 = v37[1];
        }
        if (v8 != (void *)9)
          goto LABEL_113;
        v19 = (void **)v37[0];
LABEL_100:
        v28 = *v19;
        v29 = *((unsigned __int8 *)v19 + 8);
        v30 = v28 == (void *)0x6461724778614D3CLL && v29 == 62;
        v13 = (float *)(a1 + 188);
        if (!v30)
        {
LABEL_113:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v37[2]) >= 0)
            v33 = v37;
          else
            v33 = (void **)v37[0];
          if (SHIBYTE(v37[2]) >= 0)
            v34 = HIBYTE(v37[2]);
          else
            v34 = (uint64_t)v37[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_105;
      }
    }
LABEL_75:
    kaldi::ReadBasicType<int>(a2, a3, v7);
LABEL_106:
    if (SHIBYTE(v37[2]) < 0)
      operator delete(v37[0]);
  }
  kaldi::CuMatrix<float>::Read(a1 + 104, a2, a3, 0);
  return kaldi::CuVector<float>::Read(a1 + 152, a2, a3);
}

void sub_1ADB6F3AC()
{
  JUMPOUT(0x1ADB6F3B4);
}

_QWORD *kaldi::nnet1::ConvolutionalComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<PatchDim>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 184), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADB6F53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::NumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  return (*((_DWORD *)this + 42) + *((_DWORD *)this + 30) * *((_DWORD *)this + 31));
}

const void **kaldi::nnet1::ConvolutionalComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = *(_DWORD *)(a1 + 120) * *(_DWORD *)(a1 + 124);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2;
  LODWORD(v9) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v8, a1 + 104);
  v6 = *(_DWORD *)(a1 + 168);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v6;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 152), (uint64_t)&v8);
}

void *kaldi::nnet1::ConvolutionalComponent::SetParams(_DWORD *a1, char **a2)
{
  int v4;
  int v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  v4 = a1[30] * a1[31];
  v8 = 0;
  v9 = 0;
  v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 26), &v7);
  v5 = a1[42];
  v8 = 0;
  v9 = 0;
  v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v7);
}

float kaldi::nnet1::ConvolutionalComponent::SumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 104);
  return v2 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 152);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::PerturbParams(kaldi::nnet1::ConvolutionalComponent *this, float a2)
{
  kaldi::nnet1::ConvolutionalComponent *v3;
  uint64_t v4;
  _QWORD v6[4];
  int32x2_t v7[6];

  v3 = this;
  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v3 + 104, (uint64_t)v7, 111, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  v6[1] = 0;
  v4 = *((_QWORD *)v3 + 22);
  v6[2] = 0;
  v6[3] = v4;
  kaldi::CuVector<float>::Resize((uint64_t)v6, *((unsigned int *)v3 + 42), 1);
  v3 = (kaldi::nnet1::ConvolutionalComponent *)((char *)v3 + 152);
  kaldi::CuVectorBase<float>::CopyFromVec(v6, (uint64_t)v3);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v3, (uint64_t)v6, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADB6F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = a1[30] * a1[31];
  v12 = 0;
  v13 = 0;
  v11 = (uint64_t)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, *(_QWORD *)(v8 + 192));
  v9 = a1[42];
  v12 = 0;
  v13 = 0;
  v11 = (uint64_t)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*(const void ***)(v8 + 216), (uint64_t)&v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::ConvolutionalComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[5];

  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs((kaldi::nnet1::ConvolutionalComponent *)a1);
  v10 = (*(_DWORD *)(a1 + 96) - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  v11 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v12 = *(_QWORD *)(a1 + 192) + 48 * a5;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 216) + 32 * a5 + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(v12);
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(a1 + 216) + 32 * a5);
  if ((v10 & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 48 * (v10 + 1);
    do
    {
      v17 = *(_QWORD *)(a3 + 8) + 4 * v15;
      v18 = v14 + *(_DWORD *)(a3 + 28);
      v19 = *(_QWORD *)(a3 + 32);
      LODWORD(v20[2]) = v11;
      *(_QWORD *)((char *)&v20[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v20[3]) = v18;
      v20[4] = v19;
      v20[0] = &unk_1E5D29D40;
      v20[1] = v17;
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(a1 + 192) + 48 * a5, (uint64_t)v20, CblasTrans, *(_QWORD *)(a1 + 304) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(a1 + 216) + 32 * a5, (uint64_t)v20, 1.0, 1.0);
      v20[0] = &unk_1E5D29D40;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
      v15 += v11;
      v14 -= v11;
      v13 += 48;
    }
    while (v16 != v13);
  }
}

void sub_1ADB6FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1E5D29D40;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 188) = a3;
  *(_DWORD *)(result + 184) = a2;
  *(_BYTE *)(result + 376) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalComponent::NormalizeGradients(kaldi::nnet1::ConvolutionalComponent *this, float a2, int a3)
{
  float v3;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  v5 = *((_DWORD *)this + 46);
  if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v8 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 24) + 48 * a3, *((_QWORD *)this + 30) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 27) + 32 * v8, *((_QWORD *)this + 33) + 32 * v8, v3);
    }
  }
  else if (v5 == 2)
  {
    if (a2 > 0.0)
    {
      v9 = a3;
      if (*((_BYTE *)this + 84))
        v3 = (float)*(int *)(*((_QWORD *)this + 44) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 24) + 48 * a3, (int *)(*((_QWORD *)this + 30) + 48 * a3), v3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 27) + 32 * v9, (_QWORD *)(*((_QWORD *)this + 33) + 32 * v9), v3);
    }
  }
  else if (v5 == 1 && a2 > 0.0)
  {
    v6 = a3;
    if (*((_BYTE *)this + 84))
      v3 = (float)*(int *)(*((_QWORD *)this + 44) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 24) + 48 * a3, v3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 27) + 32 * v6, v3);
  }
}

void kaldi::nnet1::ConvolutionalComponent::UpdateWeights(kaldi::nnet1::ConvolutionalComponent *this, void *a2, int a3)
{
  int v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  float v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD v24[4];
  _QWORD v25[2];
  uint64_t v26;
  void *v27;
  _BYTE v28[48];

  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(this);
  v6 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) / *((_DWORD *)this + 23);
  v7 = *((float *)this + 14);
  v8 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v9 = a3;
  else
    v9 = *((_DWORD *)this + 20);
  if ((_DWORD)v8 == 1)
    v9 = 0;
  v10 = v9;
  v11 = *((_QWORD *)this + 24);
  v12 = v11 + 48 * v9;
  *(_QWORD *)(v12 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 27) + 32 * v9 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 30) + 48 * v9 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 33) + 32 * v9 + 24) = a2;
  if (v9 == (_DWORD)v8)
  {
    kaldi::CuMatrixBase<float>::AddMat(v12, v11, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 27) + 32 * v10, *((_QWORD *)this + 27), 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v13 = 1;
      v14 = 32;
      v15 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 24) + 48 * (int)v10, *((_QWORD *)this + 24) + v15, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 27) + 32 * v10, *((_QWORD *)this + 27) + v14, 1.0, 1.0);
        ++v13;
        v15 += 48;
        v14 += 32;
      }
      while (v13 < *((int *)this + 20));
    }
    v16 = (int *)*((_QWORD *)this + 44);
    v16[v10] = 0;
    if ((int)v8 >= 1)
    {
      v17 = 0;
      v18 = v16;
      do
      {
        v19 = *v18++;
        v17 += v19;
        v16[v10] = v17;
        --v8;
      }
      while (v8);
    }
  }
  if (*((_BYTE *)this + 84))
    v7 = v7 / (float)*(int *)(*((_QWORD *)this + 44) + 4 * v10);
  v20 = 1.0 / (double)(v6 + 1);
  kaldi::CuMatrixBase<float>::Scale(*((_QWORD *)this + 24) + 48 * (int)v10, v20);
  kaldi::CuVectorBase<float>::Scale(*((_QWORD *)this + 27) + 32 * v10, v20);
  if (*((float *)this + 47) >= 0.0)
    (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, uint64_t))(*(_QWORD *)this + 248))(this, v10);
  *((_QWORD *)this + 17) = a2;
  *((_QWORD *)this + 22) = a2;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 104, *((_QWORD *)this + 24) + 48 * (int)v10, 111, -(float)(v7 * *((float *)this + 72)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 152, *((_QWORD *)this + 27) + 32 * v10, -(float)(v7 * *((float *)this + 73)), 1.0);
  if (*((float *)this + 74) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v28, (char *)this + 104, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v28, (uint64_t)this + 104);
    v21 = *((unsigned int *)this + 31);
    v26 = 0;
    v27 = 0;
    v25[0] = &unk_1E5D341C8;
    v25[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v25, v21, 0);
    v27 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v25, (uint64_t)v28, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v25, 0.5);
    v24[0] = &unk_1E5D341C8;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v27;
    kaldi::CuVector<float>::Resize((uint64_t)v24, v26, 1);
    kaldi::CuVectorBase<float>::CopyFromVec(v24, (uint64_t)v25);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v24, 1.0 / *((float *)this + 74));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v24, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v24);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 104, (uint64_t)v24);
    v24[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v24);
    v25[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v25);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
  }
  v22 = (_BYTE *)*((_QWORD *)this + 44);
  if ((_DWORD)v10 == *((_DWORD *)this + 20))
  {
    v23 = (_BYTE *)*((_QWORD *)this + 45);
    if (v22 != v23)
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v22[4 * v10] = 0;
  }
}

void sub_1ADB6FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::Copy(kaldi::nnet1::MaxPoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2E638;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  *(_DWORD *)(v2 + 56) = *((_DWORD *)this + 14);
  return v2;
}

void sub_1ADB6FFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::GetType(kaldi::nnet1::MaxPoolingComponent *this)
{
  return 2052;
}

void kaldi::nnet1::MaxPoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  _WORD **v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  _WORD **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[34];
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v3 = a2 + 4;
  v4 = a1 + 56;
  v5 = a1 + 52;
  v6 = a1 + 48;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
    {
      v7 = HIBYTE(v28);
      goto LABEL_45;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    v7 = HIBYTE(v28);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
      if (HIBYTE(v28) == 10)
      {
        v14 = v26 == (_WORD *)0x7A69536C6F6F503CLL && (unsigned __int16)v27 == 15973;
        v9 = v6;
        if (!v14)
        {
          v15 = v26 == (_WORD *)0x6574536C6F6F503CLL && (unsigned __int16)v27 == 15984;
          v9 = v5;
          if (!v15)
            goto LABEL_48;
        }
      }
      else
      {
        if (HIBYTE(v28) != 12)
          goto LABEL_48;
        v8 = v26 == (_WORD *)0x7274536C6F6F503CLL && v27 == 1046832233;
        v9 = v4;
        if (!v8)
        {
          v16 = &v26;
          goto LABEL_40;
        }
      }
      goto LABEL_36;
    }
    v10 = v27;
    if (v27 == 10)
    {
      v11 = *(_QWORD *)v26 == 0x7A69536C6F6F503CLL && v26[4] == 15973;
      v9 = v6;
      if (v11)
        goto LABEL_36;
      v12 = *(_QWORD *)v26 == 0x6574536C6F6F503CLL && v26[4] == 15984;
      v9 = v5;
      if (v12)
        goto LABEL_36;
      v10 = v27;
    }
    if (v10 != 12)
      goto LABEL_48;
    v13 = *(_QWORD *)v26 == 0x7274536C6F6F503CLL && *((_DWORD *)v26 + 2) == 1046832233;
    v9 = v4;
    if (!v13)
      break;
LABEL_36:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v27 != 12)
    goto LABEL_48;
  v16 = (_WORD **)v26;
LABEL_40:
  v17 = (uint64_t)*v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_48:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v28 >= 0)
      v21 = &v26;
    else
      v21 = (_WORD **)v26;
    if (v28 >= 0)
      v22 = HIBYTE(v28);
    else
      v22 = v27;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (PoolSize|PoolStep|PoolStride)", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_45:
  if (v7 < 0)
    operator delete(v26);
}

void sub_1ADB702A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStride>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::MaxPoolingComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  _QWORD v18[5];
  _QWORD v19[5];

  v17 = (a1[2] / a1[14] - a1[12]) / a1[13];
  if ((v17 & 0x80000000) == 0)
  {
    v6 = 0;
    do
    {
      v7 = a1[14];
      v8 = *(_QWORD *)(a3 + 8) + 4 * (v7 * v6);
      v9 = *(_DWORD *)(a3 + 28) - v7 * v6;
      v10 = *(_QWORD *)(a3 + 32);
      LODWORD(v19[2]) = v7;
      *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v19[3]) = v9;
      v19[4] = v10;
      v19[0] = &unk_1E5D29D40;
      v19[1] = v8;
      kaldi::CuMatrixBase<float>::Set((uint64_t)v19, -1.0e20);
      if ((int)a1[12] >= 1)
      {
        v11 = 0;
        do
        {
          v12 = (v11 + v6 * a1[13]) * a1[14];
          v13 = *(_QWORD *)(a2 + 8) + 4 * v12;
          v14 = *(_DWORD *)(a2 + 28) - v12;
          v15 = *(_QWORD *)(a2 + 32);
          LODWORD(v18[2]) = a1[14];
          *(_QWORD *)((char *)&v18[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v18[3]) = v14;
          v18[4] = v15;
          v18[0] = &unk_1E5D29D40;
          v18[1] = v13;
          kaldi::CuMatrixBase<float>::Max((uint64_t)v19, (uint64_t)v18);
          v18[0] = &unk_1E5D29D40;
          memset(&v18[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
          ++v11;
        }
        while (v11 < a1[12]);
      }
      v19[0] = &unk_1E5D29D40;
      memset(&v19[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
    }
    while (v6++ != v17);
  }
}

void sub_1ADB704DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v17;

  a16 = v17 + 16;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPoolingComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  float v35;
  int v36;
  int32x2_t v37;
  _QWORD v38[4];
  char v39;
  std::vector<int>::value_type __x[2];
  _QWORD v41[4];
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  std::vector<int> v45;

  v10 = a1[13];
  v11 = (a1[2] / a1[14]);
  v12 = a1[12];
  __x[0] = 0;
  std::vector<int>::vector(&v45, (int)v11, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v36 = ((int)v11 - v12) / v10;
  if ((v36 & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = a1[12];
    do
    {
      if (v14 >= 1)
      {
        v15 = 0;
        do
        {
          v17 = a1[13];
          v16 = a1[14];
          v18 = (v15 + v13 * v17) * v16;
          v19 = *(_QWORD *)(a2 + 8) + 4 * v18;
          v20 = *(_DWORD *)(a2 + 28) - v18;
          v21 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)((char *)&v44[2] + 4) = *(_QWORD *)(a2 + 20);
          LODWORD(v44[2]) = v16;
          HIDWORD(v44[3]) = v20;
          v44[4] = v21;
          v44[0] = &unk_1E5D29D40;
          v44[1] = v19;
          v22 = *(_QWORD *)(a3 + 8) + 4 * (v16 * v13);
          LODWORD(v21) = *(_DWORD *)(a3 + 28) - v16 * v13;
          v23 = *(_QWORD *)(a3 + 32);
          *(_QWORD *)((char *)&v43[2] + 4) = *(_QWORD *)(a3 + 20);
          LODWORD(v43[2]) = v16;
          HIDWORD(v43[3]) = v21;
          v43[4] = v23;
          v43[0] = &unk_1E5D29D40;
          v43[1] = v22;
          v24 = *(_QWORD *)(a5 + 8) + 4 * v18;
          v25 = *(_DWORD *)(a5 + 28) - v18;
          v26 = *(_QWORD *)(a5 + 32);
          LODWORD(v42[2]) = v16;
          *(_QWORD *)((char *)&v42[2] + 4) = *(_QWORD *)(a5 + 20);
          HIDWORD(v42[3]) = v25;
          v42[4] = v26;
          v42[0] = &unk_1E5D29D40;
          v42[1] = v24;
          v27 = *(_QWORD *)(a4 + 8) + 4 * (v16 * v13);
          LODWORD(v19) = *(_DWORD *)(a4 + 28) - v16 * v13;
          v28 = *(_QWORD *)(a4 + 32);
          LODWORD(v38[1]) = v16;
          *(_QWORD *)((char *)&v38[1] + 4) = *(_QWORD *)(a4 + 20);
          HIDWORD(v38[2]) = v19;
          v38[3] = v28;
          v37 = (int32x2_t)&unk_1E5D29D40;
          v38[0] = v27;
          kaldi::CuMatrix<float>::CuMatrix(__x, &v37, 111);
          v37 = (int32x2_t)&unk_1E5D29D40;
          memset(v38, 0, sizeof(v38));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v37);
          memset(v38, 0, sizeof(v38));
          v37 = (int32x2_t)&unk_1E5D34170;
          v39 = 0;
          kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)v44, (uint64_t)v43, &v37);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)__x, (uint64_t)&v37);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v42, (uint64_t)__x, 111, 1.0, 1.0);
          ++v45.__begin_[v15 + v13 * v17];
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v37);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__x);
          v42[0] = &unk_1E5D29D40;
          memset(&v42[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v42);
          v43[0] = &unk_1E5D29D40;
          memset(&v43[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v43);
          v44[0] = &unk_1E5D29D40;
          memset(&v44[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v44);
          v14 = a1[12];
          ++v15;
        }
        while ((int)v15 < v14);
      }
    }
    while (v13++ != v36);
  }
  if ((int)v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      v31 = a1[14];
      v32 = *(_QWORD *)(a5 + 8) + 4 * (v31 * i);
      v33 = *(_DWORD *)(a5 + 28) - v31 * i;
      v34 = *(_QWORD *)(a5 + 32);
      LODWORD(v41[1]) = v31;
      *(_QWORD *)((char *)&v41[1] + 4) = *(_QWORD *)(a5 + 20);
      HIDWORD(v41[2]) = v33;
      v41[3] = v34;
      *(_QWORD *)__x = &unk_1E5D29D40;
      v41[0] = v32;
      v35 = 1.0 / (double)v45.__begin_[i];
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v35);
      *(_QWORD *)__x = &unk_1E5D29D40;
      memset(v41, 0, sizeof(v41));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
    }
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
}

void sub_1ADB708A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolStride>");
  return kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::Copy(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D30C08;
  return v2;
}

void sub_1ADB70A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::GetType(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 2058;
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::OutputRowCount(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 1;
}

void kaldi::nnet1::TemporalMaxPoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  kaldi::CuMatrixBase<float>::Set(a3, -1.0e20);
  if (*(int *)(a2 + 20) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(a2 + 24);
      v7 = *(_QWORD *)(a2 + 8) + 4 * (int)(v6 * v5);
      v8 = *(_DWORD *)(a2 + 28) - v6 * v5;
      v9 = *(_QWORD *)(a2 + 32);
      DWORD2(v11) = *(_DWORD *)(a2 + 16);
      HIDWORD(v11) = 1;
      *(_QWORD *)&v12 = __PAIR64__(v8, v6);
      *((_QWORD *)&v12 + 1) = v9;
      v10 = &unk_1E5D29D40;
      *(_QWORD *)&v11 = v7;
      kaldi::CuMatrixBase<float>::Max(a3, (uint64_t)&v10);
      v10 = &unk_1E5D29D40;
      ++v5;
      v11 = 0u;
      v12 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
    }
    while (v5 < *(_DWORD *)(a2 + 20));
  }
}

void sub_1ADB70B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v20 = 0u;
  v19 = 0u;
  v18 = (int32x2_t)&unk_1E5D34170;
  v21 = 0;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_DWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 32);
  v14 = &unk_1E5D29D70;
  v15 = v7;
  v17 = v9;
  v16 = v8;
  kaldi::CuMatrixBase<float>::EqualElementColMask(a2, (uint64_t)&v14, &v18);
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_DWORD *)(a4 + 16);
  v12 = *(_QWORD *)(a4 + 32);
  v14 = &unk_1E5D29D70;
  v15 = v10;
  v17 = v12;
  v16 = v11;
  kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)&v18, (uint64_t)&v14);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&v18, 111, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v18);
}

void sub_1ADB70C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::Copy(kaldi::nnet1::AveragePooling2DComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D304F8;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_QWORD *)(v2 + 64) = *((_QWORD *)this + 8);
  return v2;
}

void sub_1ADB70D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::GetType(kaldi::nnet1::AveragePooling2DComponent *this)
{
  return 2051;
}

void kaldi::nnet1::AveragePooling2DComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[34];
  __int128 v35;
  uint64_t v36;

  v35 = 0uLL;
  v36 = 0;
  v3 = a2 + 4;
  v4 = a1 + 68;
  v5 = a1 + 64;
  v32 = a1 + 60;
  v33 = a1 + 56;
  v6 = a1 + 52;
  v7 = a1 + 48;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
    {
      v8 = HIBYTE(v36);
      goto LABEL_77;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v35);
    v8 = HIBYTE(v36);
    if (SHIBYTE(v36) < 0)
      break;
    if (HIBYTE(v36) == 10)
    {
      v16 = (_QWORD)v35 == 0x654C5870616D463CLL && WORD4(v35) == 15982;
      v10 = v7;
      if (v16)
        goto LABEL_59;
      v17 = (_QWORD)v35 == 0x654C5970616D463CLL && WORD4(v35) == 15982;
      v10 = v6;
      if (v17)
        goto LABEL_59;
      v18 = (_QWORD)v35 == 0x654C586C6F6F503CLL && WORD4(v35) == 15982;
      v10 = v33;
      if (v18)
        goto LABEL_59;
      goto LABEL_43;
    }
    if (HIBYTE(v36) != 11)
    {
      if (HIBYTE(v36) == 12)
      {
        v23 = &v35;
        goto LABEL_72;
      }
      goto LABEL_80;
    }
    v9 = (_QWORD)v35 == 0x7453586C6F6F503CLL && *(_QWORD *)((char *)&v35 + 3) == 0x3E70657453586C6FLL;
    v10 = v5;
    if (!v9)
    {
      v11 = (_QWORD)v35 == 0x7453596C6F6F503CLL && *(_QWORD *)((char *)&v35 + 3) == 0x3E70657453596C6FLL;
      v10 = v4;
      if (!v11)
        goto LABEL_80;
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v12 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1) != 10)
    goto LABEL_48;
  v13 = *(_QWORD *)v35 == 0x654C5870616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = v7;
  if (v13)
    goto LABEL_59;
  v14 = *(_QWORD *)v35 == 0x654C5970616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = v6;
  if (v14)
    goto LABEL_59;
  v15 = *(_QWORD *)v35 == 0x654C586C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = v33;
  if (v15)
    goto LABEL_59;
  if ((v36 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v36) != 10)
      goto LABEL_80;
LABEL_43:
    v19 = (_QWORD)v35 == 0x654C596C6F6F503CLL && WORD4(v35) == 15982;
    v10 = v32;
    if (!v19)
      goto LABEL_80;
    goto LABEL_59;
  }
  v22 = *(_QWORD *)v35 == 0x654C596C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = v32;
  if (v22)
    goto LABEL_59;
  v12 = *((_QWORD *)&v35 + 1);
LABEL_48:
  if (v12 != 11)
    goto LABEL_70;
  v20 = *(_QWORD *)v35 == 0x7453586C6F6F503CLL && *(_QWORD *)(v35 + 3) == 0x3E70657453586C6FLL;
  v10 = v5;
  if (v20)
    goto LABEL_59;
  v12 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1) != 11)
    goto LABEL_70;
  v21 = *(_QWORD *)v35 == 0x7453596C6F6F503CLL && *(_QWORD *)(v35 + 3) == 0x3E70657453596C6FLL;
  v10 = v4;
  if (v21)
    goto LABEL_59;
  if ((v36 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_70:
  if (v12 != 12)
    goto LABEL_80;
  v23 = (__int128 *)v35;
LABEL_72:
  v24 = *(_QWORD *)v23;
  v25 = *((_DWORD *)v23 + 2);
  if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Unknown token ", 14);
    if (v36 >= 0)
      v28 = &v35;
    else
      v28 = (__int128 *)v35;
    if (v36 >= 0)
      v29 = HIBYTE(v36);
    else
      v29 = *((_QWORD *)&v35 + 1);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
LABEL_77:
  if (v8 < 0)
    operator delete((void *)v35);
}

void sub_1ADB71130(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYStep>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

float kaldi::nnet1::AveragePooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  float result;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];
  _QWORD v43[6];

  v6 = a1[12];
  v5 = a1[13];
  v7 = a1[2] / (v5 * v6);
  v8 = a1[16];
  v28 = a1[15];
  v29 = a1[14];
  v9 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a3);
  v30 = v7;
  if (v7 >= 1)
  {
    v36 = 0;
    v33 = (v6 - v29) / v8;
    v31 = (v5 - v28) / v9;
    v32 = 0;
    v40 = (v33 + 1);
    v34 = (v31 + 1);
    do
    {
      if ((v31 & 0x80000000) == 0)
      {
        v37 = 0;
        v10 = v32;
        do
        {
          v35 = v10;
          if ((v33 & 0x80000000) == 0)
          {
            v11 = 0;
            v39 = ((v36 * v34 + v37) * v40);
            do
            {
              v41 = v11;
              v12 = *(_QWORD *)(a3 + 8) + 4 * (v11 + v39);
              v13 = *(_DWORD *)(a3 + 28) - (v11 + v39);
              v14 = *(_QWORD *)(a3 + 32);
              LODWORD(v43[2]) = 1;
              *(_QWORD *)((char *)&v43[2] + 4) = *(_QWORD *)(a3 + 20);
              HIDWORD(v43[3]) = v13;
              v43[4] = v14;
              v43[0] = &unk_1E5D29D40;
              v43[1] = v12;
              v15 = a1[15];
              if (v15 >= 1)
              {
                v16 = 0;
                v17 = 0;
                v18 = a1[14];
                v19 = a1[12] * (v37 * a1[17] + v36 * a1[13]) + a1[16] * v41;
                do
                {
                  if (v18 >= 1)
                  {
                    v20 = 0;
                    v21 = -v19;
                    do
                    {
                      v22 = a1[12];
                      v23 = *(_QWORD *)(a2 + 8) + 4 * (v19 + v20 + v17 * v22);
                      v24 = v21 + *(_DWORD *)(a2 + 28) + v16 * v22;
                      v25 = *(_QWORD *)(a2 + 32);
                      LODWORD(v42[2]) = 1;
                      *(_QWORD *)((char *)&v42[2] + 4) = *(_QWORD *)(a2 + 20);
                      HIDWORD(v42[3]) = v24;
                      v42[4] = v25;
                      v42[0] = &unk_1E5D29D40;
                      v42[1] = v23;
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v43, (uint64_t)v42, 111, 1.0, 1.0);
                      v42[0] = &unk_1E5D29D40;
                      memset(&v42[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v42);
                      ++v20;
                      v18 = a1[14];
                      --v21;
                    }
                    while (v20 < v18);
                    v15 = a1[15];
                  }
                  ++v17;
                  --v16;
                }
                while (v17 < v15);
              }
              v43[0] = &unk_1E5D29D40;
              memset(&v43[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v43);
              v11 = v41 + 1;
            }
            while (v41 + 1 != v40);
          }
          v10 = v35 + v40;
          ++v37;
        }
        while (v37 != v34);
      }
      v32 += v34 * v40;
      ++v36;
    }
    while (v36 != v30);
  }
  v26 = 1.0 / (double)(v28 * v29);
  kaldi::CuMatrixBase<float>::Scale(a3, v26);
  return result;
}

void sub_1ADB7153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a16);
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *(_QWORD *)(v18 - 128) = v17;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v18 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  _QWORD v44[6];

  v8 = a1[12];
  v7 = a1[13];
  v9 = a1[2] / (v7 * v8);
  v10 = a1[14];
  v11 = a1[15];
  v13 = a1[16];
  v12 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v31 = v9;
  if (v9 >= 1)
  {
    v37 = 0;
    v34 = (v8 - v10) / v13;
    v32 = (v7 - v11) / v12;
    v33 = 0;
    v14 = 1.0 / (double)(v11 * v10);
    v41 = (v34 + 1);
    v35 = (v32 + 1);
    do
    {
      if ((v32 & 0x80000000) == 0)
      {
        v38 = 0;
        v15 = v33;
        do
        {
          v36 = v15;
          if ((v34 & 0x80000000) == 0)
          {
            v16 = 0;
            v40 = ((v37 * v35 + v38) * v41);
            do
            {
              v42 = v16;
              v17 = *(_QWORD *)(a4 + 8) + 4 * (v16 + v40);
              v18 = *(_DWORD *)(a4 + 28) - (v16 + v40);
              v19 = *(_QWORD *)(a4 + 32);
              LODWORD(v44[2]) = 1;
              *(_QWORD *)((char *)&v44[2] + 4) = *(_QWORD *)(a4 + 20);
              HIDWORD(v44[3]) = v18;
              v44[4] = v19;
              v44[0] = &unk_1E5D29D40;
              v44[1] = v17;
              v20 = a1[15];
              if (v20 >= 1)
              {
                v21 = 0;
                v22 = 0;
                v23 = a1[14];
                v24 = a1[12] * (v38 * a1[17] + v37 * a1[13]) + a1[16] * v42;
                do
                {
                  if (v23 >= 1)
                  {
                    v25 = 0;
                    v26 = -v24;
                    do
                    {
                      v27 = a1[12];
                      v28 = *(_QWORD *)(a5 + 8) + 4 * (v24 + v25 + v22 * v27);
                      v29 = v26 + *(_DWORD *)(a5 + 28) + v21 * v27;
                      v30 = *(_QWORD *)(a5 + 32);
                      LODWORD(v43[2]) = 1;
                      *(_QWORD *)((char *)&v43[2] + 4) = *(_QWORD *)(a5 + 20);
                      HIDWORD(v43[3]) = v29;
                      v43[4] = v30;
                      v43[0] = &unk_1E5D29D40;
                      v43[1] = v28;
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v43, (uint64_t)v44, 111, v14, 1.0);
                      v43[0] = &unk_1E5D29D40;
                      memset(&v43[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v43);
                      ++v25;
                      v23 = a1[14];
                      --v26;
                    }
                    while (v25 < v23);
                    v20 = a1[15];
                  }
                  ++v22;
                  --v21;
                }
                while (v22 < v20);
              }
              v44[0] = &unk_1E5D29D40;
              memset(&v44[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v44);
              v16 = v42 + 1;
            }
            while (v42 + 1 != v41);
          }
          v15 = v36 + v41;
          ++v38;
        }
        while (v38 != v35);
      }
      v33 += v35 * v41;
      ++v37;
    }
    while (v37 != v31);
  }
}

void sub_1ADB7184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _OWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  _OWORD *v28;

  *v28 = 0u;
  v28[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  a27 = v27;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD v6[34];

  kaldi::ExpectToken(a2, a3, "<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 60);
  kaldi::ExpectToken(a2, a3, "<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  kaldi::ExpectToken(a2, a3, "<PoolYStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 68);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"num_fmaps ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
}

void sub_1ADB719D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::Copy(kaldi::nnet1::MaxPooling2DComponent *this)
{
  kaldi::nnet1::MaxPooling2DComponent *v2;

  v2 = (kaldi::nnet1::MaxPooling2DComponent *)operator new();
  kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(v2, this);
  return v2;
}

void sub_1ADB71A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::GetType(kaldi::nnet1::MaxPooling2DComponent *this)
{
  return 2053;
}

void kaldi::nnet1::MaxPooling2DComponent::InitData(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _QWORD v34[34];
  __int128 v35;
  uint64_t v36;

  v35 = 0uLL;
  v36 = 0;
  v4 = a2 + 4;
  v5 = a1 + 17;
  v6 = a1 + 16;
  v32 = a1 + 15;
  v33 = a1 + 14;
  v7 = a1 + 13;
  v8 = a1 + 12;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_76;
    kaldi::ReadToken(a2, 0, (uint64_t)&v35);
    if (SHIBYTE(v36) < 0)
      break;
    if (HIBYTE(v36) == 10)
    {
      v16 = (_QWORD)v35 == 0x654C5870616D463CLL && WORD4(v35) == 15982;
      v10 = (uint64_t)v8;
      if (v16)
        goto LABEL_59;
      v17 = (_QWORD)v35 == 0x654C5970616D463CLL && WORD4(v35) == 15982;
      v10 = (uint64_t)v7;
      if (v17)
        goto LABEL_59;
      v18 = (_QWORD)v35 == 0x654C586C6F6F503CLL && WORD4(v35) == 15982;
      v10 = (uint64_t)v33;
      if (v18)
        goto LABEL_59;
      goto LABEL_43;
    }
    if (HIBYTE(v36) != 11)
    {
      if (HIBYTE(v36) == 12)
      {
        v23 = &v35;
        goto LABEL_71;
      }
      goto LABEL_80;
    }
    v9 = (_QWORD)v35 == 0x7453586C6F6F503CLL && *(_QWORD *)((char *)&v35 + 3) == 0x3E70657453586C6FLL;
    v10 = (uint64_t)v6;
    if (!v9)
    {
      v11 = (_QWORD)v35 == 0x7453596C6F6F503CLL && *(_QWORD *)((char *)&v35 + 3) == 0x3E70657453596C6FLL;
      v10 = (uint64_t)v5;
      if (!v11)
        goto LABEL_80;
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v12 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1) != 10)
    goto LABEL_48;
  v13 = *(_QWORD *)v35 == 0x654C5870616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = (uint64_t)v8;
  if (v13)
    goto LABEL_59;
  v14 = *(_QWORD *)v35 == 0x654C5970616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = (uint64_t)v7;
  if (v14)
    goto LABEL_59;
  v15 = *(_QWORD *)v35 == 0x654C586C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = (uint64_t)v33;
  if (v15)
    goto LABEL_59;
  if ((v36 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v36) != 10)
      goto LABEL_80;
LABEL_43:
    v19 = (_QWORD)v35 == 0x654C596C6F6F503CLL && WORD4(v35) == 15982;
    v10 = (uint64_t)v32;
    if (!v19)
      goto LABEL_80;
    goto LABEL_59;
  }
  v22 = *(_QWORD *)v35 == 0x654C596C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  v10 = (uint64_t)v32;
  if (v22)
    goto LABEL_59;
  v12 = *((_QWORD *)&v35 + 1);
LABEL_48:
  if (v12 != 11)
    goto LABEL_69;
  v20 = *(_QWORD *)v35 == 0x7453586C6F6F503CLL && *(_QWORD *)(v35 + 3) == 0x3E70657453586C6FLL;
  v10 = (uint64_t)v6;
  if (v20)
    goto LABEL_59;
  v12 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1) != 11)
    goto LABEL_69;
  v21 = *(_QWORD *)v35 == 0x7453596C6F6F503CLL && *(_QWORD *)(v35 + 3) == 0x3E70657453596C6FLL;
  v10 = (uint64_t)v5;
  if (v21)
    goto LABEL_59;
  if ((v36 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_69:
  if (v12 != 12)
    goto LABEL_80;
  v23 = (__int128 *)v35;
LABEL_71:
  v24 = *(_QWORD *)v23;
  v25 = *((_DWORD *)v23 + 2);
  if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Unknown token ", 14);
    if (v36 >= 0)
      v28 = &v35;
    else
      v28 = (__int128 *)v35;
    if (v36 >= 0)
      v29 = HIBYTE(v36);
    else
      v29 = *((_QWORD *)&v35 + 1);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
LABEL_76:
  if (a1[2] % (a1[13] * a1[12]))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Invalid component parameters", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
}

void sub_1ADB71E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYStep>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::MaxPooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  _QWORD v41[6];

  v6 = a1[12];
  v5 = a1[13];
  v7 = a1[2] / (v5 * v6);
  v9 = a1[14];
  v8 = a1[15];
  v11 = a1[16];
  v10 = a1[17];
  kaldi::CuMatrixBase<float>::Set(a3, -1.0e20);
  v28 = v7;
  if (v7 >= 1)
  {
    v34 = 0;
    v31 = (v6 - v9) / v11;
    v29 = (v5 - v8) / v10;
    v30 = 0;
    v38 = (v31 + 1);
    v32 = (v29 + 1);
    do
    {
      if ((v29 & 0x80000000) == 0)
      {
        v35 = 0;
        v12 = v30;
        do
        {
          v33 = v12;
          if ((v31 & 0x80000000) == 0)
          {
            v13 = 0;
            v37 = ((v34 * v32 + v35) * v38);
            do
            {
              v39 = v13;
              v14 = *(_QWORD *)(a3 + 8) + 4 * (v13 + v37);
              v15 = *(_DWORD *)(a3 + 28) - (v13 + v37);
              v16 = *(_QWORD *)(a3 + 32);
              LODWORD(v41[2]) = 1;
              *(_QWORD *)((char *)&v41[2] + 4) = *(_QWORD *)(a3 + 20);
              HIDWORD(v41[3]) = v15;
              v41[4] = v16;
              v41[0] = &unk_1E5D29D40;
              v41[1] = v14;
              v17 = a1[15];
              if (v17 >= 1)
              {
                v18 = 0;
                v19 = 0;
                v20 = a1[14];
                v21 = a1[12] * (v35 * a1[17] + v34 * a1[13]) + a1[16] * v39;
                do
                {
                  if (v20 >= 1)
                  {
                    v22 = 0;
                    v23 = -v21;
                    do
                    {
                      v24 = a1[12];
                      v25 = *(_QWORD *)(a2 + 8) + 4 * (v21 + v22 + v19 * v24);
                      v26 = v23 + *(_DWORD *)(a2 + 28) + v18 * v24;
                      v27 = *(_QWORD *)(a2 + 32);
                      LODWORD(v40[2]) = 1;
                      *(_QWORD *)((char *)&v40[2] + 4) = *(_QWORD *)(a2 + 20);
                      HIDWORD(v40[3]) = v26;
                      v40[4] = v27;
                      v40[0] = &unk_1E5D29D40;
                      v40[1] = v25;
                      kaldi::CuMatrixBase<float>::Max((uint64_t)v41, (uint64_t)v40);
                      v40[0] = &unk_1E5D29D40;
                      memset(&v40[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v40);
                      ++v22;
                      v20 = a1[14];
                      --v23;
                    }
                    while (v22 < v20);
                    v17 = a1[15];
                  }
                  ++v19;
                  --v18;
                }
                while (v19 < v17);
              }
              v41[0] = &unk_1E5D29D40;
              memset(&v41[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v41);
              v13 = v39 + 1;
            }
            while (v39 + 1 != v38);
          }
          v12 = v33 + v38;
          ++v35;
        }
        while (v35 != v32);
      }
      v30 += v32 * v38;
      ++v34;
    }
    while (v34 != v28);
  }
}

void sub_1ADB72274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a14);
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *(_QWORD *)(v16 - 128) = v15;
  *a9 = 0u;
  a9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v16 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  int32x2_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  _QWORD v57[5];
  _QWORD v58[5];
  void *v59;
  _BYTE v60[32];
  _QWORD v61[6];

  v8 = a1[12];
  v7 = a1[13];
  v9 = a1[2] / (v7 * v8);
  v11 = a1[14];
  v10 = a1[15];
  v13 = a1[16];
  v12 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  if (v9 >= 1)
  {
    v44 = 0;
    v41 = (v8 - v11) / v13;
    v39 = (v7 - v10) / v12;
    v40 = 0;
    v49 = (v41 + 1);
    v42 = (v39 + 1);
    v14 = 0uLL;
    do
    {
      v15 = a1;
      if ((v39 & 0x80000000) == 0)
      {
        v45 = 0;
        v16 = v40;
        do
        {
          v43 = v16;
          if ((v41 & 0x80000000) == 0)
          {
            v17 = 0;
            v48 = ((v44 * v42 + v45) * v49);
            do
            {
              v50 = v17;
              v18 = v17 + v48;
              v19 = *(_QWORD *)(a3 + 8) + 4 * (v17 + v48);
              v20 = *(_DWORD *)(a3 + 28) - (v17 + v48);
              v21 = *(_QWORD *)(a3 + 32);
              *(_QWORD *)((char *)&v61[2] + 4) = *(_QWORD *)(a3 + 20);
              LODWORD(v61[2]) = 1;
              HIDWORD(v61[3]) = v20;
              v61[4] = v21;
              v61[0] = &unk_1E5D29D40;
              v61[1] = v19;
              v22 = *(_QWORD *)(a4 + 8) + 4 * v18;
              LODWORD(v18) = *(_DWORD *)(a4 + 28) - v18;
              v23 = *(_QWORD *)(a4 + 32);
              *(_QWORD *)&v60[12] = *(_QWORD *)(a4 + 20);
              *(_DWORD *)&v60[8] = 1;
              *(_DWORD *)&v60[20] = v18;
              *(_QWORD *)&v60[24] = v23;
              v59 = &unk_1E5D29D40;
              *(_QWORD *)v60 = v22;
              v24 = v15[15];
              if (v24 >= 1)
              {
                v25 = 0;
                v26 = 0;
                v27 = v15[14];
                v52 = v15[12] * (v45 * v15[17] + v44 * v15[13]) + v15[16] * v50;
                do
                {
                  if (v27 >= 1)
                  {
                    v28 = 0;
                    v29 = -v52;
                    do
                    {
                      v30 = v15[12];
                      v31 = v52 + v28 + v26 * v30;
                      v32 = *(_QWORD *)(a2 + 8) + 4 * v31;
                      v33 = *(_QWORD *)(a2 + 32);
                      v34 = v25 * v30;
                      v35 = v29 + *(_DWORD *)(a2 + 28) + v34;
                      LODWORD(v58[2]) = 1;
                      *(_QWORD *)((char *)&v58[2] + 4) = *(_QWORD *)(a2 + 20);
                      HIDWORD(v58[3]) = v35;
                      v58[4] = v33;
                      v58[0] = &unk_1E5D29D40;
                      v58[1] = v32;
                      v36 = *(_QWORD *)(a5 + 8) + 4 * v31;
                      v37 = v29 + *(_DWORD *)(a5 + 28) + v34;
                      v38 = *(_QWORD *)(a5 + 32);
                      LODWORD(v57[2]) = 1;
                      *(_QWORD *)((char *)&v57[2] + 4) = *(_QWORD *)(a5 + 20);
                      HIDWORD(v57[3]) = v37;
                      v57[4] = v38;
                      v57[0] = &unk_1E5D29D40;
                      v57[1] = v36;
                      v54 = v14;
                      v55 = v14;
                      v53 = (int32x2_t)&unk_1E5D34170;
                      v56 = 0;
                      kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)v58, (uint64_t)v61, &v53);
                      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v53, (uint64_t)&v59);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v57, (uint64_t)&v53, 111, 1.0, 1.0);
                      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v53);
                      v57[0] = &unk_1E5D29D40;
                      memset(&v57[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v57);
                      v58[0] = &unk_1E5D29D40;
                      memset(&v58[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
                      v14 = 0uLL;
                      ++v28;
                      v15 = a1;
                      v27 = a1[14];
                      --v29;
                    }
                    while (v28 < v27);
                    v24 = a1[15];
                  }
                  ++v26;
                  --v25;
                }
                while (v26 < v24);
              }
              v59 = &unk_1E5D29D40;
              *(_OWORD *)v60 = v14;
              *(_OWORD *)&v60[16] = v14;
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v59);
              v61[0] = &unk_1E5D29D40;
              memset(&v61[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v61);
              v14 = 0uLL;
              v17 = v50 + 1;
            }
            while (v50 + 1 != v49);
          }
          v16 = v43 + v49;
          ++v45;
        }
        while (v45 != v42);
      }
      v40 += v42 * v49;
      ++v44;
    }
    while (v44 != v9);
  }
}

void sub_1ADB72698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _OWORD *a16, _OWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_OWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;

  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a28);
  a34 = v34;
  *v35 = 0u;
  v35[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a34);
  *(_QWORD *)(v36 - 208) = v34;
  *a24 = 0u;
  a24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v36 - 208));
  *(_QWORD *)(v36 - 168) = v34;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v36 - 168));
  *(_QWORD *)(v36 - 128) = v34;
  *a17 = 0u;
  a17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v36 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 60);
  kaldi::ExpectToken(a2, a3, "<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  kaldi::ExpectToken(a2, a3, "<PoolYStep>");
  return kaldi::ReadBasicType<int>(a2, a3, a1 + 68);
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Copy(kaldi::nnet1::Desplice *this)
{
  kaldi::nnet1::Desplice *v2;

  v2 = (kaldi::nnet1::Desplice *)operator new();
  kaldi::nnet1::Desplice::Desplice(v2, this);
  return v2;
}

void sub_1ADB7284C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1091C40A77886BBLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::GetType(kaldi::nnet1::Desplice *this)
{
  return 1027;
}

uint64_t kaldi::nnet1::Desplice::OutputRowCount(kaldi::nnet1::Desplice *this, int a2)
{
  return (*((_DWORD *)this + 2) / *((_DWORD *)this + 3) * a2);
}

void kaldi::nnet1::Desplice::InitData(kaldi::nnet1::Desplice *a1, uint64_t *a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v25[34];
  __int128 v26;
  uint64_t v27;

  v26 = 0uLL;
  v27 = 0;
  v3 = a2 + 4;
  v4 = (char *)a1 + 56;
  v5 = (char *)a1 + 52;
  v6 = (char *)a1 + 48;
  while (1)
  {
    if ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_48;
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      switch(HIBYTE(v27))
      {
        case 0xBu:
          v14 = (_QWORD)v26 == 0x69727453776F523CLL && *(_QWORD *)((char *)&v26 + 3) == 0x3E65646972745377;
          v8 = (uint64_t)v5;
          if (!v14)
            goto LABEL_51;
          break;
        case 0xCu:
          v13 = (_QWORD)v26 == 0x6E654C656D69543CLL && DWORD2(v26) == 1047032935;
          v8 = (uint64_t)v4;
          if (!v13)
          {
            v15 = &v26;
            goto LABEL_43;
          }
          break;
        case 0xEu:
          v7 = (_QWORD)v26 == 0x4C6563696C70533CLL && *(_QWORD *)((char *)&v26 + 6) == 0x3E6874676E654C65;
          v8 = (uint64_t)v6;
          if (!v7)
            goto LABEL_51;
          break;
        default:
          goto LABEL_51;
      }
      goto LABEL_40;
    }
    v9 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) == 11)
    {
      v11 = *(_QWORD *)v26 == 0x69727453776F523CLL && *(_QWORD *)(v26 + 3) == 0x3E65646972745377;
      v8 = (uint64_t)v5;
      if (v11)
        goto LABEL_40;
      v9 = *((_QWORD *)&v26 + 1);
    }
    else if (*((_QWORD *)&v26 + 1) == 14)
    {
      v10 = *(_QWORD *)v26 == 0x4C6563696C70533CLL && *(_QWORD *)(v26 + 6) == 0x3E6874676E654C65;
      v8 = (uint64_t)v6;
      if (v10)
        goto LABEL_40;
    }
    if (v9 != 12)
      goto LABEL_51;
    v12 = *(_QWORD *)v26 == 0x6E654C656D69543CLL && *(_DWORD *)(v26 + 8) == 1047032935;
    v8 = (uint64_t)v4;
    if (!v12)
      break;
LABEL_40:
    kaldi::ReadBasicType<int>(a2, 0, v8);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (*((_QWORD *)&v26 + 1) != 12)
    goto LABEL_51;
  v15 = (__int128 *)v26;
LABEL_43:
  v16 = *(_QWORD *)v15;
  v17 = *((_DWORD *)v15 + 2);
  if (v16 != 0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v27 >= 0)
      v20 = &v26;
    else
      v20 = (__int128 *)v26;
    if (v27 >= 0)
      v21 = HIBYTE(v27);
    else
      v21 = *((_QWORD *)&v26 + 1);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_48:
  kaldi::nnet1::Desplice::Init(a1);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
}

void sub_1ADB72B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SpliceLength>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<RowStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<TimeLength>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

unint64_t kaldi::nnet1::Desplice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a3, a2, (int *)(a1 + 64), a1 + 88, *(_DWORD *)(a2 + 24) * *(_DWORD *)(a1 + 52));
}

unint64_t kaldi::nnet1::Desplice::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a5, a4, a1 + 28, (uint64_t)(a1 + 34), a1[13] * a1[12] * *(_DWORD *)(a4 + 24));
}

void kaldi::nnet1::Desplice::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a1 + 52;
  *(_QWORD *)(a1 + 48) = 0x100000001;
  v7 = a1 + 48;
  *(_DWORD *)(a1 + 56) = 1;
  v8 = a1 + 56;
  kaldi::ExpectToken(a2, a3, "<SpliceLength>");
  kaldi::ReadBasicType<int>(a2, a3, v7);
  kaldi::ExpectToken(a2, a3, "<RowStride>");
  kaldi::ReadBasicType<int>(a2, a3, v6);
  kaldi::ExpectToken(a2, a3, "<TimeLength>");
  kaldi::ReadBasicType<int>(a2, a3, v8);
  kaldi::nnet1::Desplice::Init((kaldi::nnet1::Desplice *)a1);
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::Copy(kaldi::nnet1::FramePoolingComponent *this)
{
  kaldi::nnet1::FramePoolingComponent *v2;

  v2 = (kaldi::nnet1::FramePoolingComponent *)operator new();
  kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(v2, this);
  return v2;
}

void sub_1ADB72D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40B638E8C8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::GetType(kaldi::nnet1::FramePoolingComponent *this)
{
  return 2054;
}

uint64_t kaldi::nnet1::FramePoolingComponent::Info(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n  (offset,weights) : ", 22);
  if (*((_QWORD *)this + 16) != *((_QWORD *)this + 15))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((_QWORD *)this + 15) + v2, v5, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"), ", 3);
      ++v3;
      v2 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3) > v3);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADB72F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::InfoGradient(kaldi::nnet1::FramePoolingComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  _BYTE v13[16];
  void *v14[2];
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  lr-coef ", 11);
  kaldi::nnet1::ToString<float>();
  if ((v15 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (uint64_t)v14[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v15 < 0)
    operator delete(v14[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  (offset,weights_grad) : ", 27);
  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 18))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((_QWORD *)this + 18) + v5, v10, 0);
      MEMORY[0x1AF44CB90](v13, v10);
      v8 = (char *)v10 + *(_QWORD *)(v10[0] - 24);
      if ((v8[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(v14, *((_QWORD *)v8 + 5), -1, 1, 16);
        if (v16 == -1)
          std::ios_base::clear((std::ios_base *)((char *)v10 + *(_QWORD *)(v10[0] - 24)), *(_DWORD *)((char *)&v10[4] + *(_QWORD *)(v10[0] - 24)) | 4);
      }
      MEMORY[0x1AF44CB9C](v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), ", 3);
      ++v6;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3) > v6);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADB7319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 209) < 0)
    operator delete(*(void **)(v9 - 232));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  std::vector<int> *v14;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  const void *v50;
  int v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;

  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v4 = a2 + 4;
  v56 = 1008981770;
  v5 = (char *)(a1 + 172);
  v49 = a1 + 88;
  v54 = 0uLL;
  v55 = 0;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_86;
    kaldi::ReadToken(a2, 0, (uint64_t)&v54);
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      break;
    v7 = *((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1) == 12 && *(_QWORD *)v54 == 0x657275746165463CLL && *(_DWORD *)(v54 + 8) == 1047357764)
    {
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, v49);
      goto LABEL_77;
    }
    if (*((_QWORD *)&v54 + 1) == 15)
    {
      if (*(_QWORD *)v54 == 0x6C6172746E65433CLL && *(_QWORD *)(v54 + 7) == 0x3E74657366664F6CLL)
      {
LABEL_67:
        v14 = (std::vector<int> *)&v60;
        goto LABEL_68;
      }
      v7 = *((_QWORD *)&v54 + 1);
    }
    if (v7 == 10)
    {
      if (*(_QWORD *)v54 == 0x7A69536C6F6F503CLL && *(_WORD *)(v54 + 8) == 15973)
      {
LABEL_45:
        v14 = (std::vector<int> *)&v63;
LABEL_68:
        kaldi::ReadIntegerVector<int>(a2, 0, v14, 0, 0, 0, 0);
        goto LABEL_77;
      }
      v7 = *((_QWORD *)&v54 + 1);
    }
    if (v7 == 12)
    {
      if (*(_QWORD *)v54 == 0x6965576C6F6F503CLL && *(_DWORD *)(v54 + 8) == 1047816295)
      {
LABEL_70:
        kaldi::Vector<float>::Read((uint64_t)&v57, a2, 0, 0);
        goto LABEL_77;
      }
      v7 = *((_QWORD *)&v54 + 1);
    }
    if (v7 != 15)
      goto LABEL_39;
    if (*(_QWORD *)v54 != 0x61526E7261654C3CLL || *(_QWORD *)(v54 + 7) != 0x3E66656F43657461)
    {
      v7 = *((_QWORD *)&v54 + 1);
LABEL_39:
      if (v7 != 11)
        goto LABEL_78;
      if (*(_QWORD *)v54 != 0x696C616D726F4E3CLL || *(_QWORD *)(v54 + 3) != 0x3E657A696C616D72)
      {
        v7 = *((_QWORD *)&v54 + 1);
LABEL_78:
        if (v7 == 12)
        {
          v20 = (__int128 *)v54;
          goto LABEL_81;
        }
        goto LABEL_112;
      }
LABEL_66:
      kaldi::ReadBasicType<BOOL>(a2, 0, v5);
      goto LABEL_77;
    }
LABEL_76:
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v56);
LABEL_77:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v55))
  {
    case 0xA:
LABEL_5:
      if ((_QWORD)v54 != 0x7A69536C6F6F503CLL || WORD4(v54) != 15973)
        goto LABEL_112;
      goto LABEL_45;
    case 0xB:
      goto LABEL_61;
    case 0xC:
      if ((_QWORD)v54 == 0x657275746165463CLL && DWORD2(v54) == 1047357764)
        goto LABEL_69;
LABEL_50:
      if ((_QWORD)v54 == 0x6965576C6F6F503CLL && DWORD2(v54) == 1047816295)
        goto LABEL_70;
LABEL_54:
      if (HIBYTE(v55) == 11)
      {
LABEL_61:
        if ((_QWORD)v54 != 0x696C616D726F4E3CLL || *(_QWORD *)((char *)&v54 + 3) != 0x3E657A696C616D72)
          goto LABEL_112;
        goto LABEL_66;
      }
      v20 = &v54;
      if (HIBYTE(v55) != 12)
        goto LABEL_112;
LABEL_81:
      v21 = *(_QWORD *)v20;
      v22 = *((unsigned int *)v20 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
      {
LABEL_112:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Unknown token ", 14);
        if (v55 >= 0)
          v45 = &v54;
        else
          v45 = (__int128 *)v54;
        if (v55 >= 0)
          v46 = HIBYTE(v55);
        else
          v46 = *((_QWORD *)&v54 + 1);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" (FeatureDim|CentralOffset <vec>|PoolSize <vec>|LearnRateCoef|Normalize)", 72);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
      }
LABEL_86:
      v24 = v61 - v60;
      v25 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 88);
      if (v25 >= 1)
        v26 = v25 - 1;
      else
        v26 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 88);
      std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 96), (int)(v24 >> 2));
      v27 = (uint64_t *)(a1 + 120);
      std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v24 >> 2));
      v28 = (unint64_t)v24 >> 2;
      v29 = ((unint64_t)v24 >> 2);
      if ((int)v28 >= 1)
      {
        v30 = 0;
        v31 = (v26 >> 1) + 1;
        do
        {
          v32 = v63;
          v33 = v63[v30];
          if (v33 >= -1)
            v33 = -1;
          *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v30) = v31 + *(_DWORD *)&v60[4 * v30] + v33;
          v34 = v32[v30];
          if (v34 >= 0)
            v35 = v34;
          else
            v35 = -v34;
          kaldi::Vector<float>::Resize((void **)(*v27 + 24 * v30), v35, 0);
          v36 = v63[v30];
          if (v36 < 0)
            v36 = -v36;
          v37 = 1.0 / (double)v36;
          kaldi::VectorBase<float>::Set(*v27 + 24 * v30++, v37);
        }
        while (v30 != v29);
      }
      *(_DWORD *)(a1 + 168) = v56;
      if ((_DWORD)v58)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Initializing from pool-weight vector", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v50);
        }
        if ((int)v28 >= 1)
        {
          v38 = 0;
          v39 = 0;
          v40 = *v27;
          v41 = 8 * (2 * v29 + v28);
          do
          {
            v42 = v40 + v38;
            v43 = *(_DWORD *)(v40 + v38 + 8);
            v52 = 0;
            v53 = 0;
            v50 = (const void *)(v57 + 4 * v39);
            v51 = v43;
            kaldi::VectorBase<float>::CopyFromVec(v42, &v50);
            v40 = *v27;
            v39 += *(_DWORD *)(*v27 + v38 + 8);
            v38 += 24;
          }
          while (v41 != v38);
        }
      }
      if (SHIBYTE(v55) < 0)
        operator delete((void *)v54);
      kaldi::Vector<float>::Destroy((uint64_t)&v57);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      return;
    case 0xF:
      if ((_QWORD)v54 != 0x6C6172746E65433CLL || *(_QWORD *)((char *)&v54 + 7) != 0x3E74657366664F6CLL)
      {
        switch(HIBYTE(v55))
        {
          case 0xA:
            goto LABEL_5;
          case 0xB:
            goto LABEL_61;
          case 0xC:
            goto LABEL_50;
          case 0xF:
            if ((_QWORD)v54 != 0x61526E7261654C3CLL || *(_QWORD *)((char *)&v54 + 7) != 0x3E66656F43657461)
              goto LABEL_54;
            goto LABEL_76;
          default:
            goto LABEL_112;
        }
      }
      goto LABEL_67;
    default:
      goto LABEL_112;
  }
}

void sub_1ADB738A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  kaldi::Vector<float>::Destroy(v1 - 184);
  kaldi::nnet1::FramePoolingComponent::InitData(v1 - 184, v1 - 160, v1 - 136);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  kaldi::WriteToken(a2, a3, "<FeatureDim>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<Normalize>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 172));
  kaldi::WriteToken(a2, a3, "<FrameOffset>");
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2, *(_QWORD *)(a1 + 96));
  kaldi::WriteToken(a2, a3, "<FrameWeight>");
  v6 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  if ((int)(v6 >> 2) >= 1)
  {
    v7 = 0;
    v8 = 24 * (v6 >> 2);
    do
    {
      kaldi::VectorBase<float>::Write(*(_QWORD *)(a1 + 120) + v7, a2, a3);
      v7 += 24;
    }
    while (v8 != v7);
  }
}

void kaldi::nnet1::FramePoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[5];

  v3 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  if ((int)(v3 >> 2) >= 1)
  {
    v7 = 0;
    v19 = (v3 >> 2);
    do
    {
      v8 = *(_DWORD *)(a1 + 88);
      v9 = *(_QWORD *)(a3 + 8) + 4 * (v8 * v7);
      v10 = *(_DWORD *)(a3 + 28) - v8 * v7;
      v11 = *(_QWORD *)(a3 + 32);
      LODWORD(v21[2]) = v8;
      *(_QWORD *)((char *)&v21[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v21[3]) = v10;
      v21[4] = v11;
      v21[0] = &unk_1E5D29D40;
      v21[1] = v9;
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v21);
      v12 = *(_QWORD *)(a1 + 120) + 24 * v7;
      if (*(int *)(v12 + 8) >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *(float *)(*(_QWORD *)v12 + 4 * v13);
          v15 = (v13 + *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v7)) * *(_DWORD *)(a1 + 88);
          v16 = *(_QWORD *)(a2 + 8) + 4 * v15;
          v17 = *(_DWORD *)(a2 + 28) - v15;
          v18 = *(_QWORD *)(a2 + 32);
          LODWORD(v20[2]) = *(_DWORD *)(a1 + 88);
          *(_QWORD *)((char *)&v20[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v20[3]) = v17;
          v20[4] = v18;
          v20[0] = &unk_1E5D29D40;
          v20[1] = v16;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v21, (uint64_t)v20, 111, v14, 1.0);
          v20[0] = &unk_1E5D29D40;
          memset(&v20[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
          ++v13;
          v12 = *(_QWORD *)(a1 + 120) + 24 * v7;
        }
        while (v13 < *(int *)(v12 + 8));
      }
      v21[0] = &unk_1E5D29D40;
      memset(&v21[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
      ++v7;
    }
    while (v7 != v19);
  }
}

void sub_1ADB73BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v17;

  a16 = v17 + 16;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::FramePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  kaldi::ExpectToken(a2, a3, "<FeatureDim>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 88);
  kaldi::ExpectToken(a2, a3, "<LearnRateCoef>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 168));
  kaldi::ExpectToken(a2, a3, "<Normalize>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 172));
  kaldi::ExpectToken(a2, a3, "<FrameOffset>");
  kaldi::ReadIntegerVector<int>(a2, a3, (std::vector<int> *)(a1 + 96), 0, 0, 0, 0);
  kaldi::ExpectToken(a2, a3, "<FrameWeight>");
  v6 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  v7 = (uint64_t *)(a1 + 120);
  std::vector<kaldi::Vector<float>>::resize(v7, (int)(v6 >> 2));
  if ((int)((unint64_t)v6 >> 2) >= 1)
  {
    v8 = 0;
    do
    {
      kaldi::Vector<float>::Read(*v7 + v8, a2, a3, 0);
      v8 += 24;
    }
    while (24 * ((unint64_t)v6 >> 2) != v8);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::NumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;

  v2 = *((_QWORD *)this + 15);
  v1 = *((_QWORD *)this + 16);
  result = 0;
  v4 = v1 - v2;
  if (v4)
  {
    v5 = v4 / 24;
    if (v5 <= 1)
      v5 = 1;
    v6 = (int *)(v2 + 8);
    do
    {
      v7 = *v6;
      v6 += 6;
      result = (v7 + result);
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::nnet1::FramePoolingComponent::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  const void **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = a1[15];
  if (a1[16] != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 8;
    do
    {
      v9 = (const void **)(v5 + v8 - 8);
      v10 = *(_DWORD *)(v5 + v8);
      v12 = 0;
      v13 = 0;
      v11 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v12) = v10;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, v9);
      v5 = a1[15];
      v7 += *(_DWORD *)(v5 + v8);
      ++v6;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v5) >> 3) > v6);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::SetParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(_QWORD *))(*a1 + 176))(a1);
  v4 = a1[15];
  if (a1[16] != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 8;
    do
    {
      v8 = v4 + v7 - 8;
      v9 = *(_DWORD *)(v4 + v7);
      v12 = 0;
      v13 = 0;
      v11 = *a2 + 4 * v6;
      LODWORD(v12) = v9;
      kaldi::VectorBase<float>::CopyFromVec(v8, (const void **)&v11);
      v4 = a1[15];
      v6 += *(_DWORD *)(v4 + v7);
      ++v5;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v4) >> 3) > v5);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
}

float kaldi::nnet1::FramePoolingComponent::SumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  float v5;

  v1 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 16) == v1)
    return 0.0;
  v3 = 0;
  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + kaldi::VectorBase<float>::Sum(v1 + v3);
    ++v4;
    v1 = *((_QWORD *)this + 15);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 16) - v1) >> 3) > v4);
  return v5;
}

void kaldi::nnet1::FramePoolingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  _BYTE v25[48];
  _QWORD v26[5];
  _QWORD v27[6];

  v8 = *(_QWORD *)(a1 + 144);
  v7 = (uint64_t *)(a1 + 144);
  v9 = *(v7 - 5) - *(v7 - 6);
  if (0xAAAAAAAAAAAAAAABLL * ((v7[1] - v8) >> 3) != (int)(v9 >> 2))
    std::vector<kaldi::Vector<float>>::resize(v7, (int)((uint64_t)v9 >> 2));
  if ((int)(v9 >> 2) >= 1)
  {
    v10 = 0;
    v23 = (v9 >> 2);
    v11 = *(_QWORD *)(a1 + 120);
    do
    {
      kaldi::Vector<float>::Resize((void **)(*(_QWORD *)(a1 + 144) + 24 * v10), *(unsigned int *)(v11 + 24 * v10 + 8), 0);
      v11 = *(_QWORD *)(a1 + 120);
      if (*(int *)(v11 + 24 * v10 + 8) >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(_DWORD *)(a1 + 88);
          v14 = (v12 + *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v10)) * v13;
          v15 = *(_QWORD *)(a2 + 8) + 4 * v14;
          v16 = *(_DWORD *)(a2 + 28) - v14;
          LODWORD(v27[2]) = v13;
          *(_QWORD *)((char *)&v27[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v27[3]) = v16;
          v27[0] = &unk_1E5D29D40;
          v27[1] = v15;
          v17 = *(_QWORD *)(a3 + 8) + 4 * (v13 * v10);
          v18 = *(_DWORD *)(a3 + 28);
          LODWORD(v26[2]) = v13;
          *(_QWORD *)((char *)&v26[2] + 4) = *(_QWORD *)(a3 + 20);
          HIDWORD(v26[3]) = v18 - v13 * v10;
          v26[0] = &unk_1E5D29D40;
          v26[1] = v17;
          v27[4] = a4;
          v26[4] = a4;
          kaldi::CuMatrix<float>::CuMatrix(v25, v27, 111);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)v25, (uint64_t)v26);
          *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 24 * v10) + 4 * v12) = kaldi::CuMatrixBase<float>::Sum((uint64_t)v25);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v25);
          v26[0] = &unk_1E5D29D40;
          memset(&v26[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
          v27[0] = &unk_1E5D29D40;
          memset(&v27[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
          ++v12;
          v11 = *(_QWORD *)(a1 + 120);
        }
        while (v12 < *(int *)(v11 + 24 * v10 + 8));
      }
      ++v10;
    }
    while (v10 != v23);
    v19 = 0;
    do
    {
      kaldi::VectorBase<float>::AddVec<float>(*(_QWORD *)(a1 + 120) + v19, (const float **)(*(_QWORD *)(a1 + 144) + v19), -(float)(*(float *)(a1 + 168) * *(float *)(a1 + 56)));
      v19 += 24;
    }
    while (24 * v23 != v19);
    if (*(_BYTE *)(a1 + 172))
    {
      v20 = 0;
      do
      {
        kaldi::VectorBase<float>::ApplyFloor(*(_QWORD *)(a1 + 120) + v20, 0.0);
        v21 = *(_QWORD *)(a1 + 120) + v20;
        v22 = kaldi::VectorBase<float>::Sum(v21);
        kaldi::VectorBase<float>::Scale(v21, 1.0 / v22);
        v20 += 24;
      }
      while (24 * v23 != v20);
    }
  }
}

void sub_1ADB74260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _OWORD *v23;
  _OWORD *v24;

  a18 = &unk_1E5D29D40;
  *v24 = 0u;
  v24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a18);
  a23 = &unk_1E5D29D40;
  *v23 = 0u;
  v23[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a23);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::FramePoolingComponent::SetTrainOptions(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  __n128 result;
  _QWORD v3[34];

  if (*((_DWORD *)a2 + 8) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 23);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::Copy(kaldi::nnet1::InterpolationComponent *this)
{
  kaldi::nnet1::InterpolationComponent *v2;

  v2 = (kaldi::nnet1::InterpolationComponent *)operator new();
  kaldi::nnet1::InterpolationComponent::InterpolationComponent(v2, *((_DWORD *)this + 2), *((_DWORD *)this + 3));
  (*(void (**)(kaldi::nnet1::InterpolationComponent *, char *))(*(_QWORD *)v2 + 176))(v2, (char *)this + 48);
  return v2;
}

void sub_1ADB74380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40B9971A7CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::InterpolationComponent::GetType(kaldi::nnet1::InterpolationComponent *this)
{
  return 1039;
}

void kaldi::nnet1::InterpolationComponent::InitData(uint64_t a1, uint64_t *a2)
{
  void **v4;
  int v5;
  int v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  _QWORD v18[34];
  uint64_t v19;

  v19 = 0;
  v4 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  kaldi::ExpectToken(a2, 0, "<NumComponents>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v19);
  if ((int)v19 < 1 || (v5 = *(_DWORD *)(a1 + 8), v5 % (int)v19))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v5 / (int)v19 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  v6 = 0;
  do
  {
    kaldi::ExpectToken(a2, 0, "<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v19 + 1);
    v8 = *(char **)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v8 >= v7)
    {
      v10 = (char *)*v4;
      v11 = (v8 - (_BYTE *)*v4) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v14);
        v10 = *(char **)(a1 + 48);
        v8 = *(char **)(a1 + 56);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      *(_DWORD *)v16 = HIDWORD(v19);
      v9 = v16 + 4;
      while (v8 != v10)
      {
        v17 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v16 - 1) = v17;
        v16 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 64) = &v15[4 * v14];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v8 = HIDWORD(v19);
      v9 = v8 + 4;
    }
    *(_QWORD *)(a1 + 56) = v9;
    ++v6;
  }
  while (v6 < (int)v19);
  kaldi::ExpectToken(a2, 0, "</InterpolationComponent>");
}

_QWORD *kaldi::nnet1::InterpolationComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  const std::locale::facet *v6;
  unint64_t v7;
  std::locale::id *v8;
  const std::locale::facet *v9;
  _QWORD *result;
  const std::locale::facet *v11;
  std::locale v12;

  kaldi::WriteToken(a2, a3, "<NumComponents>");
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v6 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v12);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v7 = 0;
    v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      kaldi::WriteToken(a2, a3, "<ComponentWeight>");
      kaldi::WriteBasicType<float>((uint64_t)a2, a3);
      if ((a3 & 1) == 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v9 = std::locale::use_facet(&v12, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  }
  result = kaldi::WriteToken(a2, a3, "</InterpolationComponent>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v11 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v12);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  return result;
}

void sub_1ADB74788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  _QWORD v14[5];

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  if (v4)
  {
    v8 = 0;
    v9 = *(int *)(a1 + 8) / (unint64_t)(v4 >> 2);
    do
    {
      v10 = *(_QWORD *)(a2 + 8) + 4 * (v8 * v9);
      v11 = *(_DWORD *)(a2 + 28) - v8 * v9;
      v12 = *(_QWORD *)(a2 + 32);
      LODWORD(v14[2]) = v9;
      *(_QWORD *)((char *)&v14[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v14[3]) = v11;
      v14[4] = v12;
      v14[0] = &unk_1E5D29D40;
      v14[1] = v10;
      if (v8)
        v13 = 1.0;
      else
        v13 = 0.0;
      kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v14, 111, *(float *)(v3 + 4 * v8), v13);
      v14[0] = &unk_1E5D29D40;
      memset(&v14[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
      ++v8;
      v3 = *(_QWORD *)(a1 + 48);
    }
    while (v8 < (*(_QWORD *)(a1 + 56) - v3) >> 2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  _QWORD v14[4];

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    v9 = 0;
    v10 = *(int *)(a1 + 8) / (unint64_t)(v5 >> 2);
    do
    {
      v11 = v9 + 1;
      v12 = *(_QWORD *)(a2 + 8);
      v14[0] = &unk_1E5D29D70;
      v14[1] = v12 + 4 * v9 * (int)v10;
      v14[3] = *(_QWORD *)(a2 + 24);
      v14[2] = ((v9 + 1) * v10 - 1);
      if (v9)
        v13 = 1.0;
      else
        v13 = 0.0;
      kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v14, *(float *)(v3 + 4 * v9), v13);
      v3 = *(_QWORD *)(a1 + 48);
      v9 = v11;
    }
    while (v11 < (*(_QWORD *)(a1 + 56) - v3) >> 2);
  }
}

void sub_1ADB748AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56) - v5;
  if (v6)
  {
    v10 = 0;
    v11 = *(int *)(a1 + 8) / (unint64_t)(v6 >> 2);
    v12 = *(_QWORD *)(a4 + 32);
    do
    {
      v13 = *(_QWORD *)(a5 + 8) + 4 * (v10 * v11);
      v14 = *(_DWORD *)(a5 + 28);
      LODWORD(v15[2]) = v11;
      *(_QWORD *)((char *)&v15[2] + 4) = *(_QWORD *)(a5 + 20);
      HIDWORD(v15[3]) = v14 - v10 * v11;
      v15[0] = &unk_1E5D29D40;
      v15[1] = v13;
      v15[4] = v12;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v15, a4, 111, *(float *)(v5 + 4 * v10), 0.0);
      v15[0] = &unk_1E5D29D40;
      memset(&v15[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
      ++v10;
      v5 = *(_QWORD *)(a1 + 48);
    }
    while (v10 < (*(_QWORD *)(a1 + 56) - v5) >> 2);
  }
}

void sub_1ADB74A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  _QWORD v19[5];
  _QWORD v20[3];
  uint64_t v21;

  v8 = *(int *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(unsigned int *)(a4 + 16);
  v20[2] = 0;
  v21 = 0;
  v20[0] = &unk_1E5D341C8;
  v20[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v20, v12, 0);
  v21 = v11;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v13 = 0;
    v14 = v8 / ((v9 - v10) >> 2);
    do
    {
      v15 = a3 + v13 * v14;
      v16 = *(_QWORD *)(a2 + 8) + 4 * v15;
      v17 = *(_DWORD *)(a2 + 28) - v15;
      LODWORD(v19[2]) = 1;
      *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v19[3]) = v17;
      v19[0] = &unk_1E5D29D40;
      v19[1] = v16;
      v19[4] = v11;
      kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v20, (uint64_t)v19);
      if (v13)
        v18 = 1.0;
      else
        v18 = 0.0;
      kaldi::CuVectorBase<float>::AddVec(a4, (uint64_t)v20, *(float *)(*(_QWORD *)(a1 + 48) + 4 * v13), v18);
      v19[0] = &unk_1E5D29D40;
      memset(&v19[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
      ++v13;
    }
    while (v13 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  }
  v20[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v20);
}

void sub_1ADB74C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  void **v6;
  int v7;
  int v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  _QWORD v20[34];
  int v21[4];

  *(_QWORD *)v21 = 0;
  v6 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  kaldi::ExpectToken(a2, a3, "<NumComponents>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)v21);
  if (v21[0] < 1 || (v7 = *(_DWORD *)(a1 + 8), v7 % v21[0]))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v7 / v21[0] != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  v8 = 0;
  do
  {
    kaldi::ExpectToken(a2, a3, "<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)&v21[1]);
    v10 = *(char **)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)*v6;
      v13 = (v10 - (_BYTE *)*v6) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v16);
        v12 = *(char **)(a1 + 48);
        v10 = *(char **)(a1 + 56);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = v21[1];
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v10 = v21[1];
      v11 = v10 + 4;
    }
    *(_QWORD *)(a1 + 56) = v11;
    ++v8;
  }
  while (v8 < v21[0]);
  kaldi::ExpectToken(a2, a3, "</InterpolationComponent>");
}

char *kaldi::nnet1::InterpolationComponent::SetComponentWeights(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 48);
  if (result != (char *)a2)
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::HistoryStateSize(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  uint64_t v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = kaldi::nnet1::Nnet::HistoryStateSize(v1) + v3;
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t i;

  v4 = *(_QWORD *)(result + 184);
  for (i = *(_QWORD *)(result + 192); v4 != i; v4 += 376)
    result = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v4, a2, a3, a4);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 184);
  v2 = *(_QWORD *)(this + 192);
  while (v1 != v2)
  {
    this = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v1);
    v1 += 376;
  }
  return this;
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  kaldi::nnet1::Nnet *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v16[5];
  void *v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v5 = *(unsigned int *)(a1 + 96);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, v5, v6, 1, 0);
  v7 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  v8 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v7, &v17);
      v11 = v17;
      v10 = (void *)v18;
      if (v17)
      {
        *(_QWORD *)&v18 = v17;
        operator delete(v17);
      }
      if (v11 != v10)
      {
        v18 = 0u;
        v19 = 0u;
        v17 = &unk_1E5D34170;
        v20 = 0;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v7, (uint64_t)&v17, a3);
        v12 = *(_QWORD *)(a2 + 8) + 4 * v9;
        v13 = *(_DWORD *)(a2 + 28) - v9;
        v14 = *(_QWORD *)(a2 + 32);
        LODWORD(v16[2]) = DWORD2(v18);
        *(_QWORD *)((char *)&v16[2] + 4) = *(_QWORD *)(a2 + 20);
        HIDWORD(v16[3]) = v13;
        v16[4] = v14;
        v16[0] = &unk_1E5D29D40;
        v16[1] = v12;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v16, (uint64_t)&v17, 111);
        v16[0] = &unk_1E5D29D40;
        memset(&v16[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
        v9 += DWORD2(v18);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
      }
      v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v8);
  }
}

void sub_1ADB750CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  _QWORD v16[4];
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuVector<float>::Resize(a2, v7, 1);
  v8 = (kaldi::nnet1::Nnet *)a1[23];
  v9 = (kaldi::nnet1::Nnet *)a1[24];
  if (v8 != v9)
  {
    v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      v12 = v17;
      v11 = v18;
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      if (v12 != v11)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v17 = &unk_1E5D341C8;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v8, (uint64_t)&v17, a3, a4);
        v13 = *(_QWORD *)(a2 + 8) + 4 * v10;
        v16[0] = &unk_1E5D29D70;
        v16[1] = v13;
        v16[3] = *(_QWORD *)(a2 + 24);
        v16[2] = v19;
        kaldi::CuVectorBase<float>::CopyFromVec(v16, (uint64_t)&v17);
        v14 = v19;
        v17 = &unk_1E5D341C8;
        kaldi::CuVector<float>::Destroy((uint64_t)&v17);
        v10 += v14;
      }
      v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
}

void sub_1ADB75244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::Nnet *v6;
  kaldi::nnet1::Nnet *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  _QWORD *v15;
  void *v16[35];

  if (*(_DWORD *)(a2 + 16) != (*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the ParallelComponent has history size ", 39);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  v6 = (kaldi::nnet1::Nnet *)a1[23];
  v7 = (kaldi::nnet1::Nnet *)a1[24];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v6, v16);
      v9 = v16[0];
      v10 = v16[1];
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
      if (v9 != v10)
      {
        v11 = kaldi::nnet1::Nnet::HistoryStateSize(v6);
        v12 = (void *)(*(_QWORD *)(a2 + 8) + 4 * v8);
        v13 = *(_DWORD *)(a2 + 28) - v8;
        v14 = *(void **)(a2 + 32);
        LODWORD(v16[2]) = v11;
        *(void **)((char *)&v16[2] + 4) = *(void **)(a2 + 20);
        HIDWORD(v16[3]) = v13;
        v16[4] = v14;
        v16[0] = &unk_1E5D29D40;
        v16[1] = v12;
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v6, (uint64_t)v16, a3);
        v16[0] = &unk_1E5D29D40;
        v8 += v11;
        memset(&v16[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
      }
      v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
    }
    while (v6 != v7);
  }
}

void sub_1ADB753D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(a2 + 16) != (*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"the network has history size ", 29);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  v8 = (kaldi::nnet1::Nnet *)a1[23];
  v9 = (kaldi::nnet1::Nnet *)a1[24];
  if (v8 != v9)
  {
    v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      v11 = v17;
      v12 = (void *)v18;
      if (v17)
      {
        v18 = (uint64_t)v17;
        operator delete(v17);
      }
      if (v11 != v12)
      {
        v13 = kaldi::nnet1::Nnet::HistoryStateSize(v8);
        v14 = v13 + v10;
        v15 = *(_QWORD *)(a2 + 8) + 4 * v10;
        v17 = &unk_1E5D29D70;
        v18 = v15;
        v20 = *(_QWORD *)(a2 + 24);
        v19 = v13;
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v8, (uint64_t)&v17, a3, a4);
        v10 = v14;
      }
      v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
}

void kaldi::nnet1::ParallelComponent::SetHistoryOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  const void *v4;
  char *v5;
  __int128 v6;
  int v7;
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  void (**v10)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v11[31];
  void *v12;
  int v13;
  int v14;

  v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::ParallelComponent *))(*(_QWORD *)this + 120))(this);
  if (v5)
  {
    v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v11[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)v11 = v6;
    v10 = &off_1E5D305B8;
    v12 = &unk_1E5D305D8;
    v7 = *((_DWORD *)v5 + 13);
    v13 = *((_DWORD *)a2 + 2);
    v14 = v7;
    (*(void (**)(kaldi::nnet1::ParallelComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(_QWORD *)this + 104))(this, &v10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 2);
    v9 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
    v8 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
    while (v9 != v8)
    {
      kaldi::nnet1::Nnet::SetHistoryOptions(v9, a2, 1);
      v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v10);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
  }
}

void sub_1ADB75654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(result + 184);
  for (i = *(_QWORD *)(result + 192); v3 != i; v3 += 376)
    result = kaldi::nnet1::Nnet::SetInternalBoundary(v3, a2, a3);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  void (**v8)(kaldi::nnet1::NnetTrainOptions *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  kaldi::nnet1::Nnet *v13;
  kaldi::nnet1::Nnet *v14;
  _QWORD v16[34];

  if (*((_DWORD *)lpsrc + 8) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  *((_BYTE *)this + 178) = *((_BYTE *)lpsrc + 38);
  if (v4)
  {
    v5 = v4;
    v6 = operator new();
    v7 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)(v6 + 23) = *(_OWORD *)(v5 + 23);
    *(_OWORD *)(v6 + 8) = v7;
    v8 = &off_1E5D305B8;
    *(_QWORD *)v6 = &off_1E5D305B8;
    *(_QWORD *)(v6 + 40) = &unk_1E5D305D8;
    *(_QWORD *)(v6 + 48) = *((_QWORD *)v5 + 6);
    v9 = *(_OWORD *)(v5 + 23);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v5 + 8);
    *(_OWORD *)((char *)this + 71) = v9;
    *((_QWORD *)this + 12) = *((_QWORD *)v5 + 6);
  }
  else
  {
    v6 = operator new();
    v8 = &off_1E5D2D150;
    *(_QWORD *)v6 = &off_1E5D2D150;
    v10 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v6 + 8) = v10;
    v11 = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v6 + 23) = v11;
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *(_OWORD *)(v12 + 71) = v11;
    *(_OWORD *)(v12 + 56) = v10;
  }
  *(_BYTE *)(v6 + 37) = 0;
  v14 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v13 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v14 != v13)
  {
    do
    {
      kaldi::nnet1::Nnet::SetTrainOptions(v14, (const kaldi::nnet1::NnetTrainOptions *)v6, 1);
      v14 = (kaldi::nnet1::Nnet *)((char *)v14 + 376);
    }
    while (v14 != v13);
    v8 = *(void (***)(kaldi::nnet1::NnetTrainOptions *__hidden))v6;
  }
  return ((uint64_t (*)(uint64_t))v8[1])(v6);
}

void sub_1ADB75860(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1E5D32508;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1E5D2E4A0;
  *(_QWORD *)(v2 + 256) = &off_1E5D2D150;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14E58, (uint64_t)this);
  *(_QWORD *)v2 = &off_1E5D2D520;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1E5D2D7D8;
  *(_QWORD *)(v2 + 160) = &off_1E5D2D678;
  *(_QWORD *)(v2 + 168) = &unk_1E5D2D6A0;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADB759B0(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1E5D14E58);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1AF44D190](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

void kaldi::nnet1::ParallelComponent::InitData(kaldi::nnet1::ParallelComponent *this, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  BOOL v6;
  std::string::value_type **v8;
  std::string::value_type *v9;
  std::string::value_type *v10;
  std::string::value_type *v11;
  uint64_t v12;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  std::string::value_type **v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD **v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string::value_type *__s[2];
  std::string::size_type v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  std::string *v58;
  unint64_t v59;
  std::string *v60;
  std::string *v61;
  unint64_t v62;

  v60 = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v5 = a2 + 4;
  v54 = 0;
  v55 = 0;
  v56 = 0;
LABEL_2:
  if ((*((_BYTE *)v5 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v54);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
      if (HIBYTE(v56) != 17)
      {
        if (HIBYTE(v56) == 20)
        {
          v6 = v54 == (_QWORD *)0x4E64657473654E3CLL && v55 == 0x6E656C694674656ELL;
          if (v6 && v56 == 1046834529)
            goto LABEL_14;
        }
LABEL_105:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s, (uint64_t)"Unknown token ", 14);
        if (v56 >= 0)
          v47 = &v54;
        else
          v47 = (_QWORD **)v54;
        if (v56 >= 0)
          v48 = HIBYTE(v56);
        else
          v48 = v55;
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", typo in config?", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (NestedNnetFilename|NestedNnetProto)", 37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s);
      }
      v21 = (uint64_t *)&v54;
      goto LABEL_54;
    }
    if (v55 == 17)
    {
      v21 = v54;
LABEL_54:
      v22 = *v21;
      v23 = (_QWORD *)v21[1];
      v24 = *((unsigned __int8 *)v21 + 16);
      if (v22 != 0x4E64657473654E3CLL || v23 != (_QWORD *)0x6F746F725074656ELL || v24 != 62)
        goto LABEL_105;
      while (1)
      {
        if ((*((_BYTE *)v5 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
          goto LABEL_89;
        __s[0] = 0;
        __s[1] = 0;
        v53 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)__s);
        if (SHIBYTE(v53) < 0)
        {
          v28 = __s[1];
          if (__s[1] != (std::string::value_type *)18)
          {
            v34 = v61;
            if ((unint64_t)v61 < v62)
              goto LABEL_81;
            goto LABEL_83;
          }
          v27 = (std::string::value_type **)__s[0];
        }
        else
        {
          if (SHIBYTE(v53) != 18)
          {
            v34 = v61;
            if ((unint64_t)v61 < v62)
              goto LABEL_79;
            goto LABEL_83;
          }
          v27 = __s;
        }
        v29 = *v27;
        v30 = v27[1];
        v31 = *((unsigned __int16 *)v27 + 8);
        if (v29 == (std::string::value_type *)0x64657473654E2F3CLL
          && v30 == (std::string::value_type *)0x746F725074656E4ELL
          && v31 == 15983)
        {
          v37 = 0;
          if ((v53 & 0x8000000000000000) == 0)
            goto LABEL_85;
LABEL_88:
          operator delete(__s[0]);
          if ((v37 & 1) == 0)
            goto LABEL_89;
        }
        else
        {
          v34 = v61;
          if ((unint64_t)v61 < v62)
          {
            if (SHIBYTE(v53) < 0)
            {
              v28 = __s[1];
LABEL_81:
              std::string::__init_copy_ctor_external(v34, __s[0], (std::string::size_type)v28);
            }
            else
            {
LABEL_79:
              v35 = *(_OWORD *)__s;
              v34->__r_.__value_.__r.__words[2] = v53;
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
            }
            v36 = (uint64_t)&v34[1];
            goto LABEL_84;
          }
LABEL_83:
          v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, (__int128 *)__s);
LABEL_84:
          v61 = (std::string *)v36;
          v37 = 1;
          if ((v53 & 0x8000000000000000) != 0)
            goto LABEL_88;
LABEL_85:
          if ((v37 & 1) == 0)
            goto LABEL_89;
        }
      }
    }
    if (v55 != 20)
      goto LABEL_105;
    v19 = *v54 == 0x4E64657473654E3CLL && v54[1] == 0x6E656C694674656ELL;
    if (!v19 || *((_DWORD *)v54 + 4) != 1046834529)
      goto LABEL_105;
    while (1)
    {
LABEL_14:
      if ((*((_BYTE *)v5 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      {
LABEL_89:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        goto LABEL_2;
      }
      __s[0] = 0;
      __s[1] = 0;
      v53 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)__s);
      if (SHIBYTE(v53) < 0)
      {
        v9 = __s[1];
        if (__s[1] != (std::string::value_type *)21)
        {
          v15 = v58;
          if ((unint64_t)v58 < v59)
            goto LABEL_33;
          goto LABEL_35;
        }
        v8 = (std::string::value_type **)__s[0];
      }
      else
      {
        if (SHIBYTE(v53) != 21)
        {
          v15 = v58;
          if ((unint64_t)v58 < v59)
            goto LABEL_31;
          goto LABEL_35;
        }
        v8 = __s;
      }
      v10 = *v8;
      v11 = v8[1];
      v12 = *(uint64_t *)((char *)v8 + 13);
      if (v10 == (std::string::value_type *)0x64657473654E2F3CLL
        && v11 == (std::string::value_type *)0x656C694674656E4ELL
        && v12 == 0x3E656D616E656C69)
      {
        v18 = 0;
        if ((v53 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_37:
        operator delete(__s[0]);
        goto LABEL_38;
      }
      v15 = v58;
      if ((unint64_t)v58 < v59)
      {
        if (SHIBYTE(v53) < 0)
        {
          v9 = __s[1];
LABEL_33:
          std::string::__init_copy_ctor_external(v15, __s[0], (std::string::size_type)v9);
        }
        else
        {
LABEL_31:
          v16 = *(_OWORD *)__s;
          v15->__r_.__value_.__r.__words[2] = v53;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        v17 = (uint64_t)&v15[1];
        goto LABEL_36;
      }
LABEL_35:
      v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v57, (__int128 *)__s);
LABEL_36:
      v58 = (std::string *)v17;
      v18 = 1;
      if ((v53 & 0x8000000000000000) != 0)
        goto LABEL_37;
LABEL_38:
      if ((v18 & 1) == 0)
        goto LABEL_89;
    }
  }
  if (v58 != v57)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
      kaldi::nnet1::Nnet::Read((uint64_t)__s, (uint64_t)&v57[v38]);
      v40 = *((_QWORD *)this + 24);
      if (v40 >= *((_QWORD *)this + 25))
      {
        v41 = std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>((uint64_t *)this + 23, (const kaldi::nnet1::Nnet *)__s);
      }
      else
      {
        kaldi::nnet1::Nnet::Nnet(*((kaldi::nnet1::Nnet **)this + 24), (const kaldi::nnet1::Nnet *)__s);
        v41 = v40 + 376;
        *((_QWORD *)this + 24) = v40 + 376;
      }
      *((_QWORD *)this + 24) = v41;
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)__s);
      ++v39;
      ++v38;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3) > v39);
  }
  if (v61 != v60)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
      kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)__s, (uint64_t)&v60[v42], a3);
      v44 = *((_QWORD *)this + 24);
      if (v44 >= *((_QWORD *)this + 25))
      {
        v45 = std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>((uint64_t *)this + 23, (const kaldi::nnet1::Nnet *)__s);
      }
      else
      {
        kaldi::nnet1::Nnet::Nnet(*((kaldi::nnet1::Nnet **)this + 24), (const kaldi::nnet1::Nnet *)__s);
        v45 = v44 + 376;
        *((_QWORD *)this + 24) = v44 + 376;
      }
      *((_QWORD *)this + 24) = v45;
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)__s);
      ++v43;
      ++v42;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3) > v43);
  }
  kaldi::nnet1::ParallelComponent::CheckNetworkDimensions((uint64_t *)this);
  if (SHIBYTE(v56) < 0)
    operator delete(v54);
  __s[0] = (std::string::value_type *)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  __s[0] = (std::string::value_type *)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_1ADB75FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 128) = v15;
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v16 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1ADB75FB8()
{
  JUMPOUT(0x1ADB75FC0);
}

void sub_1ADB75FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 104) = v15;
  if (a15 < 0)
    operator delete(a10);
  JUMPOUT(0x1ADB75FF8);
}

void sub_1ADB75FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1ADB75FE0()
{
  JUMPOUT(0x1ADB75FE8);
}

uint64_t *kaldi::nnet1::ParallelComponent::ReadData(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t i;
  int v11;
  int v12;

  kaldi::ExpectToken(a2, a3, "<NestedNnetCount>");
  v12 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v12);
  std::vector<kaldi::nnet1::Nnet>::resize(a1 + 23, v12);
  if (v12 >= 1)
  {
    v8 = 0;
    for (i = 0; i < v12; ++i)
    {
      kaldi::ExpectToken(a2, a3, "<NestedNnet>");
      v11 = 0;
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v11);
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1[23] + v8), a2, a3, a4);
      v8 += 376;
    }
  }
  kaldi::ExpectToken(a2, a3, "</ParallelComponent>");
  return kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(a1);
}

_QWORD *kaldi::nnet1::ParallelComponent::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v8 = 0x51B3BEA3677D46CFLL * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3);
  kaldi::WriteToken(a2, a3, "<NestedNnetCount>");
  kaldi::WriteBasicType<int>(a2, a3);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 376 * v8;
    v11 = 1;
    do
    {
      kaldi::WriteToken(a2, a3, "<NestedNnet>");
      kaldi::WriteBasicType<int>(a2, a3);
      kaldi::nnet1::Nnet::Write((uint64_t *)(*(_QWORD *)(a1 + 184) + v9), a2, a3, a4);
      v9 += 376;
      ++v11;
    }
    while (v10 != v9);
  }
  return kaldi::WriteToken(a2, a3, "</ParallelComponent>");
}

uint64_t kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  uint64_t v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = kaldi::nnet1::Nnet::NumParams(v1) + v3;
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::CountZeroCorr(uint64_t this, int *a2, int *a3)
{
  kaldi::nnet1::Nnet *v3;
  kaldi::nnet1::Nnet *i;
  int v7;
  const void *Component;
  void *v9;
  uint64_t v10;

  *a2 = 0;
  *a3 = 0;
  v3 = *(kaldi::nnet1::Nnet **)(this + 184);
  for (i = *(kaldi::nnet1::Nnet **)(this + 192); v3 != i; v3 = (kaldi::nnet1::Nnet *)((char *)v3 + 376))
  {
    if ((int)((*((_QWORD *)v3 + 1) - *(_QWORD *)v3) >> 3) >= 1)
    {
      v7 = 0;
      do
      {
        this = kaldi::nnet1::Nnet::IsComponentFrozen(v3, v7);
        if ((this & 1) == 0)
        {
          Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v3, v7);
          this = (*(uint64_t (**)(const void *))(*(_QWORD *)Component + 32))(Component);
          if ((_DWORD)this)
          {
            v10 = 0;
            this = (*(uint64_t (**)(void *, char *, uint64_t *))(*(_QWORD *)v9 + 40))(v9, (char *)&v10 + 4, &v10);
            *a2 += HIDWORD(v10);
            *a3 += v10;
          }
        }
        ++v7;
      }
      while (v7 < (int)((*((_QWORD *)v3 + 1) - *(_QWORD *)v3) >> 3));
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet *v4;
  kaldi::nnet1::Nnet *i;
  int v9;
  const void *Component;
  void *v11;

  v4 = *(kaldi::nnet1::Nnet **)(result + 184);
  for (i = *(kaldi::nnet1::Nnet **)(result + 192); v4 != i; v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376))
  {
    if ((int)((*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 3) >= 1)
    {
      v9 = 0;
      do
      {
        Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v4, v9);
        result = (*(uint64_t (**)(const void *))(*(_QWORD *)Component + 32))(Component);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2, a3, a4);
        }
        ++v9;
      }
      while (v9 < (int)((*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 3));
    }
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(uint64_t this, uint64_t a2)
{
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  char v5;
  float v6;
  int v7;
  uint64_t Component;
  float v9;
  _QWORD *v10;
  _QWORD v11[34];

  v2 = *(kaldi::nnet1::Nnet **)(this + 184);
  v3 = *(kaldi::nnet1::Nnet **)(this + 192);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = NAN;
    while ((int)((*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3) < 1)
    {
      v9 = v6;
LABEL_15:
      v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
      v6 = v9;
      if (v2 == v3)
        return this;
    }
    v7 = 0;
    while (1)
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v2, v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 32))(Component);
      if ((_DWORD)this)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Component + 200))(Component, a2);
        if ((v5 & 1) == 0)
        {
          v5 = 1;
          goto LABEL_12;
        }
        if (v6 != v9)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Two different learning rates: ", 30);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
        }
        v5 = 1;
      }
      v9 = v6;
LABEL_12:
      ++v7;
      v6 = v9;
      if (v7 >= (int)((*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3))
        goto LABEL_15;
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  kaldi::nnet1::Nnet *v5;
  kaldi::nnet1::Nnet *v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = (kaldi::nnet1::Nnet *)a1[23];
  v6 = (kaldi::nnet1::Nnet *)a1[24];
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      kaldi::nnet1::Nnet::GetParams(v5, &v13);
      v11 = 0;
      v12 = 0;
      v10 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v11) = v14;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, (const void **)&v13);
      v8 = v14;
      kaldi::Vector<float>::Destroy((uint64_t)&v13);
      v7 += v8;
      v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
    }
    while (v5 != v6);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
}

void sub_1ADB766D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetParams(_QWORD *a1, _QWORD *a2)
{
  kaldi::nnet1::Nnet *v4;
  kaldi::nnet1::Nnet *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD *))(*a1 + 176))(a1);
  v4 = (kaldi::nnet1::Nnet *)a1[23];
  v5 = (kaldi::nnet1::Nnet *)a1[24];
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = kaldi::nnet1::Nnet::NumParams(v4);
      v11 = 0;
      v12 = 0;
      v8 = v7 + v6;
      v10 = *a2 + 4 * v6;
      LODWORD(v11) = v7;
      kaldi::nnet1::Nnet::SetParams(v4, &v10);
      v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376);
      v6 = v8;
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
}

float kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  float v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  v3 = 0.0;
  while (v1 != v2)
  {
    v3 = v3 + kaldi::nnet1::Nnet::SumParams(v1);
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_network #", 16);
      ++v5;
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v4));
      if ((v17 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = v17;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v12 = (char)v11;
  v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    v14 = (std::string::size_type)a2;
  }
  else
  {
    v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1ADB769B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_gradient #", 17);
      ++v5;
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v4), __p);
      if ((v17 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = v17;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v12 = (char)v11;
  v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    v14 = (std::string::size_type)a2;
  }
  else
  {
    v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1ADB76BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_propagate #", 18);
      ++v3;
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoPropagate((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v7 = v11;
      else
        v7 = (uint64_t)__p[1];
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADB76D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_backpropagate #", 22);
      ++v3;
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoBackPropagate((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v7 = v11;
      else
        v7 = (uint64_t)__p[1];
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADB76F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  kaldi::nnet1::Nnet *v4;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v10;
  __int32 v11;
  uint64_t v12;
  __int32 v13;
  int32x2_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  kaldi::nnet1::Nnet *v19;
  int32x2_t v20[5];
  char v21;
  _QWORD v22[5];
  int32x2_t v23[6];

  v4 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  v19 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v4 != v19)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(int32x2_t *)(a3 + 32);
    do
    {
      v11 = kaldi::nnet1::Nnet::InputDim(v4);
      v12 = *(_QWORD *)(a2 + 8) + 4 * v8;
      v13 = *(_DWORD *)(a2 + 28) - v8;
      v14 = *(int32x2_t *)(a2 + 32);
      v23[2].i32[0] = v11;
      *(int32x2_t *)((char *)&v23[2] + 4) = *(int32x2_t *)(a2 + 20);
      v23[3].i32[1] = v13;
      v23[4] = v14;
      v23[0] = (int32x2_t)&unk_1E5D29D40;
      v23[1] = (int32x2_t)v12;
      v15 = kaldi::nnet1::Nnet::OutputDim(v4);
      v16 = *(_QWORD *)(a3 + 8) + 4 * v9;
      v17 = *(_DWORD *)(a3 + 28) - v9;
      LODWORD(v22[2]) = v15;
      *(_QWORD *)((char *)&v22[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v22[3]) = v17;
      v22[0] = &unk_1E5D29D40;
      v22[1] = v16;
      v23[4] = v10;
      v22[4] = v10;
      memset(&v20[1], 0, 24);
      v21 = 0;
      v20[0] = (int32x2_t)&unk_1E5D34170;
      v20[4] = v10;
      if (*(_BYTE *)(a1 + 178))
        kaldi::nnet1::Nnet::Feedforward((uint64_t *)v4, (uint64_t)v23, v20, -1, 0);
      else
        kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)v4, v23, v20, a4);
      if (*(_BYTE *)(a1 + 176))
        v8 += kaldi::nnet1::Nnet::InputDim(v4);
      if (*(_BYTE *)(a1 + 177))
      {
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)v22, (uint64_t)v20, 111, 1.0, 1.0);
      }
      else
      {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v22, (uint64_t)v20, 111);
        v9 += kaldi::nnet1::Nnet::OutputDim(v4);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
      v22[0] = &unk_1E5D29D40;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v23[0] = (int32x2_t)&unk_1E5D29D40;
      memset(&v23[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
      v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376);
    }
    while (v4 != v19);
  }
}

void sub_1ADB771A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  a25 = &unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a25);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int32x2_t *v6;
  kaldi::nnet1::Nnet *v7;
  unsigned int v11;
  unsigned int v12;
  int32x2_t v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  kaldi::nnet1::Nnet *v20;
  int32x2_t v22[5];
  char v23;
  _QWORD v24[5];
  int32x2_t v25[6];

  if (a5)
    v6 = (int32x2_t *)a5;
  else
    v6 = (int32x2_t *)a4;
  v7 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  v20 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v7 != v20)
  {
    v11 = 0;
    v12 = 0;
    v13 = v6[4];
    do
    {
      v14 = kaldi::nnet1::Nnet::OutputDim(v7);
      v15 = *(_QWORD *)(a4 + 8) + 4 * v12;
      v16 = *(_DWORD *)(a4 + 28) - v12;
      v25[2].i32[0] = v14;
      *(int32x2_t *)((char *)&v25[2] + 4) = *(int32x2_t *)(a4 + 20);
      v25[3].i32[1] = v16;
      v25[0] = (int32x2_t)&unk_1E5D29D40;
      v25[1] = (int32x2_t)v15;
      v25[4] = v13;
      if (a5)
      {
        v17 = kaldi::nnet1::Nnet::InputDim(v7);
        v18 = *(_QWORD *)(a5 + 8) + 4 * v11;
        v19 = *(_DWORD *)(a5 + 28) - v11;
        LODWORD(v24[2]) = v17;
        *(_QWORD *)((char *)&v24[2] + 4) = *(_QWORD *)(a5 + 20);
        HIDWORD(v24[3]) = v19;
        v24[0] = &unk_1E5D29D40;
        v24[1] = v18;
        v24[4] = v13;
        memset(&v22[1], 0, 24);
        v23 = 0;
        v22[0] = (int32x2_t)&unk_1E5D34170;
        v22[4] = v13;
        kaldi::nnet1::Nnet::Backpropagate((int32x2_t *)v7, v25, v22, a6);
        if (*(_BYTE *)(a1 + 176))
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v24, (uint64_t)v22, 111);
        else
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v24, (uint64_t)v22, 111, 1.0, 1.0);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
        v24[0] = &unk_1E5D29D40;
        memset(&v24[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
      }
      else
      {
        kaldi::nnet1::Nnet::Backpropagate((int32x2_t *)v7, v25, 0, a6);
      }
      if (*(_BYTE *)(a1 + 176))
        v11 += kaldi::nnet1::Nnet::InputDim(v7);
      if (!*(_BYTE *)(a1 + 177))
        v12 += kaldi::nnet1::Nnet::OutputDim(v7);
      v25[0] = (int32x2_t)&unk_1E5D29D40;
      memset(&v25[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
      v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v20);
  }
}

void sub_1ADB77410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 128) = v12 + 16;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v13 - 128));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ParallelComponent::SetGradientNormalization(_QWORD *result, uint64_t a2, float a3)
{
  _QWORD *v3;
  _QWORD *v6;

  v3 = (_QWORD *)result[23];
  if (v3 != (_QWORD *)result[24])
  {
    v6 = result;
    do
    {
      result = kaldi::nnet1::Nnet::SetGradientNormalization(v3, a2, 0, 0, a3);
      v3 += 47;
    }
    while (v3 != (_QWORD *)v6[24]);
  }
  return result;
}

void kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  const void ***i;

  for (i = (const void ***)*((_QWORD *)this + 23); i != *((const void ****)this + 24); i += 47)
    kaldi::nnet1::Nnet::Update(i, a2, a3);
}

uint64_t kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  const void ***v5;
  const void ***v6;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1E5D32508;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1E5D2E4A0;
  *(_QWORD *)(v2 + 256) = &off_1E5D2D150;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14E58, (uint64_t)this);
  *(_QWORD *)v2 = &off_1E5D2D520;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1E5D2D7D8;
  *(_QWORD *)(v2 + 160) = &off_1E5D2D678;
  *(_QWORD *)(v2 + 168) = &unk_1E5D2D6A0;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  v5 = *(const void ****)(v2 + 184);
  v6 = *(const void ****)(v2 + 192);
  while (v5 != v6)
  {
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(v5);
    v5 += 47;
  }
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADB77680(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1E5D14E58);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1AF44D190](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  const void ***v5;
  const void ***v6;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1E5D32508;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1E5D2E4A0;
  *(_QWORD *)(v2 + 256) = &off_1E5D2D150;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14E58, (uint64_t)this);
  *(_QWORD *)v2 = &off_1E5D2D520;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1E5D2D7D8;
  *(_QWORD *)(v2 + 160) = &off_1E5D2D678;
  *(_QWORD *)(v2 + 168) = &unk_1E5D2D6A0;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  v5 = *(const void ****)(v2 + 184);
  v6 = *(const void ****)(v2 + 192);
  while (v5 != v6)
  {
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(v5);
    v5 += 47;
  }
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADB7781C(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1E5D14E58);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1AF44D190](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::CopyQuantized8Bit((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::CopyQuantized16Bit((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::Copy((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::CountZeroCorr(kaldi::nnet1::ParallelComponent *this, int *a2, int *a3)
{
  return kaldi::nnet1::ParallelComponent::CountZeroCorr((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 56), a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::Info((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::InfoGradient((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 96)));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoBackPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                              + *(_QWORD *)(*(_QWORD *)this - 104)));
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::ParallelComponent::InitData((kaldi::nnet1::ParallelComponent *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

_QWORD *`virtual thunk to'kaldi::nnet1::ParallelComponent::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  kaldi::nnet1::ParallelComponent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  kaldi::nnet1::ParallelComponent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t *`virtual thunk to'kaldi::nnet1::ParallelComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  char *v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 23);
  v3 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 24);
  if (v2 == v3)
    return 0;
  LODWORD(v4) = 0;
  do
  {
    v4 = kaldi::nnet1::Nnet::NumParams(v2) + v4;
    v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  while (v2 != v3);
  return v4;
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::ParallelComponent::GetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::SetParams(_QWORD *a1, _QWORD *a2)
{
  return kaldi::nnet1::ParallelComponent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(kaldi::nnet1::ParallelComponent *this, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 216), a2);
}

float `virtual thunk to'kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  char *v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  float v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 23);
  v3 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 24);
  v4 = 0.0;
  while (v2 != v3)
  {
    v4 = v4 + kaldi::nnet1::Nnet::SumParams(v2);
    v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  return v4;
}

_QWORD *`virtual thunk to'kaldi::nnet1::ParallelComponent::SetGradientNormalization(_QWORD *result, uint64_t a2, float a3)
{
  char *v3;
  _QWORD *i;

  v3 = (char *)result + *(_QWORD *)(*result - 256);
  for (i = (_QWORD *)*((_QWORD *)v3 + 23); i != *((_QWORD **)v3 + 24); i += 47)
    result = kaldi::nnet1::Nnet::SetGradientNormalization(i, a2, 0, 0, a3);
  return result;
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  char *v3;
  const void ***i;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 272);
  for (i = (const void ***)*((_QWORD *)v3 + 23); i != *((const void ****)v3 + 24); i += 47)
    kaldi::nnet1::Nnet::Update(i, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::ParallelComponent::SetTrainOptions((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::Copy(kaldi::nnet1::SentenceAveragingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)(v2 + 48) = &off_1E5D2D150;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)((char *)this + 71);
  *(_QWORD *)v2 = &off_1E5D30778;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(v2 + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  *(_DWORD *)(v2 + 464) = *((_DWORD *)this + 116);
  return v2;
}

void sub_1ADB77BC0(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  MEMORY[0x1AF44D190](v1, 0x10B1C4008F8D91BLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetType(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return 2049;
}

void kaldi::nnet1::SentenceAveragingComponent::Info(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_network {\n");
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADB77CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InfoGradient(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_gradient {\n");
  kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), __p);
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADB77DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  float *v5;
  BOOL v6;
  void **v8;
  BOOL v9;
  BOOL v10;
  uint64_t *v13;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v21;
  _QWORD *v22;
  _QWORD **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v28[34];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v4 = a2 + 4;
  v5 = (float *)(a1 + 464);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  while ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v29);
    if (SHIBYTE(v31) < 0)
    {
      if (v30 != 17)
      {
        if (v30 != 20
          || (*v29 == 0x4E64657473654E3CLL ? (v9 = v29[1] == 0x6E656C694674656ELL) : (v9 = 0),
              v9 ? (v10 = *((unsigned int *)v29 + 4) == 1046834529) : (v10 = 0),
              !v10))
        {
LABEL_69:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
          if (v31 >= 0)
            v23 = &v29;
          else
            v23 = (_QWORD **)v29;
          if (v31 >= 0)
            v24 = HIBYTE(v31);
          else
            v24 = v30;
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Typo in config?", 16);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
        }
        goto LABEL_14;
      }
      if (*v29 == 0x4E64657473654E3CLL && v29[1] == 0x6F746F725074656ELL && *((_BYTE *)v29 + 16) == 62)
      {
LABEL_50:
        v8 = &v32;
        goto LABEL_51;
      }
      v13 = v29;
    }
    else
    {
      if (HIBYTE(v31) != 17)
      {
        if (HIBYTE(v31) != 20)
          goto LABEL_69;
        v6 = v29 == (_QWORD *)0x4E64657473654E3CLL && v30 == 0x6E656C694674656ELL;
        if (!v6 || v31 != 1046834529)
          goto LABEL_69;
LABEL_14:
        v8 = &v35;
LABEL_51:
        kaldi::ReadToken(a2, 0, (uint64_t)v8);
        goto LABEL_52;
      }
      if (v29 == (_QWORD *)0x4E64657473654E3CLL && v30 == 0x6F746F725074656ELL && v31 == 62)
        goto LABEL_50;
      v13 = (uint64_t *)&v29;
    }
    v16 = *v13;
    v17 = (_QWORD *)v13[1];
    v18 = *((unsigned __int8 *)v13 + 16);
    if (v16 != 0x61526E7261654C3CLL || v17 != (_QWORD *)0x726F746361466574 || v18 != 62)
      goto LABEL_69;
    kaldi::ReadBasicType<float>(a2, 0, v5);
LABEL_52:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v21 = HIBYTE(v34);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (!HIBYTE(v37))
      goto LABEL_55;
LABEL_59:
    kaldi::nnet1::Nnet::Read(a1 + 88, (uint64_t)&v35);
    v21 = HIBYTE(v34);
    if (v34 < 0)
      goto LABEL_60;
LABEL_56:
    if (!v21)
      goto LABEL_62;
LABEL_61:
    kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)(a1 + 88), (uint64_t)&v32, a3);
    goto LABEL_62;
  }
  if (v36)
    goto LABEL_59;
LABEL_55:
  if ((v34 & 0x8000000000000000) == 0)
    goto LABEL_56;
LABEL_60:
  if (v33)
    goto LABEL_61;
LABEL_62:
  kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 88));
  kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88));
  if (SHIBYTE(v31) < 0)
    operator delete(v29);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
}

void sub_1ADB78148(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::SentenceAveragingComponent::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Nnet::Write((uint64_t *)(a1 + 88), a2, a3, a4);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::PropagateFnc(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet *v6;
  __int32 v7;
  uint64_t v8;
  int v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v18;
  _QWORD v19[4];
  _QWORD v20[3];
  uint64_t v21;
  int32x2_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v23 = 0;
  v24 = 0;
  v22[0] = (int32x2_t)&unk_1E5D34170;
  v22[1] = 0;
  v26 = 0;
  v25 = *(_QWORD *)(a3 + 32);
  v6 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 88), a2, v22, a4);
  v7 = a2[2].i32[0];
  v8 = kaldi::nnet1::Nnet::OutputDim(v6);
  LODWORD(v6) = v8;
  v9 = HIDWORD(v23);
  v20[0] = &unk_1E5D341C8;
  v20[1] = 0;
  v20[2] = 0;
  v21 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v20, v8, 0);
  v21 = *(_QWORD *)(a3 + 32);
  v10 = 1.0 / (double)v9;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v20, (uint64_t)v22, v10, 0.0);
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 28);
  v13 = *(_QWORD *)(a3 + 32);
  LODWORD(v19[1]) = (_DWORD)v6;
  *(_QWORD *)((char *)&v19[1] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v19[2]) = v12;
  v19[3] = v13;
  v18 = &unk_1E5D29D40;
  v19[0] = v11;
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v18, (uint64_t)v20, 1.0, 0.0);
  v18 = &unk_1E5D29D40;
  memset(v19, 0, sizeof(v19));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v18);
  v14 = *(_QWORD *)(a3 + 8) + 4 * (int)v6;
  v15 = *(_DWORD *)(a3 + 28) - (_DWORD)v6;
  v16 = *(_QWORD *)(a3 + 32);
  LODWORD(v19[1]) = v7;
  *(_QWORD *)((char *)&v19[1] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v19[2]) = v15;
  v19[3] = v16;
  v18 = &unk_1E5D29D40;
  v19[0] = v14;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v18, (uint64_t)a2, 111);
  v18 = &unk_1E5D29D40;
  memset(v19, 0, sizeof(v19));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v18);
  v20[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v20);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
}

void sub_1ADB78338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v12[5];

  if (a5)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88));
    v9 = *(_QWORD *)(a4 + 8) + 4 * v8;
    v10 = *(_DWORD *)(a4 + 28) - v8;
    v11 = *(_QWORD *)(a4 + 32);
    LODWORD(v12[2]) = v7;
    *(_QWORD *)((char *)&v12[2] + 4) = *(_QWORD *)(a4 + 20);
    HIDWORD(v12[3]) = v10;
    v12[4] = v11;
    v12[0] = &unk_1E5D29D40;
    v12[1] = v9;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, (uint64_t)v12, 111);
    v12[0] = &unk_1E5D29D40;
    memset(&v12[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  }
}

void sub_1ADB7843C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  va_list va;

  va_start(va, a2);
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet *v4;

  v4 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 88), a2, a3, a4);
  kaldi::nnet1::Nnet::InputDim(v4);
  return kaldi::nnet1::Nnet::OutputDim(v4);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::NumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::NumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetParams(uint64_t a1, void **a2)
{
  kaldi::nnet1::Nnet *v3;
  uint64_t v4;

  v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  return kaldi::nnet1::Nnet::GetParams(v3, a2);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::SetParams(uint64_t a1, _QWORD *a2)
{
  kaldi::nnet1::Nnet *v3;

  v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return kaldi::nnet1::Nnet::SetParams(v3, a2);
}

float kaldi::nnet1::SentenceAveragingComponent::SumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::SumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void kaldi::nnet1::SentenceAveragingComponent::AccumGradients(int32x2_t *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5)
{
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  __int32 v12;
  int32x2_t v13;
  float v14;
  int32x2_t v15[6];
  _QWORD v16[4];

  v8 = a1 + 11;
  v9 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)&a1[11]);
  v10 = a3[2].u32[1];
  v16[0] = &unk_1E5D341C8;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = a4;
  kaldi::CuVector<float>::Resize((uint64_t)v16, v9, 1);
  v11 = a3[1];
  v12 = a3[3].i32[1];
  v13 = a3[4];
  v15[2].i32[0] = v9;
  *(int32x2_t *)((char *)&v15[2] + 4) = *(int32x2_t *)((char *)a3 + 20);
  v15[3].i32[1] = v12;
  v15[4] = v13;
  v15[0] = (int32x2_t)&unk_1E5D29D40;
  v15[1] = v11;
  v14 = 1.0 / (double)(int)v10;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v16, (uint64_t)v15, v14, 0.0);
  v15[0] = (int32x2_t)&unk_1E5D29D40;
  memset(&v15[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
  kaldi::CuMatrix<float>::CuMatrix(v15, v10, v9, 1, a4, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v15, (uint64_t)v16, 1.0, 0.0);
  kaldi::nnet1::Nnet::Backpropagate(v8, v15, 0, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  v16[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v16);
}

void sub_1ADB7865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::UpdateWeights(const void ***this, void *a2, uint64_t a3)
{
  kaldi::nnet1::Nnet::Update(this + 11, a2, a3);
}

void kaldi::nnet1::SentenceAveragingComponent::SetTrainOptions(kaldi::nnet1::SentenceAveragingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  void (**v2)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v3[8];

  v2 = &off_1E5D2D150;
  *(_OWORD *)v3 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)&v3[3] + 3) = *(_OWORD *)((char *)a2 + 23);
  v3[0] = *((float *)this + 116) * v3[0];
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 48), 1);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v2);
}

void sub_1ADB78718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::Copy(kaldi::nnet1::CompressedWordTransComponent *this)
{
  kaldi::nnet1::CompressedWordTransComponent *v2;

  v2 = (kaldi::nnet1::CompressedWordTransComponent *)operator new();
  kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(v2, *((unsigned int *)this + 2), *((_DWORD *)this + 3));
  kaldi::nnet1::CompressedWordTransComponent::SetVecTable(v2, (const void **)this + 10);
  return v2;
}

void sub_1ADB7877C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10C1C4058E986FFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::GetType(kaldi::nnet1::CompressedWordTransComponent *this)
{
  return 1040;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::Info(kaldi::nnet1::CompressedWordTransComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordTransComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordTrans table", 27);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v5);
}

void sub_1ADB7887C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 80), a2, a3, a4);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[48];

  kaldi::CuMatrix<float>::CuMatrix(v6, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v6, a1 + 48, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  kaldi::CuMatrixBase<float>::SummarizeVec(a3, (uint64_t *)(a1 + 80), (uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

void sub_1ADB78900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::CompressedWordTransComponent::ReadData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  float *v12;
  int64x2_t v13;
  int64x2_t v14;
  int32x2_t v15;

  kaldi::CompressedMatrix::Read(a1 + 80, a2, a3, a4);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 + 8);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (int)v5 / v6;
  *(_DWORD *)(a1 + 96) = v7;
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = v6;
    v10 = (v6 + 1) & 0x1FFFFFFFELL;
    v11 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    v12 = (float *)(*(_QWORD *)(a1 + 56) + 4);
    v13 = (int64x2_t)xmmword_1AE140A90;
    v14 = vdupq_n_s64(2uLL);
    do
    {
      v15 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v13));
      if ((v15.i8[0] & 1) != 0)
        *(v12 - 1) = (float)v8;
      if ((v15.i8[4] & 1) != 0)
        *v12 = (float)(v7 + v8);
      v13 = vaddq_s64(v13, v14);
      v12 += 2;
      v8 += 2 * v7;
      v10 -= 2;
    }
    while (v10);
  }
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Copy(kaldi::nnet1::CompressedWordVecComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D305F8;
  kaldi::CompressedMatrix::CompressedMatrix(v2 + 48, (const void **)this + 6);
  return v2;
}

void sub_1ADB78A5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1AF44D190](v1, 0x10C1C400D8AAF98);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::GetType(kaldi::nnet1::CompressedWordVecComponent *this)
{
  return 271;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Info(kaldi::nnet1::CompressedWordVecComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordVecComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordVec table", 25);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v5);
}

void sub_1ADB78B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 48), a2, a3, a4);
}

void kaldi::nnet1::CompressedWordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  kaldi::CuMatrixBase<float>::ConcatenateVec(a3, (uint64_t *)(a1 + 48), a2, a4, a5, a6, a7, a8, a9);
}

void kaldi::nnet1::CompressedWordVecComponent::ReadData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  kaldi::CompressedMatrix::Read(a1 + 48, a2, a3, a4);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::Copy(kaldi::nnet1::SharedNceComponent *this)
{
  kaldi::nnet1::SharedNceComponent *v2;

  v2 = (kaldi::nnet1::SharedNceComponent *)operator new();
  kaldi::nnet1::SharedNceComponent::SharedNceComponent(v2, this);
  return v2;
}

void sub_1ADB78BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40AEE11304);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::GetType(kaldi::nnet1::SharedNceComponent *this)
{
  return 284;
}

uint64_t kaldi::nnet1::SharedNceComponent::Info(kaldi::nnet1::SharedNceComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void *v12[2];
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::SharedNceComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v14, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v13 & 0x80u) == 0)
    v3 = v12;
  else
    v3 = (void **)v12[0];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (uint64_t)v12[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 136);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADB78D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::InfoGradient(kaldi::nnet1::SharedNceComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n  linearity_grad", 17);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 216);
  if ((v15 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (uint64_t)v14[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", lr-coef ", 10);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 312);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (uint64_t)__p[1];
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", bias-lr-coef ", 15);
  std::ostream::operator<<();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if ((char)v15 < 0)
    operator delete(v14[0]);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v18);
}

void sub_1ADB78F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void **v6;
  void *v8;
  BOOL v12;
  float *v13;
  BOOL v15;
  BOOL v21;
  BOOL v25;
  BOOL v27;
  void *v31;
  int v32;
  BOOL v33;
  std::string *v34;
  int inited;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  int32x2_t *v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  void **v59[2];
  int v60;
  _QWORD v61[2];
  uint64_t v62;
  void *__p;
  void *v64;
  void *v65[3];
  int v66;
  std::string v67;
  std::string v68;
  int v69;
  float v70;
  int v71;

  v70 = 2.0;
  v71 = -1073741824;
  v69 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v68);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[52].u32[0], &v67);
  v66 = -1;
  memset(v65, 0, sizeof(v65));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_135;
    kaldi::ReadToken(a2, 0, (uint64_t)v65);
    if ((SHIBYTE(v65[2]) & 0x80000000) == 0)
      break;
    v8 = v65[1];
    if (v65[1] == (void *)10)
    {
      if (*(_QWORD *)v65[0] == 0x61654D736169423CLL && *((_WORD *)v65[0] + 4) == 15982)
      {
LABEL_70:
        v13 = (float *)&v71;
        goto LABEL_129;
      }
      v8 = v65[1];
    }
    else if (v65[1] == (void *)13
           && *(_QWORD *)v65[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v65[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_88:
      v13 = (float *)&v69;
      goto LABEL_129;
    }
    if (v8 == (void *)11)
    {
      if (*(_QWORD *)v65[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v65[0] + 3) == 0x3E65676E61527361)
      {
LABEL_82:
        v13 = &v70;
        goto LABEL_129;
      }
      v8 = v65[1];
    }
    if (v8 == (void *)15)
    {
      v12 = *(_QWORD *)v65[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v65[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)&a1[51];
      if (v12)
        goto LABEL_129;
      v8 = v65[1];
    }
    if (v8 == (void *)19)
    {
      v15 = *(_QWORD *)v65[0] == 0x61654C736169423CLL
         && *((_QWORD *)v65[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v65[0] + 11) == 0x3E66656F43657461;
      v13 = (float *)&a1[51] + 1;
      if (v15)
        goto LABEL_129;
      v8 = v65[1];
    }
    if (v8 == (void *)12)
    {
      if (*(_QWORD *)v65[0] == 0x536D6F646E61523CLL && *((_DWORD *)v65[0] + 2) == 1046766949)
        goto LABEL_104;
      v8 = v65[1];
    }
    if (v8 == (void *)19)
    {
      if (*(_QWORD *)v65[0] == 0x61725474696E493CLL
        && *((_QWORD *)v65[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v65[0] + 11) == 0x3E657079546D726FLL)
      {
        goto LABEL_132;
      }
      v8 = v65[1];
    }
    if (v8 != (void *)18)
      goto LABEL_68;
    if (*(_QWORD *)v65[0] != 0x6E6569646172473CLL
      || *((_QWORD *)v65[0] + 1) != 0x7079546D726F4E74
      || *((_WORD *)v65[0] + 8) != 15973)
    {
      v8 = v65[1];
LABEL_68:
      if (v8 != (void *)9)
        goto LABEL_134;
      v6 = (void **)v65[0];
      goto LABEL_124;
    }
LABEL_131:
    v34 = &v67;
LABEL_133:
    kaldi::ReadToken(a2, 0, (uint64_t)v34);
LABEL_130:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v6 = v65;
  switch(HIBYTE(v65[2]))
  {
    case 9:
      goto LABEL_124;
    case 0xA:
      if (v65[0] == (void *)0x61654D736169423CLL && LOWORD(v65[1]) == 15982)
        goto LABEL_70;
      goto LABEL_122;
    case 0xB:
      if (v65[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v65 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_82;
      goto LABEL_122;
    case 0xC:
      goto LABEL_99;
    case 0xD:
      if (v65[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v65 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_134;
      goto LABEL_88;
    case 0xF:
      v21 = v65[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v65 + 7) == (void *)0x3E66656F43657461;
      v13 = (float *)&a1[51];
      if (v21)
        goto LABEL_129;
      goto LABEL_97;
    case 0x12:
      goto LABEL_115;
    case 0x13:
      v25 = v65[0] == (void *)0x61654C736169423CLL
         && v65[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v65[1] + 3) == (void *)0x3E66656F43657461;
      v13 = (float *)&a1[51] + 1;
      if (v25)
        goto LABEL_129;
      if (HIBYTE(v65[2]) <= 0x11u)
      {
LABEL_97:
        if (HIBYTE(v65[2]) != 9)
        {
          if (HIBYTE(v65[2]) != 12)
            goto LABEL_134;
LABEL_99:
          if (v65[0] == (void *)0x536D6F646E61523CLL && LODWORD(v65[1]) == 1046766949)
          {
LABEL_104:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v66);
            goto LABEL_130;
          }
LABEL_122:
          if (HIBYTE(v65[2]) != 9)
            goto LABEL_134;
        }
        v6 = v65;
LABEL_124:
        v31 = *v6;
        v32 = *((unsigned __int8 *)v6 + 8);
        v33 = v31 == (void *)0x6461724778614D3CLL && v32 == 62;
        v13 = (float *)&a1[52] + 1;
        if (!v33)
          goto LABEL_134;
LABEL_129:
        kaldi::ReadBasicType<float>(a2, 0, v13);
        goto LABEL_130;
      }
      if (HIBYTE(v65[2]) == 18)
      {
LABEL_115:
        if (v65[0] != (void *)0x6E6569646172473CLL || v65[1] != (void *)0x7079546D726F4E74 || LOWORD(v65[2]) != 15973)
          goto LABEL_122;
        goto LABEL_131;
      }
      if (HIBYTE(v65[2]) == 19)
      {
        v27 = v65[0] == (void *)0x61725474696E493CLL && v65[1] == (void *)0x79546D726F66736ELL;
        if (v27 && *(void **)((char *)&v65[1] + 3) == (void *)0x3E657079546D726FLL)
        {
LABEL_132:
          v34 = &v68;
          goto LABEL_133;
        }
      }
LABEL_134:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v65, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v65[2]) >= 0)
          v52 = v65;
        else
          v52 = (void **)v65[0];
        if (SHIBYTE(v65[2]) >= 0)
          v53 = HIBYTE(v65[2]);
        else
          v53 = (uint64_t)v65[1];
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 119);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
      }
LABEL_135:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v68);
      a1[52].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v67);
      if (v66 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v66);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)v59, a1[1].u32[1], a1[1].u32[0], 0, 0);
      v36 = a1[1].i32[1];
      if (v36 < 1)
        goto LABEL_153;
      v37 = 0;
      LODWORD(v38) = a1[1].i32[0];
      while (2)
      {
        if ((int)v38 < 1)
          goto LABEL_152;
        v39 = 0;
        while (2)
        {
          switch(inited)
          {
            case 0:
              if (v37 == v39)
                v41 = 1.0;
              else
                v41 = 0.0;
              goto LABEL_149;
            case 2:
              v42 = *(float *)&v69;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v61, 0);
              v41 = v42 * v43;
LABEL_149:
              *((float *)v59[0] + (int)v37 * v60 + v39) = v41;
              break;
            case 1:
              v40 = *(float *)&v69;
              v41 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v40 + v40);
              goto LABEL_149;
          }
          ++v39;
          v38 = a1[1].i32[0];
          if (v39 < v38)
            continue;
          break;
        }
        v36 = a1[1].i32[1];
LABEL_152:
        if (++v37 < v36)
          continue;
        break;
      }
LABEL_153:
      kaldi::CuMatrix<float>::operator=(a1 + 11, (int *)v59);
      v44 = a1[1].u32[1];
      v57 = 0;
      v58 = 0;
      v56 = 0;
      kaldi::Vector<float>::Resize((void **)&v56, v44, 0);
      if (a1[1].i32[1] < 1)
      {
        v49 = v57;
      }
      else
      {
        v45 = 0;
        do
        {
          v46 = *(float *)&v71;
          v47 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v48 = v46 + (v47 + -0.5) * v70;
          v49 = v57;
          v56[v45++] = v48;
        }
        while (v45 < a1[1].i32[1]);
      }
      v50 = a1 + 17;
      kaldi::CuVector<float>::Resize((uint64_t)v50, v49, 1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v50, (uint64_t)&v56);
      kaldi::Vector<float>::Destroy((uint64_t)&v56);
      kaldi::Matrix<float>::~Matrix((uint64_t)v59);
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      v59[0] = (void **)&v62;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v59);
      if (SHIBYTE(v65[2]) < 0)
        operator delete(v65[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_134;
  }
}

void sub_1ADB79864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 193) < 0)
    operator delete(*(void **)(v18 - 216));
  if (*(char *)(v18 - 161) < 0)
    operator delete(*(void **)(v18 - 184));
  if (*(char *)(v18 - 137) < 0)
    operator delete(*(void **)(v18 - 160));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SharedNceComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  v8 = a1 + 136;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 88, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[5];

  v6 = *(_QWORD *)(a1 + 424);
  if (v6 && (v7 = *(_DWORD *)(v6 + 16), v7 >= 1))
  {
    v8 = *(_QWORD *)(a3 + 8);
    v9 = *(_DWORD *)(a3 + 28);
    v10 = *(_QWORD *)(a3 + 32);
    LODWORD(v11[2]) = v7;
    *(_QWORD *)((char *)&v11[2] + 4) = *(_QWORD *)(a3 + 20);
    HIDWORD(v11[3]) = v9;
    v11[4] = v10;
    v11[0] = &unk_1E5D29D40;
    v11[1] = v8;
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v11, a1 + 312, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v11, a2, CblasNoTrans, a1 + 168, CblasTrans, 1.0, 1.0);
    v11[0] = &unk_1E5D29D40;
    memset(&v11[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v11);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 136, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 88, CblasTrans, 1.0, 1.0);
  }
}

void sub_1ADB79A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  va_list va;

  va_start(va, a2);
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a1 + 136);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, a1 + 88, CblasNoTrans, a2, 1.0, 1.0);
}

void kaldi::nnet1::SharedNceComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[5];

  v5 = *(_QWORD *)(a1 + 424);
  if (v5 && (v6 = *(_DWORD *)(v5 + 16), v6 >= 1))
  {
    v7 = *(_QWORD *)(a4 + 8);
    v8 = *(_DWORD *)(a4 + 28);
    v9 = *(_QWORD *)(a4 + 32);
    LODWORD(v10[2]) = v6;
    *(_QWORD *)((char *)&v10[2] + 4) = *(_QWORD *)(a4 + 20);
    HIDWORD(v10[3]) = v8;
    v10[4] = v9;
    v10[0] = &unk_1E5D29D40;
    v10[1] = v7;
    kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v10, CblasNoTrans, a1 + 168, CblasNoTrans, 1.0, 0.0);
    v10[0] = &unk_1E5D29D40;
    memset(&v10[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v10);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, a1 + 88, CblasNoTrans, 1.0, 0.0);
  }
}

void sub_1ADB79BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  _OWORD *v3;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  *v3 = 0u;
  v3[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD v11[4];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 144) + 4 * a3));
  v8 = *(_QWORD *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * a3;
  v9 = *(_DWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 120);
  v11[0] = &unk_1E5D29D70;
  v11[1] = v8;
  v11[3] = v10;
  v11[2] = v9;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v11, 1.0, 1.0);
}

float kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = *(float *)(*(_QWORD *)(a1 + 144) + 4 * a3);
  v4 = *(_QWORD *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * a3;
  v5 = *(_DWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 120);
  v8[0] = &unk_1E5D29D70;
  v8[1] = v4;
  v8[3] = v6;
  v8[2] = v5;
  return v3 + kaldi::VecVec<float>(a2, (uint64_t)v8);
}

double kaldi::nnet1::SharedNceComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;
  float *v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  void **v15;
  BOOL v16;
  BOOL v17;
  void *v20;
  int v21;
  BOOL v22;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v29;
  void *v30[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v30, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v30);
    if (SHIBYTE(v30[2]) < 0)
    {
      v9 = v30[1];
      if (v30[1] != (void *)15
        || (*(_QWORD *)v30[0] == 0x61526E7261654C3CLL
          ? (v10 = *(_QWORD *)((char *)v30[0] + 7) == 0x3E66656F43657461)
          : (v10 = 0),
            v8 = (float *)(a1 + 408),
            !v10))
      {
        if (v30[1] != (void *)19)
          goto LABEL_25;
        v11 = *(_QWORD *)v30[0] == 0x61654C736169423CLL && *((_QWORD *)v30[0] + 1) == 0x6F43657461526E72;
        v12 = v11 && *(_QWORD *)((char *)v30[0] + 11) == 0x3E66656F43657461;
        v8 = (float *)(a1 + 412);
        if (!v12)
        {
          v9 = v30[1];
LABEL_25:
          if (v9 == (void *)18)
          {
            if (*(_QWORD *)v30[0] == 0x6E6569646172473CLL
              && *((_QWORD *)v30[0] + 1) == 0x7079546D726F4E74
              && *((_WORD *)v30[0] + 8) == 15973)
            {
              goto LABEL_65;
            }
            v9 = v30[1];
          }
          if (v9 != (void *)9)
            goto LABEL_68;
          v15 = (void **)v30[0];
LABEL_55:
          v20 = *v15;
          v21 = *((unsigned __int8 *)v15 + 8);
          v22 = v20 == (void *)0x6461724778614D3CLL && v21 == 62;
          v8 = (float *)(a1 + 420);
          if (!v22)
            goto LABEL_68;
        }
      }
    }
    else if (HIBYTE(v30[2]) > 0x11u)
    {
      if (HIBYTE(v30[2]) == 18)
      {
        if (v30[0] != (void *)0x6E6569646172473CLL || v30[1] != (void *)0x7079546D726F4E74 || LOWORD(v30[2]) != 15973)
        {
LABEL_68:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v30[2]) >= 0)
            v25 = v30;
          else
            v25 = (void **)v30[0];
          if (SHIBYTE(v30[2]) >= 0)
            v26 = HIBYTE(v30[2]);
          else
            v26 = (uint64_t)v30[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
LABEL_65:
        __p[0] = 0;
        __p[1] = 0;
        v29 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 416) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v29) < 0)
          operator delete(__p[0]);
        goto LABEL_61;
      }
      if (HIBYTE(v30[2]) != 19)
        goto LABEL_68;
      v16 = v30[0] == (void *)0x61654C736169423CLL && v30[1] == (void *)0x6F43657461526E72;
      v17 = v16 && *(void **)((char *)&v30[1] + 3) == (void *)0x3E66656F43657461;
      v8 = (float *)(a1 + 412);
      if (!v17)
        goto LABEL_68;
    }
    else
    {
      if (HIBYTE(v30[2]) == 9)
      {
        v15 = v30;
        goto LABEL_55;
      }
      if (HIBYTE(v30[2]) != 15)
        goto LABEL_68;
      v7 = v30[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v30 + 7) == (void *)0x3E66656F43657461;
      v8 = (float *)(a1 + 408);
      if (!v7)
        goto LABEL_68;
    }
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_61:
    if (SHIBYTE(v30[2]) < 0)
      operator delete(v30[0]);
  }
  kaldi::CuMatrix<float>::Read(a1 + 88, a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 136, a2, a3);
}

void sub_1ADB7A07C()
{
  JUMPOUT(0x1ADB7A084);
}

_QWORD *kaldi::nnet1::SharedNceComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 416), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADB7A17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SharedNceComponent::NumParams(kaldi::nnet1::SharedNceComponent *this)
{
  return (*((_DWORD *)this + 38) + *((_DWORD *)this + 26) * *((_DWORD *)this + 27));
}

const void **kaldi::nnet1::SharedNceComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + 88;
  v5 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 108);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v6, 0);
  v10 = 0;
  v11 = 0;
  v9 = (char *)*a2;
  LODWORD(v10) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v9, v4);
  v7 = *(_DWORD *)(a1 + 152);
  v10 = 0;
  v11 = 0;
  v9 = (char *)*a2 + 4 * v5;
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 136), (uint64_t)&v9);
}

void *kaldi::nnet1::SharedNceComponent::SetParams(_DWORD *a1, char **a2)
{
  int v4;
  int v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  v4 = a1[26] * a1[27];
  v8 = 0;
  v9 = 0;
  v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 22), &v7);
  v5 = a1[38];
  v8 = 0;
  v9 = 0;
  v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 34, (uint64_t)&v7);
}

float kaldi::nnet1::SharedNceComponent::SumParams(kaldi::nnet1::SharedNceComponent *this)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 88);
  return v2 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 136);
}

uint64_t kaldi::nnet1::SharedNceComponent::PerturbParams(kaldi::nnet1::SharedNceComponent *this, float a2)
{
  uint64_t v4;
  _QWORD v6[4];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 27), *((unsigned int *)this + 26), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 88, (uint64_t)v7, 111, a2, 1.0);
  v4 = *((unsigned int *)this + 38);
  v6[0] = &unk_1E5D341C8;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 136, (uint64_t)v6, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADB7A3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SharedNceComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5;

  v5 = a1 + 216;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a1 + 232) * *(_DWORD *)(a1 + 236)), 0);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a4, v5);
}

void kaldi::nnet1::SharedNceComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[5];

  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v10 = a1 + 216;
  *(_QWORD *)(a1 + 248) = a4;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 216), *(unsigned int *)(a1 + 188), *(unsigned int *)(a1 + 184), 3, 0);
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 28);
  v13 = *(_QWORD *)(a3 + 32);
  LODWORD(v29[2]) = v8;
  *(_QWORD *)((char *)&v29[2] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v29[3]) = v12;
  v29[4] = v13;
  v29[0] = &unk_1E5D29D40;
  v29[1] = v11;
  kaldi::CuMatrixBase<float>::AddMatMat(v10, (uint64_t)v29, CblasTrans, a2, CblasNoTrans, 1.0, 0.0);
  *(_QWORD *)(a1 + 368) = a4;
  kaldi::CuVector<float>::Resize(a1 + 344, *(unsigned int *)(a1 + 328), 3);
  kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 344, (uint64_t)v29, 1.0, 0.0);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 160) = a4;
  v14 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v14 = v14 / (float)v9;
  v15 = *(float *)(a1 + 420);
  if (v15 > 0.0)
  {
    v16 = (float)v9;
    if (!*(_BYTE *)(a1 + 84))
      v16 = 1.0;
    v17 = v16 * v15;
    v18 = *(_DWORD *)(a1 + 416);
    if (v18 == 1)
    {
      kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v16 * v15);
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 344, v17);
    }
    else if (v18 == 2)
    {
      *(_QWORD *)(a1 + 296) = a4;
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 264), *(unsigned int *)(a1 + 236), *(unsigned int *)(a1 + 232), 1, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v10, (int *)(a1 + 264), v17);
      *(_QWORD *)(a1 + 400) = a4;
      kaldi::CuVector<float>::Resize(a1 + 376, *(unsigned int *)(a1 + 360), 1);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 344, (_QWORD *)(a1 + 376), v17);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, *(_QWORD *)(a1 + 424), v8);
  kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 88, (uint64_t)&v26, v10, -(float)(v14 * *(float *)(a1 + 408)));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a1 + 136, *(_DWORD *)(a1 + 12));
  v19 = *(float *)(a1 + 412);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 344, v8);
  kaldi::CuMatrixBase<float>::AddIndexedRows((uint64_t)&v23, (uint64_t)&v26, (uint64_t)&v20, v19 * (float)-v14);
  v20 = &unk_1E5D29D40;
  v21 = 0u;
  v22 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  *(_QWORD *)(a1 + 424) = 0;
  v23 = &unk_1E5D29D40;
  v24 = 0u;
  v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  v26 = &unk_1E5D29D40;
  v27 = 0u;
  v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  v29[0] = &unk_1E5D29D40;
  memset(&v29[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
}

void sub_1ADB7A6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, __int128 a16, __int128 a17, uint64_t a18)
{
  _OWORD *v18;
  uint64_t v19;

  a9 = v19 + 16;
  a10 = 0u;
  a11 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a12 = v19 + 16;
  a13 = 0u;
  a14 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  a15 = v19 + 16;
  a16 = 0u;
  a17 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a15);
  a18 = v19 + 16;
  *v18 = 0u;
  v18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  _QWORD v3[34];

  if (a2 == 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "it does not make sense to do RMSPROP in this component");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  *(float *)(result + 420) = a3;
  *(_DWORD *)(result + 416) = a2;
  return result;
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::Copy(kaldi::nnet1::WordVecComponent *this)
{
  kaldi::nnet1::WordVecComponent *v2;

  v2 = (kaldi::nnet1::WordVecComponent *)operator new();
  kaldi::nnet1::WordVecComponent::WordVecComponent(v2, this);
  return v2;
}

void sub_1ADB7A7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40DE627FD4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::GetType(kaldi::nnet1::WordVecComponent *this)
{
  return 268;
}

uint64_t kaldi::nnet1::WordVecComponent::CountZeroCorr(kaldi::nnet1::WordVecComponent *this, int *a2, int *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(kaldi::nnet1::WordVecComponent *))(*(_QWORD *)this + 176))(this);
  *a3 = result;
  *a2 = 0;
  if (*((_DWORD *)this + 71))
  {
    result = kaldi::CuMatrixBase<float>::CountZeros((uint64_t)this + 264);
    *a2 = result;
  }
  return result;
}

uint64_t kaldi::nnet1::WordVecComponent::Info(kaldi::nnet1::WordVecComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::WordVecComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n WordVec table", 15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 96);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1ADB7A98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::WordVecComponent::InfoGradient@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n we don't save intermediate gradient");
}

void kaldi::nnet1::WordVecComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  void **v7;
  BOOL v8;
  int *v9;
  void *v10;
  BOOL v12;
  float *v13;
  BOOL v14;
  BOOL v20;
  BOOL v21;
  BOOL v28;
  std::string *v29;
  void *v30;
  void *v31;
  BOOL v32;
  int inited;
  int32x2_t *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __int32 v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD v49[3];
  void **v50[2];
  int v51;
  _QWORD v52[2];
  uint64_t v53;
  void *__p;
  void *v55;
  void *v56[3];
  int v57;
  std::string v58;
  std::string v59;
  int v60;

  v60 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v59);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[30].u32[0], &v58);
  v57 = -1;
  memset(v56, 0, sizeof(v56));
  v6 = (int *)&a1[31];
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_117;
    kaldi::ReadToken(a2, 0, (uint64_t)v56);
    if ((SHIBYTE(v56[2]) & 0x80000000) == 0)
      break;
    v10 = v56[1];
    if (v56[1] == (void *)13
      && *(_QWORD *)v56[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v56[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_79:
      v13 = (float *)&v60;
LABEL_104:
      kaldi::ReadBasicType<float>(a2, 0, v13);
      goto LABEL_115;
    }
    if (v56[1] == (void *)15)
    {
      v12 = *(_QWORD *)v56[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v56[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)&a1[32] + 1;
      if (v12)
        goto LABEL_104;
      v10 = v56[1];
    }
    if (v10 == (void *)11)
    {
      v14 = *(_QWORD *)v56[0] == 0x69536261636F563CLL && *(_QWORD *)((char *)v56[0] + 3) == 0x3E657A6953626163;
      v9 = (int *)&a1[31];
      if (v14)
        goto LABEL_114;
      v10 = v56[1];
    }
    if (v10 != (void *)12)
      goto LABEL_34;
    if (*(_QWORD *)v56[0] != 0x536D6F646E61523CLL || *((_DWORD *)v56[0] + 2) != 1046766949)
    {
      v10 = v56[1];
LABEL_34:
      if (v10 == (void *)19)
      {
        if (*(_QWORD *)v56[0] != 0x61725474696E493CLL
          || *((_QWORD *)v56[0] + 1) != 0x79546D726F66736ELL
          || *(_QWORD *)((char *)v56[0] + 11) != 0x3E657079546D726FLL)
        {
          v10 = v56[1];
          goto LABEL_43;
        }
LABEL_105:
        v29 = &v59;
LABEL_107:
        kaldi::ReadToken(a2, 0, (uint64_t)v29);
        goto LABEL_115;
      }
LABEL_43:
      if (v10 == (void *)18)
      {
        if (*(_QWORD *)v56[0] == 0x6E6569646172473CLL
          && *((_QWORD *)v56[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v56[0] + 8) == 15973)
        {
LABEL_106:
          v29 = &v58;
          goto LABEL_107;
        }
        v10 = v56[1];
      }
      if (v10 == (void *)9)
      {
        v20 = *(_QWORD *)v56[0] == 0x6461724778614D3CLL && *((_BYTE *)v56[0] + 8) == 62;
        v13 = (float *)&a1[30] + 1;
        if (v20)
          goto LABEL_104;
        v10 = v56[1];
      }
      if (v10 != (void *)16)
        goto LABEL_116;
      v7 = (void **)v56[0];
LABEL_109:
      v30 = *v7;
      v31 = v7[1];
      v32 = v30 == (void *)0x5372656C6C69463CLL && v31 == (void *)0x3E64496C6F626D79;
      v9 = (int *)&a1[31] + 1;
      if (!v32)
        goto LABEL_116;
      goto LABEL_114;
    }
LABEL_73:
    v9 = &v57;
LABEL_114:
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v9);
LABEL_115:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v56;
  switch(HIBYTE(v56[2]))
  {
    case 9:
      goto LABEL_99;
    case 0xB:
      goto LABEL_5;
    case 0xC:
      goto LABEL_68;
    case 0xD:
      if (v56[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v56 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_116;
      goto LABEL_79;
    case 0xF:
      v21 = v56[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v56 + 7) == (void *)0x3E66656F43657461;
      v13 = (float *)&a1[32] + 1;
      if (v21)
        goto LABEL_104;
      if (HIBYTE(v56[2]) == 9)
        goto LABEL_99;
      if (HIBYTE(v56[2]) == 12)
      {
LABEL_68:
        if (v56[0] != (void *)0x536D6F646E61523CLL || LODWORD(v56[1]) != 1046766949)
          goto LABEL_98;
        goto LABEL_73;
      }
      if (HIBYTE(v56[2]) != 11)
        goto LABEL_116;
LABEL_5:
      v8 = v56[0] == (void *)0x69536261636F563CLL && *(void **)((char *)v56 + 3) == (void *)0x3E657A6953626163;
      v9 = (int *)&a1[31];
      if (v8)
        goto LABEL_114;
LABEL_98:
      if (HIBYTE(v56[2]) != 9)
        goto LABEL_116;
LABEL_99:
      v28 = v56[0] == (void *)0x6461724778614D3CLL && LOBYTE(v56[1]) == 62;
      v13 = (float *)&a1[30] + 1;
      if (v28)
        goto LABEL_104;
LABEL_116:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v56, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v56[2]) >= 0)
          v45 = v56;
        else
          v45 = (void **)v56[0];
        if (SHIBYTE(v56[2]) >= 0)
          v46 = HIBYTE(v56[2]);
        else
          v46 = (uint64_t)v56[1];
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" (ParamStddev|LearnRateCoef|VocabSize|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 92);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
LABEL_117:
      if (*v6 <= 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"invalid vocabulary size ", 24);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v59);
      a1[30].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v58);
      if (!inited)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"it doesn't make sense to initialize the word vec as an identify matrix", 70);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
      if (v57 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v57);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v52, a3);
      v34 = a1 + 12;
      kaldi::CuMatrix<float>::Resize(a1 + 12, a1[31].u32[0], a1[32].u32[0], 1, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)v50, a1[31].u32[0], a1[32].u32[0], 0, 0);
      v35 = *v6;
      if (*v6 < 1)
        goto LABEL_133;
      v36 = 0;
      LODWORD(v37) = a1[32].i32[0];
      while (2)
      {
        if ((int)v37 < 1)
          goto LABEL_132;
        v38 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v41 = *(float *)&v60;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v52, 0);
            v40 = v41 * v42;
LABEL_129:
            *((float *)v50[0] + v36 * v51 + v38) = v40;
          }
          else if (inited == 1)
          {
            v39 = *(float *)&v60;
            v40 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v39 + v39);
            goto LABEL_129;
          }
          ++v38;
          v37 = a1[32].i32[0];
          if (v38 < v37)
            continue;
          break;
        }
        v35 = *v6;
LABEL_132:
        if (++v36 < v35)
          continue;
        break;
      }
LABEL_133:
      v43 = a1[31].i32[1];
      if ((v43 & 0x80000000) == 0)
      {
        v49[2] = 0;
        v49[0] = (char *)v50[0] + 4 * v51 * v43;
        v49[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v50);
        kaldi::VectorBase<float>::SetZero((uint64_t)v49);
      }
      kaldi::CuMatrix<float>::operator=(v34, (int *)v50);
      kaldi::Matrix<float>::~Matrix((uint64_t)v50);
      if (__p)
      {
        v55 = __p;
        operator delete(__p);
      }
      v50[0] = (void **)&v53;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v50);
      if (SHIBYTE(v56[2]) < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      return;
    case 0x10:
      goto LABEL_109;
    case 0x12:
      goto LABEL_90;
    case 0x13:
      if (v56[0] == (void *)0x61725474696E493CLL
        && v56[1] == (void *)0x79546D726F66736ELL
        && *(void **)((char *)&v56[1] + 3) == (void *)0x3E657079546D726FLL)
      {
        goto LABEL_105;
      }
      if (HIBYTE(v56[2]) == 9)
        goto LABEL_99;
      if (HIBYTE(v56[2]) == 16)
        goto LABEL_108;
      if (HIBYTE(v56[2]) != 18)
        goto LABEL_116;
LABEL_90:
      if (v56[0] == (void *)0x6E6569646172473CLL && v56[1] == (void *)0x7079546D726F4E74 && LOWORD(v56[2]) == 15973)
        goto LABEL_106;
      if (HIBYTE(v56[2]) != 16)
        goto LABEL_98;
LABEL_108:
      v7 = v56;
      goto LABEL_109;
    default:
      goto LABEL_116;
  }
}

void sub_1ADB7B1DC()
{
  JUMPOUT(0x1ADB7B20CLL);
}

void sub_1ADB7B1EC()
{
  JUMPOUT(0x1ADB7B234);
}

void sub_1ADB7B1F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void sub_1ADB7B200(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  JUMPOUT(0x1ADB7B214);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v7;

  v7 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  return kaldi::CuMatrixBase<float>::Write(v7, a2, a3, a4);
}

uint64_t kaldi::nnet1::WordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, a1 + 96, a2);
}

uint64_t kaldi::nnet1::WordVecComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  float *v13;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v22;
  BOOL v23;
  uint64_t result;
  _QWORD *v25;
  __int128 *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  if (kaldi::Peek(a2, a3) == 60)
  {
    while (1)
    {
      v31 = 0uLL;
      v32 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v31);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        break;
      v10 = *((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1) != 11
        || (*(_QWORD *)v31 == 0x69536261636F563CLL ? (v11 = *(_QWORD *)(v31 + 3) == 0x3E657A6953626163) : (v11 = 0),
            v9 = a1 + 248,
            !v11))
      {
        if (*((_QWORD *)&v31 + 1) == 15)
        {
          v12 = *(_QWORD *)v31 == 0x61526E7261654C3CLL && *(_QWORD *)(v31 + 7) == 0x3E66656F43657461;
          v13 = (float *)(a1 + 260);
          if (v12)
            goto LABEL_62;
          v10 = *((_QWORD *)&v31 + 1);
        }
        if (v10 == 18)
        {
          if (*(_QWORD *)v31 == 0x6E6569646172473CLL
            && *(_QWORD *)(v31 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v31 + 16) == 15973)
          {
LABEL_67:
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 240) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            goto LABEL_63;
          }
          v10 = *((_QWORD *)&v31 + 1);
        }
        if (v10 == 9)
        {
          v16 = *(_QWORD *)v31 == 0x6461724778614D3CLL && *(_BYTE *)(v31 + 8) == 62;
          v13 = (float *)(a1 + 244);
          if (v16)
            goto LABEL_62;
          v10 = *((_QWORD *)&v31 + 1);
        }
        if (v10 != 16)
          goto LABEL_71;
        v7 = (uint64_t *)v31;
LABEL_37:
        v17 = *v7;
        v18 = v7[1];
        v19 = v17 == 0x5372656C6C69463CLL && v18 == 0x3E64496C6F626D79;
        v9 = a1 + 252;
        if (!v19)
          goto LABEL_71;
      }
LABEL_42:
      kaldi::ReadBasicType<int>(a2, a3, v9);
LABEL_63:
      if (SHIBYTE(v32) < 0)
        operator delete((void *)v31);
      if (kaldi::Peek(a2, a3) != 60)
        goto LABEL_69;
    }
    v7 = (uint64_t *)&v31;
    switch(HIBYTE(v32))
    {
      case 9:
        goto LABEL_57;
      case 0xB:
        v8 = (_QWORD)v31 == 0x69536261636F563CLL && *(_QWORD *)((char *)&v31 + 3) == 0x3E657A6953626163;
        v9 = a1 + 248;
        if (!v8)
          goto LABEL_71;
        goto LABEL_42;
      case 0xF:
        v22 = (_QWORD)v31 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v31 + 7) == 0x3E66656F43657461;
        v13 = (float *)(a1 + 260);
        if (!v22)
          goto LABEL_56;
        break;
      case 0x10:
        goto LABEL_37;
      case 0x12:
        if ((_QWORD)v31 == 0x6E6569646172473CLL
          && *((_QWORD *)&v31 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v32 == 15973)
        {
          goto LABEL_67;
        }
        if (HIBYTE(v32) == 16)
        {
          v7 = (uint64_t *)&v31;
          goto LABEL_37;
        }
LABEL_56:
        if (HIBYTE(v32) != 9)
          goto LABEL_71;
LABEL_57:
        v23 = (_QWORD)v31 == 0x6461724778614D3CLL && BYTE8(v31) == 62;
        v13 = (float *)(a1 + 244);
        if (!v23)
        {
LABEL_71:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v32 >= 0)
            v26 = &v31;
          else
            v26 = (__int128 *)v31;
          if (v32 >= 0)
            v27 = HIBYTE(v32);
          else
            v27 = *((_QWORD *)&v31 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        return result;
      default:
        goto LABEL_71;
    }
LABEL_62:
    kaldi::ReadBasicType<float>(a2, a3, v13);
    goto LABEL_63;
  }
LABEL_69:
  if (*(int *)(a1 + 248) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  return kaldi::CuMatrix<float>::Read(a1 + 96, a2, a3, a4);
}

void sub_1ADB7B6F8()
{
  JUMPOUT(0x1ADB7B700);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<VocabSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 240), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FillerSymbolId>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1ADB7B81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::WordVecComponent::NumParams(kaldi::nnet1::WordVecComponent *this)
{
  return (*((_DWORD *)this + 28) * *((_DWORD *)this + 29));
}

void *kaldi::nnet1::WordVecComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 96;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a2, v3);
}

void **kaldi::nnet1::WordVecComponent::SetParams(uint64_t a1, char **a2)
{
  uint64_t v3;

  v3 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v3, a2);
}

float kaldi::nnet1::WordVecComponent::SumParams(kaldi::nnet1::WordVecComponent *this)
{
  return kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 96);
}

uint64_t kaldi::nnet1::WordVecComponent::PerturbParams(kaldi::nnet1::WordVecComponent *this, float a2)
{
  int32x2_t v5[6];

  kaldi::CuMatrix<float>::CuMatrix(v5, *((unsigned int *)this + 29), *((unsigned int *)this + 28), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 96, (uint64_t)v5, 111, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1ADB7B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordVecComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a3 + 16) * *(_DWORD *)(a3 + 20)), 1);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a4, a3);
}

void kaldi::nnet1::WordVecComponent::AccumGradients(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[4];

  v7 = *(_DWORD *)(a2 + 20);
  v8 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v8 = v8 / (float)v7;
  v9 = *(float *)(a1 + 244);
  if (v9 <= 0.0)
  {
    v10 = (uint64_t)a3;
  }
  else
  {
    v10 = a1 + 144;
    *(_QWORD *)(a1 + 176) = a4;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 144), a3);
    v11 = *(_DWORD *)(a1 + 240);
    if (v11 == 2)
    {
      v13 = (float)v7;
      if (!*(_BYTE *)(a1 + 84))
        v13 = 1.0;
      v14 = v9 * v13;
      *(_QWORD *)(a1 + 224) = a4;
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 192), *(unsigned int *)(a1 + 164), *(unsigned int *)(a1 + 160), 1, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 144, (int *)(a1 + 192), v14);
    }
    else if (v11 == 1)
    {
      v12 = (float)v7;
      if (!*(_BYTE *)(a1 + 84))
        v12 = 1.0;
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 144, v9 * v12);
    }
  }
  v15 = *(float *)(a1 + 72);
  if (v15 <= 0.0)
  {
    *(_QWORD *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 96, a2, v10, -(float)(v8 * *(float *)(a1 + 260)));
  }
  else
  {
    if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 312))
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 264), *(unsigned int *)(a1 + 116), *(unsigned int *)(a1 + 112), 0, 0);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 312), a1 + 264);
    }
    *(_QWORD *)(a1 + 296) = a4;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 264);
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 264, a2, v10, 1.0);
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 312), *(_DWORD *)(a1 + 76), v15);
    *(_QWORD *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddMat(a1 + 96, a1 + 264, 111, -(float)(v8 * *(float *)(a1 + 260)), 1.0);
  }
  v16 = *(_DWORD *)(a1 + 252);
  if ((v16 & 0x80000000) == 0)
  {
    v17 = *(_QWORD *)(a1 + 104) + 4 * *(_DWORD *)(a1 + 120) * v16;
    v18 = *(_DWORD *)(a1 + 112);
    v19 = *(_QWORD *)(a1 + 128);
    v20[0] = &unk_1E5D29D70;
    v20[1] = v17;
    v20[3] = v19;
    v20[2] = v18;
    kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
  }
}

void kaldi::nnet1::WordVecComponent::SetGradientNormalization(uint64_t a1, int a2, float a3)
{
  _QWORD v3[34];

  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RMSPROP is not implemented in word embedding yet", 48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
  }
  else
  {
    *(float *)(a1 + 244) = a3;
    *(_DWORD *)(a1 + 240) = a2;
  }
}

void sub_1ADB7BBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
  uint64_t v2;
  float *v4[5];

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = *((_QWORD *)this + 1);
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)v2 = &off_1E5D305F8;
  *(_BYTE *)(v2 + 56) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v4, (uint64_t)this + 96, 111);
  kaldi::CompressedMatrix::CopyFromMat<float>(v2 + 48, v4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v4);
  return v2;
}

void sub_1ADB7BCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
  return kaldi::nnet1::WordVecComponent::CopyCompressed((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
}

uint64_t kaldi::nnet1::FofeWordVecComponent::Copy(kaldi::nnet1::FofeWordVecComponent *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordVecComponent::WordVecComponent((kaldi::nnet1::WordVecComponent *)v2, this);
  *(_QWORD *)v2 = &off_1E5D2E6F8;
  *(_QWORD *)(v2 + 88) = &unk_1E5D2E828;
  *(_DWORD *)(v2 + 384) = *((_DWORD *)this + 96);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 392, (char *)this + 392, 111);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 440, (char *)this + 440, 111);
  return v2;
}

void sub_1ADB7BD48(_Unwind_Exception *a1)
{
  kaldi::nnet1::WordVecComponent *v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(v1);
  MEMORY[0x1AF44D190](v1, 0x10A1C40E06CE33FLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FofeWordVecComponent::GetType(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 269;
}

uint64_t kaldi::nnet1::FofeWordVecComponent::OutputRowCount(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 1;
}

void kaldi::nnet1::FofeWordVecComponent::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned __int32 v7;
  __int32 v8;
  uint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;

  v6 = *(_DWORD *)(a2 + 20);
  kaldi::nnet1::FofeWordVecComponent::Prepare(a1, v6);
  kaldi::CuMatrixBase<float>::ConcatenateVec((uint64_t)&a1[55], (uint64_t)&a1[12], a2);
  v7 = a1[51].i32[0] - v6;
  v8 = a1[52].i32[0];
  v9 = *(_QWORD *)&a1[50] + 4 * (int)v7;
  v10 = a1[52].i32[1] - v7;
  v11 = a1[53];
  *((_QWORD *)&v13 + 1) = v6 | 0x100000000;
  *(_QWORD *)&v14 = __PAIR64__(v10, v8);
  *((int32x2_t *)&v14 + 1) = v11;
  v12 = &unk_1E5D29D40;
  *(_QWORD *)&v13 = v9;
  kaldi::CuMatrixBase<float>::AddMatMat(a3, (uint64_t)&v12, CblasNoTrans, (uint64_t)&a1[55], CblasNoTrans, 1.0, 0.0);
  v12 = &unk_1E5D29D40;
  v13 = 0u;
  v14 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
}

void sub_1ADB7BE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  va_list va;

  va_start(va, a2);
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FofeWordVecComponent::AccumGradients()
{
  _QWORD v0[34];

  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"not implemented", 15);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  }
}

void sub_1ADB7BEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D2EDA8;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 13) = &unk_1E5D34170;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 35) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 36) = _D1;
  *((_DWORD *)this + 74) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 361) = 0u;
  return result;
}

double kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0x3F0000003ECCCCCDLL;
  *((_DWORD *)this + 14) = 1063675494;
  *(_QWORD *)((char *)this + 60) = 0x7A12000000028;
  *((_DWORD *)this + 17) = 961656599;
  *(_QWORD *)this = &off_1E5D31B38;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1E5D34170;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 15) = &unk_1E5D341C8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 23) = &unk_1E5D34170;
  *((_BYTE *)this + 224) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 29) = &unk_1E5D341C8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = &unk_1E5D341C8;
  *((_QWORD *)this + 34) = 0;
  return result;
}

kaldi::nnet1::Padding2DComponent *kaldi::nnet1::Padding2DComponent::Padding2DComponent(kaldi::nnet1::Padding2DComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E5D2E068;
  kaldi::nnet1::Padding2DComponent::Init(this);
  return this;
}

void sub_1ADB7C0B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E5D32508;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D32320;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  *((_QWORD *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1);
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 208) = 0;
  return this;
}

void sub_1ADB7C194(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D32078;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  *((_QWORD *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = &unk_1E5D34170;
  *((_BYTE *)this + 208) = 0;
  *((_DWORD *)this + 54) = 0;
  *(_QWORD *)((char *)this + 220) = 0x3F80000000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 256) = 0;
  return this;
}

void sub_1ADB7C27C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::KlHmm *kaldi::nnet1::KlHmm::KlHmm(kaldi::nnet1::KlHmm *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E5D31D50;
  kaldi::Matrix<double>::Matrix((uint64_t)this + 48, a3, a2, 0, 0);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 11) = &unk_1E5D34170;
  *((_BYTE *)this + 128) = 0;
  return this;
}

void sub_1ADB7C304(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E5D32508;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::SentenceAveragingComponent *kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this, int a2, int a3, float a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D30778;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  *((float *)this + 116) = a4;
  return this;
}

void sub_1ADB7C3B4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *(_QWORD *)this = &off_1E5D2E378;
  *((_BYTE *)this + 86) = 0;
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)this + 11, a3, a2, 0, 0, 0);
  *((_QWORD *)this + 17) = &unk_1E5D341C8;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, a3, 0);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1E5D34170;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1E5D34170;
  *((_BYTE *)this + 256) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 33) = &unk_1E5D34170;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = &unk_1E5D341C8;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 43) = &unk_1E5D341C8;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &unk_1E5D341C8;
  *((_QWORD *)this + 48) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 51) = _D0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  return this;
}

void sub_1ADB7C4E4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::InterpolationComponent(kaldi::nnet1::InterpolationComponent *this, int a2, int a3)
{
  void **v4;
  int v5;
  float *v6;
  int v7;
  float v8;
  _QWORD *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  _QWORD v20[34];

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  v4 = (void **)((char *)this + 48);
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_1E5D2EED0;
  v5 = a2 / a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (a2 % a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"The input dimension is not divisible by the output dimension", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.0 / (double)v5;
    v9 = (_QWORD *)((char *)this + 64);
    do
    {
      if ((unint64_t)v6 >= *v9)
      {
        v11 = (float *)*v4;
        v12 = ((char *)v6 - (_BYTE *)*v4) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = *v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 64, v15);
          v11 = (float *)*((_QWORD *)this + 6);
          v6 = (float *)*((_QWORD *)this + 7);
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        *v17 = v8;
        v10 = v17 + 1;
        while (v6 != v11)
        {
          v18 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *((_QWORD *)this + 6) = v17;
        *((_QWORD *)this + 7) = v10;
        *((_QWORD *)this + 8) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v6 = v8;
        v10 = v6 + 1;
      }
      *((_QWORD *)this + 7) = v10;
      ++v7;
      v6 = v10;
    }
    while (v7 != v5);
  }
  return this;
}

void sub_1ADB7C6A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  *v1 = off_1E5D32508;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E5D30CC8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Resize((uint64_t)this + 48, a2, 0);
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_DWORD *)this + 24) = -1;
  return this;
}

void sub_1ADB7C754(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E5D32508;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 40)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[4];
  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = &unk_1E5D34170;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1E5D34170;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

uint64_t kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(uint64_t this, int a2, int a3, float a4)
{
  _QWORD v4[34];

  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1E5D2C690;
  *(float *)(this + 48) = a4;
  if (a4 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

void sub_1ADB7C8B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E5D32508;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::BlockSoftmax(kaldi::nnet1::BlockSoftmax *this, const kaldi::nnet1::BlockSoftmax *a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1E5D2B420;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  return this;
}

void sub_1ADB7C98C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  *v1 = v3;
  v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::BlockSoftmax::InitOffset(std::vector<int> *this)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  uint64_t v5;
  std::vector<int>::pointer v6;
  unint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[34];

  v2 = this[2].__end_ - this[2].__begin_ + 1;
  LODWORD(v12[0]) = 0;
  std::vector<int>::resize(this + 3, v2, (std::vector<int>::const_reference)v12);
  begin = this[2].__begin_;
  end = this[2].__end_;
  v5 = (char *)end - (char *)begin;
  if (end != begin)
  {
    v6 = this[3].__begin_;
    v7 = v5 >> 2;
    if (v7 <= 1)
      v7 = 1;
    v10 = *v6;
    v8 = v6 + 1;
    v9 = v10;
    do
    {
      v11 = *begin++;
      v9 += v11;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  if (HIDWORD(this->__end_) != *(this[3].__end_ - 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Total block dimensions and output dimension mismatch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
}

uint64_t kaldi::nnet1::Component::GetUnitOutput(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string v14;
  _QWORD v15[34];

  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Non-matching dims! ", 19);
    v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v6, &v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v14;
    else
      v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" input-dim : ", 13);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v14);
LABEL_14:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(_DWORD *)(a4 + 16) != *(_DWORD *)(a2 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Non-matching dims! Input batch size: ", 37);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" output dim : ", 14);
    std::ostream::operator<<();
    goto LABEL_14;
  }
  if (a1[3] <= a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Requested output for invalid unit: ", 35);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; total units = ", 16);
    std::ostream::operator<<();
    goto LABEL_14;
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t kaldi::nnet1::Component::GetUnitOutput(_DWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  kaldi::nnet1::Component *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string v12;
  _QWORD v13[34];

  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Non-matching dims! ", 19);
    v5 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v5, &v12);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v12;
    else
      v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" input-dim : ", 13);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v12);
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if (a1[3] <= a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Requested output for invalid unit: ", 35);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; total units = ", 16);
    std::ostream::operator<<();
    goto LABEL_12;
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1);
}

_QWORD *kaldi::operator<<<int>(_QWORD *a1, const void **a2)
{
  unint64_t v3;
  std::vector<unsigned int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (__p.__end_ != __p.__begin_)
  {
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
      ++v3;
    }
    while (v3 < __p.__end_ - __p.__begin_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ]\n", 3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return a1;
}

void sub_1ADB7CE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, const kaldi::nnet1::AddShift *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D32320;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, *((unsigned int *)a2 + 26), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 11, (uint64_t)a2 + 88);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 5);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 5);
  v6 = *((_QWORD *)a2 + 21);
  v7 = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 44) = v7;
  *((_QWORD *)this + 21) = v6;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 23, *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 2);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  return this;
}

void sub_1ADB7D000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1ADB7D138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::EnsureCorrs(kaldi::nnet1::AddShift *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<unsigned int>::size_type v5;
  uint64_t v6;
  unsigned int v7;

  if (!*((_BYTE *)this + 208))
  {
    v2 = *((_DWORD *)this + 42);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      v6 = 0;
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 15) + v6, *((unsigned int *)this + 26), 0);
        if (v7 == 2)
        {
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 18) + v6, *((unsigned int *)this + 26), 1);
          if (*((_DWORD *)this + 42) == 3)
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 18) + v6, 1.0);
        }
        v6 += 32;
      }
      while (32 * v5 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 184), v5);
    *((_BYTE *)this + 208) = 1;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, const kaldi::nnet1::Rescale *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D32078;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, *((unsigned int *)a2 + 26), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 11, (uint64_t)a2 + 88);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 5);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 5);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  v6 = *((_QWORD *)a2 + 27);
  v7 = *((_DWORD *)a2 + 56);
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 56) = v7;
  *((_QWORD *)this + 27) = v6;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 29, *((const void **)a2 + 29), *((_QWORD *)a2 + 30), (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 2);
  *((_BYTE *)this + 256) = *((_BYTE *)a2 + 256);
  return this;
}

void sub_1ADB7D3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::EnsureCorrs(kaldi::nnet1::Rescale *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<unsigned int>::size_type v5;
  uint64_t v6;
  unsigned int v7;

  if (!*((_BYTE *)this + 256))
  {
    v2 = *((_DWORD *)this + 54);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      v6 = 0;
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 15) + v6, *((unsigned int *)this + 26), 0);
        if (v7 == 2)
        {
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 18) + v6, *((unsigned int *)this + 26), 1);
          if (*((_DWORD *)this + 54) == 3)
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 18) + v6, 1.0);
        }
        v6 += 32;
      }
      while (32 * v5 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), v5);
    *((_BYTE *)this + 256) = 1;
  }
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, const kaldi::nnet1::Rbm *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D31F90;
  v5 = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 3) = v5;
  *(_QWORD *)this = &off_1E5D31B38;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 72, (char *)a2 + 72, 111);
  *((_QWORD *)this + 15) = &unk_1E5D341C8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  kaldi::CuVector<float>::Resize((uint64_t)this + 120, *((unsigned int *)a2 + 34), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 15, (uint64_t)a2 + 120);
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, *((unsigned int *)a2 + 42), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 19, (uint64_t)a2 + 152);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 184, (char *)a2 + 184, 111);
  *((_QWORD *)this + 29) = &unk_1E5D341C8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  kaldi::CuVector<float>::Resize((uint64_t)this + 232, *((unsigned int *)a2 + 62), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 29, (uint64_t)a2 + 232);
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = &unk_1E5D341C8;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  kaldi::CuVector<float>::Resize((uint64_t)this + 264, *((unsigned int *)a2 + 70), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 33, (uint64_t)a2 + 264);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  return this;
}

void sub_1ADB7D6CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;

  kaldi::CuVector<float>::~CuVector(v4);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  *v1 = v5;
  v7 = (void *)v1[3];
  if (v7)
  {
    v1[4] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

float kaldi::nnet1::CheckNanInf<float>(uint64_t a1, char *a2)
{
  float result;
  _QWORD *v4;
  _QWORD v5[34];

  result = kaldi::CuMatrixBase<float>::Sum(a1);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"'inf' in ", 9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

float kaldi::nnet1::ComputeStdDev<float>(uint64_t a1)
{
  int v2;
  int v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _QWORD *v11;
  _QWORD v13[34];
  _BYTE v14[48];

  v3 = *(_DWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 20);
  v4 = kaldi::CuMatrixBase<float>::Sum(a1);
  v5 = kaldi::CuMatrix<float>::CuMatrix(v14, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements(v5, a1);
  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v14);
  v7 = (float)(v3 * v2);
  v8 = v4 / v7;
  v9 = v6 / v7;
  if ((float)(v9 - (float)(v8 * v8)) >= 0.0)
  {
    v10 = v9 - (float)(v8 * v8);
  }
  else
  {
    v10 = 0.0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Forcing the variance to be non-negative! ", 41);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"->0.0", 5);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return sqrtf(v10);
}

void sub_1ADB7D8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1 - 96);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::Recurrent *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 66) = off_1E5D32508;
  v5 = *((_QWORD *)v4 + 1);
  *((_WORD *)this + 272) = *((_WORD *)v4 + 8);
  *((_QWORD *)this + 67) = v5;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 69, *((const void **)v4 + 3), *((_QWORD *)v4 + 4), (uint64_t)(*((_QWORD *)v4 + 4) - *((_QWORD *)v4 + 3)) >> 3);
  *((_QWORD *)this + 66) = off_1E5D2E4A0;
  *((_QWORD *)this + 72) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 599) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 584) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D150B0, (uint64_t)a2);
  *(_QWORD *)this = &off_1E5D32690;
  *((_QWORD *)this + 66) = &off_1E5D328E0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  *((_QWORD *)this + 26) = &unk_1E5D341C8;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, *((unsigned int *)a2 + 56), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 26, (uint64_t)a2 + 208);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 30, *((_QWORD *)a2 + 30), *((_QWORD *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 4));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 33, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 5);
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 36, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 4));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 39, *((_QWORD *)a2 + 39), *((_QWORD *)a2 + 40), (uint64_t)(*((_QWORD *)a2 + 40) - *((_QWORD *)a2 + 39)) >> 5);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 42, *((_QWORD *)a2 + 42), *((_QWORD *)a2 + 43), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 43) - *((_QWORD *)a2 + 42)) >> 4));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 45, *((_QWORD *)a2 + 45), *((_QWORD *)a2 + 46), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 4));
  v7 = *((_OWORD *)a2 + 24);
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  *((_OWORD *)this + 24) = v7;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 51, *((const void **)a2 + 51), *((_QWORD *)a2 + 52), (uint64_t)(*((_QWORD *)a2 + 52) - *((_QWORD *)a2 + 51)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 432, (char *)a2 + 432, 111);
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 60, *((_QWORD *)a2 + 60), *((_QWORD *)a2 + 61), (uint64_t)(*((_QWORD *)a2 + 61) - *((_QWORD *)a2 + 60)) >> 5);
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 63, *((_QWORD *)a2 + 63), *((_QWORD *)a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 64) - *((_QWORD *)a2 + 63)) >> 4));
  return this;
}

void sub_1ADB7DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, void **a12)
{
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  void *v17;

  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  v17 = *v13;
  if (*v13)
  {
    v12[52] = v17;
    operator delete(v17);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuVector<float>::~CuVector(v14);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v12, (uint64_t *)&off_1E5D150B0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v12 + 66));
  _Unwind_Resume(a1);
}

void sub_1ADB7DC88()
{
  JUMPOUT(0x1ADB7DC20);
}

void sub_1ADB7DC90()
{
  JUMPOUT(0x1ADB7DC2CLL);
}

void sub_1ADB7DC98()
{
  JUMPOUT(0x1ADB7DC3CLL);
}

void sub_1ADB7DCA0()
{
  JUMPOUT(0x1ADB7DC4CLL);
}

void sub_1ADB7DCA8()
{
  JUMPOUT(0x1ADB7DC58);
}

void sub_1ADB7DCB0()
{
  JUMPOUT(0x1ADB7DC68);
}

void sub_1ADB7DCB8()
{
  JUMPOUT(0x1ADB7DC78);
}

void sub_1ADB7DCC0()
{
  JUMPOUT(0x1ADB7DC60);
}

void sub_1ADB7DD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::EnsureTrainingBuffers(kaldi::nnet1::Recurrent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  if (!*((_BYTE *)this + 389))
  {
    v2 = *((_DWORD *)this + 39);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = (v3 + 1);
    else
      v4 = 1;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 45, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 36, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 39, (int)v4);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 30) + 48 * v5), *((unsigned int *)this + 45), *((unsigned int *)this + 44), 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 33) + 32 * v5, *((unsigned int *)this + 56), 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 45) + 48 * v5), v6, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 36) + 48 * v5), *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 39) + 32 * v5, *((unsigned int *)this + 56), 1);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 36) + 48 * v5, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 39) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    if (*((float *)this + 100) > 0.0)
      kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 54, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0);
    *((_BYTE *)this + 389) = 1;
  }
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, const kaldi::nnet1::ConvolutionalComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D2EDA8;
  v6 = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 11) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 104, (char *)a2 + 104, 111);
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, *((unsigned int *)a2 + 42), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 19, (uint64_t)a2 + 152);
  v7 = *((_QWORD *)a2 + 23);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = v7;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 24, *((_QWORD *)a2 + 24), *((_QWORD *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 4));
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 27, *((_QWORD *)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 5);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 30, *((_QWORD *)a2 + 30), *((_QWORD *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 4));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 33, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 5);
  v8 = *((_QWORD *)a2 + 36);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_QWORD *)this + 36) = v8;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 38, *((_QWORD *)a2 + 38), *((_QWORD *)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 4));
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 41, *((_QWORD *)a2 + 41), *((_QWORD *)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 42) - *((_QWORD *)a2 + 41)) >> 4));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 44, *((const void **)a2 + 44), *((_QWORD *)a2 + 45), (uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 2);
  *((_BYTE *)this + 376) = *((_BYTE *)a2 + 376);
  return this;
}

void sub_1ADB7E1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(a2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(kaldi::nnet1::ConvolutionalComponent *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<unsigned int>::size_type v5;
  uint64_t v6;
  unsigned int v7;

  if (!*((_BYTE *)this + 376))
  {
    v2 = *((_DWORD *)this + 46);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 24, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 27, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, v4);
    if (v4 >= 1)
    {
      v6 = 0;
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 24) + 48 * v6), *((unsigned int *)this + 31), *((unsigned int *)this + 30), 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 27) + 32 * v6, *((unsigned int *)this + 31), 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 30) + 48 * v6), *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 33) + 32 * v6, *((unsigned int *)this + 31), 1);
          if (*((_DWORD *)this + 46) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 30) + 48 * v6, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 33) + 32 * v6, 1.0);
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 352), v5);
    *((_BYTE *)this + 376) = 1;
  }
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this, const kaldi::nnet1::MaxPooling2DComponent *a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1E5D2EA38;
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  return this;
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Desplice(kaldi::nnet1::Desplice *this, const kaldi::nnet1::Desplice *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1E5D32448;
  v5 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_QWORD *)this + 6) = v5;
  kaldi::CuArray<int>::CuArray((int *)this + 16, (uint64_t)a2 + 64);
  kaldi::CuArray<int>::CuArray((int *)this + 22, (uint64_t)a2 + 88);
  kaldi::CuArray<int>::CuArray((int *)this + 28, (uint64_t)a2 + 112);
  kaldi::CuArray<int>::CuArray((int *)this + 34, (uint64_t)a2 + 136);
  return this;
}

void sub_1ADB7E4F0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = (void *)v1[15];
  if (v7)
    free(v7);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v8 = (void *)v1[12];
  if (v8)
    free(v8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v9 = (void *)v1[9];
  if (v9)
    free(v9);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v1 = v5;
  v10 = (void *)v1[3];
  if (v10)
  {
    v1[4] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Desplice::Init(kaldi::nnet1::Desplice *this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  std::vector<int>::size_type v6;
  std::vector<int>::size_type v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v14;
  std::vector<int>::pointer v15;
  std::vector<int>::pointer v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  std::vector<int>::value_type v23;
  std::vector<int> __x;
  std::vector<int> v25;
  std::vector<int> v26;
  std::vector<int> v27;

  v2 = *((_DWORD *)this + 12);
  v3 = *((int *)this + 13) * (uint64_t)v2;
  v4 = *((_DWORD *)this + 14);
  v5 = *((_DWORD *)this + 2);
  std::vector<int>::vector(&v27, *((int *)this + 3) * v3);
  std::vector<int>::vector(&v26, *((int *)this + 3) * (uint64_t)(int)v3);
  v6 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v25, v6, (const std::vector<int>::value_type *)&__x);
  v7 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  v23 = -1;
  std::vector<int>::vector(&__x, v7, &v23);
  if ((int)v3 >= 1)
  {
    v8 = 0;
    v9 = v5 / v4;
    v10 = v4 / v2;
    do
    {
      if (v9 >= 1)
      {
        v11 = 0;
        v12 = 0;
        begin = v27.__begin_;
        v14 = v25.__begin_;
        v15 = v26.__begin_;
        v16 = __x.__begin_;
        do
        {
          if (v10 >= 1)
          {
            v17 = 0;
            v18 = v11;
            do
            {
              v19 = *((_DWORD *)this + 13);
              v20 = v8 / v19;
              v21 = v8 % v19;
              v22 = v20 + *((_DWORD *)this + 12) * v17 + *((_DWORD *)this + 14) * v12;
              begin[v18 + *((int *)this + 3) * (uint64_t)v8] = v21;
              v15[v18 + *((int *)this + 3) * (uint64_t)v8] = v22;
              v14[v22 + *((_DWORD *)this + 2) * v21] = v8;
              v16[v22 + *((_DWORD *)this + 2) * v21] = v11 + v17++;
              ++v18;
            }
            while (v10 != v17);
          }
          ++v12;
          v11 += v10;
        }
        while (v12 != v9);
      }
      ++v8;
    }
    while (v8 != (_DWORD)v3);
  }
  kaldi::CuArray<int>::Resize((uint64_t)this + 64, (unint64_t)((char *)v27.__end_ - (char *)v27.__begin_) >> 2, 1);
  memcpy(*((void **)this + 9), v27.__begin_, (char *)v27.__end_ - (char *)v27.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 88, (unint64_t)((char *)v26.__end_ - (char *)v26.__begin_) >> 2, 1);
  memcpy(*((void **)this + 12), v26.__begin_, (char *)v26.__end_ - (char *)v26.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 112, (unint64_t)((char *)v25.__end_ - (char *)v25.__begin_) >> 2, 1);
  memcpy(*((void **)this + 15), v25.__begin_, (char *)v25.__end_ - (char *)v25.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 136, (unint64_t)((char *)__x.__end_ - (char *)__x.__begin_) >> 2, 1);
  memcpy(*((void **)this + 18), __x.__begin_, (char *)__x.__end_ - (char *)__x.__begin_);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
}

void sub_1ADB7E7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  v20 = *(void **)(v18 - 72);
  if (v20)
  {
    *(_QWORD *)(v18 - 64) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::FramePoolingComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D2E910;
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3));
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3));
  v6 = *((_DWORD *)a2 + 42);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_DWORD *)this + 42) = v6;
  return this;
}

void sub_1ADB7E93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v2 + 13) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB7E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB7EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>(uint64_t *a1, const kaldi::nnet1::Nnet *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  kaldi::nnet1::Nnet *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xAE4C415C9882B9)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x51B3BEA3677D46CFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x572620AE4C415CLL)
    v9 = 0xAE4C415C9882B9;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::nnet1::Nnet *)&v10[376 * v4];
  v16 = &v10[376 * v9];
  kaldi::nnet1::Nnet::Nnet(v14, a2);
  v15 = (char *)v14 + 376;
  std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADB7EB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(uint64_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  int32x2_t **v5;
  int32x2_t *v6;
  int32x2_t *v7;
  uint64_t v8;

  if (((a1[1] - *a1) & 0x7FFFFFFF8) == 0)
    return kaldi::CuMatrix<float>::operator=(a3, a2);
  v5 = (int32x2_t **)(a1[9] + 24 * (int)a4);
  v6 = *v5;
  v7 = v5[1];
  while (v6 != v7)
  {
    v6[4] = a3[4];
    v6 += 6;
  }
  v8 = kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(a1, (uint64_t)a2, a4);
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1, 0);
  return (int32x2_t *)kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v8, 111);
}

uint64_t kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int32x2_t *v13;
  uint64_t v14;

  v6 = a3;
  v7 = 3 * a3;
  kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1[9] + 24 * a3), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(int **)(a1[9] + 8 * v7), a2, 111);
  v8 = *a1;
  v9 = (a1[1] - *a1) >> 3;
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_DWORD **)(v8 + 8 * v11++);
      v13 = (int32x2_t *)(*(_QWORD *)(a1[9] + 24 * v6) + v10);
      kaldi::nnet1::Component::Propagate(v12, (uint64_t)v13, v13 + 6, a3);
      v8 = *a1;
      v14 = a1[1] - *a1;
      v10 += 48;
    }
    while (v11 < (int)((unint64_t)v14 >> 3));
    v9 = v14 >> 3;
  }
  return *(_QWORD *)(a1[9] + 24 * v6) + 48 * v9;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::SetVecTable(kaldi::nnet1::CompressedWordTransComponent *this, const void **a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64x2_t v8;
  float *v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x2_t v12;

  v2 = *a2;
  if (*a2)
    LODWORD(v2) = v2[2];
  v3 = *((_DWORD *)this + 2);
  v4 = (int)v2 / v3;
  *((_DWORD *)this + 24) = v4;
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = v3;
    v7 = (v3 + 1) & 0x1FFFFFFFELL;
    v8 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v9 = (float *)(*((_QWORD *)this + 7) + 4);
    v10 = (int64x2_t)xmmword_1AE140A90;
    v11 = vdupq_n_s64(2uLL);
    do
    {
      v12 = vmovn_s64((int64x2_t)vcgeq_u64(v8, (uint64x2_t)v10));
      if ((v12.i8[0] & 1) != 0)
        *(v9 - 1) = (float)v5;
      if ((v12.i8[4] & 1) != 0)
        *v9 = (float)(v4 + v5);
      v10 = vaddq_s64(v10, v11);
      v9 += 2;
      v5 += 2 * v4;
      v7 -= 2;
    }
    while (v7);
  }
  return kaldi::CompressedMatrix::operator=((uint64_t)this + 80, a2);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, const kaldi::nnet1::SharedNceComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D2E378;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 88, (char *)a2 + 88, 111);
  *((_QWORD *)this + 17) = &unk_1E5D341C8;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, *((unsigned int *)a2 + 38), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 17, (uint64_t)a2 + 136);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 216, (char *)a2 + 216, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = &unk_1E5D341C8;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  kaldi::CuVector<float>::Resize((uint64_t)this + 312, *((unsigned int *)a2 + 82), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 39, (uint64_t)a2 + 312);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 43) = &unk_1E5D341C8;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  kaldi::CuVector<float>::Resize((uint64_t)this + 344, *((unsigned int *)a2 + 90), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 43, (uint64_t)a2 + 344);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &unk_1E5D341C8;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
  kaldi::CuVector<float>::Resize((uint64_t)this + 376, *((unsigned int *)a2 + 98), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 47, (uint64_t)a2 + 376);
  v6 = *(_OWORD *)((char *)a2 + 408);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  *(_OWORD *)((char *)this + 408) = v6;
  return this;
}

void sub_1ADB7EFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  kaldi::CuMatrix<float>::~CuMatrix(v13);
  kaldi::CuMatrix<float>::~CuMatrix(v12);
  kaldi::CuVector<float>::~CuVector(v11);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

void sub_1ADB7F034()
{
  JUMPOUT(0x1ADB7F01CLL);
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, const kaldi::nnet1::WordVecComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1E5D2D230;
  *((_QWORD *)this + 11) = &unk_1E5D2D360;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 96, (char *)a2 + 96, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 144, (char *)a2 + 144, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 192, (char *)a2 + 192, 111);
  v6 = *((_OWORD *)a2 + 15);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_OWORD *)this + 15) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 39, *((_QWORD *)a2 + 39), *((_QWORD *)a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 40) - *((_QWORD *)a2 + 39)) >> 4));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((_QWORD *)this + 42, *((_QWORD *)a2 + 42), *((_QWORD *)a2 + 43), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 43) - *((_QWORD *)a2 + 42)) >> 3));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((_QWORD *)this + 45, *((_QWORD *)a2 + 45), *((_QWORD *)a2 + 46), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 3));
  return this;
}

void sub_1ADB7F1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1ADB7F244()
{
  JUMPOUT(0x1ADB7F22CLL);
}

void sub_1ADB7F24C()
{
  JUMPOUT(0x1ADB7F234);
}

_QWORD *std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB7F2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  for (result = a4; a2 != a3; a2 += 40)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)result = &unk_1E5D29D40;
    *(_QWORD *)(result + 8) = v5;
    result += 40;
  }
  return result;
}

void kaldi::nnet1::FofeWordVecComponent::Prepare(int32x2_t *this, uint64_t a2)
{
  int32x2_t v4;
  uint64_t v5;
  float v6;

  if (this[51].i32[0] < (int)a2)
  {
    kaldi::CuMatrix<float>::Resize(this + 49, 1, a2, 1, 0);
    v4 = this[50];
    *(_DWORD *)(*(_QWORD *)&v4 + 4 * ((int)a2 - 1)) = 1065353216;
    v5 = (a2 - 2);
    if ((int)a2 >= 2)
    {
      v6 = *(float *)(*(_QWORD *)&v4 + 4 * v5 + 4);
      do
      {
        v6 = v6 * *(float *)this[48].i32;
        *(float *)(*(_QWORD *)&v4 + 4 * v5--) = v6;
      }
      while (v5 != -1);
    }
  }
  kaldi::CuMatrix<float>::Resize(this + 55, a2, this[1].u32[1], 1, 0);
}

void kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0::operator()()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "<AffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 257;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 258;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitLinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 259;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitLinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 260;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SharedNceComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 284;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ConvolutionalComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 261;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 262;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 263;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 264;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Convolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 265;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitConvolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 266;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitConvolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 267;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 274;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitLstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 275;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitLstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 276;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GatedRecurrentUnit>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 277;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SimplerSimpleRecurrentUnit>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 278;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Recurrent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 273;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<BidirectionalRecurrentComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 280;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<WordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 268;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FofeWordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 269;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<WordMultiVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 270;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordMultiVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 272;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 271;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FixedAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 279;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MovingAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 281;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GlobalAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 282;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GlobalRecurrentAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 283;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ScaledDotAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 285;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MultiHeadAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 286;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SupervisedMultiHeadAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 287;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SelfAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 288;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AverageAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 289;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LayerNorm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 290;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Softmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 513;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LogSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 514;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<BlockSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 515;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MultiSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 522;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<RelaxedSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 523;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Sigmoid>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 516;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Tanh>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 517;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Dropout>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 518;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Maxout>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 519;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rectified>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 520;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ExponentialLinear>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 524;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ScaledExponentialLinear>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 525;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<PNorm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 521;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rbm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1025;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Splice>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1026;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Desplice>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1027;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Copy>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1028;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CnnRearrangeComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1036;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<PaddingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1037;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Padding2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1038;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AddShift>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1031;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rescale>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1032;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<QuantizedAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1033;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1035;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<NormalizeComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1034;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<KlHmm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2048;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AveragePoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2050;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AveragePooling2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2051;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2052;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MaxPooling2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2053;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SentenceAveragingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2049;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FramePoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2054;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ParallelComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2055;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Duplicate>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2056;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Identity>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2057;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<TemporalMaxPooling>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2058;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<InterpolationComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1039;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordTransComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1040;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<VectorwiseQuantized8BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1041;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<VectorwiseQuantized16BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1042;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1ADB809F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "NoGradNorm");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ClipValue");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ClipL2Norm");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Rmsprop");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 3;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1ADB80CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Identity");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Uniform");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Gauss");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1ADB80E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D31948;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 88) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0);
  return a1;
}

void sub_1ADB80EC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  *v1 = off_1E5D32508;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v2, a1);
  return v2;
}

void sub_1ADB80F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetType()
{
  return 1041;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is vectorwise quantized");
  v4 = std::string::append(&v11, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 88);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADB81068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, a1 + 48, 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE v8[16];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v8);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v8, a2 + 8, a4 + 8, 1.0);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4;
  _BYTE v6[16];

  v4 = *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v6);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Read((unsigned int *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

_QWORD *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_1E5D31948;
  a1[11] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(a1 + 11));
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C4077774924);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  *a1 = off_1E5D32508;
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = &unk_1E5D31948;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  *(_QWORD *)(a1 + 88) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a2 + 104), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_1ADB81400(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D31A08;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 88) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0);
  return a1;
}

void sub_1ADB814B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v2);
  *v1 = off_1E5D32508;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(v2, a1);
  return v2;
}

void sub_1ADB8155C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetType()
{
  return 1042;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is vectorwise quantized");
  v4 = std::string::append(&v11, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 88);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADB81660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, a1 + 48, 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE v8[16];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v8);
  kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v8, a2 + 8, a4 + 8, 1.0);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4;
  _BYTE v6[16];

  v4 = *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,short>(a2, (uint64_t)v6);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Read((unsigned int *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

_QWORD *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_1E5D31A08;
  a1[11] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(a1 + 11));
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40BDFB0063);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  *a1 = off_1E5D32508;
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = &unk_1E5D31A08;
  kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  *(_QWORD *)(a1 + 88) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a2 + 104), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_1ADB819F8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void NgramEvalStats::NgramEvalStats(NgramEvalStats *this, Vocab *a2, int a3)
{
  _QWORD *v3;

  NgramCounts<unsigned long>::NgramCounts(this, a2, a3);
  *v3 = &off_1E5D16528;
}

_QWORD *NgramEvalStats::_incrementCounts(NgramEvalStats *this, const unsigned int *a2, unsigned int a3, uint64_t a4)
{
  NgramEvalStats *v5;
  _QWORD *result;
  BOOL v7;
  int v8;
  unsigned int v9;
  unsigned int v12;
  char v13;

  v5 = this;
  result = (_QWORD *)((char *)this + 160);
  LODWORD(v5) = *((_DWORD *)v5 + 39);
  v7 = __OFSUB__(a3, (_DWORD)v5);
  v8 = a3 - (_DWORD)v5;
  if (v8 < 0 != v7)
    v9 = 0;
  else
    v9 = v8 + 1;
  for (; v9 <= a3; ++v9)
  {
    v12 = a2[v9];
    v13 = 0;
    result = (_QWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(result, v12, &v13);
    if (!v13)
      *(_DWORD *)result = 0;
  }
  result[1] += a4;
  return result;
}

uint64_t NgramEvalStats::countSentence(NgramEvalStats *this, const unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (*a2 == -1)
  {
    v6 = 0;
    v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramEvalStats::_incrementCounts(this, a2, v6, a3);
      v6 = (v6 + 1);
    }
    while (a2[v6] != -1);
    v7 = *a2;
  }
  *((double *)this + 8) = *((double *)this + 8) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)))
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  if ((_DWORD)v6)
  {
    v8 = a2[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3)))
      *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  return v6;
}

void NgramEvalStats::~NgramEvalStats(NgramEvalStats *this)
{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::IndexRuleLmeWordTagger::init(uint64_t *a1, quasar::SystemConfig *this, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  uint64_t Ptree;
  const std::string *String;
  uint64_t v36;
  uint64_t ChildOptional;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  int v41;
  __int128 *v42;
  unint64_t v43;
  uint64_t v44;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string v63;
  char v64;
  std::string v65;
  _BYTE v66[40];
  __int128 v67;
  unsigned __int8 v68;
  __int128 v69;
  int64_t v70;

  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(this);
  quasar::SystemConfig::Version::Version(&v65, 90, 0);
  if (quasar::SystemConfig::Version::operator<(__p, &v65))
  {
    if (quasar::gLogLevel >= 1)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for index rule denumeration", 61);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return 0;
  }
  v7 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v63, "lme-word-tagger");
  v8 = std::string::insert(v7, 0, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v65, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)&v47 = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v67, "index-rule-tagger");
  if ((v68 & 0x80u) == 0)
    v12 = (const std::string::value_type *)&v67;
  else
    v12 = (const std::string::value_type *)v67;
  if ((v68 & 0x80u) == 0)
    v13 = v68;
  else
    v13 = *((_QWORD *)&v67 + 1);
  v14 = std::string::append((std::string *)__p, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v70 = v14->__r_.__value_.__r.__words[2];
  v69 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v68 < 0)
    operator delete((void *)v67);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)&v69, (uint64_t)__p);
  quasar::IndexRuleLmeWordTagger::registerParams((uint64_t)a1, this, (uint64_t)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::getPrefix(this, &v63);
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v63, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v21 = (const std::string::value_type *)&v69;
  else
    v21 = (const std::string::value_type *)v69;
  if (v70 >= 0)
    v22 = HIBYTE(v70);
  else
    v22 = *((_QWORD *)&v69 + 1);
  v23 = std::string::append(&v65, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v47 = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 0, 0);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  quasar::SystemConfig::getPrefix(this, &v63);
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append(&v63, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v30 = (const std::string::value_type *)&v69;
  else
    v30 = (const std::string::value_type *)v69;
  if (v70 >= 0)
    v31 = HIBYTE(v70);
  else
    v31 = *((_QWORD *)&v69 + 1);
  v32 = std::string::append(&v65, v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&v47 = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  Ptree = quasar::SystemConfig::getPtree((uint64_t)this, (uint64_t)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  quasar::PTree::PTree((quasar::PTree *)&v65);
  std::string::basic_string[abi:ne180100]<0>(__p, "rules");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)__p, &v63);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if (!v64)
    goto LABEL_68;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v63.__r_.__value_.__l.__size_)
      goto LABEL_62;
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(__p, "rules");
    ChildOptional = quasar::PTree::getChildOptional(Ptree, (uint64_t)__p);
    v38 = ChildOptional;
    if (SBYTE7(v47) < 0)
    {
      operator delete(__p[0]);
      if (v38)
        goto LABEL_70;
    }
    else if (ChildOptional)
    {
LABEL_70:
      LODWORD(v65.__r_.__value_.__l.__data_) = *(_DWORD *)v38;
      std::string::operator=((std::string *)&v65.__r_.__value_.__r.__words[1], (const std::string *)(v38 + 8));
      if (&v65 != (std::string *)v38)
        std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v66, *(std::string **)(v38 + 32), *(std::string **)(v38 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v38 + 40) - *(_QWORD *)(v38 + 32)) >> 3));
      v66[24] = *(_BYTE *)(v38 + 56);
      goto LABEL_73;
    }
    if (quasar::gLogLevel >= 1)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Enumeration rules not configured", 32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    v6 = 0;
    goto LABEL_87;
  }
  if (!*((_BYTE *)&v63.__r_.__value_.__s + 23))
    goto LABEL_68;
LABEL_62:
  std::string::basic_string[abi:ne180100]<0>(&v67, "rules");
  String = (const std::string *)quasar::PTree::getString(Ptree, &v67);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](__p, String, 24);
  if ((char)v68 < 0)
    operator delete((void *)v67);
  quasar::PTree::readJson((uint64_t)&v65, __p);
  __p[0] = *(void **)MEMORY[0x1E0DE4F50];
  v36 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v47 = v36;
  *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v52) < 0)
    operator delete(v51[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v54);
LABEL_73:
  v39 = quasar::PTree::begin((quasar::PTree *)&v65);
  for (i = quasar::PTree::end((quasar::PTree *)&v65); v39 != i; v39 += 88)
  {
    LODWORD(v67) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "index");
    v41 = quasar::PTree::getInt<int>(v39 + 24, (__int128 *)__p);
    if (SBYTE7(v47) < 0)
      operator delete(__p[0]);
    LODWORD(v67) = v41;
    std::string::basic_string[abi:ne180100]<0>(__p, "tag");
    v42 = (__int128 *)quasar::PTree::getString(v39 + 24, (__int128 *)__p);
    if (SBYTE7(v47) < 0)
      operator delete(__p[0]);
    v43 = a1[2];
    if (v43 >= a1[3])
    {
      v44 = std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__emplace_back_slow_path<int &,std::string const&>(a1 + 1, &v67, v42);
    }
    else
    {
      std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__construct_one_at_end[abi:ne180100]<int &,std::string const&>((uint64_t)(a1 + 1), &v67, v42);
      v44 = v43 + 32;
    }
    a1[2] = v44;
  }
  v6 = 1;
LABEL_87:
  if (v64 && SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)&v65);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)v69);
  return v6;
}

void sub_1ADB822D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  if (*(_BYTE *)(v14 - 216) && *(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  quasar::PTree::~PTree((quasar::PTree *)(v14 - 208));
  if (*(char *)(v14 - 89) < 0)
    operator delete(*(void **)(v14 - 112));
  _Unwind_Resume(a1);
}

void quasar::IndexRuleLmeWordTagger::registerParams(uint64_t a1, quasar::SystemConfig *this, uint64_t a3)
{
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string __p;
  std::string v16;

  quasar::SystemConfig::getPrefix(this, &v16);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, size + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v16;
    else
      v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
    memmove(v7, v8, size);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 46;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v14, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "default-tag");
  std::string::basic_string[abi:ne180100]<0>(&v14, "The default tag for denumeration");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 32, (uint64_t)&v14, 1, 90, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1ADB82628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::IndexRuleLmeWordTagger::~IndexRuleLmeWordTagger(void **this)
{
  void **v2;

  *this = &off_1E5D389E8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this + 1;
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  quasar::IndexRuleLmeWordTagger::~IndexRuleLmeWordTagger(this);
  JUMPOUT(0x1AF44D190);
}

std::string *quasar::IndexRuleLmeWordTagger::addTagsToWord(std::string *result, std::string **a2)
{
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  std::string::size_type *v15;
  unsigned __int8 *v16;

  v3 = result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      result = std::string::operator=(v4 + 1, (std::string *)((char *)v3 + 32));
      v4 = (std::string *)((char *)v4 + 80);
    }
    while (v4 != v5);
  }
  size = v3->__r_.__value_.__l.__size_;
  v7 = v3->__r_.__value_.__r.__words[2];
  if (size != v7)
  {
    while (1)
    {
      v8 = *(_DWORD *)size;
      if ((*(_DWORD *)size & 0x80000000) != 0)
      {
        v8 -= 858993459 * (((char *)a2[1] - (char *)*a2) >> 4);
        if (v8 < 0)
          goto LABEL_24;
      }
      if (0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 4) <= v8)
        goto LABEL_24;
      v9 = (uint64_t)*a2 + 80 * v8;
      v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v9 + 47);
      else
        v11 = *(_QWORD *)(v9 + 32);
      v12 = v3[2].__r_.__value_.__s.__data_[7];
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = v3[1].__r_.__value_.__r.__words[2];
      if (v11 != v12)
        goto LABEL_24;
      v14 = (std::string *)(v9 + 24);
      v15 = v13 >= 0 ? &v3[1].__r_.__value_.__r.__words[1] : (std::string::size_type *)v3[1].__r_.__value_.__l.__size_;
      if ((v10 & 0x80) == 0)
        break;
      result = (std::string *)memcmp(v14->__r_.__value_.__l.__data_, v15, *(_QWORD *)(v9 + 32));
      if (!(_DWORD)result)
        goto LABEL_23;
LABEL_24:
      size += 32;
      if (size == v7)
        return result;
    }
    if (*(_BYTE *)(v9 + 47))
    {
      v16 = (unsigned __int8 *)(v9 + 24);
      while (*v16 == *(unsigned __int8 *)v15)
      {
        ++v16;
        v15 = (std::string::size_type *)((char *)v15 + 1);
        if (!--v10)
          goto LABEL_23;
      }
      goto LABEL_24;
    }
LABEL_23:
    result = std::string::operator=(v14, (const std::string *)(size + 8));
    goto LABEL_24;
  }
  return result;
}

void quasar::getLmeWordTagger(quasar::SystemConfig *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  quasar::PTree *PtreeOptional;
  uint64_t ChildOptional;
  uint64_t v13;
  _QWORD *v14;
  std::string v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a1);
  quasar::SystemConfig::Version::Version(&v15, 90, 0);
  if (quasar::SystemConfig::Version::operator<(__p, &v15))
  {
    if (quasar::gLogLevel >= 5)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for denumeration", 50);
LABEL_28:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  v9 = std::string::append(&v15, "lme-word-tagger");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&v17 = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional((uint64_t)a1, (uint64_t)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if (PtreeOptional)
      goto LABEL_18;
LABEL_26:
    if (quasar::gLogLevel >= 5)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LmeWordTagger not used", 22);
      goto LABEL_28;
    }
LABEL_29:
    *a3 = 0;
    return;
  }
  if (!PtreeOptional)
    goto LABEL_26;
LABEL_18:
  if (quasar::PTree::size(PtreeOptional) != 1 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported number of lme-word-taggers", 38);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "index-rule-tagger");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)PtreeOptional, (uint64_t)__p);
  v13 = ChildOptional;
  if ((SBYTE7(v17) & 0x80000000) == 0)
  {
    if (ChildOptional)
      goto LABEL_23;
LABEL_32:
    if (quasar::gLogLevel >= 1)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported lme-word-tagger", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!v13)
    goto LABEL_32;
LABEL_23:
  v14 = (_QWORD *)operator new();
  v14[5] = 0;
  v14[6] = 0;
  v14[4] = 0;
  *v14 = &off_1E5D389E8;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = 0;
  std::string::basic_string[abi:ne180100]<0>(v14 + 4, "");
  if (((*(uint64_t (**)(_QWORD *, quasar::SystemConfig *, const void **))(*v14 + 16))(v14, a1, a2) & 1) != 0)
  {
    *a3 = v14;
  }
  else
  {
    *a3 = 0;
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
}

void sub_1ADB82BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  _Unwind_Resume(a1);
}

void std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__construct_one_at_end[abi:ne180100]<int &,std::string const&>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  v5 = (std::string *)(v4 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(v4 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_1ADB82D1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__emplace_back_slow_path<int &,std::string const&>(uint64_t *a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  *(_DWORD *)v13 = *a2;
  v14 = (std::string *)(v13 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v13 = v19;
  }
  else
  {
    v15 = *a3;
    *((_QWORD *)v13 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v19 = v13 + 32;
  std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1ADB82E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t ResolveIndexForCollation(_QWORD *a1, int a2)
{
  if (a2 == 2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  if (a2 != 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Function %s has not been implemented.\n", "ResolveIndexForCollation");
    exit(1);
  }
  return quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetNormalizationCollationIndex(a1);
}

uint64_t SDWord_GetHandle(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(void *, const char *))(*(_QWORD *)a1 + 32))(a1, a2);
  if (v2 == -1)
    return 0;
  else
    return v2 + 1;
}

uint64_t SDWord_GetName(void *a1, char *a2, char *a3, unint64_t a4)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  v6 = (const void *)(*(uint64_t (**)(void *, char *))(*(_QWORD *)a1 + 48))(a1, a2 - 1);
  v8 = v7;
  if (a4)
  {
    if (v7 + 1 < a4)
      v9 = v7 + 1;
    else
      v9 = a4;
    memcpy(a3, v6, v9);
  }
  return v8;
}

int *SDWord_GetTagBits(uint64_t a1, uint64_t a2, int a3, _WORD *a4, size_t a5)
{
  int *result;
  _WORD *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int *Metadata;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  _OWORD v18[17];

  result = (int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2 - 1);
  v10 = result;
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Function %s has not been implemented.\n", "SDWord_GetTagBits");
      exit(1);
    }
    v10 = (_WORD *)result + 1;
    result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
    v11 = (unsigned __int16 *)((char *)result - *result);
    if (*v11 >= 0xBu)
    {
      v12 = v11[5];
      if (v12)
      {
        if (*(int *)((char *)result + v12) >= 1)
        {
          bzero(a4, a5);
          Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
          v14 = (unsigned __int16 *)((char *)Metadata - *Metadata);
          if (*v14 < 0xBu || (v15 = v14[5]) == 0 || (*((_BYTE *)Metadata + v15) & 7) == 0)
          {
            result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
            v16 = (unsigned __int16 *)((char *)result - *result);
            if (*v16 < 0xBu)
            {
              v17 = 0;
            }
            else
            {
              v17 = v16[5];
              if (v17)
                v17 = (uint64_t)(*(int *)((char *)result + v17) + (*(int *)((char *)result + v17) < 0 ? 7 : 0)) >> 3;
            }
            if (a5 > v17 && a5 - v17 > 1)
            {
              a4 = (_WORD *)((char *)a4 + v17);
              goto LABEL_13;
            }
          }
LABEL_18:
          memset(v18, 0, sizeof(v18));
          quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
        }
      }
    }
  }
  if (a5 != 2)
    goto LABEL_18;
LABEL_13:
  *a4 = *v10;
  return result;
}

uint64_t SDVoc_GetAllowedWordCollations(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _OWORD v4[17];

  if (a3 <= 1)
  {
    memset(v4, 0, sizeof(v4));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  *a2 = 0x300000002;
  return 2;
}

uint64_t SDVoc_GetCollationName(int a1, int a2, void *__dst, unint64_t a4)
{
  size_t v4;
  _DWORD *exception;
  _OWORD v7[17];

  if (a2 != 3)
  {
    if (quasar::gLogLevel >= -1)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown collation ", 18);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = 0;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  if (a4)
  {
    v4 = 10;
    if (a4 < 0xA)
      v4 = a4;
    memcpy(__dst, "tokencoll", v4);
  }
  return 9;
}

void sub_1ADB8341C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void SDVoc_GetWords(_QWORD *a1, int a2, char *a3, char *a4, uint64_t a5, unint64_t a6, unint64_t *a7, _QWORD *a8, unint64_t *a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  unint64_t v22;
  void *p_p;
  void *v24;
  void **v25;
  void *v26;
  void **v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *__p;
  unint64_t v35;
  unsigned __int8 v36;
  _QWORD v37[2];
  void *v38[2];
  char v39;
  void *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;

  if (a12)
    *a12 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v18 = ResolveIndexForCollation(a1, a2);
  if (!*a3)
  {
    if (!*a4)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Function %s has not been implemented.\n", "SDVoc_GetWords");
      exit(1);
    }
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  v19 = v18;
  std::string::basic_string[abi:ne180100]<0>(v40, a3);
  if (*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, a4);
    v20 = (void *)BYTE7(v41);
    v21 = v40;
    if (SBYTE7(v41) < 0)
    {
      v21 = (void **)v40[0];
      v20 = v40[1];
    }
    __p = v21;
    v35 = (unint64_t)v20;
    (*(void (**)(uint64_t, void **, _QWORD **))(*(_QWORD *)v19 + 40))(v19, &__p, &v57);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v40, (const void **)v38, (uint64_t)&__p);
    v22 = v36;
    if ((v36 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v36 & 0x80u) != 0)
      v22 = v35;
    v37[0] = p_p;
    v37[1] = v22;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD **))(*(_QWORD *)v19 + 24))(v19, v37, 1, &v57);
    if ((char)v36 < 0)
      operator delete(__p);
    v24 = (void *)BYTE7(v41);
    v25 = v40;
    if (SBYTE7(v41) < 0)
    {
      v25 = (void **)v40[0];
      v24 = v40[1];
    }
    __p = v25;
    v35 = (unint64_t)v24;
    *a12 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 56))(v19, &__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  else
  {
    v26 = (void *)BYTE7(v41);
    v27 = v40;
    if (SBYTE7(v41) < 0)
    {
      v27 = (void **)v40[0];
      v26 = v40[1];
    }
    v38[0] = v27;
    v38[1] = v26;
    (*(void (**)(uint64_t, void **, uint64_t, _QWORD **))(*(_QWORD *)v19 + 24))(v19, v38, 1, &v57);
  }
  if (SBYTE7(v41) < 0)
    operator delete(v40[0]);
  v29 = v57;
  v28 = v58;
  if (a6 < v58 - v57)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  *a8 = a5;
  *a9 = a6;
  if (v28 == v29)
  {
    v30 = 0;
  }
  else
  {
    v30 = 0;
    v28 = v29;
    do
    {
      v31 = v28[v30];
      v32 = __CFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        v33 = 0;
      *(_QWORD *)(*a8 + 8 * v30++) = v33;
      v28 = v57;
    }
    while (v30 < v58 - v57);
  }
  *a7 = v30;
  if (v28)
  {
    v58 = v28;
    operator delete(v28);
  }
}

void sub_1ADB83710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (a30 < 0)
    operator delete(__p);
  v32 = *(void **)(v30 - 104);
  if (v32)
  {
    *(_QWORD *)(v30 - 96) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

int *SDVoc_GetInfo(uint64_t a1, _QWORD *a2)
{
  int *Metadata;
  unsigned __int16 *v5;
  uint64_t v6;
  int *result;
  unsigned __int16 *v8;
  uint64_t v9;

  *a2 = 0x200000002;
  Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
  v5 = (unsigned __int16 *)((char *)Metadata - *Metadata);
  if (*v5 < 7u)
  {
    v6 = 0;
  }
  else
  {
    v6 = v5[3];
    if (v6)
      v6 = *(int *)((char *)Metadata + v6);
  }
  a2[1] = v6;
  result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
  v8 = (unsigned __int16 *)((char *)result - *result);
  if (*v8 < 9u)
  {
    v9 = 0;
  }
  else
  {
    v9 = v8[4];
    if (v9)
      v9 = *(int *)((char *)result + v9);
  }
  a2[2] = v9;
  return result;
}

uint64_t SDColl_StringCompare(_QWORD *a1, int a2, const char *a3, const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v6 = *(_QWORD *)(ResolveIndexForCollation(a1, a2) + 8);
  v10[0] = a3;
  v10[1] = strlen(a3);
  v9[0] = a4;
  v9[1] = strlen(a4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v10, v9);
}

void *SDEnv_GetData(uint64_t a1, const char *a2, void *a3, unint64_t a4)
{
  uint64_t v4;
  void *v8;
  void *v9;
  int v10;
  int *Metadata;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  int v23;
  void *v24;
  void **v25;
  size_t v26;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  _DWORD *exception;
  void *__s1[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (*(_DWORD *)a1 != 8 || (v4 = *(_QWORD *)(a1 + 8)) == 0)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__s1 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(__s1, "VocVersionID");
  v8 = (void *)strlen(a2);
  if ((SBYTE7(v33) & 0x80000000) == 0)
  {
    if (v8 != (void *)BYTE7(v33))
      goto LABEL_13;
    if (v8 != (void *)-1)
    {
      if (!memcmp(__s1, a2, (size_t)v8))
        goto LABEL_11;
      goto LABEL_13;
    }
LABEL_54:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 != __s1[1])
  {
    operator delete(__s1[0]);
    goto LABEL_13;
  }
  if (v8 == (void *)-1)
    goto LABEL_54;
  v9 = __s1[0];
  v10 = memcmp(__s1[0], a2, (size_t)v8);
  operator delete(v9);
  if (!v10)
  {
LABEL_11:
    Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
    v12 = *(unsigned __int16 *)((char *)Metadata - *Metadata + 4);
LABEL_22:
    std::string::basic_string[abi:ne180100](__s1, (char *)Metadata + v12 + *(unsigned int *)((char *)Metadata + v12) + 4, *(unsigned int *)((char *)Metadata + v12 + *(unsigned int *)((char *)Metadata + v12)));
    goto LABEL_37;
  }
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(__s1, "_LmCategoryStrings");
  v13 = (void *)strlen(a2);
  if ((SBYTE7(v33) & 0x80000000) == 0)
  {
    if (v13 != (void *)BYTE7(v33))
      goto LABEL_24;
    if (v13 != (void *)-1)
    {
      if (!memcmp(__s1, a2, (size_t)v13))
        goto LABEL_21;
      goto LABEL_24;
    }
LABEL_55:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 != __s1[1])
  {
    operator delete(__s1[0]);
    goto LABEL_24;
  }
  if (v13 == (void *)-1)
    goto LABEL_55;
  v14 = __s1[0];
  v15 = memcmp(__s1[0], a2, (size_t)v13);
  operator delete(v14);
  if (!v15)
  {
LABEL_21:
    Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
    v12 = *(unsigned __int16 *)((char *)Metadata - *Metadata + 12);
    goto LABEL_22;
  }
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(__s1, "CategoryStringSize");
  v16 = (void *)strlen(a2);
  if (SBYTE7(v33) < 0)
  {
    if (v16 == __s1[1])
    {
      if (v16 == (void *)-1)
LABEL_53:
        std::string::__throw_out_of_range[abi:ne180100]();
      v17 = __s1[0];
      v18 = memcmp(__s1[0], a2, (size_t)v16);
      operator delete(v17);
      if (!v18)
        goto LABEL_32;
    }
    else
    {
      operator delete(__s1[0]);
    }
LABEL_57:
    if (quasar::gLogLevel < -1)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 0;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__s1 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Unknown key '", 13);
    v29 = strlen(a2);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)a2, v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "'");
LABEL_52:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if (v16 != (void *)BYTE7(v33))
    goto LABEL_57;
  if (v16 == (void *)-1)
    goto LABEL_53;
  if (memcmp(__s1, a2, (size_t)v16))
    goto LABEL_57;
LABEL_32:
  v19 = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xFu && (v21 = v20[7]) != 0)
    v22 = *(int *)((char *)v19 + v21);
  else
    v22 = 0;
  std::to_string((std::string *)__s1, v22);
LABEL_37:
  v23 = SBYTE7(v33);
  if ((SBYTE7(v33) & 0x80u) == 0)
    v24 = (void *)BYTE7(v33);
  else
    v24 = __s1[1];
  if (a4)
  {
    if ((SBYTE7(v33) & 0x80u) == 0)
      v25 = __s1;
    else
      v25 = (void **)__s1[0];
    if ((unint64_t)v24 + 1 < a4)
      v26 = (size_t)v24 + 1;
    else
      v26 = a4;
    memcpy(a3, v25, v26);
  }
  if (v23 < 0)
    operator delete(__s1[0]);
  return v24;
}

void sub_1ADB83C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void sub_1ADB83D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1ADB83EE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t fst::MinimizeCompactLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  float v5;
  void *v6[2];
  void *__p[2];
  __int128 v8;

  v4 = a1;
  v5 = a2;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  v2 = fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Minimize((float *)&v4);
  if (__p[1])
  {
    *(void **)&v8 = __p[1];
    operator delete(__p[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return v2;
}

void sub_1ADB83F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Minimize(float *a1)
{
  _QWORD v3[34];

  if ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1 + 64))(*(_QWORD *)a1, 0x4000000000, 1)|| fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*(_QWORD *)a1))
  {
    fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateHashValues(a1);
    fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateMap(a1);
    fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ModifyModel((uint64_t *)a1);
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Topological sorting of state-level lattice failed (probably your lexicon has empty words or your LM has epsilon cycles; this  is a bad idea.)",
        141);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
    return 0;
  }
}

void sub_1ADB84034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateHashValues(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;

  v2 = a1 + 2;
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<unsigned long>::resize((uint64_t)v2, v3);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  if ((int)result < 1)
    return result;
  v5 = result;
  do
  {
    v6 = v5--;
    v17 = 0;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v10, *a1, v5);
    fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::InitHashValue((uint64_t)&v10, &v17);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    v7 = *a1;
    v16 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v5, v14);
    while (1)
    {
      result = v14[0];
      if (!v14[0])
      {
        if (v16 >= v14[2])
          goto LABEL_21;
        goto LABEL_11;
      }
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]);
      result = v14[0];
      if (v8)
        break;
      if (v14[0])
      {
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14[0] + 32))(v14[0]);
        goto LABEL_12;
      }
LABEL_11:
      v9 = v14[1] + 48 * v16;
LABEL_12:
      v13 = 0;
      if (v6 <= *(int *)(v9 + 40))
      {
        v13 = *(_QWORD *)(*v2 + 8 * *(unsigned int *)(v9 + 40));
      }
      else
      {
        v13 = 1;
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Minimizing lattice with self-loops (lattices should not have self-loops)", 72);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        }
      }
      fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::UpdateHashValueForTransition(v9 + 8, *(_DWORD *)v9, &v13, &v17);
      if (v14[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
      else
        ++v16;
    }
    if (v14[0])
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14[0] + 8))(v14[0]);
      goto LABEL_23;
    }
LABEL_21:
    if (v15)
      --*v15;
LABEL_23:
    *(_QWORD *)(*v2 + 8 * v5) = v17;
  }
  while (v6 > 1);
  return result;
}

void sub_1ADB842A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateMap(float *a1)
{
  int v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t *v33[34];
  __int128 v34;
  __int128 v35;
  int v36;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 160))(*(_QWORD *)a1);
  v34 = 0u;
  v35 = 0u;
  v36 = 1065353216;
  v3 = v2;
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v33[0] = (uint64_t *)(*((_QWORD *)a1 + 2) + 8 * i);
      v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v34, (unint64_t *)v33[0], (uint64_t)&std::piecewise_construct, v33);
      v6 = v5;
      v7 = (char *)v5[4];
      v8 = (uint64_t)(v5 + 5);
      v9 = v5[5];
      if ((unint64_t)v7 >= v9)
      {
        v11 = (char *)v5[3];
        v12 = (v7 - v11) >> 2;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)v11;
        v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
        if (v14 <= v12 + 1)
          v14 = v12 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v15);
          v11 = (char *)v6[3];
          v7 = (char *)v6[4];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = i;
        v10 = v17 + 4;
        while (v7 != v11)
        {
          v18 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        v6[3] = v17;
        v6[4] = v10;
        v6[5] = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v7 = i;
        v10 = v7 + 4;
      }
      v6[4] = v10;
    }
  }
  v19 = (uint64_t *)(a1 + 10);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 10), v2);
  if (v2 >= 1)
  {
    v20 = 0;
    v21 = *v19;
    do
    {
      *(_DWORD *)(v21 + 4 * v20) = v20;
      ++v20;
    }
    while (v2 != v20);
  }
  v22 = (_QWORD *)v35;
  if ((_QWORD)v35)
  {
    v23 = 0;
    do
    {
      if (v23 <= (uint64_t)(v22[4] - v22[3]) >> 2)
        v23 = (uint64_t)(v22[4] - v22[3]) >> 2;
      v22 = (_QWORD *)*v22;
    }
    while (v22);
    v24 = v23 < 0x3E9 || kaldi::g_kaldi_verbose_level <= -2;
    if (!v24)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Largest equivalence group (using hash) is ", 42);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", minimization might be slow.", 29);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    }
  }
  if (v2 >= 1)
  {
    do
    {
      v32 = 0;
      v32 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (v3 - 1));
      v33[0] = (uint64_t *)&v32;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v34, &v32, (uint64_t)&std::piecewise_construct, v33);
      v27 = 0;
      v28 = v26[3];
      v29 = v26[4];
      while (1)
      {
        v30 = *(int *)(v28 + 4 * v27);
        if (v3 > v30 || *(_DWORD *)(*v19 + 4 * *(unsigned int *)(v28 + 4 * v27)) != *(_DWORD *)(v28 + 4 * v27))
          goto LABEL_39;
        if (fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Equivalent(a1, v3 - 1, *(int *)(v28 + 4 * v27)))
        {
          break;
        }
        v28 = v26[3];
        v29 = v26[4];
LABEL_39:
        if (++v27 >= (unint64_t)((v29 - v28) >> 2))
          goto LABEL_42;
      }
      *(_DWORD *)(*v19 + 4 * (v3 - 1)) = v30;
LABEL_42:
      v24 = v3-- <= 1;
    }
    while (!v24);
  }
  return std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&v34);
}

void sub_1ADB845E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(v1 - 144);
  _Unwind_Resume(a1);
}

void fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ModifyModel(uint64_t *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void *__p;
  void *v16;
  uint64_t v17;
  int v18;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
  v3 = v2;
  v4 = v2;
  if (v2 < 1)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v5 != *(_DWORD *)(a1[5] + 4 * v5))
        ++v6;
      ++v5;
    }
    while (v2 != v5);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Removing ", 9);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" states.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
  if (v6)
  {
    v9 = *a1;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 176))(v9, *(unsigned int *)(a1[5] + 4 * v10));
    if (v3 >= 1)
    {
      v11 = 0;
      do
      {
        if (v11 == *(_DWORD *)(a1[5] + 4 * v11))
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v11, &v13);
          while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          {
            v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
            v14[0] = *(_QWORD *)v12;
            v14[1] = *(_QWORD *)(v12 + 8);
            v16 = 0;
            v17 = 0;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
            v18 = *(_DWORD *)(v12 + 40);
            if (*(_DWORD *)(a1[5] + 4 * v18) != v18)
            {
              v18 = *(_DWORD *)(a1[5] + 4 * v18);
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 88))(v13, v14);
            }
            if (__p)
            {
              v16 = __p;
              operator delete(__p);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          }
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        ++v11;
      }
      while (v11 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*a1);
  }
}

void sub_1ADB84848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::InitHashValue(uint64_t result, uint64_t *a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*(float *)result == INFINITY
    && *(float *)(result + 4) == INFINITY
    && *(_QWORD *)(result + 16) == *(_QWORD *)(result + 8))
  {
    v6 = 33317;
  }
  else
  {
    v2 = *(int **)(result + 8);
    v3 = *(int **)(result + 16);
    if (v2 == v3)
      goto LABEL_8;
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 = 7853 * v4 + v5;
    }
    while (v2 != v3);
    if (!v4)
LABEL_8:
      v4 = 53281;
    v6 = 607 * v4;
  }
  *a2 = v6;
  return result;
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::UpdateHashValueForTransition(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  int *v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;

  v4 = *(int **)(result + 8);
  v5 = *(int **)(result + 16);
  if (v4 == v5)
    goto LABEL_5;
  v6 = 0;
  do
  {
    v7 = *v4++;
    v6 = 7853 * v6 + v7;
  }
  while (v4 != v5);
  if (!v6)
LABEL_5:
    v6 = 53281;
  if (a2)
    v8 = a2;
  else
    v8 = 51907;
  *a4 += 1447 * (v8 * *a3 * v6 + v8);
  return result;
}

BOOL fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Equivalent(float *a1, unsigned int a2, uint64_t a3)
{
  BOOL v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  const void *v43;
  size_t v44;
  const void *v45;
  int v46;
  int v47;
  unsigned int v50;
  void **v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *__p;
  _BYTE *v59;
  _DWORD *v60;
  unint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  (*(void (**)(void ***__return_ptr))(**(_QWORD **)a1 + 32))(&v51);
  v50 = a3;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)a1 + 32))(&v57, *(_QWORD *)a1, a3);
  v5 = *(float *)&v51 == *(float *)&v57 && *((float *)&v51 + 1) == *((float *)&v57 + 1);
  if (!v5 && vabds_f32(*(float *)&v51 + *((float *)&v51 + 1), *(float *)&v57 + *((float *)&v57 + 1)) > a1[2])
  {
    v6 = 0;
    v7 = __p;
    if (!__p)
      goto LABEL_13;
    goto LABEL_12;
  }
  v7 = __p;
  if ((_BYTE *)v53 - (_BYTE *)v52 == v59 - (_BYTE *)__p)
  {
    v6 = memcmp(v52, __p, (_BYTE *)v53 - (_BYTE *)v52) == 0;
    if (!v7)
      goto LABEL_13;
    goto LABEL_12;
  }
  v6 = 0;
  if (__p)
  {
LABEL_12:
    v59 = v7;
    operator delete(v7);
  }
LABEL_13:
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (!v6)
    return 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, a2);
  if (v8 != (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, v50))
    return 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v9 = 1;
  memset(v62, 0, sizeof(v62));
  do
  {
    v10 = v9;
    if ((v9 & 1) != 0)
      v11 = a2;
    else
      v11 = v50;
    if ((v9 & 1) != 0)
      v12 = &v63;
    else
      v12 = v62;
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1);
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(v12, v13);
    v14 = *(_QWORD *)a1;
    v61 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 136))(v14, v11, &v57);
    if ((v10 & 1) != 0)
      v15 = &v63;
    else
      v15 = v62;
    while (1)
    {
      if (!v57)
      {
        if (v61 >= (unint64_t)v59)
          goto LABEL_49;
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
        break;
      if (v57)
      {
        v16 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v57 + 32))();
        goto LABEL_33;
      }
LABEL_32:
      v16 = (char *)__p + 48 * v61;
LABEL_33:
      v51 = *(void ***)v16;
      v52 = (void *)*((_QWORD *)v16 + 1);
      v54 = 0;
      v55 = 0;
      v53 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *((const void **)v16 + 2), *((_QWORD *)v16 + 3), (uint64_t)(*((_QWORD *)v16 + 3) - *((_QWORD *)v16 + 2)) >> 2);
      v17 = *((int *)v16 + 10);
      v56 = v17;
      if ((_DWORD)v17 == (_DWORD)v11)
      {
        v56 = -1;
      }
      else
      {
        v56 = *(_DWORD *)(*((_QWORD *)a1 + 5) + 4 * v17);
        v18 = v15[1];
        if ((v10 & 1) != 0)
          v19 = &v63;
        else
          v19 = v62;
        if (v18 >= v19[2])
        {
          v20 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v12, (uint64_t)&v51);
        }
        else
        {
          std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v12, (uint64_t)&v51);
          v20 = v18 + 48;
        }
        v15[1] = v20;
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      else
        ++v61;
    }
    if (v57)
    {
      (*(void (**)(void))(*(_QWORD *)v57 + 8))();
      goto LABEL_51;
    }
LABEL_49:
    if (v60)
      --*v60;
LABEL_51:
    v21 = *v12;
    if ((v10 & 1) != 0)
      v22 = &v63;
    else
      v22 = v62;
    v23 = (_QWORD *)v22[1];
    v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v21) >> 4));
    if (v23 == (_QWORD *)v21)
      v25 = 0;
    else
      v25 = v24;
    std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(v21, v23, (uint64_t)&v57, v25, 1);
    v9 = 0;
  }
  while ((v10 & 1) != 0);
  v26 = v63;
  if (v64 == v63)
  {
    v32 = 1;
  }
  else
  {
    v27 = (v64 - v63) >> 4;
    v28 = 0xAAAAAAAAAAAAAAABLL * v27;
    v29 = v62[0];
    if (0xAAAAAAAAAAAAAAABLL * v27 <= 1)
      v30 = 1;
    else
      v30 = 0xAAAAAAAAAAAAAAABLL * v27;
    if (*(_DWORD *)(v63 + 40) == *(_DWORD *)(v62[0] + 40))
    {
      v31 = 0;
      v32 = 0;
      v33 = 1;
      do
      {
        if (*(_DWORD *)(v26 + v31) != *(_DWORD *)(v29 + v31))
          break;
        v34 = v26 + v31;
        v35 = v29 + v31;
        v36 = *(float *)(v26 + v31 + 8);
        v37 = *(float *)(v26 + v31 + 12);
        v38 = *(float *)(v29 + v31 + 8);
        v39 = *(float *)(v29 + v31 + 12);
        v40 = v36 == v38 && v37 == v39;
        v41 = vabds_f32(v36 + v37, v38 + v39);
        if (!v40 && v41 > 0.00097656)
          break;
        v43 = *(const void **)(v34 + 16);
        v44 = *(_QWORD *)(v34 + 24) - (_QWORD)v43;
        v45 = *(const void **)(v35 + 16);
        if (v44 != *(_QWORD *)(v35 + 24) - (_QWORD)v45)
          break;
        if (memcmp(v43, v45, v44))
          break;
        v32 = v33 >= v28;
        if (v30 == v33)
          break;
        v46 = *(_DWORD *)(v26 + v31 + 88);
        v47 = *(_DWORD *)(v29 + v31 + 88);
        v31 += 48;
        ++v33;
      }
      while (v46 == v47);
    }
    else
    {
      v32 = 0;
    }
  }
  v51 = (void **)v62;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v51);
  v51 = (void **)&v63;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v51);
  return v32;
}

void sub_1ADB84E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADB850D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int v24;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t i;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v6;
        v6 = v4;
        v8 = *((_DWORD *)v7 + 12);
        if (v8 < *(_DWORD *)v7 || v8 <= *(_DWORD *)v7 && *((_DWORD *)v7 + 22) < *((_DWORD *)v7 + 10))
        {
          v13 = *v6;
          v14 = v7[7];
          v16 = 0;
          v17 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v7[8], v7[9], (uint64_t)(v7[9] - v7[8]) >> 2);
          v18 = *((_DWORD *)v7 + 22);
          for (i = v5; ; i -= 48)
          {
            *(_QWORD *)((char *)a1 + i + 48) = *(_QWORD *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)a1 + i + 56, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 88) = *(_DWORD *)((char *)a1 + i + 40);
            if (!i)
            {
              v11 = (char *)a1;
              goto LABEL_15;
            }
            v10 = *(_DWORD *)((char *)a1 + i - 48);
            if ((int)v13 >= v10 && ((int)v13 > v10 || v18 >= *(_DWORD *)((char *)a1 + i - 8)))
              break;
          }
          v11 = (char *)a1 + i;
LABEL_15:
          *(_QWORD *)v11 = v13;
          v12 = HIDWORD(v14);
          *(_DWORD *)((char *)a1 + i + 8) = v14;
          *((_DWORD *)v11 + 3) = v12;
          if (v11 != (char *)&v13)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v11 + 16, (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 2);
          *((_DWORD *)v11 + 10) = v18;
          if (__p)
          {
            v16 = __p;
            operator delete(__p);
          }
        }
        v4 = v6 + 6;
        v5 += 48;
      }
      while (v6 + 6 != a2);
    }
  }
}

void sub_1ADB8560C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  int v7;
  _DWORD *i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      v5 = a1 + 11;
      do
      {
        v6 = v3;
        v3 = v4;
        v7 = *((_DWORD *)v6 + 12);
        if (v7 < *(_DWORD *)v6 || v7 <= *(_DWORD *)v6 && *((_DWORD *)v6 + 22) < *((_DWORD *)v6 + 10))
        {
          v10 = *v3;
          v11 = v6[7];
          v13 = 0;
          v14 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v6[8], v6[9], (uint64_t)(v6[9] - v6[8]) >> 2);
          v15 = *((_DWORD *)v6 + 22);
          for (i = v5; ; i -= 12)
          {
            *((_QWORD *)i - 5) = *((_QWORD *)i - 11);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(i - 8), (uint64_t)(i - 20));
            *i = *(i - 12);
            v9 = *(i - 34);
            if ((int)v10 >= v9 && ((int)v10 > v9 || v15 >= *(i - 24)))
              break;
          }
          *((_QWORD *)i - 11) = v10;
          *((_QWORD *)i - 10) = v11;
          if (i - 22 != (_DWORD *)&v10)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i - 72, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
          *(i - 12) = v15;
          if (__p)
          {
            v13 = __p;
            operator delete(__p);
          }
        }
        v4 = v3 + 6;
        v5 += 12;
      }
      while (v3 + 6 != a2);
    }
  }
}

void sub_1ADB8578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  uint64_t *v8;
  uint64_t *v9;

  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < *(_DWORD *)a1 || v6 <= *(_DWORD *)a1 && *((_DWORD *)a2 + 10) < *(_DWORD *)(a1 + 40))
  {
    if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
    }
    else
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, a2);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
      {
        v8 = a2;
        v9 = (uint64_t *)a3;
        goto LABEL_14;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2, (uint64_t *)a3);
    if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a2 <= *(_DWORD *)a1 && *((_DWORD *)a2 + 10) < *(_DWORD *)(a1 + 40))
    {
      v8 = (uint64_t *)a1;
      v9 = a2;
LABEL_14:
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v8, v9);
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t i;
  int v8;
  int v9;
  int v10;
  int j;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  int v22;

  v17 = *a1;
  v4 = (uint64_t)(a1 + 1);
  v18 = a1[1];
  v20 = 0;
  v21 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  v5 = *((_DWORD *)a1 + 10);
  v22 = v5;
  v6 = *(_DWORD *)(a2 - 48);
  if ((int)v17 < v6 || (int)v17 <= v6 && v5 < *(_DWORD *)(a2 - 8))
  {
    i = (unint64_t)a1;
    do
    {
      v9 = *(_DWORD *)(i + 48);
      i += 48;
      v8 = v9;
    }
    while ((int)v17 >= v9 && ((int)v17 > v8 || v5 >= *(_DWORD *)(i + 40)));
  }
  else
  {
    for (i = (unint64_t)(a1 + 6);
          i < a2 && (int)v17 >= *(_DWORD *)i && ((int)v17 > *(_DWORD *)i || v5 >= *(_DWORD *)(i + 40));
  }
  if (i < a2)
  {
    for (a2 -= 48; (int)v17 < v6 || (int)v17 <= v6 && v5 < *(_DWORD *)(a2 + 40); a2 -= 48)
    {
      v10 = *(_DWORD *)(a2 - 48);
      v6 = v10;
    }
  }
  while (i < a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)i, (uint64_t *)a2);
    v12 = *(_DWORD *)(i + 48);
    i += 48;
    for (j = v12; (int)v17 >= j && ((int)v17 > j || v22 >= *(_DWORD *)(i + 40)); j = v13)
    {
      v13 = *(_DWORD *)(i + 48);
      i += 48;
    }
    do
    {
      do
      {
        v14 = *(_DWORD *)(a2 - 48);
        a2 -= 48;
        v15 = (int)v17 <= v14;
      }
      while ((int)v17 < v14);
    }
    while (v15 && v22 < *(_DWORD *)(a2 + 40));
  }
  if ((uint64_t *)(i - 48) != a1)
  {
    *a1 = *(_QWORD *)(i - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, i - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(i - 8);
  }
  *(_QWORD *)(i - 48) = v17;
  *(_QWORD *)(i - 40) = v18;
  if ((uint64_t *)(i - 40) != &v18)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(i - 32), (char *)__p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(i - 8) = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  return i;
}

void sub_1ADB85AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  int v26;

  v21 = *a1;
  v4 = (uint64_t)(a1 + 1);
  v22 = a1[1];
  v24 = 0;
  v25 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  v5 = 0;
  v6 = *((_DWORD *)a1 + 10);
  v26 = v6;
  while (1)
  {
    v7 = a1[v5 + 6];
    if (v7 >= (int)v21 && (v7 > (int)v21 || SLODWORD(a1[v5 + 11]) >= v6))
      break;
    v5 += 6;
  }
  v8 = (unint64_t)&a1[v5 + 6];
  if (v5 * 8)
  {
    do
    {
      v10 = *(_DWORD *)(a2 - 48);
      a2 -= 48;
      v9 = v10;
    }
    while (v10 >= (int)v21 && (v9 > (int)v21 || *(_DWORD *)(a2 + 40) >= v6));
  }
  else
  {
LABEL_19:
    if (v8 < a2)
    {
      do
      {
        v12 = *(_DWORD *)(a2 - 48);
        a2 -= 48;
        v11 = v12;
        if (v12 < (int)v21)
          break;
        if (v11 > (int)v21)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 40) >= v6 && v8 < a2);
    }
  }
  v14 = v8;
  if (v8 < a2)
  {
    v15 = a2;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)v15);
      do
      {
        do
        {
          v16 = *(_DWORD *)(v14 + 48);
          v14 += 48;
          v17 = v16 <= (int)v21;
        }
        while (v16 < (int)v21);
      }
      while (v17 && *(_DWORD *)(v14 + 40) < v26);
      do
      {
        v19 = *(_DWORD *)(v15 - 48);
        v15 -= 48;
        v18 = v19;
      }
      while (v19 >= (int)v21 && (v18 > (int)v21 || *(_DWORD *)(v15 + 40) >= v26));
    }
    while (v14 < v15);
  }
  if ((uint64_t *)(v14 - 48) != a1)
  {
    *a1 = *(_QWORD *)(v14 - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, v14 - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(v14 - 8);
  }
  *(_QWORD *)(v14 - 48) = v21;
  *(_QWORD *)(v14 - 40) = v22;
  if ((uint64_t *)(v14 - 40) != &v22)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 - 32), (char *)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(v14 - 8) = v26;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  return v14 - 48;
}

void sub_1ADB85CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  _BYTE *v19;
  uint64_t v20;
  int v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t *)(a2 - 48);
      v7 = *(_DWORD *)(a2 - 48);
      if (v7 < *(_DWORD *)a1 || v7 <= *(_DWORD *)a1 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v6);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)(a1 + 48), a2 - 48);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)(a1 + 48), a1 + 96);
      v9 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v9 < *v8 || *(_DWORD *)v9 <= *v8 && *(_DWORD *)(v9 + 40) < v8[10])
    {
      v16 = *(_QWORD *)v9;
      v17 = *(_QWORD *)(v9 + 8);
      v19 = 0;
      v20 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
      v21 = *(_DWORD *)(v9 + 40);
      for (i = v10; ; i -= 48)
      {
        *(_QWORD *)(a1 + i + 144) = *(_QWORD *)(a1 + i + 96);
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a1 + i + 152, a1 + i + 104);
        *(_DWORD *)(a1 + i + 184) = *(_DWORD *)(a1 + i + 136);
        if (i == -96)
        {
          v14 = a1;
          goto LABEL_17;
        }
        v13 = *(_DWORD *)(a1 + i + 48);
        if ((int)v16 >= v13 && ((int)v16 > v13 || v21 >= *(_DWORD *)(a1 + i + 88)))
          break;
      }
      v14 = a1 + i + 96;
LABEL_17:
      *(_QWORD *)v14 = v16;
      v15 = HIDWORD(v17);
      *(_DWORD *)(a1 + i + 104) = v17;
      *(_DWORD *)(v14 + 12) = v15;
      if ((uint64_t *)v14 != &v16)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 + 16), (char *)__p, (uint64_t)v19, (v19 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(v14 + 40) = v21;
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
      if (++v11 == 8)
        return v9 + 48 == a2;
    }
    v8 = (_DWORD *)v9;
    v10 += 48;
    v9 += 48;
    if (v9 == a2)
      return 1;
  }
}

void sub_1ADB85F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 40) < *(_DWORD *)(a3 + 40))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *(_DWORD *)(a2 + 40))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 40) < *(_DWORD *)(a1 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 <= *(_DWORD *)a4 && *(_DWORD *)(a5 + 40) < *(_DWORD *)(a4 + 40))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 40) < *(_DWORD *)(a3 + 40))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *(_DWORD *)(a2 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 40) < *(_DWORD *)(a1 + 40))
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 48 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1 && *(_DWORD *)(v14 + 40) < *(_DWORD *)(a1 + 40))
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 48;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 49)
    {
      v15 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, v6, a4, v15);
        v6 -= 48;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  int v20;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v9 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      v10 = (uint64_t *)(a1 + 48 * v9);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2 < a3)
      {
        v11 = *((_DWORD *)v10 + 12);
        if (*(_DWORD *)v10 < v11 || *(_DWORD *)v10 <= v11 && *(_DWORD *)(a1 + 48 * v9 + 40) < *((_DWORD *)v10 + 22))
        {
          v10 += 6;
          v9 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
        }
      }
      if (*(_DWORD *)v10 >= *(_DWORD *)a4
        && (*(_DWORD *)v10 > *(_DWORD *)a4 || *((_DWORD *)v10 + 10) >= *((_DWORD *)a4 + 10)))
      {
        v15 = *a4;
        v16 = a4[1];
        v18 = 0;
        v19 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 2);
        v20 = *((_DWORD *)v5 + 10);
        while (1)
        {
          v12 = v10;
          *v5 = *v10;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v10 + 1));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v10 + 10);
          if (v7 < v9)
            break;
          v13 = (2 * v9) | 1;
          v10 = (uint64_t *)(a1 + 48 * v13);
          if (2 * v9 + 2 < a3)
          {
            v14 = *((_DWORD *)v10 + 12);
            if (*(_DWORD *)v10 < v14
              || *(_DWORD *)v10 <= v14 && *(_DWORD *)(a1 + 48 * v13 + 40) < *((_DWORD *)v10 + 22))
            {
              v10 += 6;
              v13 = 2 * v9 + 2;
            }
          }
          if (*(_DWORD *)v10 < (int)v15)
            break;
          v5 = v12;
          v9 = v13;
          if (*(_DWORD *)v10 <= (int)v15)
          {
            v5 = v12;
            v9 = v13;
            if (*((_DWORD *)v10 + 10) < v20)
              break;
          }
        }
        *v12 = v15;
        v12[1] = v16;
        if (v12 != &v15)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v12 + 16, (char *)__p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
        *((_DWORD *)v12 + 10) = v20;
        if (__p)
        {
          v18 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_1ADB86510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  int v15;

  if (a4 >= 2)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v13 = 0;
    v14 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
    v15 = *(_DWORD *)(a1 + 40);
    v8 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((_DWORD *)a1, a3, a4);
    v9 = v8;
    if (v8 == (uint64_t *)(a2 - 48))
    {
      *v8 = v10;
      v8[1] = v11;
      if (v8 != &v10)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 16, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
      *((_DWORD *)v9 + 10) = v15;
    }
    else
    {
      *v8 = *(_QWORD *)(a2 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), a2 - 40);
      *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 48) = v10;
      *(_QWORD *)(a2 - 40) = v11;
      if ((uint64_t *)(a2 - 40) != &v11)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(a2 - 8) = v15;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t)(v9 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADB86698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 12 * v5 + 12;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3)
    {
      v12 = a1[12];
      if (*a1 < v12 || *a1 <= v12 && v8[12 * v9 + 10] < a1[22])
      {
        a1 += 12;
        v5 = v11;
      }
    }
    *(_QWORD *)v8 = *(_QWORD *)a1;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 2), (uint64_t)(a1 + 2));
    v8[10] = a1[10];
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  int v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 48 * (v4 >> 1);
    v10 = a2 - 48;
    v9 = *(_DWORD *)(a2 - 48);
    if (*(_DWORD *)v8 < v9 || *(_DWORD *)v8 <= v9 && *(_DWORD *)(a1 + 48 * v7 + 40) < *(_DWORD *)(a2 - 8))
    {
      v12 = *(_QWORD *)(a2 - 48);
      v13 = *(_QWORD *)(a2 - 40);
      v15 = 0;
      v16 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
      v17 = *(_DWORD *)(a2 - 8);
      while (1)
      {
        v11 = v8;
        *(_QWORD *)v10 = *(_QWORD *)v8;
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v10 + 8, v8 + 8);
        *(_DWORD *)(v10 + 40) = *(_DWORD *)(v8 + 40);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = a1 + 48 * v7;
        v10 = v11;
        if (*(_DWORD *)v8 >= (int)v12)
        {
          if (*(_DWORD *)v8 > (int)v12)
            break;
          v10 = v11;
          if (*(_DWORD *)(a1 + 48 * v7 + 40) >= v17)
            break;
        }
      }
      *(_QWORD *)v11 = v12;
      *(_QWORD *)(v11 + 8) = v13;
      if ((uint64_t *)v11 != &v12)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 + 16), (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(v11 + 40) = v17;
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1ADB868E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *quasar::corrective_reranking::CorrectiveReranker::CorrectiveReranker(std::string *this, const quasar::corrective_reranking::CorrectiveRerankerConfig *a2, const quasar::PTree *a3, const quasar::corrective_reranking::Models *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v9 = *((_OWORD *)a2 + 3);
  v10 = *((_OWORD *)a2 + 4);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v9;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v10;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 80), *((__int128 **)a2 + 10), *((__int128 **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)a4;
  std::string::basic_string[abi:ne180100]<0>(v15, "deleteTargetless");
  std::string::basic_string[abi:ne180100]<0>(v16, "capitalize");
  std::string::basic_string[abi:ne180100]<0>(v17, "uppercase");
  std::string::basic_string[abi:ne180100]<0>(v18, "lowercase");
  std::string::basic_string[abi:ne180100]<0>(v19, "send");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[4].__r_.__value_.__r.__words[2], (unsigned __int8 *)v15, 5);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0)
      operator delete((void *)v19[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "delete");
  std::string::basic_string[abi:ne180100]<0>(v16, "insertbefore");
  std::string::basic_string[abi:ne180100]<0>(v17, "insertafter");
  std::string::basic_string[abi:ne180100]<0>(v18, "replace");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[6].__r_.__value_.__l.__size_, (unsigned __int8 *)v15, 4);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v18[j + 2]) < 0)
      operator delete((void *)v18[j]);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, ".");
  std::string::basic_string[abi:ne180100]<0>(v16, "!");
  std::string::basic_string[abi:ne180100]<0>(v17, "?");
  std::string::basic_string[abi:ne180100]<0>(v18, ",");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[8], (unsigned __int8 *)v15, 4);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v18[k + 2]) < 0)
      operator delete((void *)v18[k]);
  }
  quasar::corrective_reranking::InitFeaturizers((uint64_t)a2 + 24, (uint64_t)a3, (char **)&this[9].__r_.__value_.__r.__words[2]);
  kaldi::quasar::LoadClassifier((uint64_t)a2, (uint64_t *)&this[10].__r_.__value_.__r.__words[2]);
  return this;
}

void sub_1ADB86C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v10);
  quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(v9);
  _Unwind_Resume(a1);
}

__n128 quasar::corrective_reranking::CorrectiveReranker::performCorrectiveReranking@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, int a12, char a13, char a14, unsigned __int8 a15)
{
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  quasar::corrective_reranking::Parse *v25;
  quasar::corrective_reranking::Parse *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  quasar::corrective_reranking::Parse *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  const quasar::corrective_reranking::Parse *v32;
  uint64_t v33;
  unint64_t v34;
  uint32_t v35;
  uint64_t i;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __n128 result;
  uint64_t v42;
  uint64_t v44;
  std::random_device v46[2];
  char v47;
  uint64_t v48;
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;

  if (a6)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctTarget(a1, (quasar::corrective_reranking::Parse **)a2, a3, (uint64_t)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Target Correction]\n", 20);
        *(_QWORD *)&v67 = a2;
        BYTE8(v67) = 0;
        v68 = a3;
        quasar::corrective_reranking::operator<<(v21, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (a7)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayload(a1, (uint64_t *)a2, 0, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Correction]\n", 21);
        *(_QWORD *)&v67 = a2;
        BYTE8(v67) = 0;
        v68 = a3;
        quasar::corrective_reranking::operator<<(v22, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (a10)
  {
    quasar::corrective_reranking::CorrectiveReranker::cleanParses(a1, (quasar::corrective_reranking::Parse **)a2, a3, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Parse Cleaning]\n", 17);
        *(_QWORD *)&v67 = a2;
        BYTE8(v67) = 0;
        v68 = a3;
        quasar::corrective_reranking::operator<<(v23, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  v42 = a5;
  v24 = a3;
  v44 = a9;
  v25 = *(quasar::corrective_reranking::Parse **)a2;
  v26 = *(quasar::corrective_reranking::Parse **)(a2 + 8);
  if (*(quasar::corrective_reranking::Parse **)a2 == v26)
  {
LABEL_29:
    v27 = (uint64_t)v25;
    goto LABEL_30;
  }
  v27 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    quasar::corrective_reranking::Parse::getIntent(v25, (uint64_t)__p);
    v28 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 112), (unsigned __int8 *)__p);
    if (SBYTE7(v50) < 0)
      operator delete(__p[0]);
    if (v28)
      break;
    v25 = (quasar::corrective_reranking::Parse *)((char *)v25 + 232);
    if (v25 == v26)
      goto LABEL_30;
  }
  if (v25 != v26)
  {
    v29 = (quasar::corrective_reranking::Parse *)((char *)v25 + 232);
    if ((quasar::corrective_reranking::Parse *)((char *)v25 + 232) != v26)
    {
      v27 = (uint64_t)v25;
      while (1)
      {
        quasar::corrective_reranking::Parse::getIntent(v29, (uint64_t)__p);
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 112), (unsigned __int8 *)__p);
        v31 = v30;
        if (SBYTE7(v50) < 0)
        {
          operator delete(__p[0]);
          if (!v31)
          {
LABEL_28:
            quasar::corrective_reranking::Parse::operator=(v27, (__int128 *)v29);
            v27 += 232;
          }
        }
        else if (!v30)
        {
          goto LABEL_28;
        }
        v29 = (quasar::corrective_reranking::Parse *)((char *)v29 + 232);
        if (v29 == v26)
          goto LABEL_30;
      }
    }
    goto LABEL_29;
  }
LABEL_30:
  std::vector<quasar::corrective_reranking::Parse>::erase(a2, v27, *(__int128 **)(a2 + 8));
  if (a12 >= 1)
  {
    v67 = 0uLL;
    v68 = 0;
    v32 = *(const quasar::corrective_reranking::Parse **)a2;
    v33 = *(_QWORD *)(a2 + 8);
    if (0x34F72C234F72C235 * ((v33 - *(_QWORD *)a2) >> 3) >= (unint64_t)a12)
      v34 = a12;
    else
      v34 = 0x34F72C234F72C235 * ((v33 - *(_QWORD *)a2) >> 3);
    std::random_device::random_device[abi:ne180100](v46);
    v35 = arc4random();
    LODWORD(__p[0]) = v35;
    for (i = 1; i != 624; ++i)
    {
      v35 = i + 1812433253 * (v35 ^ (v35 >> 30));
      *((_DWORD *)__p + i) = v35;
    }
    v66 = 0;
    std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>,unsigned long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v32, v33, (uint64_t *)&v67, v34, (uint64_t)__p);
    std::random_device::~random_device(v46);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = v67;
    *(_QWORD *)(a2 + 16) = v68;
    v68 = 0;
    v67 = 0uLL;
    if (a15 && quasar::gLogLevel >= 5)
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Limit Number of Parses to ", 27);
      v37 = (_QWORD *)std::ostream::operator<<();
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"]\n", 2);
      *(_QWORD *)&v46[0].__padding_ = a2;
      v47 = 0;
      v48 = v24;
      quasar::corrective_reranking::operator<<(v38, (uint64_t **)v46);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    __p[0] = &v67;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (a8)
  {
    quasar::corrective_reranking::CorrectiveReranker::rankParses(a1, (uint64_t *)a2, v24, a4, v42, a15, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  }
  if (a11)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctFloatingPunctuation(a1, a2, v24, 1, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Floating Punctuation Removal]\n", 31);
        *(_QWORD *)&v67 = a2;
        BYTE8(v67) = 0;
        v68 = v24;
        quasar::corrective_reranking::operator<<(v39, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (*(int *)(a1 + 64) >= 1)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayloadCapitalization(a1, (uint64_t *)a2, v24, a13, a15, (uint64_t)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v50;
    __p[1] = 0;
    *(_QWORD *)&v50 = 0;
    __p[0] = 0;
    *(_QWORD *)&v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Capitalization Correction]\n", 36);
        *(_QWORD *)&v67 = a2;
        BYTE8(v67) = 0;
        v68 = v24;
        quasar::corrective_reranking::operator<<(v40, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  result = *(__n128 *)a2;
  *(_OWORD *)v44 = *(_OWORD *)a2;
  *(_QWORD *)(v44 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return result;
}

void sub_1ADB8747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::random_device a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a17);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctTarget(uint64_t a1@<X0>, quasar::corrective_reranking::Parse **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  quasar::corrective_reranking::Parse *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 **v10;
  int v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  int *v19;
  int *v20;
  std::vector<std::string>::pointer end;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  std::string *v29;
  std::vector<std::string>::pointer v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  quasar::corrective_reranking::Parse *v44;
  float *v46;
  __int128 **v47;
  float *v50;
  __int128 *v51;
  quasar::corrective_reranking::Parse *v52;
  std::vector<std::string> v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  const quasar::corrective_reranking::Parse *v57;
  std::string *v58;
  unint64_t v59;
  uint64_t v60;
  int v61[2];
  uint64_t v62[3];
  void *__p[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::string v80;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = a2[1];
  v52 = *a2;
  if (*a2 != v4)
  {
    v5 = a1;
    v44 = a2[1];
    while (1)
    {
      v6 = *(unsigned int *)(v5 + 76);
      if ((int)v6 >= 1 && 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3) > v6)
        break;
      if (quasar::corrective_reranking::Parse::isTargetExpectingCommand(v52))
      {
        quasar::corrective_reranking::Parse::getTarget(v52, v62);
        quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(v5, a3, v62, &v60);
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 104) + 56);
        quasar::corrective_reranking::detokenize(__p, v62);
        quasar::corrective_reranking::Parse::getIntent(v52, (uint64_t)&v80);
        quasar::corrective_reranking::OverridesDictionary::findSlotOverride(v7, (uint64_t)__p, (unsigned __int8 *)&v80, &v56);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SBYTE7(v64) < 0)
          operator delete(__p[0]);
        v8 = *((_QWORD *)&v56 + 1);
        v9 = v56;
        if ((_QWORD)v56 != *((_QWORD *)&v56 + 1))
        {
          v50 = (float *)((char *)v52 + 80);
          v10 = (__int128 **)((char *)v52 + 56);
          do
          {
            if (*(_BYTE *)(v9 + 24))
            {
              v11 = *(char *)(v9 + 23);
              if (v11 < 0)
              {
                if (*(_QWORD *)(v9 + 8) == 8)
                {
                  v12 = *(_QWORD **)v9;
LABEL_19:
                  if (*v12 == 0x747865546C6C7566)
                  {
                    quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(v52, (uint64_t *)__p);
                    v13 = __p[0];
                    v14 = __p[1];
                    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
                    if (v13 == v14)
                    {
                      memset(&v80, 0, sizeof(v80));
                      quasar::corrective_reranking::TargetRange::TargetRange(__p, (uint64_t)&v80);
                      v15 = v58;
                      if ((unint64_t)v58 >= v59)
                      {
                        v16 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t *)&v57, (uint64_t)v52, v10, v50, (uint64_t)__p);
                      }
                      else
                      {
                        std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t)&v59, v58, (uint64_t)v52, v10, v50, (uint64_t)__p);
                        v16 = (std::string *)((char *)v15 + 232);
                      }
                      v58 = v16;
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v80.__r_.__value_.__r.__words[0])
                      {
                        v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
                        operator delete(v80.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                }
              }
              else
              {
                v12 = (_QWORD *)v9;
                if (v11 == 8)
                  goto LABEL_19;
              }
            }
            else
            {
              quasar::corrective_reranking::tokenize(v9, 0, &v54);
              quasar::corrective_reranking::getTokens((__int128 **)&v54, (uint64_t *)&v80);
              quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(a1, a3, &v80, (uint64_t *)__p);
              v53.__begin_ = &v80;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              v53.__begin_ = (std::vector<std::string>::pointer)&v54;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>>(&v60, *(__int128 **)v61, (std::string *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4));
              v80.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
            }
            v9 += 32;
          }
          while (v9 != v8);
        }
        *((_QWORD *)&v54 + 1) = 0;
        v55 = 0;
        *(_QWORD *)&v54 = (char *)&v54 + 8;
        v17 = v60;
        v51 = *(__int128 **)v61;
        if (v60 != *(_QWORD *)v61)
        {
          v46 = (float *)((char *)v52 + 80);
          v47 = (__int128 **)((char *)v52 + 56);
          do
          {
            memset(&v53, 0, sizeof(v53));
            v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v53, (__int128 *)v17);
            v20 = *(int **)(v17 + 24);
            v19 = *(int **)(v17 + 32);
            v53.__end_ = v18;
            while (v20 != v19)
            {
              std::to_string(&v80, *v20);
              end = v53.__end_;
              if (v53.__end_ >= v53.__end_cap_.__value_)
              {
                v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_ - (char *)v53.__begin_) >> 3);
                v24 = v23 + 1;
                if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) > v24)
                  v24 = 0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) >= 0x555555555555555)
                  v25 = 0xAAAAAAAAAAAAAAALL;
                else
                  v25 = v24;
                *(_QWORD *)&v65 = &v53.__end_cap_;
                if (v25)
                  v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v53.__end_cap_, v25);
                else
                  v26 = 0;
                v27 = &v26[24 * v23];
                __p[0] = v26;
                __p[1] = v27;
                *((_QWORD *)&v64 + 1) = &v26[24 * v25];
                v28 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
                *((_QWORD *)v27 + 2) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
                *(_OWORD *)v27 = v28;
                memset(&v80, 0, sizeof(v80));
                *(_QWORD *)&v64 = v27 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v53, (std::__split_buffer<std::string> *)__p);
                v29 = v53.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v53.__end_ = v29;
                if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v80.__r_.__value_.__l.__data_);
              }
              else
              {
                v22 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
                v53.__end_->__r_.__value_.__r.__words[2] = v80.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
                v53.__end_ = end + 1;
              }
              std::to_string(&v80, v20[1]);
              v30 = v53.__end_;
              if (v53.__end_ >= v53.__end_cap_.__value_)
              {
                v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_ - (char *)v53.__begin_) >> 3);
                v33 = v32 + 1;
                if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) > v33)
                  v33 = 0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) >= 0x555555555555555)
                  v34 = 0xAAAAAAAAAAAAAAALL;
                else
                  v34 = v33;
                *(_QWORD *)&v65 = &v53.__end_cap_;
                if (v34)
                  v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v53.__end_cap_, v34);
                else
                  v35 = 0;
                v36 = &v35[24 * v32];
                __p[0] = v35;
                __p[1] = v36;
                *((_QWORD *)&v64 + 1) = &v35[24 * v34];
                v37 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
                *((_QWORD *)v36 + 2) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
                *(_OWORD *)v36 = v37;
                memset(&v80, 0, sizeof(v80));
                *(_QWORD *)&v64 = v36 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v53, (std::__split_buffer<std::string> *)__p);
                v38 = v53.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v53.__end_ = v38;
                if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v80.__r_.__value_.__l.__data_);
              }
              else
              {
                v31 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
                v53.__end_->__r_.__value_.__r.__words[2] = v80.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
                v53.__end_ = v30 + 1;
              }
              v20 += 2;
            }
            if ((__int128 *)((char *)&v54 + 8) == (__int128 *)std::__tree<std::vector<std::string>>::find<std::vector<std::string>>((uint64_t)&v54, (const void ***)&v53))
            {
              v39 = v58;
              if ((unint64_t)v58 >= v59)
              {
                v40 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t *)&v57, (uint64_t)v52, v47, v46, v17 + 24);
              }
              else
              {
                std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t)&v59, v58, (uint64_t)v52, v47, v46, v17 + 24);
                v40 = (std::string *)((char *)v39 + 232);
              }
              v58 = v40;
              std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)&v54, (const void ***)&v53, (__int128 **)&v53);
            }
            __p[0] = &v53;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v17 += 48;
          }
          while ((__int128 *)v17 != v51);
        }
        std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((uint64_t *)a4, *(__int128 **)(a4 + 8), v57, (uint64_t)v58, 0x34F72C234F72C235 * (((char *)v58 - (char *)v57) >> 3));
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v54, *((char **)&v54 + 1));
        __p[0] = &v56;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v57;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v60;
        std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v5 = a1;
        v4 = v44;
      }
      else
      {
        v41 = *(_QWORD *)(a4 + 8);
        if (v41 >= *(_QWORD *)(a4 + 16))
        {
          v42 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)a4, v52);
          v43 = a4;
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse(*(std::string **)(a4 + 8), v52);
          v42 = v41 + 232;
          v43 = a4;
          *(_QWORD *)(a4 + 8) = v41 + 232;
        }
        *(_QWORD *)(v43 + 8) = v42;
      }
      v52 = (quasar::corrective_reranking::Parse *)((char *)v52 + 232);
      if (v52 == v4)
        return;
    }
    if (quasar::gLogLevel >= 2)
    {
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Dropping parses since parse count is too high: ", 47);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      LODWORD(v6) = *(_DWORD *)(v5 + 76);
    }
    std::vector<quasar::corrective_reranking::Parse>::resize((uint64_t *)a4, (int)v6);
  }
}

void sub_1ADB87C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  *(_QWORD *)(v42 - 120) = a11;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 120));
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctPayload(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  int v5;
  quasar::corrective_reranking::Parse *v6;
  uint64_t v7;
  std::string::size_type size;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  void *v31;
  std::string *v32;
  std::string *v33;
  float v34;
  float v35;
  std::string *v36;
  std::string *v37;
  const quasar::corrective_reranking::Parse *v38;
  std::string *v39;
  std::string __p[7];
  char v42;
  std::string v43;
  std::string v44;
  void *v45;
  std::string *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string v52;

  v5 = *(_DWORD *)(a1 + 56);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v6 = (quasar::corrective_reranking::Parse *)*a2;
  v7 = a2[1];
  if (v5 <= 0)
  {
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a4, *a2, v7, 0x34F72C234F72C235 * ((v7 - (uint64_t)v6) >> 3));
  }
  else
  {
    while (v6 != (quasar::corrective_reranking::Parse *)v7)
    {
      if (quasar::corrective_reranking::Parse::isPayloadExpectingCommand(v6))
      {
        quasar::corrective_reranking::Parse::getPayload(v6, &v52);
        size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v52.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((a3 & 1) == 0)
          {
            v10 = a4[1];
            if (v10 >= a4[2])
            {
              v11 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
            }
            else
            {
              quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
              v11 = v10 + 232;
              a4[1] = v10 + 232;
            }
            a4[1] = v11;
          }
          quasar::corrective_reranking::PhoneticMatcher::nearestNeighbors(**(_QWORD **)(a1 + 104), (uint64_t)&v52, *(unsigned int *)(a1 + 56));
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 56);
          quasar::corrective_reranking::Parse::getPayload(v6, __p);
          quasar::corrective_reranking::Parse::getIntent(v6, (uint64_t)&v45);
          quasar::corrective_reranking::OverridesDictionary::findSlotOverride(v16, (uint64_t)__p, (unsigned __int8 *)&v45, &v48);
          if (SHIBYTE(v47) < 0)
            operator delete(v45);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v17 = *((_QWORD *)&v48 + 1);
          for (i = v48; i != v17; i += 32)
          {
            if (!*(_BYTE *)(i + 24))
            {
              __p[0].__r_.__value_.__r.__words[0] = 0;
              v19 = v50;
              if (v50 >= v51)
              {
                v20 = std::vector<quasar::EuclidNeighbor>::__emplace_back_slow_path<std::string const&,double>(&v49, (__int128 *)i, (double *)__p);
              }
              else
              {
                std::vector<quasar::EuclidNeighbor>::__construct_one_at_end[abi:ne180100]<std::string const&,double>((uint64_t)&v49, (__int128 *)i, (double *)__p);
                v20 = v19 + 32;
              }
              v50 = v20;
            }
          }
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v21 = v49;
          v22 = v50;
          if (v49 != v50)
          {
            while (1)
            {
              if (*(char *)(v21 + 23) < 0)
              {
                v24 = *(char **)v21;
                v23 = *(_QWORD *)(v21 + 8);
              }
              else
              {
                v23 = *(unsigned __int8 *)(v21 + 23);
                v24 = (char *)v21;
              }
              quasar::utf8::convertToLowerCaseOrEmpty(v24, v23, __p);
              quasar::corrective_reranking::Parse::getPayload(v6, &v43);
              if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = &v43;
              else
                v25 = (std::string *)v43.__r_.__value_.__r.__words[0];
              if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v26 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
              else
                v26 = v43.__r_.__value_.__l.__size_;
              quasar::utf8::convertToLowerCaseOrEmpty((char *)v25, v26, &v44);
              v27 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v28 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
              else
                v28 = __p[0].__r_.__value_.__l.__size_;
              v29 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
              v30 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v29 = v44.__r_.__value_.__l.__size_;
              if (v28 != v29)
                goto LABEL_58;
              v31 = (void *)v44.__r_.__value_.__r.__words[0];
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v32 = &v44;
              else
                v32 = (std::string *)v44.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (memcmp(__p[0].__r_.__value_.__l.__data_, v32, __p[0].__r_.__value_.__l.__size_))
                  goto LABEL_58;
              }
              else if (*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
              {
                v33 = __p;
                while (v33->__r_.__value_.__s.__data_[0] == v32->__r_.__value_.__s.__data_[0])
                {
                  v33 = (std::string *)((char *)v33 + 1);
                  v32 = (std::string *)((char *)v32 + 1);
                  if (!--v27)
                    goto LABEL_67;
                }
LABEL_58:
                v34 = *(float *)(v21 + 28);
                v35 = *(float *)(a1 + 60);
                if (v30 < 0)
                  operator delete(v44.__r_.__value_.__l.__data_);
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v43.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                if (v34 <= v35)
                {
                  quasar::corrective_reranking::Parse::Parse(__p, v6);
                  quasar::corrective_reranking::Parse::setPayload(__p, (const std::string *)v21);
                  v42 = 0;
                  v36 = v46;
                  if ((unint64_t)v46 >= v47)
                  {
                    v37 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)&v45, (const quasar::corrective_reranking::Parse *)__p);
                  }
                  else
                  {
                    quasar::corrective_reranking::Parse::Parse(v46, (const quasar::corrective_reranking::Parse *)__p);
                    v37 = (std::string *)((char *)v36 + 232);
                  }
                  v46 = v37;
                  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
                }
                goto LABEL_75;
              }
LABEL_67:
              if (v30 < 0)
                operator delete(v31);
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v43.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_75:
              v21 += 32;
              if (v21 == v22)
              {
                v38 = (const quasar::corrective_reranking::Parse *)v45;
                v39 = v46;
                goto LABEL_78;
              }
            }
          }
          v39 = 0;
          v38 = 0;
LABEL_78:
          std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse const*>,std::__wrap_iter<quasar::corrective_reranking::Parse const*>>(a4, (__int128 *)a4[1], v38, (uint64_t)v39, 0x34F72C234F72C235 * (((char *)v39 - (char *)v38) >> 3));
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
          std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          v14 = a4[1];
          if (v14 >= a4[2])
          {
            v15 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
          }
          else
          {
            quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
            v15 = v14 + 232;
            a4[1] = v14 + 232;
          }
          a4[1] = v15;
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
      }
      else
      {
        v12 = a4[1];
        if (v12 >= a4[2])
        {
          v13 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
          v13 = v12 + 232;
          a4[1] = v12 + 232;
        }
        a4[1] = v13;
      }
      v6 = (quasar::corrective_reranking::Parse *)((char *)v6 + 232);
    }
  }
}

void sub_1ADB882A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v48[1] = v49;
  if (*(char *)(v50 - 105) < 0)
    operator delete(*(void **)(v50 - 128));
  __p = v48;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::cleanParses(uint64_t a1@<X0>, quasar::corrective_reranking::Parse **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  quasar::corrective_reranking::Parse *v5;
  quasar::corrective_reranking::Parse *v6;
  std::string *v9;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  uint64_t v17;
  std::string *p_s1;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  _BOOL4 v25;
  std::string *v26;
  std::string *v27;
  unint64_t v28;
  uint64_t v29;
  quasar::corrective_reranking::Parse *v30;
  uint64_t v31;
  std::string __p;
  std::string v33;
  std::string __s1;
  std::string v35;
  uint64_t v36;
  std::string *v37;
  unint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v30 = *a2;
    goto LABEL_61;
  }
  v31 = a1;
  do
  {
    if (*((_BYTE *)v5 + 112))
    {
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v5 + 88, a3, &v35);
      if (!quasar::corrective_reranking::Parse::isPayloadExpectingCommand(v5))
      {
LABEL_44:
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        goto LABEL_46;
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v35;
      else
        v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      else
        size = v35.__r_.__value_.__l.__size_;
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v9, size, &__s1);
      quasar::corrective_reranking::Parse::getPayload(v5, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v12 = __p.__r_.__value_.__l.__size_;
      quasar::utf8::convertToLowerCaseOrEmpty((char *)p_p, v12, &v33);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v13 = __s1.__r_.__value_.__l.__size_;
      v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      v15 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = v33.__r_.__value_.__l.__size_;
      if (v13 == v14)
      {
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v33;
        else
          v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v25 = memcmp(__s1.__r_.__value_.__l.__data_, v16, __s1.__r_.__value_.__l.__size_) == 0;
          if ((v15 & 0x80000000) == 0)
            goto LABEL_35;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v20 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v19 = v20;
            v22 = v16->__r_.__value_.__s.__data_[0];
            v16 = (std::string *)((char *)v16 + 1);
            v21 = v22;
            v24 = v17-- != 0;
            v25 = v19 == v21;
          }
          while (v19 == v21 && v24);
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_35:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__s1.__r_.__value_.__l.__data_);
              if (v25)
              {
LABEL_39:
                v26 = v37;
                if ((unint64_t)v37 >= v38)
                {
                  v27 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(&v36, v5);
                }
                else
                {
                  quasar::corrective_reranking::Parse::Parse(v37, v5);
                  v27 = (std::string *)((char *)v26 + 232);
                }
                v37 = v27;
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v35.__r_.__value_.__l.__data_);
                goto LABEL_51;
              }
            }
            else if (v25)
            {
              goto LABEL_39;
            }
            goto LABEL_44;
          }
        }
        else
        {
          v25 = 1;
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_35;
        }
      }
      else
      {
        v25 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_35;
      }
      operator delete(v33.__r_.__value_.__l.__data_);
      goto LABEL_35;
    }
LABEL_46:
    if (!quasar::corrective_reranking::Parse::isIncomplete(v5))
    {
      v28 = a4[1];
      if (v28 >= a4[2])
      {
        v29 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v5);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v5);
        v29 = v28 + 232;
        a4[1] = v28 + 232;
      }
      a4[1] = v29;
    }
LABEL_51:
    v5 = (quasar::corrective_reranking::Parse *)((char *)v5 + 232);
  }
  while (v5 != v6);
  v5 = *a2;
  v30 = a2[1];
  a1 = v31;
LABEL_61:
  if ((unint64_t)(0x34F72C234F72C235 * ((v30 - v5) >> 3)) > 1
    && (unint64_t)(0x34F72C234F72C235 * ((a4[1] - *a4) >> 3)) <= 1)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayload(a1, &v36, 1, (uint64_t *)&v35);
    std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a4, (__int128 *)a4[1], (const quasar::corrective_reranking::Parse *)v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_, 0x34F72C234F72C235 * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1ADB886C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char **p_p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
  p_p = &__p;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a31;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::rankParses(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  double v14;
  __n128 v15;
  uint64_t v16;
  __int128 *v17;
  char *v18;
  unint64_t v19;
  int32x2_t v20;
  int v21;
  int v22;
  char *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  _QWORD v36[5];
  _QWORD v37[2];
  int v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a7, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 3));
  if ((unint64_t)(0x34F72C234F72C235 * ((a2[1] - *a2) >> 3)) >= 2)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)&v39);
    quasar::corrective_reranking::CorrectiveReranker::featurizeParses((_QWORD *)a1, a2, a3, a4, a5, (int32x2_t *)&v39);
    v14 = kaldi::Matrix<float>::Matrix((uint64_t)v37);
    (*(void (**)(_QWORD, uint64_t **, _QWORD *, double))(**(_QWORD **)(a1 + 256) + 16))(*(_QWORD *)(a1 + 256), &v39, v37, v14);
    v16 = *a7;
    v17 = (__int128 *)a7[1];
    v18 = 0;
    if (v17 == (__int128 *)*a7)
    {
      v29 = 0;
      v27 = 0x34F72C234F72C235 * (((uint64_t)v17 - *a7) >> 3);
    }
    else
    {
      v19 = 0;
      do
      {
        *(_DWORD *)&v18[v16 + 144] = *(_DWORD *)(v37[0] + 4 * v38 * (int)v19 + 4);
        v20 = (int32x2_t)v39;
        v21 = v41;
        v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v39);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v43 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(__p, (const void *)(*(_QWORD *)&v20 + 4 * v21 * (int)v19), *(_QWORD *)&v20 + 4 * v21 * (int)v19 + 4 * v22, v22);
        v23 = &v18[v16];
        v25 = v23 + 152;
        v24 = (void *)*((_QWORD *)v23 + 19);
        if (v24)
        {
          *((_QWORD *)v23 + 20) = v24;
          operator delete(v24);
          *v25 = 0;
          *((_QWORD *)v23 + 20) = 0;
          *((_QWORD *)v23 + 21) = 0;
        }
        v15 = *(__n128 *)__p;
        *(_OWORD *)v25 = *(_OWORD *)__p;
        *((_QWORD *)v23 + 21) = v43;
        ++v19;
        v16 = *a7;
        v17 = (__int128 *)a7[1];
        v26 = (uint64_t)v17 - *a7;
        v27 = 0x34F72C234F72C235 * (v26 >> 3);
        v18 += 232;
      }
      while (v27 > v19);
      if (v26 < 1)
      {
        v18 = 0;
        v29 = 0;
      }
      else
      {
        v18 = (char *)std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::Parse>(0x34F72C234F72C235 * (v26 >> 3));
        v29 = v28;
      }
    }
    std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v16, v17, v27, (uint64_t)v18, v29, v15);
    if (v18)
      operator delete(v18);
    v30 = *(unsigned __int8 *)(a3 + 23);
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(a3 + 8);
    if (!v30)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "undo");
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v43 + 1, "redo");
      std::string::basic_string[abi:ne180100]<0>(&v45, "stop");
      std::unordered_set<std::string>::unordered_set((uint64_t)v36, (unsigned __int8 *)__p, 3);
      for (i = 0; i != -72; i -= 24)
      {
        if (*((char *)&v46 + i + 7) < 0)
          operator delete(*(void **)((char *)&v45 + i));
      }
      v32 = *a7;
      v33 = a7[1];
      if (*a7 != v33)
      {
        while (1)
        {
          quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)v32, (uint64_t)__p);
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v36, (unsigned __int8 *)__p);
          if (SBYTE7(v43) < 0)
            operator delete(__p[0]);
          if (v34)
            break;
          v32 += 232;
          if (v32 == v33)
          {
            v32 = v33;
            break;
          }
        }
        if (v32 != a7[1])
        {
          if (quasar::gLogLevel >= 5)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found 'undo' parse while displayed text is empty. Move the undo parse to the top. ", 82);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          if (*a7 != v32)
            std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(*a7, (__int128 *)v32, (__int128 *)(v32 + 232));
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v37);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v39);
  }
  if (a6)
  {
    if (quasar::gLogLevel >= 5)
    {
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Re-Ranking]\n", 13);
      v39 = a7;
      v40 = 1;
      v41 = a3;
      quasar::corrective_reranking::operator<<(v35, &v39);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
}

void sub_1ADB88BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, void **);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va2);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctFloatingPunctuation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  quasar::corrective_reranking::Parse *v6;
  uint64_t v7;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  quasar::corrective_reranking::Parse *v20;
  unint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  int v24;
  BOOL v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  std::string *p_s1;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  _BOOL4 v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  int v42;
  std::string *v43;
  std::string *v44;
  int v45;
  char v46;
  std::string *v47;
  quasar::corrective_reranking::Parse *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const quasar::corrective_reranking::Parse *v52;
  char v53;
  std::string v54;
  std::string v55[3];
  uint64_t v56;
  std::string v57;
  std::string v58;
  uint64_t v59;
  std::string v60;
  std::string __s1;
  std::string __p[3];
  uint64_t v63;

  v6 = *(quasar::corrective_reranking::Parse **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 == *(_QWORD *)a2)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, v7, v7, 0);
    return;
  }
  if ((a4 & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    do
    {
      quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)v6, a1, a3, (uint64_t)__p);
      v12 = a5[1];
      if (v12 >= a5[2])
      {
        v13 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, v6);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse((std::string *)a5[1], v6);
        v13 = v12 + 232;
        a5[1] = v12 + 232;
      }
      a5[1] = v13;
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
      v6 = (quasar::corrective_reranking::Parse *)((char *)v6 + 232);
    }
    while (v6 != (quasar::corrective_reranking::Parse *)v7);
    return;
  }
  quasar::corrective_reranking::Parse::getIntent(*(quasar::corrective_reranking::Parse **)a2, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p[0].__r_.__value_.__l.__size_ != 6)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_120:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      return;
    }
    v15 = *(_DWORD *)__p[0].__r_.__value_.__l.__data_ != 1701602660
       || *(_WORD *)(__p[0].__r_.__value_.__r.__words[0] + 4) != 25972;
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_120;
  }
  else
  {
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) != 6)
      goto LABEL_120;
    if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 1701602660 || WORD2(__p[0].__r_.__value_.__r.__words[0]) != 25972)
      goto LABEL_120;
  }
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v6 + 88, a3, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = __p;
  else
    v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    size = __p[0].__r_.__value_.__l.__size_;
  quasar::utf8::convertToLowerCaseOrEmpty((char *)v16, size, &__s1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)v6, a1, a3, (uint64_t)__p);
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v63, a3, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v58;
  else
    v18 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v19 = v58.__r_.__value_.__l.__size_;
  quasar::utf8::convertToLowerCaseOrEmpty((char *)v18, v19, &v60);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v20 = *(quasar::corrective_reranking::Parse **)a2;
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)) < 2)
    goto LABEL_124;
  v53 = 0;
  v21 = 1;
  do
  {
    quasar::corrective_reranking::Parse::Parse(&v58, (quasar::corrective_reranking::Parse *)((char *)v20 + 232 * v21));
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v59, a3, v55);
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = v55;
    else
      v22 = (std::string *)v55[0].__r_.__value_.__r.__words[0];
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
    else
      v23 = v55[0].__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v22, v23, &v57);
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55[0].__r_.__value_.__l.__data_);
    quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)&v58, (uint64_t)v55);
    v24 = SHIBYTE(v55[0].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v55[0].__r_.__value_.__l.__size_ != 6
        || (*(_DWORD *)v55[0].__r_.__value_.__l.__data_ == 1701602660
          ? (v26 = *(unsigned __int16 *)(v55[0].__r_.__value_.__r.__words[0] + 4) == 25972)
          : (v26 = 0),
            !v26))
      {
        operator delete(v55[0].__r_.__value_.__l.__data_);
        goto LABEL_111;
      }
    }
    else
    {
      if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_111;
      if (LODWORD(v55[0].__r_.__value_.__l.__data_) != 1701602660
        || WORD2(v55[0].__r_.__value_.__r.__words[0]) != 25972)
      {
        goto LABEL_111;
      }
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v27 = __s1.__r_.__value_.__l.__size_;
    v28 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = v57.__r_.__value_.__l.__size_;
    if (v27 == v28)
    {
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v38 = memcmp(__s1.__r_.__value_.__l.__data_, v29, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          v33 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          v32 = v33;
          v35 = v29->__r_.__value_.__s.__data_[0];
          v29 = (std::string *)((char *)v29 + 1);
          v34 = v35;
          v37 = v30-- != 0;
          v38 = v32 == v34;
        }
        while (v32 == v34 && v37);
      }
      else
      {
        v38 = 1;
      }
    }
    else
    {
      v38 = 0;
    }
    if (v24 < 0)
    {
      operator delete(v55[0].__r_.__value_.__l.__data_);
      if (!v38)
        goto LABEL_111;
    }
    else if (!v38)
    {
      goto LABEL_111;
    }
    quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)&v58, a1, a3, (uint64_t)v55);
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v56, a3, &v54);
    v39 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v40 = v60.__r_.__value_.__l.__size_;
    v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    v42 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = v54.__r_.__value_.__l.__size_;
    if (v40 != v41)
      goto LABEL_107;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v54;
    else
      v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v60.__r_.__value_.__l.__data_, v43, v60.__r_.__value_.__l.__size_))
        goto LABEL_107;
    }
    else if (*((_BYTE *)&v60.__r_.__value_.__s + 23))
    {
      v44 = &v60;
      while (v44->__r_.__value_.__s.__data_[0] == v43->__r_.__value_.__s.__data_[0])
      {
        v44 = (std::string *)((char *)v44 + 1);
        v43 = (std::string *)((char *)v43 + 1);
        if (!--v39)
          goto LABEL_117;
      }
LABEL_107:
      v45 = 4;
      v46 = 1;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_109;
LABEL_108:
      operator delete(v54.__r_.__value_.__l.__data_);
      goto LABEL_109;
    }
LABEL_117:
    v46 = 0;
    v45 = 0;
    if (v42 < 0)
      goto LABEL_108;
LABEL_109:
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v55);
    if ((v46 & 1) != 0)
    {
      v53 = 1;
      goto LABEL_112;
    }
LABEL_111:
    v45 = 0;
LABEL_112:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v58);
    if (v45)
      break;
    ++v21;
    v20 = *(quasar::corrective_reranking::Parse **)a2;
  }
  while (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v21);
  if ((v53 & 1) != 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    goto LABEL_130;
  }
LABEL_124:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v47 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, (const quasar::corrective_reranking::Parse *)__p);
  v48 = *(quasar::corrective_reranking::Parse **)a2;
  v49 = *(_QWORD *)(a2 + 8);
  a5[1] = (uint64_t)v47;
  if ((unint64_t)(0x34F72C234F72C235 * ((v49 - (uint64_t)v48) >> 3)) >= 2)
  {
    v50 = 1;
    v51 = 232;
    do
    {
      v52 = (quasar::corrective_reranking::Parse *)((char *)v48 + v51);
      if ((unint64_t)v47 >= a5[2])
      {
        v47 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, v52);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse(v47, v52);
        v47 = (std::string *)((char *)v47 + 232);
        a5[1] = (uint64_t)v47;
      }
      a5[1] = (uint64_t)v47;
      ++v50;
      v48 = *(quasar::corrective_reranking::Parse **)a2;
      v51 += 232;
    }
    while (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v50);
  }
LABEL_130:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1ADB892BC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&STACK[0x240]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctPayloadCapitalization(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  quasar::corrective_reranking::Parse *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type size;
  std::string v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v9 = *a2;
  if (a2[1] != *a2)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (quasar::corrective_reranking::Parse *)(v9 + v11);
      if ((uint64_t)v12 >= *(int *)(a1 + 64))
      {
        v18 = *(_QWORD *)(a6 + 8);
        if (v18 >= *(_QWORD *)(a6 + 16))
          goto LABEL_15;
      }
      else
      {
        quasar::corrective_reranking::Parse::getIntent(v13, (uint64_t)__p);
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 152), (unsigned __int8 *)__p);
        v15 = v14;
        if (SBYTE7(v27) < 0)
        {
          operator delete(__p[0]);
          if (v15)
          {
LABEL_6:
            quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(a1, v13, a3, *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), (uint64_t)__p);
            v16 = *(_QWORD *)(a6 + 8);
            if (v16 >= *(_QWORD *)(a6 + 16))
            {
              v17 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)a6, (const quasar::corrective_reranking::Parse *)__p);
            }
            else
            {
              quasar::corrective_reranking::Parse::Parse(*(std::string **)(a6 + 8), (const quasar::corrective_reranking::Parse *)__p);
              v17 = v16 + 232;
              *(_QWORD *)(a6 + 8) = v16 + 232;
            }
            *(_QWORD *)(a6 + 8) = v17;
            quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
            goto LABEL_17;
          }
        }
        else if (v14)
        {
          goto LABEL_6;
        }
        v18 = *(_QWORD *)(a6 + 8);
        if (v18 >= *(_QWORD *)(a6 + 16))
        {
LABEL_15:
          v19 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)a6, v13);
          goto LABEL_16;
        }
      }
      quasar::corrective_reranking::Parse::Parse(*(std::string **)(a6 + 8), v13);
      v19 = v18 + 232;
      *(_QWORD *)(a6 + 8) = v18 + 232;
LABEL_16:
      *(_QWORD *)(a6 + 8) = v19;
LABEL_17:
      ++v12;
      v9 = *a2;
      v11 += 232;
    }
    while (0x34F72C234F72C235 * ((a2[1] - *a2) >> 3) > v12);
  }
  if ((a4 & 1) != 0 && quasar::corrective_reranking::CorrectiveReranker::hasCasingConflictsWithTopParse(a1, a6, a3))
  {
    if (a5 && quasar::gLogLevel >= 5)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Capitalization Correction] Found top parse to have a different payload casing than in another parse. Lowercasing PARSE 0's payload.", 140);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v20 = *(std::string **)a6;
    if (*(_QWORD *)(a6 + 8) == *(_QWORD *)a6)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)a6, &v25);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v25;
    else
      v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v21, size, (std::string *)__p);
    quasar::corrective_reranking::Parse::setPayload(v20, (const std::string *)__p);
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1ADB89670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v6;
  int v7;
  float v8;
  float v9;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  std::string::size_type size;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const void **v29;
  const void **v30;
  uint64_t i;
  uint64_t v32;
  uint64_t j;
  std::string::size_type v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  void *v42;
  char *v43;
  char *v44;
  std::string v45;
  void *p_p;
  _QWORD *v47;
  char v48;
  std::string __p;
  std::vector<int> v50;
  char v51;
  void *v52[2];
  char v53;
  __int128 v54;
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  quasar::corrective_reranking::tokenize(a2, 0, &v54);
  quasar::corrective_reranking::detokenize(v52, a3);
  v39 = ((*((_QWORD *)&v54 + 1) - (_QWORD)v54) >> 5) + 1431655765 * ((a3[1] - *a3) >> 3);
  if ((v39 & 0x80000000) == 0)
  {
    v6 = 0;
    do
    {
      LOBYTE(v50.__begin_) = 0;
      v51 = 0;
      memset(&__p, 0, sizeof(__p));
      if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
      {
        v7 = 0;
        v8 = INFINITY;
        do
        {
          quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v54, v6, v7 + v6 - 1431655765 * ((a3[1] - *a3) >> 3), (uint64_t *)&p_p);
          quasar::corrective_reranking::detokenize((__int128 **)&p_p, &v45);
          v9 = quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(**(_QWORD **)(a1 + 104), (uint64_t)v52, (uint64_t)&v45);
          if (v9 < *(float *)(a1 + 52) && v9 < v8)
          {
            v11 = p_p;
            v12 = v47;
            if (p_p != v47)
            {
              v13 = 0;
              v42 = 0;
              v43 = 0;
              v44 = 0;
              do
              {
                if (v13 >= v44)
                {
                  v14 = (v13 - (_BYTE *)v42) >> 3;
                  if ((unint64_t)(v14 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v15 = (v44 - (_BYTE *)v42) >> 2;
                  if (v15 <= v14 + 1)
                    v15 = v14 + 1;
                  if ((unint64_t)(v44 - (_BYTE *)v42) >= 0x7FFFFFFFFFFFFFF8)
                    v16 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v16 = v15;
                  if (v16)
                    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v44, v16);
                  else
                    v17 = 0;
                  v18 = &v17[8 * v14];
                  *(_QWORD *)v18 = v11[3];
                  v13 = v18 + 8;
                  v20 = (char *)v42;
                  v19 = v43;
                  if (v43 != v42)
                  {
                    do
                    {
                      v21 = *((_QWORD *)v19 - 1);
                      v19 -= 8;
                      *((_QWORD *)v18 - 1) = v21;
                      v18 -= 8;
                    }
                    while (v19 != v20);
                    v19 = (char *)v42;
                  }
                  v42 = v18;
                  v43 = v13;
                  v44 = &v17[8 * v16];
                  if (v19)
                    operator delete(v19);
                }
                else
                {
                  *(_QWORD *)v13 = v11[3];
                  v13 += 8;
                }
                v43 = v13;
                v11 += 4;
              }
              while (v11 != v12);
              quasar::corrective_reranking::TargetRange::TargetRange(&v55, (uint64_t)&v42);
              std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(&v50, (__n128 *)&v55);
              if (v55.__r_.__value_.__r.__words[0])
              {
                v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
                operator delete(v55.__r_.__value_.__l.__data_);
              }
              quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v50, a2, &v55);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = v55;
              if (v42)
              {
                v43 = (char *)v42;
                operator delete(v42);
              }
              v8 = v9;
            }
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        }
        while (v7++ < *(_DWORD *)(a1 + 48));
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (v51)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size)
          {
            v25 = a4[1];
            if (v25 >= a4[2])
            {
              v26 = std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string&,quasar::corrective_reranking::TargetRange&>(a4, (__int128 *)&__p, (uint64_t)&v50);
              v27 = a4;
            }
            else
            {
              std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>((std::string *)a4[1], (__int128 *)&__p, (uint64_t)&v50);
              v26 = v25 + 48;
              v27 = a4;
              a4[1] = v25 + 48;
            }
            v27[1] = v26;
            v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
        }
        if (v24 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v51 && v50.__begin_)
        {
          v50.__end_ = v50.__begin_;
          operator delete(v50.__begin_);
        }
      }
    }
    while (v6++ != v39);
  }
  v50.__end_ = 0;
  v50.__end_cap_.__value_ = 0;
  v50.__begin_ = (std::vector<int>::pointer)&v50.__end_;
  v30 = (const void **)*a4;
  v29 = (const void **)a4[1];
  while (v30 != v29)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v50, v30, (uint64_t)v30);
    v30 += 6;
  }
  v32 = *(_QWORD *)(a1 + 80);
  for (i = *(_QWORD *)(a1 + 88); v32 != i; v32 += 24)
  {
    quasar::corrective_reranking::findTextMatches(a2, v32, (uint64_t *)&__p);
    v34 = __p.__r_.__value_.__l.__size_;
    for (j = __p.__r_.__value_.__r.__words[0]; j != v34; j += 32)
    {
      if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v50, (const void **)j))
      {
        quasar::corrective_reranking::detokenize(&p_p, a3);
        if (quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(**(_QWORD **)(a1 + 104), (uint64_t)&p_p, j) < *(float *)(a1 + 52))
        {
          quasar::SystemConfig::Version::Version(&v55, *(_DWORD *)(j + 24), *(_DWORD *)(j + 28) - *(_DWORD *)(j + 24));
          v35 = (char *)operator new(8uLL);
          v42 = v35;
          *(_QWORD *)v35 = v55.__r_.__value_.__r.__words[0];
          v43 = v35 + 8;
          v44 = v35 + 8;
          quasar::corrective_reranking::TargetRange::TargetRange(&v45, (uint64_t)&v42);
          if (v42)
          {
            v43 = (char *)v42;
            operator delete(v42);
          }
          v36 = a4[1];
          if (v36 >= a4[2])
          {
            v37 = std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TargetRange&>(a4, (__int128 *)j, (uint64_t)&v45);
            v38 = a4;
          }
          else
          {
            std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string const&,quasar::corrective_reranking::TargetRange&,0>((std::string *)a4[1], (__int128 *)j, (uint64_t)&v45);
            v37 = v36 + 48;
            v38 = a4;
            a4[1] = v36 + 48;
          }
          v38[1] = v37;
          if (v45.__r_.__value_.__r.__words[0])
          {
            v45.__r_.__value_.__l.__size_ = v45.__r_.__value_.__r.__words[0];
            operator delete(v45.__r_.__value_.__l.__data_);
          }
        }
        if (v48 < 0)
          operator delete(p_p);
      }
    }
    p_p = &__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
  std::__tree<std::string>::destroy((uint64_t)&v50, (char *)v50.__end_);
  if (v53 < 0)
    operator delete(v52[0]);
  v50.__begin_ = (std::vector<int>::pointer)&v54;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
}

void sub_1ADB89C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  a33 = (void *)(v42 - 160);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = a11;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x34F72C234F72C235 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::corrective_reranking::Parse>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 232 * a2;
    while (v3 != v7)
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v3 - 232));
    a1[1] = v7;
  }
}

void quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(uint64_t a1@<X0>, const quasar::corrective_reranking::Parse *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  std::__split_buffer<std::string>::pointer end_high;
  float v14;
  int v15;
  char v16;
  std::__split_buffer<std::string>::pointer first;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t i;
  unint64_t v23;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  std::string::size_type size;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  uint64_t j;
  _OWORD *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  std::string::size_type v42;
  uint64_t v43;
  uint64_t k;
  __int128 v45;
  std::string::size_type v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  std::string *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  std::string::size_type v56;
  unint64_t AdjacentWordsToTarget;
  uint64_t v58;
  uint64_t v59;
  uint64_t m;
  std::string::size_type v61;
  _OWORD *v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  std::string *v67;
  std::string *v68;
  __int128 v69;
  std::string::size_type v70;
  uint64_t n;
  uint64_t v72;
  std::vector<std::string>::pointer end;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::string *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  int v82;
  std::string v83;
  uint64_t v84;
  std::__split_buffer<std::string> __p;
  int v86;
  std::string v87;
  std::vector<std::string> v88;
  std::string __str;
  __int128 v90;
  std::string v91;
  uint64_t v92;
  uint64_t v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;

  quasar::corrective_reranking::Parse::Parse((std::string *)a6, a2);
  v12 = quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v96, (const quasar::corrective_reranking::Parse *)a6);
  quasar::corrective_reranking::TextEdit::onText(v12, a3, 1, (uint64_t)v94);
  quasar::corrective_reranking::TransformerClassifier::classifyCapitalization(*(unsigned int **)(*(_QWORD *)(a1 + 104) + 24), (uint64_t)v94, &v92);
  if (!quasar::corrective_reranking::Parse::isPayloadExpectingCommand(a2))
    goto LABEL_80;
  quasar::corrective_reranking::Parse::getPayload(a2, (std::string *)&__p);
  if (SHIBYTE(__p.__end_) >= 0)
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
  else
    end_high = __p.__begin_;
  if (SHIBYTE(__p.__end_) < 0)
  {
    operator delete(__p.__first_);
    if (!end_high)
      goto LABEL_80;
  }
  else if (!end_high)
  {
    goto LABEL_80;
  }
  quasar::corrective_reranking::TextEdit::adjustedTargetRange(v96, a3, (int **)&v83);
  if (v83.__r_.__value_.__r.__words[0] == v83.__r_.__value_.__l.__size_)
    v14 = 0.0;
  else
    v14 = (float)*(int *)v83.__r_.__value_.__l.__data_;
  quasar::corrective_reranking::Parse::getIntent(a2, (uint64_t)&__p);
  v15 = (int)v14;
  v16 = HIBYTE(__p.__end_);
  if (SHIBYTE(__p.__end_) < 0)
  {
    if (__p.__begin_ != (std::__split_buffer<std::string>::pointer)11)
    {
LABEL_26:
      operator delete(__p.__first_);
      goto LABEL_27;
    }
    first = __p.__first_;
LABEL_17:
    v18 = first->__r_.__value_.__r.__words[0];
    v19 = *(std::string::size_type *)((char *)first->__r_.__value_.__r.__words + 3);
    if (v18 == 0x6661747265736E69 && v19 == 0x7265746661747265)
    {
      quasar::corrective_reranking::Parse::getPayload(a2, &v91);
      v15 += quasar::corrective_reranking::isPunctuation((char *)&v91) ^ 1;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v16 = HIBYTE(__p.__end_);
    }
    if ((v16 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (SHIBYTE(__p.__end_) == 11)
  {
    first = (std::__split_buffer<std::string>::pointer)&__p;
    goto LABEL_17;
  }
LABEL_27:
  memset(&v91, 0, sizeof(v91));
  quasar::corrective_reranking::Parse::getPayload(a2, &__str);
  quasar::corrective_reranking::tokenize((uint64_t)&__str, 0, (__int128 *)&__p);
  quasar::corrective_reranking::getTokens((__int128 **)&__p, (uint64_t *)&v90);
  v82 = a5;
  v88.__begin_ = (std::vector<std::string>::pointer)&__p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v21 = v92;
  for (i = v93; v21 != i; v21 += 64)
  {
    v23 = *(int *)(v21 + 48);
    if (v15 <= (int)v23)
    {
      quasar::corrective_reranking::Parse::getPayload(a2, (std::string *)&__p);
      if (SHIBYTE(__p.__end_) >= 0)
        begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
      else
        begin = __p.__begin_;
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if ((unint64_t)begin + v15 > v23)
      {
        v25 = (uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 6;
        if (v25 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3))
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
        }
        else
        {
          v26 = (__int128 *)(v90 + 24 * v25);
          if (*((char *)v26 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
          }
          else
          {
            v27 = *v26;
            __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
          }
        }
        if (quasar::corrective_reranking::classifyCasing((uint64_t)&__str) == 3)
        {
          quasar::corrective_reranking::TokenClassification::TokenClassification((quasar::corrective_reranking::TokenClassification *)&__p);
          std::string::operator=((std::string *)&__p, &__str);
          v86 = 3;
          size = v91.__r_.__value_.__l.__size_;
          if (v91.__r_.__value_.__l.__size_ >= v91.__r_.__value_.__r.__words[2])
          {
            v29 = std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification&>((uint64_t *)&v91, (__int128 *)&__p);
          }
          else
          {
            std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>((int)&v91.__r_.__value_.__r.__words[2], (std::string *)v91.__r_.__value_.__l.__size_, (__int128 *)&__p);
            v29 = size + 64;
          }
          v91.__r_.__value_.__l.__size_ = v29;
          if (__p.__end_cap_.__value_)
          {
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)__p.__end_cap_.__value_;
            operator delete(__p.__end_cap_.__value_);
          }
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
        }
        else
        {
          v30 = v91.__r_.__value_.__l.__size_;
          if (v91.__r_.__value_.__l.__size_ >= v91.__r_.__value_.__r.__words[2])
          {
            v31 = std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification const&>((uint64_t *)&v91, (__int128 *)v21);
          }
          else
          {
            std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>((int)&v91.__r_.__value_.__r.__words[2], (std::string *)v91.__r_.__value_.__l.__size_, (__int128 *)v21);
            v31 = v30 + 64;
          }
          v91.__r_.__value_.__l.__size_ = v31;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  memset(&__str, 0, sizeof(__str));
  v32 = v91.__r_.__value_.__l.__size_;
  for (j = v91.__r_.__value_.__r.__words[0]; j != v32; j += 64)
  {
    quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(j + 56), j, (std::string *)&v88);
    v34 = (_OWORD *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
    {
      v36 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
      v37 = v36 + 1;
      if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556
         * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) > v37)
        v37 = 0x5555555555555556
            * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v38 = 0xAAAAAAAAAAAAAAALL;
      else
        v38 = v37;
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)&__str.__r_.__value_.__r.__words[2];
      if (v38)
        v39 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v38);
      else
        v39 = 0;
      v40 = v39 + v36;
      __p.__first_ = v39;
      __p.__begin_ = v40;
      __p.__end_cap_.__value_ = &v39[v38];
      v41 = *(_OWORD *)&v88.__begin_;
      v40->__r_.__value_.__r.__words[2] = (std::string::size_type)v88.__end_cap_.__value_;
      *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
      memset(&v88, 0, sizeof(v88));
      __p.__end_ = v40 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__str, &__p);
      v42 = __str.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
      __str.__r_.__value_.__l.__size_ = v42;
      if (SHIBYTE(v88.__end_cap_.__value_) < 0)
        operator delete(v88.__begin_);
    }
    else
    {
      v35 = *(_OWORD *)&v88.__begin_;
      *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 16) = v88.__end_cap_.__value_;
      *v34 = v35;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v34 + 24;
    }
  }
  quasar::corrective_reranking::detokenize(&__p, &__str);
  quasar::corrective_reranking::Parse::getPayload(a2, &v87);
  a5 = v82;
  quasar::corrective_reranking::transferLetterCasing((uint64_t)&__p, (uint64_t)&v87, (std::string *)&v88);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  *(_OWORD *)&__p.__first_ = *(_OWORD *)&v88.__begin_;
  __p.__end_ = v88.__end_cap_.__value_;
  HIBYTE(v88.__end_cap_.__value_) = 0;
  LOBYTE(v88.__begin_) = 0;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  quasar::corrective_reranking::Parse::setPayload((std::string *)a6, (const std::string *)&__p);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  __p.__first_ = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = &v91;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v83.__r_.__value_.__r.__words[0])
  {
    v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
    operator delete(v83.__r_.__value_.__l.__data_);
  }
LABEL_80:
  if (a4 >= 1)
  {
    if (!*(_BYTE *)(a6 + 112))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"newParse.targetRange", 20);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    memset(&v91, 0, sizeof(v91));
    v43 = v92;
    for (k = v93; v43 != k; v43 += 64)
    {
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v45 = *(_OWORD *)v43;
        v83.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v45;
      }
      v84 = *(_QWORD *)(v43 + 48);
      v46 = v91.__r_.__value_.__l.__size_;
      if (v91.__r_.__value_.__l.__size_ >= v91.__r_.__value_.__r.__words[2])
      {
        v48 = (uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 5;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = v91.__r_.__value_.__r.__words[2] - v91.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v91.__r_.__value_.__r.__words[2] - v91.__r_.__value_.__r.__words[0]) >> 4 > v49)
          v49 = v50 >> 4;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
          v51 = 0x7FFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__r_.__value_.__r.__words[2];
        v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v91.__r_.__value_.__r.__words[2], v51);
        v53 = (char *)v52 + 32 * v48;
        __p.__first_ = v52;
        __p.__begin_ = (std::__split_buffer<std::string>::pointer)v53;
        __p.__end_cap_.__value_ = (std::string *)((char *)v52 + 32 * v54);
        v55 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
        *((_QWORD *)v53 + 2) = *((_QWORD *)&v83.__r_.__value_.__l + 2);
        *(_OWORD *)v53 = v55;
        memset(&v83, 0, sizeof(v83));
        *((_QWORD *)v53 + 3) = v84;
        __p.__end_ = (std::__split_buffer<std::string>::pointer)(v53 + 32);
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer((uint64_t *)&v91, &__p);
        v56 = v91.__r_.__value_.__l.__size_;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
        v91.__r_.__value_.__l.__size_ = v56;
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
      }
      else
      {
        v47 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
        *(_QWORD *)(v91.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v83.__r_.__value_.__l + 2);
        *(_OWORD *)v46 = v47;
        memset(&v83, 0, sizeof(v83));
        *(_QWORD *)(v46 + 24) = v84;
        v91.__r_.__value_.__l.__size_ = v46 + 32;
      }
    }
    quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a6, (uint64_t)&__p);
    quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)a6, &__str);
    quasar::corrective_reranking::tokenize((uint64_t)&__str, 0, &v90);
    quasar::corrective_reranking::getTokens((__int128 **)&v90, (uint64_t *)&v83);
    AdjacentWordsToTarget = quasar::corrective_reranking::findAdjacentWordsToTarget((uint64_t)&__p, a6 + 88, &v83, (uint64_t *)&v91, a5);
    v59 = v58;
    v88.__begin_ = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    v88.__begin_ = (std::vector<std::string>::pointer)&v90;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>(&v92, AdjacentWordsToTarget, HIDWORD(AdjacentWordsToTarget), (uint64_t *)&v83);
    quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>(&v92, v59, HIDWORD(v59), (uint64_t *)&v90);
    memset(&__str, 0, sizeof(__str));
    v61 = v83.__r_.__value_.__l.__size_;
    for (m = v83.__r_.__value_.__r.__words[0]; m != v61; m += 64)
    {
      quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(m + 56), m, (std::string *)&v88);
      v62 = (_OWORD *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        v64 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
        v65 = v64 + 1;
        if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) > v65)
          v65 = 0x5555555555555556
              * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v66 = 0xAAAAAAAAAAAAAAALL;
        else
          v66 = v65;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&__str.__r_.__value_.__r.__words[2];
        if (v66)
          v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v66);
        else
          v67 = 0;
        v68 = v67 + v64;
        __p.__first_ = v67;
        __p.__begin_ = v68;
        __p.__end_cap_.__value_ = &v67[v66];
        v69 = *(_OWORD *)&v88.__begin_;
        v68->__r_.__value_.__r.__words[2] = (std::string::size_type)v88.__end_cap_.__value_;
        *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
        memset(&v88, 0, sizeof(v88));
        __p.__end_ = v68 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__str, &__p);
        v70 = __str.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
        __str.__r_.__value_.__l.__size_ = v70;
        if (SHIBYTE(v88.__end_cap_.__value_) < 0)
          operator delete(v88.__begin_);
      }
      else
      {
        v63 = *(_OWORD *)&v88.__begin_;
        *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 16) = v88.__end_cap_.__value_;
        *v62 = v63;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v62 + 24;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a6 + 184));
    *(std::string *)(a6 + 184) = __str;
    memset(&__str, 0, sizeof(__str));
    memset(&v88, 0, sizeof(v88));
    v72 = *((_QWORD *)&v90 + 1);
    for (n = v90; n != v72; n += 64)
    {
      quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(n + 56), n, &v87);
      end = v88.__end_;
      if (v88.__end_ >= v88.__end_cap_.__value_)
      {
        v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_ - (char *)v88.__begin_) >> 3);
        v76 = v75 + 1;
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) > v76)
          v76 = 0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) >= 0x555555555555555)
          v77 = 0xAAAAAAAAAAAAAAALL;
        else
          v77 = v76;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v88.__end_cap_;
        if (v77)
          v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v88.__end_cap_, v77);
        else
          v78 = 0;
        v79 = v78 + v75;
        __p.__first_ = v78;
        __p.__begin_ = v79;
        __p.__end_cap_.__value_ = &v78[v77];
        v80 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v79->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
        memset(&v87, 0, sizeof(v87));
        __p.__end_ = v79 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v88, &__p);
        v81 = v88.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
        v88.__end_ = v81;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
      }
      else
      {
        v74 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v88.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v74;
        v88.__end_ = end + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a6 + 208));
    *(std::vector<std::string> *)(a6 + 208) = v88;
    memset(&v88, 0, sizeof(v88));
    __p.__first_ = (std::__split_buffer<std::string>::pointer)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = (std::__split_buffer<std::string>::pointer)&v90;
    std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &v83;
    std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &v91;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v92;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v95 < 0)
    operator delete(v94[0]);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v102 < 0)
    operator delete(v101);
  if (v100 && v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v97 < 0)
    operator delete(v96[0]);
}

BOOL quasar::corrective_reranking::CorrectiveReranker::hasCasingConflictsWithTopParse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::corrective_reranking::Parse *v3;
  _BOOL8 result;
  quasar::corrective_reranking::Parse *v8;
  unint64_t v9;
  BOOL isPayloadExpectingCommand;
  BOOL v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  char v19;
  std::string *p_p;
  std::string *v21;
  _BOOL4 v22;
  char v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  std::string *v27;
  uint64_t v28;
  std::string *v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  int v42;
  std::string *v43;
  uint64_t v44;
  std::string *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v51;
  std::string __s1[9];
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string __p;
  std::string v58;
  std::string v59;
  std::string v60;
  _BYTE v61[152];

  v3 = *(quasar::corrective_reranking::Parse **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    result = quasar::corrective_reranking::Parse::isPayloadExpectingCommand(*(quasar::corrective_reranking::Parse **)a2);
    if (!result)
      return result;
    v8 = *(quasar::corrective_reranking::Parse **)a2;
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)) >= 2)
    {
      v9 = 1;
      while (1)
      {
        quasar::corrective_reranking::Parse::Parse(&v60, (quasar::corrective_reranking::Parse *)((char *)v8 + 232 * v9));
        isPayloadExpectingCommand = quasar::corrective_reranking::Parse::isPayloadExpectingCommand((quasar::corrective_reranking::Parse *)&v60);
        if (v61[24])
          v11 = isPayloadExpectingCommand;
        else
          v11 = 0;
        if (!v11 || !*((_BYTE *)v3 + 112))
        {
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v60);
          goto LABEL_107;
        }
        quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v61, a3, &v59);
        quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v3 + 88, a3, &v58);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v59;
        else
          v12 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v12, size, __s1);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v58;
        else
          v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        else
          v15 = v58.__r_.__value_.__l.__size_;
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v14, v15, &__p);
        v16 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        else
          v17 = __s1[0].__r_.__value_.__l.__size_;
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = __p.__r_.__value_.__l.__size_;
        if (v17 != v18)
          goto LABEL_39;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1[0].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1[0].__r_.__value_.__l.__data_, p_p, __s1[0].__r_.__value_.__l.__size_))
            goto LABEL_39;
        }
        else if (*((_BYTE *)&__s1[0].__r_.__value_.__s + 23))
        {
          v21 = __s1;
          while (v21->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            v21 = (std::string *)((char *)v21 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v16)
              goto LABEL_68;
          }
LABEL_39:
          v22 = 0;
          if ((v19 & 0x80) == 0)
            goto LABEL_41;
LABEL_40:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_41;
        }
LABEL_68:
        quasar::corrective_reranking::Parse::getPayload(v3, &v55);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v55;
        else
          v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        else
          v37 = v55.__r_.__value_.__l.__size_;
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v36, v37, &v56);
        quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)&v60, &v53);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v53;
        else
          v38 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        else
          v39 = v53.__r_.__value_.__l.__size_;
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v38, v39, &v54);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        else
          v40 = v56.__r_.__value_.__l.__size_;
        v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        v42 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = v54.__r_.__value_.__l.__size_;
        if (v40 != v41)
        {
          v22 = 0;
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_117;
LABEL_110:
          operator delete(v54.__r_.__value_.__l.__data_);
          goto LABEL_117;
        }
        v43 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v54
            : (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x80) != 0)
          break;
        if (*((_BYTE *)&v56.__r_.__value_.__s + 23))
        {
          v44 = HIBYTE(v56.__r_.__value_.__r.__words[2]) - 1;
          v45 = &v56;
          do
          {
            v47 = v45->__r_.__value_.__s.__data_[0];
            v45 = (std::string *)((char *)v45 + 1);
            v46 = v47;
            v49 = v43->__r_.__value_.__s.__data_[0];
            v43 = (std::string *)((char *)v43 + 1);
            v48 = v49;
            v51 = v44-- != 0;
            v22 = v46 == v48;
          }
          while (v46 == v48 && v51);
LABEL_116:
          if (v42 < 0)
            goto LABEL_110;
          goto LABEL_117;
        }
        v22 = 1;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_110;
LABEL_117:
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_40;
LABEL_41:
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__s1[0].__r_.__value_.__l.__data_);
          if (!v22)
            goto LABEL_101;
        }
        else if (!v22)
        {
          goto LABEL_101;
        }
        if ((uint64_t)v9 >= *(int *)(a1 + 64))
        {
          quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(a1, (const quasar::corrective_reranking::Parse *)&v60, a3, 0, 0, (uint64_t)__s1);
          quasar::corrective_reranking::Parse::operator=((uint64_t)&v60, (__int128 *)__s1);
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__s1);
        }
        quasar::corrective_reranking::Parse::getPayload(v3, __s1);
        quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)&v60, &__p);
        v23 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        else
          v24 = __s1[0].__r_.__value_.__l.__size_;
        v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = __p.__r_.__value_.__l.__size_;
        if (v24 == v25)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
          {
            v33 = memcmp(__s1[0].__r_.__value_.__l.__data_, v27, __s1[0].__r_.__value_.__l.__size_) != 0;
            if ((v26 & 0x80000000) == 0)
              goto LABEL_65;
          }
          else if (*((_BYTE *)&__s1[0].__r_.__value_.__s + 23))
          {
            v28 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]) - 1;
            v29 = __s1;
            do
            {
              v31 = v29->__r_.__value_.__s.__data_[0];
              v29 = (std::string *)((char *)v29 + 1);
              v30 = v31;
              v32 = v27->__r_.__value_.__s.__data_[0];
              v27 = (std::string *)((char *)v27 + 1);
              v33 = v30 != v32;
            }
            while (v30 == v32 && v28-- != 0);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_65:
              if ((v23 & 0x80) == 0)
                goto LABEL_66;
              goto LABEL_100;
            }
          }
          else
          {
            v33 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_65;
          }
        }
        else
        {
          v33 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_65;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&__s1[0].__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_66:
          if (v33)
            goto LABEL_67;
          goto LABEL_101;
        }
LABEL_100:
        operator delete(__s1[0].__r_.__value_.__l.__data_);
        if (v33)
        {
LABEL_67:
          v35 = 0;
          goto LABEL_102;
        }
LABEL_101:
        v35 = 1;
LABEL_102:
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v60);
        if (!v35)
          return 1;
LABEL_107:
        ++v9;
        v8 = *(quasar::corrective_reranking::Parse **)a2;
        if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) <= v9)
          return 0;
      }
      v22 = memcmp(v56.__r_.__value_.__l.__data_, v43, v56.__r_.__value_.__l.__size_) == 0;
      goto LABEL_116;
    }
  }
  return 0;
}

void sub_1ADB8B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a67;

  if (a60 < 0)
    operator delete(__p);
  if (a66 < 0)
    operator delete(a61);
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&a67);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::featurizeParses(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];

  kaldi::Matrix<float>::Resize(a6, 1332920885 * ((unint64_t)(a2[1] - *a2) >> 3), (a1[30] - a1[29]) >> 3, 1, 0);
  v13 = *a2;
  v12 = a2[1];
  if (v12 != *a2)
  {
    v14 = 0;
    v15 = a1[29];
    v16 = a1[30];
    do
    {
      if (v16 == v15)
      {
        v16 = v15;
      }
      else
      {
        v17 = 0;
        do
        {
          v18 = *(_QWORD *)(v15 + 8 * v17);
          v19 = *a2 + 232 * v14;
          v20 = a1[13];
          v21[0] = a2;
          v21[1] = v19;
          v21[2] = v20;
          v21[3] = a3;
          v21[4] = a4;
          v21[5] = a5;
          *(float *)(*(_QWORD *)a6 + 4 * (int)v14 * a6[2].i32[0] + 4 * v17++) = (*(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 16))(v18, v21);
          v15 = a1[29];
          v16 = a1[30];
        }
        while (v17 < (v16 - v15) >> 3);
        v13 = *a2;
        v12 = a2[1];
      }
      ++v14;
    }
    while (0x34F72C234F72C235 * ((v12 - v13) >> 3) > v14);
  }
}

void quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W3>, std::string::size_type a4@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 **v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64[2];
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string v72;
  std::string v73;
  int v74;
  std::string __p[9];
  char v76;
  __int128 v77;
  std::string v78;
  __int128 v79;
  unint64_t v80;
  __int128 ***v81;
  uint64_t v82;
  void *v83[2];
  char v84;
  std::string v85;
  _QWORD v86[3];

  v86[0] = *MEMORY[0x1E0C80C00];
  v80 = 0;
  v5 = 0uLL;
  v79 = 0u;
  v6 = *a2;
  v48 = a2[1];
  if (*a2 == v48)
  {
    v47 = 0;
LABEL_105:
    *(_OWORD *)a4 = v5;
    *(_QWORD *)(a4 + 16) = v47;
    v80 = 0;
    v79 = 0uLL;
    goto LABEL_106;
  }
  v8 = a1;
  v9 = (_QWORD *)(a1 + 112);
  v49 = a4 + 16;
  while (2)
  {
    quasar::corrective_reranking::detokenize((__int128 **)(v6 + 32), __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = __p;
    else
      v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      size = __p[0].__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v10, size, &v78);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v12 = v8;
    quasar::corrective_reranking::OverridesDictionary::findPhraseOverride(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 56), (uint64_t)&v78, a3, &v77);
    v13 = (uint64_t *)*((_QWORD *)&v77 + 1);
    for (i = (uint64_t *)v77; i != v13; i += 4)
    {
      if (!*((_BYTE *)i + 24))
        continue;
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      v76 = 0;
      v15 = *((unsigned __int8 *)i + 23);
      if (*((char *)i + 23) < 0)
      {
        if (i[1] != 9)
          goto LABEL_29;
        v16 = (uint64_t *)*i;
      }
      else
      {
        v16 = i;
        if (v15 != 9)
          goto LABEL_24;
      }
      v17 = *v16;
      v18 = *((unsigned __int8 *)v16 + 8);
      if (v17 == 0x6C416574656C6564 && v18 == 108)
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "deleteAll");
        v21 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
        v22 = v21;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v85.__r_.__value_.__l.__data_);
          if (!v22)
          {
LABEL_52:
            std::string::basic_string[abi:ne180100]<0>(&v72, "delete");
            v34 = *(_DWORD *)(v6 + 24);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
            else
              v73 = v72;
            v74 = v34;
            std::string::basic_string[abi:ne180100]<0>(v83, "delete");
            v69 = 0;
            v70 = 0;
            v71 = 0;
            *(_QWORD *)&v66 = &v69;
            BYTE8(v66) = 0;
            v69 = (std::string *)operator new(0x18uLL);
            v70 = v69;
            v71 = v69 + 1;
            v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (__int128 *)v83, (__int128 *)&v85, v69);
            v37 = *(float *)(v6 + 80);
            v61 = 0;
            v62 = 0;
            v63 = 0;
            quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
            v66 = *(_OWORD *)v64;
            v67 = v65;
            v64[1] = 0;
            v65 = 0;
            v64[0] = 0;
            v68 = 1;
            std::string::basic_string[abi:ne180100]<0>(v59, "");
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (__int128 **)&v69, (uint64_t)&v66, (__int128 *)v59, (uint64_t)&v56, 1, &v53, v37, 0.0, (__int128 **)&v50);
            std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (__int128 *)&v85);
            goto LABEL_66;
          }
        }
        else if (!v21)
        {
          goto LABEL_52;
        }
        v15 = *((unsigned __int8 *)i + 23);
        if ((v15 & 0x80) != 0)
        {
LABEL_29:
          if (i[1] != 9)
            goto LABEL_41;
          v20 = (uint64_t *)*i;
          goto LABEL_31;
        }
      }
      else if ((v15 & 0x80) != 0)
      {
        goto LABEL_29;
      }
LABEL_24:
      if (v15 != 9)
        goto LABEL_36;
      v20 = i;
LABEL_31:
      v23 = *v20;
      v24 = *((unsigned __int8 *)v20 + 8);
      if (v23 != 0x6C417463656C6573 || v24 != 108)
      {
        if ((v15 & 0x80) == 0)
        {
LABEL_36:
          v26 = i;
          if (v15 != 16)
            goto LABEL_83;
LABEL_43:
          v29 = *v26;
          v30 = v26[1];
          if (v29 != 0x61546574656C6564 || v30 != 0x7373656C74656772)
            goto LABEL_83;
          std::string::basic_string[abi:ne180100]<0>(&v85, "deleteTargetless");
          v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
          v33 = v32;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v85.__r_.__value_.__l.__data_);
            if (v33)
              goto LABEL_83;
          }
          else if (v32)
          {
            goto LABEL_83;
          }
          std::string::basic_string[abi:ne180100]<0>(&v72, "delete");
          v36 = *(_DWORD *)(v6 + 24);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          else
            v73 = v72;
          v74 = v36;
          std::string::basic_string[abi:ne180100]<0>(v83, "deleteTargetless");
          v69 = 0;
          v70 = 0;
          v71 = 0;
          *(_QWORD *)&v66 = &v69;
          BYTE8(v66) = 0;
          v69 = (std::string *)operator new(0x18uLL);
          v70 = v69;
          v71 = v69 + 1;
          v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (__int128 *)v83, (__int128 *)&v85, v69);
          v39 = *(float *)(v6 + 80);
          quasar::SystemConfig::Version::Version(&v82, 0, 0);
          v40 = operator new(8uLL);
          v61 = v40;
          *v40 = v82;
          v62 = v40 + 1;
          v63 = v40 + 1;
          quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
          v66 = *(_OWORD *)v64;
          v67 = v65;
          v64[1] = 0;
          v65 = 0;
          v64[0] = 0;
          v68 = 1;
          std::string::basic_string[abi:ne180100]<0>(v59, "");
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (__int128 **)&v69, (uint64_t)&v66, (__int128 *)v59, (uint64_t)&v56, 1, &v53, v39, 0.0, (__int128 **)&v50);
          std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (__int128 *)&v85);
          goto LABEL_66;
        }
LABEL_41:
        if (i[1] != 16)
          goto LABEL_83;
        v26 = (uint64_t *)*i;
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "selectAll");
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
      v28 = v27;
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v85.__r_.__value_.__l.__data_);
        if (v28)
        {
LABEL_40:
          v15 = *((unsigned __int8 *)i + 23);
          if ((v15 & 0x80) == 0)
            goto LABEL_36;
          goto LABEL_41;
        }
      }
      else if (v27)
      {
        goto LABEL_40;
      }
      std::string::basic_string[abi:ne180100]<0>(&v72, "select");
      v35 = *(_DWORD *)(v6 + 24);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      else
        v73 = v72;
      v74 = v35;
      std::string::basic_string[abi:ne180100]<0>(v83, "select");
      v69 = 0;
      v70 = 0;
      v71 = 0;
      *(_QWORD *)&v66 = &v69;
      BYTE8(v66) = 0;
      v69 = (std::string *)operator new(0x18uLL);
      v70 = v69;
      v71 = v69 + 1;
      v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (__int128 *)v83, (__int128 *)&v85, v69);
      v38 = *(float *)(v6 + 80);
      v61 = 0;
      v62 = 0;
      v63 = 0;
      quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
      v66 = *(_OWORD *)v64;
      v67 = v65;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v68 = 1;
      std::string::basic_string[abi:ne180100]<0>(v59, "");
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (__int128 **)&v69, (uint64_t)&v66, (__int128 *)v59, (uint64_t)&v56, 1, &v53, v38, 0.0, (__int128 **)&v50);
      std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (__int128 *)&v85);
LABEL_66:
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v85);
      v81 = &v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      v50 = &v53;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v60 < 0)
        operator delete(v59[0]);
      if (v68 && (_QWORD)v66)
      {
        *((_QWORD *)&v66 + 1) = v66;
        operator delete((void *)v66);
      }
      if (v64[0])
      {
        v64[1] = v64[0];
        operator delete(v64[0]);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      *(_QWORD *)&v66 = &v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      if (v84 < 0)
        operator delete(v83[0]);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
LABEL_83:
      if (v76)
      {
        if (a3)
        {
          v41 = *((_QWORD *)&v79 + 1);
          if (*((_QWORD *)&v79 + 1) >= v80)
          {
            v42 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)&v79, (const quasar::corrective_reranking::Parse *)__p);
          }
          else
          {
            quasar::corrective_reranking::Parse::Parse(*((std::string **)&v79 + 1), (const quasar::corrective_reranking::Parse *)__p);
            v42 = v41 + 232;
          }
          *((_QWORD *)&v79 + 1) = v42;
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse(&v85, (const quasar::corrective_reranking::Parse *)__p);
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          v73.__r_.__value_.__r.__words[0] = a4;
          v73.__r_.__value_.__s.__data_[8] = 0;
          v43 = (char *)operator new(0xE8uLL);
          *(_QWORD *)a4 = v43;
          *(_QWORD *)(a4 + 8) = v43;
          *(_QWORD *)(a4 + 16) = v43 + 232;
          *(_QWORD *)(a4 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v49, (uint64_t)&v85, (uint64_t)v86, (uint64_t)v43);
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v85);
        }
        if (v76)
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
        if (!a3)
        {
          v46 = 0;
          goto LABEL_98;
        }
      }
    }
    v44 = *((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1) >= v80)
    {
      v45 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)&v79, (const quasar::corrective_reranking::Parse *)v6);
    }
    else
    {
      quasar::corrective_reranking::Parse::Parse(*((std::string **)&v79 + 1), (const quasar::corrective_reranking::Parse *)v6);
      v45 = v44 + 232;
    }
    *((_QWORD *)&v79 + 1) = v45;
    v46 = 1;
LABEL_98:
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if ((v46 & 1) != 0)
    {
      v6 += 232;
      v8 = v12;
      if (v6 == v48)
      {
        v5 = v79;
        v47 = v80;
        goto LABEL_105;
      }
      continue;
    }
    break;
  }
LABEL_106:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADB8BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a45 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x218]))
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&a50);
  a50 = (uint64_t)&STACK[0x220];
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  a50 = (uint64_t)&STACK[0x250];
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  _Unwind_Resume(a1);
}

uint64_t std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>(uint64_t a1, __int128 *a2)
{
  if (*(_BYTE *)(a1 + 232))
  {
    quasar::corrective_reranking::Parse::operator=(a1, a2);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse*>(a1, a2);
    *(_BYTE *)(a1 + 232) = 1;
  }
  return a1;
}

void quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation(int **this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BOOL4 v10;
  int *v11;
  int *v12;
  unsigned int v13;
  float v14;
  unsigned __int8 *v15;
  unsigned int AdjacentPunctuationRange;
  void *v17;
  unsigned int v18;
  void *v19;
  BOOL v20;
  void *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  memset(v46, 0, sizeof(v46));
  if (!quasar::corrective_reranking::Parse::isTargetExpectingCommand((quasar::corrective_reranking::Parse *)this))
    goto LABEL_21;
  quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)this, (uint64_t)__p);
  if (SBYTE7(v27) < 0)
  {
    if (__p[1] != (void *)6)
    {
      operator delete(__p[0]);
      goto LABEL_21;
    }
    v10 = *(_DWORD *)__p[0] != 1701602660 || *((_WORD *)__p[0] + 2) != 25972;
    operator delete(__p[0]);
    if (v10)
      goto LABEL_21;
  }
  else
  {
    if (SBYTE7(v27) != 6)
      goto LABEL_21;
    if (LODWORD(__p[0]) != 1701602660 || WORD2(__p[0]) != 25972)
      goto LABEL_21;
  }
  v12 = this[11];
  v11 = this[12];
  if (v12 == v11)
  {
    v13 = 0;
    v14 = INFINITY;
  }
  else
  {
    v13 = (int)(float)*v12;
    v14 = (float)(*(v11 - 1) + *(v11 - 2));
  }
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(this + 11), a3, (std::string *)__p);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a2 + 192), (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  if (v15)
  {
    AdjacentPunctuationRange = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13, -10);
    v17 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13, 10);
    v18 = HIDWORD(v17) + (_DWORD)v17;
    v13 = AdjacentPunctuationRange;
    goto LABEL_36;
  }
  v19 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13 - 1, -10);
  if (HIDWORD(v19))
    v20 = 0;
  else
    v20 = (int)v19 < 0;
  if (!v20 && (uint64_t)v19 <= 0)
  {
LABEL_21:
    quasar::corrective_reranking::Parse::Parse((std::string *)a4, (const quasar::corrective_reranking::Parse *)this);
    goto LABEL_22;
  }
  v21 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, (int)v14, 10);
  if (HIDWORD(v21))
    v18 = HIDWORD(v21) + (_DWORD)v21;
  else
    v18 = (int)v14;
LABEL_36:
  quasar::corrective_reranking::Parse::Parse((std::string *)a4, (const quasar::corrective_reranking::Parse *)this);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_22;
  if ((v13 & 0x80000000) != 0)
    goto LABEL_44;
  if (*(char *)(a3 + 23) < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if (v22 <= v13)
      goto LABEL_44;
  }
  else
  {
    v22 = *(unsigned __int8 *)(a3 + 23);
    if (v13 >= v22)
      goto LABEL_44;
  }
  if (v18 < v13 || v22 < v18)
  {
LABEL_44:
    if (quasar::gLogLevel >= 2)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Floating Punctuation Removal: Invalid targetStartIndex (", 56);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") and targetEndIndex", 20);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)").", 2);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    goto LABEL_22;
  }
  quasar::SystemConfig::Version::Version(v47, v13, v18 - v13);
  v25 = operator new(8uLL);
  v43 = v25;
  *v25 = v47[0];
  v44 = v25 + 1;
  v45 = v25 + 1;
  quasar::corrective_reranking::TargetRange::TargetRange(__p, (uint64_t)&v43);
  std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>((std::vector<int> *)(a4 + 88), (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
LABEL_22:
  __p[0] = v46;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADB8C1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  quasar::corrective_reranking::Parse *v10;
  uint64_t v11;
  void *v13;

  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = *(void **)(v11 - 144);
  if (v13)
  {
    *(_QWORD *)(v11 - 136) = v13;
    operator delete(v13);
  }
  quasar::corrective_reranking::Parse::~Parse(v10);
  __p = (void *)(v11 - 120);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::string::size_type v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  void *__p[2];
  char v29;
  uint64_t v30;

  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_DWORD *)(a2 + 8);
  quasar::SystemConfig::Version::Version(&v30, v8, 0);
  if (a4 >= 0)
    v9 = a4;
  else
    v9 = -a4;
  if (!a4)
    return (void *)v30;
  v10 = 0;
  v11 = 0;
  if (v9 <= 1)
    v12 = 1;
  else
    v12 = v9;
  while (1)
  {
    if (a4 < 0)
      v13 = v10;
    else
      v13 = v11;
    v14 = (v13 + a3);
    if (v13 + a3 < 0)
      goto LABEL_36;
    v15 = *(unsigned __int8 *)(a2 + 23);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a2 + 8);
    if (v15 <= v14)
      goto LABEL_36;
    v16 = *(unsigned __int8 *)std::string::at((const std::string *)a2, v14);
    if (v16 != 32)
      break;
    ++v11;
    --v10;
    if (v12 == v11)
      return (void *)v30;
  }
  v17 = *(uint64_t **)(a1 + 208);
  v29 = 1;
  LOWORD(__p[0]) = v16;
  v18 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v17, 0, (unsigned __int8 **)__p);
  v19 = v18;
  if ((v29 & 0x80000000) == 0)
  {
    if (v18)
      goto LABEL_23;
LABEL_36:
    v25 = a3 + v11;
    v26 = 0;
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if (!v19)
    goto LABEL_36;
LABEL_23:
  if (v9 <= v11)
  {
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      if (a4 < 0)
        v22 = v20;
      else
        v22 = v21;
      v23 = v22 + v14;
      v24 = *(unsigned __int8 *)(a2 + 23);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a2 + 8);
      if (v23 < 0 || v24 <= v23 || *(unsigned __int8 *)std::string::at((const std::string *)a2, v23) != v16)
        break;
      ++v21;
      --v20;
      if (v9 - v11 == v21)
      {
        v21 = v9 - v11;
        break;
      }
    }
  }
  if (a4 < 0)
    v25 = v14 - v21 + 1;
  else
    v25 = v14;
  v26 = v21;
LABEL_42:
  quasar::SystemConfig::Version::Version(__p, v25, v26);
  return __p[0];
}

void sub_1ADB8C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TokenClassification::~TokenClassification(quasar::corrective_reranking::TokenClassification *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

_QWORD *quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  unsigned __int32 v17;

  v5 = *result;
  v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v7 = v6 - v5;
    v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 6);
    v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      v12 = result;
      v17 = v9.i32[0];
      std::vector<quasar::corrective_reranking::TokenClassification>::reserve(a4, v11);
      if ((int)(v7 >> 6) >= (uint64_t)v17)
        v13 = v17;
      else
        v13 = (int)(v7 >> 6);
      v14 = v13 << 6;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 6)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v15 = (__int128 *)(*v12 + v14);
        v16 = a4[1];
        if (v16 >= a4[2])
        {
          result = (_QWORD *)std::vector<quasar::corrective_reranking::TokenClassification>::__push_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(a4, v15);
        }
        else
        {
          std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>((_DWORD)a4 + 16, (std::string *)a4[1], v15);
          result = (_QWORD *)(v16 + 64);
          a4[1] = v16 + 64;
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 64;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1ADB8C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::Parse::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::corrective_reranking::TargetRange,false>>((std::vector<int> *)(a1 + 88), (__n128 *)((char *)a2 + 88));
  v5 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  std::vector<int>::__move_assign(a1 + 152, (__n128 *)((char *)a2 + 152));
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 184));
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 208));
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((__int128 *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v7 - 232));
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::corrective_reranking::Parse::operator=(a3, v4);
      v4 = (__int128 *)((char *)v4 + 232);
      a3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__tree<std::vector<std::string>>::find<std::vector<std::string>>(uint64_t a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = a1 + 8;
  v4 = std::__tree<std::vector<std::string>>::__lower_bound<std::vector<std::string>>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  if (std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*a2, a2[1], *(const void ***)(v5 + 32), *(const void ***)(v5 + 40), (uint64_t)&v7))return v3;
  return v5;
}

uint64_t std::__tree<std::vector<std::string>>::__lower_bound<std::vector<std::string>>(uint64_t a1, const void ***a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v7;
  uint64_t *v8;
  char v10;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*(const void ***)(v5 + 32), *(const void ***)(v5 + 40), *a2, a2[1], (uint64_t)&v10);
      v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        v8 = (uint64_t *)v5;
        a4 = v5;
      }
      v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

std::string *quasar::corrective_reranking::Parse::Parse(std::string *this, const quasar::corrective_reranking::Parse *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  int v7;
  std::string::value_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100]((uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)a2 + 88);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_DWORD *)a2 + 36);
  this[6].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[6].__r_.__value_.__l.__data_) = v7;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[6].__r_.__value_.__l.__size_, *((const void **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  v8 = *((_BYTE *)a2 + 176);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__s.__data_[8] = v8;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((__int128 **)a2 + 23), *((__int128 **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *((__int128 **)a2 + 26), *((__int128 **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3));
  return this;
}

void sub_1ADB8CA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v2 + 112))
  {
    v5 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v2 + 96) = v5;
      operator delete(v5);
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_1ADB8CAFC()
{
  JUMPOUT(0x1ADB8CAD8);
}

void sub_1ADB8CB04()
{
  JUMPOUT(0x1ADB8CAE4);
}

__n128 std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::corrective_reranking::TargetRange,false>>(std::vector<int> *this, __n128 *a2)
{
  __n128 result;
  int *begin;

  if (LOBYTE(this[1].__begin_) == a2[1].n128_u8[8])
  {
    if (LOBYTE(this[1].__begin_))
      result.n128_u64[0] = std::vector<int>::__move_assign((uint64_t)this, a2).n128_u64[0];
  }
  else if (LOBYTE(this[1].__begin_))
  {
    begin = this->__begin_;
    if (this->__begin_)
    {
      this->__end_ = begin;
      operator delete(begin);
    }
    LOBYTE(this[1].__begin_) = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    result = *a2;
    *this = *(std::vector<int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return result;
}

void std::vector<quasar::corrective_reranking::Parse>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v3 - 232));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>,unsigned long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(const quasar::corrective_reranking::Parse *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  const quasar::corrective_reranking::Parse *v9;
  uint64_t *v10;
  uint64_t *v12[2];

  v6 = (a2 - (uint64_t)a1) / 232;
  if (v6 >= a4)
    v7 = a4;
  else
    v7 = (a2 - (uint64_t)a1) / 232;
  if (v7)
  {
    v9 = a1;
    v10 = (uint64_t *)(v6 - 1);
    do
    {
      v12[0] = 0;
      v12[1] = v10;
      if (std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v12, a5, v12) < v7)
      {
        v12[0] = a3;
        std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>::operator=[abi:ne180100](v12, v9);
        --v7;
      }
      v9 = (const quasar::corrective_reranking::Parse *)((char *)v9 + 232);
      v10 = (uint64_t *)((char *)v10 - 1);
    }
    while (v7);
  }
  return a3;
}

uint64_t **std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>::operator=[abi:ne180100](uint64_t **a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = std::vector<quasar::corrective_reranking::Parse>::__push_back_slow_path<quasar::corrective_reranking::Parse const&>(*a1, a2);
  }
  else
  {
    quasar::corrective_reranking::Parse::Parse((std::string *)(*a1)[1], a2);
    v5 = v4 + 232;
    v3[1] = v4 + 232;
  }
  v3[1] = v5;
  return a1;
}

void sub_1ADB8CCF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__push_back_slow_path<quasar::corrective_reranking::Parse const&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x8D3DCB08D3DCB0)
    v9 = 0x11A7B9611A7B961;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[232 * v4];
  v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADB8CE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 232;
      v4 = (__int128 *)((char *)v4 - 232);
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(232 * a2);
}

__n128 std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(__int128 *)((char *)a3 + 56);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 7) = 0;
  LODWORD(v3) = *((_DWORD *)a3 + 20);
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 80) = v3;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a3 + 88);
    *(_QWORD *)(a2 + 104) = *((_QWORD *)a3 + 13);
    *((_QWORD *)a3 + 11) = 0;
    *((_QWORD *)a3 + 12) = 0;
    *((_QWORD *)a3 + 13) = 0;
    *(_BYTE *)(a2 + 112) = 1;
  }
  v4 = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v4;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *(_DWORD *)(a2 + 144) = *((_DWORD *)a3 + 36);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 152) = *(__int128 *)((char *)a3 + 152);
  *(_QWORD *)(a2 + 168) = *((_QWORD *)a3 + 21);
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *(_BYTE *)(a2 + 176) = *((_BYTE *)a3 + 176);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 184) = *(__int128 *)((char *)a3 + 184);
  *(_QWORD *)(a2 + 200) = *((_QWORD *)a3 + 25);
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 25) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  result = (__n128)a3[13];
  *(__n128 *)(a2 + 208) = result;
  *(_QWORD *)(a2 + 224) = *((_QWORD *)a3 + 28);
  *((_QWORD *)a3 + 26) = 0;
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  return result;
}

uint64_t std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(i - 232));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string&,quasar::corrective_reranking::TargetRange&>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  std::string *v16;
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (std::string *)&v12[48 * v5];
  v18 = &v12[48 * v11];
  std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>(v16, a2, a3);
  v17 = v16 + 2;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(&v15);
  return v13;
}

void sub_1ADB8D234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return this;
}

void sub_1ADB8D2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TargetRange&>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  std::string *v16;
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (std::string *)&v12[48 * v5];
  v18 = &v12[48 * v11];
  std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string const&,quasar::corrective_reranking::TargetRange&,0>(v16, a2, a3);
  v17 = v16 + 2;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(&v15);
  return v13;
}

void sub_1ADB8D5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string const&,quasar::corrective_reranking::TargetRange&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return this;
}

void sub_1ADB8D674(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x34F72C234F72C235 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 232 * a2;
      do
      {
        *(_QWORD *)(v7 + 176) = 0;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_BYTE *)(v7 + 176) = 1;
        *(_OWORD *)(v7 + 184) = 0uLL;
        *(_OWORD *)(v7 + 200) = 0uLL;
        *(_OWORD *)(v7 + 216) = 0uLL;
        v7 += 232;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x34F72C234F72C235 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x11A7B9611A7B961)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x8D3DCB08D3DCB0)
      v11 = 0x11A7B9611A7B961;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[232 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[232 * v11];
    v15 = &v14[232 * a2];
    do
    {
      *((_QWORD *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      v14[176] = 1;
      *(_OWORD *)(v14 + 184) = 0uLL;
      *(_OWORD *)(v14 + 200) = 0uLL;
      *(_OWORD *)(v14 + 216) = 0uLL;
      v14 += 232;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1ADB8D82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x8D3DCB08D3DCB0)
    v9 = 0x11A7B9611A7B961;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[232 * v4];
  v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADB8D948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>(uint64_t *a1, uint64_t a2, __int128 **a3, float *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v16;
  std::string *v17;
  std::string::value_type *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0)
    v12 = 0x11A7B9611A7B961;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = (std::string *)&v13[232 * v6];
  v19 = &v13[232 * v12];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t)(a1 + 2), v17, a2, a3, a4, a5);
  v18 = &v17[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1ADB8DA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>(uint64_t a1, std::string *a2, uint64_t a3, __int128 **a4, float *a5, uint64_t a6)
{
  float v9;
  void **v10[3];
  __int128 *v11[3];
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  void ***v20;

  v9 = *a5;
  *(_OWORD *)v17 = *(_OWORD *)a6;
  v18 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  v19 = 1;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  __p = 0;
  v13 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)v17, (__int128 *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (__int128 **)v10);
  v20 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15[0]);
  if (v19)
  {
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void sub_1ADB8DBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 72) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25 < 0)
    operator delete(a20);
  if (a29)
  {
    if (a26)
    {
      a27 = (uint64_t)a26;
      operator delete(a26);
    }
  }
  _Unwind_Resume(a1);
}

__int128 *std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>>(uint64_t *a1, __int128 *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  std::string *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  void *v27[2];
  std::string *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4)) >= a5)
      {
        v21 = (__int128 *)&a3[2 * a5];
      }
      else
      {
        v21 = (__int128 *)((char *)a3 + 16 * ((uint64_t)(v12 - (_QWORD)a2) >> 4));
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,0>(v7, (const std::string *)v21, (std::string *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v18);
      else
        v19 = 0;
      v22 = (std::string *)&v19[48 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[48 * v18];
      v23 = 3 * a5;
      v24 = &v22[2 * a5];
      v25 = 16 * v23;
      do
      {
        std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](v22, (__int128 *)v7);
        v22 += 2;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      v28 = v24;
      v5 = (__int128 *)std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer((uint64_t)a1, v27, v5);
      std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_1ADB8DDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__move_range(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *v9;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v8 = v10;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = *(__int128 *)((char *)v9 + 24);
      *(_QWORD *)(v8 + 40) = *((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v9 + 5) = 0;
      v8 += 48;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,0>(a2, v7, v6);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB8DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  return this;
}

void sub_1ADB8E040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::vector<int>::__move_assign(a1 + 24, (__n128 *)((char *)a2 + 24));
  return a1;
}

const std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,0>(const std::string *a1, const std::string *a2, std::string *a3)
{
  const std::string *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](a3, v4);
      v4 += 2;
      a3 += 2;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  if (a1 != a2)
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&a1[1], a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 3);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>(uint64_t *a1, uint64_t a2, __int128 **a3, float *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v16;
  std::string *v17;
  std::string::value_type *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0)
    v12 = 0x11A7B9611A7B961;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = (std::string *)&v13[232 * v6];
  v19 = &v13[232 * v12];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t)(a1 + 2), v17, a2, a3, a4, a5);
  v18 = &v17[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1ADB8E410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>(uint64_t a1, std::string *a2, uint64_t a3, __int128 **a4, float *a5, uint64_t a6)
{
  float v9;
  void **v10[3];
  __int128 *v11[3];
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char v20;
  void ***v21;

  v9 = *a5;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v17, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3);
  v20 = 1;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  __p = 0;
  v13 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)&v17, (__int128 *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (__int128 **)v10);
  v21 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15[0]);
  if (v20)
  {
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
  }
}

void sub_1ADB8E540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 72) = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24 < 0)
    operator delete(a19);
  if (a28)
  {
    if (a25)
    {
      a26 = (uint64_t)a25;
      operator delete(a25);
    }
  }
  _Unwind_Resume(a1);
}

__int128 *std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t *a1, __int128 *a2, const quasar::corrective_reranking::Parse *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  const quasar::corrective_reranking::Parse *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  _QWORD v26[2];
  std::string *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x34F72C234F72C235 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x34F72C234F72C235 * ((uint64_t)(v12 - (_QWORD)a2) >> 3) >= a5)
      {
        v21 = (uint64_t)a3 + 232 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::corrective_reranking::Parse>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 232 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x34F72C234F72C235 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x11A7B9611A7B961)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x34F72C234F72C235 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x34F72C234F72C235 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x8D3DCB08D3DCB0)
        v18 = 0x11A7B9611A7B961;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v9, v18);
      else
        v19 = 0;
      v22 = (std::string *)&v19[232 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[232 * v18];
      v23 = 232 * a5;
      v24 = (std::string *)((char *)v22 + 232 * a5);
      do
      {
        quasar::corrective_reranking::Parse::Parse(v22, v7);
        v22 = (std::string *)((char *)v22 + 232);
        v7 = (const quasar::corrective_reranking::Parse *)((char *)v7 + 232);
        v23 -= 232;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1ADB8E77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<quasar::corrective_reranking::Parse>::__move_range(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (__int128 *)((char *)a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(a1 + 16, v8, v10);
      v10 = (__int128 *)((char *)v10 + 232);
      v8 += 232;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a3;
  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  v8 = (__int128 *)*a1;
  v9 = v6;
  if ((__int128 *)*a1 != a3)
  {
    v10 = a3;
    v9 = a2[1];
    do
    {
      v9 -= 232;
      v10 = (__int128 *)((char *)v10 - 232);
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  v11 = (__int128 *)a1[1];
  v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(v7, v12, v3);
      v3 = (__int128 *)((char *)v3 + 232);
      v12 += 232;
    }
    while (v3 != v11);
    v9 = a2[1];
  }
  a2[2] = v12;
  v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::corrective_reranking::Parse::Parse((std::string *)(a4 + v7), (const quasar::corrective_reranking::Parse *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADB8E984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 232;
    do
    {
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__int128 *)((char *)v6 - 232);
      a3 -= 232;
      quasar::corrective_reranking::Parse::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::corrective_reranking::Parse::operator=(a3, v4);
      v4 += 232;
      a3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::corrective_reranking::Parse::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (a1 != a2)
  {
    std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(a1 + 32, *(std::string **)(a2 + 32), *(__int128 **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 56), *(std::string **)(a2 + 56), *(__int128 **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>(a1 + 88, a2 + 88);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 152), *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 184), *(std::string **)(a2 + 184), *(__int128 **)(a2 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 208), *(std::string **)(a2 + 208), *(__int128 **)(a2 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3));
  }
  return a1;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1ADB8EC98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADB8ECA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

_QWORD *std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB8EDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x11A7B9611A7B962)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

float std::vector<quasar::EuclidNeighbor>::__construct_one_at_end[abi:ne180100]<std::string const&,double>(uint64_t a1, __int128 *a2, double *a3)
{
  uint64_t v4;
  double v5;
  __int128 v6;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
  }
  result = v5;
  *(_DWORD *)(v4 + 24) = -1;
  *(float *)(v4 + 28) = result;
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1ADB8EE8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::EuclidNeighbor>::__emplace_back_slow_path<std::string const&,double>(uint64_t *a1, __int128 *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  double v14;
  __int128 v15;
  float v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];
  std::string *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v23 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v20[0] = v12;
  v20[1] = v13;
  v21 = v13;
  v22 = &v12[32 * v11];
  v14 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v21;
  }
  else
  {
    v15 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
  }
  v16 = v14;
  v17 = &v12[32 * v5];
  *((_DWORD *)v17 + 6) = -1;
  *((float *)v17 + 7) = v16;
  v21 = (std::string *)((char *)v13 + 32);
  std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1ADB8EFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x8D3DCB08D3DCB0)
    v9 = 0x11A7B9611A7B961;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[232 * v4];
  v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADB8F0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse const*>,std::__wrap_iter<quasar::corrective_reranking::Parse const*>>(uint64_t *a1, __int128 *a2, const quasar::corrective_reranking::Parse *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  const quasar::corrective_reranking::Parse *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  _QWORD v26[2];
  std::string *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x34F72C234F72C235 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x34F72C234F72C235 * ((uint64_t)(v12 - (_QWORD)a2) >> 3) >= a5)
      {
        v21 = (uint64_t)a3 + 232 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::corrective_reranking::Parse>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 232 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x34F72C234F72C235 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x11A7B9611A7B961)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x34F72C234F72C235 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x34F72C234F72C235 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x8D3DCB08D3DCB0)
        v18 = 0x11A7B9611A7B961;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v9, v18);
      else
        v19 = 0;
      v22 = (std::string *)&v19[232 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[232 * v18];
      v23 = 232 * a5;
      v24 = (std::string *)((char *)v22 + 232 * a5);
      do
      {
        quasar::corrective_reranking::Parse::Parse(v22, v7);
        v22 = (std::string *)((char *)v22 + 232);
        v7 = (const quasar::corrective_reranking::Parse *)((char *)v7 + 232);
        v23 -= 232;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1ADB8F2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::corrective_reranking::Parse::Parse((std::string *)(a4 + v7), (const quasar::corrective_reranking::Parse *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADB8F33C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 232;
    do
    {
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__construct_at[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  LODWORD(v2) = *((_DWORD *)a2 + 20);
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v2;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *(_BYTE *)(a1 + 112) = 1;
  }
  v3 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v3;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  result = (__n128)a2[13];
  *(__n128 *)(a1 + 208) = result;
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADB8F4EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::Parse>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x8D3DCB08D3DCB0)
    v1 = 0x8D3DCB08D3DCB0;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(232 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  quasar::corrective_reranking::Parse *v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  quasar::corrective_reranking::Parse *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  float v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (*((float *)a2 - 22) > *(float *)(a1 + 144))
        std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(a1, (__int128 *)((char *)a2 - 232));
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__int128 *)a1 != a2)
      {
        v14 = a1 + 232;
        if ((__int128 *)(a1 + 232) != a2)
        {
          v15 = 0;
          v16 = a1;
          do
          {
            v17 = v14;
            if (*(float *)(v16 + 376) > *(float *)(v16 + 144))
            {
              v18 = *(_OWORD *)v14;
              v31 = *(_QWORD *)(v14 + 16);
              v30 = v18;
              *(_QWORD *)(v14 + 8) = 0;
              *(_QWORD *)(v14 + 16) = 0;
              *(_QWORD *)v14 = 0;
              v32 = *(_DWORD *)(v16 + 256);
              v33 = *(_OWORD *)(v16 + 264);
              v34 = *(_QWORD *)(v16 + 280);
              *(_QWORD *)(v16 + 272) = 0;
              *(_QWORD *)(v16 + 280) = 0;
              *(_QWORD *)(v16 + 264) = 0;
              v35 = *(_OWORD *)(v16 + 288);
              v36 = *(_QWORD *)(v16 + 304);
              *(_QWORD *)(v16 + 288) = 0;
              *(_QWORD *)(v16 + 296) = 0;
              *(_QWORD *)(v16 + 304) = 0;
              v37 = *(_DWORD *)(v16 + 312);
              LOBYTE(v38) = 0;
              v40 = 0;
              if (*(_BYTE *)(v16 + 344))
              {
                v38 = *(_OWORD *)(v16 + 320);
                v39 = *(_QWORD *)(v16 + 336);
                *(_QWORD *)(v16 + 328) = 0;
                *(_QWORD *)(v16 + 336) = 0;
                *(_QWORD *)(v16 + 320) = 0;
                v40 = 1;
              }
              v41 = *(_OWORD *)(v16 + 352);
              v42 = *(_QWORD *)(v16 + 368);
              *(_QWORD *)(v16 + 360) = 0;
              *(_QWORD *)(v16 + 368) = 0;
              *(_QWORD *)(v16 + 352) = 0;
              v43 = *(float *)(v16 + 376);
              v44 = *(_OWORD *)(v16 + 384);
              v45 = *(_QWORD *)(v16 + 400);
              *(_QWORD *)(v16 + 384) = 0;
              *(_QWORD *)(v16 + 392) = 0;
              *(_QWORD *)(v16 + 400) = 0;
              v46 = *(_BYTE *)(v16 + 408);
              v47 = *(_OWORD *)(v16 + 416);
              v48 = *(_QWORD *)(v16 + 432);
              *(_QWORD *)(v16 + 416) = 0;
              *(_QWORD *)(v16 + 424) = 0;
              *(_QWORD *)(v16 + 432) = 0;
              v49 = *(_OWORD *)(v16 + 440);
              v50 = *(_QWORD *)(v16 + 456);
              *(_QWORD *)(v16 + 440) = 0;
              *(_QWORD *)(v16 + 448) = 0;
              v19 = v15;
              *(_QWORD *)(v16 + 456) = 0;
              while (1)
              {
                quasar::corrective_reranking::Parse::operator=(v7 + v19 + 232, (__int128 *)(v7 + v19));
                if (!v19)
                  break;
                v20 = *(float *)(v7 + v19 - 88);
                v19 -= 232;
                if (v43 <= v20)
                {
                  v21 = v7 + v19 + 232;
                  goto LABEL_20;
                }
              }
              v21 = v7;
LABEL_20:
              quasar::corrective_reranking::Parse::operator=(v21, &v30);
              quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v30);
            }
            v14 = v17 + 232;
            v15 += 232;
            v16 = v17;
          }
          while ((__int128 *)(v17 + 232) != a2);
        }
      }
    }
    else
    {
      v10 = (quasar::corrective_reranking::Parse *)a4;
      v11 = a3 >> 1;
      v12 = (__int128 *)(a1 + 232 * (a3 >> 1));
      v13 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v22 = std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((__int128 *)a1, v12, v13, a4, a6);
        v23 = (uint64_t)v10 + 232 * v11;
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((__int128 *)(v7 + 232 * (a3 >> 1)), a2, a3 - (a3 >> 1), v23, v22);
        v24 = (char *)v10 + 232 * a3;
        v25 = v23;
        v26 = v10;
        while ((char *)v25 != v24)
        {
          if (*(float *)(v25 + 144) <= *((float *)v26 + 36))
          {
            quasar::corrective_reranking::Parse::operator=(v7, (__int128 *)v26);
            v26 = (quasar::corrective_reranking::Parse *)((char *)v26 + 232);
          }
          else
          {
            quasar::corrective_reranking::Parse::operator=(v7, (__int128 *)v25);
            v25 += 232;
          }
          v7 += 232;
          if (v26 == (quasar::corrective_reranking::Parse *)v23)
          {
            if ((char *)v25 != v24)
            {
              v27 = 0;
              do
              {
                quasar::corrective_reranking::Parse::operator=(v7 + v27, (__int128 *)(v25 + v27));
                v27 += 232;
              }
              while ((char *)(v25 + v27) != v24);
            }
            goto LABEL_36;
          }
        }
        if (v26 != (quasar::corrective_reranking::Parse *)v23)
        {
          v28 = 0;
          do
          {
            quasar::corrective_reranking::Parse::operator=(v7 + v28, (__int128 *)((char *)v26 + v28));
            v28 += 232;
          }
          while ((quasar::corrective_reranking::Parse *)((char *)v26 + v28) != (quasar::corrective_reranking::Parse *)v23);
        }
LABEL_36:
        if (v10)
        {
          v29 = a3;
          do
          {
            quasar::corrective_reranking::Parse::~Parse(v10);
            v10 = (quasar::corrective_reranking::Parse *)((char *)v10 + 232);
            --v29;
          }
          while (v29);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a1, v12, v13, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v7 + 232 * (a3 >> 1), a2, a3 - (a3 >> 1), v10, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v7, (__int128 *)(v7 + 232 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v10, a5);
      }
    }
  }
}

void sub_1ADB8F928(_Unwind_Exception *exception_object)
{
  quasar::corrective_reranking::Parse *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      quasar::corrective_reranking::Parse::~Parse(v1);
      v1 = (quasar::corrective_reranking::Parse *)((char *)v1 + 232);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(__int128 *a1, __int128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  _QWORD *v28;
  __int128 *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 *v41;
  __int128 *v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  __int128 v59;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v13 = (_QWORD *)(a4 + 264);
      v14 = (__int128 *)((char *)a2 - 232);
      v15 = (_QWORD *)(a4 + 32);
      v16 = (_QWORD *)(a4 + 56);
      if (*((float *)a2 - 22) <= *((float *)a1 + 36))
      {
        v36 = *a1;
        *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
        *(_OWORD *)a4 = v36;
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
        *(_QWORD *)(a4 + 40) = 0;
        *(_QWORD *)(a4 + 48) = 0;
        *v15 = 0;
        *(_OWORD *)(a4 + 32) = a1[2];
        *(_QWORD *)(a4 + 48) = *((_QWORD *)a1 + 6);
        *((_QWORD *)a1 + 4) = 0;
        *((_QWORD *)a1 + 5) = 0;
        *((_QWORD *)a1 + 6) = 0;
        *v16 = 0;
        *(_QWORD *)(a4 + 64) = 0;
        *(_QWORD *)(a4 + 72) = 0;
        *(_OWORD *)(a4 + 56) = *(__int128 *)((char *)a1 + 56);
        *(_QWORD *)(a4 + 72) = *((_QWORD *)a1 + 9);
        *((_QWORD *)a1 + 8) = 0;
        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 7) = 0;
        LODWORD(v36) = *((_DWORD *)a1 + 20);
        *(_BYTE *)(a4 + 88) = 0;
        *(_DWORD *)(a4 + 80) = v36;
        *(_BYTE *)(a4 + 112) = 0;
        if (*((_BYTE *)a1 + 112))
        {
          *(_QWORD *)(a4 + 88) = 0;
          *(_QWORD *)(a4 + 96) = 0;
          *(_QWORD *)(a4 + 104) = 0;
          *(_OWORD *)(a4 + 88) = *(__int128 *)((char *)a1 + 88);
          *(_QWORD *)(a4 + 104) = *((_QWORD *)a1 + 13);
          *((_QWORD *)a1 + 11) = 0;
          *((_QWORD *)a1 + 12) = 0;
          *((_QWORD *)a1 + 13) = 0;
          *(_BYTE *)(a4 + 112) = 1;
        }
        v37 = *(__int128 *)((char *)a1 + 120);
        *(_QWORD *)(a4 + 136) = *((_QWORD *)a1 + 17);
        *(_OWORD *)(a4 + 120) = v37;
        *((_QWORD *)a1 + 16) = 0;
        *((_QWORD *)a1 + 17) = 0;
        *((_QWORD *)a1 + 15) = 0;
        *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
        *(_QWORD *)(a4 + 160) = 0;
        *(_QWORD *)(a4 + 168) = 0;
        *(_QWORD *)(a4 + 152) = 0;
        *(_OWORD *)(a4 + 152) = *(__int128 *)((char *)a1 + 152);
        *(_QWORD *)(a4 + 168) = *((_QWORD *)a1 + 21);
        *((_QWORD *)a1 + 20) = 0;
        *((_QWORD *)a1 + 21) = 0;
        *((_QWORD *)a1 + 19) = 0;
        *(_BYTE *)(a4 + 176) = *((_BYTE *)a1 + 176);
        *(_QWORD *)(a4 + 192) = 0;
        *(_QWORD *)(a4 + 200) = 0;
        *(_QWORD *)(a4 + 184) = 0;
        *(_OWORD *)(a4 + 184) = *(__int128 *)((char *)a1 + 184);
        *(_QWORD *)(a4 + 200) = *((_QWORD *)a1 + 25);
        *((_QWORD *)a1 + 23) = 0;
        *((_QWORD *)a1 + 24) = 0;
        *((_QWORD *)a1 + 25) = 0;
        *(_QWORD *)(a4 + 216) = 0;
        *(_QWORD *)(a4 + 224) = 0;
        *(_QWORD *)(a4 + 208) = 0;
        *(_OWORD *)(a4 + 208) = a1[13];
        *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 28);
        *((_QWORD *)a1 + 26) = 0;
        *((_QWORD *)a1 + 27) = 0;
        *((_QWORD *)a1 + 28) = 0;
        v38 = *v14;
        *(_QWORD *)(a4 + 248) = *((_QWORD *)a2 - 27);
        *(_OWORD *)(a4 + 232) = v38;
        *((_QWORD *)a2 - 28) = 0;
        *((_QWORD *)a2 - 27) = 0;
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(a4 + 256) = *((_DWORD *)a2 - 52);
        *(_QWORD *)(a4 + 272) = 0;
        *(_QWORD *)(a4 + 280) = 0;
        *v13 = 0;
        *(_OWORD *)v13 = *(__int128 *)((char *)a2 - 200);
        *(_QWORD *)(a4 + 280) = *((_QWORD *)a2 - 23);
        *((_QWORD *)a2 - 25) = 0;
        *((_QWORD *)a2 - 24) = 0;
        *((_QWORD *)a2 - 23) = 0;
        *(_QWORD *)(a4 + 288) = 0;
        *(_QWORD *)(a4 + 296) = 0;
        *(_QWORD *)(a4 + 304) = 0;
        *(_OWORD *)(a4 + 288) = *(a2 - 11);
        *(_QWORD *)(a4 + 304) = *((_QWORD *)a2 - 20);
        *((_QWORD *)a2 - 21) = 0;
        *((_QWORD *)a2 - 20) = 0;
        *((_QWORD *)a2 - 22) = 0;
        *(_DWORD *)(a4 + 312) = *((_DWORD *)a2 - 38);
        *(_BYTE *)(a4 + 320) = 0;
        *(_BYTE *)(a4 + 344) = 0;
        if (*((_BYTE *)a2 - 120))
        {
          *(_QWORD *)(a4 + 320) = 0;
          *(_QWORD *)(a4 + 328) = 0;
          *(_QWORD *)(a4 + 336) = 0;
          *(_OWORD *)(a4 + 320) = *(a2 - 9);
          *(_QWORD *)(a4 + 336) = *((_QWORD *)a2 - 16);
          *((_QWORD *)a2 - 18) = 0;
          *((_QWORD *)a2 - 17) = 0;
          *((_QWORD *)a2 - 16) = 0;
          *(_BYTE *)(a4 + 344) = 1;
        }
        v39 = *(a2 - 7);
        *(_QWORD *)(a4 + 368) = *((_QWORD *)a2 - 12);
        *(_OWORD *)(a4 + 352) = v39;
        *((_QWORD *)a2 - 13) = 0;
        *((_QWORD *)a2 - 12) = 0;
        *((_QWORD *)a2 - 14) = 0;
        *(_DWORD *)(a4 + 376) = *((_DWORD *)a2 - 22);
        *(_QWORD *)(a4 + 392) = 0;
        *(_QWORD *)(a4 + 400) = 0;
        *(_QWORD *)(a4 + 384) = 0;
        *(_OWORD *)(a4 + 384) = *(a2 - 5);
        *(_QWORD *)(a4 + 400) = *((_QWORD *)a2 - 8);
        *((_QWORD *)a2 - 9) = 0;
        *((_QWORD *)a2 - 8) = 0;
        *((_QWORD *)a2 - 10) = 0;
        *(_BYTE *)(a4 + 408) = *((_BYTE *)a2 - 56);
        *(_QWORD *)(a4 + 424) = 0;
        *(_QWORD *)(a4 + 432) = 0;
        *(_QWORD *)(a4 + 416) = 0;
        *(_OWORD *)(a4 + 416) = *(a2 - 3);
        *(_QWORD *)(a4 + 432) = *((_QWORD *)a2 - 4);
        *((_QWORD *)a2 - 6) = 0;
        *((_QWORD *)a2 - 5) = 0;
        *((_QWORD *)a2 - 4) = 0;
        *(_QWORD *)(a4 + 448) = 0;
        *(_QWORD *)(a4 + 456) = 0;
        *(_QWORD *)(a4 + 440) = 0;
        result = *(__n128 *)((char *)a2 - 24);
        v11 = (_QWORD *)(a4 + 456);
        *(__n128 *)(a4 + 440) = result;
        v21 = (_QWORD *)a2 - 1;
        v12 = (_QWORD *)a2 - 3;
        goto LABEL_39;
      }
      v17 = *v14;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)a2 - 27);
      *(_OWORD *)a4 = v17;
      *((_QWORD *)a2 - 28) = 0;
      *((_QWORD *)a2 - 27) = 0;
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a2 - 52);
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *v15 = 0;
      *(_OWORD *)(a4 + 32) = *(__int128 *)((char *)a2 - 200);
      *(_QWORD *)(a4 + 48) = *((_QWORD *)a2 - 23);
      *((_QWORD *)a2 - 25) = 0;
      *((_QWORD *)a2 - 24) = 0;
      *((_QWORD *)a2 - 23) = 0;
      *v16 = 0;
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(a2 - 11);
      *(_QWORD *)(a4 + 72) = *((_QWORD *)a2 - 20);
      *((_QWORD *)a2 - 21) = 0;
      *((_QWORD *)a2 - 20) = 0;
      *((_QWORD *)a2 - 22) = 0;
      LODWORD(v17) = *((_DWORD *)a2 - 38);
      *(_BYTE *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v17;
      *(_BYTE *)(a4 + 112) = 0;
      if (*((_BYTE *)a2 - 120))
      {
        *(_QWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
        *(_QWORD *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(a2 - 9);
        *(_QWORD *)(a4 + 104) = *((_QWORD *)a2 - 16);
        *((_QWORD *)a2 - 18) = 0;
        *((_QWORD *)a2 - 17) = 0;
        *((_QWORD *)a2 - 16) = 0;
        *(_BYTE *)(a4 + 112) = 1;
      }
      v18 = *(a2 - 7);
      *(_QWORD *)(a4 + 136) = *((_QWORD *)a2 - 12);
      *(_OWORD *)(a4 + 120) = v18;
      *((_QWORD *)a2 - 13) = 0;
      *((_QWORD *)a2 - 12) = 0;
      *((_QWORD *)a2 - 14) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a2 - 22);
      *(_QWORD *)(a4 + 160) = 0;
      *(_QWORD *)(a4 + 168) = 0;
      *(_QWORD *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(a2 - 5);
      *(_QWORD *)(a4 + 168) = *((_QWORD *)a2 - 8);
      *((_QWORD *)a2 - 9) = 0;
      *((_QWORD *)a2 - 8) = 0;
      *((_QWORD *)a2 - 10) = 0;
      *(_BYTE *)(a4 + 176) = *((_BYTE *)a2 - 56);
      *(_QWORD *)(a4 + 192) = 0;
      *(_QWORD *)(a4 + 200) = 0;
      *(_QWORD *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(a2 - 3);
      *(_QWORD *)(a4 + 200) = *((_QWORD *)a2 - 4);
      *((_QWORD *)a2 - 6) = 0;
      *((_QWORD *)a2 - 5) = 0;
      *((_QWORD *)a2 - 4) = 0;
      *(_QWORD *)(a4 + 216) = 0;
      *(_QWORD *)(a4 + 224) = 0;
      *(_QWORD *)(a4 + 208) = 0;
      *(_OWORD *)(a4 + 208) = *(__int128 *)((char *)a2 - 24);
      *(_QWORD *)(a4 + 224) = *((_QWORD *)a2 - 1);
      *((_QWORD *)a2 - 3) = 0;
      *((_QWORD *)a2 - 2) = 0;
      *((_QWORD *)a2 - 1) = 0;
      v19 = *a1;
      *(_QWORD *)(a4 + 248) = *((_QWORD *)a1 + 2);
      *(_OWORD *)(a4 + 232) = v19;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a4 + 256) = *((_DWORD *)a1 + 6);
      *(_QWORD *)(a4 + 272) = 0;
      *(_QWORD *)(a4 + 280) = 0;
      *v13 = 0;
      *(_OWORD *)v13 = a1[2];
      *(_QWORD *)(a4 + 280) = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 6) = 0;
      *(_QWORD *)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
      *(_QWORD *)(a4 + 304) = 0;
      *(_OWORD *)(a4 + 288) = *(__int128 *)((char *)a1 + 56);
      *(_QWORD *)(a4 + 304) = *((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 7) = 0;
      *(_DWORD *)(a4 + 312) = *((_DWORD *)a1 + 20);
      *(_BYTE *)(a4 + 320) = 0;
      *(_BYTE *)(a4 + 344) = 0;
      if (*((_BYTE *)a1 + 112))
      {
        *(_QWORD *)(a4 + 320) = 0;
        *(_QWORD *)(a4 + 328) = 0;
        *(_QWORD *)(a4 + 336) = 0;
        *(_OWORD *)(a4 + 320) = *(__int128 *)((char *)a1 + 88);
        *(_QWORD *)(a4 + 336) = *((_QWORD *)a1 + 13);
        *((_QWORD *)a1 + 11) = 0;
        *((_QWORD *)a1 + 12) = 0;
        *((_QWORD *)a1 + 13) = 0;
        *(_BYTE *)(a4 + 344) = 1;
      }
      v20 = *(__int128 *)((char *)a1 + 120);
      *(_QWORD *)(a4 + 368) = *((_QWORD *)a1 + 17);
      *(_OWORD *)(a4 + 352) = v20;
      *((_QWORD *)a1 + 16) = 0;
      *((_QWORD *)a1 + 17) = 0;
      *((_QWORD *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 376) = *((_DWORD *)a1 + 36);
      *(_QWORD *)(a4 + 392) = 0;
      *(_QWORD *)(a4 + 400) = 0;
      *(_QWORD *)(a4 + 384) = 0;
      *(_OWORD *)(a4 + 384) = *(__int128 *)((char *)a1 + 152);
      *(_QWORD *)(a4 + 400) = *((_QWORD *)a1 + 21);
      *((_QWORD *)a1 + 20) = 0;
      *((_QWORD *)a1 + 21) = 0;
      *((_QWORD *)a1 + 19) = 0;
      *(_BYTE *)(a4 + 408) = *((_BYTE *)a1 + 176);
      *(_QWORD *)(a4 + 424) = 0;
      *(_QWORD *)(a4 + 432) = 0;
      *(_QWORD *)(a4 + 416) = 0;
      *(_OWORD *)(a4 + 416) = *(__int128 *)((char *)a1 + 184);
      *(_QWORD *)(a4 + 432) = *((_QWORD *)a1 + 25);
      *((_QWORD *)a1 + 23) = 0;
      *((_QWORD *)a1 + 24) = 0;
      *((_QWORD *)a1 + 25) = 0;
      *(_QWORD *)(a4 + 448) = 0;
      *(_QWORD *)(a4 + 456) = 0;
      *(_QWORD *)(a4 + 440) = 0;
      v12 = a1 + 13;
      result = (__n128)a1[13];
      v11 = (_QWORD *)(a4 + 456);
      *(__n128 *)(a4 + 440) = result;
LABEL_13:
      v21 = v12 + 2;
LABEL_39:
      *v11 = *v21;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      v9 = *a1;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
      *(_OWORD *)a4 = v9;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_OWORD *)(a4 + 32) = a1[2];
      *(_QWORD *)(a4 + 48) = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 6) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(__int128 *)((char *)a1 + 56);
      *(_QWORD *)(a4 + 72) = *((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 7) = 0;
      LODWORD(v9) = *((_DWORD *)a1 + 20);
      *(_BYTE *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v9;
      *(_BYTE *)(a4 + 112) = 0;
      if (*((_BYTE *)a1 + 112))
      {
        *(_QWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
        *(_QWORD *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(__int128 *)((char *)a1 + 88);
        *(_QWORD *)(a4 + 104) = *((_QWORD *)a1 + 13);
        *((_QWORD *)a1 + 11) = 0;
        *((_QWORD *)a1 + 12) = 0;
        *((_QWORD *)a1 + 13) = 0;
        *(_BYTE *)(a4 + 112) = 1;
      }
      v10 = *(__int128 *)((char *)a1 + 120);
      *(_QWORD *)(a4 + 136) = *((_QWORD *)a1 + 17);
      *(_OWORD *)(a4 + 120) = v10;
      *((_QWORD *)a1 + 16) = 0;
      *((_QWORD *)a1 + 17) = 0;
      *((_QWORD *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
      *(_QWORD *)(a4 + 160) = 0;
      *(_QWORD *)(a4 + 168) = 0;
      *(_QWORD *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(__int128 *)((char *)a1 + 152);
      *(_QWORD *)(a4 + 168) = *((_QWORD *)a1 + 21);
      *((_QWORD *)a1 + 20) = 0;
      *((_QWORD *)a1 + 21) = 0;
      *((_QWORD *)a1 + 19) = 0;
      *(_BYTE *)(a4 + 176) = *((_BYTE *)a1 + 176);
      *(_QWORD *)(a4 + 192) = 0;
      *(_QWORD *)(a4 + 200) = 0;
      *(_QWORD *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(__int128 *)((char *)a1 + 184);
      *(_QWORD *)(a4 + 200) = *((_QWORD *)a1 + 25);
      *((_QWORD *)a1 + 23) = 0;
      *((_QWORD *)a1 + 24) = 0;
      *((_QWORD *)a1 + 25) = 0;
      *(_QWORD *)(a4 + 224) = 0;
      v11 = (_QWORD *)(a4 + 224);
      *(_QWORD *)(a4 + 208) = 0;
      *(_QWORD *)(a4 + 216) = 0;
      v12 = a1 + 13;
      result = (__n128)a1[13];
      *(__n128 *)(a4 + 208) = result;
      goto LABEL_13;
    }
    if ((uint64_t)a3 > 8)
    {
      v40 = 232 * (a3 >> 1);
      v41 = (__int128 *)((char *)a1 + v40);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a1, (char *)a1 + v40, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((char *)v8 + v40, a2, a3 - (a3 >> 1), v5 + v40, a3 - (a3 >> 1));
      v42 = (__int128 *)((char *)v8 + v40);
      while (v42 != a2)
      {
        v43 = (_QWORD *)(v5 + 32);
        v44 = (_QWORD *)(v5 + 56);
        if (*((float *)v42 + 36) <= *((float *)v8 + 36))
        {
          v47 = *v8;
          *(_QWORD *)(v5 + 16) = *((_QWORD *)v8 + 2);
          *(_OWORD *)v5 = v47;
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *(_QWORD *)v8 = 0;
          *(_DWORD *)(v5 + 24) = *((_DWORD *)v8 + 6);
          *(_QWORD *)(v5 + 40) = 0;
          *(_QWORD *)(v5 + 48) = 0;
          *v43 = 0;
          *(_OWORD *)(v5 + 32) = v8[2];
          *(_QWORD *)(v5 + 48) = *((_QWORD *)v8 + 6);
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_QWORD *)v8 + 6) = 0;
          *v44 = 0;
          *(_QWORD *)(v5 + 64) = 0;
          *(_QWORD *)(v5 + 72) = 0;
          *(_OWORD *)(v5 + 56) = *(__int128 *)((char *)v8 + 56);
          *(_QWORD *)(v5 + 72) = *((_QWORD *)v8 + 9);
          *((_QWORD *)v8 + 8) = 0;
          *((_QWORD *)v8 + 9) = 0;
          *((_QWORD *)v8 + 7) = 0;
          LODWORD(v47) = *((_DWORD *)v8 + 20);
          *(_BYTE *)(v5 + 88) = 0;
          *(_DWORD *)(v5 + 80) = v47;
          *(_BYTE *)(v5 + 112) = 0;
          if (*((_BYTE *)v8 + 112))
          {
            *(_QWORD *)(v5 + 88) = 0;
            *(_QWORD *)(v5 + 96) = 0;
            *(_QWORD *)(v5 + 104) = 0;
            *(_OWORD *)(v5 + 88) = *(__int128 *)((char *)v8 + 88);
            *(_QWORD *)(v5 + 104) = *((_QWORD *)v8 + 13);
            *((_QWORD *)v8 + 11) = 0;
            *((_QWORD *)v8 + 12) = 0;
            *((_QWORD *)v8 + 13) = 0;
            *(_BYTE *)(v5 + 112) = 1;
          }
          v48 = *(__int128 *)((char *)v8 + 120);
          *(_QWORD *)(v5 + 136) = *((_QWORD *)v8 + 17);
          *(_OWORD *)(v5 + 120) = v48;
          *((_QWORD *)v8 + 16) = 0;
          *((_QWORD *)v8 + 17) = 0;
          *((_QWORD *)v8 + 15) = 0;
          *(_DWORD *)(v5 + 144) = *((_DWORD *)v8 + 36);
          *(_QWORD *)(v5 + 160) = 0;
          *(_QWORD *)(v5 + 168) = 0;
          *(_QWORD *)(v5 + 152) = 0;
          *(_OWORD *)(v5 + 152) = *(__int128 *)((char *)v8 + 152);
          *(_QWORD *)(v5 + 168) = *((_QWORD *)v8 + 21);
          *((_QWORD *)v8 + 20) = 0;
          *((_QWORD *)v8 + 21) = 0;
          *((_QWORD *)v8 + 19) = 0;
          *(_BYTE *)(v5 + 176) = *((_BYTE *)v8 + 176);
          *(_QWORD *)(v5 + 192) = 0;
          *(_QWORD *)(v5 + 200) = 0;
          *(_QWORD *)(v5 + 184) = 0;
          *(_OWORD *)(v5 + 184) = *(__int128 *)((char *)v8 + 184);
          *(_QWORD *)(v5 + 200) = *((_QWORD *)v8 + 25);
          *((_QWORD *)v8 + 23) = 0;
          *((_QWORD *)v8 + 24) = 0;
          *((_QWORD *)v8 + 25) = 0;
          *(_QWORD *)(v5 + 216) = 0;
          *(_QWORD *)(v5 + 224) = 0;
          *(_QWORD *)(v5 + 208) = 0;
          result = (__n128)v8[13];
          *(__n128 *)(v5 + 208) = result;
          *(_QWORD *)(v5 + 224) = *((_QWORD *)v8 + 28);
          *((_QWORD *)v8 + 26) = 0;
          *((_QWORD *)v8 + 27) = 0;
          *((_QWORD *)v8 + 28) = 0;
          v8 = (__int128 *)((char *)v8 + 232);
        }
        else
        {
          v45 = *v42;
          *(_QWORD *)(v5 + 16) = *((_QWORD *)v42 + 2);
          *(_OWORD *)v5 = v45;
          *((_QWORD *)v42 + 1) = 0;
          *((_QWORD *)v42 + 2) = 0;
          *(_QWORD *)v42 = 0;
          *(_DWORD *)(v5 + 24) = *((_DWORD *)v42 + 6);
          *(_QWORD *)(v5 + 40) = 0;
          *(_QWORD *)(v5 + 48) = 0;
          *v43 = 0;
          *(_OWORD *)(v5 + 32) = v42[2];
          *(_QWORD *)(v5 + 48) = *((_QWORD *)v42 + 6);
          *((_QWORD *)v42 + 4) = 0;
          *((_QWORD *)v42 + 5) = 0;
          *((_QWORD *)v42 + 6) = 0;
          *v44 = 0;
          *(_QWORD *)(v5 + 64) = 0;
          *(_QWORD *)(v5 + 72) = 0;
          *(_OWORD *)(v5 + 56) = *(__int128 *)((char *)v42 + 56);
          *(_QWORD *)(v5 + 72) = *((_QWORD *)v42 + 9);
          *((_QWORD *)v42 + 8) = 0;
          *((_QWORD *)v42 + 9) = 0;
          *((_QWORD *)v42 + 7) = 0;
          LODWORD(v45) = *((_DWORD *)v42 + 20);
          *(_BYTE *)(v5 + 88) = 0;
          *(_DWORD *)(v5 + 80) = v45;
          *(_BYTE *)(v5 + 112) = 0;
          if (*((_BYTE *)v42 + 112))
          {
            *(_QWORD *)(v5 + 88) = 0;
            *(_QWORD *)(v5 + 96) = 0;
            *(_QWORD *)(v5 + 104) = 0;
            *(_OWORD *)(v5 + 88) = *(__int128 *)((char *)v42 + 88);
            *(_QWORD *)(v5 + 104) = *((_QWORD *)v42 + 13);
            *((_QWORD *)v42 + 11) = 0;
            *((_QWORD *)v42 + 12) = 0;
            *((_QWORD *)v42 + 13) = 0;
            *(_BYTE *)(v5 + 112) = 1;
          }
          v46 = *(__int128 *)((char *)v42 + 120);
          *(_QWORD *)(v5 + 136) = *((_QWORD *)v42 + 17);
          *(_OWORD *)(v5 + 120) = v46;
          *((_QWORD *)v42 + 16) = 0;
          *((_QWORD *)v42 + 17) = 0;
          *((_QWORD *)v42 + 15) = 0;
          *(_DWORD *)(v5 + 144) = *((_DWORD *)v42 + 36);
          *(_QWORD *)(v5 + 160) = 0;
          *(_QWORD *)(v5 + 168) = 0;
          *(_QWORD *)(v5 + 152) = 0;
          *(_OWORD *)(v5 + 152) = *(__int128 *)((char *)v42 + 152);
          *(_QWORD *)(v5 + 168) = *((_QWORD *)v42 + 21);
          *((_QWORD *)v42 + 20) = 0;
          *((_QWORD *)v42 + 21) = 0;
          *((_QWORD *)v42 + 19) = 0;
          *(_BYTE *)(v5 + 176) = *((_BYTE *)v42 + 176);
          *(_QWORD *)(v5 + 192) = 0;
          *(_QWORD *)(v5 + 200) = 0;
          *(_QWORD *)(v5 + 184) = 0;
          *(_OWORD *)(v5 + 184) = *(__int128 *)((char *)v42 + 184);
          *(_QWORD *)(v5 + 200) = *((_QWORD *)v42 + 25);
          *((_QWORD *)v42 + 23) = 0;
          *((_QWORD *)v42 + 24) = 0;
          *((_QWORD *)v42 + 25) = 0;
          *(_QWORD *)(v5 + 216) = 0;
          *(_QWORD *)(v5 + 224) = 0;
          *(_QWORD *)(v5 + 208) = 0;
          result = (__n128)v42[13];
          *(__n128 *)(v5 + 208) = result;
          *(_QWORD *)(v5 + 224) = *((_QWORD *)v42 + 28);
          *((_QWORD *)v42 + 26) = 0;
          *((_QWORD *)v42 + 27) = 0;
          *((_QWORD *)v42 + 28) = 0;
          v42 = (__int128 *)((char *)v42 + 232);
        }
        v5 += 232;
        if (v8 == v41)
        {
          if (v42 != a2)
          {
            v49 = 0;
            do
            {
              v50 = (uint64_t)v42 + v49;
              v51 = v5 + v49;
              v52 = *(__int128 *)((char *)v42 + v49);
              *(_QWORD *)(v51 + 16) = *(_QWORD *)((char *)v42 + v49 + 16);
              *(_OWORD *)v51 = v52;
              *(_QWORD *)(v50 + 8) = 0;
              *(_QWORD *)(v50 + 16) = 0;
              *(_QWORD *)v50 = 0;
              *(_DWORD *)(v51 + 24) = *(_DWORD *)((char *)v42 + v49 + 24);
              *(_QWORD *)(v51 + 40) = 0;
              *(_QWORD *)(v51 + 48) = 0;
              *(_QWORD *)(v51 + 32) = 0;
              *(_OWORD *)(v51 + 32) = *(__int128 *)((char *)v42 + v49 + 32);
              *(_QWORD *)(v51 + 48) = *(_QWORD *)((char *)v42 + v49 + 48);
              *(_QWORD *)(v50 + 32) = 0;
              *(_QWORD *)(v50 + 40) = 0;
              *(_QWORD *)(v50 + 48) = 0;
              *(_QWORD *)(v51 + 56) = 0;
              *(_QWORD *)(v51 + 64) = 0;
              *(_QWORD *)(v51 + 72) = 0;
              *(_OWORD *)(v51 + 56) = *(__int128 *)((char *)v42 + v49 + 56);
              *(_QWORD *)(v51 + 72) = *(_QWORD *)((char *)v42 + v49 + 72);
              *(_QWORD *)(v50 + 64) = 0;
              *(_QWORD *)(v50 + 72) = 0;
              *(_QWORD *)(v50 + 56) = 0;
              *(_DWORD *)(v51 + 80) = *(_DWORD *)((char *)v42 + v49 + 80);
              *(_BYTE *)(v5 + v49 + 88) = 0;
              *(_BYTE *)(v51 + 112) = 0;
              if (*((_BYTE *)v42 + v49 + 112))
              {
                *(_QWORD *)(v5 + v49 + 88) = 0;
                *(_QWORD *)(v5 + v49 + 96) = 0;
                *(_QWORD *)(v5 + v49 + 104) = 0;
                *(_OWORD *)(v51 + 88) = *(_OWORD *)(v50 + 88);
                *(_QWORD *)(v51 + 104) = *(_QWORD *)(v50 + 104);
                *(_QWORD *)(v50 + 88) = 0;
                *(_QWORD *)(v50 + 96) = 0;
                *(_QWORD *)(v50 + 104) = 0;
                *(_BYTE *)(v51 + 112) = 1;
              }
              v53 = *(_OWORD *)(v50 + 120);
              *(_QWORD *)(v51 + 136) = *(_QWORD *)(v50 + 136);
              *(_OWORD *)(v51 + 120) = v53;
              *(_QWORD *)(v50 + 128) = 0;
              *(_QWORD *)(v50 + 136) = 0;
              *(_QWORD *)(v50 + 120) = 0;
              *(_DWORD *)(v51 + 144) = *(_DWORD *)(v50 + 144);
              *(_QWORD *)(v51 + 160) = 0;
              *(_QWORD *)(v51 + 168) = 0;
              *(_QWORD *)(v51 + 152) = 0;
              *(_OWORD *)(v51 + 152) = *(_OWORD *)(v50 + 152);
              *(_QWORD *)(v51 + 168) = *(_QWORD *)(v50 + 168);
              *(_QWORD *)(v50 + 160) = 0;
              *(_QWORD *)(v50 + 168) = 0;
              *(_QWORD *)(v50 + 152) = 0;
              *(_BYTE *)(v51 + 176) = *(_BYTE *)(v50 + 176);
              *(_QWORD *)(v51 + 192) = 0;
              *(_QWORD *)(v51 + 200) = 0;
              *(_QWORD *)(v51 + 184) = 0;
              *(_OWORD *)(v51 + 184) = *(_OWORD *)(v50 + 184);
              *(_QWORD *)(v51 + 200) = *(_QWORD *)(v50 + 200);
              *(_QWORD *)(v50 + 184) = 0;
              *(_QWORD *)(v50 + 192) = 0;
              *(_QWORD *)(v50 + 200) = 0;
              *(_QWORD *)(v51 + 216) = 0;
              *(_QWORD *)(v51 + 224) = 0;
              *(_QWORD *)(v51 + 208) = 0;
              result = *(__n128 *)(v50 + 208);
              *(__n128 *)(v51 + 208) = result;
              *(_QWORD *)(v51 + 224) = *(_QWORD *)(v50 + 224);
              *(_QWORD *)(v50 + 208) = 0;
              *(_QWORD *)(v50 + 216) = 0;
              *(_QWORD *)(v50 + 224) = 0;
              v49 += 232;
            }
            while ((__int128 *)(v50 + 232) != a2);
          }
          return result;
        }
      }
      if (v8 != v41)
      {
        v54 = 0;
        do
        {
          v55 = (uint64_t)v8 + v54;
          v56 = v5 + v54;
          v57 = *(__int128 *)((char *)v8 + v54);
          *(_QWORD *)(v56 + 16) = *(_QWORD *)((char *)v8 + v54 + 16);
          *(_OWORD *)v56 = v57;
          *(_QWORD *)(v55 + 8) = 0;
          *(_QWORD *)(v55 + 16) = 0;
          *(_QWORD *)v55 = 0;
          *(_DWORD *)(v56 + 24) = *(_DWORD *)((char *)v8 + v54 + 24);
          *(_QWORD *)(v56 + 40) = 0;
          *(_QWORD *)(v56 + 48) = 0;
          *(_QWORD *)(v56 + 32) = 0;
          *(_OWORD *)(v56 + 32) = *(__int128 *)((char *)v8 + v54 + 32);
          *(_QWORD *)(v56 + 48) = *(_QWORD *)((char *)v8 + v54 + 48);
          *(_QWORD *)(v55 + 32) = 0;
          *(_QWORD *)(v55 + 40) = 0;
          *(_QWORD *)(v55 + 48) = 0;
          *(_QWORD *)(v56 + 56) = 0;
          *(_QWORD *)(v56 + 64) = 0;
          *(_QWORD *)(v56 + 72) = 0;
          *(_OWORD *)(v56 + 56) = *(__int128 *)((char *)v8 + v54 + 56);
          *(_QWORD *)(v56 + 72) = *(_QWORD *)((char *)v8 + v54 + 72);
          *(_QWORD *)(v55 + 64) = 0;
          *(_QWORD *)(v55 + 72) = 0;
          *(_QWORD *)(v55 + 56) = 0;
          *(_DWORD *)(v56 + 80) = *(_DWORD *)((char *)v8 + v54 + 80);
          *(_BYTE *)(v5 + v54 + 88) = 0;
          v58 = (_QWORD *)(v5 + v54 + 88);
          *(_BYTE *)(v56 + 112) = 0;
          if (*((_BYTE *)v8 + v54 + 112))
          {
            *v58 = 0;
            *(_QWORD *)(v5 + v54 + 96) = 0;
            *(_QWORD *)(v5 + v54 + 104) = 0;
            *(_OWORD *)v58 = *(_OWORD *)(v55 + 88);
            *(_QWORD *)(v56 + 104) = *(_QWORD *)(v55 + 104);
            *(_QWORD *)(v55 + 88) = 0;
            *(_QWORD *)(v55 + 96) = 0;
            *(_QWORD *)(v55 + 104) = 0;
            *(_BYTE *)(v56 + 112) = 1;
          }
          v59 = *(_OWORD *)(v55 + 120);
          *(_QWORD *)(v56 + 136) = *(_QWORD *)(v55 + 136);
          *(_OWORD *)(v56 + 120) = v59;
          *(_QWORD *)(v55 + 128) = 0;
          *(_QWORD *)(v55 + 136) = 0;
          *(_QWORD *)(v55 + 120) = 0;
          *(_DWORD *)(v56 + 144) = *(_DWORD *)(v55 + 144);
          *(_QWORD *)(v56 + 160) = 0;
          *(_QWORD *)(v56 + 168) = 0;
          *(_QWORD *)(v56 + 152) = 0;
          *(_OWORD *)(v56 + 152) = *(_OWORD *)(v55 + 152);
          *(_QWORD *)(v56 + 168) = *(_QWORD *)(v55 + 168);
          *(_QWORD *)(v55 + 160) = 0;
          *(_QWORD *)(v55 + 168) = 0;
          *(_QWORD *)(v55 + 152) = 0;
          *(_BYTE *)(v56 + 176) = *(_BYTE *)(v55 + 176);
          *(_QWORD *)(v56 + 192) = 0;
          *(_QWORD *)(v56 + 200) = 0;
          *(_QWORD *)(v56 + 184) = 0;
          *(_OWORD *)(v56 + 184) = *(_OWORD *)(v55 + 184);
          *(_QWORD *)(v56 + 200) = *(_QWORD *)(v55 + 200);
          *(_QWORD *)(v55 + 184) = 0;
          *(_QWORD *)(v55 + 192) = 0;
          *(_QWORD *)(v55 + 200) = 0;
          *(_QWORD *)(v56 + 216) = 0;
          *(_QWORD *)(v56 + 224) = 0;
          *(_QWORD *)(v56 + 208) = 0;
          result = *(__n128 *)(v55 + 208);
          *(__n128 *)(v56 + 208) = result;
          *(_QWORD *)(v56 + 224) = *(_QWORD *)(v55 + 224);
          *(_QWORD *)(v55 + 208) = 0;
          *(_QWORD *)(v55 + 216) = 0;
          *(_QWORD *)(v55 + 224) = 0;
          v54 += 232;
        }
        while ((__int128 *)(v55 + 232) != v41);
      }
    }
    else if (a1 != a2)
    {
      v22 = *a1;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
      *(_OWORD *)a4 = v22;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_OWORD *)(a4 + 32) = a1[2];
      *(_QWORD *)(a4 + 48) = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 6) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(__int128 *)((char *)a1 + 56);
      *(_QWORD *)(a4 + 72) = *((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 7) = 0;
      LODWORD(v22) = *((_DWORD *)a1 + 20);
      *(_BYTE *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v22;
      *(_BYTE *)(a4 + 112) = 0;
      if (*((_BYTE *)a1 + 112))
      {
        *(_QWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
        *(_QWORD *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(__int128 *)((char *)a1 + 88);
        *(_QWORD *)(a4 + 104) = *((_QWORD *)a1 + 13);
        *((_QWORD *)a1 + 11) = 0;
        *((_QWORD *)a1 + 12) = 0;
        *((_QWORD *)a1 + 13) = 0;
        *(_BYTE *)(a4 + 112) = 1;
      }
      v23 = *(__int128 *)((char *)a1 + 120);
      *(_QWORD *)(a4 + 136) = *((_QWORD *)a1 + 17);
      *(_OWORD *)(a4 + 120) = v23;
      *((_QWORD *)a1 + 16) = 0;
      *((_QWORD *)a1 + 17) = 0;
      *((_QWORD *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
      *(_QWORD *)(a4 + 160) = 0;
      *(_QWORD *)(a4 + 168) = 0;
      *(_QWORD *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(__int128 *)((char *)a1 + 152);
      *(_QWORD *)(a4 + 168) = *((_QWORD *)a1 + 21);
      *((_QWORD *)a1 + 20) = 0;
      *((_QWORD *)a1 + 21) = 0;
      *((_QWORD *)a1 + 19) = 0;
      *(_BYTE *)(a4 + 176) = *((_BYTE *)a1 + 176);
      *(_QWORD *)(a4 + 192) = 0;
      *(_QWORD *)(a4 + 200) = 0;
      *(_QWORD *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(__int128 *)((char *)a1 + 184);
      *(_QWORD *)(a4 + 200) = *((_QWORD *)a1 + 25);
      *((_QWORD *)a1 + 23) = 0;
      *((_QWORD *)a1 + 24) = 0;
      *((_QWORD *)a1 + 25) = 0;
      *(_QWORD *)(a4 + 216) = 0;
      *(_QWORD *)(a4 + 224) = 0;
      *(_QWORD *)(a4 + 208) = 0;
      result = (__n128)a1[13];
      *(__n128 *)(a4 + 208) = result;
      *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 28);
      *((_QWORD *)a1 + 26) = 0;
      *((_QWORD *)a1 + 27) = 0;
      *((_QWORD *)a1 + 28) = 0;
      v24 = (__int128 *)((char *)a1 + 232);
      if ((__int128 *)((char *)a1 + 232) != a2)
      {
        v25 = 0;
        v26 = (__int128 *)a4;
        do
        {
          v27 = v24;
          v28 = (_QWORD *)v26 + 33;
          v29 = (__int128 *)((char *)v26 + 232);
          v30 = *((float *)v26 + 36);
          if (*((float *)v8 + 94) <= v30)
          {
            v33 = *v27;
            *((_QWORD *)v26 + 31) = *((_QWORD *)v27 + 2);
            *v29 = v33;
            *((_QWORD *)v27 + 1) = 0;
            *((_QWORD *)v27 + 2) = 0;
            *(_QWORD *)v27 = 0;
            *((_DWORD *)v26 + 64) = *((_DWORD *)v8 + 64);
            *((_QWORD *)v26 + 34) = 0;
            *((_QWORD *)v26 + 35) = 0;
            *v28 = 0;
            *(_OWORD *)v28 = *(__int128 *)((char *)v8 + 264);
            *((_QWORD *)v26 + 35) = *((_QWORD *)v8 + 35);
            *((_QWORD *)v8 + 33) = 0;
            *((_QWORD *)v8 + 34) = 0;
            *((_QWORD *)v8 + 35) = 0;
            *((_QWORD *)v26 + 36) = 0;
            *((_QWORD *)v26 + 37) = 0;
            *((_QWORD *)v26 + 38) = 0;
            v26[18] = v8[18];
            *((_QWORD *)v26 + 38) = *((_QWORD *)v8 + 38);
            *((_QWORD *)v8 + 37) = 0;
            *((_QWORD *)v8 + 38) = 0;
            *((_QWORD *)v8 + 36) = 0;
            *((_DWORD *)v26 + 78) = *((_DWORD *)v8 + 78);
            *((_BYTE *)v26 + 320) = 0;
            *((_BYTE *)v26 + 344) = 0;
            if (*((_BYTE *)v8 + 344))
            {
              *((_QWORD *)v26 + 40) = 0;
              *((_QWORD *)v26 + 41) = 0;
              *((_QWORD *)v26 + 42) = 0;
              v26[20] = v8[20];
              *((_QWORD *)v26 + 42) = *((_QWORD *)v8 + 42);
              *((_QWORD *)v8 + 40) = 0;
              *((_QWORD *)v8 + 41) = 0;
              *((_QWORD *)v8 + 42) = 0;
              *((_BYTE *)v26 + 344) = 1;
            }
            v34 = v8[22];
            *((_QWORD *)v26 + 46) = *((_QWORD *)v8 + 46);
            v26[22] = v34;
            *((_QWORD *)v8 + 45) = 0;
            *((_QWORD *)v8 + 46) = 0;
            *((_QWORD *)v8 + 44) = 0;
            *((_DWORD *)v26 + 94) = *((_DWORD *)v8 + 94);
            *((_QWORD *)v26 + 49) = 0;
            *((_QWORD *)v26 + 50) = 0;
            *((_QWORD *)v26 + 48) = 0;
            v26[24] = v8[24];
            *((_QWORD *)v26 + 50) = *((_QWORD *)v8 + 50);
            *((_QWORD *)v8 + 49) = 0;
            *((_QWORD *)v8 + 50) = 0;
            *((_QWORD *)v8 + 48) = 0;
            *((_BYTE *)v26 + 408) = *((_BYTE *)v8 + 408);
            *((_QWORD *)v26 + 53) = 0;
            *((_QWORD *)v26 + 54) = 0;
            *((_QWORD *)v26 + 52) = 0;
            result = (__n128)v8[26];
            v26[26] = (__int128)result;
            *((_QWORD *)v26 + 54) = *((_QWORD *)v8 + 54);
            *((_QWORD *)v8 + 52) = 0;
            *((_QWORD *)v8 + 53) = 0;
            *((_QWORD *)v8 + 54) = 0;
            *((_QWORD *)v26 + 56) = 0;
            *((_QWORD *)v26 + 57) = 0;
            *((_QWORD *)v26 + 55) = 0;
            v35 = *((_QWORD *)v8 + 56);
            *((_QWORD *)v26 + 55) = *((_QWORD *)v8 + 55);
            *((_QWORD *)v26 + 56) = v35;
            *((_QWORD *)v26 + 57) = *((_QWORD *)v8 + 57);
            *((_QWORD *)v8 + 55) = 0;
            *((_QWORD *)v8 + 56) = 0;
            *((_QWORD *)v8 + 57) = 0;
          }
          else
          {
            *v29 = *v26;
            *((_QWORD *)v26 + 31) = *((_QWORD *)v26 + 2);
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = 0;
            *(_QWORD *)v26 = 0;
            *((_DWORD *)v26 + 64) = *((_DWORD *)v26 + 6);
            *(_OWORD *)v28 = v26[2];
            *((_QWORD *)v26 + 35) = *((_QWORD *)v26 + 6);
            *((_QWORD *)v26 + 4) = 0;
            *((_QWORD *)v26 + 5) = 0;
            v26[18] = *(__int128 *)((char *)v26 + 56);
            *((_QWORD *)v26 + 38) = *((_QWORD *)v26 + 9);
            *((_QWORD *)v26 + 6) = 0;
            *((_QWORD *)v26 + 7) = 0;
            *((_QWORD *)v26 + 8) = 0;
            *((_QWORD *)v26 + 9) = 0;
            *((_DWORD *)v26 + 78) = *((_DWORD *)v26 + 20);
            *((_BYTE *)v26 + 320) = 0;
            *((_BYTE *)v26 + 344) = 0;
            if (*((_BYTE *)v26 + 112))
            {
              v26[20] = *(__int128 *)((char *)v26 + 88);
              *((_QWORD *)v26 + 42) = *((_QWORD *)v26 + 13);
              *((_QWORD *)v26 + 12) = 0;
              *((_QWORD *)v26 + 13) = 0;
              *((_QWORD *)v26 + 11) = 0;
              *((_BYTE *)v26 + 344) = 1;
            }
            v26[22] = *(__int128 *)((char *)v26 + 120);
            *((_QWORD *)v26 + 46) = *((_QWORD *)v26 + 17);
            *((_QWORD *)v26 + 16) = 0;
            *((_QWORD *)v26 + 17) = 0;
            *((_QWORD *)v26 + 15) = 0;
            *((float *)v26 + 94) = v30;
            v26[24] = *(__int128 *)((char *)v26 + 152);
            *((_QWORD *)v26 + 50) = *((_QWORD *)v26 + 21);
            *((_QWORD *)v26 + 19) = 0;
            *((_QWORD *)v26 + 20) = 0;
            *((_QWORD *)v26 + 21) = 0;
            *((_BYTE *)v26 + 408) = *((_BYTE *)v26 + 176);
            v26[26] = *(__int128 *)((char *)v26 + 184);
            *((_QWORD *)v26 + 54) = *((_QWORD *)v26 + 25);
            *((_QWORD *)v26 + 23) = 0;
            *((_QWORD *)v26 + 24) = 0;
            *(__int128 *)((char *)v26 + 440) = v26[13];
            *((_QWORD *)v26 + 57) = *((_QWORD *)v26 + 28);
            *((_QWORD *)v26 + 25) = 0;
            *((_QWORD *)v26 + 26) = 0;
            v31 = v5;
            *((_QWORD *)v26 + 27) = 0;
            *((_QWORD *)v26 + 28) = 0;
            if (v26 != (__int128 *)v5)
            {
              v32 = v25;
              while (1)
              {
                v31 = v5 + v32;
                if (*((float *)v8 + 94) <= *(float *)(v5 + v32 - 88))
                  break;
                v32 -= 232;
                quasar::corrective_reranking::Parse::operator=(v31, (__int128 *)(v32 + v5));
                if (!v32)
                {
                  v31 = v5;
                  break;
                }
              }
            }
            quasar::corrective_reranking::Parse::operator=(v31, v27);
          }
          v24 = (__int128 *)((char *)v27 + 232);
          v25 += 232;
          v26 = v29;
          v8 = v27;
        }
        while ((__int128 *)((char *)v27 + 232) != a2);
      }
    }
  }
  return result;
}

