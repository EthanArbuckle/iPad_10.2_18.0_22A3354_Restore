uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD82843C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D20FC0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD8289F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D225F8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD28;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD828AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FB28;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D225F8;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD828D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD828E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD828F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD828FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  *(_QWORD *)a1 = &unk_1E5D225F8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD28;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v23 >= v22)
        goto LABEL_45;
LABEL_25:
      v14 = v23;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (!v21)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v23;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD82937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD829518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  int v25;
  std::vector<unsigned int>::pointer end;
  unsigned int *v27;
  std::vector<unsigned int>::pointer begin;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  std::vector<unsigned int>::pointer v36;
  unsigned int *v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  std::vector<unsigned int>::pointer v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  std::vector<unsigned int>::pointer v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  int v59;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  std::vector<unsigned int> v66;
  std::vector<unsigned int> v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v73 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = &v73;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v68, 0);
      v8 = v73;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v61 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      v65 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v63);
      v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63))
        {
          if (v63)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11)
              std::vector<int>::reserve(&v67, v18);
            if (v14)
              std::vector<int>::reserve(&v66, v18);
            v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v68);
            v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(_QWORD *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71)
                      --*(_DWORD *)v71;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2)
                      v46 = 2;
                    v47 = v67.__begin_ + 1;
                    v48 = *v67.__begin_;
                    v49 = v46 - 1;
                    while (1)
                    {
                      v51 = *v47++;
                      v50 = v51;
                      if (v51 == v48)
                        break;
                      v48 = v50;
                      if (!--v49)
                        goto LABEL_101;
                    }
                    v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1)
                        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      v58 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                      *(float *)&v68 = v58;
                      v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v58) != 1)v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        *(float *)&v68 = v58;
                        v75 = 0;
                        if (v58 != 0.0)
                          v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v63)
                        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
                      else
                        ++v65;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14)
                      goto LABEL_112;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2)
                      v52 = 2;
                    v53 = v66.__begin_ + 1;
                    v54 = *v66.__begin_;
                    v55 = v52 - 1;
                    while (1)
                    {
                      v57 = *v53++;
                      v56 = v57;
                      if (v57 == v54)
                        break;
                      v54 = v56;
                      if (!--v55)
                        goto LABEL_112;
                    }
                    v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              v20 = v69 + 16 * v72;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v73;
              }
              else
              {
                v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v8)
                v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < (int)a2)
                v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v75 = 0;
              v24 = *(float *)(v20 + 8);
              v75 = LODWORD(v24);
              v74 = 0;
              if (v24 != 0.0)
              {
                v75 = LODWORD(v24);
                v74 = 2139095040;
                if (v24 != INFINITY)
                  v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17)
                v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v25 != (_DWORD)v17 + 1)
                v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  begin = v67.__begin_;
                  v29 = v67.__end_ - v67.__begin_;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_135;
                  v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    begin = v67.__begin_;
                    end = v67.__end_;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (unsigned int *)&v33[4 * v29];
                  *v34 = *(_DWORD *)v20;
                  v27 = v34 + 1;
                  while (end != begin)
                  {
                    v35 = *--end;
                    *--v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v67.__end_ = v8;
                  v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  v38 = v66.__begin_;
                  v39 = v66.__end_ - v66.__begin_;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62)
LABEL_135:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40)
                    v40 = v41 >> 1;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                    v42 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    v38 = v66.__begin_;
                    v36 = v66.__end_;
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (unsigned int *)&v43[4 * v39];
                  *v44 = *(_DWORD *)(v20 + 4);
                  v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    v45 = *--v36;
                    *--v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          v17 = v65;
          goto LABEL_18;
        }
        if (v63)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      v8 = v73;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1AD829D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 12);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 12);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 12), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      a3 = v44;
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD82A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD82A580(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A718;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD82A668(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A718;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD82AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
    v12 = a5;
    if (!a4)
      v12 = 0;
    v13 = v11 + v12;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(_QWORD *)a1)
        free(*(void **)a1);
      v23 = 0x4000;
      if (v13 > 0x4000)
        v23 = v13;
      *(_QWORD *)(a1 + 8) = v23;
      v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 16) = v15;
      v14 = v15;
    }
    else
    {
      v14 = *(_OWORD **)(a1 + 16);
      v15 = *(_OWORD **)a1;
    }
    *(_QWORD *)(a1 + 24) = &v14[v13];
    v16 = v24;
    v17 = v25;
    v19 = v26;
    v18 = v27;
    if (v27)
      ++*v27;
    v20 = 0;
    if (!v16)
      goto LABEL_15;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      v22 = *v16;
      if (v21)
        break;
      *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16)
          break;
LABEL_15:
        if (v20 >= v19)
        {
          if (v18)
            --*v18;
          return;
        }
        *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    v10 = v25 + 16 * v26;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1AD82AC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v6 = -1;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  v37 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v38 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v38 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v32);
  v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return updated;
}

void sub_1AD82B094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD82B574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1AD82B664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD82B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  std::vector<int>::value_type __x;
  std::vector<int> v32;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v32.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v30 = *(int64x2_t *)(v16 + 8);
        v26 = 0;
        v27 = v20 >> 4;
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v22 = *(_QWORD *)(v16 + 24);
        do
        {
          v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(_QWORD *)v22;
            v24.i64[1] = HIDWORD(*(_QWORD *)v22);
            v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              v14 = *v4;
            }
            ++v26;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v21;
          v25 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        v30 = v19;
        v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((_QWORD *)v16, v27 - v26);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v32.__begin_;
    if (!v32.__begin_)
      return;
  }
  else
  {
    v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1AD82BB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result[4];
    v3 = -16 * a2;
    v4 = (_DWORD *)(v2 - 16);
    v5 = (_DWORD *)(v2 - 16);
    do
    {
      v6 = *v5;
      v5 -= 4;
      if (!v6)
        --result[1];
      if (!v4[1])
        --result[2];
      v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[3];
  v7 = (int *)(v6 + 16 * v5);
  v8 = *v7;
  v9 = v7[1];
  if (v8 != v9)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v8)
  {
    if (!v9)
    {
      v10 = *(unint64_t **)(a1 + 16);
      v11 = *v10;
LABEL_8:
      *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (!v9)
    {
      v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
      *v10 = v11;
      goto LABEL_8;
    }
  }
  if (*(float *)(v6 + 16 * v5 + 8) != INFINITY && *(float *)(v6 + 16 * v5 + 8) != 0.0)
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  v13 = 0x30FC30007;
  v14 = a2->n128_u32[0] == v8 && a2->n128_u32[1] == v9;
  if (v14 && a2->n128_u32[3] == *(_DWORD *)(v6 + 16 * v5 + 12))
    v13 = 0x3FFFFFFF0007;
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetArc(v4, a2, v5);
  v15 = a2->n128_u32[0];
  v16 = a2->n128_u32[1];
  if (a2->n128_u32[0] != v16)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v15)
  {
    if (!v16)
    {
      v17 = *(unint64_t **)(a1 + 16);
      v18 = *v17;
LABEL_26:
      *v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 16);
    v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v17 = v19;
    if (!v16)
    {
      v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v17 = v18;
      goto LABEL_26;
    }
  }
  if (a2->n128_f32[2] != INFINITY && a2->n128_f32[2] != 0.0)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(a1 + 16) &= v13;
}

__n128 fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetArc(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(a1[3] + 16 * a3);
  if (!v3->n128_u32[0])
    --a1[1];
  if (!v3->n128_u32[1])
    --a1[2];
  if (!a2->n128_u32[0])
    ++a1[1];
  if (!a2->n128_u32[1])
    ++a1[2];
  result = *a2;
  *v3 = *a2;
  return result;
}

void std::vector<std::pair<int,fst::TropicalWeightTpl<float>>>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1AD82C19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  uint64_t v20;
  uint64_t result;
  int v23;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v4 = **a1;
  v5 = *(int *)(v4 + 8 * a2);
  v6 = *((_DWORD *)a1 + 4);
  v7 = 0.0;
  v8 = 0.0;
  if ((_DWORD)v5 != v6)
  {
    v9 = *a1[1];
    if (v5 >= (a1[1][1] - v9) >> 2)
      v8 = INFINITY;
    else
      v8 = *(float *)(v9 + 4 * v5);
  }
  v10 = *(int *)(v4 + 8 * a3);
  if ((_DWORD)v10 != v6)
  {
    v11 = *a1[1];
    if (v10 >= (a1[1][1] - v11) >> 2)
      v7 = INFINITY;
    else
      v7 = *(float *)(v11 + 4 * v10);
  }
  v12 = NAN;
  if (v8 != -INFINITY)
  {
    v13 = *(float *)(v4 + 8 * a2 + 4);
    v12 = NAN;
    if (v13 != -INFINITY)
    {
      v12 = INFINITY;
      v14 = v13 == INFINITY || v8 == INFINITY;
      v15 = v8 + v13;
      if (!v14)
        v12 = v15;
    }
  }
  v28 = v12;
  v16 = NAN;
  if (v7 != -INFINITY)
  {
    v17 = *(float *)(v4 + 8 * a3 + 4);
    v16 = NAN;
    if (v17 != -INFINITY)
    {
      v16 = INFINITY;
      v18 = v17 == INFINITY || v7 == INFINITY;
      v19 = v7 + v17;
      if (!v18)
        v16 = v19;
    }
  }
  v27 = v16;
  v20 = (uint64_t)(a1 + 3);
  if ((_DWORD)v5 != v6 || (_DWORD)v10 == v6)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v20, &v27, &v28);
    v23 = result;
    v24 = (_DWORD)v5 != v6 && (_DWORD)v10 == v6;
    if (v24)
      result = 0;
    else
      result = result;
    if (v24 && v23)
    {
      v25 = *((float *)a1 + 5);
      return v28 > (float)(v25 + v27) || v27 > (float)(v25 + v28);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v20, &v27, &v28))
  {
    return 1;
  }
  else
  {
    v26 = *((float *)a1 + 5);
    return v28 <= (float)(v26 + v27) && v27 <= (float)(v26 + v28);
  }
  return result;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DB68;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1AD82C680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D27268;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27268;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1AD82C8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D200A8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C2A8;
  *a2 = v4;
  return result;
}

void sub_1AD82C95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D207C0;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (_QWORD *)a1[20];
  if (v15)
    v15[1] = *v15;
  return a1;
}

void sub_1AD82CB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21DB8;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21DB8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1AD82CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1AD82CE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1AD82CF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = -1;
    v5 = operator new(0x10uLL);
    *(_QWORD *)v5 = 0;
    v5[2] = v3;
    v5[3] = 0;
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = 0;
    return fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)v4);
  }
  return result;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  float *v2;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;

  v2 = **(float ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  if (!v2)
    return INFINITY;
  v4 = INFINITY;
  do
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), *((unsigned int *)v2 + 2));
    v6 = v2[3];
    v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      v7 = INFINITY;
      v8 = v5 == INFINITY || v6 == INFINITY;
      v9 = v6 + v5;
      if (!v8)
        v7 = v9;
    }
    if (v4 >= v7)
      v10 = v7;
    else
      v10 = v4;
    if (v7 == -INFINITY || v4 == -INFINITY)
      v4 = NAN;
    else
      v4 = v10;
    if (v4 >= -INFINITY && v4 <= -INFINITY)
      *(_QWORD *)(a1 + 8) |= 4uLL;
    v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D225F8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B5D0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1AD82D204(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1AD82D2C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B5D0;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1AD82D3E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD82D44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D207C0;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21DB8;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (_QWORD **)v2[v5];
      if (v6)
      {
        v7 = *v6;
        if (*v6)
        {
          do
          {
            v8 = (_QWORD *)*v7;
            operator delete(v7);
            v7 = v8;
          }
          while (v8);
        }
        *v6 = 0;
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D207C0;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1AD82D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21DB8;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21DB8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1AD82D8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D225F8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B5D0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1AD82DA9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x38uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(const void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>((_QWORD *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD82DD94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, uint64_t **a3)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[3];
  _DWORD *v21;
  unint64_t v22;

  v5 = **(float ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_24;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2])
          goto LABEL_21;
LABEL_8:
        v8 = v20[1] + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v20[0] + 24))(v20[0]))
        break;
      if (!v20[0])
        goto LABEL_8;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 32))();
LABEL_9:
      v9 = v5[3];
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v11 = *(float *)(v8 + 8);
        v10 = NAN;
        if (v11 != -INFINITY)
        {
          v10 = INFINITY;
          v12 = v11 == INFINITY || v9 == INFINITY;
          v13 = v9 + v11;
          if (!v12)
            v10 = v13;
        }
      }
      LODWORD(v19) = *(_DWORD *)(v8 + 12);
      *((float *)&v19 + 1) = v10;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), &v19, a3);
      if (v20[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v20[0] + 40))(v20[0]);
      else
        ++v22;
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(_QWORD *)v20[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v21)
      --*v21;
LABEL_23:
    v5 = *(float **)v5;
  }
  while (v5);
LABEL_24:
  v16 = *a3;
  v14 = a3 + 1;
  v15 = v16;
  if (v16 != (uint64_t *)v14)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      v17 = (uint64_t *)v15[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v15[2];
          v12 = *v18 == (_QWORD)v15;
          v15 = v18;
        }
        while (!v12);
      }
      v15 = v18;
    }
    while (v18 != (uint64_t *)v14);
  }
}

void sub_1AD82DF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  char *MutableState;
  __int128 v7;

  v5 = *a3;
  LODWORD(v7) = *a3;
  *(_QWORD *)((char *)&v7 + 4) = v5;
  HIDWORD(v7) = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)a3[1]);
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v7);
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v15;

  v15 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v15);
  v8 = v7;
  if (*((_DWORD *)v7 + 10) == -1)
  {
    v11 = *a2;
    v9 = operator new();
    v10 = 0;
    *(_QWORD *)v9 = 0;
    *((_DWORD *)v8 + 10) = v11;
    *((_DWORD *)v8 + 11) = 2139095040;
    v8[6] = (uint64_t *)v9;
    *(_BYTE *)(v9 + 8) = 0;
  }
  else
  {
    v9 = (uint64_t)v7[6];
    v10 = *(_QWORD *)v9;
  }
  v12 = operator new(0x10uLL);
  v13 = *a4;
  *v12 = v10;
  v12[1] = v13;
  *(_QWORD *)v9 = v12;
  return 1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *i;
  float v15;
  float v16;

  v4 = *(uint64_t ***)(a2 + 8);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (!*v4)
    return;
  v6 = *v4;
  do
  {
    v7 = *(float *)(a2 + 4);
    v8 = 2143289344;
    if (v7 != -INFINITY)
    {
      v9 = *((float *)v6 + 3);
      v8 = 2143289344;
      if (v9 != -INFINITY)
      {
        if (v7 >= v9)
          v8 = *((_DWORD *)v6 + 3);
        else
          v8 = *(_DWORD *)(a2 + 4);
      }
    }
    *(_DWORD *)(a2 + 4) = v8;
    if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
    {
      v12 = (uint64_t *)*v6;
      v5 = v6;
      goto LABEL_21;
    }
    v10 = *((float *)v5 + 3);
    if (v10 == -INFINITY || (v11 = *((float *)v6 + 3), v11 >= -INFINITY) && v11 <= -INFINITY)
    {
      *((_DWORD *)v5 + 3) = 2143289344;
    }
    else
    {
      if (v10 >= v11)
        v10 = *((float *)v6 + 3);
      *((float *)v5 + 3) = v10;
      if (v10 < -INFINITY || v10 > -INFINITY)
        goto LABEL_20;
    }
    *(_QWORD *)(a1 + 8) |= 4uLL;
LABEL_20:
    v12 = (uint64_t *)*v6;
    v13 = (_QWORD *)*v5;
    *v5 = *(_QWORD *)*v5;
    operator delete(v13);
LABEL_21:
    v6 = v12;
  }
  while (v12);
  for (i = *v4; i; i = (uint64_t *)*i)
  {
    v15 = *((float *)i + 3);
    v16 = NAN;
    if (v15 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v16 = INFINITY;
        if (v15 != INFINITY)
          v16 = v15 - *(float *)(a2 + 4);
      }
      else
      {
        v16 = NAN;
      }
    }
    *((float *)i + 3) = v16;
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v16 = *(float *)(a1 + 144) * floorf((float)(v16 / *(float *)(a1 + 144)) + 0.5);
    *((float *)i + 3) = v16;
  }
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0x7F800000FFFFFFFFLL;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State;
  uint64_t v5;
  void **v6;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (_QWORD **)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((_BYTE *)v6[1] - (_BYTE *)*v6) >> 2))
    {
      v7 = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2);
      v8 = v7;
      v9 = (unint64_t)v6[2];
      v10 = (float *)v6[1];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - (_BYTE *)*v6) >> 2;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*v6;
        v14 = v13 >> 1;
        if (v13 >> 1 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 2), v15);
        else
          v16 = 0;
        v17 = (float *)&v16[4 * v12];
        v18 = &v16[4 * v15];
        *v17 = v8;
        v11 = v17 + 1;
        v20 = (char *)*v6;
        v19 = (char *)v6[1];
        if (v19 != *v6)
        {
          do
          {
            v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v17-- - 1) = v21;
          }
          while (v19 != v20);
          v19 = (char *)*v6;
        }
        *v6 = v17;
        v6[1] = v11;
        v6[2] = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      v6[1] = v11;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;

  v8 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v8;
    if (v8)
    {
      v5 = *v8;
      if (*v8)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *v4 = 0;
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1, float **a2)
{
  float *v2;
  uint64_t v3;
  float result;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  BOOL v13;

  v2 = *a2;
  if (!*a2)
    return INFINITY;
  v3 = **(_QWORD **)(a1 + 152);
  result = INFINITY;
  do
  {
    v5 = *((int *)v2 + 2);
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v3) >> 2 <= v5)
      v6 = INFINITY;
    else
      v6 = *(float *)(v3 + 4 * v5);
    v7 = v2[3];
    v8 = NAN;
    if (v7 != -INFINITY && v6 != -INFINITY)
    {
      v8 = INFINITY;
      v9 = v7 == INFINITY || v6 == INFINITY;
      v10 = v6 + v7;
      if (!v9)
        v8 = v10;
    }
    if (result >= v8)
      v11 = v8;
    else
      v11 = result;
    v13 = v8 == -INFINITY || result == -INFINITY;
    result = NAN;
    if (!v13)
      result = v11;
    v2 = *(float **)v2;
  }
  while (v2);
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;

  v4 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(a1 + 4, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = a1 + 6;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2) & 1) != 0)return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t ***v3;
  unint64_t result;
  uint64_t **v5;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  if (a2 == -1)
    v3 = *(uint64_t ****)(v2 + 104);
  else
    v3 = (uint64_t ***)(*(_QWORD *)(v2 + 80) + 8 * a2);
  v5 = *v3;
  for (result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    v5 = (uint64_t **)*v5;
    if (!v5)
      break;
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t **v7;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  v6 = *v4;
  if (a3 == -1)
    v7 = *(uint64_t ***)(v3 + 104);
  else
    v7 = (uint64_t **)(*(_QWORD *)(v3 + 80) + 8 * a3);
  if (*((unsigned __int8 *)*v7 + 8) == *(unsigned __int8 *)(v6 + 8))
    return std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(*v7, (uint64_t *)v6);
  else
    return 0;
}

uint64_t std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0)
      break;
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2) || *((float *)a1 + 3) != *((float *)a2 + 3))
      return 0;
  }
  return (a1 != 0) ^ (a2 == 0);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_DWORD *)i + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD82EB94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t *a1, uint64_t a2)
{
  float v4;
  char *MutableState;
  uint64_t v6;
  uint64_t v7;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)MutableState = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == (_DWORD)a2)
    v7 = v6 + 80;
  else
    v7 = *(_QWORD *)(v6 + 8) + 8 * ((int)a2 + 1);
  return **(float **)v7;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DB68;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1AD82ECC0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D27268;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD82EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD82EED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

void TGrammar::TGrammar(TGrammar *this, const TLocaleInfo *a2)
{
  _QWORD *v4;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  TAllocator::TAllocator((TGrammar *)((char *)this + 72), 2048);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v4 = (_QWORD *)operator new();
  TRegExp::TRegExp(v4, (uint64_t)a2);
  *((_QWORD *)this + 14) = v4;
  *((_QWORD *)this + 1) = TGrammar::addNonTerminal((uint64_t)this, dword_1AE142E90, 1);
}

void sub_1AD82EFC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  TAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void **v8;
  void *v10;

  MEMORY[0x1AF44D190](v5, 0x60C40CE5A77A8);
  v10 = *(void **)(v4 + 144);
  if (v10)
  {
    *(_QWORD *)(v4 + 152) = v10;
    operator delete(v10);
  }
  if (*v8)
    operator delete(*v8);
  TAllocator::clear(v3);
  std::__tree<int>::destroy(v2, *v7);
  std::__tree<int>::destroy(v1, *v6);
  _Unwind_Resume(a1);
}

_QWORD *TGrammar::addNonTerminal(uint64_t a1, __int32 *a2, int a3)
{
  uint64_t **v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  __int32 *v10;
  uint64_t v11;
  uint64_t v12;
  __int32 *v14;
  __int32 *v15;
  const __int32 **v16;

  v15 = a2;
  v5 = (uint64_t **)(a1 + 40);
  v6 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, (const __int32 **)&v15);
  if (a1 + 48 == v6)
  {
    v8 = wcslen(v15);
    if ((v8 + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (v8 + 1);
    v10 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 72), v9);
    v14 = v10;
    wcscpy(v10, v15);
    v7 = TAllocator::allocate((TAllocator *)(a1 + 72), 40);
    v11 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v11 + 1;
    v7[2] = v10;
    v7[3] = v11;
    *v7 = 0;
    v7[1] = 0;
    v7[4] = 0;
    v16 = (const __int32 **)&v14;
    std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(v5, (const __int32 **)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16)[5] = (uint64_t)v7;
  }
  else
  {
    v7 = *(_QWORD **)(v6 + 40);
  }
  v12 = 1;
  if (!a3)
    v12 = 2;
  v7[1] |= v12;
  return v7;
}

void TGrammar::~TGrammar(TGrammar *this)
{
  TRegExp *v2;
  void *v3;
  void *v4;

  v2 = (TRegExp *)*((_QWORD *)this + 14);
  if (v2)
  {
    TRegExp::~TRegExp(v2);
    MEMORY[0x1AF44D190]();
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    operator delete(v4);
  TAllocator::clear((TGrammar *)((char *)this + 72));
  std::__tree<int>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__tree<int>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

uint64_t TGrammar::computeDerivationForSymbol(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2[3];
  v4 = v3 >> 6;
  v5 = 1 << v3;
  v6 = *(_QWORD *)(*a3 + 8 * v4);
  if ((v5 & v6) == 0)
  {
    v7 = result;
    *(_QWORD *)(*a3 + 8 * v4) = v6 | v5;
    v8 = a2[3];
    v9 = *(_QWORD *)(result + 64) * v8;
    *(_QWORD *)(*(_QWORD *)(result + 120) + (((unint64_t)(v9 + v8) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9 + v8);
    v10 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = *(_QWORD *)(v10[2] + 8 * v10[1] - 8);
        *(_QWORD *)(*(_QWORD *)(v7 + 120)
                  + (((unint64_t)(*(_QWORD *)(v12 + 24) + v9) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*(_BYTE *)(v12 + 24) + v9);
        result = TGrammar::computeDerivationForSymbol(v7, v12, a3);
        v13 = *(_QWORD *)(v7 + 64);
        if (v13)
        {
          v14 = 0;
          v15 = v13 * *(_QWORD *)(v12 + 24);
          v16 = *(_QWORD *)(v7 + 120);
          do
          {
            if (((*(_QWORD *)(v16 + (((v15 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15
                                                                                    + v14)) & 1) != 0)
            {
              *(_QWORD *)(v16 + (((v9 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9
                                                                                     + v14);
              v13 = *(_QWORD *)(v7 + 64);
            }
            ++v14;
          }
          while (v14 < v13);
        }
        v10 = (_QWORD *)v10[4];
      }
      while (v10);
    }
  }
  return result;
}

void TGrammar::finalize(TGrammar *this)
{
  TGrammar *v2;
  TGrammar *v3;
  TGrammar *v4;
  BOOL v5;
  void *__p[3];

  std::vector<BOOL>::resize((uint64_t)this + 120, *((_QWORD *)this + 8) * *((_QWORD *)this + 8), 0);
  std::vector<BOOL>::vector(__p, *((_QWORD *)this + 8));
  v2 = (TGrammar *)*((_QWORD *)this + 5);
  if (v2 != (TGrammar *)((char *)this + 48))
  {
    do
    {
      TGrammar::computeDerivationForSymbol((uint64_t)this, *((_QWORD **)v2 + 5), __p);
      v3 = (TGrammar *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(TGrammar **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (TGrammar *)*((_QWORD *)v2 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (TGrammar *)((char *)this + 48));
  }
  std::__tree<int>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  TRegExp::doneAdding(*((TRegExp **)this + 14));
  *(_BYTE *)this = 1;
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1AD82F3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1AD82F550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TGrammar::addTerminal(uint64_t a1, __int32 *a2)
{
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int32 *v24;
  __int32 *v25;
  __int32 **v26;

  v25 = a2;
  v3 = (uint64_t **)(a1 + 16);
  v4 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 16, (const __int32 **)&v25);
  if (a1 + 24 != v4)
    return *(_QWORD **)(v4 + 40);
  v6 = (char **)(a1 + 144);
  TRegExp::add(*(const TLocaleInfo ***)(a1 + 112), v25, (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  v7 = wcslen(v25);
  if ((v7 + 1) >> 62)
    v8 = -1;
  else
    v8 = 4 * (v7 + 1);
  v24 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 72), v8);
  wcscpy(v24, v25);
  v5 = TAllocator::allocate((TAllocator *)(a1 + 72), 40);
  v9 = (uint64_t)(*(_QWORD *)(a1 + 152) - (_QWORD)*v6) >> 3;
  v5[2] = v24;
  v5[3] = v9;
  *(_OWORD *)v5 = xmmword_1AE142E80;
  v5[4] = 0;
  v26 = &v24;
  std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(v3, (const __int32 **)&v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v26)[5] = (uint64_t)v5;
  v10 = *(_QWORD **)(a1 + 152);
  v11 = *(_QWORD *)(a1 + 160);
  if ((unint64_t)v10 >= v11)
  {
    v13 = ((char *)v10 - *v6) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v11 - (_QWORD)*v6;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 160, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v5;
    v12 = v18 + 8;
    v21 = *(char **)(a1 + 144);
    v20 = *(char **)(a1 + 152);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = *v6;
    }
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v12;
    *(_QWORD *)(a1 + 160) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v5;
    v12 = v10 + 1;
  }
  *(_QWORD *)(a1 + 152) = v12;
  return v5;
}

_QWORD *TGrammar::addRule(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, size_t a6)
{
  size_t v11;
  TAllocator *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *result;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v11 = a6 + 1;
  v12 = (TAllocator *)(a1 + 72);
  v13 = (unsigned __int8 *)TAllocator::allocate((TAllocator *)(a1 + 72), a6 + 1);
  v14 = v13;
  if (a6)
    memmove(v13, a5, a6);
  v14[a6] = 0;
  if (v11 >> 61)
    v15 = -1;
  else
    v15 = 8 * v11;
  v16 = TAllocator::allocate(v12, v15);
  v17 = v16;
  if (a6)
    memmove(v16, a4, 8 * a6);
  v17[a6] = a3;
  result = TAllocator::allocate(v12, 48);
  result[2] = v17;
  result[3] = v14;
  *result = a2;
  result[1] = v11;
  v19 = (_QWORD **)(v17 - 1);
  result[4] = 0;
  result[5] = 0;
  do
  {
    v20 = *v14++;
    ++v19;
  }
  while (v20);
  v21 = *v19;
  result[4] = *v21;
  *v21 = result;
  return result;
}

BOOL TGrammar::getTerminals(uint64_t a1, unsigned int *a2, char **a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _BOOL4 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<TRegExpMatch>::resize((uint64_t)&v22, 0);
  v21 = TRegExp::match(*(_QWORD **)(a1 + 112), a2, 3, (uint64_t)&v22);
  v6 = v23;
  if (v23 != v22)
  {
    v7 = 0;
    v8 = a3 + 2;
    v9 = a3[1];
    v6 = v22;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v6[3 * v7 + 2]);
      if ((unint64_t)v9 >= *v8)
      {
        v11 = (v9 - *a3) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = *v8 - (_QWORD)*a3;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v10;
        v9 = v16 + 8;
        v18 = *a3;
        v17 = a3[1];
        if (v17 != *a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = *a3;
        }
        *a3 = v16;
        a3[1] = v9;
        a3[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v9 = v10;
        v9 += 8;
      }
      a3[1] = v9;
      ++v7;
      v6 = v22;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * (v23 - v22));
  }
  if (v6)
  {
    v23 = v6;
    operator delete(v6);
  }
  return v21;
}

void sub_1AD82F9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<TRegExpMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TRegExpMatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = wcscmp(*(const __int32 **)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || wcscmp(*a2, *(const __int32 **)(v5 + 32)) < 0)
    return v2;
  return v5;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(uint64_t **a1, const __int32 **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>(uint64_t a1, _QWORD *a2, const __int32 **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if ((wcscmp(*a3, (const __int32 *)v4[4]) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((wcscmp((const __int32 *)v7[4], *a3) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::vector<TRegExpMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_1AD82FEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD830030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1AD830258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD830AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53)
{
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;

  if (a27 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  if (a37 < 0)
    operator delete(a32);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a53);

  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo((void **)&STACK[0x708]);
  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(v56 - 128, *(_QWORD **)(v56 - 120));

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::LmeDataFactory,char const*>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5[3];
  void *__p[2];
  char v7;
  void **v8;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, *a1);
  memset(v5, 0, sizeof(v5));
  quasar::LmeDataFactory::LmeDataFactory(v4, __p, 1, 1, v5);
  *a2 = v4;
  v8 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD830D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v18, 0x10F3C406D89AE2DLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::LmeDataFactory>::operator=[abi:ne180100]<quasar::LmeDataFactory,std::default_delete<quasar::LmeDataFactory>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D460E0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1AD831038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1AD831B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40)
{
  uint64_t v40;
  void *v41;
  uint64_t v42;

  if (*(char *)(v42 - 233) < 0)
    operator delete(*(void **)(v42 - 256));
  MEMORY[0x1AF44D190](v40, 0x1093C402D7449D9);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a40);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x740]);

  _Unwind_Resume(a1);
}

void sub_1AD831FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>>::operator=[abi:ne180100]<quasar::GlobalLRUCache<std::string,std::vector<std::string>>,std::default_delete<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D460A8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1AD832B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  void *a74;

  a23 = &a26;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a26 = &a38;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a55 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a58, (_QWORD *)a59);
  a58 = (uint64_t)&a61;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  if (a73 < 0)
    operator delete(a72);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a74);

  _Unwind_Resume(a1);
}

BOOL quasar::LmeDataFactory::isContactTemplate(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 result;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 1895);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 1880);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)(a1 + 1872);
    else
      v9 = *(unsigned __int8 **)(a1 + 1872);
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5))
        return 1;
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      v10 = v2;
      v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11)
          return 1;
      }
    }
  }
  v12 = *(_BYTE *)(a1 + 1919);
  if (v12 < 0)
  {
    if (!*(_QWORD *)(a1 + 1904))
      return 0;
  }
  else if (!*(_BYTE *)(a1 + 1919))
  {
    return 0;
  }
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 1919);
  else
    v13 = *(_QWORD *)(a1 + 1904);
  if (v6 != v13)
    return 0;
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(a1 + 1896);
  else
    v14 = *(unsigned __int8 **)(a1 + 1896);
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v14, v5) == 0;
  if (!(_DWORD)v4)
    return 1;
  v15 = v4 - 1;
  do
  {
    v17 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

void sub_1AD83304C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40E7284A48);
  _Unwind_Resume(a1);
}

void sub_1AD8330D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD833200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AD8333C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1AD8334F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD833650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AD833F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a37);
  std::__tree<std::string>::destroy((uint64_t)&a43, (char *)a44);
  std::__tree<std::string>::destroy((uint64_t)&a46, (char *)a47);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1AD8341DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1AD834790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  uint64_t v52;
  void *v53;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v52);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t *)(a2 + 48));
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a1[16] = MEMORY[0x1E0DE4FF8] + 16;
  v3 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v4;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = *a2;
  a1[1] = a2[1];
  a2[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v8 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v6 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = v3[4];
  v10 = v3[5];
  a1[2] = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24) + 16) = v10;
  v11 = v3[1];
  *a1 = v11;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v11 - 24)) = v3[6];
  v12 = MEMORY[0x1E0DE4FD0];
  *a1 = MEMORY[0x1E0DE4FD0] + 24;
  a1[16] = v12 + 104;
  a1[2] = v12 + 64;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_1AD834994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x1E0DE4F50];
  v2 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 72) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 64) = v3;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x1AF44D094);
}

void __copy_helper_block_ea8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v4;
  }
  v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1AD834B20(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1AD834D8C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  if (*(char *)(v2 - 73) < 0)
    operator delete(*(void **)(v2 - 96));
  v4 = *(_QWORD *)(v2 - 72);
  *(_QWORD *)(v2 - 72) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  _Unwind_Resume(a1);
}

void std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1AD8350C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  void *v52;

  if (a51 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a52);

  _Unwind_Resume(a1);
}

void sub_1AD83520C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1AF44D094](v1 + 424);
  _Unwind_Resume(a1);
}

void sub_1AD8353BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1AD83561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1AD8357CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  void *v24;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&a9, a10);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a23);

  _Unwind_Resume(a1);
}

void sub_1AD8359E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v34 - 72, *(char **)(v34 - 64));

  _Unwind_Resume(a1);
}

void sub_1AD836720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  void *v61;
  uint64_t v62;

  if (*(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  a61 = (void *)(v62 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactoryBase::Word::~Word(quasar::LmeDataFactoryBase::Word *this)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)this + 56, *((char **)this + 8));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1AD836D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v45 - 160));
  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  _Unwind_Resume(a1);
}

void sub_1AD836E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD8370A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD83796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;
  uint64_t v23;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&__p, (_QWORD *)a22);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v23 - 136, *(_QWORD **)(v23 - 128));

  _Unwind_Resume(a1);
}

void sub_1AD837F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);

  _Unwind_Resume(a1);
}

void sub_1AD838308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_1AD838568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD8387A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v10;
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a7);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v7 - 176);
  v10 = __cxa_begin_catch(a1);
  v11 = (void *)MEMORY[0x1E0C99DA0];
  v12 = *MEMORY[0x1E0C99768];
  if (a2 == 2)
  {
    (*(void (**)(void *))(*(_QWORD *)v10 + 16))(v10);
    objc_msgSend(v11, "raise:format:", v12, CFSTR("Quasar internal C++ exception: %s"));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Quasar internal unknown exception"));
  }
  __cxa_end_catch();
  JUMPOUT(0x1AD83874CLL);
}

void sub_1AD8388C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1AD83905C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  EARLogger *v23;
  uint64_t v24;
  NSObject *v25;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

    v23 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v24 = (uint64_t)v23;
      EARLogger::QuasarOSLogger(v23);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        -[_EARUserProfileContainer initWithPath:error:].cold.1(v24);
    }
    else
    {
      EARLogger::QuasarOSLogger(v23);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        -[_EARUserProfileContainer initWithPath:error:].cold.2();
    }

    __cxa_end_catch();
    JUMPOUT(0x1AD838B50);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD839310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD8393FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1AD839568(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1AD839690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::string *sdapi::SdapiUtil::LocaleInfo::LocaleInfo(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v7 = a2[5];
    this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v7;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v9 = a2[8];
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  }
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 152);
    this[7].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 21);
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v10;
  }
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v11 = a2[11];
    this[8].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 24);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v11;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v13 = a2[14];
    this[10].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v13;
  }
  v14 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  this[11].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 272);
  return this;
}

void sub_1AD839964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;

  if (*(char *)(v10 + 247) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 223) < 0)
    operator delete(*v18);
  if (*(char *)(v10 + 199) < 0)
    operator delete(*v17);
  if (*(char *)(v10 + 175) < 0)
    operator delete(*v16);
  if (*(char *)(v10 + 151) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 127) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 103) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 79) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void sub_1AD839A54()
{
  JUMPOUT(0x1AD839A3CLL);
}

void sdapi::SdapiUtil::LocaleInfo::~LocaleInfo(void **this)
{
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(this + 1, *((__int128 ***)a2 + 3), *((__int128 ***)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1AD839BA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD839C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * (v6[1] - *v6));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD839CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long long>,std::__tree_node<std::__value_type<std::string,long long>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_multi<std::pair<std::string const,long long> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD839FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_multi<std::pair<std::string const,long long> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1AD83A050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD83A0FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>(uint64_t a1)
{
  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x150uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 88) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *(_OWORD *)((char *)v7 + 152) = 0u;
    *(_OWORD *)((char *)v7 + 168) = 0u;
    *(_OWORD *)((char *)v7 + 184) = 0u;
    *(_OWORD *)((char *)v7 + 200) = 0u;
    *(_OWORD *)((char *)v7 + 216) = 0u;
    *(_OWORD *)((char *)v7 + 232) = 0u;
    *(_OWORD *)((char *)v7 + 248) = 0u;
    *(_OWORD *)((char *)v7 + 264) = 0u;
    *(_OWORD *)((char *)v7 + 280) = 0u;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *((_QWORD *)v7 + 41) = 0;
    *(_OWORD *)((char *)v7 + 296) = 0u;
    *(_OWORD *)((char *)v7 + 312) = 0u;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1AD83A5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<quasar::PersonalizationRecipe>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a2 + 8, *(_QWORD **)(a2 + 16));
    JUMPOUT(0x1AF44D190);
  }
}

void std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *utf8::find_invalid<std::__wrap_iter<char const*>>(char *result, char *a2)
{
  int v3;
  char *v4;

  v4 = result;
  if (result != a2)
  {
    do
    {
      v3 = utf8::internal::validate_next<std::__wrap_iter<char const*>>(&v4, a2, 0);
      result = v4;
    }
    while (!v3 && v4 != a2);
  }
  return result;
}

uint64_t utf8::internal::validate_next<std::__wrap_iter<char const*>>(char **a1, char *a2, unsigned int *a3)
{
  char *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  char v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v5 = *a1;
  v13 = 0;
  v6 = *v5;
  if (*v5 < 0)
  {
    if ((v6 & 0xE0) == 0xC0)
    {
      if (v5 == a2 || (*a1 = v5 + 1, v5 + 1 == a2))
      {
        result = 1;
        goto LABEL_37;
      }
      v10 = v5[1];
      if ((v10 & 0xC0) != 0x80)
      {
        result = 3;
        goto LABEL_37;
      }
      v11 = v10 & 0x3F | ((v6 & 0x1F) << 6);
      v8 = 2;
      v6 = v11;
    }
    else
    {
      if ((v6 & 0xF0) == 0xE0)
      {
        result = utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
        v8 = 3;
        if ((_DWORD)result)
          goto LABEL_37;
      }
      else
      {
        if ((v6 & 0xF8) != 0xF0)
          return 2;
        result = utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
        v8 = 4;
        if ((_DWORD)result)
          goto LABEL_37;
      }
      v6 = v13;
    }
  }
  else
  {
    result = 1;
    if (v5 == a2)
      goto LABEL_37;
    v8 = 1;
  }
  if (HIWORD(v6) > 0x10u || (v6 & 0xFFFFF800) == 55296)
  {
    result = 5;
  }
  else
  {
    if (v6 > 0x7F)
    {
      if (v6 > 0x7FF)
      {
        if (HIWORD(v6))
          v12 = 1;
        else
          v12 = v8 == 3;
        if (v12)
          goto LABEL_17;
      }
      else if (v8 == 2)
      {
        goto LABEL_17;
      }
    }
    else if (v8 == 1)
    {
LABEL_17:
      if (a3)
        *a3 = v6;
      result = 0;
      v5 = *a1 + 1;
      goto LABEL_37;
    }
    result = 4;
  }
LABEL_37:
  *a1 = v5;
  return result;
}

uint64_t utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(char **a1, char *a2, int *a3)
{
  char *v3;
  char v4;
  char v5;
  char *v6;
  char v7;
  uint64_t result;

  v3 = *a1;
  if (*a1 == a2)
    return 1;
  v4 = *v3;
  *a1 = v3 + 1;
  if (v3 + 1 == a2)
    return 1;
  v5 = v3[1];
  if ((v5 & 0xC0) != 0x80)
    return 3;
  v6 = v3 + 2;
  *a1 = v6;
  if (v6 == a2)
    return 1;
  v7 = *v6;
  if ((v7 & 0xC0) != 0x80)
    return 3;
  result = 0;
  if (a3)
    *a3 = ((v4 & 0xF) << 12) | ((v5 & 0x3F) << 6) | v7 & 0x3F;
  return result;
}

uint64_t utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(char **a1, char *a2, int *a3)
{
  char *v3;
  char v4;
  char v5;
  char v6;
  char *v7;
  char v8;
  uint64_t result;

  v3 = *a1;
  if (*a1 == a2)
    return 1;
  v4 = *v3;
  *a1 = v3 + 1;
  if (v3 + 1 == a2)
    return 1;
  v5 = v3[1];
  if ((v5 & 0xC0) != 0x80)
    return 3;
  *a1 = v3 + 2;
  if (v3 + 2 == a2)
    return 1;
  v6 = v3[2];
  if ((v6 & 0xC0) != 0x80)
    return 3;
  v7 = v3 + 3;
  *a1 = v7;
  if (v7 == a2)
    return 1;
  v8 = *v7;
  if ((v8 & 0xC0) != 0x80)
    return 3;
  result = 0;
  if (a3)
    *a3 = ((v4 & 7) << 18) | ((v5 & 0x3F) << 12) | ((v6 & 0x3F) << 6) | v8 & 0x3F;
  return result;
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string &,unsigned long,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,unsigned long,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1AD83ABC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,unsigned long,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  std::string __p;
  std::string v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD83AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string&,unsigned long,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string&,unsigned long,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1AD83ADEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string&,unsigned long,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  std::string __p;
  std::string v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD83AEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1AD83B014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  std::string __p;
  std::string v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD83B0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long long>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1A8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar7LmeDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD83B278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar7LmeDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44FD0;
  a1[1] = 0;
  quasar::LmeData::LmeData((quasar::LmeData *)(a1 + 3), 0);
  return a1;
}

void sub_1AD83B2C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LmeData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

quasar::LmeData *quasar::LmeData::LmeData(quasar::LmeData *this, int a2)
{
  *(_QWORD *)this = &off_1E5D3BAB8;
  *((_QWORD *)this + 2) = &off_1E5D35090;
  fst::SymbolTable::SymbolTable((quasar::LmeData *)((char *)this + 24));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = &off_1E5D35090;
  fst::SymbolTable::SymbolTable((quasar::LmeData *)((char *)this + 96));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = -1;
  *((_QWORD *)this + 21) = -1;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_DWORD *)this + 66) = a2;
  *((_DWORD *)this + 67) = 2;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = (char *)this + 352;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  *((_BYTE *)this + 392) = 0;
  return this;
}

void sub_1AD83B428(_Unwind_Exception *a1)
{
  quasar::WordPronCache *v1;

  quasar::WordPronCache::~WordPronCache(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable,quasar::TextEncoding,void>@<X0>(uint64_t a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1AD83B488(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D43328;
  v5 = *a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  *v6 = &unk_1E5D40EA0;
  v6[1] = 0;
  v6[3] = &off_1E5D1AD68;
  v7 = *(_QWORD *)(a2 + 8);
  v6[4] = v7;
  ++*(_DWORD *)(v7 + 168);
  *(_QWORD *)(a1 + 120) = v6 + 3;
  *(_QWORD *)(a1 + 128) = v6;
  *(_DWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_1AD83B550(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,int>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD83B5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::map<std::string,std::map<std::string,int>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,int>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,int>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD83B678(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,int>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,int>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,int>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,int>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__construct_node<std::pair<std::string const,std::map<std::string,int>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__construct_node<std::pair<std::string const,std::map<std::string,int>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::map<std::string,int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD83B7F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_1AD83B868(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,int const&>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1AD83B994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  std::string __p;
  std::string v9;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v9, &__p, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1AD83BA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t __Block_byref_object_copy__286(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__287(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void ___ZN10EARHelpers24DictionaryToUnorderedMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_Z57___EARUserProfileConfig_initWithConfiguration_overrides__E3__0S8_EENS1_13unordered_mapIT_T0_NS1_4hashISA_EENS1_8equal_toISA_EENS5_INS1_4pairIKSA_SB_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  std::string __p;
  void *v14[2];
  uint64_t v15;
  void **v16;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
  }

  v9 = v6;
  v10 = v9;
  if (v9)
    objc_msgSend(v9, "ear_toString");
  else
    memset(&__p, 0, sizeof(__p));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
  v16 = v14;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  std::string::operator=((std::string *)(v12 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);

}

void sub_1AD83BC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1AD83BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::ifstream,std::allocator<std::ifstream>,std::string,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x258uLL);
  result = std::__shared_ptr_emplace<std::ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::ifstream>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD83BD3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::ifstream>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45510;
  a1[1] = 0;
  std::ifstream::basic_ifstream(a1 + 3);
  return a1;
}

void sub_1AD83BD8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100INS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x130uLL);
  result = _ZNSt3__120__shared_ptr_emplaceINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD83BE2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45548;
  a1[1] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void sub_1AD83BE78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,std::string,quasar::LmeDataFactoryBase::LmeType,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD83BF40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D426B0;
  a1[1] = 0;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string,quasar::LmeDataFactoryBase::LmeType>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD83BFA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeContainer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D426B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeContainer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D426B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LmeContainer>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::LmeContainer>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string,quasar::LmeDataFactoryBase::LmeType>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  quasar::LmeContainer::LmeContainer(a2, &v11, a4, *a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD83C0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::LmeContainer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

void std::vector<kaldi::Matrix<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::Matrix<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
      v3 = kaldi::Matrix<float>::~Matrix(v3 - 40);
    a1[1] = v7;
  }
}

void std::vector<kaldi::Vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<kaldi::Vector<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 24 * a2);
  }
}

void std::vector<kaldi::Matrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      v14 = 40 * a2;
      do
      {
        kaldi::Matrix<float>::Matrix(v7);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v22 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v11);
    else
      v12 = 0;
    v15 = (uint64_t)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[40 * v11];
    v16 = 5 * a2;
    v17 = v15 + 40 * a2;
    v18 = 8 * v16;
    do
    {
      kaldi::Matrix<float>::Matrix(v15);
      v15 += 40;
      v18 -= 40;
    }
    while (v18);
    v20 = v17;
    std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1AD83C2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 40;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 40;
    kaldi::Matrix<float>::Matrix(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    kaldi::Matrix<float>::~Matrix(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<kaldi::Vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD83C5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>((uint64_t)(a1 + 2), a1[1], (const void **)a1[1], *a1, (const void **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, const void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v10 = v7 - 24;
      *(_QWORD *)(v10 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v10, *((unsigned int *)v9 - 4), 1);
      v9 -= 3;
      kaldi::VectorBase<float>::CopyFromVec(v10, v9);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1AD83C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    kaldi::Vector<float>::Destroy(result);
    result = *(_QWORD *)(a2 + 32) + 24;
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::Vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::Vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::Vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 24;
    kaldi::Vector<float>::Destroy(v4 - 24);
  }
}

void std::vector<std::vector<std::pair<int,float>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_1AD83C9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](a1 + 120);
  return a1;
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 32 * a2);
  }
  else
  {
    std::vector<std::pair<int,kaldi::Vector<float>>>::__append(a1, a2 - v2);
  }
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1AD83CB20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::vector<std::vector<std::pair<int,float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD83CDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

char *std::vector<std::vector<std::pair<int,float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,float>> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_1AD83CF48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD83D050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD83D0B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {
    v5 = i - 24;
    kaldi::Vector<float>::Destroy(v5);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<int,kaldi::Vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_DWORD *)v7 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_DWORD *)v15 = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<std::pair<int,kaldi::Vector<float>>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1AD83D268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,kaldi::Vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_DWORD *)(v10 - 32);
      v10 -= 32;
      *(_QWORD *)(v7 - 24) = 0;
      v12 = v7 - 24;
      *(_DWORD *)(v12 - 8) = v11;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v12, *(unsigned int *)(v10 + 16), 1);
      kaldi::VectorBase<float>::CopyFromVec(v12, (const void **)(v9 - 24));
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v9 = v10;
    }
    while (v10 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1AD83D3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    kaldi::Vector<float>::Destroy(i + 8);
    i = *(_QWORD *)(a2 + 32) + 32;
  }
}

uint64_t std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 32;
    kaldi::Vector<float>::Destroy(v4 - 24);
  }
}

uint64_t *std::vector<std::pair<int,float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,float> const*>,std::__wrap_iter<std::pair<int,float> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = a2;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(uint64_t **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = a2 - v13;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v41 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    else
      v18 = 0;
    v32 = &v18[8 * v15];
    __p = v18;
    v38 = v32;
    v40 = &v18[8 * v17];
    v33 = 8 * a5;
    v34 = &v32[8 * a5];
    do
    {
      v35 = *v7++;
      *(_QWORD *)v32 = v35;
      v32 += 8;
      v33 -= 8;
    }
    while (v33);
    v39 = v34;
    v5 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v5);
    if (v39 != v38)
      v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(_QWORD **)(v9 - 8);
LABEL_18:
    v25 = &a2[a5];
    v26 = &v21[-a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *v26++;
        *v27++ = v28;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
    {
      v29 = (_DWORD *)v21 - 1;
      v30 = v21 - v25;
      do
      {
        *(v29 - 1) = a2[v30 - 1];
        *v29 = HIDWORD(a2[v30 - 1]);
        v29 -= 2;
        --v30;
      }
      while (v30 * 8);
    }
    if (v20 != a3)
    {
      v31 = a2;
      do
      {
        *(_DWORD *)v31 = *(_DWORD *)v7;
        *((_DWORD *)v31++ + 1) = *((_DWORD *)v7++ + 1);
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(_QWORD **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_QWORD **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      ++v21;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1AD83D748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,float>>::erase(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *(char **)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 8 * ((a3 - a2) >> 3);
      v4 = a2;
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = *(_DWORD *)&v4[v5 + 4];
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *MemberOf;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *result, int *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int *v11;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        v7 = *v4;
        if (v6 < *v4)
        {
          v8 = v4[3];
          v9 = v3;
          while (1)
          {
            v10 = (char *)result + v9;
            *((_DWORD *)v10 + 2) = v7;
            *((_DWORD *)v10 + 3) = *(int *)((char *)result + v9 + 4);
            if (!v9)
              break;
            v7 = *((_DWORD *)v10 - 2);
            v9 -= 8;
            if (v6 >= v7)
            {
              v11 = (int *)((char *)result + v9 + 8);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v6;
          v11[1] = v8;
        }
        v2 = v5 + 2;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *result, int *a2)
{
  int *v2;
  _DWORD *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 3;
      do
      {
        v4 = v2;
        v5 = result[2];
        v6 = *result;
        if (v5 < *result)
        {
          v7 = result[3];
          v8 = v3;
          do
          {
            v9 = v8;
            *(v8 - 1) = v6;
            v10 = *(v8 - 2);
            v8 -= 2;
            *v9 = v10;
            v6 = *(v9 - 5);
          }
          while (v5 < v6);
          *(v8 - 1) = v5;
          *v8 = v7;
        }
        v2 = v4 + 2;
        v3 += 2;
        result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      v6 = a1[1];
      a1[1] = a3[1];
      a3[1] = v6;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v10 = a1[1];
    a1[1] = a2[1];
    a2[1] = v10;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    a2[1] = a3[1];
    a3[1] = v10;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2[1];
    a2[1] = a3[1];
    a3[1] = v7;
    v8 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v8;
    v9 = a1[1];
    a1[1] = a2[1];
    a2[1] = v9;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  v7 = a1[1];
  if (v3 < a2)
  {
    v8 = *v3;
    v9 = *a2;
    do
    {
      *v3 = v9;
      *a2 = v8;
      v10 = v3[1];
      v3[1] = a2[1];
      a2[1] = v10;
      do
      {
        v11 = v3[2];
        v3 += 2;
        v8 = v11;
      }
      while (v2 >= v11);
      do
      {
        v12 = *(a2 - 2);
        a2 -= 2;
        v9 = v12;
      }
      while (v2 < v12);
    }
    while (v3 < a2);
  }
  if (v3 - 2 != a1)
  {
    *a1 = *(v3 - 2);
    a1[1] = *(v3 - 1);
  }
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v3);
  v6 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  if (v6 >= a2)
  {
    v10 = &a1[v2];
  }
  else
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v5;
      v12 = v10[1];
      v10[1] = v11[1];
      v11[1] = v12;
      do
      {
        v13 = v10[2];
        v10 += 2;
        v5 = v13;
      }
      while (v13 < v3);
      do
      {
        v14 = *(v11 - 2);
        v11 -= 2;
        v9 = v14;
      }
      while (v14 >= v3);
    }
    while (v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    a1[1] = *(v10 - 1);
  }
  *(v10 - 2) = v3;
  *(v10 - 1) = v4;
  return v10 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_DWORD *)a2 - 2);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(float *)(a1 + 4) = *(a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)(a1 + 8), (int *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a1 + 8, a1 + 16, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a1 + 8, a1 + 16, (float *)(a1 + 24), a2 - 2);
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      v10 = (float *)(a1 + 24);
      if ((float *)(a1 + 24) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    v14 = *(_DWORD *)v9;
    if (*(_DWORD *)v10 < *(_DWORD *)v9)
    {
      v15 = *((_DWORD *)v10 + 1);
      v16 = v11;
      while (1)
      {
        v17 = (_DWORD *)(a1 + v16);
        v17[6] = v14;
        v17[7] = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = v17[2];
        v16 -= 8;
        if (v13 >= v14)
        {
          v18 = (_DWORD *)(a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v18 = (_DWORD *)a1;
LABEL_12:
      *v18 = v13;
      v18[1] = v15;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  float result;
  int v9;
  int v10;
  int v11;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(float *)a3 = *a4;
    *(_DWORD *)a4 = v9;
    result = *(float *)(a3 + 4);
    *(float *)(a3 + 4) = a4[1];
    a4[1] = result;
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v10;
      result = *(float *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(float *)(a3 + 4) = result;
      v11 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v11;
        result = *(float *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  float result;
  float v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *a4 = *a5;
    *a5 = v11;
    result = a4[1];
    a4[1] = a5[1];
    a5[1] = result;
    v12 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(float *)a3 = *a4;
      *(_DWORD *)a4 = v12;
      result = *(float *)(a3 + 4);
      *(float *)(a3 + 4) = a4[1];
      a4[1] = result;
      v13 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v13;
        result = *(float *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(float *)(a3 + 4) = result;
        v14 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v14;
          result = *(float *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(float *)(a2 + 4) = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,std::pair<int,float> *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char *v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          *(_DWORD *)v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 8;
      do
      {
        v19 = *(_DWORD *)a1;
        v20 = *((_DWORD *)a1 + 1);
        v21 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v19;
          *((_DWORD *)v21 + 1) = v20;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)v18 = v19;
          *((_DWORD *)v18 + 1) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v21 + 8), a4, (v21 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (_DWORD *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[2];
        if (*v8 <= v11)
          v10 = v8[2];
        if (*v8 < v11)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        v13 = a4[1];
        do
        {
          v14 = a4;
          a4 = v8;
          *v14 = v10;
          v14[1] = v8[1];
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (_DWORD *)(result + 8 * v15);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v15;
          }
          else
          {
            v10 = *v8;
            v16 = v8[2];
            if (*v8 <= v16)
              v10 = v8[2];
            if (*v8 >= v16)
              v7 = v15;
            else
              v8 += 2;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[2 * v3 + 2];
    v7 = (2 * v3) | 1;
    v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
      v8 = *v6;
      v3 = v7;
    }
    else
    {
      v8 = *v6;
      v9 = v6[2];
      if (*v6 <= v9)
        v8 = v6[2];
      if (*v6 >= v9)
        v3 = v7;
      else
        v6 += 2;
    }
    *a1 = v8;
    a1[1] = v6[1];
    a1 = v6;
  }
  while (v3 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_DWORD *)(result + 8 * (v4 >> 1));
    v7 = (_DWORD *)(a2 - 8);
    v8 = *(_DWORD *)(a2 - 8);
    v9 = *v6;
    if (*v6 < v8)
    {
      v10 = *(_DWORD *)(a2 - 4);
      do
      {
        v11 = v7;
        v7 = v6;
        *v11 = v9;
        v11[1] = v6[1];
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_DWORD *)(result + 8 * v5);
        v9 = *v6;
      }
      while (*v6 < v8);
      *v7 = v8;
      v7[1] = v10;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void TClitics::TClitics(TClitics *this, TLexicon *a2, TTokenizerParamManager *a3)
{
  char *v6;
  const TLocaleInfo **v7;
  __int32 *v8;

  *(_QWORD *)this = &unk_1E5D173C8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E5D173C8;
  v6 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v7 = (const TLocaleInfo **)((char *)this + 72);
  TRegExp::TRegExp((_QWORD *)this + 9, (uint64_t)a2 + 224);
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 1) = 2;
  (*(void (**)(TClitics *))(*(_QWORD *)this + 16))(this);
  *((_QWORD *)this + 3) = 6;
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 16))(v6);
  v8 = (__int32 *)TStringParam::get((TTokenizerParamManager *)((char *)a3 + 7984));
  if (v8)
  {
    if (*v8)
    {
      TRegExp::add(v7, v8, 0);
      TRegExp::doneAdding((TRegExp *)v7);
    }
  }
}

void sub_1AD83E688(_Unwind_Exception *a1)
{
  uint64_t v1;
  TRegExp *v2;
  void **v3;

  TRegExp::~TRegExp(v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

char *TStringParam::get(TStringParam *this)
{
  uint64_t ActiveConfigHandle;
  char *v3;
  char *result;

  ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  v3 = (char *)this + 24 * TParam::getValidConfig(this, ActiveConfigHandle);
  result = v3 + 152;
  if (v3[175] < 0)
    return *(char **)result;
  return result;
}

void TClitics::~TClitics(void **this)
{
  TRegExp::~TRegExp((TRegExp *)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

BOOL TClitics::isValidRoot(TClitics *this, const TWord *a2)
{
  unsigned int *v3;
  _BOOL8 v4;
  unsigned int *v6;
  __int128 v7;
  _BYTE v8[1024];
  char v9;
  int v10;

  if (!*((_QWORD *)this + 11))
    return 0;
  v6 = (unsigned int *)v8;
  v7 = xmmword_1AE1418C0;
  v9 = 1;
  TWord::getCategoryTag((uint64_t)a2, &v6);
  if (*((_QWORD *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      v3 = v6;
      --*((_QWORD *)&v7 + 1);
    }
    else
    {
      v3 = v6;
      if ((_QWORD)v7)
        v6[(_QWORD)v7 - 1] = 0;
    }
  }
  else
  {
    v3 = v6;
    v6[*((_QWORD *)&v7 + 1)] = 0;
  }
  v4 = TRegExp::match((_QWORD *)this + 9, v3, 0);
  if (v9 && v6 != (unsigned int *)v8 && v6)
    MEMORY[0x1AF44D160]();
  return v4;
}

void sub_1AD83E848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    TClitics::isValidRoot((uint64_t *)va, v2);
  _Unwind_Resume(a1);
}

void TClitics::addWords(TClitics *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  TVertex *v5;
  uint64_t Segment;
  uint64_t v8;
  uint64_t OutEdge;
  uint64_t Vertex;
  BOOL v11;
  size_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t ActiveConfigHandle;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ValidConfig;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  _QWORD *v27;
  __int32 *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  __int32 *v52;
  uint64_t v53;
  uint64_t HeadClone;
  int v55;
  TAllocator *v56;
  int *v57;
  _QWORD *v58;
  uint64_t v59;
  const __int32 *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Score;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  TVertex *v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  TGraph *v94;
  TClitics *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  __int128 v101;
  _BYTE v102[785];
  char v103;
  int *v104;
  _BYTE v105[792];
  char v106;
  int *v107;
  __int128 v108;
  _BYTE v109[1024];
  char v110;
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v5 = (TVertex *)a2;
  Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    v8 = Segment;
    if (*(_DWORD *)(Segment + 24) == 1)
    {
      v89 = wcslen(*(const __int32 **)Segment);
      if (v89 >= 4)
      {
        OutEdge = TVertex::getOutEdge((uint64_t)v5);
        Vertex = TGraph::getVertex(a3, *(const char **)(v8 + 8));
        if (Vertex)
          v11 = OutEdge == 0;
        else
          v11 = 1;
        if (!v11)
        {
LABEL_112:
          if (*(_QWORD *)(OutEdge + 24) == Vertex && (*(_BYTE *)(OutEdge + 64) & 0x35) == 0)
            return;
          while (1)
          {
            OutEdge = *(_QWORD *)(OutEdge + 8);
            if (!OutEdge)
              break;
            if (!*(_BYTE *)(OutEdge + 32))
              goto LABEL_112;
          }
        }
        v12 = *((_QWORD *)this + 3);
        if (v12 + 2 > v89)
          v12 = v89 - 2;
        v116 = 0;
        v117 = 6;
        v114 = 0;
        v115 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v90 = *((_QWORD *)this + 1);
        v88 = v12 + 1;
        if (v90 < v12 + 1)
        {
          v92 = v8;
          v94 = a3;
          v95 = this;
          v87 = v5;
          while (1)
          {
            std::vector<TLexiconMatch>::resize((uint64_t)&v114, 0);
            v13 = *(int **)v92;
            v15 = (_QWORD *)*((_QWORD *)this + 4);
            v14 = *((_QWORD *)this + 5);
            ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v14 + 16456));
            v17 = *(int *)(v14 + 4 * TParam::getValidConfig((TParam *)(v14 + 16456), ActiveConfigHandle) + 16616);
            v18 = *((_QWORD *)this + 5);
            v19 = TParam::getActiveConfigHandle((TParam *)(v18 + 16104));
            ValidConfig = TParam::getValidConfig((TParam *)(v18 + 16104), v19);
            TLexicon::findHeadClonesCollated(v15, (unsigned int *)&v13[v89 - v90], &v117, 1uLL, v17, *(int *)(v18 + 4 * ValidConfig + 16264), (void **)&v114);
            if (v114 == v115)
              goto LABEL_107;
            v107 = (int *)v109;
            v108 = xmmword_1AE1418C0;
            v110 = 1;
            v21 = *(int **)v92;
            TBuffer<wchar_t>::resize((uint64_t)&v107, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v107, 0, v21, v89 - v90);
            v22 = *((_QWORD *)this + 5);
            v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 7736));
            if (!*(_BYTE *)(v22 + TParam::getValidConfig((TParam *)(v22 + 7736), v23) + 7888))
              goto LABEL_24;
            if ((respellRoot((uint64_t)&v107, *(int **)v92) & 1) == 0)
              goto LABEL_23;
            v24 = *((_QWORD *)this + 4);
            if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(v104) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                v25 = v107;
                --*((_QWORD *)&v108 + 1);
              }
              else
              {
                v25 = v107;
                if ((_QWORD)v108)
                  v107[(_QWORD)v108 - 1] = 0;
              }
            }
            else
            {
              v25 = v107;
              v107[*((_QWORD *)&v108 + 1)] = 0;
            }
            if (TLexicon::checkName(v24, v25, 1, 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_23:
              v26 = 7;
            }
            else
            {
LABEL_24:
              std::vector<TLexiconMatch>::resize((uint64_t)&v111, 0);
              v27 = (_QWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
              {
                if (v110)
                {
                  LODWORD(v104) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                  v28 = v107;
                  --*((_QWORD *)&v108 + 1);
                }
                else
                {
                  v28 = v107;
                  if ((_QWORD)v108)
                    v107[(_QWORD)v108 - 1] = 0;
                }
              }
              else
              {
                v28 = v107;
                v107[*((_QWORD *)&v108 + 1)] = 0;
              }
              v29 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 5) + 10736));
              v30 = *((_QWORD *)this + 5);
              v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 16456));
              v32 = *(int *)(v30 + 4 * TParam::getValidConfig((TParam *)(v30 + 16456), v31) + 16616);
              v33 = *((_QWORD *)this + 5);
              v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 16104));
              v35 = TParam::getValidConfig((TParam *)(v33 + 16104), v34);
              TLexicon::findHeadClonesCollated(v27, v28, v29, v32, *(int *)(v33 + 4 * v35 + 16264), (void **)&v111);
              v36 = *((_QWORD *)this + 5);
              v37 = TParam::getActiveConfigHandle((TParam *)(v36 + 12856));
              if (!*(_BYTE *)(v36 + TParam::getValidConfig((TParam *)(v36 + 12856), v37) + 13008))
              {
                v70 = v111;
                if (v112 != v111)
                {
                  v71 = 0;
                  v72 = 0;
                  v73 = 0;
                  do
                  {
                    if (TClitics::isValidRoot(this, *(const TWord **)&v70[v71]))
                    {
                      if (!v73)
                        v73 = TGraph::addVertex(a3, 0);
                      v74 = *(_QWORD *)&v111[v71];
                      LODWORD(v104) = 1;
                      *(_QWORD *)v105 = v74;
                      *(_OWORD *)&v105[8] = *(_OWORD *)&v111[v71 + 16];
                      TGraph::addEdge(a3, (uint64_t)v5, v73, (uint64_t)&v104);
                    }
                    ++v72;
                    v70 = v111;
                    v71 += 32;
                  }
                  while (v72 < (v112 - v111) >> 5);
                  if (v73)
                  {
                    v75 = TGraph::addVertex(a3, *(char **)(v92 + 8));
                    v76 = v114;
                    if (v115 != v114)
                    {
                      v77 = v75;
                      v78 = 0;
                      v79 = 0;
                      do
                      {
                        v80 = &v76[v78];
                        v81 = *(_QWORD *)v80;
                        LODWORD(v104) = 1;
                        *(_QWORD *)v105 = v81;
                        *(_OWORD *)&v105[8] = *((_OWORD *)v80 + 1);
                        TGraph::addEdge(a3, (uint64_t)v73, v77, (uint64_t)&v104);
                        ++v79;
                        v76 = v114;
                        v78 += 32;
                      }
                      while (v79 < (v115 - v114) >> 5);
                    }
                  }
                }
                goto LABEL_100;
              }
              v38 = *((_QWORD *)this + 5);
              v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 12608));
              if (*(_BYTE *)(v38 + TParam::getValidConfig((TParam *)(v38 + 12608), v39) + 12760))
              {
                v104 = (int *)&v105[16];
                *(_OWORD *)v105 = xmmword_1AE1418C0;
                v106 = 1;
                v100 = v102;
                v101 = xmmword_1AE1418C0;
                v103 = 1;
                v40 = v111;
                if (v112 == v111)
                  goto LABEL_78;
                v41 = 0;
                do
                {
                  v91 = v41;
                  v42 = 32 * v41;
                  if (TClitics::isValidRoot(this, *(const TWord **)&v40[32 * v41]))
                  {
                    TWord::getWrittenForm(*(__int32 ***)&v111[v42], (uint64_t)&v107);
                    v43 = v114;
                    if (v115 != v114)
                    {
                      v44 = 0;
                      v45 = 0;
                      do
                      {
                        TWord::getWrittenForm(*(__int32 ***)&v43[v44], (uint64_t)&v100);
                        TBuffer<wchar_t>::operator=((uint64_t)&v104, (uint64_t)&v107);
                        TBuffer<wchar_t>::operator+=((uint64_t)&v104, (uint64_t)&v100);
                        v46 = *((_QWORD *)this + 5);
                        v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 7736));
                        if (!*(_BYTE *)(v46 + TParam::getValidConfig((TParam *)(v46 + 7736), v47) + 7888))
                          goto LABEL_45;
                        if (*((_QWORD *)&v108 + 1) >= (unint64_t)v108)
                        {
                          if (v110)
                          {
                            v96 = 0;
                            TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), &v96, 1uLL);
                            v48 = v107;
                            --*((_QWORD *)&v108 + 1);
                          }
                          else
                          {
                            v48 = v107;
                            if ((_QWORD)v108)
                              v107[(_QWORD)v108 - 1] = 0;
                          }
                        }
                        else
                        {
                          v48 = v107;
                          v107[*((_QWORD *)&v108 + 1)] = 0;
                        }
                        if ((respellRoot((uint64_t)&v104, v48) & 1) != 0)
                        {
LABEL_45:
                          v49 = *((_QWORD *)this + 4);
                          if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                          {
                            if (v106)
                            {
                              v96 = 0;
                              TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                              v50 = v104;
                              --*(_QWORD *)&v105[8];
                            }
                            else
                            {
                              v50 = v104;
                              if (*(_QWORD *)v105)
                                v104[*(_QWORD *)v105 - 1] = 0;
                            }
                          }
                          else
                          {
                            v50 = v104;
                            v104[*(_QWORD *)&v105[8]] = 0;
                          }
                          if (!TLexicon::checkName(v49, v50, 0, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            v51 = *((_QWORD *)this + 4);
                            if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                            {
                              v53 = v92;
                              if (v106)
                              {
                                v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                v52 = v104;
                                --*(_QWORD *)&v105[8];
                              }
                              else
                              {
                                v52 = v104;
                                if (*(_QWORD *)v105)
                                  v104[*(_QWORD *)v105 - 1] = 0;
                              }
                            }
                            else
                            {
                              v52 = v104;
                              v104[*(_QWORD *)&v105[8]] = 0;
                              v53 = v92;
                            }
                            HeadClone = TLexicon::findHeadClone(v51, v52);
                            if (HeadClone)
                            {
                              v55 = 1;
                            }
                            else
                            {
                              v56 = (TAllocator *)*((_QWORD *)this + 4);
                              if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                              {
                                if (v106)
                                {
                                  v96 = 0;
                                  TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                  v57 = v104;
                                  --*(_QWORD *)&v105[8];
                                }
                                else
                                {
                                  v57 = v104;
                                  if (*(_QWORD *)v105)
                                    v104[*(_QWORD *)v105 - 1] = 0;
                                }
                              }
                              else
                              {
                                v57 = v104;
                                v104[*(_QWORD *)&v105[8]] = 0;
                              }
                              HeadClone = (uint64_t)TLexicon::addTempWord(v56, v57, 0, 0, 0);
                              v55 = 4;
                            }
                            v93 = v55;
                            v58 = TGraph::addVertex(v94, *(char **)(v53 + 8));
                            v59 = *((_QWORD *)this + 4);
                            v60 = *(const __int32 **)v53;
                            if (*(_QWORD *)&v105[8] >= *(_QWORD *)v105)
                            {
                              if (v106)
                              {
                                v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                v61 = (unsigned int *)v104;
                                --*(_QWORD *)&v105[8];
                              }
                              else
                              {
                                v61 = (unsigned int *)v104;
                                if (*(_QWORD *)v105)
                                  v104[*(_QWORD *)v105 - 1] = 0;
                              }
                            }
                            else
                            {
                              v61 = (unsigned int *)v104;
                              v104[*(_QWORD *)&v105[8]] = 0;
                            }
                            v62 = *((_QWORD *)v95 + 5);
                            v63 = TParam::getActiveConfigHandle((TParam *)(v62 + 16456));
                            v64 = *(int *)(v62 + 4 * TParam::getValidConfig((TParam *)(v62 + 16456), v63) + 16616);
                            v65 = *((_QWORD *)v95 + 5);
                            v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 16104));
                            v67 = TParam::getValidConfig((TParam *)(v65 + 16104), v66);
                            Score = TLexicon::makeScore(v59, v60, v61, v64, *(int *)(v65 + 4 * v67 + 16264));
                            v96 = v93;
                            v97 = HeadClone;
                            v98 = Score;
                            v99 = v69;
                            TGraph::addEdge(v94, *((_QWORD *)v94 + 8), v58, (uint64_t)&v96);
                            this = v95;
                          }
                        }
                        ++v45;
                        v43 = v114;
                        v44 += 32;
                      }
                      while (v45 < (v115 - v114) >> 5);
                    }
                  }
                  v41 = v91 + 1;
                  v40 = v111;
                }
                while (v91 + 1 < (unint64_t)((v112 - v111) >> 5));
                a3 = v94;
                v5 = v87;
                if (v103)
                {
LABEL_78:
                  if (v100 != v102 && v100)
                    MEMORY[0x1AF44D160]();
                }
                if (v106 && v104 != (int *)&v105[16] && v104)
                  MEMORY[0x1AF44D160]();
LABEL_100:
                v26 = 0;
                goto LABEL_101;
              }
              v82 = v111;
              if (v112 == v111)
                goto LABEL_100;
              v83 = 0;
              v84 = 0;
              while (!TClitics::isValidRoot(this, *(const TWord **)&v82[v83]))
              {
                ++v84;
                v82 = v111;
                v83 += 32;
                if (v84 >= (v112 - v111) >> 5)
                  goto LABEL_100;
              }
              v85 = TLexicon::findHeadClone(*((_QWORD *)this + 4), *(__int32 **)v92);
              if (!v85)
                v85 = (uint64_t)TLexicon::addTempWord(*((TAllocator **)this + 4), *(int **)v92, 0, 0, 0);
              v86 = TGraph::addVertex(a3, *(char **)(v92 + 8));
              LODWORD(v104) = 4;
              *(_QWORD *)v105 = v85;
              *(_QWORD *)&v105[8] = 0;
              v105[16] = 0;
              TGraph::addEdge(a3, *((_QWORD *)a3 + 8), v86, (uint64_t)&v104);
              v26 = 5;
            }
LABEL_101:
            if (v110 && v107 != (int *)v109 && v107)
              MEMORY[0x1AF44D160]();
            if (v26 != 7 && v26)
            {
LABEL_117:
              if (v111)
              {
                v112 = v111;
                operator delete(v111);
              }
              break;
            }
LABEL_107:
            if (++v90 >= v88)
              goto LABEL_117;
          }
        }
        if (v114)
        {
          v115 = v114;
          operator delete(v114);
        }
      }
    }
  }
}

void sub_1AD83F344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v18;
  void *v19;

  if (LOBYTE(STACK[0xCF8]))
  {
    if (STACK[0x8E0] != a15 && STACK[0x8E0] != 0)
      MEMORY[0x1AF44D160]();
  }
  v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(_QWORD *)(v15 - 136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(_QWORD *)(v15 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<TLexiconMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<TLexiconMatch>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TBuffer<wchar_t>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
  {
    if (*(_BYTE *)(a2 + 1048))
    {
      v8 = 0;
      TBuffer<wchar_t>::insert(a2, v5, &v8, 1uLL);
      v5 = *(_QWORD *)(a2 + 16) - 1;
      *(_QWORD *)(a2 + 16) = v5;
      v6 = *(int **)a2;
    }
    else
    {
      v6 = *(int **)a2;
      if (v4)
        v6[v4 - 1] = 0;
    }
  }
  else
  {
    v6 = *(int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = 0;
  }
  TBuffer<wchar_t>::resize(a1, 0);
  TBuffer<wchar_t>::insert(a1, 0, v6, v5);
  return a1;
}

uint64_t TBuffer<wchar_t>::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v8;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= v5)
  {
    if (*(_BYTE *)(a2 + 1048))
    {
      v8 = 0;
      TBuffer<wchar_t>::insert(a2, v4, &v8, 1uLL);
      v4 = *(_QWORD *)(a2 + 16) - 1;
      *(_QWORD *)(a2 + 16) = v4;
      v6 = *(int **)a2;
    }
    else
    {
      v6 = *(int **)a2;
      if (v5)
        v6[v5 - 1] = 0;
    }
  }
  else
  {
    v6 = *(int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = 0;
  }
  TBuffer<wchar_t>::insert(a1, *(_QWORD *)(a1 + 16), v6, v4);
  return a1;
}

void std::vector<TLexiconMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = &v7[4 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 24) = 0;
        v7[2] = 0;
        v7 += 4;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v17 = &v16[32 * a2];
    v18 = 32 * a2;
    v19 = v16;
    do
    {
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      v19[24] = 0;
      *((_QWORD *)v19 + 2) = 0;
      v19 += 32;
      v18 -= 32;
    }
    while (v18);
    v20 = &v13[32 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        v16 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

uint64_t quasar::languageIdForLocale(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v5;
  int v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  _QWORD v86[3];
  int v87;
  _QWORD v88[3];
  int v89;
  _QWORD v90[3];
  int v91;
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[3];
  int v99;
  _QWORD v100[3];
  int v101;
  _QWORD v102[3];
  int v103;
  _QWORD v104[3];
  int v105;
  _QWORD v106[3];
  int v107;
  _QWORD v108[3];
  int v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[3];
  int v113;
  _QWORD v114[3];
  int v115;
  _QWORD v116[3];
  int v117;
  _QWORD v118[3];
  int v119;
  _QWORD v120[3];
  int v121;
  _QWORD v122[3];
  int v123;
  _QWORD v124[3];
  int v125;
  _QWORD v126[3];
  int v127;
  _QWORD v128[3];
  int v129;
  _QWORD v130[3];
  int v131;
  _QWORD v132[3];
  int v133;
  _QWORD v134[3];
  int v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  _QWORD v142[3];
  int v143;
  _QWORD v144[3];
  int v145;
  _QWORD v146[3];
  int v147;
  _QWORD v148[3];
  int v149;
  _QWORD v150[3];
  int v151;
  _QWORD v152[3];
  int v153;
  _QWORD v154[3];
  int v155;
  _QWORD v156[3];
  int v157;
  _QWORD v158[3];
  int v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  {
    v11 = a1;
    v9 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v12, "ar_AE");
    DWORD2(v13) = 2;
    std::string::basic_string[abi:ne180100]<0>(&v14, "bg_BG");
    DWORD2(v15) = 3;
    std::string::basic_string[abi:ne180100]<0>(&v16, "zh_CN");
    DWORD2(v17) = 4;
    std::string::basic_string[abi:ne180100]<0>(&v18, "zh_TW");
    DWORD2(v19) = 5;
    std::string::basic_string[abi:ne180100]<0>(&v20, "hr_HR");
    DWORD2(v21) = 6;
    std::string::basic_string[abi:ne180100]<0>(&v22, "cs_CZ");
    DWORD2(v23) = 7;
    std::string::basic_string[abi:ne180100]<0>(&v24, "da_DK");
    DWORD2(v25) = 8;
    std::string::basic_string[abi:ne180100]<0>(&v26, "nl_NL");
    DWORD2(v27) = 9;
    std::string::basic_string[abi:ne180100]<0>(&v28, "nl_BE");
    v29 = 9;
    std::string::basic_string[abi:ne180100]<0>(v30, "en_AE");
    v31 = 10;
    std::string::basic_string[abi:ne180100]<0>(v32, "en_AU");
    v33 = 10;
    std::string::basic_string[abi:ne180100]<0>(v34, "en_GB");
    v35 = 10;
    std::string::basic_string[abi:ne180100]<0>(v36, "en_ID");
    v37 = 10;
    std::string::basic_string[abi:ne180100]<0>(v38, "en_IE");
    v39 = 10;
    std::string::basic_string[abi:ne180100]<0>(v40, "en_IN");
    v41 = 10;
    std::string::basic_string[abi:ne180100]<0>(v42, "en_MY");
    v43 = 10;
    std::string::basic_string[abi:ne180100]<0>(v44, "en_PH");
    v45 = 10;
    std::string::basic_string[abi:ne180100]<0>(v46, "en_SA");
    v47 = 10;
    std::string::basic_string[abi:ne180100]<0>(v48, "en_SG");
    v49 = 10;
    std::string::basic_string[abi:ne180100]<0>(v50, "en_US");
    v51 = 10;
    std::string::basic_string[abi:ne180100]<0>(v52, "en_ZA");
    v53 = 10;
    std::string::basic_string[abi:ne180100]<0>(v54, "fi_FI");
    v55 = 11;
    std::string::basic_string[abi:ne180100]<0>(v56, "fr_BE");
    v57 = 12;
    std::string::basic_string[abi:ne180100]<0>(v58, "fr_CA");
    v59 = 12;
    std::string::basic_string[abi:ne180100]<0>(v60, "fr_FR");
    v61 = 12;
    std::string::basic_string[abi:ne180100]<0>(v62, "de_AT");
    v63 = 13;
    std::string::basic_string[abi:ne180100]<0>(v64, "de_CH");
    v65 = 13;
    std::string::basic_string[abi:ne180100]<0>(v66, "de_DE");
    v67 = 13;
    std::string::basic_string[abi:ne180100]<0>(v68, "el_GR");
    v69 = 14;
    std::string::basic_string[abi:ne180100]<0>(v70, "he_IL");
    v71 = 15;
    std::string::basic_string[abi:ne180100]<0>(v72, "hi_IN");
    v73 = 16;
    std::string::basic_string[abi:ne180100]<0>(v74, "hu_HU");
    v75 = 17;
    std::string::basic_string[abi:ne180100]<0>(v76, "is_IS");
    v77 = 18;
    std::string::basic_string[abi:ne180100]<0>(v78, "it_IT");
    v79 = 19;
    std::string::basic_string[abi:ne180100]<0>(v80, "ja_JP");
    v81 = 20;
    std::string::basic_string[abi:ne180100]<0>(v82, "ko_KR");
    v83 = 21;
    std::string::basic_string[abi:ne180100]<0>(v84, "mr_IN");
    v85 = 22;
    std::string::basic_string[abi:ne180100]<0>(v86, "nb_NO");
    v87 = 23;
    std::string::basic_string[abi:ne180100]<0>(v88, "pl_PL");
    v89 = 24;
    std::string::basic_string[abi:ne180100]<0>(v90, "pt_BR");
    v91 = 25;
    std::string::basic_string[abi:ne180100]<0>(v92, "pt_PT");
    v93 = 25;
    std::string::basic_string[abi:ne180100]<0>(v94, "ro_RO");
    v95 = 26;
    std::string::basic_string[abi:ne180100]<0>(v96, "ru_RU");
    v97 = 27;
    std::string::basic_string[abi:ne180100]<0>(v98, "sk_SK");
    v99 = 28;
    std::string::basic_string[abi:ne180100]<0>(v100, "es_CL");
    v101 = 29;
    std::string::basic_string[abi:ne180100]<0>(v102, "es_CO");
    v103 = 29;
    std::string::basic_string[abi:ne180100]<0>(v104, "es_ES");
    v105 = 29;
    std::string::basic_string[abi:ne180100]<0>(v106, "es_US");
    v107 = 29;
    std::string::basic_string[abi:ne180100]<0>(v108, "sv_SE");
    v109 = 30;
    std::string::basic_string[abi:ne180100]<0>(v110, "th_TH");
    v111 = 31;
    std::string::basic_string[abi:ne180100]<0>(v112, "tr_TR");
    v113 = 32;
    std::string::basic_string[abi:ne180100]<0>(v114, "uk_UA");
    v115 = 33;
    std::string::basic_string[abi:ne180100]<0>(v116, "ur_PK");
    v117 = 34;
    std::string::basic_string[abi:ne180100]<0>(v118, "hy_AM");
    v119 = 35;
    std::string::basic_string[abi:ne180100]<0>(v120, "bn_IN");
    v121 = 36;
    std::string::basic_string[abi:ne180100]<0>(v122, "pa_IN");
    v123 = 37;
    std::string::basic_string[abi:ne180100]<0>(v124, "gu_IN");
    v125 = 38;
    std::string::basic_string[abi:ne180100]<0>(v126, "or_IN");
    v127 = 39;
    std::string::basic_string[abi:ne180100]<0>(v128, "ta_IN");
    v129 = 40;
    std::string::basic_string[abi:ne180100]<0>(v130, "ta_LK");
    v131 = 40;
    std::string::basic_string[abi:ne180100]<0>(v132, "te_IN");
    v133 = 41;
    std::string::basic_string[abi:ne180100]<0>(v134, "kn_IN");
    v135 = 42;
    std::string::basic_string[abi:ne180100]<0>(v136, "ml_IN");
    v137 = 43;
    std::string::basic_string[abi:ne180100]<0>(v138, "si_LK");
    v139 = 44;
    std::string::basic_string[abi:ne180100]<0>(v140, "lo_LA");
    v141 = 45;
    std::string::basic_string[abi:ne180100]<0>(v142, "bo_CN");
    v143 = 46;
    std::string::basic_string[abi:ne180100]<0>(v144, "bo_IN");
    v145 = 46;
    std::string::basic_string[abi:ne180100]<0>(v146, "my_MM");
    v147 = 47;
    std::string::basic_string[abi:ne180100]<0>(v148, "ka_GE");
    v149 = 48;
    std::string::basic_string[abi:ne180100]<0>(v150, "am_ET");
    v151 = 49;
    std::string::basic_string[abi:ne180100]<0>(v152, "chr_US");
    v153 = 50;
    std::string::basic_string[abi:ne180100]<0>(v154, "iu_CA");
    v155 = 51;
    std::string::basic_string[abi:ne180100]<0>(v156, "km_KH");
    v157 = 52;
    std::string::basic_string[abi:ne180100]<0>(v158, "mn_CN");
    v159 = 53;
    std::map<std::string,NLLanguageID>::map[abi:ne180100](v9, (const void **)&v12, 74);
    v10 = 2368;
    do
    {
      if (*((char *)&v12 + v10 - 9) < 0)
        operator delete(*(void **)((char *)&v12 + v10 - 32));
      v10 -= 32;
    }
    while (v10);
    quasar::languageIdForLocale(std::string const&)::idMap = v9;
    a1 = v11;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
      return 0;
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    return 0;
  }
  v3 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(quasar::languageIdForLocale(std::string const&)::idMap, (const void **)a1);
  if (quasar::languageIdForLocale(std::string const&)::idMap + 8 != v3)
    return *(unsigned int *)(v3 + 56);
  if (quasar::gLogLevel >= 2)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unknown locale specified in configuration: ", 43);
    v6 = *(char *)(a1 + 23);
    if (v6 >= 0)
      v7 = (const void *)a1;
    else
      v7 = *(const void **)a1;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 23);
    else
      v8 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v12);
  }
  return 0;
}

void sub_1AD8400F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 2368;
  while (1)
  {
    if (*(char *)(v2 + v4 - 9) < 0)
      operator delete(*(void **)(v2 + v4 - 32));
    v4 -= 32;
    if (!v4)
    {
      MEMORY[0x1AF44D190](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,NLLanguageID>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1AD84032C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::NotchDetector2::NotchDetector2(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, int a6, float a7, float a8, float a9, float a10)
{
  uint64_t *v20;
  uint64_t *v21;
  float v22;
  int v23;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  char *v36;
  uint64x2_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char **v43;
  int v44;
  void *__p[3];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x43FA000043340000;
  *(_OWORD *)(a1 + 32) = xmmword_1AE143200;
  *(_QWORD *)(a1 + 56) = 0;
  v20 = (uint64_t *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = 1182400512;
  *(_OWORD *)(a1 + 72) = 0u;
  v21 = (uint64_t *)(a1 + 72);
  *(_BYTE *)(a1 + 64) = 1;
  v43 = (char **)(a1 + 96);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 120), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 144), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(float *)(a1 + 168) = a10;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = a6;
  *(float *)(a1 + 48) = a9;
  v22 = log2f((float)a3);
  v23 = (int)ldexpf(1.0, (int)v22);
  if (v23 >= 0)
    v24 = v23;
  else
    v24 = v23 + 1;
  v25 = v24 >> 1;
  *(_DWORD *)(a1 + 32) = v23;
  *(_DWORD *)(a1 + 36) = v25;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = v25 + 1;
  v26 = *(float *)(a1 + 48) * 0.5;
  v27 = (float)(v25 + 1);
  v28 = floorf((float)(a8 / v26) * v27);
  v29 = floorf((float)(a7 / v26) * v27);
  *(float *)(a1 + 24) = v28;
  *(float *)(a1 + 28) = v29;
  if (a6)
    printf("notchWidth %d, antiNotch %d, mR %d, mK %d, mN %d \n", (int)v28, (int)v29, v25, v25 + 1, a4);
  v30 = (a2[1] - *a2) >> 2;
  LODWORD(__p[0]) = 0;
  std::vector<float>::assign((char **)a1, v30, __p);
  v32 = *a2;
  v31 = a2[1];
  if (v31 != *a2)
  {
    v33 = 0;
    do
    {
      v34 = floorf((float)(*(float *)(v32 + 4 * v33) / (float)(*(float *)(a1 + 48) * 0.5)) * (float)*(int *)(a1 + 44))
          + -1.0;
      *(float *)(*(_QWORD *)a1 + 4 * v33) = v34;
      if (a6)
      {
        printf("notchVec[%d]=%d \n", v33, (int)v34);
        v32 = *a2;
        v31 = a2[1];
      }
      ++v33;
    }
    while (v33 < (v31 - v32) >> 2);
  }
  v35 = *(int *)(a1 + 32);
  LODWORD(__p[0]) = 0;
  v36 = std::vector<float>::assign(v43, v35, __p);
  quasar::NotchDetector2::magicWindow(v37, (uint64_t)v36, v43, *(_DWORD *)(a1 + 32));
  v38 = *(int *)(a1 + 40);
  v39 = 2 * *(int *)(a1 + 32);
  v44 = 0;
  std::vector<float>::vector(__p, v39, &v44);
  std::vector<std::vector<float>>::assign(v21, v38, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v40 = operator new();
  kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v40, *(unsigned int *)(a1 + 32));
  std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100](v20, v40);
  LODWORD(__p[0]) = 0;
  std::vector<int>::assign((std::vector<int> *)(a1 + 176), 3uLL, (std::vector<int>::const_reference)__p);
  v41 = ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1) + ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  LODWORD(__p[0]) = 0;
  std::vector<float>::assign((char **)(a1 + 200), v41, __p);
  return a1;
}

void sub_1AD840648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  void **v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v25 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v19 + 208) = v25;
    operator delete(v25);
  }
  v26 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v19 + 184) = v26;
    operator delete(v26);
  }
  v27 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v19 + 152) = v27;
    operator delete(v27);
  }
  v28 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 128) = v28;
    operator delete(v28);
  }
  v29 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v19 + 104) = v29;
    operator delete(v29);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100](v20, 0);
  v30 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1AD840728()
{
  JUMPOUT(0x1AD8406E4);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64x2_t quasar::NotchDetector2::magicWindow(uint64x2_t result, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64x2_t v5;
  int32x4_t v6;
  _DWORD *v7;
  int8x16_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int16x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  float32x4_t v40;
  float64x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int64x2_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;

  if (a4 >= 1)
  {
    *(float *)result.i32 = (float)a4;
    v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a4 - 1);
    v4 = (a4 + 3) & 0x1FFFFFFFCLL;
    v5 = (uint64x2_t)xmmword_1AE143210;
    result = (uint64x2_t)xmmword_1AE140A90;
    v6 = (int32x4_t)xmmword_1AE143220;
    v7 = (_DWORD *)(*a3 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    v42 = _Q4;
    v39 = vdupq_n_s64(4uLL);
    v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      v52 = (int64x2_t)result;
      v53 = (int64x2_t)v5;
      v15 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v5));
      v51 = v6;
      v16 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v6), v43), v44);
      v17 = (int8x16_t)vcgtq_f32(v54, v16);
      v18.i64[0] = 0x4000000040000000;
      v18.i64[1] = 0x4000000040000000;
      v19 = (int8x16_t)vcgtq_f32(v18, v16);
      v20 = (int8x16_t)vcgtq_f32(v42, v16);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      v50 = vandq_s8(v15, v17);
      v22 = vbicq_s8(v15, v17);
      v23 = (int32x4_t)vandq_s8(v22, v19);
      v24 = vbicq_s8(v22, v19);
      v48 = (int8x16_t)v23;
      v49 = (int32x4_t)vandq_s8(v24, v20);
      v25 = (int32x4_t)vbicq_s8(v24, v20);
      v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vsubq_f32(v43, v16), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v16, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)vsubq_f32(v18, v16), (int8x16_t)v16)));
      v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      v47 = (int8x16_t)v25;
      v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      v56 = v27;
      v28 = cosf(v58.f32[2]);
      v29 = v56;
      v29.f32[2] = v28;
      v57 = v29;
      v30 = cosf(v58.f32[3]);
      v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      v34 = vmlaq_f32(v32, v33, v31);
      v35 = vmulq_f32(v34, v34);
      v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if ((v37.i8[0] & 1) != 0)
        *(v7 - 2) = v36.i32[0];
      if ((v37.i8[2] & 1) != 0)
        *(v7 - 1) = v36.i32[1];
      if ((v37.i8[4] & 1) != 0)
        *v7 = v36.i32[2];
      if ((v37.i8[6] & 1) != 0)
        v7[1] = v36.i32[3];
      v5 = (uint64x2_t)vaddq_s64(v53, v39);
      result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      v6 = vaddq_s32(v51, v38);
      v7 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

void std::vector<std::vector<float>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_1AD840C84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value;
  int *begin;
  std::vector<int>::size_type v8;
  unint64_t v9;
  std::vector<int>::pointer v10;
  int *v11;
  std::vector<int>::size_type v12;
  std::vector<int>::pointer end;
  std::vector<int>::size_type v14;
  std::vector<int>::size_type v15;
  int *v16;
  int *v17;
  std::vector<int>::size_type v18;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    end = this->__end_;
    v14 = end - begin;
    if (v14 >= __n)
      v15 = __n;
    else
      v15 = end - begin;
    if (v15)
    {
      v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v17 = &end[__n - v14];
      v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = value >> 1;
    if (value >> 1 <= __n)
      v8 = __n;
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    v10 = this->__end_;
    v11 = &v10[__n];
    v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void quasar::NotchDetector2::computePsd(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  void *__p[2];
  char v18;

  v4 = *(unsigned int *)(a1 + 44);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned int *)(a1 + 40);
    v7 = *a2;
    v8 = **a2;
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0.0;
      }
      else
      {
        v9 = *(_DWORD *)(a1 + 32) + (int)v5;
        v10 = 0.0;
        v11 = v6;
        v12 = v7;
        do
        {
          v13 = *v12;
          v12 += 3;
          v14 = (float)(*(float *)(v13 + 4 * v9) * *(float *)(v13 + 4 * v9))
              + (float)(*(float *)(v13 + 4 * v5) * *(float *)(v13 + 4 * v5));
          *(float *)(v13 + 4 * v5) = v14;
          v15 = v14 + 1.0e-16;
          v10 = v10 + (float)(log10f(v15) * 10.0);
          --v11;
        }
        while (v11);
      }
      *(float *)(v8 + 4 * v5++) = v10 / (float)(int)v6;
    }
    while (v5 != v4);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v16 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.psd.txt");
    quasar::NotchDetector2::dumpVec1d((uint64_t)v16, (uint64_t)__p, *a2);
    if (v18 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD840ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NotchDetector2::dumpVec1d(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  uint64_t v9;
  _BYTE v10[408];
  _QWORD v11[20];

  v11[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v9);
  v5 = *a3;
  for (i = a3[1]; v5 != i; v5 += 4)
  {
    v6 = (_QWORD *)std::ostream::operator<<();
    v8 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v10[*(_QWORD *)(v9 - 24) - 8], *(_DWORD *)&v10[*(_QWORD *)(v9 - 24) + 24] | 4);
  v9 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v10[*(_QWORD *)(v9 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v10);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v11);
}

void sub_1AD840FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

BOOL quasar::NotchDetector2::notchDetected(quasar::NotchDetector2 *this, const float *a2, float a3, int a4, float *a5)
{
  float v6;
  int v7;
  int v8;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  _QWORD *v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  void *__p[2];
  char v28;

  v6 = ceilf(*((float *)this + 12) * a3) + -1.0;
  if (v6 < 0.0)
    v6 = 0.0;
  v7 = (int)v6;
  v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 8) + (v8 - 1) * *((_DWORD *)this + 9) + (int)v6 <= a4)
  {
    if (v8 >= 1)
    {
      v12 = 0;
      do
      {
        memcpy(*(void **)(*((_QWORD *)this + 9) + 24 * v12), &a2[v7 + *((_DWORD *)this + 9) * (int)v12], 4 * *((int *)this + 8));
        v13 = *((int *)this + 8);
        v14 = *((_QWORD *)this + 9);
        if ((int)v13 <= 0)
        {
          v17 = *(float **)(v14 + 24 * v12);
        }
        else
        {
          v15 = 0;
          v16 = *((_QWORD *)this + 12);
          v17 = *(float **)(v14 + 24 * v12);
          v13 = *((unsigned int *)this + 8);
          do
          {
            v17[v15] = (float)(*(float *)(v16 + v15 * 4) * v17[v15]) * 0.000030518;
            v17[v13 + v15++] = 0.0;
          }
          while (v13 != v15);
        }
        kaldi::SplitRadixComplexFft<float>::Compute(*((_QWORD *)this + 7), v17, &v17[v13], *((unsigned __int8 *)this + 64));
        ++v12;
      }
      while (v12 < *((int *)this + 10));
    }
    if (*((_BYTE *)this + 224))
    {
      v18 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.fft.txt");
      quasar::NotchDetector2::dumpVec2d((uint64_t)v18, (uint64_t)__p, (_QWORD *)this + 9);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    quasar::NotchDetector2::computePsd((uint64_t)this, (uint64_t **)this + 9);
    quasar::NotchDetector2::computeFeatures(this);
    v19 = (float *)*((_QWORD *)this + 18);
    v20 = *((_QWORD *)this + 19) - (_QWORD)v19;
    if (v20)
    {
      v21 = v20 >> 2;
      v22 = (float *)*((_QWORD *)this + 15);
      if (v21 <= 1)
        v21 = 1;
      v23 = 0.0;
      do
      {
        v24 = *v19++;
        v25 = v24;
        v26 = *v22++;
        v23 = v23 + (float)(v25 * v26);
        --v21;
      }
      while (v21);
    }
    else
    {
      v23 = 0.0;
    }
    *a5 = v23;
    return v23 > *((float *)this + 42);
  }
  else
  {
    result = 0;
    *a5 = -10000.0;
  }
  return result;
}

void sub_1AD8411F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NotchDetector2::dumpVec2d(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  _BYTE v13[408];
  _QWORD v14[20];

  v14[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v12);
  if ((int)(-1431655765 * ((uint64_t)(a3[1] - *a3) >> 3)) >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3;
    v6 = v5 >> 2;
    v7 = -1431655765 * ((uint64_t)(a3[1] - *a3) >> 3);
    v8 = v5 & 0x3FFFFFFFCLL;
    do
    {
      if ((int)v6 >= 1)
      {
        v9 = 0;
        do
        {
          std::ostream::operator<<();
          v11 = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)&v11, 1);
          v9 += 4;
        }
        while (v8 != v9);
      }
      ++v4;
    }
    while (v4 != v7);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v13[*(_QWORD *)(v12 - 24) - 8], *(_DWORD *)&v13[*(_QWORD *)(v12 - 24) + 24] | 4);
  v12 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v13[*(_QWORD *)(v12 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v13);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v14);
}

void sub_1AD841388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector2::computeFeatures(quasar::NotchDetector2 *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  float v20;
  int v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float *v29;
  _QWORD *v30;
  void *__p[2];
  char v32;

  v3 = (char *)this + 144;
  v2 = *((_QWORD *)this + 18);
  v4 = *(_QWORD *)this;
  v5 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
  v6 = ((*((_QWORD *)this + 19) - v2) >> 2) / v5;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
    if ((int)v6 != (uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 2)
      goto LABEL_20;
    goto LABEL_19;
  }
  v7 = 0;
  v8 = (_DWORD *)*((_QWORD *)this + 22);
  v9 = (_DWORD *)*((_QWORD *)this + 23);
  v10 = v9 - v8;
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = v9 - v8;
  if (v5 <= 1)
    v5 = 1;
  do
  {
    v12 = *(float *)(v4 + 4 * v7);
    v13 = *((float *)this + 7);
    *v8 = (int)(float)(v12 - v13);
    v8[1] = (int)v12;
    v8[2] = (int)(float)(v12 + v13);
    if (v9 != v8)
    {
      v14 = 0;
      v15 = v10 * v7;
      v16 = *((_QWORD *)this + 25);
      do
      {
        *(_DWORD *)(v16 + 4 * (v15 + v14)) = 0;
        v17 = (float)(int)v8[v14];
        v18 = *((float *)this + 6);
        v19 = (int)(float)(v17 - v18);
        v20 = v18 + v17;
        if ((int)v20 >= v19)
        {
          v21 = (int)v20 - v19 + 1;
          v22 = (float)v21;
          v23 = (float *)(**((_QWORD **)this + 9) + 4 * v19);
          v24 = 0.0;
          do
          {
            v25 = *v23++;
            v24 = v24 + (float)(v25 / v22);
            *(float *)(v16 + 4 * (v15 + v14)) = v24;
            --v21;
          }
          while (v21);
        }
        ++v14;
      }
      while (v14 != v11);
    }
    ++v7;
  }
  while (v7 != v5);
  if ((int)v6 == v10)
  {
LABEL_19:
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v3, *((char **)this + 25), *((_QWORD *)this + 26), (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 2);
    goto LABEL_20;
  }
  v26 = 0;
  v27 = (float *)(*((_QWORD *)this + 25) + 4);
  v28 = 4 * v10;
  do
  {
    v29 = (float *)(v2 + 4 * v26 * (int)v6);
    *v29 = *(v27 - 1) - *v27;
    v29[1] = v27[1] - *v27;
    ++v26;
    v27 = (float *)((char *)v27 + v28);
    --v5;
  }
  while (v5);
LABEL_20:
  if (*((_BYTE *)this + 224))
  {
    v30 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.feats.txt");
    quasar::NotchDetector2::dumpVec1d((uint64_t)v30, (uint64_t)__p, (uint64_t *)v3);
    if (v32 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD84156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft();
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3B458;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_QWORD *)(v3 + 512) = 0;
  *(_WORD *)(v3 + 520) = 257;
  *(_QWORD *)(v3 + 524) = 0x8000001F4;
  *(_QWORD *)(v3 + 532) = 0;
  *(_DWORD *)(a1 + 540) = 32;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 544), "");
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_BYTE *)(a1 + 704) = 1;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 100000000;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 808) = 1065353216;
  *(_OWORD *)(a1 + 816) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_QWORD *)(a1 + 832) = v4 + 24;
  *(_QWORD *)(a1 + 840) = v4;
  *(_BYTE *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  return a1;
}

void sub_1AD841744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, void **a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v18 + 824), 0);
  v28 = *(_QWORD *)(v18 + 816);
  *(_QWORD *)(v18 + 816) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v27);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19);
  if (*(char *)(v18 + 671) < 0)
    operator delete(*(void **)(v18 + 648));
  if (*(char *)(v18 + 647) < 0)
    operator delete(*v22);
  a18 = a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v18 + 591) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 567) < 0)
    operator delete(*a17);
  if (*(char *)(v18 + 519) < 0)
    operator delete(*(void **)(v18 + 496));
  if (*(char *)(v18 + 495) < 0)
    operator delete(*(void **)(v18 + 472));
  if (*(char *)(v18 + 471) < 0)
    operator delete(*(void **)(v18 + 448));
  quasar::Decoder::~Decoder((void **)v18);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::~OnlineLASLmRescoringBeamSearchDecoder(quasar::OnlineLASLmRescoringBeamSearchDecoder *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D3B458;
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  if (*((char *)this + 935) < 0)
    operator delete(*((void **)this + 114));
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 832);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 103, 0);
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 744);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 728);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 672);
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  if (*((char *)this + 647) < 0)
    operator delete(*((void **)this + 78));
  v3 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineLASLmRescoringBeamSearchDecoder::~OnlineLASLmRescoringBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "online-las-lm-rescoring-beam-search");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 208, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 65), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[104], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 540, (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 68), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Token delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 71), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 74), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 77), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Lexicon FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-sym-table-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Subword symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 106), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LM FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 81), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(v4, "Scaling factor to use for LM weights");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 101), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The subword OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 111), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "word-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word-level OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "word-boundary-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word boundary subword token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 117), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mapping-cache-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Cache size to use for lazy FST mapping operations");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 90), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD842130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "remove-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove EOS labels from output");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove silence labels from output");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum number of decoder steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "beam width (must match the model)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "length penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "coverage penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD842430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<long long>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD842608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::finishInit(quasar::OnlineLASLmRescoringBeamSearchDecoder *this)
{
  const void *v2;
  uint64_t v3;
  int v4;
  kaldi::quasar::CEEncoderDecoderNet *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  kaldi::BeamSearchDecoder *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *Text;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  if (*((char *)this + 471) < 0)
  {
    if (*((_QWORD *)this + 57))
    {
LABEL_3:
      v2 = (const void *)operator new();
      kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet((uint64_t)v2, (uint64_t)this + 448);
      v3 = *((_QWORD *)this + 102);
      *((_QWORD *)this + 102) = v2;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        v2 = (const void *)*((_QWORD *)this + 102);
        v4 = *((_DWORD *)this + 132);
        if (!v2)
        {
          v5 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v4 = *((_DWORD *)this + 132);
      }
LABEL_12:
      if (v4 != kaldi::quasar::CEEncoderDecoderNet::Beam(v5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "decoderOpts.beam == dynamic_cast<kaldi::quasar::CEEncoderDecoderNet *>(inferenceNet.get())->Beam()");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_19;
    }
  }
  else if (*((_BYTE *)this + 471))
  {
    goto LABEL_3;
  }
  if (*((char *)this + 495) < 0)
  {
    if (!*((_QWORD *)this + 60))
      goto LABEL_90;
  }
  else if (!*((_BYTE *)this + 495))
  {
    goto LABEL_90;
  }
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 519))
      goto LABEL_17;
LABEL_90:
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    goto LABEL_106;
  }
  if (!*((_QWORD *)this + 63))
    goto LABEL_90;
LABEL_17:
  v6 = operator new();
  kaldi::quasar::CESplitEncoderDecoderNet::CESplitEncoderDecoderNet(v6, (char *)this + 472, (char *)this + 496);
  v7 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_19:
  v8 = *((_DWORD *)this + 135);
  if (v8 % (*(int (**)(_QWORD))(**((_QWORD **)this + 102) + 96))(*((_QWORD *)this + 102)))
    v9 = quasar::gLogLevel < 4;
  else
    v9 = 1;
  if (!v9)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Batch size is not an integer multiple of the frame subsampling factor. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Encoder might drop frames.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v11 = *((unsigned __int8 *)this + 591);
  if (*((char *)this + 591) < 0)
  {
    if (!*((_QWORD *)this + 72))
      goto LABEL_29;
  }
  else if (!*((_BYTE *)this + 591))
  {
    goto LABEL_29;
  }
  if (*((_QWORD *)this + 75) != *((_QWORD *)this + 74))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Both token-delimiter and token-delimiters were provided. ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "token-delimiter is deprecated, use token-delimiters instead.");
    goto LABEL_106;
  }
LABEL_29:
  if ((v11 & 0x80) != 0)
    v11 = *((_QWORD *)this + 72);
  if (v11)
  {
    v12 = (__int128 *)((char *)this + 568);
    v13 = (uint64_t *)((char *)this + 592);
    v14 = *((_QWORD *)this + 75);
    if (v14 >= *((_QWORD *)this + 76))
    {
      v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v13, v12);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v13, v12);
      v15 = v14 + 24;
    }
    *((_QWORD *)this + 75) = v15;
  }
  v16 = (kaldi::BeamSearchDecoder *)operator new();
  kaldi::BeamSearchDecoder::BeamSearchDecoder(v16, (char *)this + 520);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 103, v16);
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 104), (quasar::OnlineLASLmRescoringBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  *((_QWORD *)this + 121) = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 104), (uint64_t)this + 912);
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 624);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 672, (__int128 *)__p);
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 84) + 64))(*((_QWORD *)this + 84), 0x10000000, 0) != 0x10000000)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input FST ", 10);
    v47 = *((char *)this + 647);
    if (v47 >= 0)
      v48 = (char *)this + 624;
    else
      v48 = (char *)*((_QWORD *)this + 78);
    if (v47 >= 0)
      v49 = *((unsigned __int8 *)this + 647);
    else
      v49 = *((_QWORD *)this + 79);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v50, " is not ilabel sorted");
LABEL_106:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v20 = *((_QWORD *)this + 90);
  *((_BYTE *)this + 704) = 1;
  *((_QWORD *)this + 89) = v20;
  v21 = operator new(0x20uLL);
  v21[2] = 0;
  *v21 = &unk_1E5D40FB8;
  v21[1] = 0;
  __p[0] = v21 + 3;
  __p[1] = v21;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 728, (__int128 *)__p);
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>(*((_QWORD *)this + 84), *((_QWORD *)this + 91), (uint64_t)this + 704, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 760, (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (*((char *)this + 871) < 0)
  {
    if (*((_QWORD *)this + 107))
      goto LABEL_54;
LABEL_65:
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Subword symbol table must be provided");
    goto LABEL_106;
  }
  if (!*((_BYTE *)this + 871))
    goto LABEL_65;
LABEL_54:
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
  Text = fst::SymbolTable::ReadText((uint64_t)this + 848);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(&v57, (uint64_t)Text);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 872, &v57);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v59) < 0)
    operator delete(__p[1]);
  *((_QWORD *)this + 120) = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 109) + 96))(*((_QWORD *)this + 109), (char *)this + 888);
  *((_QWORD *)this + 122) = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 109) + 96))(*((_QWORD *)this + 109), (char *)this + 936);
  if (*((char *)this + 671) < 0)
  {
    if (!*((_QWORD *)this + 82))
      return;
  }
  else if (!*((_BYTE *)this + 671))
  {
    return;
  }
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 648);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 688, (__int128 *)__p);
  v32 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v33 = (unint64_t *)((char *)__p[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 86) + 64))(*((_QWORD *)this + 86), 0x10000000, 0) != 0x10000000)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input FST ", 10);
    v53 = *((char *)this + 671);
    if (v53 >= 0)
      v54 = (char *)this + 648;
    else
      v54 = (char *)*((_QWORD *)this + 81);
    if (v53 >= 0)
      v55 = *((unsigned __int8 *)this + 671);
    else
      v55 = *((_QWORD *)this + 82);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v56, " is not ilabel sorted");
    goto LABEL_106;
  }
  v35 = operator new(0x20uLL);
  v35[2] = 0;
  *v35 = &unk_1E5D40F10;
  v35[1] = 0;
  v36 = *((_DWORD *)this + 202);
  __p[1] = v35;
  *((_DWORD *)v35 + 6) = v36;
  __p[0] = v35 + 3;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 744, (__int128 *)__p);
  v37 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v38 = (unint64_t *)((char *)__p[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,void>(*((_QWORD *)this + 86), *((_DWORD **)this + 93), __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 792, (__int128 *)__p);
  v40 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v41 = (unint64_t *)((char *)__p[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>(*((_QWORD *)this + 99), *((_QWORD *)this + 91), (uint64_t)this + 704, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 776, (__int128 *)__p);
  v43 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v44 = (unint64_t *)((char *)__p[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1AD842F2C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

_QWORD *fst::SymbolTable::ReadText(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *Text;
  void *__p[2];
  char v11;
  char v12;
  _QWORD v13[2];
  _BYTE v14[408];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(_QWORD *)(v13[0] - 24) + 16])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::ReadText: Can't open file ", 39);
    v5 = *(char *)(a1 + 23);
    if (v5 >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 23);
    else
      v7 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    Text = 0;
  }
  else
  {
    Text = fst::SymbolTable::ReadText();
  }
  v13[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v14);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v15);
  return Text;
}

void sub_1AD84308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::ifstream::~ifstream(&a20);
  _Unwind_Resume(a1);
}

float quasar::OnlineLASLmRescoringBeamSearchDecoder::preProcessPath(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 isAscii;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  void *__p[2];
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  float v51;
  int v52;
  float v53;
  int v54;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  if ((_DWORD)v4 != -1)
  {
    v6 = v4;
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a2 + 32))(&v50, a2, v6);
      LODWORD(__p[0]) = HIDWORD(v50);
      LODWORD(v33) = v50;
      LODWORD(v30) = 2139095040;
      LODWORD(v24) = 2139095040;
      result = *(float *)&v50;
      if (*(float *)&v50 != INFINITY)
        break;
      result = *(float *)__p;
      if (*(float *)__p != *(float *)&v24)
        break;
      if ((*(uint64_t (**)(_QWORD *, uint64_t, float))(*a2 + 40))(a2, v6, *(float *)__p) != 1
        && quasar::gLogLevel >= 1)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Invalid path FST. State ", 24);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" has ", 5);
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 40))(a2, v6);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" arcs", 5);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
      }
      *(_QWORD *)&v33 = &unk_1E5D21340;
      *((_QWORD *)&v34 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      v11 = a2[1];
      *((_QWORD *)&v33 + 1) = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * (int)v6);
      *(_QWORD *)&v34 = v11 + 8;
      v12 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 24) + 20 * *((_QWORD *)&v34 + 1);
      v30 = *(_QWORD *)v12;
      v13 = *(float *)(v12 + 8);
      v14 = *(float *)(v12 + 12);
      v32 = *(_DWORD *)(v12 + 16);
      LODWORD(v31) = 0;
      *((float *)&v31 + 1) = v13 + v14;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v33, (uint64_t)&v30);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 976);
      HIDWORD(__p[0]) = __p[0];
      __p[1] = 0;
      v28 = v6;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a2 + 208))(a2, v6, __p);
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 872) + 88))(__p, *(_QWORD *)(a1 + 872), (int)v30);
      v15 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 600), (unsigned __int8 **)__p);
      v16 = *(_QWORD *)(a1 + 600);
      (*(void (**)(unint64_t *__return_ptr, _QWORD *, _QWORD))(*a2 + 32))(&v24, a2, v32);
      v53 = *((float *)&v24 + 1);
      v54 = v24;
      v52 = 2139095040;
      v51 = INFINITY;
      v17 = *(float *)&v24 != INFINITY || v53 != v51;
      v18 = !quasar::isAscii((uint64_t *)__p);
      if (v15 != v16)
        v18 = 1;
      if (v18 || v17)
      {
        if ((_DWORD)v7 != -1)
        {
          v24 = __PAIR64__(*(_QWORD *)(a1 + 960), v30);
          v25 = v31;
          v26 = v32;
          (*(void (**)(_QWORD *, uint64_t, unint64_t *))(*a2 + 208))(a2, v7, &v24);
          v7 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        isAscii = quasar::isAscii((uint64_t *)__p);
        if ((_DWORD)v30)
          v20 = isAscii;
        else
          v20 = 0;
        if (v20)
        {
          v21 = (*(uint64_t (**)(_QWORD *))(*a2 + 200))(a2);
          v22 = v21;
          if ((_DWORD)v7 == -1)
            v23 = v6;
          else
            v23 = v7;
          v24 = v30;
          v25 = v31;
          v26 = v21;
          (*(void (**)(_QWORD *, uint64_t, unint64_t *))(*a2 + 208))(a2, v23, &v24);
          v7 = v22;
        }
      }
      v6 = v32;
      if (v29 < 0)
        operator delete(__p[0]);
    }
  }
  return result;
}

void sub_1AD843478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::operator!=<float>(float *a1, float *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::composeNbestLatticePathsWithFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t Base;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x2_t v19;
  int32x2_t v20;
  char v21[8];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2, (uint64_t *)&v29);
  v6 = v29;
  v7 = v30;
  if (v29 != v30)
  {
    v8 = vdup_n_s32(0x7F800000u);
    do
    {
      quasar::OnlineLASLmRescoringBeamSearchDecoder::preProcessPath((uint64_t)a1, v6);
      fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v6);
      v9 = a1[95];
      LOBYTE(v25) = FLAGS_fst_default_cache_gc;
      v26 = FLAGS_fst_default_cache_gc_limit;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)v6, v9, (uint64_t)&v25);
      v27 = (void **)&unk_1E5D191C0;
      v28 = Base;
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v25);
      if (a1[86])
      {
        v11 = a1[97];
        v21[0] = FLAGS_fst_default_cache_gc;
        v22 = FLAGS_fst_default_cache_gc_limit;
        v12 = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)&v27, v11, (uint64_t)v21);
        v23 = &unk_1E5D191C0;
        v24 = v12;
        v20 = v8;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v23, (uint64_t)&v25, 1, 0, 0, (uint64_t *)&v20, -1, 0);
        v23 = &unk_1E5D26808;
        v13 = v24;
        if (v24)
        {
          v14 = *(_DWORD *)(v24 + 56) - 1;
          *(_DWORD *)(v24 + 56) = v14;
          if (!v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      else
      {
        v19 = v8;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v27, (uint64_t)&v25, 1, 0, 0, (uint64_t *)&v19, -1, 0);
      }
      fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a3, (uint64_t)&v25);
      v25 = &unk_1E5D25580;
      v15 = v26;
      if (v26)
      {
        v16 = *(_DWORD *)(v26 + 56) - 1;
        *(_DWORD *)(v26 + 56) = v16;
        if (!v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      v27 = (void **)&unk_1E5D26808;
      v17 = v28;
      if (v28)
      {
        v18 = *(_DWORD *)(v28 + 56) - 1;
        *(_DWORD *)(v28 + 56) = v18;
        if (!v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  v27 = (void **)&v29;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v27);
}

void sub_1AD84375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  a18 = (void **)&a20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  int v44;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = (void (***)(_QWORD))(v4 - 16);
    v7 = (void (***)(_QWORD))(v4 - 16);
    do
    {
      v8 = *v7;
      v7 -= 2;
      (*v8)(v6);
      v9 = v6 == (void (***)(_QWORD))v5;
      v6 = v7;
    }
    while (!v9);
  }
  a2[1] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
    return result;
  v11 = result;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, result);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v38, a1, v11);
  LODWORD(v31[0]) = HIDWORD(v38[0]);
  LODWORD(v33) = v38[0];
  v44 = 2139095040;
  v43 = INFINITY;
  if (*(float *)v38 == INFINITY)
  {
    v13 = v43;
    if (*(float *)v31 == v43)
      v14 = v12;
    else
      v14 = v12 + 1;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a2, v14);
    if (*(float *)v31 == v13)
      goto LABEL_13;
  }
  else
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a2, v12 + 1);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2[1] - 16) + 200))(a2[1] - 16);
  v16 = a2[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v41, a1, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(v16 - 16) + 184))(v16 - 16, v15, &v41);
LABEL_13:
  v40 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v38);
  while (1)
  {
    result = v38[0];
    if (v38[0])
      break;
    if (v40 >= v38[2])
      goto LABEL_40;
LABEL_18:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v17 = a2[1];
    if (v38[0])
      v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38[0] + 32))(v38[0]);
    else
      v18 = v38[1] + 20 * v40;
    v20 = *(_QWORD *)(v17 - 16);
    v19 = v17 - 16;
    v21 = (*(uint64_t (**)(uint64_t))(v20 + 200))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 176))(v19, v21);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
    v23 = *(_QWORD *)(v18 + 8);
    v33 = *(_QWORD *)v18;
    v34 = v23;
    v35 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 208))(v19, v21, &v33);
    v24 = *(unsigned int *)(v18 + 16);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v24))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v33, a1, v24);
      v44 = HIDWORD(v33);
      LODWORD(v31[0]) = v33;
      v43 = INFINITY;
      v42 = 2139095040;
      v25.n128_u32[0] = v33;
      if (*(float *)&v33 == INFINITY)
        v25.n128_u32[0] = v42;
      v37 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 136))(a1, v24, &v33, v25);
      if (v33)
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
      else
        v26 = v34 + 20 * v37;
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
      v28 = *(_QWORD *)(v26 + 8);
      v31[0] = *(_QWORD *)v26;
      v31[1] = v28;
      v32 = v27;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v19 + 208))(v19, v22, v31);
      v24 = *(unsigned int *)(v26 + 16);
      if (v33)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      else if (v36)
      {
        --*v36;
      }
      v22 = v27;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v33, a1, v24);
    v44 = HIDWORD(v33);
    LODWORD(v31[0]) = v33;
    v43 = INFINITY;
    v42 = 2139095040;
    v29.n128_u32[0] = v33;
    if (*(float *)&v33 == INFINITY)
      v29.n128_u32[0] = v42;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v30, a1, v24, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 184))(v19, v22, &v30);
    if (v38[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[0] + 40))(v38[0]);
    else
      ++v40;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v38[0] + 24))(v38[0]))
    goto LABEL_18;
  result = v38[0];
  if (v38[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38[0] + 8))(v38[0]);
LABEL_40:
  if (v39)
    --*v39;
  return result;
}

void sub_1AD843CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22)
{
  if (a19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  else if (a22)
  {
    --*a22;
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD843DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t *a6, int a7, char a8)
{
  _DWORD v16[5];
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  _QWORD v25[9];
  void *v26;
  void *v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v25, a1, (uint64_t)&v26);
  *(_QWORD *)v16 = v25;
  *(_QWORD *)&v16[3] = 0x3A800000FFFFFFFFLL;
  v17 = 0;
  v18 = a3;
  v19 = a4;
  v20 = 0;
  v21 = a5;
  v22 = a8;
  v23 = *a6;
  v24 = a7;
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, (uint64_t)&v26, (uint64_t)v16);
  fst::AutoQueue<int>::~AutoQueue(v25);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_1AD843E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(_QWORD *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26808;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t quasar::OnlineLASLmRescoringBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  uint64_t *value;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int *v14;
  void *v15;
  BOOL v16;
  kaldi::BeamSearchDecoder *v17;
  int *v18;
  int v19;
  std::vector<std::wstring> *v20;
  int *v21;
  int *v22;
  std::vector<std::wstring> *v23;
  std::vector<std::wstring>::pointer end;
  __int128 v25;
  uint64_t v26;
  std::vector<std::wstring> *v27;
  const void **p_data;
  const void **v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  std::string *v33;
  std::string *p_str;
  std::vector<std::string>::pointer v35;
  int v36;
  std::vector<std::wstring> *v37;
  std::vector<std::wstring>::pointer v38;
  uint64_t v39;
  signed int v40;
  std::vector<std::wstring> *i;
  _BOOL4 IsValidFrame;
  BOOL v43;
  char v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::vector<std::wstring> *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  int *v63;
  std::string::size_type v64;
  std::vector<std::string>::pointer begin;
  __int128 v66;
  char *v67;
  char *v68;
  std::vector<std::string>::pointer v69;
  __int128 v70;
  _DWORD *v71;
  std::string::size_type v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t j;
  uint64_t v84;
  std::string *v85;
  std::string *v86;
  __int128 *v87;
  __int128 *v88;
  std::string *v89;
  __int128 v90;
  std::string::size_type v91;
  char v92;
  std::vector<std::wstring>::pointer v93;
  float v94;
  double *v95;
  unint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  double *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  int *v113;
  uint64_t *v114;
  void *v115;
  uint64_t v116;
  char *v117;
  std::vector<std::wstring> **v118;
  uint64_t v120;
  std::string *v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125[3];
  void *v126[3];
  std::vector<std::string> v127;
  int32x2_t v128;
  int32x2_t v129;
  void *v130;
  uint64_t v131;
  _BYTE __p[32];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  std::vector<std::string> v148;
  std::string *v149;
  std::string *v150;
  unint64_t v151;
  void *v152;
  char *v153;
  uint64_t v154;
  void *v155[2];
  char v156;
  std::string __str;
  void *__s1;
  int *v159;
  uint64_t v160;
  std::string v161;
  _BYTE v162[40];
  unint64_t v163;
  std::__shared_weak_count *v164;
  std::string v165;
  unsigned __int8 v166[8];
  int v167[4];
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*a3)[19].__end_cap_.__value_;
  v8 = *(std::__shared_weak_count **)(a1 + 840);
  v163 = *(_QWORD *)(a1 + 832);
  v164 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v163, 0, -1);
  v11 = v164;
  if (v164)
  {
    v12 = (unint64_t *)&v164->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v118 = a3;
  kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable((uint64_t)v162, *(_QWORD *)(a1 + 816), *(_QWORD *)a2, *(_DWORD *)(a1 + 540));
  memset(&v161, 0, sizeof(v161));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 824));
  v14 = 0;
  v15 = 0;
  v114 = (uint64_t *)(a1 + 592);
  v116 = a1 + 544;
  v120 = a1;
LABEL_10:
  v115 = v15;
  while (1)
  {
    v16 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 824));
    v17 = *(kaldi::BeamSearchDecoder **)(a1 + 824);
    if (v16)
      break;
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v17, (uint64_t)v162, 1u) >= 1)
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v127);
      kaldi::BeamSearchDecoder::GetBestPath(*(_QWORD *)(a1 + 824), (uint64_t)&v127);
      memset(&v165, 0, sizeof(v165));
      v159 = 0;
      __s1 = 0;
      v160 = 0;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v127, (uint64_t)&v165, (uint64_t)&__s1, (int32x2_t *)v126, 0);
      v18 = (int *)__s1;
      if ((char *)v159 - (_BYTE *)__s1 != (char *)v14 - (_BYTE *)v15 || memcmp(__s1, v15, (char *)v159 - (_BYTE *)__s1))
      {
        v19 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v162);
        v20 = *a3;
        LODWORD(v20[24].__begin_) = v19;
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&v20[2]);
        v21 = (int *)__s1;
        v22 = v159;
        if (__s1 != v159)
        {
          do
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v120 + 872) + 88))(__p, *(_QWORD *)(v120 + 872), *v21);
            v23 = *a3;
            end = (*a3)[2].__end_;
            if (end >= (*a3)[2].__end_cap_.__value_)
            {
              v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v23[2], (__int128 *)__p);
            }
            else
            {
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)(*a3)[2].__end_, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                v25 = *(_OWORD *)__p;
                end->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
              }
              v26 = (uint64_t)&end[1];
              v23[2].__end_ = end + 1;
            }
            v23[2].__end_ = (std::vector<std::wstring>::pointer)v26;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            ++v21;
            v15 = v115;
          }
          while (v21 != v22);
        }
        a1 = v120;
        if (!*(_BYTE *)(a2 + 561))
          goto LABEL_45;
        if (*(_QWORD *)(v120 + 600) != *(_QWORD *)(v120 + 592))
        {
          quasar::formatResults((uint64_t *)&(*a3)[2], v114, v116, *(unsigned __int8 *)(v120 + 616), __p);
          v27 = *a3;
          std::vector<std::string>::__vdeallocate(*a3 + 2);
          *(_OWORD *)&v27[2].__begin_ = *(_OWORD *)__p;
          v27[2].__end_cap_.__value_ = *(std::wstring **)&__p[16];
          memset(__p, 0, 24);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          a1 = v120;
        }
        p_data = (const void **)&(*a3)[2].__begin_->__r_.__value_.__l.__data_;
        v29 = (const void **)&(*a3)[2].__end_->__r_.__value_.__l.__data_;
        std::string::basic_string[abi:ne180100]<0>(v155, "");
        std::accumulate[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(p_data, v29, (uint64_t)v155, (uint64_t)&__str);
        if (v156 < 0)
          operator delete(v155[0]);
        v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v32 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v32 = v161.__r_.__value_.__l.__size_;
        if (size != v32)
          goto LABEL_56;
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v161;
        else
          v33 = (std::string *)v161.__r_.__value_.__r.__words[0];
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (memcmp(__str.__r_.__value_.__l.__data_, v33, __str.__r_.__value_.__l.__size_))
            goto LABEL_56;
          goto LABEL_59;
        }
        if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
          goto LABEL_45;
        p_str = &__str;
        while (p_str->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
        {
          p_str = (std::string *)((char *)p_str + 1);
          v33 = (std::string *)((char *)v33 + 1);
          if (!--v30)
          {
            if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_59;
            goto LABEL_45;
          }
        }
LABEL_56:
        v37 = *a3;
        v38 = (*a3)[23].__end_;
        v39 = *(unsigned int *)(*(_QWORD *)a4 + 12);
        v153 = 0;
        v152 = 0;
        v154 = 0;
        v150 = 0;
        v149 = 0;
        v151 = 0;
        memset(&v148, 0, sizeof(v148));
        __p[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], "▁");
        LOWORD(v110) = 0;
        (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, void **, std::string **, std::vector<std::string> *, int, _BYTE *))(v38->__r_.__value_.__r.__words[0] + 24))(v38, v37 + 2, v39, 1, 0, 0, &v152, &v149, &v148, v110, __p);
        a1 = v120;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        *(_QWORD *)__p = &v148;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v149;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v152;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::string::operator=(&v161, &__str);
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_59:
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!v15)
          {
LABEL_47:
            v15 = __s1;
            v14 = v159;
LABEL_48:
            if (v165.__r_.__value_.__r.__words[0])
            {
              v165.__r_.__value_.__l.__size_ = v165.__r_.__value_.__r.__words[0];
              operator delete(v165.__r_.__value_.__l.__data_);
            }
            v127.__begin_ = (std::vector<std::string>::pointer)&unk_1E5D25580;
            v35 = v127.__end_;
            if (v127.__end_)
            {
              v36 = LODWORD(v127.__end_[2].__r_.__value_.__r.__words[1]) - 1;
              LODWORD(v127.__end_[2].__r_.__value_.__r.__words[1]) = v36;
              if (!v36)
                (*(void (**)(std::vector<std::string>::pointer))(v35->__r_.__value_.__r.__words[0] + 8))(v35);
            }
            goto LABEL_10;
          }
        }
        else
        {
LABEL_45:
          if (!v15)
            goto LABEL_47;
        }
        operator delete(v15);
        goto LABEL_47;
      }
      if (v18)
      {
        v159 = v18;
        operator delete(v18);
      }
      goto LABEL_48;
    }
  }
  kaldi::BeamSearchDecoder::FinalizeDecoding(v17);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 816) + 72))(*(_QWORD *)(a1 + 816));
  v40 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v162);
  for (i = *a3; ; v40 = LODWORD(i[24].__begin_) + 1)
  {
    LODWORD(i[24].__begin_) = v40;
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v40, 1);
    i = *a3;
    if (!IsValidFrame)
      break;
  }
  WORD2(i[24].__begin_) = 257;
  v43 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 824), -1);
  v44 = quasar::gLogLevel < 4 || v43;
  if ((v44 & 1) == 0)
  {
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[13].__end_, (__int128 *)__p);
  v45 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v46 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if ((kaldi::BeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 824), (uint64_t)(*a3)[13].__end_, -1) & 1) != 0)
  {
    kaldi::TopSortLatticeIfNeeded((uint64_t)(*a3)[13].__end_);
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v130);
    v48 = (uint64_t)(*a3)[13].__end_;
    v49 = *(unsigned int *)(*(_QWORD *)a4 + 16);
    v129 = vdup_n_s32(0x7F800000u);
    fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v48, (uint64_t)&v130, v49, 0, 0, (uint64_t *)&v129, -1, 0);
    quasar::OnlineLASLmRescoringBeamSearchDecoder::composeNbestLatticePathsWithFst((_QWORD *)a1, (uint64_t)&v130, (uint64_t)(*a3)[13].__end_);
    v50 = *a3;
    LODWORD(v50[21].__begin_) = 1065353216;
    HIDWORD(v50[21].__begin_) = *(_DWORD *)(a1 + 808);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[6].__end_, (__int128 *)__p);
    v51 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v52 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)(*a3)[13].__end_, (uint64_t)(*a3)[6].__end_, 1);
    kaldi::TopSortCompactLatticeIfNeeded((uint64_t)(*a3)[6].__end_);
    v159 = 0;
    __s1 = 0;
    v160 = 0;
    fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)(*a3)[13].__end_, (uint64_t *)&__s1);
    v54 = operator new(0x30uLL);
    v54[2] = 0;
    *v54 = &unk_1E5D456D0;
    v54[1] = 0;
    v54[4] = 0;
    v54[5] = 0;
    v54[3] = 0;
    *(_QWORD *)__p = v54 + 3;
    *(_QWORD *)&__p[8] = v54;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[14].__end_cap_, (__int128 *)__p);
    v55 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v56 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = operator new(0x30uLL);
    v58[2] = 0;
    *v58 = &unk_1E5D458C8;
    v58[1] = 0;
    v58[4] = 0;
    v58[5] = 0;
    v58[3] = 0;
    *(_QWORD *)__p = v58 + 3;
    *(_QWORD *)&__p[8] = v58;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[16].__end_, (__int128 *)__p);
    v59 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v60 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (char *)__s1;
    v113 = v159;
    if (__s1 != v159)
    {
      v111 = (unsigned __int8 *)(a1 + 912);
      v112 = (unsigned __int8 *)(a1 + 936);
      do
      {
        memset(&__str, 0, sizeof(__str));
        v153 = 0;
        v152 = 0;
        v154 = 0;
        v150 = 0;
        v149 = 0;
        v151 = 0;
        fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)v62, (uint64_t)&__str, (uint64_t)&v152, &v128, 1);
        std::vector<std::string>::vector(&v148, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 2);
        std::vector<std::string>::vector(&v127, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 2);
        v64 = __str.__r_.__value_.__l.__size_;
        v63 = (int *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
        {
          begin = v148.__begin_;
          do
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v120 + 872) + 88))(__p, *(_QWORD *)(v120 + 872), *v63);
            if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              operator delete(begin->__r_.__value_.__l.__data_);
            v66 = *(_OWORD *)__p;
            begin->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
            *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v66;
            ++begin;
            ++v63;
          }
          while (v63 != (int *)v64);
        }
        v67 = (char *)v152;
        v68 = v153;
        if (v152 != v153)
        {
          v69 = v127.__begin_;
          do
          {
            quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v120 + 832), __p);
            if (SHIBYTE(v69->__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69->__r_.__value_.__l.__data_);
            v70 = *(_OWORD *)__p;
            v69->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v70;
            ++v69;
            v67 += 4;
          }
          while (v67 != v68);
        }
        std::vector<BOOL>::vector(v126, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 2);
        std::vector<BOOL>::vector(v125, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 2);
        v72 = __str.__r_.__value_.__l.__size_;
        v71 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
        {
          v73 = 0;
          v74 = (uint64_t *)v126[0];
          do
          {
            v75 = 1 << v73;
            if (*v71)
              v76 = *v74 & ~v75;
            else
              v76 = *v74 | v75;
            *v74 = v76;
            ++v71;
            v74 += v73 == 63;
            if (v73 == 63)
              v73 = 0;
            else
              ++v73;
          }
          while (v71 != (_DWORD *)v72);
        }
        v77 = (char *)v152;
        v78 = v153;
        if (v152 != v153)
        {
          v79 = 0;
          v80 = (uint64_t *)v125[0];
          do
          {
            v81 = 1 << v79;
            if (*(_DWORD *)v77)
              v82 = *v80 & ~v81;
            else
              v82 = *v80 | v81;
            *v80 = v82;
            v77 += 4;
            v80 += v79 == 63;
            if (v79 == 63)
              v79 = 0;
            else
              ++v79;
          }
          while (v77 != v78);
        }
        v117 = v62;
        quasar::formatWordResults(&v148, &v127, v126, v125, v114, v112, v111, &v123);
        v84 = v123;
        for (j = v124; v84 != j; v84 += 48)
        {
          *(_DWORD *)__p = 0;
          LODWORD(v165.__r_.__value_.__l.__data_) = 0;
          LODWORD(v121) = 0;
          v167[0] = 1;
          v166[0] = 1;
          v85 = v150;
          if ((unint64_t)v150 >= v151)
          {
            v86 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v149, v84, (int *)__p, (int *)&v165, (int *)&v121, v167, v166);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v151, v150, v84, (int *)__p, (int *)&v165, (int *)&v121, v167, v166);
            v86 = (std::string *)((char *)v85 + 224);
          }
          v150 = v86;
          std::vector<std::pair<std::string,float>>::vector(&v121, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v84 + 32) - *(_QWORD *)(v84 + 24)) >> 3));
          v88 = *(__int128 **)(v84 + 24);
          v87 = *(__int128 **)(v84 + 32);
          if (v88 != v87)
          {
            v89 = v121 + 1;
            do
            {
              if (*((char *)v88 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)v88, *((_QWORD *)v88 + 1));
              }
              else
              {
                v90 = *v88;
                v165.__r_.__value_.__r.__words[2] = *((_QWORD *)v88 + 2);
                *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v90;
              }
              if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)__p, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
              else
                *(std::string *)__p = v165;
              v91 = *(_QWORD *)__p;
              *(_QWORD *)v167 = *(_QWORD *)&__p[8];
              *(_QWORD *)((char *)&v167[1] + 3) = *(_QWORD *)&__p[15];
              v92 = __p[23];
              if (SHIBYTE(v89[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v89[-1].__r_.__value_.__l.__data_);
              v89[-1].__r_.__value_.__r.__words[0] = v91;
              v89[-1].__r_.__value_.__l.__size_ = *(_QWORD *)v167;
              *(std::string::size_type *)((char *)&v89[-1].__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v167[1] + 3);
              *((_BYTE *)&v89[-1].__r_.__value_.__s + 23) = v92;
              LODWORD(v89->__r_.__value_.__l.__data_) = 0;
              if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v165.__r_.__value_.__l.__data_);
              v88 = (__int128 *)((char *)v88 + 24);
              v89 = (std::string *)((char *)v89 + 32);
            }
            while (v88 != v87);
          }
          if (&v150[-5].__r_.__value_.__r.__words[2] != (std::string::size_type *)&v121)
            std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>((uint64_t)&v150[-5].__r_.__value_.__r.__words[2], v121, v122, ((char *)v122 - (char *)v121) >> 5);
          *(_QWORD *)__p = &v121;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        if (v149 != v150)
          v150[-8].__r_.__value_.__s.__data_[12] = 0;
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(*v118)[14].__end_cap_.__value_, (uint64_t)&v149);
        v93 = (*v118)[16].__end_;
        v94 = *(float *)&v128.i32[1];
        v95 = (double *)v93->__r_.__value_.__l.__size_;
        v96 = v93->__r_.__value_.__r.__words[2];
        if ((unint64_t)v95 >= v96)
        {
          v98 = (double *)v93->__r_.__value_.__r.__words[0];
          v99 = (uint64_t)((uint64_t)v95 - v93->__r_.__value_.__r.__words[0]) >> 3;
          v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v101 = v96 - (_QWORD)v98;
          if (v101 >> 2 > v100)
            v100 = v101 >> 2;
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
            v102 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v102 = v100;
          if (v102)
          {
            v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v93->__r_.__value_.__r.__words[2], v102);
            v98 = (double *)v93->__r_.__value_.__r.__words[0];
            v95 = (double *)v93->__r_.__value_.__l.__size_;
          }
          else
          {
            v103 = 0;
          }
          v104 = (double *)&v103[8 * v99];
          *v104 = v94;
          v97 = v104 + 1;
          while (v95 != v98)
          {
            v105 = *((_QWORD *)v95-- - 1);
            *((_QWORD *)v104-- - 1) = v105;
          }
          v93->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v104;
          v93->__r_.__value_.__l.__size_ = (std::wstring::size_type)v97;
          v93->__r_.__value_.__r.__words[2] = (std::wstring::size_type)&v103[8 * v102];
          if (v98)
            operator delete(v98);
        }
        else
        {
          *v95 = *(float *)&v128.i32[1];
          v97 = v95 + 1;
        }
        v93->__r_.__value_.__l.__size_ = (std::wstring::size_type)v97;
        *(_QWORD *)__p = &v123;
        std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v125[0])
          operator delete(v125[0]);
        if (v126[0])
          operator delete(v126[0]);
        *(_QWORD *)__p = &v127;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v148;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v149;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v152)
        {
          v153 = (char *)v152;
          operator delete(v152);
        }
        if (__str.__r_.__value_.__r.__words[0])
        {
          __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        v62 = v117 + 16;
      }
      while (v117 + 16 != (char *)v113);
    }
    *(_QWORD *)__p = &__s1;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v130 = &unk_1E5D25580;
    v106 = v131;
    if (v131)
    {
      v107 = *(_DWORD *)(v131 + 56) - 1;
      *(_DWORD *)(v131 + 56) = v107;
      if (!v107)
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
    }
    v108 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v133 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v108 = 2;
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (v15)
    operator delete(v15);
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)v162);
  return v108;
}

void sub_1AD844DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;
  uint64_t v42;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a41);
  if (*(char *)(v42 - 233) < 0)
    operator delete(*(void **)(v42 - 256));
  if (v41)
    operator delete(v41);
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)(v42 - 232));
  _Unwind_Resume(a1);
}

__n128 std::accumulate[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>@<Q0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, v7, (uint64_t)&v9);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v9;
      *(_QWORD *)(a3 + 16) = v10;
      v7 += 3;
    }
    while (v7 != a2);
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

void quasar::formatWordResults(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t *a8@<X8>)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  unint64_t v31;
  std::string *v32;
  uint64_t v33;
  std::string::size_type size;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  std::string *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  std::string::size_type v48;
  uint64_t v49;
  __int128 v50;
  __int128 **v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v73;
  uint64_t v75;
  __int128 v78;
  char v79;
  std::string v80;
  __int128 v81;
  uint64_t v82;
  std::string __p;
  __int128 v84;
  uint64_t v85;
  void *v86;
  char v87;
  uint64_t v88;
  std::string *v89;
  std::string *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94[6];

  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::vector<std::string>>::vector(&v92, 1uLL, (__int128 **)&__p);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  v89 = 0;
  v90 = 0;
  v91 = 0;
  if (a2[1] == *a2)
    goto LABEL_97;
  v12 = 0;
  do
  {
    v13 = v12 >> 6;
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a5, a5[1], (unsigned __int8 **)(*a1 + 24 * v12)) != a5[1])
    {
      v14 = 1 << v12;
      goto LABEL_27;
    }
    v14 = 1 << v12;
    if ((*(_QWORD *)(*a3 + 8 * v13) & (1 << v12)) == 0)
    {
      v15 = *a1 + 24 * v12;
      v16 = *(unsigned __int8 *)(v15 + 23);
      if ((v16 & 0x80u) == 0)
        v17 = *(unsigned __int8 *)(v15 + 23);
      else
        v17 = *(_QWORD *)(v15 + 8);
      v18 = a6[23];
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *((_QWORD *)a6 + 1);
      if (v17 == v18)
      {
        if (v19 >= 0)
          v20 = a6;
        else
          v20 = *(unsigned __int8 **)a6;
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v15, v20, *(_QWORD *)(v15 + 8)))
          {
LABEL_26:
            memset(&__p, 0, sizeof(__p));
            std::vector<std::vector<std::string>>::push_back[abi:ne180100](&v92, (uint64_t)&__p);
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
            goto LABEL_27;
          }
        }
        else
        {
          if (!*(_BYTE *)(v15 + 23))
            goto LABEL_26;
          v21 = (unsigned __int8 *)(*a1 + 24 * v12);
          while (*v21 == *v20)
          {
            ++v21;
            ++v20;
            if (!--v16)
              goto LABEL_26;
          }
        }
      }
      v22 = v93;
      v23 = (uint64_t *)(v93 - 24);
      v24 = *(_QWORD *)(v93 - 16);
      if (v24 >= *(_QWORD *)(v93 - 8))
      {
        v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v23, (__int128 *)v15);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v23, (__int128 *)v15);
        v25 = v24 + 24;
      }
      *(_QWORD *)(v22 - 16) = v25;
    }
LABEL_27:
    if ((*(_QWORD *)(*a4 + 8 * v13) & v14) == 0)
    {
      v26 = *a2 + 24 * v12;
      v27 = v90;
      if ((unint64_t)v90 >= v91)
      {
        v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v89, (__int128 *)v26);
      }
      else
      {
        if (*(char *)(v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
        }
        else
        {
          v28 = *(_OWORD *)v26;
          v90->__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        }
        v29 = v27 + 1;
      }
      v90 = v29;
    }
    ++v12;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v12);
  v30 = v89;
  if (v90 != v89)
  {
    v31 = 0;
    v75 = (uint64_t)(a8 + 2);
    v73 = *MEMORY[0x1E0DE4F50];
    v70 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v69 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v32 = &v30[v31];
      v33 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      if ((v33 & 0x80u) == 0)
        size = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      else
        size = v32->__r_.__value_.__l.__size_;
      v35 = a7[23];
      v36 = (char)v35;
      if ((v35 & 0x80u) != 0)
        v35 = *((_QWORD *)a7 + 1);
      if (size != v35)
        goto LABEL_54;
      if (v36 >= 0)
        v37 = a7;
      else
        v37 = *(unsigned __int8 **)a7;
      if ((v33 & 0x80) != 0)
      {
        if (memcmp(v32->__r_.__value_.__l.__data_, v37, v32->__r_.__value_.__l.__size_))
          goto LABEL_54;
      }
      else if (*((_BYTE *)&v32->__r_.__value_.__s + 23))
      {
        v38 = v32;
        while (v38->__r_.__value_.__s.__data_[0] == *v37)
        {
          v38 = (std::string *)((char *)v38 + 1);
          ++v37;
          if (!--v33)
            goto LABEL_66;
        }
LABEL_54:
        std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string&,std::vector<std::string>&,0>(&__p, (__int128 *)v32, (__int128 **)(v92 + 24 * v31));
        v39 = a8[1];
        v40 = a8[2];
        if (v39 >= v40)
        {
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a8) >> 4);
          v44 = v43 + 1;
          if (v43 + 1 > 0x555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a8) >> 4);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0x2AAAAAAAAAAAAAALL)
            v46 = 0x555555555555555;
          else
            v46 = v44;
          *((_QWORD *)&v81 + 1) = a8 + 2;
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v75, v46);
          v48 = (std::string::size_type)&v47[48 * v43];
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
          v80.__r_.__value_.__l.__size_ = v48;
          *(_QWORD *)&v81 = &v47[48 * v49];
          v50 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v48 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v48 = v50;
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)(v48 + 24) = 0;
          *(_QWORD *)(v48 + 32) = 0;
          *(_QWORD *)(v48 + 40) = 0;
          *(_OWORD *)(v48 + 24) = v84;
          *(_QWORD *)(v48 + 40) = v85;
          v84 = 0uLL;
          v85 = 0;
          v80.__r_.__value_.__r.__words[2] = v48 + 48;
          std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(a8, &v80);
          v42 = a8[1];
          std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer((void **)&v80.__r_.__value_.__l.__data_);
        }
        else
        {
          v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v39 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_QWORD *)(v39 + 24) = 0;
          *(_OWORD *)v39 = v41;
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)(v39 + 32) = 0;
          *(_QWORD *)(v39 + 40) = 0;
          *(_OWORD *)(v39 + 24) = v84;
          *(_QWORD *)(v39 + 40) = v85;
          v84 = 0uLL;
          v85 = 0;
          v42 = v39 + 48;
        }
        a8[1] = v42;
        v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_96;
      }
LABEL_66:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v51 = (__int128 **)(v92 + 24 * v31);
      v52 = *v51;
      v53 = v51[1];
      while (v52 != v53)
      {
        if (*((char *)v52 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
        }
        else
        {
          v54 = *v52;
          v80.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v54;
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v80;
        else
          v55 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v56 = v80.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v55, v56);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        v52 = (__int128 *)((char *)v52 + 24);
      }
      std::stringbuf::str();
      std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>((uint64_t)&v80, &v78, (__int128 **)(v92 + 24 * v31));
      v57 = a8[1];
      v58 = a8[2];
      if (v57 >= v58)
      {
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *a8) >> 4);
        v62 = v61 + 1;
        if (v61 + 1 > 0x555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *a8) >> 4);
        if (2 * v63 > v62)
          v62 = 2 * v63;
        if (v63 >= 0x2AAAAAAAAAAAAAALL)
          v64 = 0x555555555555555;
        else
          v64 = v62;
        v94[4] = a8 + 2;
        v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v75, v64);
        v66 = &v65[48 * v61];
        v94[0] = v65;
        v94[1] = v66;
        v94[3] = &v65[48 * v67];
        v68 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *((_QWORD *)v66 + 2) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        *(_OWORD *)v66 = v68;
        memset(&v80, 0, sizeof(v80));
        *((_QWORD *)v66 + 3) = 0;
        *((_QWORD *)v66 + 4) = 0;
        *((_QWORD *)v66 + 5) = 0;
        *(_OWORD *)(v66 + 24) = v81;
        *((_QWORD *)v66 + 5) = v82;
        v81 = 0uLL;
        v82 = 0;
        v94[2] = v66 + 48;
        std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(a8, v94);
        v60 = a8[1];
        std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer(v94);
      }
      else
      {
        v59 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(_QWORD *)(v57 + 16) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        *(_QWORD *)(v57 + 24) = 0;
        *(_OWORD *)v57 = v59;
        memset(&v80, 0, sizeof(v80));
        *(_QWORD *)(v57 + 32) = 0;
        *(_QWORD *)(v57 + 40) = 0;
        *(_OWORD *)(v57 + 24) = v81;
        *(_QWORD *)(v57 + 40) = v82;
        v81 = 0uLL;
        v82 = 0;
        v60 = v57 + 48;
      }
      a8[1] = v60;
      v94[0] = &v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (v79 < 0)
        operator delete((void *)v78);
      __p.__r_.__value_.__r.__words[0] = v73;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v73 - 24)) = v71;
      __p.__r_.__value_.__r.__words[2] = v70;
      *(_QWORD *)&v84 = v69;
      if (v87 < 0)
        operator delete(v86);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](&v88);
LABEL_96:
      ++v31;
      v30 = v89;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)v89) >> 3) > v31);
  }
LABEL_97:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1AD8458F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  a24 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a34 = v34 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = v34 - 152;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = a16;
  std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::string>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD845B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::SymbolTable::ReadText()
{
  _QWORD *result;
  _QWORD *v1;

  result = (_QWORD *)fst::SymbolTableImpl::ReadText();
  if (result)
  {
    v1 = result;
    result = (_QWORD *)operator new();
    *result = &off_1E5D1AD68;
    result[1] = v1;
  }
  return result;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

double fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

double fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *MutableState;
  uint64_t v8;
  double **v9;
  double *v10;
  double result;
  uint64_t v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 72))(&v12, a1, a2);
    v6 = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(_QWORD *)MutableState = v6;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v8 = a1[15];
  if (*(_DWORD *)(v8 + 76) == (_DWORD)a2)
    v9 = (double **)(v8 + 80);
  else
    v9 = (double **)(*(_QWORD *)(v8 + 8) + 8 * ((int)a2 + 1));
  v10 = *v9;
  result = *v10;
  *a3 = *(_QWORD *)v10;
  return result;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + *(_QWORD *)(a1 + 112) + 56;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  int32x2_t *v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 12) |= 4u;
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve((uint64_t *)MutableState + 3, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(int32x2_t **)(a1 + 80);
  if (v5[6].i32[1])
  {
    v5[6].i32[0] &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  *v5 = vdup_n_s32(0x7F800000u);
  v5[6] = 0;
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 12) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1AD846250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x38uLL);
  *(int32x2_t *)v8 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v9 = operator new(0x18uLL);
    v9[4] = a2;
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    ++v10[2];
  }
  return v8;
}

unint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 2);
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string&,std::vector<std::string>&,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1AD846478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(uint64_t a1, __int128 *a2, __int128 **a3)
{
  __int128 v4;
  std::string *v5;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (std::string *)(a1 + 24);
  v5->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v5, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1AD8464F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

kaldi::BeamSearchDecoder *std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100](kaldi::BeamSearchDecoder **a1, kaldi::BeamSearchDecoder *a2)
{
  kaldi::BeamSearchDecoder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::BeamSearchDecoder::~BeamSearchDecoder(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void kaldi::BeamSearchDecoder::~BeamSearchDecoder(kaldi::BeamSearchDecoder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v10 = (void **)((char *)this + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
    operator delete(v7);
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 9) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 6) = v9;
    operator delete(v9);
  }
}

void std::__shared_ptr_emplace<fst::StdToLatticeMapper<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::StdToLatticeMapper<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD8466A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D412C8;
  a1[1] = 0;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_1AD8466F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D412C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D412C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = operator new();
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(v8, a2, a3, a4);
  *a1 = &unk_1E5D23198;
  a1[1] = v8;
  return a1;
}

void sub_1AD8467D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D240C0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D240C0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

double fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23198;
  return v4;
}

void sub_1AD8469E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1AD846A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B2F8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Init(a1);
  return a1;
}

void sub_1AD846B20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 48) = v7;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1AD846C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6E8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v4, a2);
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6E8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4;
  if (!v4)
  {
    v5 = operator new();
    v6 = *(_QWORD *)(a2 + 8);
    v8[0] = *(_BYTE *)a2;
    v9 = v6;
    fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v5, (uint64_t)v8);
    v4 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 120) = v5;
  *(_BYTE *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_1AD846E04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B6E8;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B2F8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(uint64_t a1)
{
  int v2;
  int v3;
  int v5;

  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
    {
      *(_BYTE *)(a1 + 60) = 1;
    }
    else if (!*(_BYTE *)(a1 + 60))
    {
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
      v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2)
        v5 = v2 + 1;
      else
        v5 = v2;
      if (v5 >= *(_DWORD *)(a1 + 164))
        *(_DWORD *)(a1 + 164) = v5 + 1;
      *(_DWORD *)(a1 + 64) = v5;
      *(_BYTE *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5)
        *(_DWORD *)(a1 + 68) = v5 + 1;
    }
  }
  return *(unsigned int *)(a1 + 64);
}

double fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v6;
  float v7;
  char *MutableState;
  int v9;
  uint64_t v10;
  _BOOL4 v12;
  float v13;
  uint64_t v14;
  double **v15;
  double *v16;
  double result;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)goto LABEL_23;
  v6 = *(_DWORD *)(a1 + 156);
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = 0.0;
      else
        v7 = INFINITY;
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v7;
      goto LABEL_22;
    }
    v10 = *(_QWORD *)(a1 + 136);
    v9 = *(_DWORD *)(a1 + 160);
LABEL_12:
    v12 = v9 != -1 && v9 <= a2;
    v13 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, (a2 - v12));
    if (v13 == INFINITY)
      v7 = v13;
    else
      v7 = 0.0;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    *(float *)MutableState = v13;
    goto LABEL_22;
  }
  v9 = *(_DWORD *)(a1 + 160);
  if (v9 != a2)
  {
    v10 = *(_QWORD *)(a1 + 136);
    goto LABEL_12;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
  v7 = 0.0;
LABEL_22:
  *((float *)MutableState + 1) = v7;
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_23:
  v14 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v14 + 76) == a2)
    v15 = (double **)(v14 + 80);
  else
    v15 = (double **)(*(_QWORD *)(v14 + 8) + 8 * (a2 + 1));
  v16 = *v15;
  result = *v16;
  *a3 = *(_QWORD *)v16;
  return result;
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 2);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  float v14;
  uint64_t *MutableState;
  int v16;
  int v17;
  _BOOL4 v19;
  int v20;
  _BOOL4 v22;
  float v23;
  float v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  float v36;
  float v37;
  float v38;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v35 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v31);
  while (1)
  {
    if (!v31)
    {
      if (v35 >= v33)
        goto LABEL_31;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
      break;
    if (v31)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v31 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = v32 + 16 * v35;
LABEL_16:
    v9 = *(_QWORD *)v8;
    v10 = *(float *)(v8 + 8);
    v11 = *(_DWORD *)(v8 + 12);
    v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= v11)
      ++v11;
    if (v11 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v11 + 1;
    v38 = v10;
    v37 = INFINITY;
    if (v10 == INFINITY)
      v14 = v10;
    else
      v14 = 0.0;
    v27 = v9;
    v28 = v10;
    v29 = v14;
    v30 = v11;
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(MutableState, (uint64_t)&v27);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    else
      ++v35;
  }
  if (v31)
  {
    (*(void (**)(void))(*(_QWORD *)v31 + 8))();
    goto LABEL_33;
  }
LABEL_31:
  if (v34)
    --*v34;
LABEL_33:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final(a1, a2, &v31), v38 = *((float *)&v31 + 1), LODWORD(v27) = v31, v37 = INFINITY, v36 = INFINITY, *(float *)&v31 == INFINITY)&& v38 == v36)
  {
    v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      v20 = *(_DWORD *)(a1 + 160);
      v22 = v20 != -1 && v20 <= a2;
      v23 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v22));
      *(float *)&v31 = v23;
      LODWORD(v27) = 2139095040;
      v24 = 0.0;
      if (v23 == INFINITY)
        v24 = v23;
      *(float *)&v31 = v23;
      *(float *)&v27 = v24;
      v38 = INFINITY;
      v37 = INFINITY;
      if (v23 != INFINITY || *(float *)&v27 != v37)
      {
        v25 = *(_DWORD *)(a1 + 160);
        v31 = 0;
        v32 = __PAIR64__(LODWORD(v24), LODWORD(v23));
        LODWORD(v33) = v25;
        v26 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(v26, (uint64_t)&v31);
      }
    }
    else if (v16 == 1)
    {
      v17 = *(_DWORD *)(a1 + 160);
      v19 = v17 != -1 && v17 <= a2;
      LODWORD(v31) = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v19));
      LODWORD(v27) = 2139095040;
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD8474B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 3);
  v6 = *((_QWORD *)MutableState + 4) - v5;
  if (v6)
  {
    v7 = v6 / 20;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 16);
    do
    {
      v11 = *v9;
      v9 += 5;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

_QWORD *fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v1 = result[3];
  v2 = result[4] - v1;
  if (v2)
  {
    v3 = v2 / 20;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1))
        ++result[1];
      if (!*v4)
        ++result[2];
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 3, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D240C0;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1AD847810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B2F8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Init(a1);
  return a1;
}

void sub_1AD8478B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v12[8];
  uint64_t v13;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6E8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v12[0] = *(_BYTE *)(a1 + 104);
  v13 = v7;
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v6, (uint64_t)v12);
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v8 = 1;
  else
    v8 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v8;
  if (((a3 ^ 1) & 1) == 0)
  {
    v9 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::operator=(v6, v9);
    v10 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v6 + 88) = v10;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1AD847A08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>>((char *)(a1 + 24), v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2));
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

char *std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      v7 += 20;
      a2 += 20;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD847D1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C968;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1AD847DA8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  float result;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v1 + 156) == 1 && !*(_BYTE *)(a1 + 44))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) & 1) != 0)
        return result;
      v1 = *(_QWORD *)(a1 + 8);
    }
    else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
    {
      return result;
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(a1 + 40));
    return INFINITY;
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C968;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C968;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Next(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
LABEL_7:
        fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
        return;
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
    v4 = (uint64_t *)(v3 + 80);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 52);
  v6 = (_DWORD *)(v5 + 52);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 7);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v6 - 5) - v9) >> 2);
  if (*(_QWORD *)(v6 - 5) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

_QWORD *std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45AF8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD84814C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<fst::ArcScaleMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcScaleMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,void>@<X0>(uint64_t a1@<X1>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD848288(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,0>(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41300;
  a1[1] = 0;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFst(a1 + 3, a2, a3);
  return a1;
}

void sub_1AD8482D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFst(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D23458;
  a1[1] = v6;
  return a1;
}

void sub_1AD8483C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24380;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24380;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23458;
  return v4;
}

void sub_1AD8485CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1AD848658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v7;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B3D8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = (_DWORD *)operator new();
  *v7 = *a3;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Init(a1);
  return a1;
}

void sub_1AD848720(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 48) = v7;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1AD848898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

void sub_1AD848A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1AD848AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B3D8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  int v6;
  char *MutableState;
  uint64_t v8;
  float *v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)goto LABEL_20;
  v4 = *(_DWORD *)(a1 + 156);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
LABEL_18:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_19;
    }
    v8 = *(_QWORD *)(a1 + 136);
    v9 = *(float **)(a1 + 144);
    v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    v11 = v6 != -1 && v6 <= a2;
    v5 = *v9 * (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, (a2 - v11));
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    v8 = *(_QWORD *)(a1 + 136);
    v9 = *(float **)(a1 + 144);
    goto LABEL_11;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
LABEL_19:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_20:
  v12 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v12 + 76) == a2)
    v13 = v12 + 80;
  else
    v13 = *(_QWORD *)(v12 + 8) + 8 * (a2 + 1);
  return **(float **)v13;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  char *MutableState;
  int v16;
  int v17;
  _BOOL4 v19;
  float *v20;
  int v21;
  _BOOL4 v23;
  float v24;
  unsigned int v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v31 = 0;
  (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v28);
  while (1)
  {
    if (!(_QWORD)v28)
    {
      if (v31 >= v29)
        goto LABEL_29;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v28 + 24))(v28))
      break;
    if ((_QWORD)v28)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = *((_QWORD *)&v28 + 1) + 16 * v31;
LABEL_16:
    v9 = *(_QWORD *)v8;
    v10 = *(float *)(v8 + 8);
    LODWORD(v11) = *(_DWORD *)(v8 + 12);
    v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= (int)v11)
      v11 = (v11 + 1);
    else
      v11 = v11;
    if ((int)v11 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v11 + 1;
    v14 = COERCE_UNSIGNED_INT(v10 * **(float **)(a1 + 144)) | (unint64_t)(v11 << 32);
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v14;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v27);
    if ((_QWORD)v28)
      (*(void (**)(_QWORD))(*(_QWORD *)v28 + 40))(v28);
    else
      ++v31;
  }
  if ((_QWORD)v28)
  {
    (*(void (**)(void))(*(_QWORD *)v28 + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v30)
    --*v30;
LABEL_31:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v28) = fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(a1, a2), LODWORD(v27) = 2139095040, *(float *)&v28 == INFINITY))
  {
    v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      v21 = *(_DWORD *)(a1 + 160);
      v23 = v21 != -1 && v21 <= a2;
      v20 = *(float **)(a1 + 144);
      v24 = *v20
          * (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v23));
      *(float *)&v28 = v24;
      LODWORD(v27) = 2139095040;
      if (v24 != INFINITY)
      {
        v25 = *(_DWORD *)(a1 + 160);
        *(_QWORD *)&v28 = 0;
        *((_QWORD *)&v28 + 1) = __PAIR64__(v25, LODWORD(v24));
        v26 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v26, &v28);
      }
    }
    else if (v16 == 1)
    {
      v17 = *(_DWORD *)(a1 + 160);
      v19 = v17 != -1 && v17 <= a2;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v19));
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD848F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24380;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1AD8490C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B3D8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = (_DWORD *)operator new();
  *v4 = **(_DWORD **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Init(a1);
  return a1;
}

void sub_1AD849180(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CA68;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1AD849204(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CA68;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CA68;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD849530(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D412C8;
  a1[1] = 0;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_1AD84957C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD84960C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);
  uint64_t (***v7)(_QWORD);
  uint64_t (**v8)(_QWORD);
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 4;
  if (a2 > v4)
    return std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 16 * a2;
    if (v3 != v5)
    {
      v6 = (uint64_t (***)(_QWORD))(v3 - 16);
      v7 = (uint64_t (***)(_QWORD))(v3 - 16);
      do
      {
        v8 = *v7;
        v7 -= 2;
        result = (uint64_t *)(*v8)(v6);
        v9 = v6 == (uint64_t (***)(_QWORD))v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 16) = &unk_1E5D28830;
      v4 -= 16;
      v5 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v4 + 8) = v5;
      ++*(_DWORD *)(v5 + 56);
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__append(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _QWORD *v22;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        result = fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(v7);
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = &v16[16 * a2];
    do
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v19);
    return (_QWORD *)std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1AD849834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 20 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
      break;
    if (v14[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v14[1] + 20 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
    else
      ++v16;
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
    --*v15;
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (char *)a1[3];
  v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - (char *)v10) >> 2));
  if (v11 == (char *)v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1AD849B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 20);
    if ((_QWORD *)(result + 20) != a2)
    {
      v3 = 0;
      v4 = (_QWORD *)result;
      do
      {
        v5 = v2;
        if (*((_DWORD *)v4 + 6) < *((_DWORD *)v4 + 1))
        {
          v6 = *v2;
          v7 = *(_QWORD *)((char *)v4 + 28);
          v8 = *((_DWORD *)v4 + 9);
          v9 = HIDWORD(*v5);
          v10 = v3;
          while (1)
          {
            v11 = result + v10;
            *(_QWORD *)(v11 + 20) = *(_QWORD *)(result + v10);
            *(_QWORD *)(v11 + 28) = *(_QWORD *)(result + v10 + 8);
            *(_DWORD *)(v11 + 36) = *(_DWORD *)(result + v10 + 16);
            if (!v10)
              break;
            v10 -= 20;
            if (*(_DWORD *)(v11 - 16) <= (int)v9)
            {
              v12 = result + v10 + 20;
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *(_QWORD *)v12 = v6;
          *(_QWORD *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 16) = v8;
        }
        v2 = (_QWORD *)((char *)v5 + 20);
        v3 += 20;
        v4 = v5;
      }
      while ((_QWORD *)((char *)v5 + 20) != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  if (result != a2)
  {
    v2 = (_QWORD *)((char *)result + 20);
    if ((_QWORD *)((char *)result + 20) != a2)
    {
      v3 = (_DWORD *)result + 9;
      do
      {
        v4 = v2;
        if (*((_DWORD *)result + 6) < *((_DWORD *)result + 1))
        {
          v5 = *v2;
          v6 = *(_QWORD *)((char *)result + 28);
          v7 = *((_DWORD *)result + 9);
          v8 = HIDWORD(*v4);
          v9 = v3;
          do
          {
            v10 = v9;
            *((_QWORD *)v9 - 2) = *(_QWORD *)(v9 - 9);
            *((_QWORD *)v9 - 1) = *(_QWORD *)(v9 - 7);
            v11 = *(v9 - 5);
            v9 -= 5;
            *v10 = v11;
          }
          while (*(v10 - 13) > (int)v8);
          *((_QWORD *)v9 - 2) = v5;
          *((_QWORD *)v9 - 1) = v6;
          *v9 = v7;
        }
        v2 = (_QWORD *)((char *)v4 + 20);
        v3 += 5;
        result = v4;
      }
      while ((_QWORD *)((char *)v4 + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    v5 = *a1;
    v7 = *((_DWORD *)a1 + 2);
    v6 = *((_DWORD *)a1 + 3);
    v8 = *((_DWORD *)a1 + 4);
    if (v4 < v3)
    {
      *a1 = *a3;
      a1[1] = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *a3 = v5;
      *((_DWORD *)a3 + 2) = v7;
      *((_DWORD *)a3 + 3) = v6;
      *((_DWORD *)a3 + 4) = v8;
      return 1;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a2 = v5;
    *((_DWORD *)a2 + 2) = v7;
    *((_DWORD *)a2 + 3) = v6;
    *((_DWORD *)a2 + 4) = v8;
    if (*((_DWORD *)a3 + 1) >= SHIDWORD(v5))
      return 1;
    *a2 = *a3;
    a2[1] = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *a3 = v5;
    *((_DWORD *)a3 + 2) = v7;
    *((_DWORD *)a3 + 3) = v6;
    *((_DWORD *)a3 + 4) = v8;
    return 2;
  }
  if (v4 < v3)
  {
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 4);
    *a2 = *a3;
    v11 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    v12 = a2[1];
    a2[1] = v11;
    *a3 = v9;
    a3[1] = v12;
    *((_DWORD *)a3 + 4) = v10;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1))
      return 1;
    v13 = *a1;
    v14 = *((_DWORD *)a1 + 4);
    *a1 = *a2;
    v15 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v16 = a1[1];
    a1[1] = v15;
    *a2 = v13;
    a2[1] = v16;
    *((_DWORD *)a2 + 4) = v14;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = HIDWORD(*a1);
  if (*(_DWORD *)(a2 - 16) <= (int)v3)
  {
    v7 = (uint64_t *)((char *)a1 + 20);
    do
    {
      v5 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = *((_DWORD *)v7 + 1);
      v7 = (uint64_t *)((char *)v7 + 20);
    }
    while (v8 <= (int)v3);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = (uint64_t *)((char *)v4 + 20);
      v6 = *((_DWORD *)v4 + 6);
      v4 = (uint64_t *)((char *)v4 + 20);
    }
    while (v6 <= (int)v3);
  }
  if ((unint64_t)v5 >= a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 20;
      v10 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
    }
    while (v10 > (int)v3);
  }
  v11 = a1[1];
  v12 = *((_DWORD *)a1 + 4);
  while ((unint64_t)v5 < v9)
  {
    v13 = *v5;
    v14 = *((_DWORD *)v5 + 4);
    *v5 = *(_QWORD *)v9;
    v15 = *(_QWORD *)(v9 + 8);
    *((_DWORD *)v5 + 4) = *(_DWORD *)(v9 + 16);
    v16 = v5[1];
    v5[1] = v15;
    *(_QWORD *)v9 = v13;
    *(_QWORD *)(v9 + 8) = v16;
    *(_DWORD *)(v9 + 16) = v14;
    do
    {
      v17 = *((_DWORD *)v5 + 6);
      v5 = (uint64_t *)((char *)v5 + 20);
    }
    while (v17 <= (int)v3);
    do
    {
      v18 = *(_DWORD *)(v9 - 16);
      v9 -= 20;
    }
    while (v18 > (int)v3);
  }
  if ((uint64_t *)((char *)v5 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v5 - 20);
    a1[1] = *(uint64_t *)((char *)v5 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v5 - 1);
  }
  *(uint64_t *)((char *)v5 - 20) = v2;
  *(uint64_t *)((char *)v5 - 12) = v11;
  *((_DWORD *)v5 - 1) = v12;
  return v5;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_DWORD *)a1 + 4);
  v6 = HIDWORD(*a1);
  do
  {
    v7 = *(_DWORD *)((char *)a1 + v2 + 24);
    v2 += 20;
  }
  while (v7 < (int)v6);
  v8 = (uint64_t *)((char *)a1 + v2);
  if (v2 == 20)
  {
    while ((unint64_t)v8 < a2)
    {
      v9 = a2 - 20;
      v11 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
      if (v11 < (int)v6)
        goto LABEL_9;
    }
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 20;
      v10 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
    }
    while (v10 >= (int)v6);
  }
LABEL_9:
  v12 = v8;
  if ((unint64_t)v8 < v9)
  {
    v13 = v9;
    do
    {
      v14 = *v12;
      v15 = *((_DWORD *)v12 + 4);
      *v12 = *(_QWORD *)v13;
      v16 = *(_QWORD *)(v13 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(v13 + 16);
      v17 = v12[1];
      v12[1] = v16;
      *(_QWORD *)v13 = v14;
      *(_QWORD *)(v13 + 8) = v17;
      *(_DWORD *)(v13 + 16) = v15;
      do
      {
        v18 = *((_DWORD *)v12 + 6);
        v12 = (uint64_t *)((char *)v12 + 20);
      }
      while (v18 < (int)v6);
      do
      {
        v19 = *(_DWORD *)(v13 - 16);
        v13 -= 20;
      }
      while (v19 >= (int)v6);
    }
    while ((unint64_t)v12 < v13);
  }
  if ((uint64_t *)((char *)v12 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v12 - 20);
    a1[1] = *(uint64_t *)((char *)v12 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v12 - 1);
  }
  *(uint64_t *)((char *)v12 - 20) = v3;
  *(uint64_t *)((char *)v12 - 12) = v4;
  *((_DWORD *)v12 - 1) = v5;
  return (uint64_t)v12 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 20);
        v8 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 20) = v6;
        *(_QWORD *)(a2 - 12) = v9;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      v10 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      v11 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v11 + 4) < *(_DWORD *)(v10 + 4))
    {
      v14 = *(_QWORD *)v11;
      v15 = *(_QWORD *)(v11 + 8);
      v16 = *(_DWORD *)(v11 + 16);
      v17 = HIDWORD(*(_QWORD *)v11);
      v18 = v12;
      while (1)
      {
        v19 = a1 + v18;
        *(_QWORD *)(v19 + 60) = *(_QWORD *)(a1 + v18 + 40);
        *(_QWORD *)(v19 + 68) = *(_QWORD *)(a1 + v18 + 48);
        *(_DWORD *)(v19 + 76) = *(_DWORD *)(a1 + v18 + 56);
        if (v18 == -40)
          break;
        v18 -= 20;
        if (*(_DWORD *)(v19 + 24) <= (int)v17)
        {
          v20 = a1 + v18 + 60;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v14;
      *(_QWORD *)(v20 + 8) = v15;
      *(_DWORD *)(v20 + 16) = v16;
      if (++v13 == 8)
        return v11 + 20 == a2;
    }
    v10 = v11;
    v12 += 20;
    v11 += 20;
    if (v11 == a2)
      return 1;
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    v9 = *(_QWORD *)a3;
    v10 = *(_DWORD *)(a3 + 16);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    result = *(double *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    v11 = *(_QWORD *)(a3 + 8);
    *(double *)(a3 + 8) = result;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v10;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      v12 = *(_QWORD *)a2;
      v13 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      result = *(double *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      v14 = *(_QWORD *)(a2 + 8);
      *(double *)(a2 + 8) = result;
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        v15 = *(_QWORD *)a1;
        v16 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        result = *(double *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        v17 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v17;
        *(_DWORD *)(a2 + 16) = v16;
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    v11 = *(_QWORD *)a4;
    v12 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    result = *(double *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    v13 = *(_QWORD *)(a4 + 8);
    *(double *)(a4 + 8) = result;
    *(_QWORD *)a5 = v11;
    *(_QWORD *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v12;
    if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      v14 = *(_QWORD *)a3;
      v15 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      result = *(double *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      v16 = *(_QWORD *)(a3 + 8);
      *(double *)(a3 + 8) = result;
      *(_QWORD *)a4 = v14;
      *(_QWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
      {
        v17 = *(_QWORD *)a2;
        v18 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        result = *(double *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        v19 = *(_QWORD *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = v18;
        if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          v20 = *(_QWORD *)a1;
          v21 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          result = *(double *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          v22 = *(_QWORD *)(a1 + 8);
          *(double *)(a1 + 8) = result;
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v22;
          *(_DWORD *)(a2 + 16) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*((_DWORD *)v14 + 1) < *(_DWORD *)(a1 + 4))
        {
          v15 = *v14;
          v16 = *((_DWORD *)v14 + 4);
          *v14 = *(_QWORD *)a1;
          v17 = *(_QWORD *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          v18 = v14[1];
          v14[1] = v17;
          *(_QWORD *)a1 = v15;
          *(_QWORD *)(a1 + 8) = v18;
          *(_DWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 21)
    {
      v19 = v8 / 0x14uLL;
      v20 = (uint64_t)a2 - 20;
      do
      {
        v21 = *(_QWORD *)a1;
        v23 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a1 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v25 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v19);
        if (v20 == v25)
        {
          *(_QWORD *)v25 = v21;
          *(_DWORD *)(v25 + 8) = v23;
          *(_DWORD *)(v25 + 12) = v22;
          *(_DWORD *)(v25 + 16) = v24;
        }
        else
        {
          *(_QWORD *)v25 = *(_QWORD *)v20;
          *(_QWORD *)(v25 + 8) = *(_QWORD *)(v20 + 8);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v20 + 16);
          *(_QWORD *)v20 = v21;
          *(_DWORD *)(v20 + 8) = v23;
          *(_DWORD *)(v20 + 12) = v22;
          *(_DWORD *)(v20 + 16) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v25 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 20 - a1) >> 2));
        }
        v20 -= 20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  int64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 20 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        v7 = *(_DWORD *)(result + 20 * v5 + 4);
        v8 = *((_DWORD *)v6 + 6);
        v6 = (uint64_t *)((char *)v6 + 20 * (v7 < v8));
        if (v7 < v8)
          v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
      }
      if (*((_DWORD *)v6 + 1) >= *((_DWORD *)a4 + 1))
      {
        v9 = *a4;
        v10 = a4[1];
        v11 = *((_DWORD *)a4 + 4);
        v12 = HIDWORD(*a4);
        do
        {
          v13 = a4;
          a4 = v6;
          *v13 = *v6;
          v13[1] = v6[1];
          *((_DWORD *)v13 + 4) = *((_DWORD *)v6 + 4);
          if (v4 < v5)
            break;
          v14 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 20 * v14);
          v15 = 2 * v5 + 2;
          if (v15 < a3)
          {
            v16 = *(_DWORD *)(result + 20 * v14 + 4);
            v17 = *((_DWORD *)v6 + 6);
            v6 = (uint64_t *)((char *)v6 + 20 * (v16 < v17));
            if (v16 < v17)
              v14 = v15;
          }
          v5 = v14;
        }
        while (*((_DWORD *)v6 + 1) >= (int)v12);
        *a4 = v9;
        a4[1] = v10;
        *((_DWORD *)a4 + 4) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = v3 + 1;
    v7 = a1 + 20 * (v3 + 1);
    v8 = (2 * v3) | 1;
    v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      v10 = *(_DWORD *)(a1 + 20 * v6 + 4);
      v11 = *(_DWORD *)(v7 + 24);
      v7 += 20 * (v10 < v11);
      if (v10 < v11)
        v8 = v9;
    }
    *(_QWORD *)a1 = *(_QWORD *)v7;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + 16);
    a1 = v7;
    v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    if (*(_DWORD *)(result + 20 * v4 + 4) < *(_DWORD *)(a2 - 16))
    {
      v7 = *(_QWORD *)(a2 - 20);
      v5 = a2 - 20;
      v6 = v7;
      v8 = *(_QWORD *)(v5 + 8);
      v9 = *(_DWORD *)(v5 + 16);
      v10 = HIDWORD(v7);
      do
      {
        v11 = v5;
        v5 = result + 20 * v4;
        *(_QWORD *)v11 = *(_QWORD *)v5;
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v11 + 16) = *(_DWORD *)(v5 + 16);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 20 * v4 + 4) < (int)v10);
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 8) = v8;
      *(_DWORD *)(v5 + 16) = v9;
    }
  }
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  __int128 v12;
  _BYTE v13[25];

  v6 = fst::LookAheadMatchType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v7;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    if (v6 == 1)
      return fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
    else
      return fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v9;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    return fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26808;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFst(v4, a1, a2);
  return v4;
}

void sub_1AD84AD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FEE8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1BF68;
  *a2 = v4;
  return result;
}

void sub_1AD84AE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v5[0] + 8))(v5[0]);
  if (v6[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v6[0] + 8))(v6[0]);
  return v3;
}

void sub_1AD84AEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *(_QWORD *)a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *(_QWORD *)a1 = v7;
  }
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

void sub_1AD84AF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

int32x2_t *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BC28;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  a1[7] = (int32x2_t)0xFFFFFFFFLL;
  a1[8] = 0;
  a1[9].i32[0] = -1;
  a1[9].i8[6] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[6] = 1;
    }
  }
  return a1;
}

void sub_1AD84B110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D19620;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19620;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19620;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD84B228(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 78))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 76))
  {
    *(_BYTE *)(result + 76) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Final_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19620;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD84B3E0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A5D8;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD84B4C8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A5D8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D1BC28;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &unk_1E5D19620;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BC28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 78) = 1;
    }
    v6 = *(_QWORD **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD **)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD **)(v3 + 136);
      if (v7)
      {
        *(_QWORD *)(v3 + 136) = v7[5];
      }
      else
      {
        v7 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        v7[5] = 0;
      }
      v8 = *(_QWORD *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, a2, v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    if (*v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 80))(*v7, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 72) = a2;
  }
  return result;
}

void sub_1AD84B830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 77) = 1;
  if (*(_BYTE *)(a1 + 78))
  {
    result = 0;
    *(_BYTE *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 76) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 76) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Search(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  unint64_t v30;

  v2 = **(_QWORD **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = 2;
    else
      v3 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v4 = *(_QWORD **)(a1 + 24);
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 56))(*v4);
    else
      v4[4] = 0;
    while (1)
    {
      v14 = *(_QWORD **)(a1 + 24);
      if (*v14)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14) & 1) != 0)
          return 0;
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      v15 = *(uint64_t **)(a1 + 24);
      v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 20 * v15[4];
        v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 20 * v15[4]);
      }
      v19 = *(_DWORD *)(a1 + 40);
      v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19)
        v20 = 1;
      if (v20)
        break;
      v21 = *(_QWORD **)(a1 + 24);
      if (*v21)
        (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 40))(*v21);
      else
        ++v21[4];
    }
    result = 0;
    if (v20 == 1)
      return 1;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
LABEL_53:
    v23 = *(uint64_t **)(a1 + 24);
    result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  v6 = 0;
  while (1)
  {
    v7 = (v5 + v6) >> 1;
    v8 = *(_QWORD **)(a1 + 24);
    if (*v8)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    else
      v8[4] = v7;
    v9 = *(uint64_t **)(a1 + 24);
    v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 20 * v9[4];
      v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 20 * v9[4]);
    }
    v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13)
      break;
    v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5)
      goto LABEL_53;
  }
  if (*v12 < v13)
  {
    v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    v24 = *(_QWORD **)(a1 + 24);
    --v7;
    if (*v24)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v24 + 64))(*v24, v7);
    else
      v24[4] = v7;
    v25 = *(uint64_t **)(a1 + 24);
    v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26)
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      else
        v27 = v25[1] + 20 * v25[4];
      v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    }
    else
    {
      v28 = (_DWORD *)(v25[1] + 20 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      v29 = *(_QWORD **)(a1 + 24);
      v30 = v7 + 1;
      if (*v29)
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 64))(*v29, v30);
      else
        v29[4] = v30;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 76))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 77))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (v4)
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (v4)
  {
    if (v8)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    else
      v9 = v7[1] + 20 * v7[4];
    v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
  else
  {
    v10 = (_DWORD *)(v7[1] + 20 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Value(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 76))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 80))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  }
  else
  {
    return v3[1] + 20 * v3[4];
  }
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD84BDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D460;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD84BFC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  *v7 = &unk_1E5D20648;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1AD84C078(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD84C1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (_QWORD *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD84C330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(&v15, **(_QWORD **)(a1 + 144), v8);
  v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  v18 = INFINITY;
  v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    v10 = v7[1];
    result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v14, **(_QWORD **)(a1 + 152), v10);
    v12 = v14;
    LODWORD(v18) = HIDWORD(*(_QWORD *)&v12);
    v11.i32[0] = (__int32)v12;
    v19 = v14.f32[0];
    v17 = INFINITY;
    v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 136);
      LOBYTE(v19) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

void sub_1AD84C610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  const fst::SymbolTable *v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__str);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  result = *(_QWORD *)(a1 + 48);
  if (result != v14)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v14)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

void sub_1AD84C820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD84C924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *a1 = v7;
  }
  return a1;
}

void sub_1AD84C9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D460;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D460;
  v4 = (_QWORD **)operator new();
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD84CB50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl((uint64_t)a1, a2, 1u);
  *(_QWORD *)v4 = &unk_1E5D20648;
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 16));
  a1[1] = a1[1] & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = a1[5];
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    a1[5] = v7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a1[6];
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    a1[6] = v10;
  }
  return a1;
}

void sub_1AD84CC94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)-1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a2);
  return v4;
}

void sub_1AD84CD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

_QWORD *fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(_QWORD *result, uint64_t a2, int a3, _BYTE *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  float v10;
  int v11;
  float v12;
  int v13;

  v5 = result;
  if (*((_DWORD *)result + 6) != (_DWORD)a2 || *((_DWORD *)result + 7) != a3 || *a4 != *((_BYTE *)result + 32))
  {
    *((_DWORD *)result + 6) = a2;
    *((_DWORD *)result + 7) = a3;
    *((_BYTE *)result + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)result[2] + 40))(result[2], a2);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[2] + 56))(v5[2], a2);
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v5[2] + 32))(&v9, v5[2], a2);
    v8 = 0;
    v12 = *((float *)&v9 + 1);
    v13 = v9;
    v11 = 2139095040;
    v10 = INFINITY;
    if (*(float *)&v9 == INFINITY)
      v8 = v12 == v10;
    if (v6 != v7)
      v8 = 0;
    *((_BYTE *)v5 + 33) = v8;
    *((_BYTE *)v5 + 34) = v7 == 0;
  }
  return result;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD84CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD84D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  char v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  char v22;
  char v23;
  float32x2_t *v24;
  float32x2_t *v25;
  char v26;
  char v27;
  _QWORD v28[2];
  unsigned int v29;
  _QWORD v30[2];
  int v31;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v13 = *(_QWORD *)v12;
        v30[0] = *(_QWORD *)v12;
        v30[1] = *(_QWORD *)(v12 + 8);
        v31 = *(_DWORD *)(v12 + 16);
        v14 = *(_QWORD *)a4;
        v28[0] = *(_QWORD *)a4;
        v28[1] = *((_QWORD *)a4 + 1);
        v29 = a4[4];
        if (a5)
        {
          v15 = HIDWORD(v14);
          v16 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v15 != -1)
          {
            if ((_DWORD)v13 == -1)
            {
              v17 = v16[32];
              if (v16[32])
                v18 = -1;
              else
                v18 = 0;
              v27 = v18;
              if (v17)
                goto LABEL_35;
            }
            else
            {
              if ((_DWORD)v15)
                v23 = 0;
              else
                v23 = -1;
              v27 = v23;
              if (!(_DWORD)v15)
                goto LABEL_35;
            }
LABEL_28:
            v24 = (float32x2_t *)v28;
            v25 = (float32x2_t *)v30;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v24, v25, &v27);
            goto LABEL_35;
          }
          if (!v16[33])
          {
            v27 = v16[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          v19 = HIDWORD(v13);
          v20 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v19 != -1)
          {
            if ((_DWORD)v14 == -1)
            {
              v21 = v20[32];
              if (v21)
                v22 = -1;
              else
                v22 = 0;
              v27 = v22;
              if (v21)
                goto LABEL_35;
            }
            else
            {
              if ((_DWORD)v19)
                v26 = 0;
              else
                v26 = -1;
              v27 = v26;
              if (!(_DWORD)v19)
                goto LABEL_35;
            }
LABEL_33:
            v24 = (float32x2_t *)v30;
            v25 = (float32x2_t *)v28;
            goto LABEL_34;
          }
          if (!v20[33])
          {
            v27 = v20[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, float32x2_t *a3, float32x2_t *a4, char *a5)
{
  __int32 v7;
  __int32 v8;
  __int32 v9;
  float32x2_t v10;
  int Id;
  uint64_t *MutableState;
  _DWORD v14[2];
  float32x2_t v15;
  int v16;
  uint64_t v17;
  char v18;

  v7 = a4[2].i32[0];
  LODWORD(v17) = a3[2].i32[0];
  HIDWORD(v17) = v7;
  v18 = *a5;
  v8 = a3->i32[0];
  v9 = a4->i32[1];
  v10 = vadd_f32(a3[1], a4[1]);
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v17, 1);
  v14[0] = v8;
  v14[1] = v9;
  v15 = v10;
  v16 = Id;
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(MutableState, (uint64_t)v14);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F300;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD84D500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F300;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F300;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD84D9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4;
  unsigned __int8 *v5;
  __int32 v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v11;
  char v12;

  v4 = a1[2];
  v5 = *(unsigned __int8 **)(*(_QWORD *)&v4 + 136);
  v6 = a3->i32[1];
  if (v6 != -1)
  {
    if (a4->i32[0] == -1)
    {
      v7 = 0;
      LODWORD(v5) = v5[32];
      if ((_DWORD)v5)
        return v7;
    }
    else
    {
      LOBYTE(v5) = 0;
      if (!v6)
        return 0;
    }
LABEL_10:
    v8 = a4[2].i32[0];
    LODWORD(v11) = a3[2].i32[0];
    HIDWORD(v11) = v8;
    v12 = (char)v5;
    v9 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v9;
    a1[10] = vadd_f32(a3[1], a4[1]);
    v7 = 1;
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&v4 + 176), &v11, 1);
    return v7;
  }
  if (!v5[33])
  {
    LOBYTE(v5) = v5[34] ^ 1;
    goto LABEL_10;
  }
  return 0;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD84DD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D520;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter((uint64_t)v8, a2, a3, *(_QWORD *)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)
    v16 = v15 | 4;
  else
    v16 = v15;
  *(_QWORD *)(a1 + 8) = v16 & 0x3FFFFFFF0004 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1AD84DF84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((v4 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4, *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) != 3)? (v5 = v4 == 0): (v5 = 0), !v5))
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD84E124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (_QWORD *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3
    || *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD84E2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  int v8;
  _QWORD *result;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v7 = (int *)(v6 + 12 * a2);
  v8 = *v7;
  result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(&v15, **(_QWORD **)(a1 + 144), *v7);
  v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  v18 = INFINITY;
  v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    v10 = v7[1];
    result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v14, **(_QWORD **)(a1 + 152), v10);
    v12 = v14;
    LODWORD(v18) = HIDWORD(*(_QWORD *)&v12);
    v11.i32[0] = (__int32)v12;
    v19 = v14.f32[0];
    v17 = INFINITY;
    v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 136);
      LOBYTE(v19) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1AD84E634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v10;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher(v10, a3, 0);
    a5 = (_QWORD *)v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD84E754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, a2);
  *(_BYTE *)(v4 + 8) = a1[8];
  return v4;
}

void sub_1AD84E7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(_BYTE *a1)
{
  int v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (!a1[8])
  {
    v2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      v4 = (_QWORD *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0)
        operator delete(__p[0]);
    }
  }
  return a1[8];
}

void sub_1AD84E8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D520;
  v2 = a1[17];
  if (v2)
  {
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40FF020D0FLL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D520;
  v4 = (__int128 *)operator new();
  fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter((uint64_t)v4, *(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(_OWORD *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD84EA74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v5 + 40) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1AD84EB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _BYTE **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = (_QWORD *)fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD84ED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD84EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(_QWORD *result, int a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  float v10;
  int v11;
  float v12;
  int v13;

  v5 = result;
  if (*((_DWORD *)result + 6) != a2 || *((_DWORD *)result + 7) != (_DWORD)a3 || *a4 != *((_BYTE *)result + 32))
  {
    *((_DWORD *)result + 6) = a2;
    *((_DWORD *)result + 7) = a3;
    *((_BYTE *)result + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)result[2] + 40))(result[2], a3);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[2] + 48))(v5[2], a3);
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v5[2] + 32))(&v9, v5[2], a3);
    v8 = 0;
    v12 = *((float *)&v9 + 1);
    v13 = v9;
    v11 = 2139095040;
    v10 = INFINITY;
    if (*(float *)&v9 == INFINITY)
      v8 = v12 == v10;
    if (v6 != v7)
      v8 = 0;
    *((_BYTE *)v5 + 33) = v8;
    *((_BYTE *)v5 + 34) = v7 == 0;
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  float32x2_t *v13;
  float32x2_t *v14;
  char v15;
  _QWORD v16[2];
  unsigned int v17;
  _QWORD v18[2];
  int v19;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v18[0] = *(_QWORD *)v12;
        v18[1] = *(_QWORD *)(v12 + 8);
        v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(_QWORD *)a4;
        v16[1] = *((_QWORD *)a4 + 1);
        v17 = a4[4];
        if (a5)
        {
          v15 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v16;
            v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          v15 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v18;
            v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  BOOL v7;
  unsigned __int8 v8;
  unsigned __int8 v10;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(_BYTE *)(a1 + 33))
    {
      v5 = *(_BYTE *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    v7 = v6 == 1;
    if (v6 == 1)
      v8 = -1;
    else
      v8 = 0;
    v10 = v8;
    if (!v7)
      goto LABEL_14;
    return 255;
  }
  if (!v4)
    return 255;
  v5 = 0;
LABEL_7:
  v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0)
      return *a4;
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(_BYTE *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1)
    v8 = 48;
  else
    v8 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v8) + 56))(**(_QWORD **)(a1 + v8), *(unsigned int *)(a2 + 16));
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 == 1;
  if (v9 == 1)
    v11 = 48;
  else
    v11 = 56;
  v12 = *(_BYTE **)(a1 + v11);
  if (v10)
    v13 = 56;
  else
    v13 = 48;
  v14 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v13) + 32))(**(_QWORD **)(a1 + v13));
  v15 = *(unsigned int *)(a3 + 16);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v12 + 128))(*(_QWORD *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F400;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD84F408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F400;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x1020C405F07FB98);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F400;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD84F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7;
  char v8;
  __int32 v9;
  __int32 v10;
  uint64_t v12;
  char v13;

  v7 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(*(_QWORD *)&a1[2] + 136), (uint64_t)a3, a4);
  v8 = v7;
  if (v7 != -1)
  {
    v9 = a4[2].i32[0];
    LODWORD(v12) = a3[2].i32[0];
    HIDWORD(v12) = v9;
    v13 = v7;
    v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD84FC80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D4C0;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD *)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)
    v16 = v15 | 4;
  else
    v16 = v15;
  *(_QWORD *)(a1 + 8) = v16 & 0x3FFFFFFF0004 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1AD84FE78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((v4 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4, *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) != 3)? (v5 = v4 == 0): (v5 = 0), !v5))
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD850018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (_QWORD *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3
    || *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD8501A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(&v15, **(_QWORD **)(a1 + 144), v8);
  v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  v18 = INFINITY;
  v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    v10 = v7[1];
    result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v14, **(_QWORD **)(a1 + 152), v10);
    v12 = v14;
    LODWORD(v18) = HIDWORD(*(_QWORD *)&v12);
    v11.i32[0] = (__int32)v12;
    v19 = v14.f32[0];
    v17 = INFINITY;
    v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 136);
      LOBYTE(v19) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1AD850528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD850648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D4C0;
  v2 = a1[17];
  if (v2)
  {
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40FF020D0FLL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D4C0;
  v4 = (__int128 *)operator new();
  fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter((uint64_t)v4, *(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(_OWORD *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD8507E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t *)a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v5 + 10) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy((_BYTE *)*v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1AD8508F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t *a1, _BYTE **a2, uint64_t a3)
{
  *a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a1 + 32))(*(_QWORD *)*a1);
  a1[3] = -1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD850AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD850C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  float32x2_t *v13;
  float32x2_t *v14;
  char v15;
  _QWORD v16[2];
  unsigned int v17;
  _QWORD v18[2];
  int v19;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v18[0] = *(_QWORD *)v12;
        v18[1] = *(_QWORD *)(v12 + 8);
        v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(_QWORD *)a4;
        v16[1] = *((_QWORD *)a4 + 1);
        v17 = a4[4];
        if (a5)
        {
          v15 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v16;
            v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          v15 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v18;
            v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v9;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(_BYTE *)(a1 + 33))
      return 255;
    v9 = *(_BYTE *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
      v7 = -1;
    else
      v7 = 0;
    v9 = v7;
    if (v6)
      return 255;
  }
  else
  {
    if (v4)
      v5 = 0;
    else
      v5 = -1;
    v9 = v5;
    if (!v4)
      return 255;
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F380;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD850F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F380;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x1020C405F07FB98);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F380;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_BYTE **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD851478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7;
  char v8;
  __int32 v9;
  __int32 v10;
  uint64_t v12;
  char v13;

  v7 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(*(_QWORD *)&a1[2] + 136), (uint64_t)a3, a4);
  v8 = v7;
  if (v7 != -1)
  {
    v9 = a4[2].i32[0];
    LODWORD(v12) = a3[2].i32[0];
    HIDWORD(v12) = v9;
    v13 = v7;
    v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D191C0;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1AD85181C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D26808;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 3);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v19 + 4) - v8) >> 2);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 20 * v20 + 16);
      do
      {
        v14 = *v12;
        v12 += 5;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 13);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD8519C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD851A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  int32x2_t *v28;
  _QWORD *v29;
  _QWORD *i;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _BYTE v38[12];
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  void *v47;
  uint64_t v48;

  v8 = *(_QWORD *)(a4 + 24);
  if (v8 == 1 && *(_BYTE *)(a4 + 35) == 0)
  {
    v36 = 0;
    v37 = 0;
    *(_QWORD *)v38 = 0;
    LODWORD(__p) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (int32x2_t **)a3, (uint64_t *)a4, &__p, (__n128 **)&v36))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v36, __p);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
  else if (v8)
  {
    if (*(_BYTE *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (_QWORD *)a3, a4), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)|| fst::LatticeWeightTpl<float>::Member(*(float **)a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst(&v47);
      fst::Reverse<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t *)&v47, 1);
      v10 = (float32x2_t)vdup_n_s32(0x7F800000u);
      v46 = v10;
      v11 = **(_QWORD **)(v48 + 64);
      v13 = *(_QWORD *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 32);
      v14 = *(int32x2_t **)a3;
      if (v12 != v13)
      {
        v15 = (v12 - v13) / 20;
        v16 = (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v14) >> 3;
        if (v15 <= 1)
          v15 = 1;
        v17 = (int *)(v13 + 16);
        v18 = (int *)(v13 + 16);
        do
        {
          v19 = *v18;
          v18 += 5;
          v20 = v19 - 1;
          if (v16 > v19 - 1)
          {
            v21 = vadd_f32(*(float32x2_t *)(v17 - 2), (float32x2_t)v14[v20]);
            v22 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v10, (int32x2_t)v21), (float32x2_t)vzip2_s32((int32x2_t)v10, (int32x2_t)v21));
            if (v22.f32[0] >= v22.f32[1]
              && (v22.f32[0] > v22.f32[1] || (vcgt_f32(v21, v10).u8[0] & 1) == 0 && (vcgt_f32(v10, v21).u8[0] & 1) != 0))
            {
              v10 = v21;
            }
            v46 = v10;
          }
          v17 = v18;
          --v15;
        }
        while (v15);
      }
      std::vector<fst::LatticeWeightTpl<float>>::insert(a3, (uint64_t)v14, (uint64_t *)&v46);
      if (*(_BYTE *)(a4 + 32))
      {
        __p = 0;
        v43 = 0;
        v44 = 0;
        v23 = *(_DWORD *)(a4 + 16);
        LOBYTE(v36) = FLAGS_fst_default_cache_gc;
        v37 = (void *)FLAGS_fst_default_cache_gc_limit;
        *(_DWORD *)v38 = v23;
        *(_QWORD *)&v38[4] = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(&v34, (uint64_t)&v47, a3, (uint64_t)&__p, (uint64_t)&v36);
        v24 = *(float *)(a4 + 16);
        v33 = *(_QWORD *)(a4 + 36);
        fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v34, a2, (uint64_t *)&__p, v8, (float *)&v33, *(_DWORD *)(a4 + 44), *(unsigned __int8 *)(a4 + 35), v24);
        v34 = &unk_1E5D271B8;
        v25 = v35;
        if (v35)
        {
          v26 = *(_DWORD *)(v35 + 56) - 1;
          *(_DWORD *)(v35 + 56) = v26;
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        if (__p)
        {
          v43 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v27 = *(float *)(a4 + 16);
        v45 = *(_QWORD *)(a4 + 36);
        fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v47, a2, (uint64_t *)a3, v8, (float *)&v45, *(_DWORD *)(a4 + 44), *(unsigned __int8 *)(a4 + 35), v27);
      }
      v28 = *(int32x2_t **)a3;
      v29 = *(_QWORD **)(a3 + 8);
      for (i = (_QWORD *)(*(_QWORD *)a3 + 8); i != v29; ++i)
      {
        *(i - 1) = *i;
        ++v28;
      }
      *(_QWORD *)(a3 + 8) = v28;
      v47 = &unk_1E5D24A40;
      v31 = v48;
      if (v48)
      {
        v32 = *(_DWORD *)(v48 + 56) - 1;
        *(_DWORD *)(v48 + 56) = v32;
        if (!v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
  }
}

void sub_1AD851E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  _DWORD *v21;
  int v22;

  *(_QWORD *)(v19 - 64) = &unk_1E5D24A40;
  v21 = *(_DWORD **)(v19 - 56);
  if (v21)
  {
    v22 = v21[14] - 1;
    v21[14] = v22;
    if (!v22)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NaturalLess<fst::LatticeWeightTpl<float>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D216C0;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1AD8526C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NaturalLess<fst::LatticeWeightTpl<float>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  float v21;
  float v22;
  int v23;
  float v24;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  float v31;
  int v32;
  float v33;
  float v34;

  *a5 = 1;
  *a6 = 1;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v13 = 1;
    bzero(*(void **)a3, 4 * v13);
  }
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  while (1)
  {
    result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29)
        return result;
LABEL_11:
      v16 = v30;
      goto LABEL_12;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    result = v28;
    if (v15)
      break;
    if (!v28)
      goto LABEL_11;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_12:
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v16, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_44;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        break;
      if (v25[0])
      {
        v18 = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v18 = v25[1] + 20 * v27;
LABEL_19:
      v19 = *(int *)(*a2 + 4 * (int)v16);
      if ((_DWORD)v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 16)))
      {
        v20 = *(_DWORD **)a3;
        if (!a4
          || (v22 = *(float *)(v18 + 8), v21 = *(float *)(v18 + 12), (float)(v22 + v21) < 0.0)
          || v22 < 0.0 && (float)(v22 + v21) <= 0.0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        if ((v20[v19] | 2) == 2)
        {
          v34 = *(float *)(v18 + 8);
          v33 = v21;
          v32 = 2139095040;
          v31 = INFINITY;
          if (v22 == INFINITY && v33 == v31 || (v34 = v22, v33 = v21, v32 = 0, v31 = 0.0, v22 == 0.0) && v33 == v31)
            v23 = 2;
          else
            v23 = 3;
LABEL_25:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      v34 = 0.0;
      v17.n128_u32[0] = *(_DWORD *)(v18 + 8);
      v24 = *(float *)(v18 + 12);
      v34 = v17.n128_f32[0];
      v33 = v24;
      v32 = 2139095040;
      v31 = INFINITY;
      if (v17.n128_f32[0] != INFINITY || v33 != v31)
      {
        v34 = v17.n128_f32[0];
        v33 = v24;
        v32 = 0;
        v31 = 0.0;
        if (v17.n128_f32[0] != 0.0 || (v17.n128_f32[0] = v33, v33 != v31))
          *a6 = 0;
      }
      if (v25[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v25[0] + 40))(v25[0], v17);
      else
        ++v27;
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v26)
      --*v26;
LABEL_46:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    return (*(uint64_t (**)(void))(*(_QWORD *)v28 + 8))();
  return result;
}

void sub_1AD852B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1AD852CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D216C0;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D216C0;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)a1, (int *)(v6 + 4 * v8), a2))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better(uint64_t **a1, int *a2, int *a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;

  v3 = **a1;
  v4 = (float *)(v3 + 8 * *a2);
  v5 = (float *)(v3 + 8 * *a3);
  v6 = *v4 + v4[1];
  v7 = *v5 + v5[1];
  return v6 < v7 || v6 <= v7 && *v4 < *v5;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  while (1)
  {
    v4 = (2 * (_DWORD)a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 88)
      || !(result = fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)v3, (int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v4), (int *)(*(_QWORD *)(v3 + 64) + 4 * (int)a2))))
    {
      v4 = a2;
    }
    v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 88))
    {
      result = fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)v3, (int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5), (int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v4));
      if (result)
        v4 = v5;
      else
        v4 = v4;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v6 = *(_QWORD *)(v3 + 40);
    v7 = *(int *)(v6 + 4 * (int)a2);
    v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    v9 = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    v10 = *(_QWORD *)(v3 + 64);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, int32x2_t **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  fst *v12;
  _QWORD *v13;
  uint64_t v14;
  fst *v15;
  _QWORD *v16;
  int32x2_t *v17;
  int32x2_t *v18;
  unint64_t v19;
  _QWORD *v20;
  int32x2_t v21;
  int32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  int32x2_t *v28;
  int32x2_t *v29;
  int32x2_t *i;
  int32x2_t v31;
  unint64_t v32;
  __n128 *v33;
  char *v34;
  __n128 *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __n128 *v42;
  unint64_t v43;
  _QWORD *v44;
  int32x2_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int32x2_t *v56;
  int32x2_t *v57;
  unint64_t v58;
  unint64_t v59;
  __n128 *v60;
  char *v61;
  __n128 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  __n128 *v68;
  char *v69;
  float v70;
  int32x2_t v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  __n128 v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  BOOL v83;
  char v84;
  void *v85;
  float *v86;
  int32x2_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  int32x2_t *v93;
  int32x2_t *v94;
  int32x2_t *j;
  int32x2_t v96;
  unint64_t v97;
  __n128 *v98;
  char *v99;
  __n128 *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  int32x2_t *v108;
  int32x2_t *v109;
  unint64_t v110;
  unint64_t v111;
  float *v112;
  float v113;
  float v114;
  float v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  BOOL v120;
  float v121;
  float v122;
  float v123;
  BOOL v124;
  BOOL v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _DWORD *v131;
  uint64_t *v132;
  uint64_t v134;
  void *__p[2];
  unint64_t v136;
  _DWORD *v137;
  unint64_t v138;
  void *v139[3];
  float v140;
  float v141;
  float v142;
  float v143[3];

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return 1;
  memset(v139, 0, sizeof(v139));
  v9 = *a3;
  v10 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v10 == -1)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a2[1] = *a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 56))(*(_QWORD *)(v9 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v15 = fst::LogMessage::LogMessage((fst *)v143, (uint64_t)__p);
    v16 = (_QWORD *)fst::cerr(v15);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8);
    goto LABEL_51;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 9);
  v143[0] = 0.0;
  v143[0] = *((float *)a3 + 10);
  v142 = INFINITY;
  v141 = INFINITY;
  if (*(float *)__p != INFINITY || (v11.n128_f32[0] = v143[0], v143[0] != v141) || *((_DWORD *)a3 + 11) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)v143, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
LABEL_51:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v143);
    if (SHIBYTE(v136) < 0)
      operator delete(__p[0]);
    v14 = 0;
    goto LABEL_54;
  }
  v131 = a4;
  v132 = a3;
  v17 = *a2;
  v18 = a2[1];
  v19 = v18 - *a2;
  if (v19 < (int)v10)
  {
    v20 = a2 + 2;
    v21 = vdup_n_s32(0x7F800000u);
    do
    {
      if ((unint64_t)v18 >= *v20)
      {
        if ((v19 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = *v20 - (_QWORD)v17;
        v24 = v23 >> 2;
        if (v23 >> 2 <= v19 + 1)
          v24 = v19 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v25);
        v28 = (int32x2_t *)&v26[8 * v19];
        *v28 = v21;
        v22 = v28 + 1;
        v29 = *a2;
        for (i = a2[1]; i != v29; --i)
        {
          v31 = i[-1];
          v28[-1] = v31;
          --v28;
        }
        *a2 = v28;
        a2[1] = v22;
        a2[2] = (int32x2_t *)&v26[8 * v27];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v18 = v21;
        v22 = v18 + 1;
      }
      a2[1] = v22;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v139, __p);
      v33 = a5[1];
      v32 = (unint64_t)a5[2];
      if ((unint64_t)v33 >= v32)
      {
        v35 = *a5;
        v36 = v33 - *a5;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v39);
          v35 = *a5;
          v33 = a5[1];
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[16 * v36];
        *(_DWORD *)v41 = -1;
        *((_QWORD *)v41 + 1) = -1;
        v42 = (__n128 *)v41;
        if (v33 != v35)
        {
          do
          {
            v11 = v33[-1];
            v42[-1] = v11;
            --v42;
            --v33;
          }
          while (v33 != v35);
          v35 = *a5;
        }
        v34 = v41 + 16;
        *a5 = v42;
        a5[1] = (__n128 *)(v41 + 16);
        a5[2] = (__n128 *)&v40[16 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        v33->n128_u32[0] = -1;
        v33->n128_u64[1] = -1;
        v34 = (char *)&v33[1];
      }
      a5[1] = (__n128 *)v34;
      v17 = *a2;
      v18 = a2[1];
      v19 = v18 - *a2;
    }
    while (v19 < (int)v10);
  }
  v44 = a2 + 2;
  v43 = (unint64_t)a2[2];
  if ((unint64_t)v18 >= v43)
  {
    if ((v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v49 = v43 - (_QWORD)v17;
    v50 = v49 >> 2;
    if (v49 >> 2 <= v19 + 1)
      v50 = v19 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v51);
    v46 = v9;
    v53 = &v52[8 * v19];
    v55 = &v52[8 * v54];
    *(_QWORD *)v53 = 0;
    v45 = (int32x2_t *)(v53 + 8);
    v56 = *a2;
    v57 = a2[1];
    while (v57 != v56)
    {
      v58 = (unint64_t)v57[-1];
      --v57;
      v11.n128_u64[0] = v58;
      *((_QWORD *)v53 - 1) = v58;
      v53 -= 8;
    }
    *a2 = (int32x2_t *)v53;
    a2[1] = v45;
    a2[2] = (int32x2_t *)v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *v18 = 0;
    v45 = v18 + 1;
    v46 = v9;
  }
  a2[1] = v45;
  v59 = (unint64_t)a5[2];
  v60 = a5[1];
  if ((unint64_t)v60 >= v59)
  {
    v62 = *a5;
    v63 = v60 - *a5;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v65 = v59 - (_QWORD)v62;
    if (v65 >> 3 > v64)
      v64 = v65 >> 3;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
      v66 = 0xFFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v66);
      v62 = *a5;
      v60 = a5[1];
    }
    else
    {
      v67 = 0;
    }
    v68 = (__n128 *)&v67[16 * v63];
    v69 = &v67[16 * v66];
    v68->n128_u32[0] = -1;
    v68->n128_u64[1] = -1;
    v61 = (char *)&v68[1];
    if (v60 != v62)
    {
      do
      {
        v11 = v60[-1];
        v68[-1] = v11;
        --v68;
        --v60;
      }
      while (v60 != v62);
      v62 = *a5;
    }
    *a5 = v68;
    a5[1] = (__n128 *)v61;
    a5[2] = (__n128 *)v69;
    if (v62)
      operator delete(v62);
  }
  else
  {
    v60->n128_u32[0] = -1;
    v60->n128_u64[1] = -1;
    v61 = (char *)&v60[1];
  }
  a5[1] = (__n128 *)v61;
  (*(void (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v46 + 16) + 24))(*(_QWORD *)(v46 + 16), v10, v11);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v139, __p);
  v70 = INFINITY;
  v71 = vdup_n_s32(0x7F800000u);
  v72 = INFINITY;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 48))(*(_QWORD *)(v9 + 16)) & 1) != 0)
      goto LABEL_189;
    v134 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 32))(*(_QWORD *)(v9 + 16));
    *(_QWORD *)((char *)v139[0] + (((unint64_t)(int)v134 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v134);
    v73 = (float *)&(*a2)[(int)v134];
    v74 = *v73;
    v75 = v73[1];
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(__p);
    v142 = *((float *)__p + 1);
    v143[0] = *(float *)__p;
    v141 = INFINITY;
    v140 = INFINITY;
    v76.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p != INFINITY || (v76.n128_f32[0] = v142, v142 != v140))
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(__p, a1, v134, v76);
      v77 = v74 + *(float *)__p;
      v78 = v70 + v72;
      v79 = (float)(v74 + *(float *)__p) + (float)(v75 + *((float *)__p + 1));
      v80 = v72;
      v81 = v70;
      if ((float)(v70 + v72) >= v79)
      {
        if ((float)(v70 + v72) > v79 || (v70 >= v77 ? (v82 = v70 <= v77) : (v82 = 1), v80 = v72, v81 = v70, !v82))
        {
          v80 = v75 + *((float *)__p + 1);
          v81 = v74 + *(float *)__p;
        }
      }
      *(float *)__p = v70;
      v143[0] = v72;
      v142 = v81;
      v141 = v80;
      if (v70 != v81 || v143[0] != v141)
      {
        if (v78 >= v79)
        {
          if (v78 > v79 || (v70 >= v77 ? (v83 = v70 <= v77) : (v83 = 1), !v83))
          {
            v72 = v75 + *((float *)__p + 1);
            v70 = v77;
          }
        }
        *v131 = v134;
      }
      v14 = 0;
      if (v72 == -INFINITY || v70 == -INFINITY)
        break;
      if (v70 == INFINITY || v72 == INFINITY)
      {
        v14 = 0;
        if (v70 != INFINITY || v72 != INFINITY)
          break;
      }
      if (*((_BYTE *)v132 + 34))
      {
LABEL_189:
        v14 = 1;
        break;
      }
    }
    v138 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v134, __p);
    while (1)
    {
      if (__p[0])
      {
        v84 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]);
        v85 = __p[0];
        if ((v84 & 1) != 0)
        {
          v130 = 0;
          if (!__p[0])
            goto LABEL_185;
LABEL_183:
          (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
          goto LABEL_187;
        }
        if (__p[0])
        {
          v86 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
          goto LABEL_151;
        }
      }
      else if (v138 >= v136)
      {
        v130 = 0;
        goto LABEL_185;
      }
      v86 = (float *)((char *)__p[1] + 20 * v138);
LABEL_151:
      while (1)
      {
        v108 = *a2;
        v109 = a2[1];
        v110 = v109 - *a2;
        v111 = *((int *)v86 + 4);
        if (v110 > v111)
          break;
        if ((unint64_t)v109 >= *v44)
        {
          if ((v110 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v88 = *v44 - (_QWORD)v108;
          v89 = v88 >> 2;
          if (v88 >> 2 <= v110 + 1)
            v89 = v110 + 1;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v90);
          v93 = (int32x2_t *)&v91[8 * v110];
          *v93 = v71;
          v87 = v93 + 1;
          v94 = *a2;
          for (j = a2[1]; j != v94; --j)
          {
            v96 = j[-1];
            v93[-1] = v96;
            --v93;
          }
          *a2 = v93;
          a2[1] = v87;
          a2[2] = (int32x2_t *)&v91[8 * v92];
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v109 = v71;
          v87 = v109 + 1;
        }
        a2[1] = v87;
        LOBYTE(v143[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)v139, v143);
        v98 = a5[1];
        v97 = (unint64_t)a5[2];
        if ((unint64_t)v98 >= v97)
        {
          v100 = *a5;
          v101 = v98 - *a5;
          v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v103 = v97 - (_QWORD)v100;
          if (v103 >> 3 > v102)
            v102 = v103 >> 3;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0)
            v104 = 0xFFFFFFFFFFFFFFFLL;
          else
            v104 = v102;
          if (v104)
          {
            v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v104);
            v100 = *a5;
            v98 = a5[1];
          }
          else
          {
            v105 = 0;
          }
          v106 = &v105[16 * v101];
          *(_DWORD *)v106 = -1;
          *((_QWORD *)v106 + 1) = -1;
          v107 = v106;
          if (v98 != v100)
          {
            do
            {
              *((__n128 *)v107 - 1) = v98[-1];
              v107 -= 16;
              --v98;
            }
            while (v98 != v100);
            v100 = *a5;
          }
          v99 = v106 + 16;
          *a5 = (__n128 *)v107;
          a5[1] = (__n128 *)(v106 + 16);
          a5[2] = (__n128 *)&v105[16 * v104];
          if (v100)
            operator delete(v100);
        }
        else
        {
          v98->n128_u32[0] = -1;
          v98->n128_u64[1] = -1;
          v99 = (char *)&v98[1];
        }
        a5[1] = (__n128 *)v99;
      }
      v112 = (float *)&v108[v111];
      v113 = v74 + v86[2];
      v114 = v75 + v86[3];
      v115 = *v112;
      v116 = v112 + 1;
      v117 = v112[1];
      v118 = *v112 + v117;
      v119 = v113 + v114;
      if (v118 >= (float)(v113 + v114))
      {
        if (v118 > (float)(v113 + v114) || (v115 >= v113 ? (v120 = v115 <= v113) : (v120 = 1), !v120))
        {
          v117 = v75 + v86[3];
          v115 = v74 + v86[2];
        }
      }
      v143[0] = 0.0;
      v143[0] = *v112;
      v142 = 0.0;
      v142 = *v116;
      v141 = v115;
      v140 = v117;
      if (v143[0] != v115 || v142 != v140)
        break;
LABEL_177:
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
      else
        ++v138;
    }
    v121 = *v112;
    v122 = *v116;
    v123 = *v112 + *v116;
    if (v123 >= v119)
    {
      if (v123 > v119 || (v121 >= v113 ? (v124 = v121 <= v113) : (v124 = 1), !v124))
      {
        v122 = v114;
        v121 = v113;
      }
    }
    *v112 = v121;
    *v116 = v122;
    v125 = fst::LatticeWeightTpl<float>::Member(v112);
    v85 = __p[0];
    if (v125)
    {
      if (__p[0])
        v126 = (*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 48))();
      else
        v126 = v138;
      v127 = *((int *)v86 + 4);
      v128 = (uint64_t)&(*a5)[v127];
      *(_DWORD *)v128 = v134;
      *(_QWORD *)(v128 + 8) = v126;
      v129 = **(_QWORD **)(v9 + 16);
      if (((*(_QWORD *)((char *)v139[0] + ((v127 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v127) & 1) != 0)
      {
        (*(void (**)(void))(v129 + 40))();
      }
      else
      {
        (*(void (**)(void))(v129 + 24))();
        *(_QWORD *)((char *)v139[0] + (((unint64_t)*((int *)v86 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v86 + 4);
      }
      goto LABEL_177;
    }
    v130 = 1;
    if (__p[0])
      goto LABEL_183;
LABEL_185:
    if (v137)
      --*v137;
LABEL_187:
    v14 = 0;
  }
  while (!v130);
LABEL_54:
  if (v139[0])
    operator delete(v139[0]);
  return v14;
}

void sub_1AD853EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  int v20;
  _QWORD v21[3];
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = a4;
    v12 = -1;
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v10 != -1)
        break;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v24, a1, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v13, &v24);
LABEL_15:
      v10 = v11;
      v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      v12 = v13;
      if ((_DWORD)v11 == -1)
        goto LABEL_18;
    }
    v23 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v21);
    v14 = *(_QWORD *)(*a3 + 16 * v10 + 8);
    if (v21[0])
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v21[0] + 64))(v21[0], v14);
      if (v21[0])
      {
        v15 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v21[0] + 32))(v21[0]);
        goto LABEL_11;
      }
      v14 = v23;
    }
    else
    {
      v23 = *(_QWORD *)(*a3 + 16 * v10 + 8);
    }
    v15 = (_QWORD *)(v21[1] + 20 * v14);
LABEL_11:
    v19[0] = *v15;
    v19[1] = v15[1];
    v20 = v12;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 208))(a2, v13, v19);
    if (v21[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v21[0] + 8))(v21[0]);
    }
    else if (v22)
    {
      --*v22;
    }
    goto LABEL_15;
  }
  v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1AD854270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int32x2_t v5;
  _QWORD v6[3];
  int v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = *(_QWORD *)a3;
  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 20);
  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    v5 = vdup_n_s32(0x7FC00000u);
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1AD854348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t i;
  uint64_t v13;
  unsigned int v14;
  int v15;
  __n128 v16;
  int *v17;
  unint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  float32x2_t *v27;
  uint64_t v28;
  float32x2_t v29;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  float32x2_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  int *v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v56 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_66;
  LODWORD(v50) = 0;
  (*(void (**)(uint64_t, float32x2_t **))(*(_QWORD *)a1 + 128))(a1, &v48);
  for (i = 0xFFFFFFFFLL; ; i = v13)
  {
    if (v48)
    {
      if (((*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v48 + 16))(v48) & 1) != 0)
        goto LABEL_28;
      if (v48)
      {
        v13 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v48 + 24))(v48);
        goto LABEL_11;
      }
    }
    else if ((int)v50 >= (int)v49)
    {
LABEL_28:
      v13 = i;
      goto LABEL_30;
    }
    v13 = v50;
LABEL_11:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v13);
    LODWORD(v41) = HIDWORD(v43);
    LODWORD(v53) = v43;
    v58 = INFINITY;
    v57 = INFINITY;
    v11.n128_u32[0] = v43;
    if (*(float *)&v43 != INFINITY)
      break;
    v11.n128_u32[0] = v41;
    if ((_DWORD)i == -1)
      v14 = v13;
    else
      v14 = -1;
    if (*(float *)&v41 == v57)
      v15 = 4;
    else
      v15 = 2 * ((_DWORD)i != -1);
    if (*(float *)&v41 == v57)
      v13 = i;
    else
      v13 = v14;
    if ((v15 | 4) != 4)
      goto LABEL_30;
LABEL_24:
    if (v48)
      (*(void (**)(float32x2_t *, __n128))(*(_QWORD *)v48 + 32))(v48, v11);
    else
      LODWORD(v50) = v50 + 1;
  }
  if ((_DWORD)i == -1)
    goto LABEL_24;
  v13 = 0xFFFFFFFFLL;
LABEL_30:
  if (v48)
    (*(void (**)(float32x2_t *, __n128))(*(_QWORD *)v48 + 8))(v48, v11);
  if ((_DWORD)v13 != -1)
  {
    (*(void (**)(float32x2_t **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v48, a1, v13, v11);
    LODWORD(v53) = HIDWORD(v48);
    LODWORD(v43) = (_DWORD)v48;
    LODWORD(v41) = 0;
    v58 = 0.0;
    if (*(float *)&v48 == 0.0)
    {
      v16.n128_u32[0] = v53;
      if (*(float *)&v53 == v58)
      {
        v23 = 0;
        v39 = 0;
        goto LABEL_67;
      }
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v48 = (float32x2_t *)&v53;
    v49 = 0;
    v50 = 0;
    v51 = &v56;
    fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t *)&v48, 0);
    v17 = v53;
    if (v53 != (int *)v54)
    {
      v18 = 0;
      do
      {
        v19 = *v17++;
        if (v19 == v53[(int)v13])
          ++v18;
      }
      while (v17 != (int *)v54);
      if (v18 > 1)
        goto LABEL_61;
    }
    v47 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v13, &v43);
    while (2)
    {
      while (2)
      {
        if (v43)
        {
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
          v21 = v43;
          if ((v20 & 1) != 0)
            goto LABEL_55;
          if (v43)
          {
            v22 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 32))();
            v21 = v43;
            if (*(_DWORD *)(v22 + 16) == (_DWORD)v13)
            {
              v13 = 0xFFFFFFFFLL;
LABEL_55:
              if (v21)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                goto LABEL_59;
              }
LABEL_57:
              if (v46)
                --*v46;
LABEL_59:
              if ((_DWORD)v13 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_62;
              }
LABEL_61:
              v10 = 0;
              v13 = 0xFFFFFFFFLL;
LABEL_62:
              if (v53)
              {
                v54 = (float32x2_t)v53;
                operator delete(v53);
              }
              if ((_DWORD)v13 != -1)
              {
                v39 = v10;
                v23 = 0;
                goto LABEL_67;
              }
              goto LABEL_66;
            }
            if (v43)
            {
              (*(void (**)(void))(*(_QWORD *)v43 + 40))();
              continue;
            }
            goto LABEL_50;
          }
        }
        else if (v47 >= v45)
        {
          goto LABEL_57;
        }
        break;
      }
      if (*(_DWORD *)(v44 + 20 * v47 + 16) == (_DWORD)v13)
      {
        v13 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }
LABEL_50:
      ++v47;
      continue;
    }
  }
  v10 = 0;
LABEL_66:
  v39 = v10;
  v13 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v23 = 1;
LABEL_67:
  LODWORD(v45) = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 128))(a1, &v43, v16);
  while (2)
  {
    if (!v43)
    {
      if ((int)v45 >= (int)v44)
        goto LABEL_111;
      goto LABEL_73;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43))
    {
      if (v43)
      {
        v24 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 24))();
LABEL_74:
        v25 = v24 + v23;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v25)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v24 == (_DWORD)v9)
        {
          v42 = 0;
          (*(void (**)(uint64_t *, _QWORD, uint64_t *))(*a2 + 184))(a2, (v24 + v23), &v42);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v41, a1, v24);
        LODWORD(v53) = HIDWORD(v41);
        LODWORD(v48) = v41;
        v58 = INFINITY;
        v57 = INFINITY;
        v26 = *(float *)&v41 != INFINITY || *(float *)&v53 != v57;
        if ((v23 & v26) == 1)
        {
          v48 = 0;
          v49 = v41;
          LODWORD(v50) = v24 + v23;
          (*(void (**)(uint64_t *, _QWORD, float32x2_t **))(*a2 + 208))(a2, 0, &v48);
        }
        v52 = 0;
        (*(void (**)(uint64_t, uint64_t, float32x2_t **))(*(_QWORD *)a1 + 136))(a1, v24, &v48);
LABEL_85:
        if (v48)
        {
          if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)v48 + 24))(v48))
          {
            if (v48)
            {
              (*(void (**)(void))(*(_QWORD *)v48 + 8))();
              goto LABEL_106;
            }
LABEL_104:
            if (v51)
              --*(_DWORD *)v51;
LABEL_106:
            if (v43)
              (*(void (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
            else
              LODWORD(v45) = v45 + 1;
            continue;
          }
          if (v48)
          {
            v27 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)v48 + 32))();
LABEL_91:
            v28 = (v27[2].i32[0] + v23);
            v29 = v27[1];
            if ((_DWORD)v28 == (_DWORD)v13)
              v30 = v23;
            else
              v30 = 1;
            if ((v30 & 1) == 0)
            {
              (*(void (**)(int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v53, a1, v13);
              v29 = vadd_f32(v29, (float32x2_t)v53);
            }
            v53 = (int *)*v27;
            v54 = v29;
            LODWORD(v55) = v25;
            while (1)
            {
              v31 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v32 = *a2;
              if (v31 > (int)v28)
                break;
              (*(void (**)(uint64_t *))(v32 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, int **))(v32 + 208))(a2, v28, &v53);
            if (v48)
              (*(void (**)(float32x2_t *))(*(_QWORD *)v48 + 40))(v48);
            else
              ++v52;
            goto LABEL_85;
          }
        }
        else if (v52 >= v50)
        {
          goto LABEL_104;
        }
        v27 = (float32x2_t *)(v49 + 20 * v52);
        goto LABEL_91;
      }
LABEL_73:
      v24 = v45;
      goto LABEL_74;
    }
    break;
  }
  if (v43)
    (*(void (**)(void))(*(_QWORD *)v43 + 8))();
LABEL_111:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v13);
  if ((_DWORD)v13 == (_DWORD)v9)
    v33 = v23;
  else
    v33 = 1;
  if ((v33 & 1) == 0)
  {
    (*(void (**)(float32x2_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v48, a1, v9);
    v40 = (uint64_t)v48;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a2 + 184))(a2, v9, &v40);
  }
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v35 = v56 | v34;
  v36 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v39;
  v37 = fst::ReverseProperties(v35, v23);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v36 | v37, 0x3FFFFFFF0007);
}

void sub_1AD854B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(_QWORD *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::LatticeWeightTpl<float>>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  void *__p;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = (uint64_t *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 >= v7)
  {
    v9 = *(uint64_t **)a1;
    v10 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 3) + 1;
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 3;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 2 > v10)
      v10 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v26 = a1 + 16;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v12];
    __p = v15;
    v23 = v16;
    v24 = v16;
    v25 = &v15[8 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v18 = 1;
        else
          v18 = v11 >> 2;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v18);
        v16 = &v19[8 * (v18 >> 2)];
        __p = v19;
        v23 = v16;
        v25 = &v19[8 * v20];
        if (v15)
          operator delete(v15);
      }
      else
      {
        v17 = v12 + 2;
        if (v12 >= -1)
          v17 = v12 + 1;
        v16 -= 8 * (v17 >> 1);
        v23 = v16;
      }
    }
    *(_QWORD *)v16 = *a3;
    v24 = v16 + 8;
    v4 = std::vector<fst::LatticeWeightTpl<float>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v24 != v23)
      v24 += (v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (a2 == v6)
  {
    *(_QWORD *)a2 = *a3;
    *(_QWORD *)(a1 + 8) = a2 + 8;
  }
  else
  {
    std::vector<fst::LatticeWeightTpl<float>>::__move_range(a1, a2, v6, (double *)(a2 + 8));
    if (v4 <= a3)
      a3 += *(_QWORD *)(a1 + 8) > (unint64_t)a3;
    *v4 = *a3;
  }
  return v4;
}

void sub_1AD854E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, int a6, int a7, float a8)
{
  float v8;
  fst *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  float v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int32x2_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  float v35;
  float v36;
  float v37;
  char *v38;
  int *v39;
  float v40;
  float v41;
  int32x2_t v42;
  int v43;
  int *v44;
  int *v45;
  float v46;
  char *v47;
  unint64_t v48;
  float32x2_t v49;
  int v50;
  float32x2_t v51;
  float v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  void *v65;
  int32x2_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  int32x2_t *v73;
  int32x2_t *v74;
  int32x2_t *i;
  int32x2_t v76;
  unint64_t v77;
  uint64_t v78;
  float v79;
  float *v80;
  float v81;
  BOOL v82;
  float v83;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  int *v92;
  int *v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  int *v100;
  int v101;
  float32x2_t v102;
  unint64_t v103;
  unint64_t v104;
  float v105;
  BOOL v106;
  int v107;
  __int128 v108;
  uint64_t *v109[2];
  int v110;
  float v111;
  uint64_t *v112[2];
  int v113;
  float v114;
  float v115[3];
  float32x2_t v116;
  float v117;
  float v118;
  float v119;
  __int128 __p;
  unint64_t v121;
  _DWORD *v122;
  unint64_t v123;
  uint64_t *v124[2];
  int v125;
  float v126;
  void *v127;
  int32x2_t *v128;
  _QWORD v129[2];
  int v130;
  char *v131;
  char *v132;
  char *v133;
  int *v134;
  int *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;

  if (a4)
  {
    if (a7 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v17 = fst::LogMessage::LogMessage((fst *)&v137, (uint64_t)&__p);
      v18 = (_QWORD *)fst::cerr(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v137);
      if (SHIBYTE(v121) < 0)
        operator delete((void *)__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
    else
    {
      v107 = a6;
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v19);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v20);
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
        goto LABEL_160;
      v23 = *a3;
      v22 = a3[1];
      if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v22 - v23) >> 3))
        goto LABEL_160;
      v24 = (_DWORD *)(*a3 + 8 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
      LODWORD(__p) = 0;
      LODWORD(__p) = *v24;
      LODWORD(v127) = 0;
      LODWORD(v127) = v24[1];
      v116.i32[0] = 2139095040;
      v115[0] = INFINITY;
      if (*(float *)&__p == INFINITY)
      {
        v21.n128_u32[0] = v127;
        if (*(float *)&v127 == v115[0])
          goto LABEL_160;
      }
      v21.n128_f32[0] = *a5;
      v25 = *a5 + a5[1];
      if (v25 < 0.0)
        goto LABEL_160;
      v26 = v21.n128_f32[0] < 0.0;
      if (v25 > 0.0)
        v26 = 0;
      if (!v107 || v26)
      {
LABEL_160:
        if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 64))(a1, 4, 0, v21))
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
      }
      else
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v27);
        v130 = 0;
        v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        v129[1] = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 184))(a2);
        v29 = v137;
        v28 = (unint64_t)v138;
        if (0xAAAAAAAAAAAAAAABLL * ((v138 - v137) >> 2) <= v130)
        {
          v30 = vdup_n_s32(0x7F800000u);
          do
          {
            LODWORD(__p) = -1;
            *(int32x2_t *)((char *)&__p + 4) = v30;
            if (v28 >= v139)
            {
              v28 = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>((uint64_t *)&v137, (uint64_t)&__p);
              v29 = v137;
            }
            else
            {
              *(_DWORD *)v28 = -1;
              *(int32x2_t *)(v28 + 4) = v30;
              v28 += 12;
            }
            v138 = (char *)v28;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v29) >> 2) <= v130);
        }
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v32 = &v137[12 * v130];
        *((_DWORD *)v32 + 1) = 0;
        *((_DWORD *)v32 + 2) = 0;
        *(_DWORD *)v32 = v31;
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v134, &v130);
        v33 = *a3 + 8 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v35 = *(float *)v33;
        LODWORD(v34) = *(_DWORD *)(v33 + 4);
        v37 = *a5;
        v36 = a5[1];
        v127 = 0;
        v128 = 0;
        v129[0] = 0;
        v39 = v134;
        v38 = (char *)v135;
        if (v134 != v135)
        {
          v106 = 0;
          v40 = v35 + v37;
          v41 = (float)(v35 + v37) + (float)(*(float *)&v34 + v36);
          v42 = vdup_n_s32(0x7F800000u);
          do
          {
            v124[0] = (uint64_t *)&v137;
            v124[1] = a3;
            v125 = -1;
            v126 = a8;
            if (v38 - (char *)v39 >= 5)
            {
              v43 = *v39;
              v44 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(v39, v124, (unint64_t)(v38 - (char *)v39) >> 2);
              v45 = (int *)(v38 - 4);
              if (v38 - 4 == (char *)v44)
              {
                *v44 = v43;
              }
              else
              {
                *v44 = *v45;
                *v45 = v43;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v39, (uint64_t)(v44 + 1), v124, v44 + 1 - v39);
              }
            }
            v46 = *((float *)v135 - 1);
            v47 = &v137[12 * SLODWORD(v46)];
            v48 = *(int *)v47;
            *(_QWORD *)&v34 = *(_QWORD *)(v47 + 4);
            v108 = v34;
            --v135;
            if ((_DWORD)v48 == -1)
            {
              v49 = 0;
              v50 = v107;
            }
            else
            {
              v49 = (float32x2_t)v42;
              v50 = v107;
              if (v48 < (a3[1] - *a3) >> 3)
                v49 = *(float32x2_t *)(*a3 + 8 * v48);
            }
            v51 = vadd_f32(*(float32x2_t *)&v108, v49);
            v52 = vaddv_f32(v51);
            v53 = v40 < v51.f32[0];
            if (v41 > v52)
              v53 = 0;
            if (v41 < v52 || v53 || v50 != -1 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) >= v50)
              goto LABEL_150;
            v54 = v48 + 1;
            v55 = v131;
            v56 = v132;
            v57 = (v132 - v131) >> 2;
            while (v57 <= v54)
            {
              if (v56 >= v133)
              {
                v59 = v57 + 1;
                if ((v57 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v60 = v133 - v55;
                if ((v133 - v55) >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v61);
                  v55 = v131;
                  v56 = v132;
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v57];
                *(_DWORD *)v63 = 0;
                v58 = v63 + 4;
                while (v56 != v55)
                {
                  v64 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                v131 = v63;
                v132 = v58;
                v133 = &v62[4 * v61];
                if (v55)
                {
                  operator delete(v55);
                  v55 = v131;
                }
                else
                {
                  v55 = v63;
                }
              }
              else
              {
                *(_DWORD *)v56 = 0;
                v58 = v56 + 4;
              }
              v132 = v58;
              v57 = (v58 - v55) >> 2;
              v56 = v58;
            }
            if (a7)
            {
              v65 = v127;
              v66 = v128;
              v67 = ((char *)v128 - (_BYTE *)v127) >> 3;
              if (v67 <= v54)
              {
                do
                {
                  if ((unint64_t)v66 >= v129[0])
                  {
                    if ((v67 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v68 = v129[0] - (_QWORD)v65;
                    v69 = v68 >> 2;
                    if (v68 >> 2 <= v67 + 1)
                      v69 = v67 + 1;
                    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                      v70 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v70 = v69;
                    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v129, v70);
                    v73 = (int32x2_t *)&v71[8 * v67];
                    *v73 = v42;
                    v66 = v73 + 1;
                    v74 = (int32x2_t *)v127;
                    for (i = v128; i != v74; --i)
                    {
                      v76 = i[-1];
                      v73[-1] = v76;
                      --v73;
                    }
                    v127 = v73;
                    v128 = v66;
                    v129[0] = &v71[8 * v72];
                    if (v74)
                      operator delete(v74);
                  }
                  else
                  {
                    *v66++ = v42;
                  }
                  v128 = v66;
                  v65 = v127;
                  v67 = ((char *)v66 - (_BYTE *)v127) >> 3;
                }
                while (v67 <= v54);
                ++*(_DWORD *)&v131[4 * v54];
                if ((_DWORD)v48 != -1)
                {
LABEL_89:
                  v77 = *(int *)&v131[4 * v54];
                  if (v77 == a4)
                  {
                    *((_QWORD *)v127 + v54) = v108;
                  }
                  else if (v77 > a4)
                  {
                    v80 = (float *)((char *)v127 + 8 * v54);
                    v81 = v80[1];
                    v82 = *(float *)&v108 == *v80 && *((float *)&v108 + 1) == v81;
                    v83 = vabds_f32(*(float *)&v108 + *((float *)&v108 + 1), *v80 + v81);
                    if (!v82 && v83 > 0.00097656)
                      goto LABEL_150;
                  }
LABEL_115:
                  v123 = 0;
                  (*(void (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, v48, &__p);
                  while (2)
                  {
                    if ((_QWORD)__p)
                    {
                      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)__p + 24))(__p))
                      {
                        if ((_QWORD)__p)
                        {
                          (*(void (**)(void))(*(_QWORD *)__p + 8))();
                          goto LABEL_148;
                        }
LABEL_146:
                        if (v122)
                          --*v122;
LABEL_148:
                        (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&__p, a1, v48);
                        v116 = (float32x2_t)__p;
                        *(int32x2_t *)&__p = v42;
                        if (fst::operator!=<float>((float *)&v116, (float *)&__p))
                        {
                          v102 = v116;
                          v115[0] = 0.0;
                          LODWORD(v115[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
                          LODWORD(__p) = -1;
                          *(float32x2_t *)((char *)&__p + 4) = vadd_f32(*(float32x2_t *)&v108, v102);
                          std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::push_back[abi:ne180100]((uint64_t *)&v137, (uint64_t)&__p);
                          *(_QWORD *)&__p = 0;
                          *((float32x2_t *)&__p + 1) = v116;
                          *(float *)&v121 = v46;
                          (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)a2 + 208))(a2, LODWORD(v115[0]), &__p);
                          std::vector<int>::push_back[abi:ne180100]((uint64_t)&v134, v115);
                          v109[0] = (uint64_t *)&v137;
                          v109[1] = a3;
                          v110 = -1;
                          v111 = a8;
                          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v134, (uint64_t)v135, v109, v135 - v134);
                        }
                        goto LABEL_150;
                      }
                      if ((_QWORD)__p)
                      {
                        v85 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_122:
                        v87 = *(float *)(v85 + 8);
                        v86 = *(float *)(v85 + 12);
                        v88 = *(float *)(v85 + 16);
                        v116 = *(float32x2_t *)v85;
                        v117 = v87;
                        v118 = v86;
                        v119 = v88;
                        v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
                        v115[0] = v119;
                        v115[1] = *(float *)&v108 + v87;
                        v115[2] = *((float *)&v108 + 1) + v86;
                        v90 = v138;
                        if ((unint64_t)v138 >= v139)
                        {
                          v91 = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>((uint64_t *)&v137, (uint64_t)v115);
                        }
                        else
                        {
                          *(float *)v138 = v119;
                          v91 = (uint64_t)(v90 + 12);
                          *((float *)v90 + 1) = *(float *)&v108 + v87;
                          *((float *)v90 + 2) = *((float *)&v108 + 1) + v86;
                        }
                        v138 = (char *)v91;
                        v119 = v46;
                        (*(void (**)(uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)a2 + 208))(a2, v89, &v116);
                        v92 = v135;
                        if ((unint64_t)v135 >= v136)
                        {
                          v94 = v134;
                          v95 = v135 - v134;
                          v96 = v95 + 1;
                          if ((unint64_t)(v95 + 1) >> 62)
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          v97 = v136 - (_QWORD)v134;
                          if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v96)
                            v96 = v97 >> 1;
                          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                            v98 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v98 = v96;
                          if (v98)
                          {
                            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v98);
                            v94 = v134;
                            v92 = v135;
                          }
                          else
                          {
                            v99 = 0;
                          }
                          v100 = (int *)&v99[4 * v95];
                          *v100 = v89;
                          v93 = v100 + 1;
                          while (v92 != v94)
                          {
                            v101 = *--v92;
                            *--v100 = v101;
                          }
                          v134 = v100;
                          v135 = v93;
                          v136 = (unint64_t)&v99[4 * v98];
                          if (v94)
                            operator delete(v94);
                        }
                        else
                        {
                          *v135 = v89;
                          v93 = v92 + 1;
                        }
                        v135 = v93;
                        v112[0] = (uint64_t *)&v137;
                        v112[1] = a3;
                        v113 = -1;
                        v114 = a8;
                        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v134, (uint64_t)v93, v112, v93 - v134);
                        if ((_QWORD)__p)
                          (*(void (**)(_QWORD))(*(_QWORD *)__p + 40))(__p);
                        else
                          ++v123;
                        continue;
                      }
                    }
                    else if (v123 >= v121)
                    {
                      goto LABEL_146;
                    }
                    break;
                  }
                  v85 = *((_QWORD *)&__p + 1) + 20 * v123;
                  goto LABEL_122;
                }
              }
              else
              {
                ++*(_DWORD *)&v55[4 * v54];
                if ((_DWORD)v48 != -1)
                  goto LABEL_89;
              }
            }
            else
            {
              ++*(_DWORD *)&v55[4 * v54];
              if ((_DWORD)v48 != -1)
              {
                if (*(int *)&v131[4 * v54] > a4)
                  goto LABEL_150;
                goto LABEL_115;
              }
            }
            if (v106
              && (v8 != *(float *)&v108 || v105 != *((float *)&v108 + 1))
              && vabds_f32(v8 + v105, *(float *)&v108 + *((float *)&v108 + 1)) > 0.00097656)
            {
              break;
            }
            v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
            __p = 0uLL;
            *(float *)&v121 = v46;
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, v78, &__p);
            if (v106)
            {
              v106 = 1;
              goto LABEL_150;
            }
            v106 = *(int *)&v131[4 * v54] == a4;
            *((_QWORD *)&v34 + 1) = *((_QWORD *)&v108 + 1);
            if (*(_DWORD *)&v131[4 * v54] == a4)
              v8 = *(float *)&v108;
            v79 = v105;
            if (*(_DWORD *)&v131[4 * v54] == a4)
              v79 = *((float *)&v108 + 1);
            v105 = v79;
            if (*(_DWORD *)&v131[4 * v54] == a4 && (a7 & 1) == 0)
              break;
LABEL_150:
            v39 = v134;
            v38 = (char *)v135;
          }
          while (v134 != v135);
        }
        fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
        if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
        v103 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
        v104 = fst::ShortestPathProperties(v103, 0);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v104, 0x3FFFFFFF0007);
        if (v127)
        {
          v128 = (int32x2_t *)v127;
          operator delete(v127);
        }
      }
      if (v131)
      {
        v132 = v131;
        operator delete(v131);
      }
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
    }
  }
}

void sub_1AD855A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  uint64_t v44;
  void *v46;
  void *v47;
  void *v48;

  v46 = *(void **)(v44 - 224);
  if (v46)
  {
    *(_QWORD *)(v44 - 216) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v44 - 200);
  if (v47)
  {
    *(_QWORD *)(v44 - 192) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v44 - 176);
  if (v48)
  {
    *(_QWORD *)(v44 - 168) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D271B8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24A40;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  int32x2_t **v5;
  void **v6;
  int32x2_t *v7;
  int32x2_t *v8;
  unint64_t v9;
  int32x2_t v10;
  unint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int32x2_t *v20;
  int32x2_t v21;
  unint64_t v22;
  int32x2_t *v23;
  int32x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int32x2_t *v31;
  char *v32;
  char *i;
  int32x2_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int32x2_t v49;
  __n128 v50;
  int v51;
  void **v52;
  int32x2_t *v53;
  void **v54;
  void *v55;
  unint64_t j;
  unint64_t v57;
  int32x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  int32x2_t *v64;
  char *v65;
  char *v66;
  int32x2_t v67;
  unint64_t v68;
  int32x2_t *v69;
  int32x2_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  int32x2_t *v77;
  char *v78;
  char *k;
  int32x2_t v80;
  float *v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  int32x2_t **v86;
  int32x2_t *v87;
  void **v88;
  int32x2_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int32x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  int32x2_t *v99;
  int32x2_t *v100;
  int32x2_t *v101;
  int32x2_t v102;
  unint64_t v103;
  int32x2_t *v104;
  int32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  int32x2_t *v112;
  char *v113;
  char *m;
  int32x2_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  int v127;
  float *v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  float *v140;
  float v141;
  float v142;
  float v143;
  BOOL v144;
  uint64_t v145;
  char v146;
  uint64_t result;
  _BYTE *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD v151[3];
  _DWORD *v152;
  unint64_t v153;
  float v154;
  int v155;
  float v156;
  int v157;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0);
    if (!result)
      return result;
    v148 = (char *)a1 + 116;
    goto LABEL_200;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (int32x2_t **)a1[1];
  v6 = (void **)(v5 + 1);
  v7 = v5[1];
  v8 = *v5;
  v9 = v7 - *v5;
  if (v9 <= a2)
  {
    v149 = a1 + 5;
    v10 = vdup_n_s32(0x7F800000u);
    do
    {
      v11 = (unint64_t)v5[2];
      if ((unint64_t)v7 >= v11)
      {
        if ((v9 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v11 - (_QWORD)v8;
        v14 = v13 >> 2;
        if (v13 >> 2 <= v9 + 1)
          v14 = v9 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v15);
        v18 = (int32x2_t *)&v16[8 * v9];
        *v18 = v10;
        v12 = v18 + 1;
        v19 = (int32x2_t *)*v6;
        v20 = *v5;
        while (v19 != v20)
        {
          v21 = v19[-1];
          --v19;
          v18[-1] = v21;
          --v18;
        }
        *v5 = v18;
        *v6 = v12;
        v5[2] = (int32x2_t *)&v16[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v7 = v10;
        v12 = v7 + 1;
      }
      *v6 = v12;
      v23 = (int32x2_t *)a1[6];
      v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        v25 = ((uint64_t)v23 - *v149) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = v22 - *v149;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 7), v28);
        v31 = (int32x2_t *)&v30[8 * v25];
        *v31 = v10;
        v24 = v31 + 1;
        v32 = (char *)a1[5];
        for (i = (char *)a1[6]; i != v32; i -= 8)
        {
          v34 = *(int32x2_t *)(i - 8);
          v31[-1] = v34;
          --v31;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[8 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v23 = v10;
        v24 = v23 + 1;
      }
      a1[6] = v24;
      LOBYTE(v151[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v151);
      v5 = (int32x2_t **)a1[1];
      v6 = (void **)(v5 + 1);
      v7 = v5[1];
      v8 = *v5;
      v9 = v7 - *v5;
    }
    while (v9 <= a2);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v35 = (char *)a1[11];
    v36 = (char *)a1[12];
    v37 = (v36 - v35) >> 2;
    if (v37 <= a2)
    {
      v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          v40 = v37 + 1;
          if ((v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v41 = *v38 - (_QWORD)v35;
          if (v41 >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            v35 = (char *)a1[11];
            v36 = (char *)a1[12];
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v37];
          *(_DWORD *)v44 = -1;
          v39 = v44 + 4;
          while (v36 != v35)
          {
            v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            v35 = (char *)a1[11];
          }
          else
          {
            v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)v36 = -1;
          v39 = v36 + 4;
        }
        a1[12] = v39;
        v37 = (v39 - v35) >> 2;
        v36 = v39;
      }
      while (v37 <= a2);
      v8 = *(int32x2_t **)a1[1];
    }
    *(_DWORD *)&v35[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v8[a2] = 0;
  v46 = a1 + 5;
  *(_QWORD *)(a1[5] + 8 * v4) = 0;
  v47 = a1 + 8;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v48 = a1 + 13;
  v148 = (char *)a1 + 116;
  v49 = vdup_n_s32(0x7F800000u);
  v150 = (uint64_t)(a1 + 7);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_196;
    v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v52 = (void **)a1[1];
    v54 = v52 + 1;
    v53 = (int32x2_t *)v52[1];
    v55 = *v52;
    for (j = ((char *)v53 - (_BYTE *)*v52) >> 3; j <= v51; j = ((char *)v53 - (_BYTE *)*v52) >> 3)
    {
      v57 = (unint64_t)v52[2];
      if ((unint64_t)v53 >= v57)
      {
        if ((j + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v59 = v57 - (_QWORD)v55;
        v60 = v59 >> 2;
        if (v59 >> 2 <= j + 1)
          v60 = j + 1;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v52 + 2), v61);
        v64 = (int32x2_t *)&v62[8 * j];
        *v64 = v49;
        v58 = v64 + 1;
        v65 = (char *)*v54;
        v66 = (char *)*v52;
        while (v65 != v66)
        {
          v67 = *(int32x2_t *)(v65 - 8);
          v65 -= 8;
          v64[-1] = v67;
          --v64;
        }
        *v52 = v64;
        *v54 = v58;
        v52[2] = &v62[8 * v63];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v53 = v49;
        v58 = v53 + 1;
      }
      *v54 = v58;
      v69 = (int32x2_t *)a1[6];
      v68 = a1[7];
      if ((unint64_t)v69 >= v68)
      {
        v71 = ((uint64_t)v69 - *v46) >> 3;
        if ((unint64_t)(v71 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v72 = v68 - *v46;
        v73 = v72 >> 2;
        if (v72 >> 2 <= (unint64_t)(v71 + 1))
          v73 = v71 + 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v150, v74);
        v77 = (int32x2_t *)&v76[8 * v71];
        *v77 = v49;
        v70 = v77 + 1;
        v78 = (char *)a1[5];
        for (k = (char *)a1[6]; k != v78; k -= 8)
        {
          v80 = *(int32x2_t *)(k - 8);
          v77[-1] = v80;
          --v77;
        }
        a1[5] = v77;
        a1[6] = v70;
        a1[7] = &v76[8 * v75];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v69 = v49;
        v70 = v69 + 1;
      }
      a1[6] = v70;
      LOBYTE(v151[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v151);
      v52 = (void **)a1[1];
      v54 = v52 + 1;
      v53 = (int32x2_t *)v52[1];
      v55 = *v52;
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(v151, *a1, v51);
      v156 = *((float *)v151 + 1);
      v157 = v151[0];
      v155 = 2139095040;
      v154 = INFINITY;
      v50.n128_u32[0] = v151[0];
      if (*(float *)v151 != INFINITY || (v50.n128_f32[0] = v156, v156 != v154))
      {
LABEL_196:
        ++*((_DWORD *)a1 + 28);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*a1 + 64))(*a1, 4, 0, v50);
        if (!result)
          return result;
LABEL_200:
        *v148 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[8] + (((unint64_t)v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v51);
    v81 = (float *)(a1[5] + 8 * v51);
    v82 = *v81;
    v83 = v81[1];
    *(int32x2_t *)v81 = v49;
    v84 = *a1;
    v153 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v84 + 136))(v84, v51, v151);
    while (1)
    {
      if (v151[0])
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v151[0] + 24))(v151[0]) & 1) != 0)
          goto LABEL_188;
        if (v151[0])
        {
          v85 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v151[0] + 32))(v151[0]);
          goto LABEL_98;
        }
      }
      else if (v153 >= v151[2])
      {
LABEL_188:
        v146 = 1;
        goto LABEL_190;
      }
      v85 = v151[1] + 20 * v153;
LABEL_98:
      v86 = (int32x2_t **)a1[1];
      v88 = (void **)(v86 + 1);
      v87 = v86[1];
      v89 = *v86;
      v90 = v87 - *v86;
      if (v90 <= *(int *)(v85 + 16))
      {
        do
        {
          v92 = (unint64_t)v86[2];
          if ((unint64_t)v87 >= v92)
          {
            if ((v90 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v94 = v92 - (_QWORD)v89;
            v95 = v94 >> 2;
            if (v94 >> 2 <= v90 + 1)
              v95 = v90 + 1;
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
              v96 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v96 = v95;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v86 + 2), v96);
            v99 = (int32x2_t *)&v97[8 * v90];
            *v99 = v49;
            v93 = v99 + 1;
            v100 = (int32x2_t *)*v88;
            v101 = *v86;
            while (v100 != v101)
            {
              v102 = v100[-1];
              --v100;
              v99[-1] = v102;
              --v99;
            }
            *v86 = v99;
            *v88 = v93;
            v86[2] = (int32x2_t *)&v97[8 * v98];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *v87 = v49;
            v93 = v87 + 1;
          }
          *v88 = v93;
          v104 = (int32x2_t *)a1[6];
          v103 = a1[7];
          if ((unint64_t)v104 >= v103)
          {
            v106 = ((uint64_t)v104 - *v46) >> 3;
            if ((unint64_t)(v106 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v107 = v103 - *v46;
            v108 = v107 >> 2;
            if (v107 >> 2 <= (unint64_t)(v106 + 1))
              v108 = v106 + 1;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
              v109 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v109 = v108;
            v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v150, v109);
            v112 = (int32x2_t *)&v110[8 * v106];
            *v112 = v49;
            v105 = v112 + 1;
            v113 = (char *)a1[5];
            for (m = (char *)a1[6]; m != v113; m -= 8)
            {
              v115 = *(int32x2_t *)(m - 8);
              v112[-1] = v115;
              --v112;
            }
            a1[5] = v112;
            a1[6] = v105;
            a1[7] = &v110[8 * v111];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *v104 = v49;
            v105 = v104 + 1;
          }
          a1[6] = v105;
          LOBYTE(v157) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v157);
          v86 = (int32x2_t **)a1[1];
          v88 = (void **)(v86 + 1);
          v87 = v86[1];
          v89 = *v86;
          v90 = v87 - *v86;
          v91 = *(int *)(v85 + 16);
        }
        while (v90 <= v91);
      }
      else
      {
        LODWORD(v91) = *(_DWORD *)(v85 + 16);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v116 = (char *)a1[11];
        v117 = (char *)a1[12];
        v118 = (v117 - v116) >> 2;
        if (v118 <= (int)v91)
        {
          do
          {
            if ((unint64_t)v117 >= *v48)
            {
              v121 = v118 + 1;
              if ((v118 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v122 = *v48 - (_QWORD)v116;
              if (v122 >> 1 > v121)
                v121 = v122 >> 1;
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
                v123 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v123 = v121;
              if (v123)
              {
                v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v123);
                v116 = (char *)a1[11];
                v117 = (char *)a1[12];
              }
              else
              {
                v124 = 0;
              }
              v125 = &v124[4 * v118];
              *(_DWORD *)v125 = -1;
              v120 = v125 + 4;
              while (v117 != v116)
              {
                v126 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v125 - 1) = v126;
                v125 -= 4;
              }
              a1[11] = v125;
              a1[12] = v120;
              a1[13] = &v124[4 * v123];
              if (v116)
              {
                operator delete(v116);
                v116 = (char *)a1[11];
              }
              else
              {
                v116 = v125;
              }
            }
            else
            {
              *(_DWORD *)v117 = -1;
              v120 = v117 + 4;
            }
            a1[12] = v120;
            v118 = (v120 - v116) >> 2;
            LODWORD(v91) = *(_DWORD *)(v85 + 16);
            v117 = v120;
          }
          while (v118 <= (int)v91);
          v119 = (int)v91;
          v86 = (int32x2_t **)a1[1];
        }
        else
        {
          v119 = (int)v91;
        }
        v127 = *((_DWORD *)a1 + 28);
        v89 = *v86;
        if (*(_DWORD *)&v116[4 * v119] != v127)
        {
          v89[v119] = v49;
          *(int32x2_t *)(*v46 + 8 * v119) = v49;
          *(_QWORD *)(*v47 + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v119);
          *(_DWORD *)&v116[4 * v119] = v127;
          LODWORD(v91) = *(_DWORD *)(v85 + 16);
        }
      }
      v128 = (float *)&v89[(int)v91];
      v129 = v82 + *(float *)(v85 + 8);
      v130 = v83 + *(float *)(v85 + 12);
      v131 = v128[1];
      v132 = *v128;
      v133 = *v128 + v131;
      v134 = v129 + v130;
      v135 = v131;
      v136 = *v128;
      if (v133 >= (float)(v129 + v130))
      {
        if (v133 > (float)(v129 + v130)
          || (v132 >= v129 ? (v137 = v132 <= v129) : (v137 = 1), v135 = v128[1], v136 = *v128, !v137))
        {
          v135 = v83 + *(float *)(v85 + 12);
          v136 = v82 + *(float *)(v85 + 8);
        }
      }
      v138 = v131 == v135 && v132 == v136;
      if (!v138 && vabds_f32(v133, v135 + v136) > *((float *)a1 + 7))
        break;
LABEL_185:
      if (v151[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v151[0] + 40))(v151[0]);
      else
        ++v153;
    }
    if (v133 >= v134)
    {
      if (v133 > v134 || (v132 >= v129 ? (v139 = v132 <= v129) : (v139 = 1), !v139))
      {
        v131 = v83 + *(float *)(v85 + 12);
        v132 = v82 + *(float *)(v85 + 8);
      }
    }
    v140 = (float *)(*v46 + 8 * (int)v91);
    *v128 = v132;
    v128[1] = v131;
    v141 = *v140;
    v142 = v140[1];
    v143 = *v140 + v142;
    if (v143 >= v134)
    {
      if (v143 > v134 || (v141 >= v129 ? (v144 = v141 <= v129) : (v144 = 1), !v144))
      {
        v142 = v130;
        v141 = v129;
      }
    }
    *v140 = v141;
    v140[1] = v142;
    if (fst::LatticeWeightTpl<float>::Member(v128) && fst::LatticeWeightTpl<float>::Member(v140))
    {
      v145 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v85 + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v85 + 16)) & 1) != 0)
      {
        (*(void (**)(void))(v145 + 40))();
      }
      else
      {
        (*(void (**)(void))(v145 + 24))();
        *(_QWORD *)(*v47 + (((unint64_t)*(int *)(v85 + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v85 + 16);
      }
      goto LABEL_185;
    }
    v146 = 0;
    *v148 = 1;
LABEL_190:
    result = v151[0];
    if (v151[0])
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v151[0] + 8))(v151[0]);
    }
    else if (v152)
    {
      --*v152;
    }
  }
  while ((v146 & 1) != 0);
  return result;
}

void sub_1AD8567BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::LatticeWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::LatticeWeightTpl<float>>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D27CF0;
  a1[1] = v2;
  return a1;
}

void sub_1AD8569A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24A40;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

double fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = *(double **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D27CF0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 2);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD856CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v8;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(uint64_t **)(a1 + 8);
  v8 = *a3;
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v6, a2, &v8);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D20F50;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD85725C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D225C0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CCF0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD857340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FAF0;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D225C0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD85759C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD85767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD85777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD85782C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;

  *(_QWORD *)a1 = &unk_1E5D225C0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CCF0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v22);
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23)
        goto LABEL_45;
LABEL_25:
      v14 = v24;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      break;
    if (!v22)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    **(_QWORD **)(*v6 + 8 * (int)v14) = v21;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = __str.__r_.__value_.__l.__size_ + 20 * v20;
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      ++v24;
  }
  if (v22)
    (*(void (**)(void))(*(_QWORD *)v22 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD857BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 20 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 20) % 0x14uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1AD857D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  if (!*(_DWORD *)a2)
    ++a1[1];
  if (!*(_DWORD *)(a2 + 4))
    ++a1[2];
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(a1 + 3, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x666666666666666)
    v9 = 0xCCCCCCCCCCCCCCCLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, v9);
  v11 = &v10[20 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[20 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  v17 = v11 + 20;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 20) % 0x14uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1AD857F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD858098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  __n128 v19;
  char v20;
  int *v21;
  int v22;
  int v23;
  unint64_t v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  std::vector<unsigned int>::pointer v38;
  unsigned int *v39;
  std::vector<unsigned int>::pointer v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t v48;
  std::vector<unsigned int>::pointer v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  std::vector<unsigned int>::pointer v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  std::vector<unsigned int> v65;
  std::vector<unsigned int> v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  int v74;
  float v75;
  unsigned __int32 v76;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v72 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = &v72;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v7, &v67, 0);
      v9 = v72;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v72 = v14;
      memset(&v66, 0, sizeof(v66));
      memset(&v65, 0, sizeof(v65));
      v64 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v62);
      v16 = 0;
      v61 = v7;
LABEL_12:
      if (v62)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62))
        {
          if (v62)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v62 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v66.__end_ = v66.__begin_;
            v65.__end_ = v65.__begin_;
            if (v12)
              std::vector<int>::reserve(&v66, v18);
            if (v15)
              std::vector<int>::reserve(&v65, v18);
            v71 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v67);
            v20 = 1;
            while (1)
            {
              if (v67)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
                {
                  if (v67)
                  {
                    (*(void (**)(void))(*(_QWORD *)v67 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v70)
                      --*(_DWORD *)v70;
                  }
                  v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v48 = v66.__end_ - v66.__begin_;
                    if (v48 <= 2)
                      v48 = 2;
                    v49 = v66.__begin_ + 1;
                    v50 = *v66.__begin_;
                    v51 = v48 - 1;
                    while (1)
                    {
                      v53 = *v49++;
                      v52 = v53;
                      if (v53 == v50)
                        break;
                      v50 = v52;
                      if (!--v51)
                        goto LABEL_103;
                    }
                    v72 = v72 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1)
                        v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(&v67, v61, v17);
                      v75 = *((float *)&v67 + 1);
                      v76 = v67;
                      v74 = 2139095040;
                      v73 = INFINITY;
                      if (*(float *)&v67 == INFINITY && v75 == v73)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 40))(v61, v17) != 1)
                          v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v75 = *((float *)&v67 + 1);
                        v76 = v67;
                        v74 = 0;
                        v73 = 0.0;
                        if (*(float *)&v67 != 0.0 || v75 != v73)
                          v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v62)
                        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
                      else
                        ++v64;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15)
                      goto LABEL_114;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v54 = v65.__end_ - v65.__begin_;
                    if (v54 <= 2)
                      v54 = 2;
                    v55 = v65.__begin_ + 1;
                    v56 = *v65.__begin_;
                    v57 = v54 - 1;
                    while (1)
                    {
                      v59 = *v55++;
                      v58 = v59;
                      if (v59 == v56)
                        break;
                      v56 = v58;
                      if (!--v57)
                        goto LABEL_114;
                    }
                    v72 = v72 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v67)
                {
                  v21 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v67 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v71 >= v69)
              {
                goto LABEL_94;
              }
              v21 = (int *)(v68 + 20 * v71);
LABEL_29:
              v22 = *v21;
              v23 = *v21;
              if (*v21 != v21[1])
              {
                v72 = v72 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v23 = v21[1];
              }
              if (v22 | v23)
              {
                if (v22)
                {
                  if (v23)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v24 = v72;
              }
              else
              {
                v24 = v72 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v72 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v23)
              {
LABEL_35:
                if ((v20 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v72 = v72 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v20 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v22 < (int)a2)
                v72 = v72 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v23 < SHIDWORD(a2))
                v72 = v72 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v76 = 0;
              v19.n128_u32[0] = v21[2];
              v25 = *((float *)v21 + 3);
              v76 = v19.n128_u32[0];
              v75 = v25;
              v74 = 0;
              v73 = 0.0;
              if (v19.n128_f32[0] != 0.0 || v75 != v73)
              {
                v76 = v19.n128_u32[0];
                v75 = v25;
                v74 = 2139095040;
                v73 = INFINITY;
                if (v19.n128_f32[0] != INFINITY || (v19.n128_f32[0] = v75, v75 != v73))
                  v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = v21[4];
              if (v26 <= (int)v17)
                v72 = v72 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              a2 = *(_QWORD *)v21;
              if (v12)
              {
                end = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  begin = v66.__begin_;
                  v30 = v66.__end_ - v66.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_139;
                  v32 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v33);
                    begin = v66.__begin_;
                    end = v66.__end_;
                    LODWORD(v35) = *v21;
                  }
                  else
                  {
                    v34 = 0;
                    v35 = *(_QWORD *)v21;
                  }
                  v36 = (unsigned int *)&v34[4 * v30];
                  *v36 = v35;
                  v28 = v36 + 1;
                  while (end != begin)
                  {
                    v37 = *--end;
                    *--v36 = v37;
                  }
                  v66.__begin_ = v36;
                  v66.__end_ = v28;
                  v66.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v66.__end_ = a2;
                  v28 = end + 1;
                }
                v66.__end_ = v28;
              }
              if (v15)
              {
                v38 = v65.__end_;
                if (v65.__end_ >= v65.__end_cap_.__value_)
                {
                  v40 = v65.__begin_;
                  v41 = v65.__end_ - v65.__begin_;
                  v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 62)
LABEL_139:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v43 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
                  if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v42)
                    v42 = v43 >> 1;
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                    v44 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v44 = v42;
                  if (v44)
                  {
                    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v44);
                    v40 = v65.__begin_;
                    v38 = v65.__end_;
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = (unsigned int *)&v45[4 * v41];
                  *v46 = v21[1];
                  v39 = v46 + 1;
                  while (v38 != v40)
                  {
                    v47 = *--v38;
                    *--v46 = v47;
                  }
                  v65.__begin_ = v46;
                  v65.__end_ = v39;
                  v65.__end_cap_.__value_ = (unsigned int *)&v45[4 * v44];
                  if (v40)
                    operator delete(v40);
                }
                else
                {
                  *v65.__end_ = v21[1];
                  v39 = v38 + 1;
                }
                v65.__end_ = v39;
              }
              if (v67)
              {
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v67 + 40))(v67, v19);
                v20 = 0;
              }
              else
              {
                v20 = 0;
                ++v71;
              }
            }
          }
LABEL_17:
          v17 = v64;
          goto LABEL_18;
        }
        if (v62)
          (*(void (**)(void))(*(_QWORD *)v62 + 8))();
      }
      else if ((int)v64 < v63)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v65.__begin_)
      {
        v65.__end_ = v65.__begin_;
        operator delete(v65.__begin_);
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      v9 = v72;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1AD858914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 16);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 16);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 16);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 16), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 20 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19738;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD859088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19738;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19738;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19738;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19738;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD859194(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A6F0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD85927C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A6F0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD859688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 20 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(20 * v24, 0x1000040A86A77D5uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_DWORD **)(a1 + 16);
    v15 = *(_DWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[5 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 5;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(_QWORD *)(v15 - 5) = *(_QWORD *)v23;
    *(_QWORD *)(v15 - 3) = *(_QWORD *)(v23 + 8);
    *(v15 - 1) = *(_DWORD *)(v23 + 16);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 5;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 20 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1AD8598B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v31[8];
  void *v32[2];
  void *v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int data;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v34 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v32 = 0u;
  v6 = -1;
  v37 = 0;
  v38 = 0;
  v36 = -1;
  v36 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v37 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v37 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v31);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v30 = v7;
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v13);
      data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 / 20;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = v15 + 8;
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 8);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 4);
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write(v19, (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 + 8);
          std::ostream::write();
          v19 += 20;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
    v7 = v30;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v37 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v37 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v31, v6);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  if (SHIBYTE(v33[0]) < 0)
    operator delete(v32[0]);
  return updated;
}

void sub_1AD859D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD85A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1AD85A2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD85A578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 20);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), (uint64_t)a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v31 = *(int64x2_t *)(v16 + 8);
        v27 = 0;
        v28 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 2);
      }
      else
      {
        v21 = 0;
        v27 = 0;
        v22 = (int *)(v18 + 16);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 2);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v19 = vaddq_s64(v19, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v21 != v27)
            {
              v24 = v18 + 20 * v27;
              *(_QWORD *)v24 = *((_QWORD *)v22 - 2);
              *(_QWORD *)(v24 + 8) = *((_QWORD *)v22 - 1);
              *(_DWORD *)(v24 + 16) = v23;
              v14 = *v4;
            }
            ++v27;
          }
          ++v21;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 2);
          v22 += 5;
        }
        while (v21 < v28);
        v31 = v19;
      }
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs((_QWORD *)v16, v28 - v27);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v29 = *(int *)(a1 + 88);
  if ((_DWORD)v29 == -1)
  {
    v30 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v30 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v29];
  }
  v33.__end_ = v30;
  operator delete(v30);
}

void sub_1AD85A898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 2);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 20 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

double std::vector<fst::LatticeWeightTpl<float>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, double *a4)
{
  double *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double result;
  double *v10;
  uint64_t v11;

  v4 = *(double **)(a1 + 8);
  v5 = (char *)v4 - (char *)a4;
  v6 = (double *)(a2 + (char *)v4 - (char *)a4);
  v7 = v4;
  while ((unint64_t)v6 < a3)
  {
    v8 = *v6++;
    result = v8;
    *v7++ = v8;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v10 = v4 - 1;
    v11 = 8 * (v5 >> 3);
    do
    {
      result = *(double *)(a2 - 8 + v11);
      *v10-- = result;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t *std::vector<fst::LatticeWeightTpl<float>>::__swap_out_circular_buffer(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  result = (uint64_t *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (uint64_t *)a2[1];
    do
    {
      v8 = *--v7;
      *--v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  for (i = (_QWORD *)a2[2]; a3 != v9; ++i)
  {
    v11 = *a3++;
    *i = v11;
  }
  a2[2] = i;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(a1, a2);
  }
  else
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *(_QWORD *)(v3 + 4) = *(_QWORD *)(a2 + 4);
    result = v3 + 12;
  }
  a1[1] = result;
  return result;
}

void fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1AD85AC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v7, v9);
  v11 = &v10[12 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[12 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_QWORD *)(v11 + 4) = *(_QWORD *)(a2 + 4);
  v17 = v11 + 12;
  std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1AD85ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_QWORD *)(v4 + 4) = *(_QWORD *)(v2 + 4);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  float32x2_t v6;
  float32x2_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  unsigned __int8 v16;
  int32x2_t v17;
  int32x2_t v18;

  v3 = **a1;
  v4 = *(int *)(v3 + 12 * a2);
  v5 = *((_DWORD *)a1 + 4);
  v6 = 0;
  v7 = 0;
  if ((_DWORD)v4 != v5)
  {
    v8 = *a1[1];
    if (v4 >= (a1[1][1] - v8) >> 3)
      v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
    else
      v7 = *(float32x2_t *)(v8 + 8 * v4);
  }
  v9 = *(int *)(v3 + 12 * a3);
  if ((_DWORD)v9 != v5)
  {
    v10 = *a1[1];
    if (v9 >= (a1[1][1] - v10) >> 3)
      v6 = (float32x2_t)vdup_n_s32(0x7F800000u);
    else
      v6 = *(float32x2_t *)(v10 + 8 * v9);
  }
  v11 = vadd_f32(v7, *(float32x2_t *)(v3 + 12 * a2 + 4));
  v12 = vadd_f32(v6, *(float32x2_t *)(v3 + 12 * a3 + 4));
  v13 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v12, (int32x2_t)v11), (float32x2_t)vzip2_s32((int32x2_t)v12, (int32x2_t)v11));
  if ((_DWORD)v4 == v5 && (_DWORD)v9 != v5)
  {
    if (v13.f32[0] >= v13.f32[1] && ((vcgt_f32(v11, v12).u8[0] & 1) == 0 || v13.f32[0] > v13.f32[1]))
    {
      v17 = vceq_f32(v11, v12);
      if ((v17.i32[0] & v17.i32[1] & 1) == 0)
      {
        v16 = vabds_f32(v13.f32[1], v13.f32[0]) <= *((float *)a1 + 5);
        return v16 & 1;
      }
    }
    goto LABEL_25;
  }
  if ((_DWORD)v4 == v5 || (_DWORD)v9 != v5)
  {
    if (v13.f32[0] < v13.f32[1])
    {
LABEL_25:
      v16 = 1;
      return v16 & 1;
    }
    if (v13.f32[0] <= v13.f32[1])
    {
      v16 = vcgt_f32(v11, v12).u8[0];
      return v16 & 1;
    }
LABEL_30:
    v16 = 0;
    return v16 & 1;
  }
  if (v13.f32[0] < v13.f32[1] || (v16 = 0, (vcgt_f32(v11, v12).u8[0] & 1) != 0) && v13.f32[0] <= v13.f32[1])
  {
    v18 = vceq_f32(v11, v12);
    if ((v18.i32[0] & v18.i32[1] & 1) == 0)
    {
      v16 = vabds_f32(v13.f32[1], v13.f32[0]) > *((float *)a1 + 5);
      return v16 & 1;
    }
    goto LABEL_30;
  }
  return v16 & 1;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DAB8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1AD85B298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D271B8;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D271B8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

double fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Final@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1AD85B4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20068;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C268;
  *a2 = v4;
  return result;
}

void sub_1AD85B574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20768;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (_QWORD *)a1[20];
  if (v15)
    v15[1] = *v15;
  return a1;
}

void sub_1AD85B750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21D60;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21D60;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1AD85B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1AD85BA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1AD85BB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = -1;
    v5 = operator new(0x18uLL);
    *(_QWORD *)v5 = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[2] = v3;
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = 0;
    return fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (uint64_t **)v4);
  }
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, float *a3@<X8>)
{
  float **v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  uint64_t v13;

  v4 = *(float ***)(*(_QWORD *)(*(_QWORD *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  v5 = *v4;
  if (*v4)
  {
    v6 = result;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v6 + 136) + 32))(&v13, *(_QWORD *)(v6 + 136), *((unsigned int *)v5 + 2));
      v7 = v5[3] + *(float *)&v13;
      v8 = v5[4] + *((float *)&v13 + 1);
      v10 = *a3;
      v9 = a3[1];
      v11 = *a3 + v9;
      if (v11 >= (float)(v7 + v8))
      {
        if (v11 > (float)(v7 + v8) || (v10 >= v7 ? (v12 = v10 <= v7) : (v12 = 1), !v12))
        {
          v9 = v5[4] + *((float *)&v13 + 1);
          v10 = v5[3] + *(float *)&v13;
        }
      }
      *a3 = v10;
      a3[1] = v9;
      result = fst::LatticeWeightTpl<float>::Member(a3);
      if ((result & 1) == 0)
        *(_QWORD *)(v6 + 8) |= 4uLL;
      v5 = *(float **)v5;
    }
    while (v5);
  }
  return result;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D225C0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B598;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1AD85BDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1AD85BEA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B598;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1AD85BFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD85C034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20768;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21D60;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20768;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1AD85C24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21D60;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21D60;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1AD85C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D225C0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B598;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1AD85C5DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x38uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>>((char *)(a1 + 24), v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2));
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

char *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      v7 += 20;
      a2 += 20;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD85C8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  __int32 v15;
  float32x2_t v16;
  _QWORD v17[3];
  _DWORD *v18;
  unint64_t v19;

  v5 = **(uint64_t ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_17;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v19 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v17);
    while (1)
    {
      if (!v17[0])
      {
        if (v19 >= v17[2])
          goto LABEL_14;
LABEL_8:
        v8 = (float32x2_t *)(v17[1] + 20 * v19);
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v17[0] + 24))(v17[0]))
        break;
      if (!v17[0])
        goto LABEL_8;
      v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)v17[0] + 32))();
LABEL_9:
      v15 = v8[2].i32[0];
      v16 = vadd_f32(*(float32x2_t *)((char *)v5 + 12), v8[1]);
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::FilterArc(a1[22], v8, (uint64_t)(v5 + 1), (uint64_t)&v15, a3);
      if (v17[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v17[0] + 40))(v17[0]);
      else
        ++v19;
    }
    if (v17[0])
    {
      (*(void (**)(void))(*(_QWORD *)v17[0] + 8))();
      goto LABEL_16;
    }
LABEL_14:
    if (v18)
      --*v18;
LABEL_16:
    v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_17:
  v11 = *a3;
  v9 = a3 + 1;
  v10 = v11;
  if (v11 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v10 + 5));
      v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != (uint64_t *)v9);
  }
}

void sub_1AD85CAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v7[2];
  uint64_t v8;
  int State;

  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  v8 = *(_QWORD *)(a3 + 4);
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 16));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::PushArc(MutableState, (uint64_t)v7);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 3);
  v6 = *((_QWORD *)MutableState + 4) - v5;
  if (v6)
  {
    v7 = v6 / 20;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 16);
    do
    {
      v11 = *v9;
      v9 += 5;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  _DWORD *v14;

  v14 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v14);
  v8 = v7;
  if (*((_DWORD *)v7 + 10) == -1)
  {
    v11 = *a2;
    v9 = operator new();
    v10 = 0;
    *(_QWORD *)v9 = 0;
    *((_DWORD *)v8 + 10) = v11;
    *(uint64_t **)((char *)v8 + 44) = (uint64_t *)vdup_n_s32(0x7F800000u);
    v8[7] = (uint64_t *)v9;
    *(_BYTE *)(v9 + 8) = 0;
  }
  else
  {
    v9 = (uint64_t)v7[7];
    v10 = *(_QWORD *)v9;
  }
  v12 = (char *)operator new(0x18uLL);
  *(_QWORD *)v12 = v10;
  *((_DWORD *)v12 + 2) = *(_DWORD *)a4;
  *(_QWORD *)(v12 + 12) = *(_QWORD *)(a4 + 4);
  *(_QWORD *)v9 = v12;
  return 1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  float32x4_t v20;
  int8x8_t v21;
  int8x8_t v22;
  float32x4_t v23;
  int16x4_t v24;
  float32x2_t v25;
  _QWORD *v26;
  unsigned int v27;
  float v28;
  int32x2_t v29;
  _QWORD v30[34];

  v4 = *(uint64_t ***)(a2 + 16);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (*v4)
  {
    v6 = *v4;
    do
    {
      v8 = *(float *)(a2 + 4);
      v7 = *(float *)(a2 + 8);
      v9 = *((float *)v6 + 3);
      v10 = *((float *)v6 + 4);
      if ((float)(v8 + v7) >= (float)(v9 + v10))
      {
        if ((float)(v8 + v7) > (float)(v9 + v10) || (v8 >= v9 ? (v11 = v8 <= v9) : (v11 = 1), !v11))
        {
          v7 = *((float *)v6 + 4);
          v8 = *((float *)v6 + 3);
        }
      }
      *(float *)(a2 + 4) = v8;
      *(float *)(a2 + 8) = v7;
      if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
      {
        v17 = (uint64_t *)*v6;
        v5 = v6;
      }
      else
      {
        v13 = *((float *)v5 + 3);
        v12 = *((float *)v5 + 4);
        v14 = *((float *)v6 + 3);
        v15 = *((float *)v6 + 4);
        if ((float)(v13 + v12) >= (float)(v14 + v15))
        {
          if ((float)(v13 + v12) > (float)(v14 + v15) || (v13 >= v14 ? (v16 = v13 <= v14) : (v16 = 1), !v16))
          {
            v12 = *((float *)v6 + 4);
            v13 = *((float *)v6 + 3);
          }
        }
        *((float *)v5 + 3) = v13;
        *((float *)v5 + 4) = v12;
        if (!fst::LatticeWeightTpl<float>::Member((float *)v5 + 3))
          *(_QWORD *)(a1 + 8) |= 4uLL;
        v17 = (uint64_t *)*v6;
        v18 = (_QWORD *)*v5;
        *v5 = *(_QWORD *)*v5;
        operator delete(v18);
      }
      v6 = v17;
    }
    while (v17);
    v19 = *v4;
    if (*v4)
    {
      v20 = (float32x4_t)xmmword_1AE143D40;
      v21 = (int8x8_t)vdup_n_s32(0x7F800000u);
      do
      {
        v22 = (int8x8_t)vsub_f32(*(float32x2_t *)((char *)v19 + 12), *(float32x2_t *)(a2 + 4));
        *(int8x8_t *)v23.f32 = v22;
        *(int8x8_t *)&v23.u32[2] = v22;
        v24.i32[0] = vmovn_s32(vceqq_f32(v23, v20)).u32[0];
        v24.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)))).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v24, 0xFuLL))) & 1) != 0)
        {
          v25 = (float32x2_t)v21;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v30);
            v25 = (float32x2_t)v21;
            v20 = (float32x4_t)xmmword_1AE143D40;
          }
        }
        else
        {
          v27 = *(float *)v22.i32 == INFINITY;
          if (*(float *)&v22.i32[1] == INFINITY)
            v27 = 1;
          v25 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v27), 0x1FuLL)), v21, v22);
        }
        *(uint64_t *)((char *)v19 + 12) = (uint64_t)v25;
        v28 = vaddv_f32(v25);
        v29 = (int32x2_t)0x7F0000007FLL;
        if (v28 != -INFINITY)
        {
          v29 = (int32x2_t)v21;
          if (v28 != INFINITY)
          {
            v29.i32[0] = *(_DWORD *)(a1 + 144);
            v29 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v25, (float32x2_t)vdup_lane_s32(v29, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)v29.i32);
          }
        }
        *(uint64_t *)((char *)v19 + 12) = (uint64_t)v29;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
  }
}

void sub_1AD85CF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x40uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_DWORD *)v11 + 10) = -1;
    *(int32x2_t *)(v11 + 44) = vdup_n_s32(0x7F800000u);
    *((_QWORD *)v11 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t v22;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((_BYTE *)v6[1] - (_BYTE *)*v6) >> 3))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (float *)&v22);
      v7 = (unint64_t)v6[2];
      v8 = v6[1];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v6 + 2), v13);
        v15 = &v14[8 * v10];
        v17 = &v14[8 * v16];
        *(_QWORD *)v15 = v22;
        v9 = v15 + 8;
        v18 = (char *)*v6;
        for (i = (char *)v6[1]; i != v18; i -= 8)
        {
          v20 = *((_QWORD *)i - 1);
          *((_QWORD *)v15 - 1) = v20;
          v15 -= 8;
        }
        *v6 = v15;
        v6[1] = v9;
        v6[2] = v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v8 = v22;
        v9 = v8 + 1;
      }
      v6[1] = v9;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;

  v8 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v8;
    if (v8)
    {
      v5 = *v8;
      if (*v8)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *v4 = 0;
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, float *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int32x2_t v6;
  float v7;
  unint64_t v8;
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  BOOL v13;

  *a3 = INFINITY;
  v3 = *a2;
  if (*a2)
  {
    v4 = **(_QWORD **)(result + 152);
    v5 = 2139095040;
    v6 = vdup_n_s32(0x7F800000u);
    v7 = INFINITY;
    do
    {
      v8 = *((int *)v3 + 2);
      v9 = (float32x2_t)v6;
      if ((*(_QWORD *)(*(_QWORD *)(result + 152) + 8) - v4) >> 3 > v8)
        v9 = *(float32x2_t *)(v4 + 8 * v8);
      v10 = (int32x2_t)vadd_f32(v9, *(float32x2_t *)((char *)v3 + 12));
      v11 = (float32x2_t)vdup_lane_s32(v10, 0);
      v11.f32[0] = v7;
      v12 = vadd_f32(v11, (float32x2_t)__PAIR64__(v10.u32[1], v5));
      if (v12.f32[0] >= v12.f32[1])
      {
        if (v12.f32[0] > v12.f32[1] || (v7 >= *(float *)v10.i32 ? (v13 = v7 <= *(float *)v10.i32) : (v13 = 1), !v13))
        {
          v5 = v10.i32[1];
          v7 = *(float *)v10.i32;
        }
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    *a3 = v7;
  }
  else
  {
    v5 = 2139095040;
  }
  *((_DWORD *)a3 + 1) = v5;
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(uint64_t ****)(v5 + 104);
    else
      v6 = (uint64_t ***)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  if (a3 == -1)
    v6 = *(uint64_t **)(v3 + 104);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a3);
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t *i;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = *((char *)a2 + 8);
  for (i = *a2; i; i = (uint64_t *)*i)
  {
    v4 = *((_DWORD *)i + 3);
    v5 = *((_DWORD *)i + 4);
    v6 = __CFADD__(v5, v4);
    v7 = (v5 + v4);
    if (v6)
      v8 = 0x100000000;
    else
      v8 = 0;
    result ^= (2 * result) ^ (32 * *((int *)i + 2)) ^ ((unint64_t)*((int *)i + 2) >> 59) ^ (v8 | v7);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8))
    return 0;
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)*v3;
    if (!v2 || v3 == 0)
      break;
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0;
  }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(uint64_t ****)(v8 + 104);
    else
      v9 = (uint64_t ***)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD85D8BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + *(_QWORD *)(a1 + 112) + 56;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(a1 + 3, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  int32x2_t *v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 12) |= 4u;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve((uint64_t *)MutableState + 3, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(int32x2_t **)(a1 + 80);
  if (v5[6].i32[1])
  {
    v5[6].i32[0] &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  *v5 = vdup_n_s32(0x7F800000u);
  v5[6] = 0;
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 12) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1AD85DE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

double fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *MutableState;
  uint64_t v8;
  double **v9;
  double *v10;
  double result;
  uint64_t v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 64))(&v12, a1, a2);
    v6 = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(a1[15], a2);
    *(_QWORD *)MutableState = v6;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v8 = a1[15];
  if (*(_DWORD *)(v8 + 76) == (_DWORD)a2)
    v9 = (double **)(v8 + 80);
  else
    v9 = (double **)(*(_QWORD *)(v8 + 8) + 8 * ((int)a2 + 1));
  v10 = *v9;
  result = *v10;
  *a3 = *(_QWORD *)v10;
  return result;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DAB8;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1AD85E074(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D271B8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 3);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v19 + 4) - v8) >> 2);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 20 * v20 + 16);
      do
      {
        v14 = *v12;
        v12 += 5;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 13);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD85E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD85E2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string::value_type *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9)
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v16 = 0x124924924924924;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = (std::string *)&v17[224 * v8];
  v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1AD85E4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *__p[2];
  char v20;
  __int128 *v21[3];
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  std::string v26;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v26 = *(std::string *)a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  v17 = *a7;
  v18 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  memset(v21, 0, sizeof(v21));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (__int128 *)&v26, v14, v15, v16, v18 != 0, 0, (__int128 *)v24, (float)v17, (__int128 *)v22, v21, 0, (__int128 *)__p, 0, 0);
  if (v20 < 0)
    operator delete(__p[0]);
  __p[0] = v21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1AD85E648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<std::string,float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    v6 = 32 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1AD85E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::string>>::vector(_QWORD *a1, unint64_t a2, __int128 **a3)
{
  std::string *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (std::string *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[a2];
    v9 = 8 * v7;
    do
    {
      v6->__r_.__value_.__r.__words[0] = 0;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v6++, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1AD85E7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](v4, i - 48);
  }
}

std::vector<unsigned int> *kaldi::UniformRandomNumber::UniformRandomNumber(std::vector<unsigned int> *this, int a2, unsigned int *__n, unsigned int *a4)
{
  std::vector<unsigned int> *v5;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;

  this->__begin_ = __n;
  this->__end_ = a4;
  LODWORD(this->__end_cap_.__value_) = a2;
  v5 = std::vector<unsigned int>::vector(this + 1, (std::vector<unsigned int>::size_type)__n);
  begin = this->__begin_;
  if (this->__begin_)
  {
    v7 = 0;
    v8 = v5->__begin_;
    do
    {
      v8[(_QWORD)v7] = (_DWORD)v7 + 1;
      v7 = (unsigned int *)((char *)v7 + 1);
    }
    while (begin != v7);
  }
  return this;
}

void kaldi::UniformRandomNumber::~UniformRandomNumber(kaldi::UniformRandomNumber *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::UniformRandomNumber::SetRandomSeeds(kaldi::UniformRandomNumber *this, int a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;

  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = (_DWORD *)*((_QWORD *)v4 - 2);
  *((_QWORD *)v4 - 1) = v7;
  if ((unint64_t)v7 >= v6)
  {
    v9 = v5 - (_QWORD)v7;
    v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1)
      v10 = 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v4, v11);
    v13 = (char *)*((_QWORD *)this + 3);
    v14 = (char *)*((_QWORD *)this + 4);
    v16 = &v12[v15];
    *v12 = a2;
    v8 = v12 + 1;
    while (v14 != v13)
    {
      v17 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *--v12 = v17;
    }
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v16;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 4) = v8;
  *(_QWORD *)this = 1;
}

float kaldi::UniformRandomNumber::RandUniform(kaldi::UniformRandomNumber *this, uint64_t a2)
{
  return (float)rand_r((unsigned int *)(*((_QWORD *)this + 3) + 4 * a2)) * 4.6566e-10;
}

uint64_t kaldi::UniformRandomNumber::Rand(kaldi::UniformRandomNumber *this, uint64_t a2)
{
  return (rand_r((unsigned int *)(*((_QWORD *)this + 3) + 4 * a2)) % (*((_DWORD *)this + 4) + 1));
}

kaldi::GaussRandomNumber *kaldi::GaussRandomNumber::GaussRandomNumber(kaldi::GaussRandomNumber *this, const kaldi::UniformRandomNumber *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_QWORD *)((char *)this + 16);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 2, v4);
  std::vector<short>::vector((_QWORD *)this + 5, *(_QWORD *)a2);
  *((_DWORD *)this + 16) = 2;
  if (*((_QWORD *)this + 1))
  {
    v6 = 0;
    v7 = 0;
    v8 = 2;
    do
    {
      std::vector<float>::resize(*v5 + v6, v8);
      v8 = *((_DWORD *)this + 16);
      *(_WORD *)(*((_QWORD *)this + 5) + 2 * v7++) = v8;
      v6 += 24;
    }
    while (*((_QWORD *)this + 1) > v7);
  }
  return this;
}

void sub_1AD85EEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::GaussRandomNumber::Rand(kaldi::GaussRandomNumber *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v12;
  float32x2_t v13;
  float v14;
  float v15;
  float64x2_t v16;
  float64x2_t v17;
  float32x2_t v18;

  v3 = a2;
  v4 = *((_QWORD *)this + 5);
  v5 = *(__int16 *)(v4 + 2 * a2);
  if (*((_DWORD *)this + 16) <= v5)
  {
    __asm
    {
      FMOV            V1.2D, #2.0
      FMOV            V0.2D, #-1.0
    }
    v16 = _Q0;
    v17 = _Q1;
    do
    {
      v12 = rand_r((unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 4 * v3));
      v13 = vcvt_f32_f64(vmlaq_f64(v16, v17, vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(rand_r((unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 4 * v3)), v12)), (float32x2_t)0x3000000030000000))));
      v14 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v13, v13).i32[1]), v13.f32[0], v13.f32[0]);
    }
    while (v14 >= 1.0);
    v18 = v13;
    v15 = logf(v14) * -2.0 / v14;
    **(float32x2_t **)(*((_QWORD *)this + 2) + 24 * v3) = vmul_n_f32(v18, sqrtf(v15));
    *(_WORD *)(*((_QWORD *)this + 5) + 2 * v3) = 1;
  }
  else
  {
    *(_WORD *)(v4 + 2 * a2) = v5 + 1;
  }
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AD85F0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1AD85F144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t kaldi::quasar::Vocab::Vocab(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double *v20;
  double *v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  long double *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  void **v42;
  long double __x;
  void *__p[2];
  uint64_t v45;
  void **v46;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = a1 + 8;
  v9 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  v10 = a1 + 56;
  v11 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  v12 = (uint64_t *)(a1 + 120);
  v42 = (void **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v39 = (unsigned __int8 *)(a1 + 32);
  v40 = (unsigned __int8 *)(a1 + 8);
  v38 = (unsigned __int8 *)(a1 + 56);
  kaldi::ExpectToken(a2, a3, "<VocabSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1);
  kaldi::ExpectToken(a2, a3, "<UnknownWord>");
  kaldi::ReadToken(a2, a3, v8);
  kaldi::ExpectToken(a2, a3, "<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v9);
  kaldi::ExpectToken(a2, a3, "<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v10);
  if (*(int *)a1 >= 1)
  {
    v13 = 0;
    v41 = a1 + 160;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v45 = 0;
      __x = 0.0;
      kaldi::ReadToken(a2, a3, (uint64_t)__p);
      kaldi::ReadBasicType<double>(a2, a3, &__x);
      v46 = __p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v46)+ 10) = v13;
      v14 = *(_QWORD *)(a1 + 128);
      if (v14 >= *(_QWORD *)(a1 + 136))
      {
        v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v12, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 128), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v15 = *(_OWORD *)__p;
          *(_QWORD *)(v14 + 16) = v45;
          *(_OWORD *)v14 = v15;
        }
        v16 = v14 + 24;
        *(_QWORD *)(a1 + 128) = v14 + 24;
      }
      *(_QWORD *)(a1 + 128) = v16;
      if (a4)
      {
        v17 = log(__x);
        v18 = v17;
        v20 = *(double **)(a1 + 152);
        v19 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v20 >= v19)
        {
          v25 = (double *)*v42;
          v26 = ((char *)v20 - (_BYTE *)*v42) >> 3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = v19 - (_QWORD)v25;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v41, v29);
            v25 = *(double **)(a1 + 144);
            v20 = *(double **)(a1 + 152);
          }
          else
          {
            v30 = 0;
          }
          v34 = (long double *)&v30[8 * v26];
          *v34 = v18;
          v24 = v34 + 1;
          while (v20 != v25)
          {
            v35 = *((_QWORD *)v20-- - 1);
            *((_QWORD *)v34-- - 1) = v35;
          }
LABEL_39:
          *(_QWORD *)(a1 + 144) = v34;
          *(_QWORD *)(a1 + 152) = v24;
          *(_QWORD *)(a1 + 160) = &v30[8 * v29];
          if (v25)
            operator delete(v25);
          goto LABEL_41;
        }
        *v20 = v17;
        v21 = v20 + 1;
      }
      else
      {
        v23 = *(double **)(a1 + 152);
        v22 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (double *)*v42;
          v31 = ((char *)v23 - (_BYTE *)*v42) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v22 - (_QWORD)v25;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v32;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v41, v29);
            v25 = *(double **)(a1 + 144);
            v23 = *(double **)(a1 + 152);
          }
          else
          {
            v30 = 0;
          }
          v34 = (long double *)&v30[8 * v31];
          *v34 = __x;
          v24 = v34 + 1;
          while (v23 != v25)
          {
            v36 = *((_QWORD *)v23-- - 1);
            *((_QWORD *)v34-- - 1) = v36;
          }
          goto LABEL_39;
        }
        *v23 = __x;
        v21 = v23 + 1;
      }
      v24 = v21;
LABEL_41:
      *(_QWORD *)(a1 + 152) = v24;
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      ++v13;
    }
    while (v13 < *(_DWORD *)a1);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v40);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v39);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v38);
  v46 = (void **)v40;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, v40, (uint64_t)&std::piecewise_construct, (__int128 **)&v46)+ 10);
  return a1;
}

void sub_1AD85F57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  if (a21 < 0)
    operator delete(__p);
  v24 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v21 + 152) = v24;
    operator delete(v24);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  if (*(char *)(v21 + 79) < 0)
    operator delete(*a10);
  if (*(char *)(v21 + 55) < 0)
    operator delete(*a11);
  if (*(char *)(v21 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::OOvWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void kaldi::quasar::Vocab::BosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

void kaldi::quasar::Vocab::EosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

uint64_t kaldi::quasar::Vocab::GetWordId(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 80), a2);
  v4 = (unsigned int *)(v3 + 40);
  if (!v3)
    v4 = (unsigned int *)(a1 + 168);
  return *v4;
}

uint64_t kaldi::quasar::Vocab::GetWord(kaldi::quasar::Vocab *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)this <= (signed int)a2)
    return (uint64_t)this + 8;
  else
    return *((_QWORD *)this + 15) + 24 * a2;
}

uint64_t kaldi::quasar::Vocab::VocabSize(kaldi::quasar::Vocab *this)
{
  return *(unsigned int *)this;
}

void kaldi::CopySetToVector<int>(_QWORD *a1, std::vector<unsigned int> *this)
{
  _QWORD *v4;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  std::vector<int>::resize(this, a1[2]);
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    begin = this->__begin_;
    do
    {
      *begin = *((_DWORD *)v4 + 7);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      ++begin;
      v4 = v7;
    }
    while (v7 != a1 + 1);
  }
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD v6[34];

  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = &unk_1E5D29D40;
  v3 = *(_DWORD *)(a2 + 16);
  v4 = v3 / a3;
  if (v3 % a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the vector cannot be represented as a matrix with rows ", 55);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" , while it has dimension ", 26);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 28) = v3;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 24);
  return result;
}

void sub_1AD85F864(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void sub_1AD85F98C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD85FA54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD85FDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD85FFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD86040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<double>(double **a1)
{
  void *v2;
  double *v3;
  double *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  v6 = (void *)objc_msgSend(v2, "copy");

  return v6;
}

void sub_1AD860520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD860734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  std::__tree<std::string>::destroy(v38 - 88, *(char **)(v38 - 80));
  _Unwind_Resume(a1);
}

void sub_1AD860AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

quasar::HybridEndpointer *std::unique_ptr<quasar::HybridEndpointer>::reset[abi:ne180100](quasar::HybridEndpointer **a1, quasar::HybridEndpointer *a2)
{
  quasar::HybridEndpointer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::HybridEndpointer::~HybridEndpointer(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t quasar::LatticeRnnMitigator::LatticeRnnMitigator(uint64_t a1, __int128 *a2)
{
  char *v3;

  *(_QWORD *)quasar::Decoder::Decoder(a1, a2) = &off_1E5D37280;
  v3 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E5D43328;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 19) = 0;
  *((_QWORD *)v3 + 20) = 0;
  *((_QWORD *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(_QWORD *)(a1 + 448) = v3 + 24;
  *(_QWORD *)(a1 + 456) = v3;
  *(_BYTE *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 696) = 1065353216;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  return a1;
}

void sub_1AD860D14(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::LatticeRnnMitigator::finishInit(quasar::LatticeRnnMitigator *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[2];
  char v25;
  void **v26;

  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), (quasar::LatticeRnnMitigator *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  quasar::LatticeRnnMitigator::initArcFeatExtractors(this);
  v2 = (uint64_t *)*((_QWORD *)this + 59);
  v3 = (uint64_t *)*((_QWORD *)this + 60);
  while (v2 != v3)
  {
    v4 = *v2;
    v2 += 2;
    *((_DWORD *)this + 176) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "|");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 712), (char *)v24, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 760));
  *(_OWORD *)((char *)this + 760) = *(_OWORD *)__p;
  *((_QWORD *)this + 97) = v8;
  __p[1] = 0;
  *(_QWORD *)&v8 = 0;
  __p[0] = 0;
  v26 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (v25 < 0)
    operator delete(v24[0]);
  if (*((_QWORD *)this + 95) == *((_QWORD *)this + 96))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filter-devices cannot be empty");
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "|");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 736), (char *)v24, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 784));
  *((_OWORD *)this + 49) = *(_OWORD *)__p;
  *((_QWORD *)this + 100) = v8;
  __p[1] = 0;
  *(_QWORD *)&v8 = 0;
  __p[0] = 0;
  v26 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (v25 < 0)
    operator delete(v24[0]);
  if (*((_QWORD *)this + 98) == *((_QWORD *)this + 99))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filter-input-origins cannot be empty");
LABEL_17:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::LatticeRnn::LatticeRnn(v5, (char *)this + 520, (char *)this + 544, (char *)this + 568, (char *)this + 592, __p, *((unsigned __int8 *)this + 688));
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  v6 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = v5;
  if (v6)
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)this + 464, v6);
}

void sub_1AD860F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v14, 0x10B0C40310220B6);
  _Unwind_Resume(a1);
}

void quasar::LatticeRnnMitigator::initArcFeatExtractors(quasar::LatticeRnnMitigator *this)
{
  const std::string *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  _BOOL4 v24;
  int v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t *v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  unint64_t *v43;
  _QWORD *v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::string v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char v84[9];

  v2 = (const std::string *)((char *)this + 664);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v82);
  if (SBYTE7(v64) < 0)
    operator delete(__p[0]);
  v4 = *((_QWORD *)this + 59);
  for (i = *((_QWORD *)this + 60);
        i != v4;
  *((_QWORD *)this + 60) = v4;
  v5 = v82;
  v6 = v83;
  while (v5 != v6)
  {
    v81 = 0uLL;
    v7 = *(unsigned __int8 *)(v5 + 23);
    if ((v7 & 0x80) != 0)
    {
      v9 = *(_QWORD *)(v5 + 8);
      if (v9 == 7)
      {
        if (**(_DWORD **)v5 == 1130316609 && *(_DWORD *)(*(_QWORD *)v5 + 3) == 1414745923)
        {
LABEL_65:
          v34 = operator new(0x20uLL);
          v34[1] = 0;
          v34[2] = 0;
          *v34 = &unk_1E5D43B78;
          v34[3] = &unk_1E5D38930;
          *(_QWORD *)&v81 = v34 + 3;
          *((_QWORD *)&v81 + 1) = v34;
          goto LABEL_118;
        }
        v9 = *(_QWORD *)(v5 + 8);
      }
      else if (v9 == 8 && **(_QWORD **)v5 == 0x45524F43535F4341)
      {
        goto LABEL_65;
      }
      if (v9 == 13)
      {
        v8 = *(uint64_t **)v5;
LABEL_23:
        v11 = *v8;
        v12 = *(uint64_t *)((char *)v8 + 5);
        if (v11 == 0x505F464F5F474142 && v12 == 0x53454E4F48505F46)
        {
          std::allocate_shared[abi:ne180100]<quasar::WlatArcFeBagOfPhones,std::allocator<quasar::WlatArcFeBagOfPhones>,std::string &,std::string &,BOOL &,void>((uint64_t)this + 640, (uint64_t)this + 616, (unsigned __int8 *)this + 688, __p);
          v14 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          v81 = v14;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v18 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_118;
          v19 = (unint64_t *)((char *)__p[1] + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          goto LABEL_116;
        }
      }
    }
    else if (v7 == 7)
    {
      if (*(_DWORD *)v5 == 1130316609 && *(_DWORD *)(v5 + 3) == 1414745923)
        goto LABEL_65;
    }
    else
    {
      if (v7 != 8)
      {
        v8 = (uint64_t *)v5;
        if (v7 != 13)
          goto LABEL_38;
        goto LABEL_23;
      }
      if (*(_QWORD *)v5 == 0x45524F43535F4341)
        goto LABEL_65;
    }
LABEL_38:
    v21 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v80, "KEYWORD");
    v22 = std::string::append(v21, ":");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(_QWORD *)&v64 = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = quasar::startsWith((unsigned __int8 *)v5, (unsigned __int8 *)__p);
    if (SBYTE7(v64) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v80.__r_.__value_.__l.__data_);
      if (v24)
      {
LABEL_42:
        std::string::basic_string(&v80, (const std::string *)v5, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v84);
        v25 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 56), (uint64_t)&v80);
        if (v25 == -1)
        {
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cannot find symbol ID for ", 26);
          v60 = *(char *)(v5 + 23);
          if (v60 >= 0)
            v61 = v5;
          else
            v61 = *(_QWORD *)v5;
          if (v60 >= 0)
            v62 = *(unsigned __int8 *)(v5 + 23);
          else
            v62 = *(_QWORD *)(v5 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        v26 = operator new(0x28uLL);
        v26[1] = 0;
        v26[2] = 0;
        *v26 = &unk_1E5D42F38;
        v26[3] = &unk_1E5D36378;
        *((_DWORD *)v26 + 8) = v25;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        *(_QWORD *)&v81 = v26 + 3;
        *((_QWORD *)&v81 + 1) = v26;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        goto LABEL_118;
      }
    }
    else if (v24)
    {
      goto LABEL_42;
    }
    v30 = *(unsigned __int8 *)(v5 + 23);
    if (*(char *)(v5 + 23) < 0)
    {
      v35 = *(_QWORD *)(v5 + 8);
      if (v35 != 8 || **(_QWORD **)v5 != 0x45524F43535F4D4CLL)
      {
        if (v35 != 10)
          goto LABEL_79;
        if (**(_QWORD **)v5 != 0x4F435F4850415247 || *(_WORD *)(*(_QWORD *)v5 + 8) != 21587)
        {
          v35 = *(_QWORD *)(v5 + 8);
          if (v35 != 10)
            goto LABEL_79;
          if (**(_QWORD **)v5 != 0x4D4152465F4D554ELL || *(_WORD *)(*(_QWORD *)v5 + 8) != 21317)
          {
            if ((v30 & 0x80) == 0)
              goto LABEL_125;
LABEL_79:
            if (v35 != 13)
              goto LABEL_125;
            if (**(_QWORD **)v5 != 0x54534F505F474F4CLL || *(_QWORD *)(*(_QWORD *)v5 + 5) != 0x524F49524554534FLL)
            {
              if (*(_QWORD *)(v5 + 8) != 13)
                goto LABEL_125;
              v32 = *(uint64_t **)v5;
LABEL_86:
              v39 = *v32;
              v40 = *(uint64_t *)((char *)v32 + 5);
              if (v39 != 0x54534F505F4E494CLL || v40 != 0x524F49524554534FLL)
                goto LABEL_125;
              v42 = operator new(0x20uLL);
              v42[1] = 0;
              v42[2] = 0;
              *v42 = &unk_1E5D43BB0;
              v42[3] = &unk_1E5D38960;
              v18 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
              *(_QWORD *)&v81 = v42 + 3;
              *((_QWORD *)&v81 + 1) = v42;
              if (!v18)
                goto LABEL_118;
              v43 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v43);
              while (__stlxr(v20 - 1, v43));
LABEL_116:
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
              goto LABEL_118;
            }
LABEL_113:
            v50 = operator new(0x20uLL);
            v50[1] = 0;
            v50[2] = 0;
            *v50 = &unk_1E5D43BE8;
            v50[3] = &unk_1E5D38990;
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
            *(_QWORD *)&v81 = v50 + 3;
            *((_QWORD *)&v81 + 1) = v50;
            if (v18)
            {
              v51 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v51);
              while (__stlxr(v20 - 1, v51));
              goto LABEL_116;
            }
            goto LABEL_118;
          }
          goto LABEL_104;
        }
      }
    }
    else
    {
      switch(v30)
      {
        case 8:
          if (*(_QWORD *)v5 != 0x45524F43535F4D4CLL)
            goto LABEL_125;
          break;
        case 10:
          if (*(_QWORD *)v5 != 0x4F435F4850415247 || *(_WORD *)(v5 + 8) != 21587)
          {
            if (*(_QWORD *)v5 != 0x4D4152465F4D554ELL || *(_WORD *)(v5 + 8) != 21317)
            {
LABEL_125:
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v66 = 0u;
              v67 = 0u;
              v64 = 0u;
              v65 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown feature type: ", 22);
              v56 = *(char *)(v5 + 23);
              if (v56 >= 0)
                v57 = v5;
              else
                v57 = *(_QWORD *)v5;
              if (v56 >= 0)
                v58 = *(unsigned __int8 *)(v5 + 23);
              else
                v58 = *(_QWORD *)(v5 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
LABEL_104:
            v46 = operator new(0x20uLL);
            v46[1] = 0;
            v46[2] = 0;
            *v46 = &unk_1E5D434B0;
            v46[3] = &unk_1E5D36E20;
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
            *(_QWORD *)&v81 = v46 + 3;
            *((_QWORD *)&v81 + 1) = v46;
            if (v18)
            {
              v47 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v47);
              while (__stlxr(v20 - 1, v47));
              goto LABEL_116;
            }
            goto LABEL_118;
          }
          break;
        case 13:
          if (*(_QWORD *)v5 != 0x54534F505F474F4CLL || *(_QWORD *)(v5 + 5) != 0x524F49524554534FLL)
          {
            v32 = (uint64_t *)v5;
            goto LABEL_86;
          }
          goto LABEL_113;
        default:
          goto LABEL_125;
      }
    }
    v48 = operator new(0x20uLL);
    v48[1] = 0;
    v48[2] = 0;
    *v48 = &unk_1E5D43478;
    v48[3] = &unk_1E5D36DF0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    *(_QWORD *)&v81 = v48 + 3;
    *((_QWORD *)&v81 + 1) = v48;
    if (v18)
    {
      v49 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v49);
      while (__stlxr(v20 - 1, v49));
      goto LABEL_116;
    }
LABEL_118:
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)this + 59, &v81);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v5 += 24;
  }
  __p[0] = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD8618B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 144);
  v3 = (void **)(v1 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  _Unwind_Resume(a1);
}

void sub_1AD8618EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD8618D8);
}

uint64_t quasar::LatticeRnnMitigator::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t v8;
  std::string *DeviceId;
  std::string *InputOrigin;
  uint64_t v11;
  kaldi::TransitionModel *v12;
  uint64_t v13;
  int v14;
  float v15;
  double v16;
  uint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    if (quasar::gLogLevel >= 4)
    {
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"This doesn't work when utt detect is enabled. Doing nothing.", 60);
LABEL_17:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      return 0;
    }
    return 0;
  }
  v8 = *a3;
  if (!*(_BYTE *)(*a3 + 872))
  {
    DeviceId = (std::string *)quasar::SpeechRequestData::getDeviceId(*a4);
    if (!quasar::isMatchWithWildcard(DeviceId, (uint64_t *)(a1 + 760), 1)
      || (InputOrigin = (std::string *)quasar::SpeechRequestData::getInputOrigin(*a4),
          (quasar::isMatchWithWildcard(InputOrigin, (uint64_t *)(a1 + 784), 1) & 1) == 0))
    {
      if (quasar::gLogLevel >= 4)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Request does not match filter. Doing nothing.", 45);
        goto LABEL_17;
      }
      return 0;
    }
    v11 = *a3;
    v12 = (kaldi::TransitionModel *)a2[10];
    v13 = a2[21];
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 16) + 32))(*(_QWORD *)(*a2 + 16));
    quasar::DecoderChainOutput::getWordHypLattice(v11, v12, a2 + 27, v13, v14, a2[23], &v26);
    if (v26)
    {
      if (v26[3] != v26[2])
      {
        quasar::WlatArcFeatureExtractor::runArcFeatureExtraction((uint64_t)v26, *(unsigned int *)(a1 + 704), a1 + 472);
        v24 = 0;
        v25 = 0;
        v22 = &unk_1E5D341C8;
        v23 = 0;
        kaldi::quasar::LatticeRnn::Run(*(_QWORD *)(a1 + 464), v26, &v22);
        if ((_DWORD)v24 != 1)
        {
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LatticeRnn output is incorrect ", 31);
          std::ostream::operator<<();
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        v15 = *v23;
        *(_BYTE *)(v8 + 872) = 1;
        std::string::operator=((std::string *)(v8 + 880), (const std::string *)(a1 + 496));
        *(double *)(v8 + 904) = *(float *)(a1 + 692);
        v16 = v15;
        *(double *)(v8 + 912) = v16;
        *(_QWORD *)(v8 + 920) = *(_QWORD *)(a1 + 696);
        v17 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(__p, "latnnMitigatorScore");
        quasar::SpeechRequestResultData::addDump(v17, (__int128 *)__p, v16);
        if (SBYTE7(v29) < 0)
          operator delete(__p[0]);
        kaldi::CuVector<float>::~CuVector(&v22);
        goto LABEL_24;
      }
      if (quasar::gLogLevel >= 4)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice is empty. Doing nothing", 31);
        goto LABEL_23;
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice is null. Doing nothing", 30);
LABEL_23:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
LABEL_24:
    v19 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"An earlier LatticeRnn in the decoder chain already ran. Doing nothing.", 70);
    goto LABEL_17;
  }
  return 0;
}

void sub_1AD861D70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  JUMPOUT(0x1AD861DA8);
}

void sub_1AD861DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AD861DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1AD861DC8);
}

uint64_t quasar::LatticeRnnMitigator::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  quasar::QsrTextSymbolTable::Register(this[56], a2, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v7, "version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Model version");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 62), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 65), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "forward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 68), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "backward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 71), (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "output-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 74), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-separated list of arc features. Example: \"BAG_OF_PHONES,KEYWORD:hey,KEYWORD:Siri,LM_SCORE,AC_SCORE,NUM_FRAMES,LOG_POSTERIOR,LIN_POSTERIOR\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 83), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "phone-pd2pi-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 77), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "bag-of-phones-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 80), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 86), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "0 = not trigger, 1 = trigger");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 692, (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "filter-devices");
  std::string::basic_string[abi:ne180100]<0>(__p, "FORMAT: Pipe-separated list of devices with support for wildcards. Wildcards must come at the end of each device in the list. Example 1: \"filter-devices\": \"*\" - matches any device. Example 2: \"filter-devices\": \"iPhone7|Watch*|AudioAccessory1\" - matches iPhone7, AudioAccessory1, and devices starting with \"Watch\". USAGE: One decoder chain can have multiple LatticeRnnMitigators, which are specified using colon notation to create unique names. Example decoder chain: lattice-biglm-lme-faster, ..., lattice-rnn-mitigator:X, lattice-rnn-mitigator:Y, lattice-rnn-mitigator:Z. The LatticeRnnMitigators are checked one-by-one in order. The first one that matches a request will 'claim' the request, run, and prevent the rest from running. All the filter-* conditions are AND'ed together, so a request must match all of them for the corresponding LatticeRnnMitigator to run.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 89), (uint64_t)__p, 1, 142, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "filter-input-origins");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of input origins with the same format as filter-devices.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 92), (uint64_t)__p, 1, 142, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "calibration-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Calibration Scale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 87), (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "calibration-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Calibration Offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 700, (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  MEMORY[0x1AF44C914](this + 89, "*");
  return MEMORY[0x1AF44C914](this + 92, "VoiceTrigger");
}

void sub_1AD862428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LatticeRnnMitigator::affectsRecognitionResults(quasar::LatticeRnnMitigator *this)
{
  return 1;
}

uint64_t quasar::LatticeRnnMitigator::supportsEager(quasar::LatticeRnnMitigator *this)
{
  return 1;
}

void quasar::LatticeRnnMitigator::~LatticeRnnMitigator(void **this)
{
  quasar::LatticeRnnMitigator::~LatticeRnnMitigator(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  void **v3;

  *this = &off_1E5D37280;
  v3 = this + 98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 759) < 0)
    operator delete(this[92]);
  if (*((char *)this + 735) < 0)
    operator delete(this[89]);
  if (*((char *)this + 687) < 0)
    operator delete(this[83]);
  if (*((char *)this + 663) < 0)
    operator delete(this[80]);
  if (*((char *)this + 639) < 0)
    operator delete(this[77]);
  if (*((char *)this + 615) < 0)
    operator delete(this[74]);
  if (*((char *)this + 591) < 0)
    operator delete(this[71]);
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  v3 = this + 59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (uint64_t)this[58];
  this[58] = 0;
  if (v2)
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)(this + 58), v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  quasar::Decoder::~Decoder(this);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WlatArcFeBagOfPhones,std::allocator<quasar::WlatArcFeBagOfPhones>,std::string &,std::string &,BOOL &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1B0uLL);
  result = std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,BOOL &,std::allocator<quasar::WlatArcFeBagOfPhones>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD86267C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,BOOL &,std::allocator<quasar::WlatArcFeBagOfPhones>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D43910;
  quasar::WlatArcFeBagOfPhones::WlatArcFeBagOfPhones(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1AD8626CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t kaldi::quasar::GrammarFst::CreateFst(uint64_t a1, const char ***a2, uint64_t a3, int a4)
{
  const char **v8;
  const char **v9;
  unint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  double v17;
  const char **v18;
  const char **v19;
  float v20;
  const char *v21;
  const char *v22;
  const char *v23;
  int v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  float v34;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  const char ***v42;
  int v43;
  float v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float v48;
  int v49;

  if (a2[1] == *a2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"the input grammar data is empty", 31);
LABEL_52:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    }
    return 0;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"the input symbol table is empty", 31);
      goto LABEL_52;
    }
    return 0;
  }
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)a3 + 104))(a3, "<eps>");
  if (a4)
  {
    v9 = *a2;
    v8 = a2[1];
    if (*a2 == v8)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = *v9;
        if (v9[1] == *v9)
LABEL_54:
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        if (v11[23] < 0)
          v11 = *(const char **)v11;
        v10 += atoi(v11);
        v9 += 3;
      }
      while (v9 != v8);
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  }
  if ((int)((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3) >= 1)
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(a1);
  if (v10)
  {
    v45 = a3;
    v12 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
    v13 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v13 + 88) = v12;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    *(_QWORD *)(v13 + 8) = v14 & 0xCCFFFFF0007 | (((v14 >> 35) & 1) << 37) | *(_QWORD *)(v13 + 8) & 4;
    v46 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    v15 = *(float *)(a1 + 16);
    v16 = *(float *)(a1 + 20);
    v17 = log((double)v10);
    v19 = *a2;
    v18 = a2[1];
    if (*a2 == v18)
      goto LABEL_39;
    v20 = v15 + (1.0 - v16) * v17;
    v43 = a4;
    v42 = a2;
LABEL_22:
    v21 = *v19;
    v22 = v19[1];
    if (a4)
    {
      if (v22 == v21)
        goto LABEL_54;
      v23 = *v19;
      if (v21[23] < 0)
        v23 = *(const char **)v21;
      v24 = atoi(v23);
      v25 = v20 - log((double)v24);
      v26 = 1;
    }
    else
    {
      v26 = 0;
      v25 = v20;
    }
    v27 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3);
    if (v26 >= v27)
      goto LABEL_38;
    v28 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 88);
    v44 = v25;
    v29 = (8 * v26) | (16 * v26);
    v30 = 1;
    while (1)
    {
      v31 = v26 + 1;
      v32 = v46;
      if (v26 + 1 != v27)
      {
        v32 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
        v21 = *v19;
        v22 = v19[1];
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3) <= v26)
        goto LABEL_54;
      v33 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v45 + 96))(v45, &v21[v29]);
      if (v33 == -1)
        break;
      LODWORD(v47) = v33;
      HIDWORD(v47) = v33;
      v34 = v44;
      if ((v30 & 1) == 0)
        v34 = 0.0;
      v48 = v34;
      v49 = v32;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v28, (float *)&v47);
      v30 = 0;
      v21 = *v19;
      v22 = v19[1];
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *v19) >> 3);
      v29 += 24;
      ++v26;
      v28 = v32;
      if (v31 >= v27)
      {
        v18 = v42[1];
        a4 = v43;
LABEL_38:
        v19 += 3;
        if (v19 == v18)
        {
LABEL_39:
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(a1, v46, 0.0);
          return 1;
        }
        goto LABEL_22;
      }
    }
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"word <", 6);
    if (0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 3) <= v26)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    v37 = (uint64_t)&(*v19)[v29];
    v38 = *(char *)(v37 + 23);
    if (v38 >= 0)
      v39 = (uint64_t)&(*v19)[v29];
    else
      v39 = *(_QWORD *)v37;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(v37 + 23);
    else
      v40 = *(_QWORD *)(v37 + 8);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v39, v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"> not in the input symbol table", 31);
    goto LABEL_52;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"LME: no user data available for creating a grammar FST", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v47);
  }
  return 1;
}

void sub_1AD862BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t kaldi::quasar::GrammarFst::SetClassSizeCost(uint64_t this, float a2, float a3)
{
  *(float *)(this + 16) = a2;
  *(float *)(this + 20) = a3;
  return this;
}

void quasar::corrective_reranking::InitFeaturizers(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t ChildOptional;
  uint64_t v8;
  int v9;
  uint64_t v12;
  const void *v27;
  _QWORD *v28;
  void *v29;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int64x2_t v55;
  char *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  std::string v78;
  _BYTE v79[40];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v4)
  {
    while (1)
    {
      quasar::PTree::PTree((quasar::PTree *)&v77);
      ChildOptional = quasar::PTree::getChildOptional(a2, (uint64_t)v3);
      v8 = ChildOptional;
      if (ChildOptional)
      {
        v77 = *(_DWORD *)ChildOptional;
        std::string::operator=(&v78, (const std::string *)(ChildOptional + 8));
        if (&v77 != (int *)v8)
          std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v79, *(std::string **)(v8 + 32), *(std::string **)(v8 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v8 + 40) - *(_QWORD *)(v8 + 32)) >> 3));
        v79[24] = *(_BYTE *)(v8 + 56);
      }
      v9 = *((unsigned __int8 *)v3 + 23);
      if ((*((char *)v3 + 23) & 0x80000000) == 0)
        break;
      v12 = v3[1];
      if (v12 == 11 && *(_QWORD *)*v3 == 0x6965775F74736677 && *(_QWORD *)(*v3 + 3) == 0x7468676965775F74)
      {
LABEL_134:
        v28 = (_QWORD *)operator new();
        v29 = &unk_1E5D37FF8;
        goto LABEL_181;
      }
      if (v12 == 14)
      {
        if (*(_QWORD *)*v3 == 0x666E6F635F727361 && *(_QWORD *)(*v3 + 6) == 0x65636E656469666ELL)
        {
LABEL_122:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D38020;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 10)
      {
        if (*(_QWORD *)*v3 == 0x616D6D6F635F7369 && *(_WORD *)(*v3 + 8) == 25710)
        {
LABEL_94:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D37F80;
          goto LABEL_181;
        }
        v12 = v3[1];
        if (v12 == 10)
        {
          if (*(_QWORD *)*v3 == 0x677261745F736168 && *(_WORD *)(*v3 + 8) == 29797)
          {
LABEL_164:
            v28 = (_QWORD *)operator new();
            v29 = &unk_1E5D37F58;
            goto LABEL_181;
          }
          if ((v9 & 0x80) == 0)
            goto LABEL_152;
        }
      }
      if (v12 == 15)
      {
        if (*(_QWORD *)*v3 == 0x6174656D5F736168 && *(_QWORD *)(*v3 + 7) == 0x7465677261745F61)
        {
LABEL_128:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D38070;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 18)
      {
        if (*(_QWORD *)*v3 == 0x745F746567726174
          && *(_QWORD *)(*v3 + 8) == 0x756F635F6E656B6FLL
          && *(_WORD *)(*v3 + 16) == 29806)
        {
LABEL_159:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D38138;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 26)
      {
        if (*(_QWORD *)*v3 == 0x5F6465686374616DLL
          && *(_QWORD *)(*v3 + 8) == 0x745F746567726174
          && *(_QWORD *)(*v3 + 16) == 0x756F635F6E656B6FLL
          && *(_WORD *)(*v3 + 24) == 29806)
        {
LABEL_162:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D38228;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 11)
      {
        if (*(_QWORD *)*v3 == 0x6C7961705F736168 && *(_QWORD *)(*v3 + 3) == 0x64616F6C7961705FLL)
        {
LABEL_158:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D37FD0;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 19)
      {
        if (*(_QWORD *)*v3 == 0x5F64616F6C796170
          && *(_QWORD *)(*v3 + 8) == 0x6F635F6E656B6F74
          && *(_QWORD *)(*v3 + 11) == 0x746E756F635F6E65)
        {
LABEL_114:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D38160;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 == 11)
      {
        if (*(_QWORD *)*v3 == 0x725F72656C6C6966 && *(_QWORD *)(*v3 + 3) == 0x657461725F72656CLL)
        {
LABEL_163:
          v28 = (_QWORD *)operator new();
          v29 = &unk_1E5D37FA8;
          goto LABEL_181;
        }
        v12 = v3[1];
      }
      if (v12 != 38)
        goto LABEL_152;
      v27 = (const void *)*v3;
LABEL_92:
      if (memcmp(v27, "resulting_text_probability_transformer", 0x26uLL))
        goto LABEL_152;
      std::make_unique[abi:ne180100]<quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer,quasar::PTree &>((const quasar::PTree *)&v77, (quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer **)v61);
      v28 = *(_QWORD **)&v61[0];
LABEL_182:
      v43 = a3[1];
      v42 = (unint64_t)a3[2];
      if ((unint64_t)v43 >= v42)
      {
        v45 = (v43 - *a3) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v42 - (_QWORD)*a3;
        v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        *(_QWORD *)&v62 = a3 + 2;
        if (v48)
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v48);
        else
          v49 = 0;
        v50 = &v49[8 * v45];
        v51 = &v49[8 * v48];
        *((_QWORD *)&v61[1] + 1) = v51;
        *(_QWORD *)v50 = v28;
        v44 = v50 + 8;
        *(_QWORD *)&v61[1] = v50 + 8;
        v53 = *a3;
        v52 = a3[1];
        if (v52 == *a3)
        {
          v55 = vdupq_n_s64((unint64_t)v52);
        }
        else
        {
          do
          {
            v54 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *(_QWORD *)v52 = 0;
            *((_QWORD *)v50 - 1) = v54;
            v50 -= 8;
          }
          while (v52 != v53);
          v55 = *(int64x2_t *)a3;
          v51 = (char *)*((_QWORD *)&v61[1] + 1);
          v44 = *(char **)&v61[1];
        }
        *a3 = v50;
        a3[1] = v44;
        *(int64x2_t *)((char *)v61 + 8) = v55;
        v56 = a3[2];
        a3[2] = v51;
        *((_QWORD *)&v61[1] + 1) = v56;
        *(_QWORD *)&v61[0] = v55.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)v61);
      }
      else
      {
        *(_QWORD *)v43 = v28;
        v44 = v43 + 8;
      }
      a3[1] = v44;
      quasar::PTree::~PTree((quasar::PTree *)&v77);
      v3 += 3;
      if (v3 == v4)
        return;
    }
    switch(*((_BYTE *)v3 + 23))
    {
      case 0xA:
        goto LABEL_8;
      case 0xB:
        if (*v3 == 0x6965775F74736677 && *(_QWORD *)((char *)v3 + 3) == 0x7468676965775F74)
          goto LABEL_134;
        goto LABEL_143;
      case 0xC:
      case 0xD:
      case 0x10:
      case 0x11:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
        break;
      case 0xE:
        if (*v3 == 0x666E6F635F727361 && *(_QWORD *)((char *)v3 + 6) == 0x65636E656469666ELL)
          goto LABEL_122;
        if (v9 == 11)
          goto LABEL_143;
        if (v9 != 10)
          break;
LABEL_8:
        if (*v3 == 0x616D6D6F635F7369 && *((_WORD *)v3 + 4) == 25710)
          goto LABEL_94;
        if (v9 != 10)
          break;
        if (*v3 != 0x677261745F736168 || *((_WORD *)v3 + 4) != 29797)
          break;
        goto LABEL_164;
      case 0xF:
        if (*v3 == 0x6174656D5F736168 && *(_QWORD *)((char *)v3 + 7) == 0x7465677261745F61)
          goto LABEL_128;
        goto LABEL_142;
      case 0x12:
        if (*v3 == 0x745F746567726174 && v3[1] == 0x756F635F6E656B6FLL && *((_WORD *)v3 + 8) == 29806)
          goto LABEL_159;
        goto LABEL_142;
      case 0x13:
        goto LABEL_106;
      case 0x1A:
        if (*v3 == 0x5F6465686374616DLL
          && v3[1] == 0x745F746567726174
          && v3[2] == 0x756F635F6E656B6FLL
          && *((_WORD *)v3 + 12) == 29806)
        {
          goto LABEL_162;
        }
        if (v9 == 19)
        {
LABEL_106:
          if (*v3 == 0x5F64616F6C796170
            && v3[1] == 0x6F635F6E656B6F74
            && *(_QWORD *)((char *)v3 + 11) == 0x746E756F635F6E65)
          {
            goto LABEL_114;
          }
        }
        else
        {
LABEL_142:
          if (v9 != 11)
            break;
LABEL_143:
          if (*v3 == 0x6C7961705F736168 && *(_QWORD *)((char *)v3 + 3) == 0x64616F6C7961705FLL)
            goto LABEL_158;
        }
        if (v9 == 11 && *v3 == 0x725F72656C6C6966 && *(_QWORD *)((char *)v3 + 3) == 0x657461725F72656CLL)
          goto LABEL_163;
        break;
      default:
        v27 = v3;
        if (v9 == 38)
          goto LABEL_92;
        break;
    }
LABEL_152:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "phonetic_target_similarity"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38250;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "payload_usage_frequency"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38200;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "inter_utterance_pause"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38188;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "gaze_edit_score"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38048;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "gaze_target_score"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38110;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "text_edit_score"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D38098;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "max_target_token_count"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D381B0;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "max_payload_token_count"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D381D8;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "number_of_parses"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D380C0;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "edit_parse_exists"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5D380E8;
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "recognized_by_asr"))
    {
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5CFF1B0;
    }
    else
    {
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "target_preceding_filler_word_count"))
      {
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        memset(v61, 0, sizeof(v61));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Unsupported feature name: ", 26);
        v58 = *((char *)v3 + 23);
        if (v58 >= 0)
          v59 = (uint64_t)v3;
        else
          v59 = *v3;
        if (v58 >= 0)
          v60 = *((unsigned __int8 *)v3 + 23);
        else
          v60 = v3[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v61);
      }
      v28 = (_QWORD *)operator new();
      v29 = &unk_1E5CFF1D8;
    }
LABEL_181:
    *v28 = v29;
    goto LABEL_182;
  }
}

void sub_1AD8639DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  quasar::PTree::~PTree((quasar::PTree *)(v2 - 152));
  *(_QWORD *)(v2 - 152) = v1;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 152));
  _Unwind_Resume(a1);
}

quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *std::make_unique[abi:ne180100]<quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer,quasar::PTree &>@<X0>(const quasar::PTree *a1@<X0>, quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer **a2@<X8>)
{
  quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *v4;
  quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *result;

  v4 = (quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *)operator new();
  result = quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::ResultingTextProbabilityTransformerFeaturizer(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1AD863ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::WFSTWeightFeaturizer::~WFSTWeightFeaturizer(quasar::corrective_reranking::WFSTWeightFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::WFSTWeightFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return *(float *)(*(_QWORD *)(a2 + 8) + 80);
}

void quasar::corrective_reranking::ASRConfidenceFeaturizer::~ASRConfidenceFeaturizer(quasar::corrective_reranking::ASRConfidenceFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::ASRConfidenceFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(_QWORD *)(a2 + 8) + 24);
}

void quasar::corrective_reranking::IsCommandFeaturizer::~IsCommandFeaturizer(quasar::corrective_reranking::IsCommandFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::IsCommandFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)quasar::corrective_reranking::Parse::isEditCommand(*(quasar::corrective_reranking::Parse **)(a2 + 8));
}

void quasar::corrective_reranking::HasTargetFeaturizer::~HasTargetFeaturizer(quasar::corrective_reranking::HasTargetFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::HasTargetFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  __int128 v5;
  void **v6;

  if (quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::tokenize(*(_QWORD *)(a2 + 24), 0, &v5);
    v3 = (_QWORD)v5 == *((_QWORD *)&v5 + 1);
    v6 = (void **)&v5;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  else
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), (uint64_t *)&v5);
    v3 = (_QWORD)v5 == *((_QWORD *)&v5 + 1);
    v6 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  return (float)!v3;
}

void quasar::corrective_reranking::HasMetaTargetFeaturizer::~HasMetaTargetFeaturizer(quasar::corrective_reranking::HasMetaTargetFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::HasMetaTargetFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8));
}

void quasar::corrective_reranking::TargetTokenCountFeaturizer::~TargetTokenCountFeaturizer(quasar::corrective_reranking::TargetTokenCountFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::TargetTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float v3;
  uint64_t v5[3];
  void **v6;

  v3 = -1.0;
  if (!quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), v5);
    v3 = (float)(0xAAAAAAAAAAAAAAABLL * ((v5[1] - v5[0]) >> 3));
    v6 = (void **)v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  return v3;
}

void quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer::~MatchedTargetTokenCountFeaturizer(quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float v3;
  uint64_t v4;
  __int128 v6;
  void **v7;

  if (quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::tokenize(*(_QWORD *)(a2 + 24), 0, &v6);
    v3 = (float)(unint64_t)((uint64_t)(*((_QWORD *)&v6 + 1) - v6) >> 5);
    v7 = (void **)&v6;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(v4 + 112))
      return (float)(unint64_t)((uint64_t)(*(_QWORD *)(v4 + 96) - *(_QWORD *)(v4 + 88)) >> 3);
    else
      return 0.0;
  }
  return v3;
}

void quasar::corrective_reranking::HasPayloadFeaturizer::~HasPayloadFeaturizer(quasar::corrective_reranking::HasPayloadFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::HasPayloadFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  std::string v4;

  quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)(a2 + 8), &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
  {
    v2 = v4.__r_.__value_.__l.__size_ != 0;
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    return (float)(SHIBYTE(v4.__r_.__value_.__r.__words[2]) != 0);
  }
  return (float)v2;
}

void quasar::corrective_reranking::PayloadTokenCountFeaturizer::~PayloadTokenCountFeaturizer(quasar::corrective_reranking::PayloadTokenCountFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::PayloadTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  std::string __p;
  __int128 v5;
  void **v6;

  quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)(a2 + 8), &__p);
  quasar::corrective_reranking::tokenize((uint64_t)&__p, 0, &v5);
  v2 = v5;
  v6 = (void **)&v5;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (float)(unint64_t)((uint64_t)(*((_QWORD *)&v2 + 1) - v2) >> 5);
}

void sub_1AD863E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::FillerRateFeaturizer::~FillerRateFeaturizer(quasar::corrective_reranking::FillerRateFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::FillerRateFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3 != v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(char *)(v3 + 23);
      if (v6 < 0)
      {
        if (*(_QWORD *)(v3 + 8) == 4)
        {
          v7 = *(unsigned int **)v3;
LABEL_8:
          v8 = bswap32(*v7);
          v9 = v8 >= 0x4E6F6E65;
          v10 = v8 > 0x4E6F6E65;
          v11 = !v9;
          if (v10 == v11)
            ++v5;
        }
      }
      else
      {
        v7 = (unsigned int *)v3;
        if (v6 == 4)
          goto LABEL_8;
      }
      v3 += 24;
      if (v3 == v4)
        return (float)v5;
    }
  }
  return (float)0;
}

quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::ResultingTextProbabilityTransformerFeaturizer(quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *this, const quasar::PTree *a2)
{
  double v4;
  double v5;
  char v6;
  char v7;
  double v8;
  double v9;
  char v10;
  double v11;
  float v12;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31[2];
  char v32;

  *(_QWORD *)this = &unk_1E5D38278;
  std::string::basic_string[abi:ne180100]<0>(__p, "transformer-invisible-change-probability");
  quasar::PTree::getDoubleOptional((uint64_t)a2, (uint64_t)__p);
  v5 = v4;
  v7 = v6;
  std::string::basic_string[abi:ne180100]<0>(v31, "delete-all-probability");
  quasar::PTree::getDoubleOptional((uint64_t)a2, (uint64_t)v31);
  v9 = v8;
  if (!v10)
    v9 = 0.0;
  if (v7)
    v11 = v5;
  else
    v11 = v9;
  if (v32 < 0)
    operator delete(v31[0]);
  v12 = v11;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *((float *)this + 2) = v12;
  if (quasar::gLogLevel >= 5)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"transformerInvisibleChangeProbability ", 38);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  return this;
}

void sub_1AD864080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::~ResultingTextProbabilityTransformerFeaturizer(quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  if (quasar::corrective_reranking::Parse::isChangeInvisibleToTransformer(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
    return *(float *)(a1 + 8);
  else
    return quasar::corrective_reranking::TransformerClassifier::validateParse(*(uint64_t **)(*(_QWORD *)(a2 + 16) + 24), *(__int128 **)(a2 + 24), *(__int128 ***)(a2 + 8));
}

void quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer::~PhoneticTargetSimilarityFeaturizer(quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  std::string v8;
  uint64_t v9[3];

  v3 = -1.0;
  if (!quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), v9);
    if (v9[0] != v9[1])
    {
      v4 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v4 + 112))
      {
        quasar::corrective_reranking::TargetRange::getTargetFromText(v4 + 88, *(_QWORD *)(a2 + 24), &v8);
        quasar::corrective_reranking::detokenize(__p, v9);
        v3 = quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(**(_QWORD **)(a2 + 16), (uint64_t)&v8, (uint64_t)__p);
        if (v7 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
      }
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  return v3;
}

void sub_1AD864214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer::~PayloadUsageFrequencyFeaturizer(quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer::Run()
{
  return 0.0;
}

void quasar::corrective_reranking::InterUtterancePauseFeaturizer::~InterUtterancePauseFeaturizer(quasar::corrective_reranking::InterUtterancePauseFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::InterUtterancePauseFeaturizer::Run()
{
  return 0.0;
}

void quasar::corrective_reranking::GazeEditScoreFeaturizer::~GazeEditScoreFeaturizer(quasar::corrective_reranking::GazeEditScoreFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::corrective_reranking::GazeEditScoreFeaturizer::Run()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "GazeEditScore unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::corrective_reranking::GazeTargetScoreFeaturizer::~GazeTargetScoreFeaturizer(quasar::corrective_reranking::GazeTargetScoreFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::corrective_reranking::GazeTargetScoreFeaturizer::Run()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "GazeTargetScore unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::corrective_reranking::TextEditScoreFeaturizer::~TextEditScoreFeaturizer(quasar::corrective_reranking::TextEditScoreFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::TextEditScoreFeaturizer::Run(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  float v4;
  std::string __p;

  v2 = *(uint64_t **)(a2[2] + 24);
  v3 = a2[3];
  quasar::corrective_reranking::detokenize((__int128 **)(a2[1] + 32), &__p);
  v4 = quasar::corrective_reranking::TransformerClassifier::classifyIntent(v2, v3, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1AD864424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::MaxTargetTokenCountFeaturizer::~MaxTargetTokenCountFeaturizer(quasar::corrective_reranking::MaxTargetTokenCountFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::MaxTargetTokenCountFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  quasar::corrective_reranking::Parse *v2;
  quasar::corrective_reranking::Parse *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = **a2;
  v3 = (*a2)[1];
  if (v2 == v3)
    return -1.0;
  v4 = -1;
  do
  {
    quasar::corrective_reranking::Parse::getTarget(v2, &v6);
    if (v4 <= (int)(-1431655765 * ((unint64_t)(v7 - v6) >> 3)))
      v4 = -1431655765 * ((unint64_t)(v7 - v6) >> 3);
    v8 = (void **)&v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  while (v2 != v3);
  return (float)v4;
}

void quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer::~MaxPayloadTokenCountFeaturizer(quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  quasar::corrective_reranking::Parse *v2;
  quasar::corrective_reranking::Parse *v3;
  int v4;
  std::string __p;
  __int128 v7;
  void **v8;

  v2 = **a2;
  v3 = (*a2)[1];
  if (v2 == v3)
    return -1.0;
  v4 = -1;
  do
  {
    quasar::corrective_reranking::Parse::getPayload(v2, &__p);
    quasar::corrective_reranking::tokenize((uint64_t)&__p, 0, &v7);
    if (v4 <= (int)((*((_QWORD *)&v7 + 1) - (_QWORD)v7) >> 5))
      v4 = (*((_QWORD *)&v7 + 1) - (_QWORD)v7) >> 5;
    v8 = (void **)&v7;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  while (v2 != v3);
  return (float)v4;
}

void sub_1AD8645AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::NumberOfParsesFeaturizer::~NumberOfParsesFeaturizer(quasar::corrective_reranking::NumberOfParsesFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::NumberOfParsesFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)(unint64_t)(0x34F72C234F72C235
                                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 3));
}

void quasar::corrective_reranking::EditParseExistsFeaturizer::~EditParseExistsFeaturizer(quasar::corrective_reranking::EditParseExistsFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::EditParseExistsFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  quasar::corrective_reranking::Parse *v2;
  quasar::corrective_reranking::Parse *v3;
  float v4;

  v2 = **a2;
  v3 = (*a2)[1];
  v4 = 0.0;
  while (v2 != v3)
  {
    if (quasar::corrective_reranking::Parse::isEditCommand(v2))
      return 1.0;
    v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  return v4;
}

void quasar::corrective_reranking::RecognizedByAsrFeaturizer::~RecognizedByAsrFeaturizer(quasar::corrective_reranking::RecognizedByAsrFeaturizer *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::RecognizedByAsrFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float result;

  result = 0.0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 176))
    return 1.0;
  return result;
}

void quasar::corrective_reranking::TargetPrecedingFillerWordCount::~TargetPrecedingFillerWordCount(quasar::corrective_reranking::TargetPrecedingFillerWordCount *this)
{
  JUMPOUT(0x1AF44D190);
}

float quasar::corrective_reranking::TargetPrecedingFillerWordCount::Run(uint64_t a1, uint64_t a2)
{
  float v2;
  uint64_t v4[3];
  void **v5;

  quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(*(quasar::corrective_reranking::Parse **)(a2 + 8), v4);
  v2 = (float)(unint64_t)((v4[1] - v4[0]) >> 5);
  v5 = (void **)v4;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  return v2;
}

BOOL kaldi::quasar::LexiconItf::IsCompatibleWith(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BOOL8 v7;
  _QWORD v9[5];
  _BYTE v10[16];
  unsigned __int8 *v11;
  uint64_t v12;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  std::unordered_set<std::string>::unordered_set((uint64_t)v10, v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  std::unordered_set<std::string>::unordered_set((uint64_t)v9, v4);
  if (v12 == v9[3])
  {
    v5 = v11;
    if (v11)
    {
      do
      {
        v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, v5 + 16);
        v7 = v6 != 0;
        if (!v6)
          break;
        v5 = *(unsigned __int8 **)v5;
      }
      while (v5);
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  return v7;
}

void sub_1AD8647CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Lexicon::begin@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  a2[2] = (uint64_t)this;
  v3 = this[22];
  *a2 = v3;
  a2[1] = 0;
  if (v3)
  {
    this = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(this + 30, (int *)(v3 + 40));
    a2[1] = this[3];
  }
  return this;
}

uint64_t kaldi::quasar::Lexicon::end@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = this;
  return this;
}

uint64_t kaldi::quasar::Lexicon::Lexicon(uint64_t a1, _QWORD *a2, char a3, char a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  std::locale::id *v11;
  const std::locale::facet *v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int WordId;
  std::vector<unsigned int> __p;
  int v18;
  std::vector<std::string>::pointer v19[3];
  std::string v20;
  std::locale v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;

  *(_QWORD *)a1 = off_1E5D340C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 53) = a3;
  *(_BYTE *)(a1 + 54) = 0;
  v9 = (_QWORD *)operator new();
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_DWORD *)(v10 + 32) = 1065353216;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_DWORD *)(v10 + 72) = 1065353216;
  *(_QWORD *)(v10 + 80) = 0;
  *(_DWORD *)(v10 + 88) = -1;
  *v9 = v10;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 304) = a5;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_BYTE *)(a1 + 352) = 1;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v12 = std::locale::use_facet(&v21, v11);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v21);
    v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)v24, v13);
    if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
      break;
    v21.__locale_ = 0;
    v22 = 0;
    v23 = 0;
    memset(&v20, 0, sizeof(v20));
    kaldi::SplitStringOnFirstSpace((uint64_t)v24, (uint64_t)&v21, (uint64_t)&v20);
    WordId = kaldi::quasar::Lexicon::GetWordId(a1, (uint64_t)&v21, 1);
    memset(v19, 0, sizeof(v19));
    kaldi::SplitStringToVector(&v20, " \t", 1, (uint64_t)v19);
    v18 = -1;
    kaldi::quasar::Lexicon::NormalizePron(v19, *(unsigned __int8 *)(a1 + 53), 0, &v18);
    if ((a4 & 1) == 0)
      v18 = -1;
    memset(&__p, 0, sizeof(__p));
    kaldi::quasar::Lexicon::GetPhoneIds(a1, (uint64_t *)v19, &__p, 1);
    kaldi::quasar::Lexicon::AddPron(a1, WordId, (uint64_t *)&__p, v18);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    __p.__begin_ = (std::vector<unsigned int>::pointer)v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23) < 0)
      operator delete(v21.__locale_);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  return a1;
}

void sub_1AD864B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  MEMORY[0x1AF44D190](v34, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::GetWordId(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unsigned int v8;
  std::string *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 *v15[34];
  unsigned int v16;

  v6 = (_QWORD *)(a1 + 160);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)a2))
  {
    return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)a2)+ 10);
  }
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Word ", 5);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " not found in lexicon.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  v8 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = v8 + 1;
  v16 = v8;
  v15[0] = (__int128 *)a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v15)+ 10) = v8;
  v15[0] = (__int128 *)&v16;
  v9 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, (int *)&v16, (uint64_t)&std::piecewise_construct, (_DWORD **)v15);
  std::string::operator=(v9 + 1, (const std::string *)a2);
  return v16;
}

__n128 kaldi::quasar::Lexicon::NormalizePron(std::vector<std::string>::pointer *a1, int a2, int a3, int *a4)
{
  std::vector<std::string>::pointer v5;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string::size_type end_high;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v13;
  unsigned __int8 *v14;
  std::string *v15;
  uint64_t i;
  int v17;
  std::string::size_type v18;
  int v19;
  void **v20;
  std::string *v21;
  std::vector<std::string>::pointer end;
  __int128 v23;
  std::vector<std::string>::pointer v24;
  __int128 v25;
  std::__split_buffer<std::wstring>::pointer first;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::wstring *v31;
  std::wstring *v32;
  __int128 v33;
  std::string *v34;
  std::vector<std::string>::pointer begin;
  std::string::size_type v36;
  std::string::size_type v37;
  char *v38;
  char v39;
  std::vector<std::string>::pointer data;
  std::string::size_type v41;
  std::vector<std::string>::pointer v42;
  std::vector<std::string>::pointer v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  std::string *v47;
  __int128 v48;
  __int128 v49;
  __n128 result;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  int v54;
  int v55;
  void *__p[2];
  int64_t v58;
  std::__split_buffer<std::wstring> v59[6];
  std::vector<std::string> v60;
  char v61;
  std::string __str;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  memset(&v60, 0, sizeof(v60));
  *a4 = -1;
  v5 = *a1;
  if (a1[1] == *a1)
    goto LABEL_93;
  v54 = a3;
  v7 = 0;
  v55 = 0;
  do
  {
    v8 = &v5[v7];
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    }
    end_high = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v13 = __str.__r_.__value_.__l.__size_;
    if (v13)
    {
      v14 = (unsigned __int8 *)p_str + v13;
      v15 = p_str;
      while (2)
      {
        for (i = 0; i != 5; ++i)
        {
          if (v15->__r_.__value_.__s.__data_[0] == asc_1AE262F2A[i])
          {
            if (v15 != (std::string *)v14 && (char *)v15 - (char *)p_str != -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Illegal phone: ", 15);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52 = &__str;
              else
                v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v53 = __str.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
            }
            goto LABEL_21;
          }
        }
        v15 = (std::string *)((char *)v15 + 1);
        if (v15 != (std::string *)v14)
          continue;
        break;
      }
    }
LABEL_21:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = *__str.__r_.__value_.__l.__data_;
      if (v17 == 35)
        goto LABEL_53;
      if (v17 == 47 && *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_ - 1) == 47)
      {
        end_high = __str.__r_.__value_.__l.__size_;
LABEL_30:
        std::string::basic_string((std::string *)v59, &__str, 1uLL, end_high - 2, (std::allocator<char> *)__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v59[0].__end_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v59[0].__first_;
        end_high = HIBYTE(v59[0].__end_);
        size = (std::string::size_type)v59[0].__begin_;
      }
    }
    else
    {
      if (__str.__r_.__value_.__s.__data_[0] == 35)
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_53:
        std::string::basic_string((std::string *)v59, &__str, 1uLL, size - 1, (std::allocator<char> *)__p);
        if (SHIBYTE(v59[0].__end_) < 0)
        {
          first = v59[0].__first_;
          *a4 = atoi((const char *)v59[0].__first_);
          operator delete(first);
        }
        else
        {
          *a4 = atoi((const char *)v59);
        }
        goto LABEL_75;
      }
      if (__str.__r_.__value_.__s.__data_[0] == 47 && *(&v61 + HIBYTE(__str.__r_.__value_.__r.__words[2])) == 47)
        goto LABEL_30;
    }
    if (kaldi::quasar::Lexicon::IsPositionalPhone((uint64_t *)&__str))
    {
      if ((end_high & 0x80u) == 0)
        v18 = end_high;
      else
        v18 = size;
      std::string::basic_string((std::string *)v59, &__str, 0, v18 - 2, (std::allocator<char> *)__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v59[0].__end_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v59[0].__first_;
      end_high = HIBYTE(v59[0].__end_);
      size = (std::string::size_type)v59[0].__begin_;
    }
    v19 = (char)end_high;
    if ((end_high & 0x80u) != 0)
      end_high = size;
    if (end_high)
    {
      if (a2)
      {
        std::string::basic_string[abi:ne180100]((uint64_t)__p, end_high + 2);
        if (v58 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &__str;
        else
          v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v20, v21, end_high);
        strcpy((char *)v20 + end_high, "_I");
        end = v60.__end_;
        if (v60.__end_ >= v60.__end_cap_.__value_)
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_ - (char *)v60.__begin_) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) > v29)
            v29 = 0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v29;
          v59[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v60.__end_cap_;
          if (v30)
            v31 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v60.__end_cap_, v30);
          else
            v31 = 0;
          v32 = v31 + v28;
          v59[0].__first_ = v31;
          v59[0].__begin_ = v32;
          v59[0].__end_cap_.__value_ = &v31[v30];
          v33 = *(_OWORD *)__p;
          v32->__r_.__value_.__r.__words[2] = v58;
          *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
          __p[1] = 0;
          v58 = 0;
          __p[0] = 0;
          v59[0].__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v60, (std::__split_buffer<std::string> *)v59);
          v34 = v60.__end_;
          std::__split_buffer<std::string>::~__split_buffer(v59);
          v60.__end_ = v34;
          if (SHIBYTE(v58) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v23 = *(_OWORD *)__p;
          v60.__end_->__r_.__value_.__r.__words[2] = v58;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
          v60.__end_ = end + 1;
        }
        v55 = 1;
      }
      else
      {
        v24 = v60.__end_;
        if (v60.__end_ >= v60.__end_cap_.__value_)
        {
          v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, (__int128 *)&__str);
        }
        else
        {
          if (v19 < 0)
          {
            std::string::__init_copy_ctor_external(v60.__end_, __str.__r_.__value_.__l.__data_, size);
          }
          else
          {
            v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v60.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          v27 = v24 + 1;
        }
        v60.__end_ = v27;
      }
    }
LABEL_75:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ++v7;
    v5 = *a1;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) > v7);
  a3 = v54;
  if ((a2 & v55 & 1) != 0)
  {
    begin = v60.__begin_;
    if ((std::vector<std::string>::pointer)((char *)v60.__end_ - (char *)v60.__begin_) == (std::vector<std::string>::pointer)24)
    {
      if (SHIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        begin = (std::vector<std::string>::pointer)v60.__begin_->__r_.__value_.__l.__data_;
        v36 = v60.__begin_->__r_.__value_.__l.__size_;
      }
      else
      {
        v36 = HIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]);
      }
      v38 = (char *)begin + v36;
      v39 = 83;
      goto LABEL_92;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_ - (char *)v60.__begin_) >> 3) >= 2)
    {
      if (SHIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        begin = (std::vector<std::string>::pointer)v60.__begin_->__r_.__value_.__l.__data_;
        v37 = v60.__begin_->__r_.__value_.__l.__size_;
      }
      else
      {
        v37 = HIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]);
      }
      begin->__r_.__value_.__s.__data_[v37 - 1] = 66;
      if (SHIBYTE(v60.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        data = (std::vector<std::string>::pointer)v60.__end_[-1].__r_.__value_.__l.__data_;
        v41 = v60.__end_[-1].__r_.__value_.__l.__size_;
      }
      else
      {
        data = v60.__end_ - 1;
        v41 = HIBYTE(v60.__end_[-1].__r_.__value_.__r.__words[2]);
      }
      v38 = (char *)data + v41;
      v39 = 69;
LABEL_92:
      *(v38 - 1) = v39;
    }
  }
LABEL_93:
  v42 = v60.__begin_;
  if (a3)
  {
    v43 = v60.__end_;
    if (v60.__begin_ != v60.__end_)
    {
      do
      {
        std::operator+<char>();
        v44 = std::string::append((std::string *)v59, "/");
        v45 = v44->__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42->__r_.__value_.__l.__data_);
        v42->__r_.__value_.__r.__words[0] = v45;
        v42->__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v42->__r_.__value_.__s + 23) = v46;
        if (SHIBYTE(v59[0].__end_) < 0)
          operator delete(v59[0].__first_);
        ++v42;
      }
      while (v42 != v43);
      v42 = v60.__begin_;
    }
  }
  v47 = a1[2];
  v48 = *(_OWORD *)&v60.__end_;
  v49 = *(_OWORD *)a1;
  *a1 = v42;
  *(_OWORD *)&v60.__begin_ = v49;
  *(_OWORD *)(a1 + 1) = v48;
  v60.__end_cap_.__value_ = v47;
  v59[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  return result;
}

void sub_1AD8653D8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD865434);
}

void sub_1AD8653F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  *(_QWORD *)(v1 - 128) = v1 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1AD865408()
{
  JUMPOUT(0x1AD865424);
}

void sub_1AD865410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x1AD865420);
  JUMPOUT(0x1AD865424);
}

void kaldi::quasar::Lexicon::GetPhoneIds(uint64_t a1, uint64_t *a2, std::vector<unsigned int> *this, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  std::vector<int>::resize(this, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      this->__begin_[v10++] = kaldi::quasar::Lexicon::GetPhoneId(a1, (__int128 *)(v8 + v9), a4);
      v8 = *a2;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
}

uint64_t kaldi::quasar::Lexicon::AddPron(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  uint64_t **v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  int v11;
  int *i;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;

  v17 = a2;
  v15 = 0;
  v16 = 0;
  kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::AddSequence(*(_QWORD ***)(a1 + 56), a3, &v16, &v15);
  v18 = &v17;
  v6 = (uint64_t **)std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 240, &v17, (uint64_t)&std::piecewise_construct, &v18);
  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(v6 + 3, (unint64_t *)&v15, &v15);
  v7 = *(_QWORD *)(v15 + 64);
  v18 = &v17;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v15 + 40, &v17, (uint64_t)&std::piecewise_construct, &v18);
  *(_DWORD *)(result + 20) = a4;
  if (*(_BYTE *)(a1 + 304))
  {
    if (*(_QWORD *)(v15 + 64) > v7 && v7 != 0)
    {
      if (v7 == 1)
      {
        for (i = *(int **)(v15 + 56); i; i = *(int **)i)
          result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 312, i + 4, i + 4);
      }
      else
      {
        result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 312, &v17, &v17);
      }
    }
  }
  if (a4 != -1)
  {
    if (*(_DWORD *)(a1 + 72) < a4)
      *(_DWORD *)(a1 + 72) = a4;
    return result;
  }
  v10 = *(_QWORD *)(v16 + 64);
  if (v16 == v15)
  {
    if (v10 == 2)
    {
      v13 = *(uint64_t **)(v16 + 56);
      if (v13)
      {
        v14 = 1;
        do
        {
          *((_DWORD *)v13 + 5) = v14;
          v13 = (uint64_t *)*v13;
          ++v14;
        }
        while (v13);
      }
      if (*(int *)(a1 + 72) <= 1)
      {
        v11 = 2;
LABEL_27:
        *(_DWORD *)(a1 + 72) = v11;
      }
    }
    else
    {
      v18 = &v17;
      result = (uint64_t)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v16 + 40, &v17, (uint64_t)&std::piecewise_construct, &v18);
      *(_DWORD *)(result + 20) = v10;
      v11 = *(_DWORD *)(v15 + 64);
      if (v11 == -1)
      {
        result = kaldi::quasar::Lexicon::GetMaxDisambigId(a1, **(_QWORD **)(a1 + 56));
        *(_DWORD *)(a1 + 72) = result;
        return result;
      }
      if (*(_DWORD *)(a1 + 72) < v11)
        goto LABEL_27;
    }
  }
  else if (v10 == 1)
  {
    v11 = 1;
    *(_DWORD *)(*(_QWORD *)(v16 + 56) + 20) = 1;
    if (*(int *)(a1 + 72) <= 0)
      goto LABEL_27;
  }
  return result;
}

uint64_t kaldi::quasar::Lexicon::Lexicon(uint64_t a1, __int128 **a2, char a3, char a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  int WordId;
  std::vector<unsigned int> __p;
  int v18;
  std::vector<std::string>::pointer v19[3];
  std::string v20;
  std::string v21;

  *(_QWORD *)a1 = off_1E5D340C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 53) = a3;
  *(_BYTE *)(a1 + 54) = 0;
  v9 = (_QWORD *)operator new();
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_DWORD *)(v10 + 32) = 1065353216;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_DWORD *)(v10 + 72) = 1065353216;
  *(_QWORD *)(v10 + 80) = 0;
  *(_DWORD *)(v10 + 88) = -1;
  *v9 = v10;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = a5;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_BYTE *)(a1 + 352) = 1;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    do
    {
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
      }
      if (*((char *)v11 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)v11 + 3), *((_QWORD *)v11 + 4));
      }
      else
      {
        v14 = *(__int128 *)((char *)v11 + 24);
        v20.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 5);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
      }
      WordId = kaldi::quasar::Lexicon::GetWordId(a1, (uint64_t)&v21, 1);
      memset(v19, 0, sizeof(v19));
      kaldi::SplitStringToVector(&v20, " \t", 1, (uint64_t)v19);
      v18 = -1;
      kaldi::quasar::Lexicon::NormalizePron(v19, *(unsigned __int8 *)(a1 + 53), 0, &v18);
      if ((a4 & 1) == 0)
        v18 = -1;
      memset(&__p, 0, sizeof(__p));
      kaldi::quasar::Lexicon::GetPhoneIds(a1, (uint64_t *)v19, &__p, 1);
      kaldi::quasar::Lexicon::AddPron(a1, WordId, (uint64_t *)&__p, v18);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      __p.__begin_ = (std::vector<unsigned int>::pointer)v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v11 += 3;
    }
    while (v11 != v12);
  }
  return a1;
}

void sub_1AD86599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x1AF44D190](v28, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::Lexicon(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E5D340C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 53) = a3;
  *(_BYTE *)(a1 + 54) = 0;
  v7 = (_QWORD *)operator new();
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_DWORD *)(v8 + 72) = 1065353216;
  *(_QWORD *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  *v7 = v8;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 304) = a4;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_BYTE *)(a1 + 352) = 1;
  kaldi::quasar::Lexicon::MergePhoneSet(a1, a2);
  return a1;
}

void sub_1AD865BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table(v8);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::MergePhoneSet(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::string *end;
  __int128 *v6;
  __int128 v7;
  std::vector<std::string> v8;
  std::vector<std::string> *v9;

  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::reserve(&v8, *(_QWORD *)(a2 + 24));
  v4 = *(uint64_t **)(a2 + 16);
  if (v4)
  {
    end = v8.__end_;
    do
    {
      v6 = (__int128 *)(v4 + 2);
      if (end >= v8.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v8, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v8.__end_ = end;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  kaldi::quasar::Lexicon::MergePhoneSet(a1, (__int128 **)&v8);
  v9 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1AD865D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::MergePhoneSet(uint64_t a1, __int128 **a2)
{
  __int128 v3;
  std::string::size_type v4;
  std::string::size_type size;
  size_t v6;
  void **v7;
  const void *v8;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  size_t v18;
  void **v19;
  const void *v20;
  std::vector<std::string>::pointer v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  size_t v30;
  void **v31;
  const void *v32;
  std::vector<std::string>::pointer v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  size_t v42;
  void **v43;
  const void *v44;
  std::vector<std::string>::pointer v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  int64x2_t v54;
  std::string *value;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  _QWORD *v59;
  std::string *v60;
  uint64_t v61;
  int data;
  std::string *v63;
  void *__p[2];
  int64_t v65;
  std::vector<std::string> v66;
  std::string v67;
  std::__split_buffer<std::string> __v;

  memset(&v67, 0, sizeof(v67));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::Lexicon::BasifyPhones((unint64_t *)&v67);
  if (*(_BYTE *)(a1 + 53))
  {
    v3 = 0uLL;
    memset(&v66, 0, sizeof(v66));
    size = v67.__r_.__value_.__l.__size_;
    v4 = v67.__r_.__value_.__r.__words[0];
    if (v67.__r_.__value_.__r.__words[0] == v67.__r_.__value_.__l.__size_)
    {
      value = 0;
      v54 = vdupq_n_s64(v67.__r_.__value_.__r.__words[0]);
    }
    else
    {
      do
      {
        if (*(char *)(v4 + 23) >= 0)
          v6 = *(unsigned __int8 *)(v4 + 23);
        else
          v6 = *(_QWORD *)(v4 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 2);
        if (v65 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        if (v6)
        {
          if (*(char *)(v4 + 23) >= 0)
            v8 = (const void *)v4;
          else
            v8 = *(const void **)v4;
          memmove(v7, v8, v6);
        }
        strcpy((char *)v7 + v6, "_S");
        end = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v12)
            v12 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
            v13 = 0xAAAAAAAAAAAAAAALL;
          else
            v13 = v12;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v13)
            v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v13);
          else
            v14 = 0;
          v15 = v14 + v11;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          v65 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          v17 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v17;
          if (SHIBYTE(v65) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v10 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
          v66.__end_ = end + 1;
        }
        if (*(char *)(v4 + 23) >= 0)
          v18 = *(unsigned __int8 *)(v4 + 23);
        else
          v18 = *(_QWORD *)(v4 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 2);
        if (v65 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if (v18)
        {
          if (*(char *)(v4 + 23) >= 0)
            v20 = (const void *)v4;
          else
            v20 = *(const void **)v4;
          memmove(v19, v20, v18);
        }
        strcpy((char *)v19 + v18, "_B");
        v21 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v24)
            v24 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
            v25 = 0xAAAAAAAAAAAAAAALL;
          else
            v25 = v24;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v25)
            v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v25);
          else
            v26 = 0;
          v27 = v26 + v23;
          __v.__first_ = v26;
          __v.__begin_ = v27;
          __v.__end_cap_.__value_ = &v26[v25];
          v28 = *(_OWORD *)__p;
          v27->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          __p[1] = 0;
          v65 = 0;
          __p[0] = 0;
          __v.__end_ = v27 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          v29 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v29;
          if (SHIBYTE(v65) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v22 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          v66.__end_ = v21 + 1;
        }
        if (*(char *)(v4 + 23) >= 0)
          v30 = *(unsigned __int8 *)(v4 + 23);
        else
          v30 = *(_QWORD *)(v4 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v30 + 2);
        if (v65 >= 0)
          v31 = __p;
        else
          v31 = (void **)__p[0];
        if (v30)
        {
          if (*(char *)(v4 + 23) >= 0)
            v32 = (const void *)v4;
          else
            v32 = *(const void **)v4;
          memmove(v31, v32, v30);
        }
        strcpy((char *)v31 + v30, "_I");
        v33 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v36)
            v36 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v36;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v37)
            v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v37);
          else
            v38 = 0;
          v39 = v38 + v35;
          __v.__first_ = v38;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v38[v37];
          v40 = *(_OWORD *)__p;
          v39->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          __p[1] = 0;
          v65 = 0;
          __p[0] = 0;
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          v41 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v41;
          if (SHIBYTE(v65) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v34 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          v66.__end_ = v33 + 1;
        }
        if (*(char *)(v4 + 23) >= 0)
          v42 = *(unsigned __int8 *)(v4 + 23);
        else
          v42 = *(_QWORD *)(v4 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v42 + 2);
        if (v65 >= 0)
          v43 = __p;
        else
          v43 = (void **)__p[0];
        if (v42)
        {
          if (*(char *)(v4 + 23) >= 0)
            v44 = (const void *)v4;
          else
            v44 = *(const void **)v4;
          memmove(v43, v44, v42);
        }
        strcpy((char *)v43 + v42, "_E");
        v45 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v48)
            v48 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v48;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v49)
            v50 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v49);
          else
            v50 = 0;
          v51 = v50 + v47;
          __v.__first_ = v50;
          __v.__begin_ = v51;
          __v.__end_cap_.__value_ = &v50[v49];
          v52 = *(_OWORD *)__p;
          v51->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
          __p[1] = 0;
          v65 = 0;
          __p[0] = 0;
          __v.__end_ = v51 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          v53 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v53;
          if (SHIBYTE(v65) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v46 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          v66.__end_ = v45 + 1;
        }
        v4 += 24;
      }
      while (v4 != size);
      v54 = *(int64x2_t *)&v67.__r_.__value_.__l.__data_;
      v3 = *(_OWORD *)&v66.__begin_;
      value = v66.__end_cap_.__value_;
    }
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v3;
    *(int64x2_t *)&v66.__begin_ = v54;
    v56 = (std::string *)v67.__r_.__value_.__r.__words[2];
    v67.__r_.__value_.__r.__words[2] = (std::string::size_type)value;
    v66.__end_cap_.__value_ = v56;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  v58 = v67.__r_.__value_.__l.__size_;
  v57 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if (v67.__r_.__value_.__r.__words[0] != v67.__r_.__value_.__l.__size_)
  {
    v59 = (_QWORD *)(a1 + 80);
    v60 = (std::string *)(a1 + 64);
    v61 = a1 + 120;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v59, (unsigned __int8 *)v57))
      {
        data = (int)v60->__r_.__value_.__l.__data_;
        __v.__first_ = v57;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)&__v)+ 10) = data;
        __v.__first_ = v60;
        v63 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v61, (int *)v60, (uint64_t)&std::piecewise_construct, &__v);
        std::string::operator=(v63 + 1, v57);
        ++LODWORD(v60->__r_.__value_.__l.__data_);
      }
      ++v57;
    }
    while (v57 != (std::string *)v58);
  }
  __v.__first_ = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1AD86641C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, char a12, char *a13, uint64_t a14, std::__split_buffer<std::wstring> *a15, uint64_t a16, char a17)
{
  a13 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Lexicon::GetPron(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  const void **v12[3];
  int v13;
  const void ***v14;

  v6 = (_QWORD *)(a3 + 8);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a3, *(char **)(a3 + 8));
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = 0;
  *v6 = 0;
  v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 160), a2)+ 10);
  v7 = (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), &v13)[3];
  result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), &v13);
  if (v7 != result + 4)
  {
    do
    {
      memset(v12, 0, sizeof(v12));
      kaldi::quasar::Lexicon::GetPron(a1, v13, v7[4], (uint64_t)v12);
      std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)a3, v12, (__int128 **)v12);
      v14 = v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      v9 = (uint64_t *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), &v13);
      v7 = v10;
    }
    while (v10 != result + 4);
  }
  return result;
}

void sub_1AD8665D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_BYTE *)(this + 54))
  {
    LODWORD(this) = kaldi::quasar::Lexicon::GetMaxDisambigId(this, **(_QWORD **)(this + 56));
    *(_DWORD *)(v1 + 72) = this;
    *(_BYTE *)(v1 + 54) = 0;
  }
  else
  {
    LODWORD(this) = *(_DWORD *)(this + 72);
  }
  return (int)this;
}

uint64_t kaldi::quasar::Lexicon::AddPron(uint64_t a1, uint64_t a2, __int128 **a3, int a4, int a5)
{
  int WordId;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v21;
  std::string v22;
  std::vector<unsigned int> __p[11];

  if (kaldi::quasar::Lexicon::IsLegalWord((unsigned __int8 **)a2))
  {
    memset(&v22, 0, sizeof(v22));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    v21 = 0;
    kaldi::quasar::Lexicon::NormalizePron((std::vector<std::string>::pointer *)&v22, *(unsigned __int8 *)(a1 + 53), 0, &v21);
    if ((a5 & 1) != 0 || (kaldi::quasar::Lexicon::IsValidPron(a1, (uint64_t *)&v22) & 1) != 0)
    {
      WordId = kaldi::quasar::Lexicon::GetWordId(a1, a2, a4);
      memset(__p, 0, 24);
      kaldi::quasar::Lexicon::GetPhoneIds(a1, (uint64_t *)&v22, __p, a5);
      kaldi::quasar::Lexicon::AddPron(a1, WordId, (uint64_t *)__p, -1);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      v11 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid phone in pron for word: ", 32);
        v17 = *(char *)(a2 + 23);
        if (v17 >= 0)
          v18 = (unsigned __int8 *)a2;
        else
          v18 = *(unsigned __int8 **)a2;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a2 + 23);
        else
          v19 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      }
      v11 = 0;
    }
    __p[0].__begin_ = (std::vector<unsigned int>::pointer)&v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal word: ", 14);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = a2;
      else
        v14 = *(_QWORD *)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    return 0;
  }
  return v11;
}

void sub_1AD8667FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14)
{
  __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::Lexicon::IsLegalWord(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t i;

  v1 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    v3 = (uint64_t)a1[1];
    if (v3)
    {
      v4 = *a1;
      if (v3 != 5)
        goto LABEL_18;
      if (*(_DWORD *)v4 != 1936745788 || v4[4] != 62)
      {
        v3 = 5;
        goto LABEL_18;
      }
    }
    return 0;
  }
  if (!*((_BYTE *)a1 + 23))
    return 0;
  if ((_DWORD)v1 != 5)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    goto LABEL_17;
  }
  if (*(_DWORD *)a1 == 1936745788 && *((_BYTE *)a1 + 4) == 62)
    return 0;
  v3 = 5;
LABEL_17:
  v4 = (unsigned __int8 *)a1;
LABEL_18:
  v6 = &v4[v3];
  v7 = v4;
  while (2)
  {
    for (i = 0; i != 4; ++i)
    {
      if (*v7 == asc_1AE262EF2[i])
      {
        if (v7 == v6 || v7 - v4 == -1)
          goto LABEL_27;
        return 0;
      }
    }
    if (++v7 != v6)
      continue;
    break;
  }
LABEL_27:
  if ((v1 & 0x80) != 0)
  {
    if (**a1 != 47)
      return 1;
    v1 = a1[1];
    a1 = (unsigned __int8 **)*a1;
    return *((_BYTE *)a1 + (_QWORD)v1 - 1) != 47;
  }
  if (*(_BYTE *)a1 == 47)
    return *((_BYTE *)a1 + (_QWORD)v1 - 1) != 47;
  return 1;
}

uint64_t kaldi::quasar::Lexicon::IsValidPron(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 1;
  v4 = (_QWORD *)(a1 + 80);
  while (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)v2))
  {
    v2 += 24;
    if (v2 == v3)
      return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Phone ", 6);
    v7 = *(char *)(v2 + 23);
    if (v7 >= 0)
      v8 = v2;
    else
      v8 = *(_QWORD *)v2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v2 + 23);
    else
      v9 = *(_QWORD *)(v2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") does not exist in the lexicon", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  return 0;
}

void sub_1AD866A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::AddProns(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v10;
  std::string __p;
  std::vector<std::string>::pointer v12[3];

  v3 = a3[1];
  if (*a3 == v3)
    return 1;
  v6 = *a3 + 8;
  do
  {
    memset(v12, 0, sizeof(v12));
    std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(v6 - 8));
    kaldi::SplitStringToVector(&__p, " \t", 1, (uint64_t)v12);
    kaldi::quasar::Lexicon::NormalizePron(v12, *(unsigned __int8 *)(a1 + 53), 0, &v10);
    v7 = kaldi::quasar::Lexicon::AddPron(a1, a2, (__int128 **)v12, 1, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v6 == v3)
      v8 = 0;
    else
      v8 = v7;
    v6 += 8;
  }
  while ((v8 & 1) != 0);
  return v7;
}

void sub_1AD866B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::BasifyPhone(std::string *a1)
{
  __n128 v2;
  std::vector<std::string> v3;
  std::vector<std::string> *v4;

  std::vector<std::string>::vector(&v3, 1uLL);
  std::string::operator=(v3.__begin_, a1);
  v2 = kaldi::quasar::Lexicon::NormalizePron(&v3.__begin_, 0, 0, (int *)&v4);
  if (v3.__begin_ == v3.__end_)
    MEMORY[0x1AF44C914](a1, "", v2);
  else
    std::string::operator=(a1, v3.__begin_);
  v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1AD866C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::BasifyPhones(unint64_t *a1)
{
  int64x2_t v2;
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  int64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  unint64_t v12;
  int64x2_t *v13;

  v12 = 0;
  v2 = 0uLL;
  v11 = 0u;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v9 = 0;
    v8 = vdupq_n_s64(v3);
    goto LABEL_16;
  }
  do
  {
    kaldi::quasar::Lexicon::BasifyPhone((std::string *)v3);
    if (*(char *)(v3 + 23) < 0)
    {
      if (!*(_QWORD *)(v3 + 8))
        goto LABEL_13;
    }
    else if (!*(_BYTE *)(v3 + 23))
    {
      goto LABEL_13;
    }
    v5 = (_OWORD *)v11.i64[1];
    if (v11.i64[1] >= v12)
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v11.i64, (__int128 *)v3);
    }
    else
    {
      if ((*(_BYTE *)(v3 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v11.i64[1], *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v6 = *(_OWORD *)v3;
        *(_QWORD *)(v11.i64[1] + 16) = *(_QWORD *)(v3 + 16);
        *v5 = v6;
      }
      v7 = (uint64_t)v5 + 24;
    }
    v11.i64[1] = v7;
LABEL_13:
    v3 += 24;
  }
  while (v3 != v4);
  v8 = *(int64x2_t *)a1;
  v2 = v11;
  v9 = v12;
LABEL_16:
  *(int64x2_t *)a1 = v2;
  v11 = v8;
  v10 = a1[2];
  a1[2] = v9;
  v12 = v10;
  v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_1AD866D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::BasifyPhones(uint64_t a1)
{
  uint64_t *i;
  std::string::size_type size;
  char v4;
  std::string __p;
  _OWORD v7[2];
  int v8;

  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    else
      __p = *(std::string *)(i + 2);
    kaldi::quasar::Lexicon::BasifyPhone(&__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v7, (unsigned __int8 *)&__p, (uint64_t)&__p);
      v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v4 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(a1, (uint64_t)v7);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v7);
}

void sub_1AD866E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double kaldi::quasar::Lexicon::Clear(kaldi::quasar::Lexicon *this)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  double result;

  *((_BYTE *)this + 54) = 0;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::clear((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::clear((uint64_t)this + 240);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 35);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 39);
  *((_BYTE *)this + 352) = 1;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(v2);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  v4 = (_QWORD *)operator new();
  v5 = operator new();
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 1065353216;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = -1;
  *v4 = v5;
  *((_QWORD *)this + 7) = v4;
  return result;
}

void sub_1AD866F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

unint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::GetLongestPrefix(_QWORD **a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v3 = *a1;
  *a3 = v3;
  v4 = *a2;
  if (a2[1] == *a2)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, (int *)(v4 + v7));
    if (!v9)
      break;
    v3 = (_QWORD *)v9[3];
    *a3 = v3;
    ++v8;
    v4 = *a2;
    v7 += 4;
  }
  while (v8 < (a2[1] - *a2) >> 2);
  return v8;
}

uint64_t *kaldi::quasar::Lexicon::DeletePron(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *result;
  _QWORD *v6;
  int v7;

  v7 = a2;
  v6 = a3;
  kaldi::quasar::Lexicon::DeletePronOnly(a1, a2, a3);
  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), &v7);
  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>((uint64_t)(v4 + 3), (unint64_t *)&v6);
  result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), &v7);
  if (!result[5])
    result = kaldi::quasar::Lexicon::DeleteWord((kaldi::quasar::Lexicon *)a1, v7);
  *(_BYTE *)(a1 + 54) = 1;
  *(_BYTE *)(a1 + 352) = 0;
  return result;
}

uint64_t *kaldi::quasar::Lexicon::DeleteWord(kaldi::quasar::Lexicon *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *result;
  int v10;

  v10 = a2;
  v3 = (_QWORD *)((char *)this + 240);
  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 30, &v10)[3];
  if ((uint64_t *)v4 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, &v10)+ 4)
  {
    do
    {
      kaldi::quasar::Lexicon::DeletePronOnly((uint64_t)this, v10, *(_QWORD **)(v4 + 32));
      v5 = *(uint64_t **)(v4 + 8);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = *(uint64_t **)(v4 + 16);
          v7 = *v6 == v4;
          v4 = (uint64_t)v6;
        }
        while (!v7);
      }
      v4 = (uint64_t)v6;
    }
    while (v6 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, &v10) + 4);
  }
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__erase_unique<int>(v3, &v10);
  v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 25, &v10);
  std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>((_QWORD *)this + 20, (unsigned __int8 *)v8 + 24);
  result = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__erase_unique<int>((_QWORD *)this + 25, &v10);
  *((_BYTE *)this + 54) = 1;
  *((_BYTE *)this + 352) = 0;
  return result;
}

char *kaldi::quasar::Lexicon::GetBasePhoneSet(kaldi::quasar::Lexicon *this)
{
  char *v2;
  unsigned __int8 *i;

  v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 8);
  for (i = (unsigned __int8 *)*((_QWORD *)this + 12); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, i + 16, (uint64_t)(i + 16));
  kaldi::quasar::Lexicon::BasifyPhones((uint64_t)v2);
  return v2;
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfWords(kaldi::quasar::Lexicon *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfProns(kaldi::quasar::Lexicon *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)*((_QWORD *)this + 32);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    result += v1[5];
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  return result;
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfPronsInWord(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v5;
  _QWORD v6[34];

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Word does not exist in lexicon: ", 32);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  LODWORD(v6[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 20, a2)+ 10);
  return *((unsigned int *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v6)+ 10);
}

void kaldi::quasar::Lexicon::GetPhoneSymbols(uint64_t a1, std::vector<std::string> *this)
{
  uint64_t *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  std::string *v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  std::vector<std::string>::pointer end;
  std::string *value;
  std::string::size_type v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  unint64_t v24;
  int v25;
  std::__split_buffer<std::string> v26;
  std::string v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  std::vector<std::string>::resize(this, *(_QWORD *)(a1 + 104));
  v4 = *(uint64_t **)(a1 + 96);
  if (v4)
  {
    v5 = 0;
    do
    {
      if ((*(_DWORD *)(a1 + 48) | 2) == 3)
      {
        std::operator+<char>();
        v6 = std::string::append((std::string *)&v26, "/");
        v7 = v6->__r_.__value_.__r.__words[0];
        v27.__r_.__value_.__r.__words[0] = v6->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
        v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        v9 = &this->__begin_[v5];
        if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v9->__r_.__value_.__l.__data_);
        v9->__r_.__value_.__r.__words[0] = v7;
        v9->__r_.__value_.__l.__size_ = v27.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v9->__r_.__value_.__s + 23) = v8;
        if (SHIBYTE(v26.__end_) < 0)
          operator delete(v26.__first_);
      }
      else
      {
        std::string::operator=(&this->__begin_[v5], (const std::string *)(v4 + 2));
      }
      v4 = (uint64_t *)*v4;
      ++v5;
    }
    while (v4);
  }
  if (*(_BYTE *)(a1 + 52))
  {
    v25 = 1;
    if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1))
    {
      do
      {
        kaldi::quasar::to_string<int>();
        v10 = std::string::insert(&v27, 0, "#");
        v11 = v10->__r_.__value_.__r.__words[0];
        v28[0] = v10->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
        v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        end = this->__end_;
        value = this->__end_cap_.__value_;
        if (end >= value)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v18;
          v26.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
          if (v20)
            v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v20);
          else
            v21 = 0;
          v22 = v21 + v17;
          v26.__first_ = v21;
          v26.__begin_ = v22;
          v26.__end_cap_.__value_ = &v21[v20];
          v23 = v28[0];
          v22->__r_.__value_.__r.__words[0] = v11;
          v22->__r_.__value_.__l.__size_ = v23;
          *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v28 + 7);
          *((_BYTE *)&v22->__r_.__value_.__s + 23) = v12;
          v26.__end_ = v22 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(this, &v26);
          v16 = this->__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v26);
        }
        else
        {
          v15 = v28[0];
          end->__r_.__value_.__r.__words[0] = v11;
          end->__r_.__value_.__l.__size_ = v15;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v28 + 7);
          *((_BYTE *)&end->__r_.__value_.__s + 23) = v12;
          v16 = end + 1;
          this->__end_ = end + 1;
        }
        this->__end_ = v16;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v24 = ++v25;
      }
      while (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1) >= v24);
    }
  }
}

void sub_1AD867524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  if (a23 < 0)
    operator delete(__pa);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

uint64_t kaldi::quasar::to_string<int>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v3);
}

void sub_1AD8676C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::GetPron(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char **v12;
  BOOL v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  char **v30;
  char *v31[2];

  v6 = (uint64_t *)(a1 + 280);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 280));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  kaldi::quasar::Lexicon::GetPron(a1, a2, (uint64_t)&v30);
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  v7 = (char *)v30;
  if (v30 == v31)
  {
    v10 = *(_QWORD *)(a1 + 288);
  }
  else
  {
    do
    {
      kaldi::JoinVectorToString((uint64_t *)v7 + 4, " ", 1, (__int128 *)__p);
      v8 = *(_QWORD *)(a1 + 288);
      if (v8 >= *(_QWORD *)(a1 + 296))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v29) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 288), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v29;
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        *(_QWORD *)(a1 + 288) = v10;
      }
      *(_QWORD *)(a1 + 288) = v10;
      v11 = (char *)*((_QWORD *)v7 + 1);
      if (v11)
      {
        do
        {
          v12 = (char **)v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char **)*((_QWORD *)v7 + 2);
          v13 = *v12 == v7;
          v7 = (char *)v12;
        }
        while (!v13);
      }
      v7 = (char *)v12;
    }
    while (v12 != v31);
  }
  for (i = *v6; i != v10; i += 24)
  {
    v15 = i;
    if (*(char *)(i + 23) < 0)
      v15 = *(_QWORD *)i;
    v17 = (uint64_t *)a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
      v19 = ((char *)v17 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = v16 - (_QWORD)*a3;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v19];
      *v24 = v15;
      v18 = v24 + 1;
      v26 = (char *)*a3;
      v25 = (char *)a3[1];
      if (v25 != *a3)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v24 = v27;
        }
        while (v25 != v26);
        v25 = (char *)*a3;
      }
      *a3 = v24;
      a3[1] = v18;
      a3[2] = &v23[8 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v17 = v15;
      v18 = v17 + 1;
    }
    a3[1] = v18;
  }
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_1AD867910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  uint64_t v16;
  void *v18;

  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&a15, a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::GetPron(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  __int128 v15;
  std::__split_buffer<std::wstring>::pointer end;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  int v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  std::wstring *v42;
  std::wstring *v43;
  std::wstring::size_type v44;
  int v45;
  std::__split_buffer<std::wstring> v46;
  std::string v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v45 = a2;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  if (**(_QWORD **)(a1 + 56) == a3)
  {
    v10 = *(_QWORD *)(a4 + 8);
  }
  else
  {
    v7 = a3;
    do
    {
      v8 = (__int128 *)(std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 120), (int *)(v7 + 88))+ 3);
      v9 = *(_QWORD *)(a4 + 8);
      if (v9 >= *(_QWORD *)(a4 + 16))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, v8);
        v10 = v9 + 24;
      }
      *(_QWORD *)(a4 + 8) = v10;
      v7 = *(_QWORD *)(v7 + 80);
    }
    while (v7 != **(_QWORD **)(a1 + 56));
  }
  v11 = *(_QWORD *)a4;
  v12 = v10 - 24;
  if (*(_QWORD *)a4 != v10 && v12 > v11)
  {
    v14 = v11 + 24;
    do
    {
      *(_OWORD *)&v46.__first_ = *(_OWORD *)(v14 - 24);
      v15 = *(_OWORD *)&v46.__first_;
      v46.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(v14 - 8);
      end = v46.__end_;
      v17 = *(_QWORD *)(v12 + 16);
      *(_OWORD *)(v14 - 24) = *(_OWORD *)v12;
      *(_QWORD *)(v14 - 8) = v17;
      *(_QWORD *)(v12 + 16) = end;
      *(_OWORD *)v12 = v15;
      v12 -= 24;
      v18 = v14 >= v12;
      v14 += 24;
    }
    while (!v18);
  }
  v19 = *(_DWORD *)(a1 + 48);
  switch(v19)
  {
    case 3:
      if (!*(_BYTE *)(a1 + 53))
        kaldi::quasar::Lexicon::BasePron2PositionalPron(a4, 0);
      v25 = *(_QWORD *)a4;
      v26 = *(_QWORD *)(a4 + 8);
      if (*(_QWORD *)a4 != v26)
      {
        do
        {
          std::operator+<char>();
          v27 = std::string::append((std::string *)&v46, "/");
          v28 = v27->__r_.__value_.__r.__words[0];
          v47.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
          v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v25 + 23) < 0)
            operator delete(*(void **)v25);
          *(_QWORD *)v25 = v28;
          *(_QWORD *)(v25 + 8) = v47.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v25 + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v25 + 23) = v29;
          if (SHIBYTE(v46.__end_) < 0)
            operator delete(v46.__first_);
          v25 += 24;
        }
        while (v25 != v26);
      }
      break;
    case 2:
      if (!*(_BYTE *)(a1 + 53))
        kaldi::quasar::Lexicon::BasePron2PositionalPron(a4, 0);
      break;
    case 1:
      v20 = *(_QWORD *)a4;
      v21 = *(_QWORD *)(a4 + 8);
      if (*(_QWORD *)a4 != v21)
      {
        do
        {
          std::operator+<char>();
          v22 = std::string::append((std::string *)&v46, "/");
          v23 = v22->__r_.__value_.__r.__words[0];
          v47.__r_.__value_.__r.__words[0] = v22->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
          v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v20 + 23) < 0)
            operator delete(*(void **)v20);
          *(_QWORD *)v20 = v23;
          *(_QWORD *)(v20 + 8) = v47.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v20 + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v20 + 23) = v24;
          if (SHIBYTE(v46.__end_) < 0)
            operator delete(v46.__first_);
          v20 += 24;
        }
        while (v20 != v21);
      }
      break;
  }
  v30 = *((_DWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a3 + 40), &v45)+ 5);
  if (*(_BYTE *)(a1 + 52) && v30 != -1)
  {
    kaldi::quasar::to_string<int>();
    v31 = std::string::insert(&v47, 0, "#");
    v32 = v31->__r_.__value_.__r.__words[0];
    v48[0] = v31->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v34 = *(_QWORD *)(a4 + 16);
    v35 = *(_QWORD *)(a4 + 8);
    if (v35 >= v34)
    {
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)a4) >> 3);
      v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a4) >> 3);
      if (2 * v40 > v39)
        v39 = 2 * v40;
      if (v40 >= 0x555555555555555)
        v41 = 0xAAAAAAAAAAAAAAALL;
      else
        v41 = v39;
      v46.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a4 + 16);
      if (v41)
        v42 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v41);
      else
        v42 = 0;
      v43 = v42 + v38;
      v46.__first_ = v42;
      v46.__begin_ = v43;
      v46.__end_cap_.__value_ = &v42[v41];
      v44 = v48[0];
      v43->__r_.__value_.__r.__words[0] = v32;
      v43->__r_.__value_.__l.__size_ = v44;
      *(std::wstring::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v48 + 7);
      *((_BYTE *)&v43->__r_.__value_.__s + 23) = v33;
      v46.__end_ = v43 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)&v46);
      v37 = *(_QWORD *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v46);
    }
    else
    {
      v36 = v48[0];
      *(_QWORD *)v35 = v32;
      *(_QWORD *)(v35 + 8) = v36;
      *(_QWORD *)(v35 + 15) = *(_QWORD *)((char *)v48 + 7);
      *(_BYTE *)(v35 + 23) = v33;
      v37 = v35 + 24;
      *(_QWORD *)(a4 + 8) = v35 + 24;
    }
    *(_QWORD *)(a4 + 8) = v37;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_1AD867D6C(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::wstring> *a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a12);
  if (a23 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::Lexicon::HasWord(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 160), a2) != 0;
}

void kaldi::quasar::Lexicon::GetWord(kaldi::quasar::Lexicon *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  int v6;

  v6 = a2;
  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 25, &v6);
  if (v4)
  {
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v4[3], v4[4]);
    }
    else
    {
      v5 = *(_OWORD *)(v4 + 3);
      a3->__r_.__value_.__r.__words[2] = v4[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t kaldi::quasar::Lexicon::IsPositionalPhone(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unsigned int v4;

  v1 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    v2 = a1[1];
    if (v2 < 3)
      return 0;
  }
  else
  {
    if (v1 < 3)
      return 0;
    v2 = *((unsigned __int8 *)a1 + 23);
  }
  if ((v1 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  if (*((_BYTE *)v3 + v1 - 2) == 95)
  {
    v4 = *((unsigned __int8 *)v3 + v2 - 1) - 66;
    if (v4 <= 0x11)
      return (0x20089u >> v4) & 1;
  }
  return 0;
}

void kaldi::quasar::Lexicon::PruneHomophoneProns(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v17 = 0;
  v18 = 0;
  v16 = (uint64_t *)&v17;
  if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1) <= a2)
  {
    a4[2] = 0;
    a4[1] = 0;
    *a4 = (uint64_t *)(a4 + 1);
    v13 = v17;
  }
  else
  {
    kaldi::quasar::Lexicon::PruneHomophonePronsFromNode(a1, **(_QWORD **)(a1 + 56), a2, &v16, a3);
    v8 = v16;
    v9 = (uint64_t *)&v17;
    if (v16 != (uint64_t *)&v17)
    {
      do
      {
        if (a3 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)v8 + 4))std::__tree<std::string>::__erase_unique<std::string>(a3, (const void **)v8 + 4);
        v10 = (uint64_t *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (uint64_t *)&v17);
      v9 = v16;
    }
    *a4 = v9;
    v13 = v17;
    v14 = v18;
    a4[1] = v17;
    v15 = (uint64_t *)(a4 + 1);
    a4[2] = v14;
    if (v14)
    {
      v13[2] = (uint64_t)v15;
      v16 = (uint64_t *)&v17;
      v17 = 0;
      v18 = 0;
      v13 = 0;
    }
    else
    {
      *a4 = v15;
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v16, (char *)v13);
}

void sub_1AD86801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::PruneHomophonePronsFromNode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4, uint64_t **a5)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  _OWORD v14[2];
  unsigned __int128 v15;
  uint64_t v16;

  v16 = a2;
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(v14, &v16);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = v15;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v14[0] + 1) + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
      kaldi::quasar::Lexicon::PruneHomophonePronsForNode(a1, v10, a3, a4, a5);
      for (i = (_QWORD *)(v10 + 16);
            ;
            std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(v14, i + 3))
      {
        i = (_QWORD *)*i;
        if (!i)
          break;
      }
      v12 = *((_QWORD *)&v15 + 1) - 1;
      v9 = v15 + 1;
      v15 = __PAIR128__(*((unint64_t *)&v15 + 1), (uint64_t)v15 + 1) + __PAIR128__(-1, 0);
      if (v9 >= 0x400)
      {
        operator delete(**((void ***)&v14[0] + 1));
        v9 = v15 - 512;
        *((_QWORD *)&v14[0] + 1) += 8;
        *(_QWORD *)&v15 = v15 - 512;
        v12 = *((_QWORD *)&v15 + 1);
      }
    }
    while (v12);
  }
  return std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v14);
}

void sub_1AD86813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::SetPronView(uint64_t result, unsigned int a2, int a3)
{
  _QWORD v4[34];

  if (a2 <= 1 && a3 && *(_BYTE *)(result + 53))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "For a lexicon using pos-dep phones, cannot view disambig IDs with pos-indep phones");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if ((a2 & 0xFFFFFFFE) == 2 && !*(_BYTE *)(result + 53) && a3 != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "For a lexicon using pos-indep phones, cannot view disambig IDs with pos-dep phones");
    goto LABEL_12;
  }
  *(_DWORD *)(result + 48) = a2;
  *(_BYTE *)(result + 52) = a3;
  return result;
}

BOOL kaldi::quasar::Lexicon::WordHasDisambigLabel(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  _BOOL8 v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  _QWORD *v12;
  _QWORD v13[34];

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Word does not exist in lexicon: ", 32);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  LODWORD(v13[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 20, a2)+ 10);
  v4 = a1 + 30;
  v5 = (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v13)[3];
  if (v5 == std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v13)+ 4)return 0;
  do
  {
    v6 = *((_DWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v5[4] + 40), (int *)v13)+ 5);
    v7 = v6 != -1;
    if (v6 != -1)
      break;
    v8 = (uint64_t *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (uint64_t *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v4, (int *)v13)
              + 4);
  return v7;
}

void kaldi::quasar::Lexicon::BasePron2PositionalPron(uint64_t a1, int a2)
{
  uint64_t v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  std::string *v13;
  std::string::size_type v14;
  uint64_t i;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  std::string __p;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 == 24)
  {
    if (!a2)
    {
      std::string::append(*(std::string **)a1, "_S");
      return;
    }
    std::operator+<char>();
    v5 = std::string::append(&__p, "_S/");
    v6 = v5->__r_.__value_.__r.__words[0];
    v26[0] = v5->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v8 = *(std::string **)a1;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    v9 = v26[0];
    v8->__r_.__value_.__r.__words[0] = v6;
    v8->__r_.__value_.__l.__size_ = v9;
    *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v26 + 7);
    *((_BYTE *)&v8->__r_.__value_.__s + 23) = v7;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 3) < 2)
      return;
    if (a2)
    {
      std::operator+<char>();
      v10 = std::string::append(&__p, "_B/");
      v11 = v10->__r_.__value_.__r.__words[0];
      v26[0] = v10->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
      v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v13 = *(std::string **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
        operator delete(v13->__r_.__value_.__l.__data_);
      v14 = v26[0];
      v13->__r_.__value_.__r.__words[0] = v11;
      v13->__r_.__value_.__l.__size_ = v14;
      *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v26 + 7);
      *((_BYTE *)&v13->__r_.__value_.__s + 23) = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append(*(std::string **)a1, "_B");
    }
    for (i = *(_QWORD *)a1 + 24; i != *(_QWORD *)(a1 + 8) - 24; i += 24)
    {
      if (a2)
      {
        std::operator+<char>();
        v16 = std::string::append(&__p, "_I/");
        v17 = v16->__r_.__value_.__r.__words[0];
        v26[0] = v16->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
        v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(i + 23) < 0)
          operator delete(*(void **)i);
        v19 = v26[0];
        *(_QWORD *)i = v17;
        *(_QWORD *)(i + 8) = v19;
        *(_QWORD *)(i + 15) = *(_QWORD *)((char *)v26 + 7);
        *(_BYTE *)(i + 23) = v18;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append((std::string *)i, "_I");
      }
    }
    if ((a2 & 1) == 0)
    {
      std::string::append((std::string *)i, "_E");
      return;
    }
    std::operator+<char>();
    v20 = std::string::append(&__p, "_E/");
    v21 = v20->__r_.__value_.__r.__words[0];
    v26[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v23 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v23 - 1) < 0)
      operator delete(*(void **)(v23 - 24));
    v24 = v26[0];
    *(_QWORD *)(v23 - 24) = v21;
    *(_QWORD *)(v23 - 16) = v24;
    *(_QWORD *)(v23 - 9) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v23 - 1) = v22;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD868658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::AddSequence(_QWORD **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  int LongestPrefix;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v15;

  v5 = a3;
  LongestPrefix = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::GetLongestPrefix(a1, a2, a3);
  *a4 = *v5;
  v8 = LongestPrefix;
  if (LongestPrefix < (unint64_t)((a2[1] - *a2) >> 2))
  {
    v9 = 4 * LongestPrefix;
    v10 = LongestPrefix;
    do
    {
      v11 = *v5;
      v12 = operator new();
      v13 = *(_DWORD *)(*a2 + v9);
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_DWORD *)(v12 + 32) = 1065353216;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_DWORD *)(v12 + 72) = 1065353216;
      *(_QWORD *)(v12 + 80) = v11;
      *(_DWORD *)(v12 + 88) = v13;
      *a4 = v12;
      v15 = (int *)(*a2 + v9);
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11, v15, (uint64_t)&std::piecewise_construct, &v15)[3] = v12;
      ++v10;
      v9 += 4;
      v5 = a4;
    }
    while (v10 < (a2[1] - *a2) >> 2);
  }
  return v8;
}

uint64_t kaldi::quasar::Lexicon::DeletePronOnly(uint64_t a1, int a2, _QWORD *a3)
{
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t result;
  int v9;

  v9 = a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(a3 + 5, &v9);
  if (a3[8] == 1)
  {
    if (a3[3])
      v5 = 1;
    else
      v5 = -1;
    *(_DWORD *)(a3[7] + 20) = v5;
  }
  else
  {
    v6 = (uint64_t *)a3[7];
    if (v6)
    {
      v7 = 1;
      do
      {
        *((_DWORD *)v6 + 5) = v7++;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
  }
  result = kaldi::quasar::Lexicon::PrunePron(a1, (uint64_t)a3);
  *(_BYTE *)(a1 + 54) = 1;
  *(_BYTE *)(a1 + 352) = 0;
  return result;
}

uint64_t kaldi::quasar::Lexicon::PrunePron(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (**(_QWORD **)(result + 56) != a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      if (*(_QWORD *)(v2 + 64))
        break;
      if (*(_QWORD *)(v2 + 24))
        break;
      v4 = *(_QWORD **)(v2 + 80);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v4, (int *)(v2 + 88));
      v5 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(v2);
      result = MEMORY[0x1AF44D190](v5, 0x10A0C40A79550FFLL);
      v2 = (uint64_t)v4;
    }
    while (v4 != **(_QWORD ***)(v3 + 56));
  }
  return result;
}

uint64_t kaldi::quasar::Lexicon::GetMaxDisambigId(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _OWORD v10[2];
  unsigned __int128 v11;
  uint64_t v12;

  v12 = a2;
  v11 = 0u;
  memset(v10, 0, sizeof(v10));
  std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(v10, &v12);
  if (*((_QWORD *)&v11 + 1))
  {
    LODWORD(v3) = 0;
    v4 = v11;
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v10[0] + 1) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5 == **(_QWORD ***)(a1 + 56))
      {
        LODWORD(v6) = 0;
      }
      else
      {
        v6 = v5[8];
        if (v6 == 1)
          LODWORD(v6) = *(_DWORD *)(v5[7] + 20) != -1;
      }
      if ((int)v6 <= (int)v3)
        v3 = v3;
      else
        v3 = v6;
      for (i = v5 + 2;
            ;
            std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(v10, i + 3))
      {
        i = (_QWORD *)*i;
        if (!i)
          break;
      }
      v8 = *((_QWORD *)&v11 + 1) - 1;
      v4 = v11 + 1;
      v11 = __PAIR128__(*((unint64_t *)&v11 + 1), (uint64_t)v11 + 1) + __PAIR128__(-1, 0);
      if (v4 >= 0x400)
      {
        operator delete(**((void ***)&v10[0] + 1));
        v4 = v11 - 512;
        *((_QWORD *)&v10[0] + 1) += 8;
        *(_QWORD *)&v11 = v11 - 512;
        v8 = *((_QWORD *)&v11 + 1);
      }
    }
    while (v8);
  }
  else
  {
    v3 = 0;
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v10);
  return v3;
}

void sub_1AD8689D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::GetPhoneId(uint64_t a1, __int128 *a2, int a3)
{
  _QWORD *v6;
  __int128 *v7;
  int v8;
  std::string *v9;
  _QWORD *v11;
  __int128 *v12[34];

  v6 = (_QWORD *)(a1 + 80);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 80), (unsigned __int8 *)a2))
  {
    if (!a3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid phone ", 14);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)a2);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    v8 = *(_DWORD *)(a1 + 64);
    v7 = (__int128 *)(a1 + 64);
    v12[0] = a2;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v12)+ 10) = v8;
    v12[0] = v7;
    v9 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v7 + 56, (int *)v7, (uint64_t)&std::piecewise_construct, (_DWORD **)v12);
    std::string::operator=(v9 + 1, (const std::string *)a2);
    ++*(_DWORD *)v7;
  }
  return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)a2)+ 10);
}

void kaldi::quasar::Lexicon::PruneHomophonePronsForNode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v7;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type size;
  int v33;
  _QWORD v34[35];
  std::string v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;

  if (*(_QWORD *)(a2 + 64) > a3)
  {
    v7 = a3;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v10 = *(int **)(a2 + 56);
    if (v10)
    {
      v33 = a3;
      do
      {
        v11 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 240), v10 + 4)[5];
        v12 = v10[4];
        v13 = v37;
        if (v37 >= v38)
        {
          v15 = v37 - v36;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = ((char *)v38 - (char *)v36) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)((char *)v38 - (char *)v36) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v38, v17);
          else
            v18 = 0;
          v19 = (uint64_t *)&v18[8 * v15];
          *v19 = v12 | (v11 << 32);
          v14 = v19 + 1;
          v21 = (char *)v36;
          v20 = v37;
          if (v37 != v36)
          {
            do
            {
              v22 = *--v20;
              *--v19 = v22;
            }
            while (v20 != (uint64_t *)v21);
            v20 = v36;
          }
          v36 = v19;
          v37 = v14;
          v38 = (uint64_t *)&v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v37 = v12 | (v11 << 32);
          v14 = v13 + 1;
        }
        v37 = v14;
        v10 = *(int **)v10;
      }
      while (v10);
      v23 = v36;
      v7 = v33;
    }
    else
    {
      v14 = 0;
      v23 = 0;
    }
    v24 = 126 - 2 * __clz(v14 - v23);
    if (v14 == v23)
      v25 = 0;
    else
      v25 = v24;
    std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>((uint64_t)v23, v14, (uint64_t)v34, v25, 1);
    if (*(_DWORD *)(a2 + 64) - v7 >= 1)
    {
      v26 = 0;
      v27 = 8 * (*(_DWORD *)(a2 + 64) - v7);
      do
      {
        v28 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 200), (int *)&v36[v26 / 8]);
        if (*((char *)v28 + 47) < 0)
          std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v28[3], v28[4]);
        else
          v35 = *(std::string *)((_BYTE *)v28 + 1);
        if (HIDWORD(v36[v26 / 8]) == 1)
          v29 = a4;
        else
          v29 = a5;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v29, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&v35);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, 1);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Removing a pron for word: ", 26);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v35;
          else
            v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          else
            size = v35.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, size);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
        }
        kaldi::quasar::Lexicon::DeletePron(a1, v36[v26 / 8], (_QWORD *)a2);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v26 += 8;
      }
      while (v27 != v26);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1AD868DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Lexicon::NumHomophones(kaldi::quasar::Lexicon *this)
{
  if (*((_BYTE *)this + 304) && *((_BYTE *)this + 352))
    return *((unsigned int *)this + 84);
  else
    return 0xFFFFFFFFLL;
}

void kaldi::quasar::ConstLexicon::Init(kaldi::quasar::ConstLexicon *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  __int128 v7;
  char v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string *p_p;
  uint64_t v14;
  void *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  std::string __p;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;

  *((_BYTE *)this + 72) = 1;
  v2 = *((_QWORD *)this + 8);
  v3 = **((int **)this + 7);
  v4 = strlen((const char *)(v2 + v3));
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(v2 + (int)v3 + v4 + 5));
  kaldi::SplitStringToVector(&__p, " \t", 1, (uint64_t)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v19;
  v6 = v20;
  while (v5 != v6)
  {
    if ((char)v5[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v7 = *(_OWORD *)v5;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    kaldi::quasar::Lexicon::BasifyPhone(&__p);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = v5[23];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v5 + 1);
    if (size == v10)
    {
      if (v11 >= 0)
        v12 = (const std::string::value_type *)v5;
      else
        v12 = *(const std::string::value_type **)v5;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v15 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v12, __p.__r_.__value_.__l.__size_))
          goto LABEL_27;
      }
      else
      {
        if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
          goto LABEL_28;
        p_p = &__p;
        v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        while (p_p->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
        {
          p_p = (std::string *)((char *)p_p + 1);
          ++v12;
          if (!--v14)
          {
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_28;
            goto LABEL_26;
          }
        }
      }
    }
    *((_BYTE *)this + 72) = 0;
    if ((v8 & 0x80) == 0)
      goto LABEL_28;
LABEL_26:
    v15 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_27:
    operator delete(v15);
LABEL_28:
    v5 += 24;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 8);
  v16 = v19;
  v17 = v20;
  while (v16 != v17)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 8, v16, (uint64_t)v16);
    v16 += 24;
  }
  MEMORY[0x1AF44C914]((char *)this + 80, "");
  *((_DWORD *)this + 26) = -1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1AD868FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ConstLexicon::HasWord(uint64_t a1, const std::string *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  size_t v11;
  const void *p_p;
  size_t size;
  const std::string *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  _BOOL8 v31;
  int v32;
  void *__p;
  size_t v35;
  unsigned __int8 v36;

  v4 = *(_DWORD *)(a1 + 48);
  if (v4 < 2)
  {
    v18 = 1;
  }
  else
  {
    v5 = 1;
    do
    {
      v6 = v4 - v5;
      if (v4 < v5)
        ++v6;
      v7 = v5 + (v6 >> 1);
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(_QWORD *)(a1 + 64) + *(int *)(*(_QWORD *)(a1 + 56) + 4 * v7)));
      v8 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      v9 = (char)v36;
      v10 = __p;
      if ((v36 & 0x80u) == 0)
        v11 = v36;
      else
        v11 = v35;
      if ((v36 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v8 >= 0)
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      else
        size = a2->__r_.__value_.__l.__size_;
      if (v8 >= 0)
        v14 = a2;
      else
        v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      if (size >= v11)
        v15 = v11;
      else
        v15 = size;
      v16 = memcmp(p_p, v14, v15);
      if (v16)
        v17 = v16 < 0;
      else
        v17 = v11 < size;
      if (v9 < 0)
        operator delete(v10);
      if (v17)
        v5 = v7 + 1;
      else
        v4 = v7;
    }
    while (v5 < v4);
    v18 = v5;
  }
  std::string::operator=((std::string *)(a1 + 80), a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(_QWORD *)(a1 + 64) + *(int *)(*(_QWORD *)(a1 + 56) + 4 * v18)));
  v19 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v19 & 0x80u) == 0)
    v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v20 = a2->__r_.__value_.__l.__size_;
  v21 = v36;
  v22 = (char)v36;
  if ((v36 & 0x80u) != 0)
    v21 = v35;
  if (v20 != v21)
  {
    v31 = 0;
    if (((char)v36 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_56;
  }
  if ((v36 & 0x80u) == 0)
    v23 = (unsigned __int8 *)&__p;
  else
    v23 = (unsigned __int8 *)__p;
  if ((v19 & 0x80) != 0)
  {
    v31 = memcmp(a2->__r_.__value_.__l.__data_, v23, a2->__r_.__value_.__l.__size_) == 0;
    goto LABEL_52;
  }
  if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    v24 = v19 - 1;
    do
    {
      v26 = a2->__r_.__value_.__s.__data_[0];
      a2 = (const std::string *)((char *)a2 + 1);
      v25 = v26;
      v28 = *v23++;
      v27 = v28;
      v30 = v24-- != 0;
      v31 = v25 == v27;
    }
    while (v25 == v27 && v30);
LABEL_52:
    if ((v22 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_56:
    operator delete(__p);
    if (v31)
      goto LABEL_54;
LABEL_57:
    v32 = -1;
    goto LABEL_58;
  }
  v31 = 1;
  if ((char)v36 < 0)
    goto LABEL_56;
LABEL_53:
  if (!v31)
    goto LABEL_57;
LABEL_54:
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v18);
LABEL_58:
  *(_DWORD *)(a1 + 104) = v32;
  return v31;
}

uint64_t kaldi::quasar::ConstLexicon::GetPron@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v4 = result;
  v6 = a2[23];
  v7 = *((_QWORD *)a2 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  v9 = *(unsigned __int8 *)(result + 103);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(result + 88);
  if (v8 == v9)
  {
    if (v10 >= 0)
      v11 = (unsigned __int8 *)(result + 80);
    else
      v11 = *(unsigned __int8 **)(result + 80);
    if ((v6 & 0x80) != 0)
    {
      result = memcmp(*(const void **)a2, v11, v7);
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    else
    {
      if (!(_DWORD)v6)
        goto LABEL_18;
      v12 = a2;
      while (*v12 == *v11)
      {
        ++v12;
        ++v11;
        if (!--v6)
          goto LABEL_18;
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v4 + 16))(v4, a2);
LABEL_18:
  v13 = *(_DWORD *)(v4 + 104);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if ((v13 & 0x80000000) == 0)
  {
    v14 = a2[23];
    if ((v14 & 0x80u) != 0)
      v14 = *((_DWORD *)a2 + 2);
    v15 = v13 + v14;
    v16 = *(_QWORD *)(v4 + 64);
    v17 = *(_DWORD *)(v16 + v15 + 1);
    if (v17 >= 1)
    {
      v18 = 0;
      v19 = 0;
      v20 = v15 + 5;
      v21 = a3 + 2;
      do
      {
        v22 = v16 + v20;
        if ((unint64_t)v18 >= *v21)
        {
          v23 = (v18 - *a3) >> 3;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v24 = *v21 - (_QWORD)*a3;
          v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1))
            v25 = v23 + 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v26);
          else
            v27 = 0;
          v28 = &v27[8 * v23];
          *(_QWORD *)v28 = v22;
          v18 = v28 + 8;
          v30 = *a3;
          v29 = a3[1];
          if (v29 != *a3)
          {
            do
            {
              v31 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            v29 = *a3;
          }
          *a3 = v28;
          a3[1] = v18;
          a3[2] = &v27[8 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v22;
          v18 += 8;
        }
        a3[1] = v18;
        v16 = *(_QWORD *)(v4 + 64);
        result = strlen((const char *)(v16 + v20));
        v20 += result + 1;
        ++v19;
      }
      while (v19 != v17);
    }
  }
  return result;
}

void sub_1AD8693F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::ConstLexicon::GetWord@<X0>(kaldi::quasar::ConstLexicon *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD v7[34];

  if ((a2 & 0x80000000) != 0
    || (**(uint64_t (***)(kaldi::quasar::ConstLexicon *))this)(this) <= (unint64_t)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid word idx ", 17);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return std::string::basic_string[abi:ne180100]<0>(a3, (char *)(*((_QWORD *)this + 8) + *(int *)(*((_QWORD *)this + 7) + 4 * a2)));
}

uint64_t kaldi::quasar::ExtractLexiconForLmeSlot(unsigned __int8 ***a1, uint64_t a2, uint64_t a3, uint64_t a4, kaldi::quasar::Lexicon *this, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 *v25;
  __int128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 **v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 ***v38;
  void *__p[3];
  __int128 v41;
  __int128 v42;
  int v43;
  void *v44[35];

  kaldi::quasar::Lexicon::Clear(this);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)a6);
  v15 = *a7;
  v16 = (char *)a7[1];
  while (v16 != (char *)v15)
  {
    v16 -= 24;
    v44[0] = v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
  }
  a7[1] = v15;
  std::vector<std::string>::__clear[abi:ne180100](a8);
  if ((**(uint64_t (***)(uint64_t))a2)(a2))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2) & 1) == 0)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the base lexicon is not at base phone set mode", 46);
        goto LABEL_82;
      }
      return 0;
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    kaldi::quasar::Lexicon::MergePhoneSet((uint64_t)this, v17);
    if (!(**(uint64_t (***)(uint64_t))a4)(a4))
      goto LABEL_9;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4) & 1) != 0)
    {
      if (!kaldi::quasar::LexiconItf::IsCompatibleWith(a2, a4))
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the base lexicon and preferred lexicon have different phone set", 63);
          goto LABEL_82;
        }
        return 0;
      }
LABEL_9:
      if (!(**(uint64_t (***)(uint64_t))a3)(a3))
        goto LABEL_26;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3) & 1) != 0)
      {
        if (!kaldi::quasar::LexiconItf::IsCompatibleWith(a2, a3))
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the base lexicon and guessed lexicon have different phone set", 61);
LABEL_82:
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
            return 0;
          }
          return 0;
        }
        goto LABEL_26;
      }
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
LABEL_81:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the guessed lexicon is not at base phone set mode", 49);
      goto LABEL_82;
    }
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
LABEL_67:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the preferred lexicon is not at base phone set mode", 51);
    goto LABEL_82;
  }
  if (!(**(uint64_t (***)(uint64_t))a4)(a4))
  {
    if (!(**(uint64_t (***)(uint64_t))a3)(a3))
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"all input lexicons (base, preferred, guessed) are empty", 55);
        goto LABEL_82;
      }
      return 0;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3) & 1) != 0)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
      kaldi::quasar::Lexicon::MergePhoneSet((uint64_t)this, v19);
      goto LABEL_26;
    }
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    goto LABEL_81;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    goto LABEL_67;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4);
  kaldi::quasar::Lexicon::MergePhoneSet((uint64_t)this, v18);
  if (!(**(uint64_t (***)(uint64_t))a3)(a3))
    goto LABEL_26;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    goto LABEL_81;
  }
  if (!kaldi::quasar::LexiconItf::IsCompatibleWith(a4, a3))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"the preferred lexicon and guessed lexicon has different phone set", 65);
      goto LABEL_82;
    }
    return 0;
  }
LABEL_26:
  v41 = 0u;
  v42 = 0u;
  v43 = 1065353216;
  v20 = *a1;
  v21 = a1[1];
  v38 = a1;
  if (*a1 == v21)
    goto LABEL_63;
  do
  {
    v22 = v20[1];
    v23 = (char *)(*v20 + 24);
    if (*v20 != v22 && v23 != (char *)v22)
    {
      do
      {
        v44[0] = v23;
        v25 = std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v41, (unsigned __int8 *)v23, (uint64_t)&std::piecewise_construct, (__int128 **)v44);
        ++*((_QWORD *)v25 + 5);
        v23 += 24;
      }
      while (v23 != (char *)v20[1]);
    }
    v20 += 3;
  }
  while (v20 != v21);
  if (!*((_QWORD *)&v42 + 1))
  {
LABEL_63:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"input user data is empty", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
    }
    v36 = 0;
  }
  else
  {
    v26 = (__int128 *)v42;
    if ((_QWORD)v42)
    {
      while (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 16))(a4, (uint64_t *)v26 + 2))
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 16))(a2, (uint64_t *)v26 + 2))
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 32))(v44, a2, (uint64_t *)v26 + 2);
          kaldi::quasar::Lexicon::AddProns((uint64_t)this, (uint64_t)(v26 + 1), v44);
          goto LABEL_49;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, (uint64_t *)v26 + 2))
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a3 + 32))(v44, a3, (uint64_t *)v26 + 2);
          kaldi::quasar::Lexicon::AddProns((uint64_t)this, (uint64_t)(v26 + 1), v44);
          v27 = a8[1];
          if (v27 < a8[2])
            goto LABEL_45;
LABEL_47:
          v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a8, v26 + 1);
LABEL_48:
          a8[1] = v28;
LABEL_49:
          if (v44[0])
          {
            v44[1] = v44[0];
            operator delete(v44[0]);
          }
          goto LABEL_51;
        }
        v29 = *((_QWORD *)v26 + 5);
        v44[0] = v26 + 1;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a6, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v44)+ 5) = v29;
LABEL_51:
        v26 = *(__int128 **)v26;
        if (!v26)
          goto LABEL_52;
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a4 + 32))(v44, a4, (uint64_t *)v26 + 2);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a4 + 32))(__p, a4, (uint64_t *)v26 + 2);
      kaldi::quasar::Lexicon::AddProns((uint64_t)this, (uint64_t)(v26 + 1), __p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 16))(a2, (uint64_t *)v26 + 2) & 1) == 0)
      {
        v27 = a8[1];
        if (v27 >= a8[2])
          goto LABEL_47;
LABEL_45:
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a8, v26 + 1);
        v28 = v27 + 24;
        goto LABEL_48;
      }
      goto LABEL_49;
    }
LABEL_52:
    v30 = *v38;
    v31 = v38[1];
    while (v30 != v31)
    {
      v32 = *v30 + 24;
      while (v32 != v30[1])
      {
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a6, v32);
        v32 += 24;
        if (v33)
          goto LABEL_62;
      }
      v34 = a7[1];
      if (v34 >= a7[2])
      {
        v35 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a7, (__int128 **)v30);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a7, (__int128 **)v30);
        v35 = v34 + 24;
      }
      a7[1] = v35;
LABEL_62:
      v30 += 3;
    }
    v36 = 1;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v41);
  return v36;
}

void sub_1AD869BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::Lexicon::IsBasePhoneSetMode(kaldi::quasar::Lexicon *this)
{
  return !*((_DWORD *)this + 12) && *((_BYTE *)this + 52) == 0;
}

void kaldi::quasar::Lexicon::~Lexicon(kaldi::quasar::Lexicon *this)
{
  kaldi::quasar::Lexicon::~Lexicon(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t *v2;
  uint64_t *v3;
  void **v4;

  *(_QWORD *)this = off_1E5D340C8;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(v2);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 312);
  v4 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

uint64_t kaldi::quasar::ConstLexicon::GetNumberOfWords(kaldi::quasar::ConstLexicon *this)
{
  return *((int *)this + 12);
}

uint64_t kaldi::quasar::ConstLexicon::IsBasePhoneSetMode(kaldi::quasar::ConstLexicon *this)
{
  return *((unsigned __int8 *)this + 72);
}

void kaldi::quasar::ConstLexicon::~ConstLexicon(void **this)
{
  kaldi::quasar::ConstLexicon::~ConstLexicon(this);
  JUMPOUT(0x1AF44D190);
}

{
  *this = off_1E5D32AB0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t kaldi::quasar::ConstLexicon::GetBasePhoneSet(kaldi::quasar::ConstLexicon *this)
{
  return (uint64_t)this + 8;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::__tree<int>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

uint64_t *kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C40A79550FFLL);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

void std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
}

void sub_1AD86A298(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(uint64_t **a1, const void ***a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t *std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>(uint64_t a1, _QWORD *a2, const void ***a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  char v9;
  char v10;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*a3, a3[1], (const void **)v4[4], (const void **)v4[5], (uint64_t)&v9))break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((const void **)v7[4], (const void **)v7[5], *a3, a3[1], (uint64_t)&v10))break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 32), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD86A438(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(const void **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  const void **v7;
  BOOL v10;
  uint64_t result;

  if (a3 == a4)
    return 0;
  v7 = a3;
  while (a1 != a2 && !std::less<std::string>::operator()[abi:ne180100](a5, a1, v7))
  {
    v10 = std::less<std::string>::operator()[abi:ne180100](a5, v7, a1);
    result = 0;
    if (!v10)
    {
      a1 += 3;
      v7 += 3;
      if (v7 != a4)
        continue;
    }
    return result;
  }
  return 1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD86A76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  std::__tree<std::string>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::string>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::string>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::string>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD86AE58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[5] = 0;
  v11[4] = 0;
  v11[3] = v11 + 4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD86B0A8(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::string>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__erase_unique<int>(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__erase_unique<int>(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD86B680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *HasMore;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *(_QWORD *)v9;
        if (SHIDWORD(v20) > (int)HIDWORD(*(_QWORD *)v9))
        {
          *v9 = v20;
          *((_DWORD *)a2 - 2) = v21;
          v22 = v9[1];
          v9[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9, v9 + 2, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9, v9 + 2, (uint64_t)(v9 + 4), (uint64_t)(a2 - 1));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9, v9 + 2, (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (uint64_t)(a2 - 1));
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((uint64_t *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9 + 2, v15 - 2, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v15 - 2, v15, (uint64_t *)&v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= v9[1])
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>((uint64_t *)v9, a2);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          HasMore = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>((uint64_t *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((uint64_t *)v9, HasMore);
          v9 = (int *)(HasMore + 1);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(HasMore + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>(v8, HasMore, a3, -v11, a5 & 1);
            v9 = (int *)(HasMore + 1);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = HasMore;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,std::pair<int,int> *>((uint64_t)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t *v10;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        if (SHIDWORD(v5) > SHIDWORD(v6))
        {
          v7 = v3;
          while (1)
          {
            v8 = (char *)result + v7;
            v9 = *(_DWORD *)((char *)result + v7 + 4);
            *((_DWORD *)v8 + 2) = v6;
            *((_DWORD *)v8 + 3) = v9;
            if (!v7)
              break;
            v6 = *((_QWORD *)v8 - 1);
            v7 -= 8;
            if (SHIDWORD(v5) <= SHIDWORD(v6))
            {
              v10 = (uint64_t *)((char *)result + v7 + 8);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v5;
        }
        ++v2;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = (char *)result + 12;
      do
      {
        v5 = *result;
        v4 = result[1];
        result = v2;
        if (SHIDWORD(v4) > SHIDWORD(v5))
        {
          v6 = v3;
          do
          {
            v7 = v6;
            *(v6 - 1) = v5;
            v8 = *(v6 - 2);
            v6 -= 2;
            *v7 = v8;
            v5 = *(_QWORD *)(v7 - 5);
          }
          while (SHIDWORD(v4) > SHIDWORD(v5));
          *(_QWORD *)(v6 - 1) = v4;
        }
        ++v2;
        v3 += 8;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t *a3)
{
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  v6 = HIDWORD(*a3);
  if (v4 > a1[1])
  {
    v7 = *a1;
    if ((int)v6 > v4)
    {
      *a1 = v5;
      v8 = a1 + 1;
      *(_DWORD *)a3 = v7;
      v9 = (int *)a3 + 1;
      v10 = 1;
LABEL_9:
      v12 = v9;
      goto LABEL_10;
    }
    *a1 = v3;
    *a2 = v7;
    v14 = a1[1];
    a1[1] = a2[1];
    a2[1] = v14;
    v15 = *(_QWORD *)a2;
    if ((int)HIDWORD(*a3) > (int)HIDWORD(*(_QWORD *)a2))
    {
      *a2 = *a3;
      *(_DWORD *)a3 = v15;
      v9 = (int *)a3 + 1;
      v10 = 2;
      v8 = a2 + 1;
      goto LABEL_9;
    }
    return 1;
  }
  if ((int)v6 <= v4)
    return 0;
  *a2 = v5;
  *(_DWORD *)a3 = v3;
  v12 = a2 + 1;
  v11 = a2[1];
  a2[1] = *((_DWORD *)a3 + 1);
  *((_DWORD *)a3 + 1) = v11;
  v13 = *(_QWORD *)a1;
  if ((int)HIDWORD(*(_QWORD *)a2) <= (int)HIDWORD(*(_QWORD *)a1))
    return 1;
  *a1 = *(_QWORD *)a2;
  v8 = a1 + 1;
  *a2 = v13;
  v10 = 2;
LABEL_10:
  v16 = *v8;
  *v8 = *v12;
  *v12 = v16;
  return v10;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = HIDWORD(*a1);
  if ((int)v3 <= *(a2 - 1))
  {
    v7 = (unint64_t)(a1 + 1);
    do
    {
      v5 = v7;
      if (v7 >= (unint64_t)a2)
        break;
      v8 = *(_DWORD *)(v7 + 4);
      v7 += 8;
    }
    while ((int)v3 <= v8);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = (unint64_t)(v4 + 1);
      v6 = *((_DWORD *)v4++ + 3);
    }
    while ((int)v3 <= v6);
  }
  if (v5 >= (unint64_t)a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 2;
      v10 = *(a2 - 1);
      a2 -= 2;
    }
    while ((int)v3 > v10);
  }
  if (v5 < (unint64_t)v9)
  {
    v11 = *(_DWORD *)v5;
    v12 = *v9;
    do
    {
      *(_DWORD *)v5 = v12;
      *v9 = v11;
      v13 = *(_DWORD *)(v5 + 4);
      *(_DWORD *)(v5 + 4) = v9[1];
      v9[1] = v13;
      do
      {
        v14 = *(_QWORD *)(v5 + 8);
        v5 += 8;
        v11 = v14;
      }
      while ((int)v3 <= SHIDWORD(v14));
      do
      {
        v15 = *((_QWORD *)v9 - 1);
        v9 -= 2;
        v12 = v15;
      }
      while ((int)v3 > SHIDWORD(v15));
    }
    while (v5 < (unint64_t)v9);
  }
  if ((uint64_t *)(v5 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v5 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v5 - 4);
  }
  *(_DWORD *)(v5 - 8) = v2;
  *(_DWORD *)(v5 - 4) = v3;
  return v5;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = 0;
  v3 = *a1;
  v4 = HIDWORD(*a1);
  do
    v5 = a1[++v2];
  while (SHIDWORD(v5) > (int)v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 1)
  {
    while (v6 < (unint64_t)a2)
    {
      v7 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 > (int)v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 <= (int)v4);
  }
LABEL_9:
  if (v6 >= (unint64_t)v7)
  {
    v11 = v6;
  }
  else
  {
    v10 = *v7;
    v11 = v6;
    v12 = v7;
    do
    {
      *(_DWORD *)v11 = v10;
      *v12 = v5;
      v13 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v11 + 4) = v12[1];
      v12[1] = v13;
      do
      {
        v14 = *(_QWORD *)(v11 + 8);
        v11 += 8;
        LODWORD(v5) = v14;
      }
      while (SHIDWORD(v14) > (int)v4);
      do
      {
        v15 = *((_QWORD *)v12 - 1);
        v12 -= 2;
        v10 = v15;
      }
      while (SHIDWORD(v15) <= (int)v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((uint64_t *)(v11 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v11 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v11 - 4);
  }
  *(_DWORD *)(v11 - 8) = v3;
  *(_DWORD *)(v11 - 4) = v4;
  return v11 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (SHIDWORD(v6) > (int)HIDWORD(*a1))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3), (uint64_t)(a2 - 1));
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    v15 = HIDWORD(*v10);
    if ((int)v15 > (int)HIDWORD(*v9))
    {
      v16 = v11;
      while (1)
      {
        v17 = (uint64_t)a1 + v16;
        v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if ((int)v15 <= SHIDWORD(v14))
        {
          v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a2, (uint64_t *)a3);
  v9 = *(_QWORD *)a3;
  if ((int)HIDWORD(*(_QWORD *)a4) > (int)HIDWORD(*(_QWORD *)a3))
  {
    *(_DWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    v11 = *(_QWORD *)a2;
    if ((int)HIDWORD(*(_QWORD *)a3) > (int)HIDWORD(*(_QWORD *)a2))
    {
      *a2 = *(_QWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = a2[1];
      a2[1] = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      v13 = *(_QWORD *)a1;
      if ((int)HIDWORD(*(_QWORD *)a2) > (int)HIDWORD(*(_QWORD *)a1))
      {
        *a1 = *(_QWORD *)a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a2, a3, a4);
  v11 = *(_QWORD *)a4;
  if ((int)HIDWORD(*(_QWORD *)a5) > (int)HIDWORD(*(_QWORD *)a4))
  {
    *(_DWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)a5 = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v12;
    v13 = *(_QWORD *)a3;
    if ((int)HIDWORD(*(_QWORD *)a4) > (int)HIDWORD(*(_QWORD *)a3))
    {
      *(_DWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)a4 = v13;
      v14 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v14;
      v15 = *(_QWORD *)a2;
      if ((int)HIDWORD(*(_QWORD *)a3) > (int)HIDWORD(*(_QWORD *)a2))
      {
        *a2 = *(_QWORD *)a3;
        *(_DWORD *)a3 = v15;
        v16 = a2[1];
        a2[1] = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v16;
        v17 = *(_QWORD *)a1;
        if ((int)HIDWORD(*(_QWORD *)a2) > (int)HIDWORD(*(_QWORD *)a1))
        {
          *a1 = *(_QWORD *)a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,std::pair<int,int> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t *v21;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        if ((int)HIDWORD(*v14) > (int)HIDWORD(*(_QWORD *)a1))
        {
          *(_DWORD *)v14 = *(_QWORD *)a1;
          *(_DWORD *)a1 = v15;
          v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a4, v9, (unint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 1;
      do
      {
        v20 = *(_DWORD *)a1;
        v19 = *(_DWORD *)(a1 + 4);
        v21 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((_DWORD *)a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, (uint64_t)(v21 + 1), a4, ((uint64_t)v21 - a1 + 8) >> 3);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *v8;
      if (v9 < a3 && SHIDWORD(v10) > (int)HIDWORD(v8[1]))
      {
        v10 = v8[1];
        ++v8;
        v7 = v9;
      }
      v11 = *a4;
      v12 = HIDWORD(v10);
      v13 = HIDWORD(*a4);
      if ((int)v12 <= (int)v13)
      {
        LODWORD(v14) = *(_DWORD *)v8;
        do
        {
          v15 = a4;
          a4 = v8;
          *(_DWORD *)v15 = v14;
          *((_DWORD *)v15 + 1) = *((_DWORD *)v8 + 1);
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v16);
          v7 = 2 * v7 + 2;
          v14 = *v8;
          if (v7 >= a3)
          {
            v7 = v16;
          }
          else if (SHIDWORD(v14) <= (int)HIDWORD(v8[1]))
          {
            v7 = v16;
          }
          else
          {
            v14 = v8[1];
            ++v8;
          }
        }
        while (SHIDWORD(v14) <= (int)v13);
        *(_DWORD *)a4 = v11;
        *((_DWORD *)a4 + 1) = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[2 * v3 + 2];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3 && v6[1] > v6[3])
    {
      v6 += 2;
      v7 = v8;
    }
    *a1 = *v6;
    a1[1] = v6[1];
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_DWORD *)(result + 8 * v4);
    v6 = *(_QWORD *)v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_DWORD *)(a2 - 8);
    v8 = v9;
    v10 = HIDWORD(v9);
    if ((int)HIDWORD(*(_QWORD *)v5) > SHIDWORD(v9))
    {
      do
      {
        v11 = v7;
        v7 = v5;
        *v11 = v6;
        v11[1] = v5[1];
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_DWORD *)(result + 8 * v4);
        v6 = *(_QWORD *)v5;
      }
      while ((int)HIDWORD(*(_QWORD *)v5) > (int)v10);
      *v7 = v8;
      v7[1] = v10;
    }
  }
  return result;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD86C7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  uint64_t v4;

  for (i = (_QWORD *)a1; ; i = (_QWORD *)v3)
  {
    while (i[3])
      i = *(_QWORD **)(i[2] + 24);
    if (i == (_QWORD *)a1)
      break;
    v3 = i[10];
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase((_QWORD *)v3, *(uint64_t **)(v3 + 16));
    v4 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(i);
    MEMORY[0x1AF44D190](v4, 0x10A0C40A79550FFLL);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 40);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1);
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1AD86C8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD86C9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_1AD86CA2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD86CA9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD86CCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);

  _Unwind_Resume(a1);
}

void sub_1AD86CDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD86D098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD86D198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD86D280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD86D39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD86D428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD86D668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1AD86D87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (v13 != v14)
  if (v18 != v12)

  _Unwind_Resume(a1);
}

void sub_1AD86DA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD86DB58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD86DC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1AD86DD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)&a9);
  a9 = &a15;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);

  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_1AD86E14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;

  _Unwind_Resume(a1);
}

void sub_1AD86E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AD86E4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AD86E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;
  uint64_t v10;

  a9 = (void **)(v10 - 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v10 - 56);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1AD86E6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD86EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{

  STACK[0x290] = (unint64_t)&a23;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);

  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(a13);
  _Unwind_Resume(a1);
}

void sub_1AD86F0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)va1);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)va);
  _Unwind_Resume(a1);
}

void sub_1AD86F450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AD86FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60)
{
  void *v60;

  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1AD86FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1AD86FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1AD8700A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD87032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1AD87070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1AD870924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Unwind_Resume(a1);
}

void sub_1AD870B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<int>>((uint64_t)v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1AD87116C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<int>(unsigned int **a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  v6 = (void *)objc_msgSend(v2, "copy");

  return v6;
}

void sub_1AD871214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD8714A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1AD871700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));

  _Unwind_Resume(a1);
}

void sub_1AD871814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1AD87197C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD871A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id EARSpeechRecognitionResultFromQuasarResult(void *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5, unsigned int a6, int a7, char a8, uint64_t *a9, int a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t *a15, uint64_t *a16, unsigned __int8 a17, unsigned __int8 a18)
{
  dispatch_queue_t *v22;
  id v23;
  id v24;
  quasar::QsrText *v25;
  double v26;
  uint64_t v27;
  void **v28;
  void **v29;
  int v30;
  BOOL v31;
  dispatch_queue_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int16 v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _EARSpeechRecognitionResult *v48;
  id v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[4];
  dispatch_queue_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  void **v68;
  void **v69;
  uint64_t v70;
  void **v71[3];
  void **v72[3];
  void **v73[3];
  void **v74[3];
  void **v75[3];
  __int128 v76;
  uint64_t v77;
  void **v78;

  v22 = a1;
  v23 = a3;
  v24 = a4;
  dispatch_assert_queue_V2(v22[1]);
  v76 = 0uLL;
  v77 = 0;
  memset(v75, 0, sizeof(v75));
  memset(v74, 0, sizeof(v74));
  memset(v73, 0, sizeof(v73));
  memset(v72, 0, sizeof(v72));
  memset(v71, 0, sizeof(v71));
  if ((a17 & a18) != 0)
    v26 = 0.0;
  else
    v26 = (double)a6 / 1000.0;
  if (v22[2])
  {
    v68 = 0;
    v69 = 0;
    v70 = 0;
    if (!-[dispatch_queue_t isLegacyVoiceCommandRequest](v22, "isLegacyVoiceCommandRequest")
      || (v27 = a16[1], *a16 == v27))
    {
      if (&v68 != (void ***)a2)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v68, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
      v28 = v68;
      v29 = v69;
      if (v68 != v69)
      {
        v30 = *((_DWORD *)v68 + 7);
        do
        {
          if (*((_DWORD *)v28 + 9))
            v31 = *((_DWORD *)v28 + 8) == 0;
          else
            v31 = 1;
          if (v31)
          {
            *((_DWORD *)v28 + 7) = v30;
            v30 += 11;
            *((_DWORD *)v28 + 8) = v30;
            *((_DWORD *)v28 + 9) = v30;
          }
          v28 += 28;
        }
        while (v28 != v29);
      }
    }
    else if (&v68 != (void ***)a16)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v68, *a16, v27, 0x6DB6DB6DB6DB6DB7 * ((v27 - *a16) >> 5));
    }
    v32 = v22[2];
    v33 = (std::__shared_weak_count *)a9[1];
    v64 = *a9;
    v65 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
    v36 = -[dispatch_queue_t itnEnablingFlags](v22, "itnEnablingFlags");
    v37 = -[dispatch_queue_t recognizeEmoji](v22, "recognizeEmoji");
    v38 = (std::__shared_weak_count *)a15[1];
    v62 = *a15;
    v63 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = ___Z42EARSpeechRecognitionResultFromQuasarResultP20_EARSpeechRecognizerRKNSt3__16vectorIN6quasar5TokenENS1_9allocatorIS4_EEEEP8NSStringSB_S9_jjbNS1_10shared_ptrINS3_25ContinuousListeningConfigEEEiS9_bS9_bNSC_IbEES9_bb_block_invoke;
    v60[3] = &unk_1E5D46F10;
    v61 = v22;
    if (v32)
    {
      LOBYTE(v54) = 0;
      BYTE1(v53) = a14;
      LOBYTE(v53) = 0;
      BYTE3(v52) = a12;
      BYTE2(v52) = v37;
      LOWORD(v52) = v36;
      BYTE4(v51) = a8;
      LODWORD(v51) = a7;
      -[NSObject formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:](v32, "formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:", &v68, v73, v23, v24, a5, 0, v75, v51, &v64, a11, v74, v72, v52, a13,
        v71,
        v53,
        &v62,
        v54,
        v60);
    }
    else
    {
      v66 = 0uLL;
      v67 = 0;
    }
    std::vector<quasar::Token>::__vdeallocate((void **)&v76);
    v76 = v66;
    v77 = v67;
    v67 = 0;
    v66 = 0uLL;
    v78 = (void **)&v66;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v78);
    v41 = v63;
    if (v63)
    {
      v42 = (unint64_t *)&v63->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v65;
    if (v65)
    {
      v45 = (unint64_t *)&v65->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }

    *(_QWORD *)&v66 = &v68;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  }
  else if (&v76 != (__int128 *)a2)
  {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v76, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v47 = quasar::QsrText::SingletonInstance(v25);
  quasar::QsrText::qsrToHatTokens(v47, (__int128 **)a2, (uint64_t *)&v68, 1);
  v48 = [_EARSpeechRecognitionResult alloc];
  memset(v59, 0, sizeof(v59));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v59, v76, *((uint64_t *)&v76 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 5));
  memset(v58, 0, sizeof(v58));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v58, (uint64_t)v68, (uint64_t)v69, 0x6DB6DB6DB6DB6DB7 * (((char *)v69 - (char *)v68) >> 5));
  v49 = -[_EARSpeechRecognitionResult _initWithTokens:preITNTokens:confidence:voiceCommandInterpretations:preITNVoiceCommandInterpretations:utteranceStart:](v48, "_initWithTokens:preITNTokens:confidence:voiceCommandInterpretations:preITNVoiceCommandInterpretations:utteranceStart:", v59, v58, 0, 0, (double)a10, v26);
  *(_QWORD *)&v66 = v58;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  *(_QWORD *)&v66 = v59;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  *(_QWORD *)&v66 = &v68;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  v68 = (void **)v71;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v68);
  v71[0] = (void **)v72;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](v71);
  v72[0] = (void **)v73;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v72);
  v73[0] = (void **)v74;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v73);
  v74[0] = (void **)v75;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v74);
  v75[0] = (void **)&v76;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v75);

  return v49;
}

void sub_1AD872094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void ***a47,uint64_t a48,uint64_t a49,void **a50)
{
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;

  a47 = &a50;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (void **)(v53 - 240);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&a50);
  *(_QWORD *)(v53 - 240) = v53 - 216;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 240));
  *(_QWORD *)(v53 - 216) = v53 - 192;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  *(_QWORD *)(v53 - 192) = v53 - 168;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(_QWORD *)(v53 - 168) = v53 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 168));

  _Unwind_Resume(a1);
}

void ___Z42EARSpeechRecognitionResultFromQuasarResultP20_EARSpeechRecognizerRKNSt3__16vectorIN6quasar5TokenENS1_9allocatorIS4_EEEEP8NSStringSB_S9_jjbNS1_10shared_ptrINS3_25ContinuousListeningConfigEEEiS9_bS9_bNSC_IbEES9_bb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v5 = a4;
  objc_msgSend(*(id *)(a1 + 32), "recognitionMetrics");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addItnRunIntervals:", v7);

}

void sub_1AD87222C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id RHPackageToEARPackage(uint64_t a1)
{
  int v2;
  void *v3;
  std::string *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *p_p;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _EARVoiceCommandDebugInfo *v13;
  _EARVoiceCommandDebugInfo *v14;
  _EARPerformanceMarkers *v15;
  unsigned int **v16;
  void *v17;
  void *v18;
  void *v19;
  _EARPerformanceMarkers *v20;
  _EARSpeechRecognitionResultPackage *v21;
  id v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  std::string __p;
  std::string v34;

  v30 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", a1, 0, 0);
  v29 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", a1 + 48, 0, 0);
  v31 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", a1 + 24, 0, 0);
  v2 = *(_DWORD *)(a1 + 76);
  if (!*(_BYTE *)(a1 + 368))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v32 = 0;
    goto LABEL_43;
  }
  v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  EARHelpers::EARVoiceCommandInterpretationsFromQuasarCommandData(a1 + 184);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
    objc_msgSend(v32, "addObject:", v3);
  if (!*(_BYTE *)(a1 + 368))
    std::__throw_bad_optional_access[abi:ne180100]();
  quasar::topChoice2Str((uint64_t **)(a1 + 184), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v34.__r_.__value_.__l.__size_)
    {
      v4 = (std::string *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }
  else if (*((_BYTE *)&v34.__r_.__value_.__s + 23))
  {
    v4 = &v34;
LABEL_11:
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v4);
    v8 = objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  if (!*(_BYTE *)(a1 + 368))
    std::__throw_bad_optional_access[abi:ne180100]();
  quasar::topChoice2Str((uint64_t **)(a1 + 208), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_19:
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", p_p);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_21;
  }
  v7 = 0;
LABEL_21:
  if (!*(_BYTE *)(a1 + 368))
    std::__throw_bad_optional_access[abi:ne180100]();
  v10 = *(_QWORD *)(a1 + 336);
  if (*(_QWORD *)(a1 + 344) == v10)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_38;
  }
  v11 = (_QWORD *)(v10 + 24);
  if (*(char *)(v10 + 47) < 0)
  {
    if (!*(_QWORD *)(v10 + 32))
    {
LABEL_30:
      v6 = 0;
      goto LABEL_31;
    }
    v11 = (_QWORD *)*v11;
  }
  else if (!*(_BYTE *)(v10 + 47))
  {
    goto LABEL_30;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_31:
  v12 = (_QWORD *)(v10 + 48);
  if (*(char *)(v10 + 71) < 0)
  {
    if (!*(_QWORD *)(v10 + 56))
    {
LABEL_37:
      v5 = 0;
      goto LABEL_38;
    }
    v12 = (_QWORD *)*v12;
  }
  else if (!*(_BYTE *)(v10 + 71))
  {
    goto LABEL_37;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);

LABEL_43:
  v13 = [_EARVoiceCommandDebugInfo alloc];
  *(_WORD *)((char *)&v25 + 1) = *(_WORD *)(a1 + 459);
  LOBYTE(v25) = *(_BYTE *)(a1 + 458);
  v14 = -[_EARVoiceCommandDebugInfo initWithPrecedingUtterance:commandUtterance:target:payload:hasVoiceCommandInExhaustiveParses:hasVoiceCommandParses:hasVoiceCommandEditIntent:hasVoiceCommandAfterReranking:hasNoVoiceCommandAfterRespeakCheck:commandParserMachContinuousStartTicks:commandParserMachContinuousEndTicks:commandParserMachAbsoluteStartTicks:commandParserMachAbsoluteEndTicks:](v13, "initWithPrecedingUtterance:commandUtterance:target:payload:hasVoiceCommandInExhaustiveParses:hasVoiceCommandParses:hasVoiceCommandEditIntent:hasVoiceCommandAfterReranking:hasNoVoiceCommandAfterRespeakCheck:commandParserMachContinuousStartTicks:commandParserMachContinuousEndTicks:commandParserMachAbsoluteStartTicks:commandParserMachAbsoluteEndTicks:", v8, v7, v6, v5, *(unsigned __int8 *)(a1 + 456), *(unsigned __int8 *)(a1 + 457), v25, *(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
  v27 = (void *)v7;
  v28 = (void *)v8;
  v15 = [_EARPerformanceMarkers alloc];
  v16 = (unsigned int **)(a1 + 88);
  EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 88));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 112));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 136));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[_EARPerformanceMarkers initWithCorrectPartialResultIndexList:correctAlignedPartialResultIndexList:tokenDelayInMilliseconds:](v15, "initWithCorrectPartialResultIndexList:correctAlignedPartialResultIndexList:tokenDelayInMilliseconds:", v17, v18, v19);

  v21 = [_EARSpeechRecognitionResultPackage alloc];
  LOWORD(v26) = *(_WORD *)(a1 + 80);
  v22 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v21, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v29, v30, v31, 1, *(unsigned __int8 *)(a1 + 72), 0, (double)v2 / 1000.0, 0, v32, 0, v26, 0, 0, v14,
          v20);
  EARHelpers::VectorToArray<int>(v16);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setCorrectPartialResultIndexList:", v23);

  return v22;
}

void sub_1AD87264C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;

  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));

  _Unwind_Resume(a1);
}

void sub_1AD872770()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  JUMPOUT(0x1AD872748);
}

void sub_1AD872788()
{
  JUMPOUT(0x1AD872758);
}

void sub_1AD872790()
{
  JUMPOUT(0x1AD872760);
}

void EARPackageToRHPackage(_EARSpeechRecognitionResultPackage *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  EARHelpers *v4;
  EARHelpers *v5;
  EARHelpers *v6;
  double v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  void *v26;
  _QWORD *v27;
  _EARSpeechRecognitionResultPackage *v28;
  void *__p[2];
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v28 = a1;
  v3 = operator new();
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *a2 = v3;
  -[_EARSpeechRecognitionResultPackage preITNRecognition](v28, "preITNRecognition");
  v4 = (EARHelpers *)objc_claimAutoreleasedReturnValue();
  EARHelpers::QuasarNbestFromEARSpeechRecognition(v4, (uint64_t *)&v35);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v3);
  *(_OWORD *)v3 = v35;
  v27 = (_QWORD *)v3;
  *(_QWORD *)(v3 + 16) = v36;
  v36 = 0;
  v35 = 0uLL;
  *(_QWORD *)&v31 = &v35;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);

  -[_EARSpeechRecognitionResultPackage unrepairedRecognition](v28, "unrepairedRecognition");
  v5 = (EARHelpers *)objc_claimAutoreleasedReturnValue();
  EARHelpers::QuasarNbestFromEARSpeechRecognition(v5, (uint64_t *)&v35);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(v3 + 24));
  *(_OWORD *)(v3 + 24) = v35;
  *(_QWORD *)(v3 + 40) = v36;
  v36 = 0;
  v35 = 0uLL;
  *(_QWORD *)&v31 = &v35;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);

  -[_EARSpeechRecognitionResultPackage recognition](v28, "recognition");
  v6 = (EARHelpers *)objc_claimAutoreleasedReturnValue();
  EARHelpers::QuasarNbestFromEARSpeechRecognition(v6, (uint64_t *)&v35);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(v3 + 48));
  *(_OWORD *)(v3 + 48) = v35;
  *(_QWORD *)(v3 + 64) = v36;
  v36 = 0;
  v35 = 0uLL;
  *(_QWORD *)&v31 = &v35;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);

  *(_BYTE *)(v3 + 72) = -[_EARSpeechRecognitionResultPackage isFinal](v28, "isFinal");
  -[_EARSpeechRecognitionResultPackage utteranceStart](v28, "utteranceStart");
  *(_DWORD *)(v3 + 76) = (int)(v7 * 1000.0);
  *(_BYTE *)(v3 + 80) = -[_EARSpeechRecognitionResultPackage recognitionPaused](v28, "recognitionPaused");
  *(_BYTE *)(v3 + 81) = -[_EARSpeechRecognitionResultPackage firstResultAfterResume](v28, "firstResultAfterResume");
  -[_EARSpeechRecognitionResultPackage correctPartialResultIndexList](v28, "correctPartialResultIndexList");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v30 = 0;
  *(_OWORD *)__p = 0uLL;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v9 = v8;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, &v35, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v32 != v11)
          objc_enumerationMutation(v9);
        v13 = *(id *)(*((_QWORD *)&v31 + 1) + 8 * i);
        v14 = objc_msgSend(v13, "intValue");
        v15 = v14;
        v16 = (char *)__p[1];
        if (__p[1] >= v30)
        {
          v18 = (char *)__p[0];
          v19 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v21 = v30 - (char *)__p[0];
          if ((v30 - (char *)__p[0]) >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v30, v22);
            v16 = (char *)__p[1];
            v18 = (char *)__p[0];
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[4 * v19];
          *(_DWORD *)v24 = v15;
          v17 = (uint64_t)(v24 + 4);
          while (v16 != v18)
          {
            v25 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          __p[0] = v24;
          v30 = &v23[4 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_DWORD *)__p[1] = v14;
          v17 = (uint64_t)__p[1] + 4;
        }
        __p[1] = (void *)v17;

      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, &v35, 16);
    }
    while (v10);
  }

  v26 = (void *)v27[11];
  if (v26)
  {
    v27[12] = v26;
    operator delete(v26);
    v27[11] = 0;
    v27[12] = 0;
    v27[13] = 0;
  }
  *(_OWORD *)(v27 + 11) = *(_OWORD *)__p;
  v27[13] = v30;
  v30 = 0;

}

void sub_1AD872B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::result_handler::Package **a10, uint64_t a11, void *a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);

  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](a10, 0);
  _Unwind_Resume(a1);
}

void EARResultToRHPackage(_EARSpeechRecognitionResult *a1@<X0>, uint64_t *a2@<X8>)
{
  _EARSpeechRecognitionResult *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  double v11;
  void **v12;
  uint64_t v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = operator new();
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *a2 = v4;
  -[_EARSpeechRecognitionResult preITNTokens](v3, "preITNTokens");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    -[_EARSpeechRecognitionResult preITNTokens](v3, "preITNTokens");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(v7, v13);
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(v4, v13, &v14, 1uLL);
    v12 = (void **)v13;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v12);

  }
  -[_EARSpeechRecognitionResult tokens](v3, "tokens");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "count") == 0;

  if (!v9)
  {
    -[_EARSpeechRecognitionResult tokens](v3, "tokens");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(v10, v13);
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(v4 + 48, v13, &v14, 1uLL);
    v12 = (void **)v13;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v12);

  }
  -[_EARSpeechRecognitionResult utteranceStart](v3, "utteranceStart");
  *(_DWORD *)(v4 + 76) = (int)(v11 * 1000.0);

}

void sub_1AD872DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  void *v11;
  quasar::result_handler::Package **v12;
  void *v13;

  a10 = (void **)&a11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);

  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v12, 0);
  _Unwind_Resume(a1);
}

void sub_1AD872F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_1AD873098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD87328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  a12 = (void **)&a15;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::addPartialResultToContext(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "addPartialResultToContext:", a2);

}

void sub_1AD873554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD8735E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::writePartialImpl(uint64_t a1, uint64_t **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t *a10, unsigned __int8 a11)
{
  id v19;
  void *v20;
  int v21;
  char v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id WeakRetained;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD v52[3];
  void **v53;

  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  memset(v52, 0, sizeof(v52));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v52, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  v19 = objc_loadWeakRetained((id *)(a1 + 264));
  v20 = *(void **)(a1 + 280);
  v41 = *(void **)(a1 + 288);
  v43 = objc_loadWeakRetained((id *)(a1 + 256));
  v44 = v19;
  v40 = a5;
  if (objc_msgSend(v43, "isLegacyVoiceCommandRequest"))
    v21 = 0;
  else
    v21 = a3;
  v42 = objc_loadWeakRetained((id *)(a1 + 256));
  v22 = objc_msgSend(v42, "isLegacyVoiceCommandRequest");
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v50);
  v23 = objc_loadWeakRetained((id *)(a1 + 272));
  v24 = v23;
  v25 = a10[1];
  v48 = *a10;
  v49 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(a1 + 304);
  v46 = *(_QWORD *)(a1 + 296);
  v47 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  ResultStreamWrapper::writePartialToResultStream((uint64_t)v52, WeakRetained, v44, v20, v41, v40, v21, a3, a4, v22, &v50, 0, v23, a6, a7, a8, a9, &v48, a11,
    &v46);
  v31 = v47;
  if (v47)
  {
    v32 = (unint64_t *)&v47->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  v37 = v51;
  if (v51)
  {
    v38 = (unint64_t *)&v51->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  v53 = (void **)v52;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v53);
}

void sub_1AD873940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,char a28)
{
  void *v28;
  uint64_t v29;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v29 - 152);

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v29 - 136);
  *(_QWORD *)(v29 - 96) = v29 - 120;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 96));
  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::setParser(EARContinuousListeningResultHelper *this)
{
  dispatch_queue_t *WeakRetained;
  dispatch_queue_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)this + 32);
  v3 = WeakRetained;
  if (WeakRetained && *((_QWORD *)this + 39))
  {
    dispatch_assert_queue_V2(WeakRetained[1]);
    v4 = *((_QWORD *)this + 39);
    -[dispatch_queue_t getParser](v3, "getParser");
    quasar::result_handler::VoiceEditingResultHandler::setParser(v4, &v8);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *((_QWORD *)this + 39) = 0;
  }

}

void sub_1AD873A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writePartialToResultStream(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7, unsigned int a8, unsigned int a9, char a10, uint64_t *a11, int a12, void *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t *a18, unsigned __int8 a19, uint64_t *a20)
{
  id v25;
  id v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _EARSpeechRecognition *v63;
  _EARSpeechRecognition *v64;
  void *v65;
  void *v66;
  _BOOL4 v67;
  void *v69;
  BOOL v70;
  void *v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unsigned int v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  quasar::result_handler::Package *v79;
  void *v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  id v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  unsigned int v99;
  void **v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t j;
  id v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  void *v116;
  int v117;
  void *v118;
  void *v119;
  uint64_t v120;
  id v121;
  void *v122;
  void *v123;
  id v124;
  uint64_t v125;
  void *v126;
  id v127;
  id v128;
  void *v129;
  _QWORD *v130;
  id v131;
  id v132;
  id v133;
  _EARSpeechRecognitionResult *v135;
  id v136;
  id v137;
  id v138;
  id obja;
  id objb;
  id objc;
  quasar::result_handler::Package *v143;
  _QWORD v144[4];
  id v145;
  id v146;
  _QWORD v147[4];
  id v148;
  id v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  void **v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void ***v169;
  char v170;
  _BYTE v171[128];
  _BYTE v172[128];
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  void **v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193[3];

  v193[0] = *MEMORY[0x1E0C80C00];
  v138 = a2;
  v25 = a3;
  v136 = a4;
  v137 = a5;
  v128 = a13;
  v129 = v25;
  v130 = (_QWORD *)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v173 = 0uLL;
    *(_QWORD *)&v174 = 0;
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(a1, (uint64_t *)&v173, (uint64_t *)&v174 + 1, 1uLL);
    v162 = (void **)&v173;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v162);
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v28 = *(uint64_t **)a1;
    v27 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 != v27)
    {
      do
      {
        v29 = a11[1];
        v167 = *a11;
        v168 = (std::__shared_weak_count *)v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = a18[1];
        v165 = *a18;
        v166 = (std::__shared_weak_count *)v32;
        if (v32)
        {
          v33 = (unint64_t *)(v32 + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v173 = 0uLL;
        *(_QWORD *)&v174 = 0;
        EARSpeechRecognitionResultFromQuasarResult(v138, v28, v136, v137, a6, 0, a7, a10, &v167, 0, a14, a15, a16, a17, &v165, (uint64_t *)&v173, objc_msgSend(v138, "detectUtterances"), objc_msgSend(v138, "concatenateUtterances"));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "addObject:", v35);

        v162 = (void **)&v173;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v162);
        v36 = v166;
        if (v166)
        {
          p_shared_owners = (unint64_t *)&v166->__shared_owners_;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = v168;
        if (v168)
        {
          v40 = (unint64_t *)&v168->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v28 += 3;
      }
      while (v28 != v27);
    }
    objc_msgSend(v25, "speechRecognizer:didRecognizePartialResultNbest:", v138, v26);

  }
  else
  {
    v162 = 0;
    v163 = 0;
    v164 = 0;
    if (objc_msgSend(v138, "isLegacyVoiceCommandRequest"))
    {
      if (&v162 != *(void ****)a1)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v162, **(_QWORD **)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5));
      v43 = v162;
      v42 = v163;
      if (v163 != v162)
      {
        v44 = 0;
        v45 = ((char *)v163 - (char *)v162) / 224;
        if (v45 <= 1)
          v45 = 1;
        v46 = (_DWORD *)v162 + 7;
        v47 = 0xFFFFFFFF00000000;
        while (!v44 || *v46)
        {
          ++v44;
          v47 += 0x100000000;
          v46 += 56;
          if (v45 == v44)
          {
            v48 = 0;
            goto LABEL_35;
          }
        }
        v48 = (int)v162[28 * SHIDWORD(v47) + 4];
        do
        {
LABEL_35:
          if (*((_DWORD *)v43 + 9))
            v49 = *((_DWORD *)v43 + 8) == 0;
          else
            v49 = 1;
          if (v49)
          {
            *((_DWORD *)v43 + 7) = v48;
            v48 += 11;
            *((_DWORD *)v43 + 8) = v48;
            *((_DWORD *)v43 + 9) = v48;
          }
          v43 += 28;
        }
        while (v43 != v42);
      }
    }
    v50 = *(uint64_t **)a1;
    v51 = a11[1];
    v160 = *a11;
    v161 = (std::__shared_weak_count *)v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v54 = a18[1];
    v158 = *a18;
    v159 = (std::__shared_weak_count *)v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    EARSpeechRecognitionResultFromQuasarResult(v138, v50, v136, v137, a6, a8, a7, 0, &v160, a12, a14, a15, a16, a17, &v158, (uint64_t *)&v162, objc_msgSend(v138, "detectUtterances"), objc_msgSend(v138, "concatenateUtterances"));
    v135 = (_EARSpeechRecognitionResult *)objc_claimAutoreleasedReturnValue();
    v57 = v159;
    if (v159)
    {
      v58 = (unint64_t *)&v159->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v161;
    if (v161)
    {
      v61 = (unint64_t *)&v161->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (objc_msgSend(v138, "enableVoiceCommands")
      && (objc_opt_respondsToSelector() & 1) != 0
      && *((_QWORD *)v138 + 6))
    {
      v63 = [_EARSpeechRecognition alloc];
      v190 = 0;
      v191 = 0;
      v192 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v190, (uint64_t)v162, (uint64_t)v163, 0x6DB6DB6DB6DB6DB7 * (((char *)v163 - (char *)v162) >> 5));
      v173 = 0uLL;
      *(_QWORD *)&v174 = 0;
      v169 = (void ***)&v173;
      v170 = 0;
      *(_QWORD *)&v173 = operator new(0x18uLL);
      *((_QWORD *)&v173 + 1) = v173;
      *(_QWORD *)&v174 = v173 + 24;
      *((_QWORD *)&v173 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v174, (uint64_t *)&v190, v193, (_QWORD *)v173);
      v127 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v63, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", &v173, 1, *((_QWORD *)v138 + 9));
      v169 = (void ***)&v173;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
      v169 = &v190;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
      v64 = [_EARSpeechRecognition alloc];
      -[_EARSpeechRecognitionResult tokens](v135, "tokens");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(v65, (uint64_t *)&v190);
      v173 = 0uLL;
      *(_QWORD *)&v174 = 0;
      v169 = (void ***)&v173;
      v170 = 0;
      *(_QWORD *)&v173 = operator new(0x18uLL);
      *((_QWORD *)&v173 + 1) = v173;
      *(_QWORD *)&v174 = v173 + 24;
      *((_QWORD *)&v173 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v174, (uint64_t *)&v190, v193, (_QWORD *)v173);
      v133 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v64, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", &v173, 0, *((_QWORD *)v138 + 9));
      v169 = (void ***)&v173;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
      v169 = &v190;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);

      objc_msgSend(v133, "tokenSausage");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v67 = objc_msgSend(v66, "count") == 0;

      if (quasar::gLogLevel > 4 && v67)
      {
        v188 = 0u;
        v189 = 0u;
        v186 = 0u;
        v187 = 0u;
        v184 = 0u;
        v185 = 0u;
        v182 = 0u;
        v183 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        v173 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Unable to create valid recognition for voice command partial result", 67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
      }
      v131 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v132 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v133, "potentialPrecedingRecognition");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = v69 == 0;

      if (v70)
      {
        if (quasar::gLogLevel >= 5)
        {
          v188 = 0u;
          v189 = 0u;
          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          v174 = 0u;
          v175 = 0u;
          v173 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Voice Command: partial preceding utterance: NULL", 48);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
        }
        objb = 0;
        v80 = 0;
      }
      else
      {
        objc_msgSend(v133, "potentialPrecedingRecognition");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "nBest");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "firstObject");
        obja = (id)objc_claimAutoreleasedReturnValue();

        transcriptFromTokens(obja);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        if (quasar::gLogLevel >= 5)
        {
          v188 = 0u;
          v189 = 0u;
          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          v174 = 0u;
          v175 = 0u;
          v173 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Voice Command: partial preceding utterance: ", 44);
          if (v73)
          {
            objc_msgSend(v73, "ear_toString");
            v75 = HIBYTE(v192);
            v76 = v190;
            v77 = v191;
          }
          else
          {
            v77 = 0;
            v76 = 0;
            v75 = 0;
            v190 = 0;
            v191 = 0;
            v192 = 0;
          }
          if ((v75 & 0x80u) == 0)
            v81 = (void **)&v190;
          else
            v81 = v76;
          if ((v75 & 0x80u) == 0)
            v82 = v75;
          else
            v82 = v77;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v81, v82);
          if (SHIBYTE(v192) < 0)
            operator delete(v190);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
        }
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        objb = obja;
        v83 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v154, v172, 16);
        if (v83)
        {
          v84 = *(_QWORD *)v155;
          do
          {
            for (i = 0; i != v83; ++i)
            {
              if (*(_QWORD *)v155 != v84)
                objc_enumerationMutation(objb);
              v86 = *(id *)(*((_QWORD *)&v154 + 1) + 8 * i);
              if (quasar::gLogLevel >= 5)
              {
                v188 = 0u;
                v189 = 0u;
                v186 = 0u;
                v187 = 0u;
                v184 = 0u;
                v185 = 0u;
                v182 = 0u;
                v183 = 0u;
                v180 = 0u;
                v181 = 0u;
                v178 = 0u;
                v179 = 0u;
                v176 = 0u;
                v177 = 0u;
                v174 = 0u;
                v175 = 0u;
                v173 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Voice Command: partial preceding utterance tokens", 49);
                objc_msgSend(v86, "description");
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                v89 = v88;
                if (v88)
                {
                  objc_msgSend(v88, "ear_toString");
                  v90 = HIBYTE(v192);
                  v91 = v190;
                  v92 = v191;
                }
                else
                {
                  v92 = 0;
                  v91 = 0;
                  v90 = 0;
                  v190 = 0;
                  v191 = 0;
                  v192 = 0;
                }
                if ((v90 & 0x80u) == 0)
                  v93 = (void **)&v190;
                else
                  v93 = v91;
                if ((v90 & 0x80u) == 0)
                  v94 = v90;
                else
                  v94 = v92;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v93, v94);
                if (SHIBYTE(v192) < 0)
                  operator delete(v190);

                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
              }

            }
            v83 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v154, v172, 16);
          }
          while (v83);
        }

        v80 = v73;
      }
      objc_msgSend(v133, "potentialCommandRecognition");
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "nBest");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "firstObject");
      v97 = (void *)objc_claimAutoreleasedReturnValue();

      transcriptFromTokens(v97);
      v126 = (void *)objc_claimAutoreleasedReturnValue();

      if (quasar::gLogLevel >= 5)
      {
        v188 = 0u;
        v189 = 0u;
        v186 = 0u;
        v187 = 0u;
        v184 = 0u;
        v185 = 0u;
        v182 = 0u;
        v183 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        v173 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Voice Command: partial command utterance: ", 42);
        if (v126)
        {
          objc_msgSend(v126, "ear_toString");
          v99 = HIBYTE(v192);
          v100 = v190;
          v101 = v191;
        }
        else
        {
          v101 = 0;
          v100 = 0;
          v99 = 0;
          v190 = 0;
          v191 = 0;
          v192 = 0;
        }
        if ((v99 & 0x80u) == 0)
          v102 = (void **)&v190;
        else
          v102 = v100;
        if ((v99 & 0x80u) == 0)
          v103 = v99;
        else
          v103 = v101;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v102, v103);
        if (SHIBYTE(v192) < 0)
          operator delete(v190);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
      }
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      objc = v97;
      v104 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v150, v171, 16);
      if (v104)
      {
        v105 = *(_QWORD *)v151;
        do
        {
          for (j = 0; j != v104; ++j)
          {
            if (*(_QWORD *)v151 != v105)
              objc_enumerationMutation(objc);
            v107 = *(id *)(*((_QWORD *)&v150 + 1) + 8 * j);
            if (quasar::gLogLevel >= 5)
            {
              v188 = 0u;
              v189 = 0u;
              v186 = 0u;
              v187 = 0u;
              v184 = 0u;
              v185 = 0u;
              v182 = 0u;
              v183 = 0u;
              v180 = 0u;
              v181 = 0u;
              v178 = 0u;
              v179 = 0u;
              v176 = 0u;
              v177 = 0u;
              v174 = 0u;
              v175 = 0u;
              v173 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
              v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Voice Command: partial command token", 36);
              objc_msgSend(v107, "description");
              v109 = (void *)objc_claimAutoreleasedReturnValue();
              v110 = v109;
              if (v109)
              {
                objc_msgSend(v109, "ear_toString");
                v111 = HIBYTE(v192);
                v112 = v190;
                v113 = v191;
              }
              else
              {
                v113 = 0;
                v112 = 0;
                v111 = 0;
                v190 = 0;
                v191 = 0;
                v192 = 0;
              }
              if ((v111 & 0x80u) == 0)
                v114 = (void **)&v190;
              else
                v114 = v112;
              if ((v111 & 0x80u) == 0)
                v115 = v111;
              else
                v115 = v113;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v114, v115);
              if (SHIBYTE(v192) < 0)
                operator delete(v190);

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v173);
            }

          }
          v104 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v150, v171, 16);
        }
        while (v104);
      }

      if (*((_BYTE *)v138 + 65))
      {
        objc_msgSend(v133, "potentialPrecedingRecognition");
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        v117 = v116 ? 1 : a19;

        if (v117)
        {
          objc_msgSend(v133, "potentialCommandRecognition");
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v118, "nBest");
          v119 = (void *)objc_claimAutoreleasedReturnValue();

          v120 = MEMORY[0x1E0C809B0];
          v147[0] = MEMORY[0x1E0C809B0];
          v147[1] = 3221225472;
          v147[2] = ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke;
          v147[3] = &unk_1E5D47188;
          v121 = v138;
          v148 = v121;
          v149 = v131;
          objc_msgSend(v119, "enumerateObjectsUsingBlock:", v147);
          objc_msgSend(v127, "potentialCommandRecognition");
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "nBest");
          v123 = (void *)objc_claimAutoreleasedReturnValue();

          v144[0] = v120;
          v144[1] = 3221225472;
          v144[2] = ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke_2;
          v144[3] = &unk_1E5D47188;
          v145 = v121;
          v146 = v132;
          objc_msgSend(v123, "enumerateObjectsUsingBlock:", v144);

        }
      }
      LOWORD(v125) = 0;
      v124 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:]([_EARSpeechRecognitionResultPackage alloc], "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:", v133, v127, 0, 1, 0, 0, 0.0, 0, v131, v132, v125, 0);
      objc_msgSend(v129, "speechRecognizer:didRecognizePartialResultPackage:", v138, v124);

    }
    else
    {
      v78 = *a20;
      if (*a20)
      {
        EARResultToRHPackage(v135, (uint64_t *)&v143);
        (*(void (**)(uint64_t, _QWORD, quasar::result_handler::Package **))(*(_QWORD *)v78 + 24))(v78, a9, &v143);
        v79 = v143;
        v143 = 0;
        if (v79)
        {
          quasar::result_handler::Package::~Package(v79);
          MEMORY[0x1AF44D190]();
        }
      }
      else
      {
        objc_msgSend(v25, "speechRecognizer:didRecognizePartialResult:", v138, v135);
      }
    }

    *(_QWORD *)&v173 = &v162;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  }
  objc_msgSend(v128, "addPartialResultToContext:", *v130);

}

void sub_1AD87498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x310]);

  STACK[0x310] = (unint64_t)&a66;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);

  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::writeFinalImpl(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t *a10, char a11, unsigned __int8 a12, uint64_t a13, char a14)
{
  void *v21;
  void *v22;
  id v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  id v34;
  id WeakRetained;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[3];
  char **v39;
  char *v40[2];
  _QWORD v41[3];
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void **v56;

  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  v34 = objc_loadWeakRetained((id *)(a1 + 264));
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v46 = 0u;
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  v47 = 1065353216;
  v21 = *(void **)(a1 + 280);
  v22 = *(void **)(a1 + 288);
  v23 = objc_loadWeakRetained((id *)(a1 + 272));
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v42);
  memset(v41, 0, sizeof(v41));
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  memset(v38, 0, sizeof(v38));
  v24 = *(std::__shared_weak_count **)(a1 + 304);
  v36 = *(_QWORD *)(a1 + 296);
  v37 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  ResultStreamWrapper::writeFinalChoicesToResultStream(a2, a3, a4, WeakRetained, v34, (uint64_t)v48, (unsigned __int8 *)__p, v21, -1000.0, 9.0, a5, a6, v22, v23, 1, a7, a8, 0, &v42,
    a9,
    a10,
    (uint64_t)v41,
    (uint64_t)&v39,
    v38,
    a11,
    a12,
    a13,
    a14,
    0,
    &v36);
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v56 = (void **)v38;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v56);
  std::__tree<std::string>::destroy((uint64_t)&v39, v40[0]);
  v39 = (char **)v41;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v30 = v43;
  if (v43)
  {
    v31 = (unint64_t *)&v43->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  if (SHIBYTE(v45) < 0)
    operator delete(__p[1]);
  if ((_QWORD)v53)
  {
    *((_QWORD *)&v53 + 1) = v53;
    operator delete((void *)v53);
  }
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  if ((_QWORD)v49)
  {
    *((_QWORD *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }

}

void sub_1AD875068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,char *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  uint64_t v49;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  *(_QWORD *)(v49 - 104) = v47;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 104));
  std::__tree<std::string>::destroy((uint64_t)&a33, a34);
  a33 = &a36;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a39);

  if (a47 < 0)
    operator delete(__p);
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)(v49 - 256));

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalChoicesToResultStream(uint64_t **a1, uint64_t a2, unsigned int a3, void *a4, void *a5, uint64_t a6, unsigned __int8 *a7, void *a8, double a9, double a10, unsigned int a11, int a12, void *a13, void *a14, int a15, unsigned __int8 a16, uint64_t a17, char a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,_QWORD *a24,char a25,unsigned __int8 a26,uint64_t a27,char a28,int a29,uint64_t *a30)
{
  id v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  std::string::size_type size;
  void **v40;
  std::string *p_s1;
  _EARSpeechRecognitionResultPackage *v42;
  char v43;
  void *v44;
  void *v45;
  void *v46;
  double v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned __int8 v81;
  __int16 v82;
  unsigned __int8 v83;
  uint64_t v84;
  id *v85;
  int v86;
  id *v87;
  id *v88;
  void *v89;
  id v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  void *v100;
  char v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t k;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  int v125;
  int v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t m;
  NSString *v131;
  _EARSpeechRecognitionResultPackage *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  BOOL v139;
  uint64_t v140;
  quasar::result_handler::Package *v141;
  void *v142;
  uint64_t v143;
  quasar::result_handler::Package *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  __int16 v160;
  unsigned __int8 v161;
  int v162;
  void *v163;
  void *v164;
  id v165;
  id v166;
  void *v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  __int16 v170;
  unsigned __int8 v171;
  void *v172;
  id *v173;
  id *v174;
  int v175;
  void *v176;
  uint64_t **v178;
  unsigned __int8 v179;
  id v180;
  void *v181;
  id v182;
  id v183;
  _BOOL4 v184;
  _EARSpeechRecognitionResult *v185;
  _EARSpeechRecognitionResult *v186;
  id v187;
  id v189;
  _EARSpeechRecognitionResultPackage *v191;
  _QWORD *v192;
  void *v194;
  id v195;
  quasar::corrective_reranking::Parser *v196[2];
  id v197;
  id v198;
  id v199;
  uint64_t v200[2];
  id v201;
  quasar::corrective_reranking::Parser *v202[2];
  id v203;
  void ****v204;
  uint64_t v205;
  uint64_t v206;
  void ***v207;
  uint64_t v208;
  uint64_t v209;
  void **v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213[2];
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218[2];
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  void *__p[2];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  void **v231[3];
  quasar::result_handler::Package *v232;
  quasar::result_handler::Package *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  std::string v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  quasar::corrective_reranking::Parser *v247;
  std::__shared_weak_count *v248;
  id v249;
  id v250;
  id obj;
  id v252;
  id v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  id v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _QWORD v261[7];
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t (*v265)(uint64_t, uint64_t);
  void (*v266)(uint64_t);
  id v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t (*v271)(uint64_t, uint64_t);
  void (*v272)(uint64_t);
  id v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, uint64_t);
  void (*v278)(uint64_t);
  id v279;
  std::string __s1;
  void ***v281;
  _BYTE v282[128];
  _BYTE v283[128];
  _BYTE v284[128];
  _BYTE v285[128];
  uint64_t v286;

  v286 = *MEMORY[0x1E0C80C00];
  v35 = a4;
  v187 = a5;
  v182 = a8;
  v183 = a13;
  v195 = a14;
  v192 = v35;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v35 + 1));
  v178 = a1;
  if (*a1 == a1[1])
    std::string::basic_string[abi:ne180100]<0>(&__s1, "");
  else
    quasar::TextProc::GetOrthography((__int128 **)*a1, 0, &__s1);
  if (v195)
  {
    objc_msgSend(v195, "prevBestRecogText");
    v36 = BYTE7(v223);
    v37 = (unint64_t)__p[1];
  }
  else
  {
    v37 = 0;
    v36 = 0;
    __p[1] = 0;
    __p[0] = 0;
    *(_QWORD *)&v223 = 0;
  }
  v38 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if ((v36 & 0x80u) == 0)
    v37 = v36;
  if (size != v37)
    goto LABEL_23;
  if ((v36 & 0x80u) == 0)
    v40 = __p;
  else
    v40 = (void **)__p[0];
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v40, __s1.__r_.__value_.__l.__size_))
      goto LABEL_23;
LABEL_46:
    v184 = objc_msgSend(v195, "countOfIsFinalFalseAlreadyWritten") != 0;
    if ((BYTE7(v223) & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_46;
  p_s1 = &__s1;
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v40)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    v40 = (void **)((char *)v40 + 1);
    if (!--v38)
      goto LABEL_46;
  }
LABEL_23:
  v184 = 0;
  if ((v36 & 0x80) != 0)
LABEL_24:
    operator delete(__p[0]);
LABEL_25:
  v274 = 0;
  v275 = &v274;
  v276 = 0x3032000000;
  v277 = __Block_byref_object_copy__2;
  v278 = __Block_byref_object_dispose__2;
  v279 = 0;
  v268 = 0;
  v269 = &v268;
  v270 = 0x3032000000;
  v271 = __Block_byref_object_copy__2;
  v272 = __Block_byref_object_dispose__2;
  v273 = 0;
  v262 = 0;
  v263 = &v262;
  v264 = 0x3032000000;
  v265 = __Block_byref_object_copy__2;
  v266 = __Block_byref_object_dispose__2;
  v267 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v184 && objc_msgSend(v35, "canCloneIsFinalAsLastNonFinal"))
  {
    objc_msgSend(v195, "prevPackage");
    v42 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v195, "anyResults");
    -[_EARSpeechRecognitionResultPackage setIsFinal:](v42, "setIsFinal:", a3);
    v44 = (void *)*((_QWORD *)v35 + 2);
    v261[0] = MEMORY[0x1E0C809B0];
    v261[1] = 3221225472;
    v261[2] = ___ZN19ResultStreamWrapper31writeFinalChoicesToResultStreamERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEERKNS1_IdNS4_IdEEEEbP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjjSQ_P17_EARResultContextNS2_21RecogResultStreamBase11RecogStatusEbRKS6_bNS0_10shared_ptrINS2_25ContinuousListeningConfigEEESW_RS8_RKNS1_INS2_11ItnOverrideENS4_IS11_EEEERKNS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS1B_EENS4_IS1B_EEEERKNS1_IS1F_NS4_IS1F_EEEEbbSW_bdiNSX_INS2_14result_handler13ResultHandlerEEE_block_invoke;
    v261[3] = &unk_1E5D471B0;
    v261[4] = &v274;
    v261[5] = &v268;
    v261[6] = &v262;
    objc_msgSend(v44, "setItnMetricsWithCompletion:", v261);
    v191 = v42;
    -[_EARSpeechRecognitionResultPackage recognition](v42, "recognition");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "tokenSausage");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (double)(a12 + a11) / 1000.0;
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARSpeechRecognitionResultPackage recognition](v191, "recognition");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setTokenSausage:", v48);

    -[_EARSpeechRecognitionResultPackage preITNRecognition](v191, "preITNRecognition");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "tokenSausage");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v51, v47);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARSpeechRecognitionResultPackage preITNRecognition](v191, "preITNRecognition");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "setTokenSausage:", v52);

    -[_EARSpeechRecognitionResultPackage unrepairedRecognition](v191, "unrepairedRecognition");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "tokenSausage");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v55, v47);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARSpeechRecognitionResultPackage unrepairedRecognition](v191, "unrepairedRecognition");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "setTokenSausage:", v56);

    -[_EARSpeechRecognitionResultPackage setFirstResultAfterResume:](v191, "setFirstResultAfterResume:", 0);
    -[_EARSpeechRecognitionResultPackage setRecognitionPaused:](v191, "setRecognitionPaused:", a26);
    if (*(_QWORD *)(a23 + 16))
    {
      objc_msgSend(v195, "prevMuxPackages");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v260 = 0u;
      v259 = 0u;
      v258 = 0u;
      v257 = 0u;
      v59 = v58;
      v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v257, v285, 16);
      if (v60)
      {
        v61 = *(_QWORD *)v258;
        do
        {
          for (i = 0; i != v60; ++i)
          {
            if (*(_QWORD *)v258 != v61)
              objc_enumerationMutation(v59);
            v63 = *(_QWORD *)(*((_QWORD *)&v257 + 1) + 8 * i);
            objc_msgSend(v195, "prevMuxPackages");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "objectForKeyedSubscript:", v63);
            v65 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v65, "setIsFinal:", a3);
            objc_msgSend(v65, "recognition");
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v66, "tokenSausage");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            ResultStreamWrapper::tokenSausageWithExtendedEndTime(v67, v47);
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v65, "recognition");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "setTokenSausage:", v68);

            objc_msgSend(v65, "preITNRecognition");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "tokenSausage");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            ResultStreamWrapper::tokenSausageWithExtendedEndTime(v71, v47);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v65, "preITNRecognition");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "setTokenSausage:", v72);

            objc_msgSend(v65, "unrepairedRecognition");
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "tokenSausage");
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            ResultStreamWrapper::tokenSausageWithExtendedEndTime(v75, v47);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v65, "unrepairedRecognition");
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v77, "setTokenSausage:", v76);

          }
          v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v257, v285, 16);
        }
        while (v60);
      }

    }
    else
    {
      v59 = 0;
    }
    objc_msgSend(v195, "prevPackageWithoutPersonalization");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "setIsFinal:", a3);
    objc_msgSend(v112, "recognition");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v189 = v112;
    objc_msgSend(v113, "tokenSausage");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v114, v47);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "recognition");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setTokenSausage:", v115);

    objc_msgSend(v112, "preITNRecognition");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v117, "tokenSausage");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v118, v47);
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "preITNRecognition");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v120, "setTokenSausage:", v119);

    objc_msgSend(v112, "unrepairedRecognition");
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v121, "tokenSausage");
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    ResultStreamWrapper::tokenSausageWithExtendedEndTime(v122, v47);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "unrepairedRecognition");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v124, "setTokenSausage:", v123);

    objc_msgSend(v112, "setFirstResultAfterResume:", 0);
    objc_msgSend(v112, "setRecognitionPaused:", a26);
    v186 = 0;
  }
  else
  {
    v185 = (_EARSpeechRecognitionResult *)*((_QWORD *)v35 + 2);
    v256 = 0;
    v78 = a19[1];
    v254 = *a19;
    v255 = (std::__shared_weak_count *)v78;
    if (v78)
    {
      v79 = (unint64_t *)(v78 + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v179 = objc_msgSend(v35, "detectUtterances");
    v81 = objc_msgSend(v35, "concatenateUtterances");
    v82 = objc_msgSend(v35, "itnEnablingFlags");
    v83 = objc_msgSend(v35, "recognizeEmoji");
    v253 = 0;
    v84 = *(_QWORD *)(a23 + 16);
    if (v84)
      v85 = &v252;
    else
      v85 = 0;
    if (v84)
      v252 = 0;
    v86 = *((unsigned __int8 *)v192 + 65);
    v87 = (id *)(v275 + 5);
    obj = (id)v275[5];
    v88 = (id *)(v269 + 5);
    v250 = (id)v269[5];
    v249 = 0;
    v89 = (void *)v192[9];
    objc_msgSend(v192, "relevantTextContext");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v192, "getParser");
    ResultStreamWrapper::resultPackageWithResultChoices(v178, a3, v185, a6, a7, v182, a11, v183, a9, a10, a16, a17, &v256, a18, &v254, v179, v81, a20, a21,
      a22,
      v82,
      v83,
      1,
      &v253,
      a24,
      v85,
      a25,
      a26,
      a27,
      v86 != 0,
      v192 + 6,
      a28,
      (uint64_t)&obj,
      (uint64_t)&v250,
      &v249,
      0,
      0,
      0,
      v89,
      a29,
      v181,
      &v247,
      objc_msgSend(v192, "isLegacyVoiceCommandRequest"));
    v191 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
    v186 = (_EARSpeechRecognitionResult *)v256;
    v189 = v253;
    if (v84)
      v90 = v252;
    else
      v90 = 0;
    objc_storeStrong(v87, obj);
    objc_storeStrong(v88, v250);
    v180 = v249;
    v91 = v248;
    if (v248)
    {
      p_shared_owners = (unint64_t *)&v248->__shared_owners_;
      do
        v93 = __ldaxr(p_shared_owners);
      while (__stlxr(v93 - 1, p_shared_owners));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }

    v94 = v255;
    if (v255)
    {
      v95 = (unint64_t *)&v255->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    objc_msgSend((id)v263[5], "addObjectsFromArray:", v180);
    v43 = -[_EARSpeechRecognitionResultPackage hasNonEmptyToken](v191, "hasNonEmptyToken");
    v246 = 0u;
    v245 = 0u;
    v243 = 0u;
    v244 = 0u;
    v59 = v90;
    v97 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v243, v284, 16);
    if (v97)
    {
      v98 = *(_QWORD *)v244;
      do
      {
        for (j = 0; j != v97; ++j)
        {
          if (*(_QWORD *)v244 != v98)
            objc_enumerationMutation(v59);
          objc_msgSend(v59, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v243 + 1) + 8 * j));
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          v101 = objc_msgSend(v100, "hasNonEmptyToken");

          v43 |= v101;
        }
        v97 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v243, v284, 16);
      }
      while (v97);
    }

    if (v59)
    {
      v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v103 = v59;
      v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v239, v283, 16);
      if (v104)
      {
        v105 = *(_QWORD *)v240;
        do
        {
          for (k = 0; k != v104; ++k)
          {
            if (*(_QWORD *)v240 != v105)
              objc_enumerationMutation(v103);
            v107 = *(_QWORD *)(*((_QWORD *)&v239 + 1) + 8 * k);
            objc_msgSend(v103, "objectForKeyedSubscript:", v107);
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            v109 = (void *)objc_msgSend(v108, "copy");
            objc_msgSend(v102, "setObject:forKeyedSubscript:", v109, v107);

          }
          v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v239, v283, 16);
        }
        while (v104);
      }

      v110 = v102;
    }
    else
    {
      v110 = 0;
    }
    objc_msgSend(v195, "setAnyResults:", v43 & 1);
    v111 = (void *)-[_EARSpeechRecognitionResultPackage copy](v191, "copy");
    objc_msgSend(v195, "setPrevPackage:", v111);

    objc_msgSend(v195, "setPrevMuxPackages:", v110);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v238, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      v238 = __s1;
    objc_msgSend(v195, "setPrevBestRecogText:", &v238);
    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v238.__r_.__value_.__l.__data_);
    objc_msgSend(v195, "setPrevPackageWithoutPersonalization:", v189);
    if ((a3 & 1) == 0)
      objc_msgSend(v195, "incrementCountOfIsFinalFalseAlreadyWritten");

  }
  v125 = a3 ^ 1;
  if (a15 != 1)
    v125 = 1;
  if (((v125 | v184) & 1) != 0)
    v126 = 0;
  else
    v126 = objc_msgSend(v192, "canCloneIsFinalAsLastNonFinal");
  if (quasar::gLogLevel >= 5)
  {
    if (*(_QWORD *)(a23 + 16))
    {
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      v127 = v59;
      v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v234, v282, 16);
      if (v128)
      {
        v129 = *(_QWORD *)v235;
        do
        {
          for (m = 0; m != v128; ++m)
          {
            if (*(_QWORD *)v235 != v129)
              objc_enumerationMutation(v127);
            v131 = *(NSString **)(*((_QWORD *)&v234 + 1) + 8 * m);
            objc_msgSend(v127, "objectForKeyedSubscript:", v131);
            v132 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
            logPackageToQuasarDebug(v132, v131);

          }
          v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v234, v282, 16);
        }
        while (v128);
      }

    }
    else
    {
      logPackageToQuasarDebug(v191, 0);
    }
  }
  v133 = a12 + a11;
  if ((v43 & 1) != 0 || -[_EARSpeechRecognitionResultPackage recognitionPaused](v191, "recognitionPaused"))
  {
    if (*(_QWORD *)(a23 + 16))
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Should never get here"));
      goto LABEL_106;
    }
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[_EARSpeechRecognitionResultPackage nBestResults](v191, "nBestResults");
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        -[_EARSpeechRecognitionResultPackage recognition](v191, "recognition");
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v146, "tokenSausage");
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        -[_EARSpeechRecognitionResultPackage recognition](v191, "recognition");
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v148, "interpretationIndices");
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v187, "speechRecognizer:didRecognizeFinalResults:tokenSausage:nBestChoices:", v192, v145, v147, v149);

      }
      else
      {
        -[_EARSpeechRecognitionResultPackage nBestResults](v191, "nBestResults");
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v187, "speechRecognizer:didRecognizeFinalResults:", v192, v150);

      }
LABEL_106:
      if ((v43 & 1) != 0 && (a26 & 1) == 0)
      {
        objc_msgSend(v192, "relevantTextContext");
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        -[_EARSpeechRecognitionResultPackage recognition](v191, "recognition");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "oneBest");
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        EARHelpers::EarTokensToNSString(v136);
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v134, "appendToLeftContext:", v137);

      }
      goto LABEL_109;
    }
    if (v126)
    {
      v142 = (void *)-[_EARSpeechRecognitionResultPackage copy](v191, "copy");
      objc_msgSend(v142, "setIsFinal:", 0);
      objc_msgSend(v187, "speechRecognizer:didRecognizeFinalResultPackage:", v192, v142);

    }
    v143 = *a30;
    if (*a30)
    {
      EARPackageToRHPackage(v191, (uint64_t *)&v233);
      (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v143 + 48))(v143, v133, &v233);
      v144 = v233;
      v233 = 0;
      if (v144)
      {
        quasar::result_handler::Package::~Package(v144);
        MEMORY[0x1AF44D190]();
      }
      goto LABEL_106;
    }
    if (objc_msgSend(v192, "detectUtterances"))
    {
      if (!objc_msgSend(v192, "concatenateUtterances") || (a3 & 1) != 0)
      {
LABEL_151:
        if (v195)
        {
          objc_msgSend(v195, "partialResults");
        }
        else
        {
          __p[1] = 0;
          __p[0] = 0;
          *(_QWORD *)&v223 = 0;
        }
        v155 = *v178;
        v156 = v178[1];
        *(_QWORD *)&v219 = 0;
        v218[0] = 0;
        v218[1] = 0;
        if (v155 != v156)
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v218, *v155, v155[1], 0x6DB6DB6DB6DB6DB7 * ((v155[1] - *v155) >> 5));
        -[_EARSpeechRecognitionResultPackage setCorrectPartialResultIndexList:oneBestFinalResult:partialResultIndexOffset:](v191, "setCorrectPartialResultIndexList:oneBestFinalResult:partialResultIndexOffset:", __p, v218, objc_msgSend(v195, "partialResultIndexOffset"));
        v231[0] = v218;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v231);
        v218[0] = __p;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v218);
      }
    }
    else if (a3)
    {
      goto LABEL_151;
    }
    objc_msgSend(v187, "speechRecognizer:didRecognizeFinalResultPackage:", v192, v191);
    goto LABEL_106;
  }
LABEL_109:
  if (objc_msgSend(v192, "detectUtterances") && (objc_msgSend(v192, "concatenateUtterances") & 1) == 0)
  {
    objc_msgSend(v195, "updateLoggableResultWithCurrentResult:currentCosts:startMilliseconds:", v178, a2, a11);
    objc_msgSend(v195, "resetPartialResultContext");
  }
  -[_EARSpeechRecognitionResult tokens](v186, "tokens");
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v138, "count"))
  {
    v139 = -[_EARSpeechRecognitionResultPackage recognitionPaused](v191, "recognitionPaused");

    if (!v139)
    {
      v140 = *a30;
      if (*a30)
      {
        EARResultToRHPackage(v186, (uint64_t *)&v232);
        (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v140 + 24))(v140, v133, &v232);
        v141 = v232;
        v232 = 0;
        if (v141)
        {
          quasar::result_handler::Package::~Package(v141);
          MEMORY[0x1AF44D190]();
        }
      }
      else
      {
        objc_msgSend(v187, "speechRecognizer:didRecognizePartialResult:", v192, v186);
        if (v186)
        {
          -[_EARSpeechRecognitionResult quasarPreItnTokens](v186, "quasarPreItnTokens");
        }
        else
        {
          __p[1] = 0;
          __p[0] = 0;
          *(_QWORD *)&v223 = 0;
        }
        objc_msgSend(v195, "addPartialResultToContext:", __p);
        v218[0] = __p;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v218);
      }
    }
  }
  else
  {

  }
  if (a3)
  {
    if (*(_QWORD *)(a23 + 16))
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Should never get here"));
    }
    else if (v191 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      if (objc_msgSend(v192, "detectUtterances")
        && (objc_msgSend(v192, "concatenateUtterances") & 1) == 0)
      {
        if (v195)
          objc_msgSend(v195, "loggableConcatResult");
        else
          memset(v231, 0, sizeof(v231));
        if (v275[5] && v269[5])
        {
          v157 = (void *)v192[2];
          v229 = 0u;
          v230 = 0u;
          v227 = 0u;
          v228 = 0u;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          *(_OWORD *)__p = 0u;
          v219 = 0u;
          v220 = 0u;
          *(_OWORD *)v218 = 0u;
          v221 = 1065353216;
          v216 = 0;
          v215 = 0;
          v217 = 0;
          v214 = 0;
          v213[1] = 0;
          v213[0] = 0;
          v158 = objc_msgSend(v192, "detectUtterances");
          v159 = objc_msgSend(v192, "concatenateUtterances");
          v211 = 0;
          v210 = 0;
          v212 = 0;
          v160 = objc_msgSend(v192, "itnEnablingFlags");
          v161 = objc_msgSend(v192, "recognizeEmoji");
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v204 = 0;
          v205 = 0;
          v206 = 0;
          v162 = *((unsigned __int8 *)v192 + 65);
          v202[1] = 0;
          v203 = 0;
          v163 = (void *)v192[9];
          v202[0] = 0;
          ResultStreamWrapper::resultPackageWithResultChoices(v231, 1u, v157, (uint64_t)__p, (unsigned __int8 *)v218, v182, 0, v183, -1000.0, 9.0, 0, (uint64_t)&v215, &v214, 0, v213, v158, v159, a20, a21,
            (uint64_t)&v210,
            v160,
            v161,
            0,
            0,
            &v207,
            0,
            a25,
            a26,
            (uint64_t)&v204,
            v162 != 0,
            v192 + 6,
            a28,
            0,
            0,
            &v203,
            0,
            0,
            0,
            v163,
            0,
            0,
            v202,
            objc_msgSend(v192, "isLegacyVoiceCommandRequest"));
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v165 = v214;
          v166 = v203;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v202);
          v281 = (void ***)&v204;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v281);
          v204 = &v207;
          std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
          v207 = &v210;
          std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v213);
          v210 = (void **)&v215;
        }
        else
        {
          v167 = (void *)v192[2];
          v229 = 0u;
          v230 = 0u;
          v227 = 0u;
          v228 = 0u;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          *(_OWORD *)__p = 0u;
          v219 = 0u;
          v220 = 0u;
          *(_OWORD *)v218 = 0u;
          v221 = 1065353216;
          v216 = 0;
          v215 = 0;
          v217 = 0;
          v200[1] = 0;
          v201 = 0;
          v200[0] = 0;
          v168 = objc_msgSend(v192, "detectUtterances");
          v169 = objc_msgSend(v192, "concatenateUtterances");
          v194 = v167;
          v211 = 0;
          v210 = 0;
          v212 = 0;
          v170 = objc_msgSend(v192, "itnEnablingFlags");
          v171 = objc_msgSend(v192, "recognizeEmoji");
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v204 = 0;
          v205 = 0;
          v206 = 0;
          v173 = (id *)(v275 + 5);
          v172 = (void *)v275[5];
          v174 = (id *)(v269 + 5);
          v175 = *((unsigned __int8 *)v192 + 65);
          v198 = (id)v269[5];
          v199 = v172;
          v196[1] = 0;
          v197 = 0;
          v176 = (void *)v192[9];
          v196[0] = 0;
          ResultStreamWrapper::resultPackageWithResultChoices(v231, 1u, v194, (uint64_t)__p, (unsigned __int8 *)v218, v182, 0, v183, -1000.0, 9.0, 0, (uint64_t)&v215, &v201, 0, v200, v168, v169, a20, a21,
            (uint64_t)&v210,
            v170,
            v171,
            0,
            0,
            &v207,
            0,
            a25,
            a26,
            (uint64_t)&v204,
            v175 != 0,
            v192 + 6,
            a28,
            (uint64_t)&v199,
            (uint64_t)&v198,
            &v197,
            0,
            0,
            0,
            v176,
            0,
            0,
            v196,
            objc_msgSend(v192, "isLegacyVoiceCommandRequest"));
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v165 = v201;
          objc_storeStrong(v173, v199);
          objc_storeStrong(v174, v198);
          v166 = v197;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v196);
          v281 = (void ***)&v204;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v281);
          v204 = &v207;
          std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
          v207 = &v210;
          std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v200);
          v210 = (void **)&v215;
        }
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v210);
        if (SHIBYTE(v219) < 0)
          operator delete(v218[1]);
        quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)__p);
        objc_msgSend((id)v263[5], "addObjectsFromArray:", v166);
        if (v164)
          objc_msgSend(v187, "speechRecognizer:didProduceLoggablePackage:", v192, v164);

        __p[0] = v231;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      else
      {
        objc_msgSend(v187, "speechRecognizer:didProduceLoggablePackage:", v192, v189);
      }
    }
    objc_msgSend(v192, "recognitionMetrics");
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v151, "addPauseDurationMetric");

    objc_msgSend(v192, "recognitionMetrics");
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v152, "addItnRunIntervals:", v263[5]);

    if (v275[5] && v269[5])
    {
      objc_msgSend(v192, "recognitionMetrics");
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v153, "addEmojiRecognitionMetrics:recognizedEmojis:", v275[5], v269[5]);

    }
    objc_msgSend(v192, "relevantTextContext");
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v154, "reset");

    objc_msgSend(v187, "speechRecognizer:didFinishRecognitionWithError:", v192, 0);
    objc_msgSend(v195, "resetPartialResultContext");
  }
  _Block_object_dispose(&v262, 8);

  _Block_object_dispose(&v268, 8);
  _Block_object_dispose(&v274, 8);

  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);

}

void sub_1AD8768C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,void *a50,uint64_t a51,void *a52,void *a53,void *a54,uint64_t a55,void *a56)
{
  void *v56;

  _Block_object_dispose(&STACK[0x500], 8);

  _Block_object_dispose(&STACK[0x530], 8);
  _Block_object_dispose(&STACK[0x560], 8);

  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);

  _Unwind_Resume(a1);
}

void quasar::AudioAnalytics::~AudioAnalytics(quasar::AudioAnalytics *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void EARContinuousListeningResultHelper::writeFinalCandidateImpl(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11)
{
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  id v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  id v31;
  id WeakRetained;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[3];
  char **v36;
  char *v37[2];
  _QWORD v38[3];
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *__p[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54[3];
  void **v55;

  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  memset(v54, 0, sizeof(v54));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  v31 = objc_loadWeakRetained((id *)(a1 + 264));
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  v43 = 0u;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  v44 = 1065353216;
  v16 = *(void **)(a1 + 280);
  v15 = *(void **)(a1 + 288);
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v39);
  memset(v38, 0, sizeof(v38));
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  memset(v35, 0, sizeof(v35));
  v17 = *(std::__shared_weak_count **)(a1 + 304);
  v33 = *(_QWORD *)(a1 + 296);
  v34 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = objc_loadWeakRetained((id *)(a1 + 272));
  ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(a2, -1000.0, 9.0, a3, WeakRetained, v31, (uint64_t)&v45, (unsigned __int8 *)__p, v16, a4, a5, v15, a6, 0, &v39, a7, v54, (uint64_t)v38, (uint64_t)&v36,
    v35,
    a8,
    a9,
    a10,
    a11,
    0,
    &v33,
    v20);

  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v55 = (void **)v35;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v55);
  std::__tree<std::string>::destroy((uint64_t)&v36, v37[0]);
  v36 = (char **)v38;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(v42) < 0)
    operator delete(__p[1]);
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  if ((_QWORD)v49)
  {
    *((_QWORD *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  if ((_QWORD)v47)
  {
    *((_QWORD *)&v47 + 1) = v47;
    operator delete((void *)v47);
  }
  if ((_QWORD)v45)
  {
    *((_QWORD *)&v45 + 1) = v45;
    operator delete((void *)v45);
  }

  *(_QWORD *)&v45 = v54;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
}

void sub_1AD8771E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  void *v54;
  uint64_t v55;
  uint64_t v56;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  *(_QWORD *)(v56 - 104) = v55;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 104));
  std::__tree<std::string>::destroy((uint64_t)&a35, a36);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (a49 < 0)
    operator delete(__p);
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&a54);

  a54 = v56 - 128;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(_QWORD *a1, double a2, double a3, uint64_t a4, void *a5, void *a6, uint64_t a7, unsigned __int8 *a8, void *a9, unsigned int a10, int a11, void *a12, uint64_t a13, char a14, uint64_t *a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, _QWORD *a20,char a21,uint64_t a22,char a23,char a24,int a25,uint64_t *a26,void *a27)
{
  dispatch_queue_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  __int16 v38;
  unsigned __int8 v39;
  int v40;
  dispatch_queue_t v41;
  void *v42;
  _EARSpeechRecognitionResultPackage *v43;
  id v44;
  id v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  quasar::result_handler::Package *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  dispatch_queue_t v61;
  id v64;
  id v65;
  id v67;
  id v68;
  quasar::result_handler::Package *v69;
  quasar::result_handler::Package *v70;
  quasar::corrective_reranking::Parser *v71;
  std::__shared_weak_count *v72;
  id v73;
  id v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v32 = a5;
  v65 = a6;
  v68 = a9;
  v67 = a12;
  v64 = a27;
  if (*(_QWORD *)(a19 + 16))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(const std::vector<std::vector<Token>> &, const std::vector<double> &, _EARSpeechRecognizer *__strong, __strong id<_EARSpeechRecognitionResultStream>, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, const unsigned int, NSString *__strong, const std::vector<Token> &, BOOL, std::shared_ptr<ContinuousListeningConfig>, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, const std::set<std::string> &, const std::vector<std::set<std::string>> &, BOOL, const std::vector<quasar::Token> &, double, BOOL, BOOL, int, std::shared_ptr<result_handler::ResultHandler>, _EARResultContext *__strong)");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "handleFailureInFunction:file:lineNumber:description:", v58, CFSTR("EARSpeechRecognizer.mm"), 3021, CFSTR("Mux is not supported for candidate packages"));

  }
  if (*a20 != a20[1])
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(const std::vector<std::vector<Token>> &, const std::vector<double> &, _EARSpeechRecognizer *__strong, __strong id<_EARSpeechRecognitionResultStream>, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, const unsigned int, NSString *__strong, const std::vector<Token> &, BOOL, std::shared_ptr<ContinuousListeningConfig>, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, const std::set<std::string> &, const std::vector<std::set<std::string>> &, BOOL, const std::vector<quasar::Token> &, double, BOOL, BOOL, int, std::shared_ptr<result_handler::ResultHandler>, _EARResultContext *__strong)");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("EARSpeechRecognizer.mm"), 3022, CFSTR("Mux is not supported for candidate packages"));

  }
  dispatch_assert_queue_V2(v32[1]);
  v61 = v32[2];
  v33 = a15[1];
  v75 = *a15;
  v76 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = -[dispatch_queue_t detectUtterances](v32, "detectUtterances");
  v37 = -[dispatch_queue_t concatenateUtterances](v32, "concatenateUtterances");
  v38 = -[dispatch_queue_t itnEnablingFlags](v32, "itnEnablingFlags");
  v39 = -[dispatch_queue_t recognizeEmoji](v32, "recognizeEmoji");
  v73 = 0;
  v74 = 0;
  v40 = *((unsigned __int8 *)v32 + 65);
  v41 = v32[9];
  -[dispatch_queue_t relevantTextContext](v32, "relevantTextContext");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  -[dispatch_queue_t getParser](v32, "getParser");
  ResultStreamWrapper::resultPackageWithResultChoices(a1, 0, v61, a7, a8, v68, a10, v67, a2, a3, 0, a13, 0, a14, &v75, v36, v37, a16, a17,
    a18,
    v38,
    v39,
    0,
    &v74,
    a20,
    0,
    a21,
    0,
    a22,
    v40 != 0,
    v32 + 6,
    0,
    0,
    0,
    &v73,
    a23,
    0,
    a24,
    v41,
    a25,
    v42,
    &v71,
    -[dispatch_queue_t isLegacyVoiceCommandRequest](v32, "isLegacyVoiceCommandRequest"));
  v43 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
  v44 = v74;
  v45 = v73;
  v46 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  v49 = v76;
  if (v76)
  {
    v50 = (unint64_t *)&v76->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = -[_EARSpeechRecognitionResultPackage hasNonEmptyToken](v43, "hasNonEmptyToken");
  if (quasar::gLogLevel > 4)
    logPackageToQuasarDebug(v43, 0);
  if (v52)
  {
    v53 = a11 + a10;
    v54 = *a26;
    if (a23)
    {
      if (v54)
      {
        EARPackageToRHPackage(v43, (uint64_t *)&v70);
        (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v54 + 32))(v54, v53, &v70);
        v55 = v70;
        v70 = 0;
        if (!v55)
          goto LABEL_28;
        goto LABEL_27;
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v65, "speechRecognizer:didRecognizeVoiceCommandCandidatePackage:", v32, v43);
    }
    else if (v54)
    {
      EARPackageToRHPackage(v43, (uint64_t *)&v69);
      (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v54 + 40))(v54, v53, &v69);
      v55 = v69;
      v69 = 0;
      if (v55)
      {
LABEL_27:
        quasar::result_handler::Package::~Package(v55);
        MEMORY[0x1AF44D190]();
      }
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v65, "speechRecognizer:didRecognizeFinalResultCandidatePackage:", v32, v43);
    }
  }
LABEL_28:
  -[dispatch_queue_t recognitionMetrics](v32, "recognitionMetrics");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "addItnRunIntervals:", v45);

}

void sub_1AD877740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

void sub_1AD87795C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1AD877A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1AD878764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  a37 = a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__479(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__480(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1AD878B94(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0)
    operator delete(__pa);

  _Unwind_Resume(__p);
}

void ConvertCXXExceptionToNSException(void *a1)
{
  void (**v1)(void);

  v1 = a1;
  v1[2]();

}

void sub_1AD87905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(&a18);
  _Unwind_Resume(a1);
}

void sub_1AD8790CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD8790C4);
}

void sub_1AD87919C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD87923C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD87973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char *a56)
{
  quasar::Token::~Token((void **)&a56);
  if (a24 < 0)
    operator delete(__p);
  __p = &a25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  a56 = &a46;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  a56 = (char *)&a49;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  _Unwind_Resume(a1);
}

void sub_1AD879920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD879B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1AD879DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1AD879E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD879FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD87A1B4(_Unwind_Exception *exception_object, int a2)
{
  EARLogger *v3;
  NSObject *v4;
  void *v5;
  EARLogger *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  EARLogger *v15;
  NSObject *v16;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a2 == 4)
  {
    v15 = (EARLogger *)__cxa_begin_catch(exception_object);
    EARLogger::QuasarOSLogger(v15);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      -[_EARSpeechRecognizer loadParser].cold.1((uint64_t)v15, v16);

    __cxa_rethrow();
  }
  if (a2 == 3)
  {
    v3 = (EARLogger *)__cxa_begin_catch(exception_object);
    EARLogger::QuasarOSLogger(v3);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      -[_EARSpeechRecognizer loadParser].cold.2((uint64_t)v3, v4);
  }
  else
  {
    v5 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v6 = v5;
      EARLogger::QuasarOSLogger(v6);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        -[_EARSpeechRecognizer loadParser].cold.3();

      __cxa_end_catch();
LABEL_18:
      JUMPOUT(0x1AD87A180);
    }
    EARLogger::QuasarOSLogger((EARLogger *)v5);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      -[_EARSpeechRecognizer loadParser].cold.4(v4, v8, v9, v10, v11, v12, v13, v14);
  }

  __cxa_end_catch();
  goto LABEL_18;
}

void sub_1AD87A7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1AD87A850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD87A94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD87A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD87AA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD87B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1AD87B214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD87B3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD87B770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  quasar::LmeDataStreams::~LmeDataStreams((char **)(v29 - 96));

  _Unwind_Resume(a1);
}

void sub_1AD87B83C()
{
  JUMPOUT(0x1AD87B830);
}

void addAotLmeStreams(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  unsigned int v29;
  void *__p;
  std::__shared_weak_count *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v28 = v5;
  if (v5)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (!v8)
      goto LABEL_37;
    v9 = *(_QWORD *)v36;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v36 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        v12 = (void *)MEMORY[0x1E0CB3940];
        if (v11)
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * i), "lmeData");
          v13 = __p;
        }
        else
        {
          v13 = 0;
          __p = 0;
          v31 = 0;
        }
        if (*((char *)v13 + 295) < 0)
        {
          v14 = (char *)v13[34];
          v15 = v13[35];
        }
        else
        {
          v14 = (char *)(v13 + 34);
          v15 = *((unsigned __int8 *)v13 + 295);
        }
        objc_msgSend(v12, "ear_stringWithStringView:", v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v31;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        objc_msgSend(v6, "objectForKeyedSubscript:", v16);
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = (void *)v20;
        if (v11)
        {
          objc_msgSend(v11, "lmeData");
          if (!v21)
            goto LABEL_22;
        }
        else
        {
          v33 = 0uLL;
          if (!v20)
          {
LABEL_22:
            __p = 0;
            v31 = 0;
            v32 = 0;
            goto LABEL_23;
          }
        }
        objc_msgSend(v21, "ear_toString");
LABEL_23:
        v29 = 0;
        std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,void>(&v33, (uint64_t)&__p, &v29, &v34);
        quasar::LmeDataStreams::addLmeContainer(a1, 0, &v34);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
        if (*((_QWORD *)&v34 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (SHIBYTE(v32) < 0)
          operator delete(__p);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      if (!v8)
      {
LABEL_37:

        break;
      }
    }
  }

}

void sub_1AD87BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_block_ea8_40c29_ZTSN6quasar14LmeDataStreamsE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  a1[5] = 0;
  a1[6] = 0;
  v3 = a1 + 5;
  a1[7] = 0;
  std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>(a1 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100](v3 + 3, a2 + 64);
}

void sub_1AD87BBE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c29_ZTSN6quasar14LmeDataStreamsE(uint64_t a1)
{
  void *v2;

  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1 + 64, *(char **)(a1 + 72));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void quasar::LmeDataStreams::~LmeDataStreams(char **this)
{
  char *v2;

  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)(this + 3), this[4]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void sub_1AD87BFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  quasar::LmeDataStreams::~LmeDataStreams((char **)(v29 - 96));

  _Unwind_Resume(a1);
}

void sub_1AD87C098()
{
  JUMPOUT(0x1AD87C08CLL);
}

void sub_1AD87C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1AD87C5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD87C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD87DF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  char a69;
  void *v69;
  uint64_t v70;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v70 - 248);
  *(_QWORD *)(v70 - 248) = &a65;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v70 - 248));
  a65 = (void **)&a69;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a65);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  STACK[0x2B8] = (unint64_t)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B8]);
  STACK[0x2B8] = (unint64_t)&STACK[0x240];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B8]);
  std::promise<quasar::Location>::~promise((uint64_t *)&STACK[0x218]);
  quasar::LmeDataStreams::~LmeDataStreams((char **)&STACK[0x278]);

  _Unwind_Resume(a1);
}

BOOL ResultStreamWrapper::hasInterUtteranceLeftContext(ResultStreamWrapper *this)
{
  void *v2;
  uint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  _BOOL8 v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (void *)*((_QWORD *)this + 10);
  if (!v2)
    return 0;
  objc_msgSend(v2, "continuousListeningResultHelper");
  if (v16)
  {
    p_shared_owners = &v16->__shared_owners_;
    do
      v4 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v4 - 1, (unint64_t *)p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v15)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v15)
    return 0;
LABEL_7:
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    objc_msgSend(v5, "continuousListeningResultHelper");
    v5 = v13;
  }
  else
  {
    v14 = 0;
  }
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig((uint64_t)v5, &v15);
  v6 = v16;
  v7 = *(_BYTE *)(v15 + 12) != 0;
  if (v16)
  {
    v8 = &v16->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)v8);
    while (__stlxr(v9 - 1, (unint64_t *)v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v7;
}

void sub_1AD87E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__527(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__528(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

void _EARSpeechRecognizerExecutor(_QWORD *a1, void (*a2)(void *), void *a3)
{
  NSObject *v3;
  _QWORD v4[6];

  v3 = a1[20];
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZL28_EARSpeechRecognizerExecutorPvPFvS_ES__block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = a2;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

uint64_t __copy_helper_block_ea8_48c51_ZTSNSt3__110shared_ptrIN6quasar14RunAsyncParamsEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c51_ZTSNSt3__110shared_ptrIN6quasar14RunAsyncParamsEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1AD87E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1AD87EAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1AD87F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__533(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__534(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1AD87F580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1AD87F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void getModelFilesWithSuffix(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  void ***v5;
  quasar::PTree *Ptree;
  uint64_t v7;
  uint64_t i;
  __int128 *v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p;
  __int128 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[1544];
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v19, a1, &v16, (uint64_t)&v20);
  v5 = (void ***)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v20);
  *(_QWORD *)&v20 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)&v20 = &off_1E5D3D1A0;
  *((_QWORD *)&v20 + 1) = a2;
  *((_QWORD *)&v21 + 1) = &v20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v19, (uint64_t)&__p);
  quasar::findLeafValuesWithCondition(Ptree, (uint64_t)&v20, &v16);
  if (v15 < 0)
    operator delete(__p);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v7 = v16;
  for (i = v17; v7 != i; v7 += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, ":,");
    quasar::splitStringSimple(v7, (uint64_t *)v11, (uint64_t *)&__p);
    if (v12 < 0)
      operator delete(v11[0]);
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(a3, a3->__end_, (std::string *)__p, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (_BYTE *)__p) >> 3));
    v11[0] = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  }
  v9 = (__int128 *)*((_QWORD *)&v21 + 1);
  if (*((__int128 **)&v21 + 1) == &v20)
  {
    v10 = 4;
    v9 = &v20;
    goto LABEL_11;
  }
  if (*((_QWORD *)&v21 + 1))
  {
    v10 = 5;
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
  }
  *(_QWORD *)&v20 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v19);
}

void sub_1AD87FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 88);
  if (v26 == (_QWORD *)(v24 - 112))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 112);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  *(_QWORD *)(v24 - 112) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 112));
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a24);
  _Unwind_Resume(a1);
}

void sub_1AD87FF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  EARLogger *v49;
  uint64_t v50;
  NSObject *v51;

  if (a2)
  {

    a35 = &a26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a35);
    quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a42);
    a42 = &a32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
    v49 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v50 = (uint64_t)v49;
      EARLogger::QuasarOSLogger(v49);
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        +[_EARSpeechRecognizer compileRecognizerModelsWithConfiguration:].cold.1(v50, v51);
    }
    else
    {
      EARLogger::QuasarOSLogger(v49);
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        +[_EARSpeechRecognizer compileRecognizerModelsWithConfiguration:].cold.2();
    }

    __cxa_end_catch();
    JUMPOUT(0x1AD87FF40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD8802EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD880650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  EARLogger *v43;
  uint64_t v44;
  NSObject *v45;

  if (a2)
  {
    if (a19 < 0)
      operator delete(__p);
    if (a25 < 0)
      operator delete(a20);
    quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a36);
    a36 = &a33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
    v43 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v44 = (uint64_t)v43;
      EARLogger::QuasarOSLogger(v43);
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        +[_EARSpeechRecognizer compileRecognizerModelsWithConfiguration:].cold.1(v44, v45);
    }
    else
    {
      EARLogger::QuasarOSLogger(v43);
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        +[_EARSpeechRecognizer purgeCompiledRecognizerModelsWithConfiguration:].cold.2();
    }

    __cxa_end_catch();
    JUMPOUT(0x1AD88060CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD880B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, char *a17)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1AD880DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, char *a17)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1AD880E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  quasar::PTree::~PTree((quasar::PTree *)&a10);
  a10 = (void **)(v10 - 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1AD880FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AD881070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(&a9);
  _Unwind_Resume(a1);
}

void sub_1AD8810FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AD8811D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1AD88174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{

  a49 = &a23;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

void sub_1AD881A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD881ECC(_Unwind_Exception *a1, id *location, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, void *a9, id *locationa, char a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,id *__pa,uint64_t a32,uint64_t a33,uint64_t a34,std::__split_buffer<std::wstring> *a35)
{
  uint64_t v35;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  *(_QWORD *)(v35 - 224) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 224));
  __pa = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__pa);

  objc_destroyWeak(locationa);
  objc_destroyWeak(&a30);

  _Unwind_Resume(a1);
}

void sub_1AD88203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD8821D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1AD88265C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;

  if (a61 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);

  _Unwind_Resume(a1);
}

void sub_1AD882A80(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *__pa, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19)
{
  void *v19;

  __pa = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  __pa = (uint64_t *)a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_1AD882C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AD8831EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechModelInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  }
  else
  {
    std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)(a1 + 48), *(int **)(a2 + 48), (int *)(a2 + 56));
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 72), *(_QWORD **)(a2 + 72), (_QWORD *)(a2 + 80));
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 96), *(_QWORD **)(a2 + 96), (_QWORD *)(a2 + 104));
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 192), *(__int128 **)(a2 + 192), (__int128 *)(a2 + 200));
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>((uint64_t **)(a1 + 216), *(__int128 **)(a2 + 216), (__int128 *)(a2 + 224));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 240), *(__int128 **)(a2 + 240), (__int128 *)(a2 + 248));
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

void sub_1AD883410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  EARLogger *v16;
  uint64_t v17;
  NSObject *v18;

  v16 = (EARLogger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v17 = (uint64_t)v16;
    EARLogger::QuasarOSLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      +[_EARSpeechRecognizer compileRecognizerModelsWithConfiguration:].cold.1(v17, v18);
  }
  else
  {
    EARLogger::QuasarOSLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      -[_EARSpeechModelInfo initWithConfig:].cold.2();
  }

  __cxa_end_catch();
  JUMPOUT(0x1AD883394);
}

void sub_1AD8834B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechModelInfo::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  std::__tree<int>::__move_assign(a1 + 48, (_QWORD *)a2 + 6);
  std::__tree<std::string>::__move_assign(a1 + 72, (_QWORD *)a2 + 9);
  std::__tree<std::string>::__move_assign(a1 + 96, (_QWORD *)a2 + 12);
  v7 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v7);
  v8 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  v9 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v9);
  v10 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 167) = 0;
  *((_BYTE *)a2 + 144) = 0;
  v11 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v11);
  v12 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 191) = 0;
  *((_BYTE *)a2 + 168) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 192, (_QWORD *)a2 + 24);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__move_assign(a1 + 216, (_QWORD *)a2 + 27);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 240, (_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  return a1;
}

void sub_1AD883754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD883834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD883B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1AD883D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD883DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1AD883ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1AD884548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char *a57)
{
  uint64_t v57;

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = &a26;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = (char *)(v57 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);

  _Unwind_Resume(a1);
}

void sub_1AD884830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1AD8849A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD884B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<unsigned int>>(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", a1[2]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)*a1;
  v4 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v3 + 7));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  v9 = (void *)objc_msgSend(v2, "copy");

  return v9;
}

void sub_1AD884C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<BOOL>>(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", a1[2]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)*a1;
  v4 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)v3 + 25));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  v9 = (void *)objc_msgSend(v2, "copy");

  return v9;
}

void sub_1AD884D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD885310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26)
{
  char **v26;
  void *v27;

  std::__tree<std::string>::destroy((uint64_t)&a25, a26);

  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(v26);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::set<unsigned int>>::operator=[abi:ne180100]<std::set<unsigned int>,void>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<int>::__move_assign(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v3 = a2 + 1;
    v4 = a2[1];
    *(_QWORD *)(a1 + 8) = v4;
    v5 = a1 + 8;
    v6 = a2[2];
    *(_QWORD *)(a1 + 16) = v6;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      *a2 = v3;
      *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(_QWORD *)a1 = v5;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::optional<std::set<std::string>>::operator=[abi:ne180100]<std::set<std::string>,void>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::string>::__move_assign(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v3 = a2 + 1;
    v4 = a2[1];
    *(_QWORD *)(a1 + 8) = v4;
    v5 = a1 + 8;
    v6 = a2[2];
    *(_QWORD *)(a1 + 16) = v6;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      *a2 = v3;
      *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(_QWORD *)a1 = v5;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1AD8856C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_1AD8858A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD885988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<float>(uint64_t a1)
{
  void *v2;
  double v3;
  _DWORD *v4;
  _DWORD *v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_DWORD **)a1;
  v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    do
    {
      LODWORD(v3) = *v4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      ++v4;
    }
    while (v4 != v5);
  }
  v7 = (void *)objc_msgSend(v2, "copy");

  return v7;
}

void sub_1AD885A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD885B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::~EARContinuousListeningResultHelper(EARContinuousListeningResultHelper *this)
{
  *(_QWORD *)this = &off_1E5D17150;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);

  objc_destroyWeak((id *)this + 34);
  objc_destroyWeak((id *)this + 33);
  objc_destroyWeak((id *)this + 32);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper((void **)this);
}

{
  *(_QWORD *)this = &off_1E5D17150;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);

  objc_destroyWeak((id *)this + 34);
  objc_destroyWeak((id *)this + 33);
  objc_destroyWeak((id *)this + 32);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper((void **)this);
  JUMPOUT(0x1AF44D190);
}

void quasar::Align::~Align(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  v3 = this + 20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[13];
  if (v2)
    operator delete(v2);
  v3 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

id transcriptFromTokens(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v11 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
          if (objc_msgSend(v7, "hasSpaceBefore", (_QWORD)v10))
            objc_msgSend(v2, "appendString:", CFSTR(" "));
          objc_msgSend(v7, "tokenName");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "appendString:", v8);

          if (objc_msgSend(v7, "hasSpaceAfter"))
            objc_msgSend(v2, "appendString:", CFSTR(" "));
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v4);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1AD885F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4[3];
  uint64_t v5;
  uint64_t v6;
  void **v7;

  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v5);
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void **)v4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

  v7 = (void **)&v5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1AD885FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

id EARVoiceCommandInterpretationsFromQuasarTokens(uint64_t *a1, uint64_t a2)
{
  void *v3;
  void *__p;
  void *v6;
  uint64_t v7;
  std::string v8;
  std::string v9;
  quasar::VoiceCommandInterpretation *v10;
  quasar::VoiceCommandInterpretation *v11;
  std::string v12;
  std::string *v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  quasar::VoiceCommandInterpretation **v17;

  memset(&v15, 0, sizeof(v15));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v15, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  EARHelpers::QuasarTokensToStdString(&v15, &v16);
  v13 = &v15;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v12 = v16;
  EARHelpers::StdStringUTF8ToUTF16IndexMap((uint64_t *)&v12, &v13);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v9 = v16;
  quasar::VoiceCommandRecognize((uint64_t)&v9, a2, (uint64_t *)&v10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  memset(&v8, 0, sizeof(v8));
  std::vector<quasar::VoiceCommandInterpretation>::__init_with_size[abi:ne180100]<quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(&v8, v10, v11, 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 4));
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&__p, (uint64_t *)v13, (uint64_t *)v14, ((char *)v14 - (char *)v13) >> 3);
  EARHelpers::EARVoiceCommandInterpretationFromQuasarInterpretations((uint64_t **)&v8, (uint64_t **)&__p);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  v17 = (quasar::VoiceCommandInterpretation **)&v8;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  v17 = &v10;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1AD8861E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 96);
  if (v31)
  {
    *(_QWORD *)(v29 - 88) = v31;
    operator delete(v31);
  }
  if (*(char *)(v29 - 25) < 0)
    operator delete(*(void **)(v29 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4[3];
  uint64_t v5;
  uint64_t v6;
  void **v7;

  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v5);
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void **)v4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

  v7 = (void **)&v5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1AD886350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD88643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper31writeFinalChoicesToResultStreamERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEERKNS1_IdNS4_IdEEEEbP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjjSQ_P17_EARResultContextNS2_21RecogResultStreamBase11RecogStatusEbRKS6_bNS0_10shared_ptrINS2_25ContinuousListeningConfigEEESW_RS8_RKNS1_INS2_11ItnOverrideENS4_IS11_EEEERKNS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS1B_EENS4_IS1B_EEEERKNS1_IS1F_NS4_IS1F_EEEEbbSW_bdiNSX_INS2_14result_handler13ResultHandlerEEE_block_invoke(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  v9 = *(_QWORD *)(a1[4] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v7;
  v11 = v7;
  v15 = a4;

  v12 = *(_QWORD *)(a1[5] + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v8;
  v14 = v8;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "addObject:", v15);
}

void sub_1AD8864FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ResultStreamWrapper::tokenSausageWithExtendedEndTime(void *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t k;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v22;
  id obj;
  id v24;
  void *v25[2];
  __int128 v26;
  __int128 v27;
  void *v28[2];
  _OWORD v29[2];
  void *v30[2];
  _OWORD v31[2];
  void *v32[2];
  __int128 v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  _BYTE v50[128];
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v22 = a1;
  v24 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v22, "count"));
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = v22;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v46 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count"));
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v8 = v6;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v51, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v42;
          do
          {
            for (j = 0; j != v9; ++j)
            {
              if (*(_QWORD *)v42 != v10)
                objc_enumerationMutation(v8);
              v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:copyItems:", *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * j), 1);
              objc_msgSend(v7, "addObject:", v12);

            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v51, 16);
          }
          while (v9);
        }

        objc_msgSend(v24, "addObject:", v7);
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
    }
    while (v3);
  }

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend(v24, "lastObject");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v38;
    do
    {
      for (k = 0; k != v14; ++k)
      {
        if (*(_QWORD *)v38 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * k);
        if (objc_msgSend(v17, "count"))
        {
          objc_msgSend(v17, "lastObject");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          if (v18)
          {
            objc_msgSend(v18, "quasarToken");
          }
          else
          {
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            *(_OWORD *)__p = 0u;
            *(_OWORD *)v32 = 0u;
            *(_OWORD *)v30 = 0u;
            memset(v31, 0, sizeof(v31));
            memset(v29, 0, sizeof(v29));
            v27 = 0u;
            *(_OWORD *)v28 = 0u;
            *(_OWORD *)v25 = 0u;
            v26 = 0u;
          }

          LODWORD(v27) = (a2 * 1000.0);
          v20 = -[_EARSpeechRecognitionToken _initWithQuasarToken:]([_EARSpeechRecognitionToken alloc], "_initWithQuasarToken:", v25);
          objc_msgSend(v17, "replaceObjectAtIndex:withObject:", objc_msgSend(v17, "count") - 1, v20);

          if (SBYTE7(v35) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v33) < 0)
            operator delete(v32[0]);
          v49 = (void **)v31 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v49);
          if (SBYTE7(v31[0]) < 0)
            operator delete(v30[0]);
          v49 = (void **)v29 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
          if (SBYTE7(v29[0]) < 0)
            operator delete(v28[0]);
          if (SBYTE7(v26) < 0)
            operator delete(v25[0]);
        }
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
    }
    while (v14);
  }

  return v24;
}

void sub_1AD8868D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id ResultStreamWrapper::resultPackageWithResultChoices(_QWORD *a1, unsigned int a2, void *a3, uint64_t a4, unsigned __int8 *a5, void *a6, unsigned int a7, void *a8, double a9, double a10, unsigned __int8 a11, uint64_t a12, _QWORD *a13, char a14, uint64_t *a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, uint64_t *a19, uint64_t a20,__int16 a21,unsigned __int8 a22,char a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,char a27,char a28,uint64_t a29,char a30,_QWORD *a31,char a32,uint64_t a33,uint64_t a34,_QWORD *a35,char a36,char a37,char a38,void *a39,int a40,void *a41,quasar::corrective_reranking::Parser **a42,char a43)
{
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  id v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  int v102;
  unsigned __int8 *v103;
  uint64_t v104;
  _EARLatticeMitigatorResult *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  _EARSpeechRecognitionResult *v111;
  uint64_t *v112;
  void *v113;
  _EARSpeechRecognition *v114;
  uint64_t *v115;
  id v116;
  void *v117;
  _EARSpeechRecognition *v118;
  id v119;
  _EARSpeechRecognition *v120;
  id v121;
  _EARSpeechRecognitionResultPackage *v122;
  void *v123;
  id v124;
  uint64_t v125;
  void *v126;
  uint64_t *v127;
  uint64_t *v128;
  _EARSpeechRecognitionResultPackage *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  unsigned int v133;
  __int128 *v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t i;
  id v141;
  _QWORD *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  __int128 *v146;
  uint64_t v147;
  __int128 *v148;
  uint64_t v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  unsigned int v153;
  __int128 *v154;
  uint64_t v155;
  __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t j;
  id v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  __int128 *v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  char v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  void *v180;
  _EARSpeechRecognitionResultPackage *v181;
  void *v182;
  id v183;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  id v193;
  id v194;
  id v195;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  id v201;
  void *v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v209;
  id v210;
  id v211;
  _EARLatticeMitigatorResult *v212;
  id v214;
  id v216;
  id v217;
  id obj;
  id obja;
  id v220;
  id v221;
  id v222;
  _QWORD v223[4];
  id v224;
  _QWORD *v225;
  _QWORD v226[4];
  id v227;
  _QWORD *v228;
  _QWORD v229[4];
  id v230;
  void ***v231;
  void **p_p;
  const std::string *p_p_p;
  uint64_t v234;
  __n128 (*v235)(__n128 *, __n128 *);
  void (*v236)(uint64_t);
  __int128 v237;
  __int128 v238;
  std::string v239;
  int v240;
  __int128 __p;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  int v248;
  __int16 v249;
  char v250;
  int v251;
  __int16 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 __s;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _QWORD v278[3];
  _QWORD v279[3];
  _QWORD v280[4];
  id v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  __int128 v289;
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  void **v293[3];
  uint64_t *v294;
  _QWORD *v295[2];
  uint64_t *v296;
  _QWORD *v297[2];
  uint64_t *v298;
  _QWORD *v299[2];
  uint64_t *v300;
  _QWORD *v301[2];
  uint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  __int128 *v314;
  _BYTE v315[128];
  _BYTE v316[128];
  uint64_t v317;

  v317 = *MEMORY[0x1E0C80C00];
  v217 = a3;
  v206 = a6;
  v207 = a8;
  v216 = a39;
  v193 = a41;
  v195 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v194 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v210 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v192 = a5;
  v312 = 0;
  v311 = 0;
  v313 = 0;
  v309 = 0;
  v308 = 0;
  v310 = 0;
  v306 = 0;
  v305 = 0;
  v307 = 0;
  v303 = 0;
  v302 = 0;
  v304 = 0;
  v301[1] = 0;
  v301[0] = 0;
  v300 = (uint64_t *)v301;
  v299[1] = 0;
  v299[0] = 0;
  v298 = (uint64_t *)v299;
  v297[1] = 0;
  v297[0] = 0;
  v296 = (uint64_t *)v297;
  v295[1] = 0;
  v295[0] = 0;
  v294 = (uint64_t *)v295;
  v48 = a1;
  v49 = *a1;
  if (a26 && a1[1] - v49 != a25[1] - *a25)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static _EARSpeechRecognitionResultPackage *ResultStreamWrapper::resultPackageWithResultChoices(const std::vector<std::vector<Token>> &, BOOL, _EARFormatter *__strong, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, NSString *__strong, BOOL, const std::vector<Token> &, _EARSpeechRecognitionResult *__autoreleasing *, BOOL, std::shared_ptr<ContinuousListeningConfig>, BOOL, BOOL, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, quasar::ItnEnablingFlags::Flags, BOOL, BOOL, _EARSpeechRecognitionResultPackage *__autoreleasing *, const std::vector<std::set<std::string>> &, NSDictionary<NSString *,_EARSpeechRecognitionResultPackage *> *__autoreleasing *, BOOL, BOOL, const std::vector<quasar::Token> &, BOOL, const std::shared_ptr<const VoiceCommandActiveSetCompilation> &, BOOL, NSDictionary<NSString *,NSNumber *> *__autoreleasing *, NSArray<NSString *> *__autoreleasing *, double, NSArray<NSArray<NSNumber *> *> *__autoreleasing *, BOOL, BOOL, BOOL, NSSet<NSString *> *__strong, int, _EARRelevantTextContext *__strong, std::shared_ptr<quasar::corrective_reranking::Parser>, BOOL)");
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "handleFailureInFunction:file:lineNumber:description:", v186, CFSTR("EARSpeechRecognizer.mm"), 2309, CFSTR("Results are not properly labeled"));

    v48 = a1;
    v49 = *a1;
  }
  if (v48[1] != v49)
  {
    v50 = 0;
    do
    {
      v51 = (uint64_t *)(v49 + 24 * v50);
      __s = 0uLL;
      *(_QWORD *)&v262 = 0;
      v52 = v51;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&__s, *v51, v52[1], 0x6DB6DB6DB6DB6DB7 * ((v52[1] - *v51) >> 5));
      __p = 0uLL;
      *(_QWORD *)&v242 = 0;
      p_p_p = 0;
      p_p = 0;
      v234 = 0;
      memset(&v239, 0, sizeof(v239));
      memset(v293, 0, sizeof(v293));
      v291 = 0uLL;
      v292 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v291, *v51, v52[1], 0x6DB6DB6DB6DB6DB7 * ((v52[1] - *v51) >> 5));
      if (v217)
      {
        v53 = (std::__shared_weak_count *)a15[1];
        v287 = *a15;
        v288 = v53;
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(p_shared_owners);
          while (__stxr(v55 + 1, p_shared_owners));
        }
        v286 = 0;
        v285 = 0;
        v280[0] = MEMORY[0x1E0C809B0];
        v280[1] = 3221225472;
        v280[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke;
        v280[3] = &unk_1E5D471D8;
        v56 = v210;
        v284 = v50;
        v281 = v56;
        v282 = a33;
        v283 = a34;
        HIDWORD(v191) = v50;
        LOBYTE(v191) = a2;
        BYTE1(v190) = a37;
        LOBYTE(v190) = a23;
        BYTE3(v189) = a27;
        BYTE2(v189) = a22;
        LOWORD(v189) = a21;
        BYTE4(v187) = a14;
        LODWORD(v187) = a7;
        objc_msgSend(v217, "formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:", v51, &v239, v206, v207, a12, a11, &__p, v187, &v287, a18, &p_p, a20, v189, a29,
          v293,
          v190,
          &v285,
          v191,
          v280);
        std::vector<quasar::Token>::__vdeallocate((void **)&__s);
        __s = v289;
        *(_QWORD *)&v262 = v290;
        v290 = 0;
        v289 = 0uLL;
        v314 = &v289;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);
        v57 = v286;
        if (v286)
        {
          v58 = (unint64_t *)&v286->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = v288;
        if (v288)
        {
          v61 = (unint64_t *)&v288->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        objc_msgSend(v217, "formattedTokensWithoutEmojiModifier:emojiTokenIndices:recognizeEmoji:", &__s, v293, a22);
        std::vector<quasar::Token>::__vdeallocate((void **)&v291);
        v291 = v289;
        v292 = v290;
        v290 = 0;
        v289 = 0uLL;
        v314 = &v289;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);

      }
      v63 = v312;
      if ((unint64_t)v312 >= v313)
      {
        v64 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v311, (uint64_t *)&__s);
      }
      else
      {
        *v312 = 0;
        v63[1] = 0;
        v63[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v63, __s, *((uint64_t *)&__s + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&__s + 1) - __s) >> 5));
        v64 = (uint64_t)(v63 + 3);
      }
      v312 = (_QWORD *)v64;
      v65 = v309;
      if ((unint64_t)v309 >= v310)
      {
        v66 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v308, (uint64_t *)&v291);
      }
      else
      {
        *v309 = 0;
        v65[1] = 0;
        v65[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v65, v291, *((uint64_t *)&v291 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v291 + 1) - v291) >> 5));
        v66 = (uint64_t)(v65 + 3);
      }
      v309 = (_QWORD *)v66;
      if (v217 && !v50)
        objc_msgSend(v217, "appendNbestListWithEmojiAlternativesForFormattedTokens:formattedTokensWithoutEmojiModifier:formattedNBestList:formattedNBestListWithoutEmojiModifier:emojiTokenIndices:recognizeEmoji:", &__s, &v291, &v311, &v308, v293, a22);
      v67 = v306;
      if ((unint64_t)v306 >= v307)
      {
        v68 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v305, (uint64_t *)&__p);
      }
      else
      {
        *v306 = 0;
        v67[1] = 0;
        v67[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v67, __p, *((uint64_t *)&__p + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5));
        v68 = (uint64_t)(v67 + 3);
      }
      v306 = (uint64_t *)v68;
      v69 = a19[1];
      if (v69 >= a19[2])
      {
        v70 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a19, (uint64_t *)&p_p);
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a19, (uint64_t *)&p_p);
        v70 = v69 + 24;
      }
      a19[1] = v70;
      v71 = v303;
      if ((unint64_t)v303 >= v304)
      {
        v72 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v302, (uint64_t *)&v239);
      }
      else
      {
        *v303 = 0;
        v71[1] = 0;
        v71[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v71, (uint64_t)v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v239.__r_.__value_.__l.__size_ - v239.__r_.__value_.__r.__words[0]) >> 5));
        v72 = (uint64_t)(v71 + 3);
      }
      v303 = (_QWORD *)v72;
      if (a26)
      {
        v73 = (_QWORD *)(*a25 + 24 * v50);
        v76 = (_QWORD *)*v73;
        v74 = v73 + 1;
        v75 = v76;
        if (v76 != v74)
        {
          do
          {
            v314 = (__int128 *)(v75 + 4);
            v77 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v300, (const void **)v75 + 4, (uint64_t)&std::piecewise_construct, &v314);
            v78 = v77 + 7;
            v79 = v77[8];
            if (v79 >= v77[9])
            {
              v80 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v78, v51);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v78, v51);
              v80 = v79 + 24;
            }
            v77[8] = v80;
            v314 = (__int128 *)(v75 + 4);
            v81 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v298, (const void **)v75 + 4, (uint64_t)&std::piecewise_construct, &v314);
            v82 = v81 + 7;
            v83 = v81[8];
            if (v83 >= v81[9])
            {
              v84 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v82, (uint64_t *)&__s);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v82, (uint64_t *)&__s);
              v84 = v83 + 24;
            }
            v81[8] = v84;
            v314 = (__int128 *)(v75 + 4);
            v85 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v296, (const void **)v75 + 4, (uint64_t)&std::piecewise_construct, &v314);
            v86 = v85 + 7;
            v87 = v85[8];
            if (v87 >= v85[9])
            {
              v88 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v86, (uint64_t *)&__p);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v86, (uint64_t *)&__p);
              v88 = v87 + 24;
            }
            v85[8] = v88;
            v314 = (__int128 *)(v75 + 4);
            v89 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v294, (const void **)v75 + 4, (uint64_t)&std::piecewise_construct, &v314);
            v90 = v89 + 7;
            v91 = v89[8];
            if (v91 >= v89[9])
            {
              v92 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v90, (uint64_t *)&v239);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v90, (uint64_t *)&v239);
              v92 = v91 + 24;
            }
            v89[8] = v92;
            v93 = (_QWORD *)v75[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v75[2];
                v95 = *v94 == (_QWORD)v75;
                v75 = v94;
              }
              while (!v95);
            }
            v75 = v94;
          }
          while (v94 != v74);
        }
      }
      *(_QWORD *)&v289 = &v291;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v289);
      *(_QWORD *)&v291 = v293;
      std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
      v293[0] = (void **)&v239;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v293);
      v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v239);
      p_p = (void **)&__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&p_p);
      *(_QWORD *)&__p = &__s;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v50;
      v49 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v50);
  }
  if (a35)
    *a35 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", v210);
  v203 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a4 + 128));
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v203, "setObject:forKeyedSubscript:", v96, CFSTR("speakingRate"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a4 + 136));
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v203, "setObject:forKeyedSubscript:", v97, CFSTR("averagePauseDuration"));

  v204 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  ResultStreamWrapper::getEARAcousticFeature(a4);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v204, "setObject:forKeyedSubscript:", v98, CFSTR("jitter"));

  ResultStreamWrapper::getEARAcousticFeature(a4 + 32);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v204, "setObject:forKeyedSubscript:", v99, CFSTR("shimmer"));

  ResultStreamWrapper::getEARAcousticFeature(a4 + 64);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v204, "setObject:forKeyedSubscript:", v100, CFSTR("pitch"));

  ResultStreamWrapper::getEARAcousticFeature(a4 + 96);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v204, "setObject:forKeyedSubscript:", v101, CFSTR("voicing"));

  v211 = -[_EARAudioAnalytics _initWithSpeechRecognitionFeatures:acousticFeatures:snr:]([_EARAudioAnalytics alloc], "_initWithSpeechRecognitionFeatures:acousticFeatures:snr:", v203, v204, a9);
  v102 = (char)v192[31];
  if (v102 >= 0)
    v103 = v192 + 8;
  else
    v103 = (unsigned __int8 *)*((_QWORD *)v192 + 1);
  if (v102 >= 0)
    v104 = v192[31];
  else
    v104 = *((_QWORD *)v192 + 2);
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v103, v104);
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  if (*v192 && objc_msgSend(v202, "length"))
  {
    v105 = [_EARLatticeMitigatorResult alloc];
    v107 = *((double *)v192 + 4);
    v106 = *((double *)v192 + 5);
    *(float *)&v106 = v106;
    *(float *)&v107 = v107;
    LODWORD(v108) = *((_DWORD *)v192 + 12);
    LODWORD(v109) = *((_DWORD *)v192 + 13);
    v212 = -[_EARLatticeMitigatorResult initWithVersion:score:threshold:calibrationScale:calibrationOffset:processed:](v105, "initWithVersion:score:threshold:calibrationScale:calibrationOffset:processed:", v202, *v192, v106, v107, v108, v109);
  }
  else
  {
    v212 = 0;
  }
  if ((a16 & a17) != 0)
    v110 = 0.0;
  else
    v110 = (double)a7 / 1000.0;
  if (a13 && v305 != v306)
  {
    v111 = [_EARSpeechRecognitionResult alloc];
    memset(v279, 0, sizeof(v279));
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v279, *v305, v305[1], 0x6DB6DB6DB6DB6DB7 * ((v305[1] - *v305) >> 5));
    memset(v278, 0, sizeof(v278));
    *a13 = -[_EARSpeechRecognitionResult _initWithTokens:preITNTokens:confidence:voiceCommandInterpretations:preITNVoiceCommandInterpretations:utteranceStart:](v111, "_initWithTokens:preITNTokens:confidence:voiceCommandInterpretations:preITNVoiceCommandInterpretations:utteranceStart:", v279, v278, 0, 0, 0.0, v110);
    *(_QWORD *)&__s = v278;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    *(_QWORD *)&__s = v279;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  }
  if (a26)
  {
    v220 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v112 = v298;
    if (v298 != (uint64_t *)v299)
    {
      do
      {
        v113 = (void *)MEMORY[0x1AF44DFA0]();
        v114 = [_EARSpeechRecognition alloc];
        v115 = v112 + 4;
        *(_QWORD *)&__p = v112 + 4;
        v116 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v114, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v300, (const void **)v112 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7, 1, v216);
        v117 = v116;
        if (v217)
        {
          v118 = [_EARSpeechRecognition alloc];
          *(_QWORD *)&__p = v112 + 4;
          v119 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v118, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v298, (const void **)v112 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7, 0, v216);

        }
        else
        {
          v119 = v116;
        }
        v120 = [_EARSpeechRecognition alloc];
        *(_QWORD *)&__p = v112 + 4;
        v121 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v120, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v294, (const void **)v112 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7, 0, v216);
        v122 = [_EARSpeechRecognitionResultPackage alloc];
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a10);
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        BYTE1(v188) = a32;
        LOBYTE(v188) = a28;
        v124 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v122, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v119, v117, v121, v217 != 0, a2, v211, v110, v212, 0, 0, v188, v123, a40, 0,
                 0);

        if (*((char *)v112 + 55) < 0)
        {
          v115 = (uint64_t *)v112[4];
          v125 = v112[5];
        }
        else
        {
          v125 = *((unsigned __int8 *)v112 + 55);
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v115, v125);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v220, "setObject:forKeyedSubscript:", v124, v126);

        objc_autoreleasePoolPop(v113);
        v127 = (uint64_t *)v112[1];
        if (v127)
        {
          do
          {
            v128 = v127;
            v127 = (uint64_t *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v128 = (uint64_t *)v112[2];
            v95 = *v128 == (_QWORD)v112;
            v112 = v128;
          }
          while (!v95);
        }
        v112 = v128;
      }
      while (v128 != (uint64_t *)v299);
    }
    *a26 = (id)objc_msgSend(v220, "copy");

  }
  v214 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", a1, 1, v216);
  if (v217)
  {
    v205 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", &v311, 0, v216);

  }
  else
  {
    v205 = v214;
  }
  v209 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", &v302, 0, v216);
  if (v217)
  {
    v201 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:]([_EARSpeechRecognition alloc], "_initWithNBestList:useHatText:endsOfSentencePunctuations:", &v308, 0, v216);

  }
  else
  {
    v201 = v214;
  }
  if (a24)
  {
    v129 = [_EARSpeechRecognitionResultPackage alloc];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a10);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE1(v188) = a32;
    LOBYTE(v188) = a28;
    *a24 = objc_autorelease(-[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v129, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v201, v214, v209, v217 != 0, a2, v211, v110, v212, 0, 0, v188, v130, a40,
               0,
               0));

  }
  if (a30 && a43 && a36)
  {
    objc_msgSend(v205, "potentialPrecedingRecognition");
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v205, "potentialCommandRecognition");
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    if (v198)
    {
      objc_msgSend(v198, "nBest");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v131, "firstObject");
      obj = (id)objc_claimAutoreleasedReturnValue();

      transcriptFromTokens(obj);
      v221 = (id)objc_claimAutoreleasedReturnValue();
      if (quasar::gLogLevel >= 5)
      {
        v276 = 0u;
        v277 = 0u;
        v274 = 0u;
        v275 = 0u;
        v272 = 0u;
        v273 = 0u;
        v270 = 0u;
        v271 = 0u;
        v268 = 0u;
        v269 = 0u;
        v266 = 0u;
        v267 = 0u;
        v264 = 0u;
        v265 = 0u;
        v262 = 0u;
        v263 = 0u;
        __s = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
        v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance: ", 46);
        if (v221)
        {
          objc_msgSend(v221, "ear_toString");
          v133 = BYTE7(v242);
          v135 = *((_QWORD *)&__p + 1);
          v134 = (__int128 *)__p;
        }
        else
        {
          v135 = 0;
          v134 = 0;
          v133 = 0;
          __p = 0uLL;
          *(_QWORD *)&v242 = 0;
        }
        if ((v133 & 0x80u) == 0)
          v136 = &__p;
        else
          v136 = v134;
        if ((v133 & 0x80u) == 0)
          v137 = v133;
        else
          v137 = v135;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v136, v137);
        if (SBYTE7(v242) < 0)
          operator delete((void *)__p);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
      }
      v259 = 0u;
      v260 = 0u;
      v257 = 0u;
      v258 = 0u;
      obja = obj;
      v138 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v257, v316, 16);
      if (v138)
      {
        v139 = *(_QWORD *)v258;
        do
        {
          for (i = 0; i != v138; ++i)
          {
            if (*(_QWORD *)v258 != v139)
              objc_enumerationMutation(obja);
            v141 = *(id *)(*((_QWORD *)&v257 + 1) + 8 * i);
            if (quasar::gLogLevel >= 5)
            {
              v276 = 0u;
              v277 = 0u;
              v274 = 0u;
              v275 = 0u;
              v272 = 0u;
              v273 = 0u;
              v270 = 0u;
              v271 = 0u;
              v268 = 0u;
              v269 = 0u;
              v266 = 0u;
              v267 = 0u;
              v264 = 0u;
              v265 = 0u;
              v262 = 0u;
              v263 = 0u;
              __s = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
              v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance tokens", 51);
              objc_msgSend(v141, "description");
              v143 = (void *)objc_claimAutoreleasedReturnValue();
              v144 = v143;
              if (v143)
              {
                objc_msgSend(v143, "ear_toString");
                v145 = BYTE7(v242);
                v147 = *((_QWORD *)&__p + 1);
                v146 = (__int128 *)__p;
              }
              else
              {
                v147 = 0;
                v146 = 0;
                v145 = 0;
                __p = 0uLL;
                *(_QWORD *)&v242 = 0;
              }
              if ((v145 & 0x80u) == 0)
                v148 = &__p;
              else
                v148 = v146;
              if ((v145 & 0x80u) == 0)
                v149 = v145;
              else
                v149 = v147;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v148, v149);
              if (SBYTE7(v242) < 0)
                operator delete((void *)__p);

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
            }

          }
          v138 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v257, v316, 16);
        }
        while (v138);
      }

      v199 = v221;
    }
    else
    {
      if (quasar::gLogLevel >= 5)
      {
        v276 = 0u;
        v277 = 0u;
        v274 = 0u;
        v275 = 0u;
        v272 = 0u;
        v273 = 0u;
        v270 = 0u;
        v271 = 0u;
        v268 = 0u;
        v269 = 0u;
        v266 = 0u;
        v267 = 0u;
        v264 = 0u;
        v265 = 0u;
        v262 = 0u;
        v263 = 0u;
        __s = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance: NULL", 50);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
      }
      obja = 0;
      v199 = 0;
    }
    objc_msgSend(v200, "nBest");
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v150, "firstObject");
    v151 = (void *)objc_claimAutoreleasedReturnValue();

    transcriptFromTokens(v151);
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    if (quasar::gLogLevel >= 5)
    {
      v276 = 0u;
      v277 = 0u;
      v274 = 0u;
      v275 = 0u;
      v272 = 0u;
      v273 = 0u;
      v270 = 0u;
      v271 = 0u;
      v268 = 0u;
      v269 = 0u;
      v266 = 0u;
      v267 = 0u;
      v264 = 0u;
      v265 = 0u;
      v262 = 0u;
      v263 = 0u;
      __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate command utterance: ", 44);
      if (v197)
      {
        objc_msgSend(v197, "ear_toString");
        v153 = BYTE7(v242);
        v155 = *((_QWORD *)&__p + 1);
        v154 = (__int128 *)__p;
      }
      else
      {
        v155 = 0;
        v154 = 0;
        v153 = 0;
        __p = 0uLL;
        *(_QWORD *)&v242 = 0;
      }
      if ((v153 & 0x80u) == 0)
        v156 = &__p;
      else
        v156 = v154;
      if ((v153 & 0x80u) == 0)
        v157 = v153;
      else
        v157 = v155;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)v156, v157);
      if (SBYTE7(v242) < 0)
        operator delete((void *)__p);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
    }
    v255 = 0u;
    v256 = 0u;
    v253 = 0u;
    v254 = 0u;
    v222 = v151;
    v158 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v253, v315, 16);
    if (v158)
    {
      v159 = *(_QWORD *)v254;
      do
      {
        for (j = 0; j != v158; ++j)
        {
          if (*(_QWORD *)v254 != v159)
            objc_enumerationMutation(v222);
          v161 = *(id *)(*((_QWORD *)&v253 + 1) + 8 * j);
          if (quasar::gLogLevel >= 5)
          {
            v276 = 0u;
            v277 = 0u;
            v274 = 0u;
            v275 = 0u;
            v272 = 0u;
            v273 = 0u;
            v270 = 0u;
            v271 = 0u;
            v268 = 0u;
            v269 = 0u;
            v266 = 0u;
            v267 = 0u;
            v264 = 0u;
            v265 = 0u;
            v262 = 0u;
            v263 = 0u;
            __s = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
            v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate command token", 38);
            objc_msgSend(v161, "description");
            v163 = (void *)objc_claimAutoreleasedReturnValue();
            v164 = v163;
            if (v163)
            {
              objc_msgSend(v163, "ear_toString");
              v165 = BYTE7(v242);
              v167 = *((_QWORD *)&__p + 1);
              v166 = (__int128 *)__p;
            }
            else
            {
              v167 = 0;
              v166 = 0;
              v165 = 0;
              __p = 0uLL;
              *(_QWORD *)&v242 = 0;
            }
            if ((v165 & 0x80u) == 0)
              v168 = &__p;
            else
              v168 = v166;
            if ((v165 & 0x80u) == 0)
              v169 = v165;
            else
              v169 = v167;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)v168, v169);
            if (SBYTE7(v242) < 0)
              operator delete((void *)__p);

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
          }

        }
        v158 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v253, v315, 16);
      }
      while (v158);
    }

    objc_msgSend(v200, "nBest");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v171 = v170;
    if (!*a42 || !objc_msgSend(v170, "count"))
    {
      v174 = a38 ^ 1;
      if (v198)
        v174 = 0;
      if ((v174 & 1) == 0 && *a31)
      {
        v175 = MEMORY[0x1E0C809B0];
        v226[0] = MEMORY[0x1E0C809B0];
        v226[1] = 3221225472;
        v226[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_2;
        v226[3] = &unk_1E5D47228;
        v228 = a31;
        v227 = v195;
        objc_msgSend(v171, "enumerateObjectsUsingBlock:", v226);
        objc_msgSend(v200, "nBest");
        v176 = (void *)objc_claimAutoreleasedReturnValue();
        v223[0] = v175;
        v223[1] = 3221225472;
        v223[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_3;
        v223[3] = &unk_1E5D47228;
        v225 = a31;
        v224 = v194;
        objc_msgSend(v176, "enumerateObjectsUsingBlock:", v223);

      }
      goto LABEL_208;
    }
    v246 = 0u;
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    __p = 0u;
    v247 = 0x101010101010101;
    v248 = 0;
    v249 = 257;
    v250 = 0;
    v251 = 10;
    v252 = 256;
    objc_msgSend(v171, "objectAtIndex:", 0);
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    EARHelpers::EarTokensToNSString(v172);
    v173 = (void *)objc_claimAutoreleasedReturnValue();

    if (v173)
    {
      objc_msgSend(v173, "ear_toString");
      if (SBYTE7(v262) < 0)
      {
        std::string::__init_copy_ctor_external(&v239, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        v240 = 0;
        if (SBYTE7(v262) < 0)
          operator delete((void *)__s);
        goto LABEL_188;
      }
    }
    else
    {
      __s = 0uLL;
      *(_QWORD *)&v262 = 0;
    }
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = __s;
    v239.__r_.__value_.__r.__words[2] = v262;
    v240 = 0;
LABEL_188:
    v177 = v243;
    if ((unint64_t)v243 >= *((_QWORD *)&v243 + 1))
    {
      v179 = std::vector<quasar::corrective_reranking::ASRCandidate>::__push_back_slow_path<quasar::corrective_reranking::ASRCandidate const&>((uint64_t *)&v242 + 1, (__int128 *)&v239);
    }
    else
    {
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v243, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
      }
      else
      {
        v178 = *(_OWORD *)&v239.__r_.__value_.__l.__data_;
        *(_QWORD *)(v243 + 16) = *((_QWORD *)&v239.__r_.__value_.__l + 2);
        *(_OWORD *)v177 = v178;
      }
      *(_DWORD *)(v177 + 24) = v240;
      v179 = v177 + 32;
    }
    *(_QWORD *)&v243 = v179;
    p_p = 0;
    p_p_p = (const std::string *)&p_p;
    v234 = 0x4812000000;
    v235 = __Block_byref_object_copy__1212;
    v236 = __Block_byref_object_dispose__1213;
    v237 = 0u;
    v238 = 0u;
    v229[0] = MEMORY[0x1E0C809B0];
    v229[1] = 3221225472;
    v229[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_1214;
    v229[3] = &unk_1E5D47200;
    v231 = &p_p;
    v230 = v199;
    objc_msgSend(v193, "getLeftAndRightContextWithCompletion:", v229);
    std::string::operator=((std::string *)&__p, p_p_p + 2);
    LOBYTE(v252) = 1;
    v250 = objc_msgSend(v193, "disambiguationActive");
    if (quasar::gLogLevel >= 5)
    {
      v276 = 0u;
      v277 = 0u;
      v274 = 0u;
      v275 = 0u;
      v272 = 0u;
      v273 = 0u;
      v270 = 0u;
      v271 = 0u;
      v268 = 0u;
      v269 = 0u;
      v266 = 0u;
      v267 = 0u;
      v264 = 0u;
      v265 = 0u;
      v262 = 0u;
      v263 = 0u;
      __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: disambiguationActive", 35);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
    }
    quasar::corrective_reranking::Parser::run(*a42, (const quasar::corrective_reranking::Parser::RunArgs *)&__p, (uint64_t)&__s);
    EARHelpers::EARVoiceCommandInterpretationFromQuasarCorrectiveRerankingParserStackOutput((uint64_t)&__p, (uint64_t)&__s);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v180, "count"))
      objc_msgSend(v195, "addObject:", v180);

    v293[0] = (void **)&__s + 1;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](v293);

    _Block_object_dispose(&p_p, 8);
    if (SHIBYTE(v238) < 0)
      operator delete(*((void **)&v237 + 1));
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);

    if (*((_QWORD *)&v245 + 1))
    {
      *(_QWORD *)&v246 = *((_QWORD *)&v245 + 1);
      operator delete(*((void **)&v245 + 1));
    }
    if ((_QWORD)v244)
    {
      *((_QWORD *)&v244 + 1) = v244;
      operator delete((void *)v244);
    }
    *(_QWORD *)&__s = (char *)&v242 + 8;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    if (SBYTE7(v242) < 0)
      operator delete((void *)__p);
LABEL_208:

  }
  v181 = [_EARSpeechRecognitionResultPackage alloc];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a10);
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE1(v188) = a32;
  LOBYTE(v188) = a28;
  v183 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v181, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v205, v214, v209, v217 != 0, a2, v211, v110, v212, v195, v194, v188, v182, a40, 0,
           0);

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v294, v295[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v296, v297[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v298, v299[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v300, v301[0]);
  *(_QWORD *)&__s = &v302;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(_QWORD *)&__s = &v305;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(_QWORD *)&__s = &v308;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(_QWORD *)&__s = &v311;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);

  return v183;
}

void sub_1AD8884E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61)
{
  void *v61;
  void *v62;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5A8], (_QWORD *)STACK[0x5B0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5C0], (_QWORD *)STACK[0x5C8]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5D8], (_QWORD *)STACK[0x5E0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5F0], (_QWORD *)STACK[0x5F8]);
  STACK[0x3B0] = (unint64_t)&STACK[0x608];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x620];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x638];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x650];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);

  _Unwind_Resume(a1);
}

void logPackageToQuasarDebug(_EARSpeechRecognitionResultPackage *a1, NSString *a2)
{
  NSString *v3;
  _QWORD *v4;
  int v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  unsigned int v9;
  void **v10;
  uint64_t v11;
  void **p_p;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t i;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _EARSpeechRecognitionResultPackage *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v38 = a1;
  v3 = a2;
  if (quasar::gLogLevel >= 5)
  {
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Quasar PostITN Result. isFinal=", 31);
    -[_EARSpeechRecognitionResultPackage isFinal](v38, "isFinal");
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" candidate=", 11);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
  }
  -[_EARSpeechRecognitionResultPackage nBestResults](v38, "nBestResults");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v40, "count");
  if (v5)
  {
    objc_msgSend(v40, "firstObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tokens");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = v7;
    transcriptFromTokens(v7);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (quasar::gLogLevel >= 5)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN 1-Best: ", 16);
      if (v37)
      {
        objc_msgSend(v37, "ear_toString");
        v9 = HIBYTE(v46);
        v10 = (void **)__p;
        v11 = v45;
      }
      else
      {
        v11 = 0;
        v10 = 0;
        v9 = 0;
        __p = 0;
        v45 = 0;
        v46 = 0;
      }
      if ((v9 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = v10;
      if ((v9 & 0x80u) == 0)
        v13 = v9;
      else
        v13 = v11;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
      if (SHIBYTE(v46) < 0)
        operator delete(__p);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
    }
    if (v5 >= 1)
    {
      v14 = 0;
      v39 = v5;
      do
      {
        if (quasar::gLogLevel >= 5)
        {
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN Choice: ", 16);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
        }
        objc_msgSend(v40, "objectAtIndexedSubscript:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "tokens");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        for (i = 0; objc_msgSend(v16, "count") > i; ++i)
        {
          if (quasar::gLogLevel >= 5)
          {
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v52 = 0u;
            v53 = 0u;
            v50 = 0u;
            v51 = 0u;
            v48 = 0u;
            v49 = 0u;
            v47 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN Token[", 14);
            if (v3)
            {
              -[NSString ear_toString](v3, "ear_toString");
              v19 = HIBYTE(v46);
              v20 = (void **)__p;
              v21 = v45;
            }
            else
            {
              v21 = 0;
              v20 = 0;
              v19 = 0;
              __p = 0;
              v45 = 0;
              v46 = 0;
            }
            if ((v19 & 0x80u) == 0)
              v22 = &__p;
            else
              v22 = v20;
            if ((v19 & 0x80u) == 0)
              v23 = v19;
            else
              v23 = v21;
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"][", 2);
            v25 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"][", 2);
            v26 = (_QWORD *)std::ostream::operator<<();
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]: ", 3);
            objc_msgSend(v16, "objectAtIndexedSubscript:", i);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "description");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = v29;
            if (v29)
            {
              objc_msgSend(v29, "ear_toString");
              v31 = HIBYTE(v43);
              v32 = (void **)v41;
              v33 = v42;
            }
            else
            {
              v33 = 0;
              v32 = 0;
              v31 = 0;
              v41 = 0;
              v42 = 0;
              v43 = 0;
            }
            if ((v31 & 0x80u) == 0)
              v34 = &v41;
            else
              v34 = v32;
            if ((v31 & 0x80u) == 0)
              v35 = v31;
            else
              v35 = v33;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v34, v35);
            if (SHIBYTE(v43) < 0)
              operator delete(v41);

            if (SHIBYTE(v46) < 0)
              operator delete(__p);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
          }
        }

        ++v14;
      }
      while (v14 != v39);
    }

  }
}

void sub_1AD889018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  void *v27;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a27);

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = a4;
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  if (!*(_DWORD *)(a1 + 56) && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
  {
    **(_QWORD **)(a1 + 40) = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v9);
    **(_QWORD **)(a1 + 48) = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", v7);
  }

}

void sub_1AD8891F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ResultStreamWrapper::getEARAcousticFeature(uint64_t a1)
{
  id v2;
  _EARAcousticFeature *v3;
  double v4;
  id v5;

  v2 = -[_EARLazyDoubleArray _initWithDoubleVector:]([_EARLazyDoubleArray alloc], "_initWithDoubleVector:", a1);
  v3 = [_EARAcousticFeature alloc];
  v4 = *(double *)(a1 + 24) / 1000.0;
  *(float *)&v4 = v4;
  v5 = -[_EARAcousticFeature _initWithAcousticFeatureValues:frameDuration:](v3, "_initWithAcousticFeatureValues:frameDuration:", v2, v4);

  return v5;
}

void sub_1AD88927C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1212(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1213(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_1214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t i;
  std::string v11;
  std::string v12;
  std::string *v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  __int128 v22;

  *(_QWORD *)&v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    v15 = 0uLL;
    v16 = 0;
  }
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  if (v6)
  {
    objc_msgSend(v6, "ear_toString");
  }
  else
  {
    v20[0] = 0;
    v20[1] = 0;
    v21 = 0;
  }
  memset(&v11, 0, sizeof(v11));
  v13 = &v11;
  v14 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 72;
  v11.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__r_.__value_.__r.__words[2], &v15, &v22, (std::string *)v11.__r_.__value_.__l.__data_);
  quasar::joinAndAutoSpace(&v11, &v12);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (void **)(v8 + 48);
  if (*(char *)(v8 + 71) < 0)
    operator delete(*v9);
  *(std::string *)v9 = v12;
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  for (i = 0; i != -9; i -= 3)
  {
    if (*((char *)&v21 + i * 8 + 7) < 0)
      operator delete((void *)v20[i]);
  }

}

void sub_1AD889460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parser::RunArgs::~RunArgs(quasar::corrective_reranking::Parser::RunArgs *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4[3];
  uint64_t v5;
  uint64_t v6;
  void **v7;

  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v5);
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v4, **(_QWORD **)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void **)v4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

  v7 = (void **)&v5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1AD88960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4[3];
  uint64_t v5;
  uint64_t v6;
  void **v7;

  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v5);
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v4, **(_QWORD **)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void **)v4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

  v7 = (void **)&v5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1AD8896F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD889858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::__push_back_slow_path<quasar::corrective_reranking::ASRCandidate const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD8899F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 - 232));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::corrective_reranking::Parse::~Parse(quasar::corrective_reranking::Parse *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((_BYTE *)this + 112))
  {
    v3 = (void *)*((_QWORD *)this + 11);
    if (v3)
    {
      *((_QWORD *)this + 12) = v3;
      operator delete(v3);
    }
  }
  v4 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 32);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(char **this)
{
  if (*((_BYTE *)this + 248))
    std::__tree<std::string>::destroy((uint64_t)(this + 28), this[29]);
  if (*((_BYTE *)this + 216))
    std::__tree<std::string>::destroy((uint64_t)(this + 24), this[25]);
  if (*((_BYTE *)this + 184))
    std::__tree<std::string>::destroy((uint64_t)(this + 20), this[21]);
  if (*((_BYTE *)this + 152))
    std::__tree<int>::destroy((uint64_t)(this + 16), this[17]);
  if (*((_BYTE *)this + 120))
    std::__tree<int>::destroy((uint64_t)(this + 12), this[13]);
  if (*((_BYTE *)this + 88))
    std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  if (*((_BYTE *)this + 56))
    std::__tree<std::string>::destroy((uint64_t)(this + 4), this[5]);
  if (*((_BYTE *)this + 24))
    std::__tree<int>::destroy((uint64_t)this, this[1]);
}

_QWORD *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25F80;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(void **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD889E78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(_QWORD *a1, __int128 *a2, uint64_t a3, unsigned int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D426B0;
  a1[1] = 0;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD889EE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unsigned int *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v8 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  quasar::LmeContainer::LmeContainer(a2, &v8, a4, *a5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1AD889F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD889FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1AD88A038(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__emplace_hint_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__emplace_hint_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__construct_node<std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

char *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__construct_node<std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  char *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = 0;
  result = std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((char *)v6 + 40, *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD88A374(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD88A41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 5;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void ___ZL28_EARSpeechRecognizerExecutorPvPFvS_ES__block_invoke(uint64_t a1)
{
  (*(void (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));

}

uint64_t **std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  int *v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<int>::__emplace_multi<int const&>(v5, a2 + 7);
      v12 = (int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1AD88A784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<int>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<int>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<int>::__emplace_multi<int const&>(uint64_t **a1, int *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD88AA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1AD88AB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD88ACBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::vector<std::wstring> *v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(std::vector<std::wstring> **)(a1 + 8);
  if (v4 != (std::vector<std::wstring> *)(a2 + 24))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1AD88ADE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD88AE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1AD88AED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__tree<int>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<int>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD88B0CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD88B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD88B28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD88B3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void **std::vector<std::vector<std::vector<quasar::Token>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD88B5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<quasar::Token>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD88B980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToStream<std::vector<int>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = (_QWORD *)result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      v3 += 4;
      result = std::ostream::operator<<();
      v7 = 0;
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::ItnOverride>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

quasar::result_handler::Package *std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](quasar::result_handler::Package **a1, quasar::result_handler::Package *a2)
{
  quasar::result_handler::Package *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::result_handler::Package::~Package(quasar::result_handler::Package *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 432);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 400);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 376);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 184);
  v5 = (void **)((char *)this + 160);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 48);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)this;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 184))
  {
    v3 = (void **)(a1 + 152);
    std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 151) < 0)
      operator delete(*(void **)(a1 + 128));
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
    v3 = (void **)(a1 + 72);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 48);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 24);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)a1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 152);
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 151) < 0)
    operator delete(*(void **)(a2 + 128));
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  v3 = (void **)(a2 + 72);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 48);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)a2;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<quasar::Token>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD88C0E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD88C0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD88C2E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD88C2EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[224 * v4];
  v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD88C3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::__tree<std::string>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<EARModelInitializeContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARModelInitializeContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<EARModelInitializeContext>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t EARModelInitializeContext::EARModelInitializeContext(uint64_t a1, void *a2)
{
  id v3;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E5D16F98;
  v3 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  objc_storeWeak((id *)(a1 + 16), v3);

  return a1;
}

void EARModelInitializeContext::~EARModelInitializeContext(EARModelInitializeContext *this)
{
  objc_destroyWeak((id *)this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  objc_destroyWeak((id *)this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void EARModelInitializeContext::didStartModelInitializing(uint64_t a1, uint64_t *a2)
{
  EARLogger *WeakRetained;
  EARLogger *v4;
  NSObject *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 16));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    EARLogger::QuasarOSLogger(WeakRetained);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0)
        v6 = a2;
      else
        v6 = (uint64_t *)*a2;
      v11 = 136315138;
      v12 = v6;
      _os_log_impl(&dword_1AD756000, v5, OS_LOG_TYPE_INFO, "Starting to initialize model, fileName=%s", (uint8_t *)&v11, 0xCu);
    }

    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[EARLogger didStartModelInitializing:](v4, "didStartModelInitializing:", v10);

  }
}

void sub_1AD88C69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void EARModelInitializeContext::didFinishModelInitializing(uint64_t a1, uint64_t *a2)
{
  EARLogger *WeakRetained;
  EARLogger *v4;
  NSObject *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 16));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    EARLogger::QuasarOSLogger(WeakRetained);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0)
        v6 = a2;
      else
        v6 = (uint64_t *)*a2;
      v11 = 136315138;
      v12 = v6;
      _os_log_impl(&dword_1AD756000, v5, OS_LOG_TYPE_INFO, "Finished initializing model, fileName=%s", (uint8_t *)&v11, 0xCu);
    }

    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[EARLogger didFinishModelInitializing:](v4, "didFinishModelInitializing:", v10);

  }
}

void sub_1AD88C7CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string,void>@<X0>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x128uLL);
  result = std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::istringstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD88C838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::istringstream>,0>(_QWORD *a1, const std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45580;
  a1[1] = 0;
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 3, a2, 8);
  return a1;
}

void sub_1AD88C888(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::istringstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation const,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,quasar::VoiceCommandActiveSetCompilation,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__shared_ptr_emplace[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD88C938(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__shared_ptr_emplace[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40C38;
  a1[1] = 0;
  quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(a1 + 3, a2);
  return a1;
}

void sub_1AD88C984(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::VoiceCommandActiveSetCompilation const>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

_QWORD *quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(v4 + 56);
  *a1 = &unk_1E5D19058;
  a1[1] = v4;
  std::set<int>::set[abi:ne180100](a1 + 2, a2 + 16);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](a1 + 5, a2 + 40);
  std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap((uint64_t)(a1 + 8), a2 + 64);
  std::map<std::string_view,int>::map[abi:ne180100]((uint64_t)(a1 + 13), a2 + 104);
  return a1;
}

void sub_1AD88CA98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  int v7;

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(v4);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(v3, *(_QWORD **)(v1 + 48));
  std::__tree<int>::destroy(v2, *(_QWORD **)(v1 + 24));
  *(_QWORD *)v1 = &unk_1E5D25F80;
  v6 = *(_DWORD **)(v1 + 8);
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25F80;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D19058;
  return v4;
}

void sub_1AD88CBD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(v2 + 152) + 32);
  return result;
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

int32x2_t *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitMatcher(uint64_t a1, __int32 a2)
{
  int32x2_t *v4;

  v4 = (int32x2_t *)operator new();
  fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(v4, a1, a2, 1);
  return v4;
}

void sub_1AD88CC80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

BOOL fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::IsMemoryMapped(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 152);
  return *(_QWORD *)(*v1 + 16) && *(_QWORD *)(v1[1] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  if ((*(uint64_t (**)(_QWORD *, uint64_t))(*v1 + 32))(v1, 4))
    return 0;
  else
    return *(unsigned int *)(v1[19] + 32);
}

_QWORD *fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D25F80;
  if (a3)
  {
    v5 = operator new();
    fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1AD88CD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1D0C8;
  *(_QWORD *)(a1 + 136) = operator new();
  *(_BYTE *)(a1 + 144) = 1;
  v4 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v4;
  if (v4)
    ++*(_DWORD *)(v4 + 64);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 40) = v7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 48) = v10;
  }
  return a1;
}

void sub_1AD88CEE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(uint64_t a1)
{
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;

  *(_QWORD *)a1 = &unk_1E5D1D0C8;
  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(_QWORD *)(a1 + 136);
    if (v2)
      MEMORY[0x1AF44D190](v2, 0xC400A2AC0F1);
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 64) - 1;
    *(_DWORD *)(v3 + 64) = v4;
    if (!v4)
    {
      v5 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::~DefaultCompactStore((uint64_t *)v3);
      MEMORY[0x1AF44D190](v5, 0x1030C40DA98B24ALL);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t *fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::~DefaultCompactStore(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2 || (v5 = a1[2]) != 0 && (MEMORY[0x1AF44D160](v5, 0x1000C8052888210), (v2 = *a1) != 0))
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  if (v3 || (v6 = a1[3]) != 0 && (MEMORY[0x1AF44D160](v6, 0x1000C803E1C8BA9), (v3 = a1[1]) != 0))
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  void *v11[2];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v11 = 0u;
  v6 = *(_QWORD **)(a1 + 152);
  v15 = v6[7];
  v16 = v6[4];
  v17 = v6[6];
  if (a3[27])
    v7 = 1;
  else
    v7 = 2;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, v7, (uint64_t)&v10);
  v8 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Write(*(_QWORD *)(a1 + 152), a2, (uint64_t)a3);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v11[0]);
  return v8;
}

void sub_1AD88D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  fst::FstHeader::~FstHeader(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, uint64_t a5)
{
  const std::string *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  BOOL v17;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(a1 + 16));
    v10 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a5 + 32), v10);
    *(_DWORD *)(a5 + 56) = a4;
    *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a1 + 40))
      v11 = a3[25] == 0;
    else
      v11 = 1;
    v12 = !v11;
    if (a3[26])
      v13 = *(_QWORD *)(a1 + 48) == 0;
    else
      v13 = 1;
    if (!v13)
      v12 |= 2u;
    if (a3[27])
      v12 |= 4u;
    *(_DWORD *)(a5 + 60) = v12;
    fst::FstHeader::Write();
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    v15 = a3[25] == 0;
  else
    v15 = 1;
  if (!v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 72))(v14, a2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    v17 = a3[26] == 0;
  else
    v17 = 1;
  if (!v17)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 72))(result, a2);
  return result;
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  fst *v11;
  _QWORD *v12;
  int v13;
  fst *v15;
  _QWORD *v16;
  int v17;
  void *__p[2];
  char v19;
  char v20;

  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_BYTE *)(a3 + 27) && !fst::AlignOutput(a2))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v15 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DefaultCompactStore::Write: Alignment failed: ", 46);
      v17 = *(char *)(a3 + 23);
      if (v17 >= 0)
        v9 = a3;
      else
        v9 = *(_QWORD *)a3;
      if (v17 >= 0)
        v10 = *(unsigned __int8 *)(a3 + 23);
      else
        v10 = *(_QWORD *)(a3 + 8);
      goto LABEL_27;
    }
    std::ostream::write();
  }
  if (*(_BYTE *)(a3 + 27) && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"DefaultCompactStore::Write: Alignment failed: ", 46);
    v13 = *(char *)(a3 + 23);
    if (v13 >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    if (v13 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    std::ostream::write();
    std::ostream::flush();
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
      return 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"DefaultCompactStore::Write: Write failed: ", 42);
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
  }
LABEL_27:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
  if (v19 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD88D3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

int32x2_t *fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1B9A8;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1AD88D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D19558;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19558;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19558;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD88D6C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Value_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v2 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v2 + 56) |= 0xFu;
  v3 = *(_QWORD *)(v2 + 16) + 12 * *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)v3;
  v5 = (unint64_t)*(unsigned int *)(v3 + 8) << 32;
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = v5;
  return v2 + 40;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
    *(_BYTE *)(result + 72) = 0;
  else
    ++*(_QWORD *)(*(_QWORD *)(result + 24) + 24);
  return result;
}

float fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Final_(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Priority_(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19558;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD88D858(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Size()
{
  return 64;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A510;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD88D940(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A510;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Size()
{
  return 72;
}

_QWORD *fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1B9A8;
  v2 = a1[3];
  if (v2)
  {
    *(_QWORD *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[10] = &unk_1E5D19558;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1B9A8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SetState(uint64_t result, int a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 136);
      if (v8)
      {
        *(_QWORD *)(v3 + 136) = *(_QWORD *)(v8 + 64);
      }
      else
      {
        v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        *(_QWORD *)(v8 + 64) = 0;
      }
      v7 = fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(v8, *(_QWORD *)(v3 + 8), a2);
      *(_QWORD *)(v3 + 24) = v7;
    }
    *(_DWORD *)(v7 + 56) &= ~0x10u;
    result = fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1AD88DC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 72 * a2;
  v4 = a1[1];
  if (288 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 56) = 15;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = (unsigned int *)(*(_QWORD *)(v4 + 16) + 4 * a3);
  v6 = *v5;
  v7 = v5[1];
  v8 = v7 - v6;
  *(_QWORD *)(result + 32) = v7 - v6;
  if ((_DWORD)v7 != (_DWORD)v6)
  {
    v9 = *(_QWORD *)(v4 + 24) + 12 * v6;
    *(_QWORD *)(result + 16) = v9;
    v10 = *(_QWORD *)v9;
    v11 = (unint64_t)*(unsigned int *)(v9 + 8) << 32;
    *(_QWORD *)(result + 40) = *(_QWORD *)v9;
    *(_QWORD *)(result + 48) = v11;
    if ((_DWORD)v10 == -1)
    {
      *(_QWORD *)(result + 16) = v9 + 12;
      *(_QWORD *)(result + 32) = v8 - 1;
    }
  }
  return result;
}

BOOL fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Search(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 32))
    v3 = 2;
  else
    v3 = 1;
  *(_DWORD *)(v1 + 56) = *(_DWORD *)(v1 + 56) & 0xFFFFFFF0 | v3;
  if (*(_DWORD *)(a1 + 40) < v2)
  {
    *(_QWORD *)(v1 + 24) = 0;
    if (!*(_QWORD *)(v1 + 32))
      return 0;
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16) + 12 * v4;
      v6 = *(_QWORD *)v5;
      v7 = *(unsigned int *)(v5 + 8);
      v8 = *(_DWORD *)(a1 + 32) ? 44 : 40;
      *(_QWORD *)(v1 + 40) = v6;
      *(_QWORD *)(v1 + 48) = v7 << 32;
      v9 = *(_DWORD *)(v1 + v8);
      v10 = *(_DWORD *)(a1 + 40);
      v11 = v9 == v10;
      v12 = v9 <= v10 ? 0 : 7;
      if (v11)
        v12 = 1;
      if (v12)
        break;
      v1 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v1 + 24) + 1;
      *(_QWORD *)(v1 + 24) = v4;
      if (v4 >= v13)
        return 0;
    }
    result = 0;
    if (v12 == 1)
      return 1;
    return result;
  }
  v15 = *(_QWORD *)(a1 + 48);
  if (!v15)
  {
    v16 = 0;
LABEL_34:
    result = 0;
    *(_QWORD *)(v1 + 24) = v16;
    return result;
  }
  v16 = 0;
  while (1)
  {
    v17 = (v15 + v16) >> 1;
    v18 = *(_QWORD **)(a1 + 24);
    v18[3] = v17;
    v19 = v18[2] + 12 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(unsigned int *)(v19 + 8);
    v22 = *(_DWORD *)(a1 + 32) ? 44 : 40;
    v18[5] = v20;
    v18[6] = v21 << 32;
    v23 = *(_DWORD *)((char *)v18 + v22);
    v24 = *(_DWORD *)(a1 + 40);
    if (v23 <= v24)
      break;
    v15 = (v15 + v16) >> 1;
LABEL_29:
    if (v16 >= v15)
    {
      v1 = *(_QWORD *)(a1 + 24);
      goto LABEL_34;
    }
  }
  if (v23 < v24)
  {
    v16 = v17 + 1;
    goto LABEL_29;
  }
  v25 = 12 * ((v15 + v16) >> 1);
  while (v17 > v16)
  {
    v26 = *(_QWORD **)(a1 + 24);
    v26[3] = --v17;
    v27 = v26[2] + v25;
    v28 = *(_QWORD *)(v27 - 12);
    v29 = *(unsigned int *)(v27 - 4);
    if (*(_DWORD *)(a1 + 32))
      v30 = 44;
    else
      v30 = 40;
    v26[5] = v28;
    v26[6] = v29 << 32;
    v25 -= 12;
    if (*(_DWORD *)((char *)v26 + v30) != *(_DWORD *)(a1 + 40))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) = v17 + 1;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Done(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 >= *(_QWORD *)(v2 + 32))
    return 1;
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(_DWORD *)(a1 + 32) == 0;
  if (*(_DWORD *)(a1 + 32))
    v5 = 2;
  else
    v5 = 1;
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(v2 + 56) & 0xFFFFFFF0 | v5;
  v6 = *(_QWORD *)(v2 + 16) + 12 * v3;
  v7 = *(_QWORD *)v6;
  v8 = HIDWORD(*(_QWORD *)v6);
  v9 = (unint64_t)*(unsigned int *)(v6 + 8) << 32;
  if (v4)
    LODWORD(v8) = v7;
  *(_QWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 48) = v9;
  return *(_DWORD *)(a1 + 40) != (_DWORD)v8;
}

uint64_t *std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1AD88E0E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_hint_multi<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>(v5, v6, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_hint_multi<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **leaf;
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9[3];

  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>((uint64_t)a1, a3, (uint64_t)v9);
  leaf = (uint64_t **)std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__find_leaf(a1, a2, &v8, (_DWORD *)v9[0] + 8);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, leaf, v9[0]);
  v6 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v6;
}

void sub_1AD88E1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD88E254(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__find_leaf(_QWORD *a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;

  v4 = a1 + 1;
  if (a1 + 1 != a2 && *((_DWORD *)a2 + 8) < *a4)
  {
    while (1)
    {
      v5 = *v4;
      a2 = v4;
      if (!*v4)
        break;
      while (1)
      {
        v4 = (_QWORD *)v5;
        if (*(_DWORD *)(v5 + 32) >= *a4)
          break;
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          goto LABEL_19;
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a1 == a2)
  {
    v8 = a2;
  }
  else
  {
    if (v6)
    {
      v7 = (_QWORD *)*a2;
      do
      {
        v8 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      v9 = a2;
      do
      {
        v8 = (_QWORD *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (v10);
    }
    if (*a4 < *((_DWORD *)v8 + 8))
    {
      while (1)
      {
        v11 = *v4;
        a2 = v4;
        if (!*v4)
          goto LABEL_20;
        while (1)
        {
          v4 = (_QWORD *)v11;
          if (*a4 < *(_DWORD *)(v11 + 32))
            break;
          v11 = *(_QWORD *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 64, a2 + 64);
  return a1;
}

void sub_1AD88E3FC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap(uint64_t a1, uint64_t a2)
{
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>((_QWORD *)a1, i + 1);
  return a1;
}

void sub_1AD88E4CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *i;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _BOOL4 v16;
  unsigned __int8 *v17;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = *((_QWORD *)i + 1);
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (unsigned __int8 **)i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = *(unsigned __int8 **)i;
          if (*(_QWORD *)i)
          {
            v15 = i;
            while (1)
            {
              v16 = quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, v14 + 16);
              v17 = *(unsigned __int8 **)v15;
              if (!v16)
                break;
              v14 = *(unsigned __int8 **)v17;
              v15 = *(unsigned __int8 **)v15;
              if (!*(_QWORD *)v17)
                goto LABEL_31;
            }
            v14 = *(unsigned __int8 **)v15;
            v17 = v15;
          }
          else
          {
            v17 = i;
          }
LABEL_31:
          *v7 = v14;
          *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = (unsigned __int8 **)i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

BOOL quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *i;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
    return 0;
  }
  if (a1[23])
  {
    for (i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2)
        return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
    }
    return 0;
  }
  return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>(_QWORD *a1, __int128 *a2)
{
  uint64_t inserted;
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1AD88E874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  unint64_t result;
  char v8;

  v5 = a1 + 16;
  v6 = (char *)operator new(0xB0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]((std::string *)(v6 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, (uint64_t)(v6 + 16));
  *((_QWORD *)v6 + 1) = *((int *)v6 + 10) + 571 * result + 326041;
  return result;
}

void sub_1AD88E914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;
  char v8;

  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(int *)(a2 + 40) + 571 * std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, a2 + 16) + 326041;
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

std::string *std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v6 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v6;
  }
  std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[5], (uint64_t)a2 + 120);
  return this;
}

void sub_1AD88EA78(_Unwind_Exception *a1)
{
  void **v1;

  quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set(uint64_t a1, uint64_t a2)
{
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_1AD88EB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v25, a2);
  v8 = *(int *)(a2 + 24);
  v9 = v8 + 571 * v7 + 326041;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8 + 571 * v7 + 326041;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1AD88EDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(v7, (std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD88EE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 6);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v6 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  return std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1AD88EECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = *(unsigned __int8 **)v16;
    if (*(_QWORD *)v16)
    {
      v18 = 0;
      do
      {
        v19 = *((_QWORD *)v17 + 1);
        if (v14 > 1)
        {
          v20 = *((_QWORD *)v17 + 1);
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        v21 = v19 == a2 && quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(v17 + 16, a3);
        if ((v18 & !v21 & 1) != 0)
          break;
        v18 |= v21;
        v16 = *(unsigned __int8 **)v16;
        v17 = *(unsigned __int8 **)v16;
      }
      while (*(_QWORD *)v16);
    }
  }
  return v16;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::map<std::string_view,int>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<std::string_view,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string_view,int>,std::__tree_node<std::__value_type<std::string_view,int>,void *> *,long>>>((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1AD88F124(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<std::string_view,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string_view,int>,std::__tree_node<std::__value_type<std::string_view,int>,void *> *,long>>>(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (_QWORD *)result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

_DWORD *std::allocator<quasar::VoiceCommandActiveSetCompilation const>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v4;

  std::__tree<int>::destroy(a2 + 104, *(_QWORD **)(a2 + 112));
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(a2 + 64);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a2 + 40, *(_QWORD **)(a2 + 48));
  std::__tree<int>::destroy(a2 + 16, *(_QWORD **)(a2 + 24));
  *(_QWORD *)a2 = &unk_1E5D25F80;
  result = *(_DWORD **)(a2 + 8);
  if (result)
  {
    v4 = result[14] - 1;
    result[14] = v4;
    if (!v4)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::corrective_reranking::Parser,std::allocator<quasar::corrective_reranking::Parser>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2A8uLL);
  result = std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::corrective_reranking::Parser>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD88F590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::corrective_reranking::Parser>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43948;
  a1[1] = 0;
  quasar::corrective_reranking::Parser::Parser(a1 + 3);
  return a1;
}

void sub_1AD88F5DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  quasar::corrective_reranking::Models::~Models((quasar::corrective_reranking::Models *)(a1 + 616));
  quasar::corrective_reranking::Config::~Config(v1);
}

void quasar::corrective_reranking::Config::~Config(void **this)
{
  void **v2;

  quasar::PTree::~PTree((quasar::PTree *)(this + 66));
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  if (*((char *)this + 487) < 0)
    operator delete(this[58]);
  if (*((char *)this + 463) < 0)
    operator delete(this[55]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  v2 = this + 30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  v2 = this + 15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__shared_ptr_pointer<std::istream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<std::istream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::istream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<ResultStreamWrapper,std::allocator<ResultStreamWrapper>,_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},void>@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, void **a6@<X6>, void **a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},std::allocator<ResultStreamWrapper>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1AD88F8B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},std::allocator<ResultStreamWrapper>,0>(_QWORD *a1, void **a2, void **a3, void **a4, void **a5, void **a6, void **a7, void **a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D40A40;
  ResultStreamWrapper::ResultStreamWrapper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1AD88F920(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ResultStreamWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ResultStreamWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<ResultStreamWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ResultStreamWrapper::ResultStreamWrapper(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  NSObject **v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  _EARResultContext *v26;
  void *v27;
  NSObject *v28;
  EARLogger *v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  int v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD block[4];
  id v52;
  id to;
  void *v54;
  void *v55;
  void *v56;
  NSObject **v57;
  uint8_t buf[8];
  uint64_t v59;
  _BYTE v60[26];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v57 = v15;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v56 = v18;
  v19 = a6;
  v55 = v19;
  v20 = a7;
  v46 = a8;
  v54 = v46;
  quasar::RecogResultStreamBase::RecogResultStreamBase((_QWORD *)a1);
  *(_QWORD *)a1 = &unk_1E5D16BF0;
  *(_QWORD *)(a1 + 24) = v18;
  v45 = v20;
  *(_QWORD *)(a1 + 32) = v45;
  objc_initWeak((id *)(a1 + 40), v15);
  v47 = v16;
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v47, "count"));
  v22 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v59 = 3221225472;
  *(_QWORD *)v60 = ___ZL18LowercasedDictKeysP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke;
  *(_QWORD *)&v60[8] = &unk_1E5D47270;
  v23 = v21;
  *(_QWORD *)&v60[16] = v23;
  objc_msgSend(v47, "enumerateKeysAndObjectsUsingBlock:", buf);

  *(_QWORD *)(a1 + 48) = v23;
  v24 = v17;
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = objc_msgSend(v19, "copy");
  v25 = objc_msgSend(v46, "copy");
  v44 = v24;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v25;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar18DoublePartialLogicENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 88));
  v26 = objc_alloc_init(_EARResultContext);
  v27 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v26;

  objc_copyWeak(&to, (id *)(a1 + 40));
  v28 = v15[1];
  block[0] = v22;
  block[1] = 3221225472;
  block[2] = ___ZN19ResultStreamWrapperC2EP20_EARSpeechRecognizerP12NSDictionaryIP8NSStringS4_EPS2_IS4_P8NSNumberEPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectS4_PU41objcproto30_EARSpeakerCodeWriterInterface11objc_objectS4__block_invoke;
  block[3] = &unk_1E5D47160;
  objc_copyWeak(&v52, &to);
  dispatch_async(v28, block);
  EARLogger::QuasarOSLogger(v29);
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    v43 = objc_msgSend(v15, "detectUtterances");
    v31 = objc_msgSend(v15, "concatenateUtterances");
    v32 = objc_msgSend(v15, "allowUtteranceDelay");
    v33 = objc_msgSend(v15, "formatAcrossUtterances");
    v34 = *((unsigned __int8 *)v15 + 64);
    v35 = objc_msgSend(v15, "enableVoiceCommands");
    v36 = objc_msgSend(v15, "isLegacyVoiceCommandRequest");
    v37 = objc_msgSend(v15, "shouldGenerateVoiceCommandCandidates");
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)&buf[4] = v43;
    LOWORD(v59) = 1024;
    *(_DWORD *)((char *)&v59 + 2) = v31;
    HIWORD(v59) = 1024;
    *(_DWORD *)v60 = v32;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)&v60[6] = v33;
    *(_WORD *)&v60[10] = 2112;
    *(_QWORD *)&v60[12] = v46;
    *(_WORD *)&v60[20] = 1024;
    *(_DWORD *)&v60[22] = v34;
    v61 = 1024;
    v62 = v35;
    v63 = 1024;
    v64 = v36;
    v65 = 1024;
    v66 = v37;
    _os_log_impl(&dword_1AD756000, v30, OS_LOG_TYPE_INFO, "detectUtterances %d concatenateUtterances %d allowUtteranceDelay %d formatAcrossUtterances %d language %@ supportVoiceCommands %d enableVoiceCommands %d isLegacyVoiceCommandRequest %d shouldGenerateVoiceCommandCandidates %d", buf, 0x3Cu);
  }

  if (objc_msgSend(v15, "isContinuousListening"))
  {
    v38 = *(void **)(a1 + 80);
    objc_msgSend(v15, "configPath");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    std::allocate_shared[abi:ne180100]<EARContinuousListeningResultHelper,std::allocator<EARContinuousListeningResultHelper>,_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,void>((void **)&v57, &v56, (void **)(a1 + 80), &v55, &v54, &v48, &v49);
    objc_msgSend(v38, "setContinuousListeningResultHelper:", &v49);
    v39 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

  }
  objc_destroyWeak(&v52);
  objc_destroyWeak(&to);

  return a1;
}

void sub_1AD88FDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  id *v37;
  id *v38;
  void *v39;
  void *v40;
  void *v41;
  id *v42;
  void *v43;

  v43 = v40;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  objc_destroyWeak(v37);
  objc_destroyWeak(&a28);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a15);

  objc_destroyWeak(v42);
  quasar::RecogResultStreamBase::~RecogResultStreamBase((quasar::RecogResultStreamBase *)v38);

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapperC2EP20_EARSpeechRecognizerP12NSDictionaryIP8NSStringS4_EPS2_IS4_P8NSNumberEPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectS4_PU41objcproto30_EARSpeakerCodeWriterInterface11objc_objectS4__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)WeakRetained[2];
    if (v1)
    {
      if (objc_msgSend(v1, "refreshEmojiRecognizer"))
        v2 = objc_msgSend(WeakRetained, "recognizeEmoji");
      else
        v2 = 0;
      objc_msgSend(WeakRetained, "setRecognizeEmoji:", v2);
    }
  }

}

void sub_1AD88FF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::~ResultStreamWrapper(ResultStreamWrapper *this)
{
  ResultStreamWrapper::~ResultStreamWrapper(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E5D16BF0;
  v2 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  objc_destroyWeak((id *)this + 5);

  quasar::RecogResultStreamBase::~RecogResultStreamBase((quasar::RecogResultStreamBase *)this);
}

void ResultStreamWrapper::writePartial(uint64_t a1, __int128 **a2, int a3, int a4, int a5, int a6, uint64_t **a7, uint64_t a8, __int128 **a9, char a10, char a11, uint64_t *a12)
{
  _QWORD *WeakRetained;
  _QWORD *v21;
  uint64_t *v22;
  NSObject *v23;
  __int128 *v24;
  uint64_t *v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  BOOL v42;
  id v43;
  id v44;
  id v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  id v51;
  id v52;
  unint64_t *v53;
  unint64_t v54;
  id v55;
  id v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  int v64;
  _QWORD *v65;
  __int128 *v66;
  id v67;
  _QWORD block[4];
  _QWORD *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  std::__shared_weak_count *v75;
  _QWORD v76[3];
  _QWORD v77[3];
  _QWORD v78[3];
  int v79;
  int v80;
  int v81;
  char v82;
  char v83;
  BOOL v84;
  void *v85[2];
  char v86;
  void **v87[3];
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  std::string v92;
  std::string buf;
  _BYTE v94[22];
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  __int128 __p;
  uint64_t v108;
  __int128 v109;
  int v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  void **v114[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v21 = WeakRetained;
  if (WeakRetained)
  {
    if (a4 && (objc_msgSend(WeakRetained, "disablePartialResults") & 1) == 0)
    {
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v22 = a7[1];
      v65 = v21;
      v63 = a6;
      v64 = a3;
      if (*a7 == v22)
      {
        memset(&buf, 0, sizeof(buf));
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)&v111, (uint64_t)&buf);
        v90[0] = &buf;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
        v24 = *a2;
        v66 = a2[1];
        if (*a2 != v66)
        {
          do
          {
            v25 = v112;
            if (*((char *)v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
            }
            else
            {
              v26 = *v24;
              v92.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
              *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v26;
            }
            std::string::basic_string[abi:ne180100]<0>(v90, "");
            std::string::basic_string[abi:ne180100]<0>(v88, "");
            memset(v87, 0, sizeof(v87));
            std::string::basic_string[abi:ne180100]<0>(v85, "");
            quasar::Token::Token(&buf, (__int128 *)&v92, 0, 0, 0, 1, 0, (__int128 *)v90, 0.0, (__int128 *)v88, (__int128 **)v87, 0, (__int128 *)v85, 0, 0);
            v27 = *(v25 - 2);
            if (v27 >= *(v25 - 1))
            {
              v35 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v25 - 3, (__int128 *)&buf);
            }
            else
            {
              v28 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_QWORD *)(v27 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v27 = v28;
              memset(&buf, 0, sizeof(buf));
              v29 = *(_QWORD *)&v94[14];
              *(_OWORD *)(v27 + 24) = *(_OWORD *)v94;
              *(_QWORD *)(v27 + 38) = v29;
              v30 = v96;
              *(_OWORD *)(v27 + 48) = v95;
              *(_QWORD *)(v27 + 64) = v30;
              *(_QWORD *)(v27 + 72) = 0;
              v96 = 0;
              v95 = 0uLL;
              *(_QWORD *)(v27 + 80) = 0;
              *(_QWORD *)(v27 + 88) = 0;
              *(_OWORD *)(v27 + 72) = v97;
              *(_QWORD *)(v27 + 88) = v98;
              v97 = 0uLL;
              v98 = 0;
              v31 = v99;
              *(_QWORD *)(v27 + 112) = v100;
              *(_QWORD *)(v27 + 120) = 0;
              *(_OWORD *)(v27 + 96) = v31;
              v100 = 0;
              v99 = 0uLL;
              *(_QWORD *)(v27 + 128) = 0;
              *(_QWORD *)(v27 + 136) = 0;
              *(_OWORD *)(v27 + 120) = v101;
              *(_QWORD *)(v27 + 136) = v102;
              v101 = 0uLL;
              v102 = 0;
              v32 = v103;
              *(_QWORD *)(v27 + 160) = v104;
              *(_OWORD *)(v27 + 144) = v32;
              v104 = 0;
              v103 = 0uLL;
              LODWORD(v30) = v105;
              *(_WORD *)(v27 + 172) = v106;
              *(_DWORD *)(v27 + 168) = v30;
              v33 = __p;
              *(_QWORD *)(v27 + 192) = v108;
              *(_OWORD *)(v27 + 176) = v33;
              v108 = 0;
              __p = 0uLL;
              v34 = v109;
              *(_DWORD *)(v27 + 216) = v110;
              *(_OWORD *)(v27 + 200) = v34;
              v35 = v27 + 224;
            }
            *(v25 - 2) = v35;
            if (SHIBYTE(v108) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v104) < 0)
              operator delete((void *)v103);
            v114[0] = (void **)&v101;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v114);
            if (SHIBYTE(v100) < 0)
              operator delete((void *)v99);
            v114[0] = (void **)&v97;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v114);
            if (SHIBYTE(v96) < 0)
              operator delete((void *)v95);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (v86 < 0)
              operator delete(v85[0]);
            v85[0] = v87;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
            if (v89 < 0)
              operator delete(v88[0]);
            if (v91 < 0)
              operator delete(v90[0]);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v92.__r_.__value_.__l.__data_);
            v24 = (__int128 *)((char *)v24 + 24);
          }
          while (v24 != v66);
        }
      }
      else if (&v111 != a7)
      {
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)&v111, *a7, v22, 0xAAAAAAAAAAAAAAABLL * (v22 - *a7));
      }
      v36 = v111;
      for (i = v112; v36 != i; v36 += 3)
      {
        v39 = *v36;
        v38 = v36[1];
        while (v39 != v38)
        {
          v40 = *(unsigned __int8 *)a12;
          if (*(_BYTE *)a12)
          {
            quasar::resetWhiteSpace((std::string *)v39, a12 + 1);
            v40 = *(unsigned __int8 *)a12;
          }
          ResultStreamWrapper::replacementTokenName(a1, (std::string *)v39, v40 != 0, &buf);
          if (*(char *)(v39 + 23) < 0)
            operator delete(*(void **)v39);
          v41 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v39 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)v39 = v41;
          v39 += 224;
        }
      }
      v42 = *(_QWORD *)a8 != *(_QWORD *)(a8 + 8);
      quasar::stringsToTokensWithDummyTimestamps((__int128 **)a8, 0, (uint64_t *)&buf);
      quasar::stringsToTokensWithDummyTimestamps(a9, 0, (uint64_t *)v90);
      v67 = *(id *)(a1 + 24);
      v43 = *(id *)(a1 + 64);
      v44 = *(id *)(a1 + 72);
      v45 = *(id *)(a1 + 80);
      v47 = *(void **)(a1 + 88);
      v46 = *(unint64_t **)(a1 + 96);
      v88[0] = v47;
      v88[1] = v46;
      if (v46)
      {
        v48 = v46 + 1;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v65[1];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3321888768;
      block[2] = ___ZN19ResultStreamWrapper12writePartialERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE27PartialUtteranceStartMillisbiiRKNS1_INS1_IN6quasar5TokenENS5_ISE_EEEENS5_ISG_EEEESB_SB_bbRK14FormattingInfo_block_invoke;
      block[3] = &unk_1E5CFFFF0;
      v69 = v65;
      v51 = v44;
      v70 = v51;
      v52 = v43;
      v71 = v52;
      v74 = v47;
      v75 = (std::__shared_weak_count *)v46;
      if (v46)
      {
        v53 = v46 + 1;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v82 = a10;
      v83 = a11;
      v55 = v45;
      v72 = v55;
      memset(v76, 0, sizeof(v76));
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v76, v111, v112, 0xAAAAAAAAAAAAAAABLL * (v112 - v111));
      v79 = v64;
      v80 = a5;
      memset(v77, 0, sizeof(v77));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v77, (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5));
      memset(v78, 0, sizeof(v78));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v78, (uint64_t)v90[0], (uint64_t)v90[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v90[1] - (char *)v90[0]) >> 5));
      v56 = v67;
      v73 = v56;
      v81 = v63;
      v84 = v42;
      dispatch_async(v50, block);

      v87[0] = (void **)v78;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v87);
      v87[0] = (void **)v77;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v87);
      v87[0] = (void **)v76;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v87);

      v57 = v75;
      if (v75)
      {
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }

      v60 = (std::__shared_weak_count *)v88[1];
      if (v88[1])
      {
        v61 = (unint64_t *)((char *)v88[1] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      v88[0] = v90;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
      v90[0] = &buf;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v21 = v65;
    }
  }
  else
  {
    EARLogger::QuasarOSLogger(0);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing partial results",
        (uint8_t *)&buf,
        2u);
    }

  }
}

void sub_1AD890720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  a61 = v61 - 128;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalChoices(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const quasar::Token ***ResultChoices;
  const quasar::Token **v7;
  const quasar::Token *v8;
  const quasar::Token *v9;
  int v10;
  void *v11;
  std::string *p_p;
  std::string::size_type size;
  void *v14;
  void *v15;
  float v16;
  float v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  const quasar::AudioAnalytics *AudioAnalytics;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 **ItnOverrides;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t ResultCosts;
  EARLogger *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void ****ResultMuxIds;
  uint64_t LeftContextForItn;
  BOOL v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  __int128 **RightContextForItn;
  std::__shared_weak_count *v53;
  void **v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  BOOL v71;
  int v72;
  id v73;
  id v74;
  NSObject *v75;
  _QWORD *WeakRetained;
  const quasar::Token **v77;
  id v78;
  _QWORD block[4];
  id v80;
  _QWORD *v81;
  NSObject *v82;
  id v83;
  id v84;
  void **v85;
  std::__shared_weak_count *v86;
  void *v87[3];
  void *v88;
  void *v89;
  uint64_t v90;
  _QWORD v91[3];
  void *v92[3];
  void *v93[4];
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  char v100;
  std::string v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  std::string v105;
  uint64_t v106[2];
  uint64_t v107[4];
  int v108;
  int v109;
  int v110;
  int v111;
  char v112;
  char v113;
  char v114;
  char v115;
  BOOL v116;
  const void ******v117;
  std::__shared_weak_count *v118;
  const void *****v119;
  uint64_t v120;
  const void ****v121;
  uint64_t v122;
  const void ***v123;
  const void ***v124;
  uint64_t v125;
  char **v126;
  char *v127[2];
  void *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  std::string __s;
  __int128 v133;
  uint64_t v134;
  std::string v135;
  std::string __p;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  char v144;
  uint64_t v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  uint64_t *v150;
  uint64_t *v151;
  unint64_t v152;
  std::string *v153;
  uint64_t v154;
  _QWORD v155[4];

  v155[1] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v75 = *(id *)(a1 + 24);
    if (v75)
    {
      if (a3 == 1)
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        ResultChoices = (const quasar::Token ***)quasar::RecogResult::getResultChoices((quasar::RecogResult *)a2);
        v7 = *ResultChoices;
        v77 = ResultChoices[1];
        if (*ResultChoices != v77)
        {
          do
          {
            *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
            v131 = 0;
            v8 = *v7;
            v9 = v7[1];
            while (v8 != v9)
            {
              quasar::Token::Token(&__p, v8);
              v10 = *(unsigned __int8 *)(a2 + 320);
              if (*(_BYTE *)(a2 + 320))
              {
                quasar::resetWhiteSpace(&__p, (uint64_t *)(a2 + 328));
                v10 = *(unsigned __int8 *)(a2 + 320);
              }
              ResultStreamWrapper::replacementTokenName(a1, &__p, v10 != 0, &v135);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = v135;
              v11 = *(void **)(a1 + 56);
              if (v11)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  size = __p.__r_.__value_.__l.__size_;
                objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", p_p, size);
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v11, "objectForKey:", v14);
                v15 = (void *)objc_claimAutoreleasedReturnValue();

                if (v15)
                {
                  objc_msgSend(v15, "floatValue");
                  v17 = *(float *)&v138 - v16;
                  if (v17 < 0.0)
                    v17 = 0.0;
                  *(float *)&v138 = v17;
                }

              }
              v18 = __s.__r_.__value_.__r.__words[0];
              if (__s.__r_.__value_.__r.__words[0] >= __s.__r_.__value_.__l.__size_)
              {
                v19 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v131, (const quasar::Token *)&__p);
              }
              else
              {
                quasar::Token::Token((std::string *)__s.__r_.__value_.__l.__data_, (const quasar::Token *)&__p);
                v19 = v18 + 224;
              }
              __s.__r_.__value_.__r.__words[0] = v19;
              if (v149 < 0)
                operator delete(v148);
              if (v147 < 0)
                operator delete(v146);
              v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
              if (v144 < 0)
                operator delete(v142);
              v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
              if (SHIBYTE(v140) < 0)
                operator delete(v139);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v8 = (const quasar::Token *)((char *)v8 + 224);
            }
            v20 = v151;
            if ((unint64_t)v151 >= v152)
            {
              v21 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v150, &v131);
            }
            else
            {
              *v151 = 0;
              v20[1] = 0;
              v20[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v20, v131, (uint64_t)__s.__r_.__value_.__l.__data_, 0x6DB6DB6DB6DB6DB7 * ((int64_t)(__s.__r_.__value_.__r.__words[0] - v131) >> 5));
              v21 = v20 + 3;
            }
            v151 = v21;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v7 += 3;
          }
          while (v7 != v77);
        }
        v73 = *(id *)(a1 + 64);
        v74 = *(id *)(a1 + 72);
        AudioAnalytics = (const quasar::AudioAnalytics *)quasar::RecogResult::getAudioAnalytics((quasar::RecogResult *)a2);
        quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)&__p, AudioAnalytics);
        LOBYTE(v131) = *(_BYTE *)(a2 + 176);
        if (*(char *)(a2 + 207) < 0)
          std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a2 + 184), *(_QWORD *)(a2 + 192));
        else
          __s = *(std::string *)(a2 + 184);
        v133 = *(_OWORD *)(a2 + 208);
        v134 = *(_QWORD *)(a2 + 224);
        ItnOverrides = (__int128 **)quasar::RecogResult::getItnOverrides((quasar::RecogResult *)a2);
        memset(&v135, 0, sizeof(v135));
        std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(&v135, *ItnOverrides, ItnOverrides[1], 0x8E38E38E38E38E39 * (((char *)ItnOverrides[1] - (char *)*ItnOverrides) >> 3));
        v30 = *(_BYTE *)(a2 + 132);
        v31 = *(_DWORD *)(a2 + 124);
        v32 = *(_DWORD *)(a2 + 128);
        v33 = *(_QWORD *)(a2 + 144);
        v78 = *(id *)(a1 + 80);
        ResultCosts = quasar::RecogResult::getResultCosts((quasar::RecogResult *)a2);
        v129 = 0;
        v128 = 0;
        v130 = 0;
        v35 = (EARLogger *)std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v128, *(const void **)ResultCosts, *(_QWORD *)(ResultCosts + 8), (uint64_t)(*(_QWORD *)(ResultCosts + 8) - *(_QWORD *)ResultCosts) >> 3);
        v127[1] = 0;
        v127[0] = 0;
        v126 = v127;
        v36 = *(_QWORD *)(a2 + 96);
        if (v36)
        {
          if (&v126 != (char ***)(v36 + 344))
            std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v126, *(_QWORD **)(v36 + 344), (_QWORD *)(v36 + 352));
        }
        else
        {
          EARLogger::QuasarOSLogger(v35);
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
            ResultStreamWrapper::writeFinalChoices(v37, v38, v39, v40, v41, v42, v43, v44);

        }
        ResultMuxIds = (const void ****)quasar::RecogResult::getResultMuxIds((quasar::RecogResult *)a2);
        v124 = 0;
        v123 = 0;
        v125 = 0;
        std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)&v123, *ResultMuxIds, ResultMuxIds[1], 0xAAAAAAAAAAAAAAABLL * (ResultMuxIds[1] - *ResultMuxIds));
        LeftContextForItn = quasar::RecogResult::getLeftContextForItn((quasar::RecogResult *)a2);
        v47 = *(_QWORD *)LeftContextForItn != *(_QWORD *)(LeftContextForItn + 8);
        quasar::stringsToTokensWithDummyTimestamps((__int128 **)LeftContextForItn, 0, (uint64_t *)&v121);
        v48 = *(_BYTE *)(a2 + 292);
        v49 = *(_BYTE *)(a2 + 293);
        v50 = *(_QWORD *)(a2 + 296);
        v51 = *(_BYTE *)(a2 + 304);
        v72 = *(_DWORD *)(a2 + 308);
        RightContextForItn = (__int128 **)quasar::RecogResult::getRightContextForItn((quasar::RecogResult *)a2);
        quasar::stringsToTokensWithDummyTimestamps(RightContextForItn, v32 + v31, (uint64_t *)&v119);
        v71 = v47;
        v54 = *(void ***)(a1 + 88);
        v53 = *(std::__shared_weak_count **)(a1 + 96);
        v117 = (const void ******)v54;
        v118 = v53;
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
        }
        v57 = WeakRetained[1];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3321888768;
        block[2] = ___ZN19ResultStreamWrapper17writeFinalChoicesERKN6quasar11RecogResultENS0_21RecogResultStreamBase11RecogStatusE_block_invoke;
        block[3] = &unk_1E5D00028;
        v85 = v54;
        v86 = v53;
        if (v53)
        {
          v58 = (unint64_t *)&v53->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v80 = v78;
        memset(v87, 0, sizeof(v87));
        std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v87, v150, v151, 0xAAAAAAAAAAAAAAABLL * (v151 - v150));
        v88 = 0;
        v89 = 0;
        v90 = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v88, v128, (uint64_t)v129, (v129 - (_BYTE *)v128) >> 3);
        v112 = v30;
        v108 = v31;
        v109 = v32;
        memset(v91, 0, sizeof(v91));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v91, (uint64_t)v121, v122, 0x6DB6DB6DB6DB6DB7 * ((v122 - (uint64_t)v121) >> 5));
        v113 = v48;
        memset(v92, 0, sizeof(v92));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v92, (uint64_t)v119, v120, 0x6DB6DB6DB6DB6DB7 * ((v120 - (uint64_t)v119) >> 5));
        v114 = v49;
        v115 = v51;
        v81 = WeakRetained;
        v70 = v75;
        v82 = v70;
        quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)v93, (const quasar::AudioAnalytics *)&__p);
        v100 = v131;
        v60 = v80;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v101, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v101 = __s;
        v102 = v133;
        v103 = v134;
        v104 = v33;
        v61 = v73;
        v83 = v61;
        v62 = v74;
        v110 = 1;
        v84 = v62;
        memset(&v105, 0, sizeof(v105));
        std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(&v105, (__int128 *)v135.__r_.__value_.__l.__data_, (__int128 *)v135.__r_.__value_.__l.__size_, 0x8E38E38E38E38E39 * ((uint64_t)(v135.__r_.__value_.__l.__size_ - v135.__r_.__value_.__r.__words[0]) >> 3));
        std::set<std::string>::set[abi:ne180100](v106, (const void ***)&v126);
        memset(v107, 0, 24);
        std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(v107, v123, v124, 0xAAAAAAAAAAAAAAABLL * (v124 - v123));
        v116 = v71;
        v107[3] = v50;
        v111 = v72;
        dispatch_async(v57, block);
        v153 = (std::string *)v107;
        std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
        std::__tree<std::string>::destroy((uint64_t)v106, (char *)v106[1]);
        v153 = &v105;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);

        v63 = v60;
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (v98)
        {
          v99 = v98;
          operator delete(v98);
        }
        if (v96)
        {
          v97 = v96;
          operator delete(v96);
        }
        if (v94)
        {
          v95 = v94;
          operator delete(v94);
        }
        if (v93[0])
        {
          v93[1] = v93[0];
          operator delete(v93[0]);
        }

        v153 = (std::string *)v92;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
        v153 = (std::string *)v91;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        v153 = (std::string *)v87;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);

        v64 = v86;
        if (v86)
        {
          v65 = (unint64_t *)&v86->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = v118;
        if (v118)
        {
          v68 = (unint64_t *)&v118->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v117 = &v119;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
        v119 = &v121;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
        v121 = &v123;
        std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
        std::__tree<std::string>::destroy((uint64_t)&v126, v127[0]);
        if (v128)
        {
          v129 = v128;
          operator delete(v128);
        }

        v128 = &v135;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (v142)
        {
          v143 = v142;
          operator delete(v142);
        }
        if (v140)
        {
          v141 = v140;
          operator delete(v140);
        }
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }

        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v23 = v70;
        goto LABEL_101;
      }
      objc_msgSend(WeakRetained, "relevantTextContext");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "reset");

      v26 = (void *)MEMORY[0x1E0CB35C8];
      v154 = *MEMORY[0x1E0CB2D50];
      v155[0] = CFSTR("Recognition was unsuccessful");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v155, &v154, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "errorWithDomain:code:userInfo:", CFSTR("EARErrorDomain"), a3, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject speechRecognizer:didFinishRecognitionWithError:](v75, "speechRecognizer:didFinishRecognitionWithError:", WeakRetained, v28);

    }
    else
    {
      EARLogger::QuasarOSLogger(0);
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1AD756000, v24, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not writing final choices",
          (uint8_t *)&__p,
          2u);
      }

    }
    v23 = v75;
    goto LABEL_101;
  }
  EARLogger::QuasarOSLogger(0);
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing final choices",
      (uint8_t *)&__p,
      2u);
  }
LABEL_101:

}

void sub_1AD89134C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  quasar::AudioAnalytics *v34;
  uint64_t v35;
  void *v37;

  quasar::AudioAnalytics::~AudioAnalytics(v34);

  *(_QWORD *)(v35 - 144) = v33;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  *(_QWORD *)(v35 - 144) = a10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v35 - 144) = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  STACK[0x238] = (unint64_t)&STACK[0x248];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x238]);
  STACK[0x248] = (unint64_t)&STACK[0x260];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  STACK[0x260] = (unint64_t)&STACK[0x278];
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x290], (char *)STACK[0x298]);
  v37 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v37;
    operator delete(v37);
  }

  STACK[0x2A8] = (unint64_t)&STACK[0x2F8];
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&STACK[0x310]);

  STACK[0x310] = v35 - 168;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportRecognizerProgressStatus(uint64_t a1, _DWORD *a2)
{
  id v4;
  EARLogger *WeakRetained;
  EARLogger *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;

  v4 = *(id *)(a1 + 24);
  WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (!WeakRetained)
  {
    EARLogger::QuasarOSLogger(0);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v8 = "Recognizer has been deallocated; not reporting result progress";
      v9 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_1AD756000, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
    }
LABEL_10:

    goto LABEL_11;
  }
  if (!v4)
  {
    EARLogger::QuasarOSLogger(WeakRetained);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v10 = 0;
      v8 = "Result stream has been deallocated; not reporting result progress";
      v9 = (uint8_t *)&v10;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v4, "speechRecognizer:didReportStatus:statusContext:", v6, *a2 != 0, 0);
LABEL_11:

}

void sub_1AD8916E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportRecognitionProgress(ResultStreamWrapper *this, int a2)
{
  id WeakRetained;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)this + 5);
  if (WeakRetained)
  {
    v5 = *((id *)this + 3);
    if (v5)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        -[NSObject speechRecognizer:didProcessAudioDuration:](v5, "speechRecognizer:didProcessAudioDuration:", WeakRetained, (double)a2 * 0.001);
    }
    else
    {
      EARLogger::QuasarOSLogger(0);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1AD756000, v6, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not reporting result progress",
          v7,
          2u);
      }

    }
  }
  else
  {
    EARLogger::QuasarOSLogger(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AD756000, v5, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not reporting result progress",
        buf,
        2u);
    }
  }

}

void sub_1AD891818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportHighResolutionRecognitionProgress(ResultStreamWrapper *this, int a2)
{
  void *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  EARContinuousListeningResultHelper *v7;
  unint64_t *v8;
  unint64_t v9;
  EARContinuousListeningResultHelper *v10;
  std::__shared_weak_count *v11;

  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    objc_msgSend(v3, "continuousListeningResultHelper");
    if (!v11)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)())v11->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        return;
    }
    else
    {
LABEL_6:
      if (!v10)
        return;
    }
    v7 = (EARContinuousListeningResultHelper *)*((_QWORD *)this + 10);
    if (v7)
    {
      -[EARContinuousListeningResultHelper continuousListeningResultHelper](v7, "continuousListeningResultHelper");
      v7 = v10;
    }
    else
    {
      v11 = 0;
    }
    EARContinuousListeningResultHelper::reportHighResolutionRecognitionProgress(v7, a2);
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void ResultStreamWrapper::reportPause(ResultStreamWrapper *this)
{
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  EARContinuousListeningResultHelper *v5;
  unint64_t *v6;
  unint64_t v7;
  EARContinuousListeningResultHelper *v8;
  std::__shared_weak_count *v9;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    objc_msgSend(v2, "continuousListeningResultHelper");
    if (!v9)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)())v9->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return;
    }
    else
    {
LABEL_6:
      if (!v8)
        return;
    }
    v5 = (EARContinuousListeningResultHelper *)*((_QWORD *)this + 10);
    if (v5)
    {
      -[EARContinuousListeningResultHelper continuousListeningResultHelper](v5, "continuousListeningResultHelper");
      v5 = v8;
    }
    else
    {
      v9 = 0;
    }
    EARContinuousListeningResultHelper::reportPause(v5);
    if (v9)
    {
      v6 = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ResultStreamWrapper::reportResume(ResultStreamWrapper *this)
{
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  EARContinuousListeningResultHelper *v5;
  unint64_t *v6;
  unint64_t v7;
  EARContinuousListeningResultHelper *v8;
  std::__shared_weak_count *v9;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    objc_msgSend(v2, "continuousListeningResultHelper");
    if (!v9)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)())v9->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return;
    }
    else
    {
LABEL_6:
      if (!v8)
        return;
    }
    v5 = (EARContinuousListeningResultHelper *)*((_QWORD *)this + 10);
    if (v5)
    {
      -[EARContinuousListeningResultHelper continuousListeningResultHelper](v5, "continuousListeningResultHelper");
      v5 = v8;
    }
    else
    {
      v9 = 0;
    }
    EARContinuousListeningResultHelper::reportResume(v5);
    if (v9)
    {
      v6 = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ResultStreamWrapper::writeEndPointData(uint64_t a1, int a2, int a3, double a4, double a5, double a6, uint64_t a7, unsigned int **a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  id WeakRetained;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  uint8_t v24[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v21 = *(id *)(a1 + 24);
    if (v21)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        EARHelpers::VectorToArray<unsigned int>(a8);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject speechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:acousticEndpointerScore:](v21, "speechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:acousticEndpointerScore:", WeakRetained, a2, a13 * a3, v22, a12, a4, a6, a5);
      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) == 0)
          goto LABEL_13;
        EARHelpers::VectorToArray<unsigned int>(a8);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject speechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:](v21, "speechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:", WeakRetained, a2, a13 * a3, v22, a12, a4, a6);
      }

LABEL_13:
      if ((objc_opt_respondsToSelector() & 1) != 0)
        -[NSObject speechRecognizer:didProcessAudioDuration:](v21, "speechRecognizer:didProcessAudioDuration:", WeakRetained, (double)a12 * 0.001);
      goto LABEL_15;
    }
    EARLogger::QuasarOSLogger(0);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not writing end point data",
        v24,
        2u);
    }

  }
  else
  {
    EARLogger::QuasarOSLogger(0);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing end point data",
        buf,
        2u);
    }
  }
LABEL_15:

}

void sub_1AD891CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeTrainingData(id *a1, int64x2_t *a2, uint64_t a3)
{
  NSObject **WeakRetained;
  NSObject **v7;
  std::__shared_weak_count *v8;
  quasar::SpeakerCodeTraining *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  id v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  quasar::SpeakerCodeTraining *v40;
  id v41;
  NSObject *v42;
  NSObject **v43;
  _QWORD block[4];
  NSObject *v45;
  id v46;
  uint8_t *v47;
  void ***v48;
  quasar::SpeakerCodeTraining *v49;
  std::__shared_weak_count *v50;
  void **v51;
  uint64_t *v52;
  uint64_t v53;
  __n128 (*v54)(__n128 *, __n128 *);
  void (*v55)(uint64_t);
  void *v56;
  _QWORD v57[3];
  uint8_t buf[8];
  uint64_t *v59;
  uint64_t v60;
  __n128 (*v61)(__n128 *, __n128 *);
  void (*v62)(uint64_t);
  void *v63;
  _QWORD v64[5];
  std::__shared_weak_count *v65;
  void **v66;

  WeakRetained = (NSObject **)objc_loadWeakRetained(a1 + 5);
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v9 = (quasar::SpeakerCodeTraining *)WeakRetained[4];
    v8 = (std::__shared_weak_count *)WeakRetained[5];
    v64[4] = v9;
    v65 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v9)
    {
      v12 = a1[4];
      v13 = v12;
      if (v12)
      {
        v40 = v9;
        v42 = v12;
        v43 = v7;
        v41 = a1[9];
        *(_QWORD *)buf = 0;
        v59 = (uint64_t *)buf;
        v60 = 0x4812000000;
        v61 = __Block_byref_object_copy__1304;
        v62 = __Block_byref_object_dispose__1305;
        v63 = &unk_1AE30551B;
        memset(v64, 0, 24);
        v51 = 0;
        v52 = (uint64_t *)&v51;
        v53 = 0x4812000000;
        v54 = __Block_byref_object_copy__1304;
        v55 = __Block_byref_object_dispose__1305;
        v56 = &unk_1AE30551B;
        memset(v57, 0, sizeof(v57));
        while (1)
        {
          if (!a2[2].i64[1])
          {
            quasar::SpeakerCodeTraining::start(v40);
            v7 = v43;
            v30 = v43[3];
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3321888768;
            block[2] = ___ZN19ResultStreamWrapper17writeTrainingDataERNSt3__15dequeIN6quasar19SpeakerCodeTraining11AlignedDataENS0_9allocatorIS4_EEEEl_block_invoke;
            block[3] = &unk_1E5D46A38;
            v49 = v40;
            v50 = v8;
            if (v8)
            {
              v31 = (unint64_t *)&v8->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
            v47 = buf;
            v48 = &v51;
            v13 = v42;
            v45 = v13;
            v33 = v41;
            v46 = v33;
            dispatch_async(v30, block);

            v34 = v50;
            if (v50)
            {
              v35 = (unint64_t *)&v50->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            _Block_object_dispose(&v51, 8);
            v66 = (void **)v57;
            std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v66);
            _Block_object_dispose(buf, 8);
            v51 = (void **)v64;
            std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v51);

            v8 = v65;
            goto LABEL_41;
          }
          v14 = a2[2].u64[0];
          v15 = *(_QWORD *)(a2->i64[1] + 8 * (v14 / 0x27));
          v16 = v14 % 0x27;
          v17 = v15 + 104 * (v14 % 0x27);
          if (*(_BYTE *)(v17 + 96))
          {
            if (a3-- < 1)
              goto LABEL_23;
            v19 = v59;
            v20 = v59[7];
            if (v20 >= v59[8])
            {
              v21 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v59 + 6, v17);
            }
            else
            {
              kaldi::CuMatrix<float>::CuMatrix(v59[7], v17, 111);
              v21 = v20 + 48;
              v19[7] = v20 + 48;
            }
            v19[7] = v21;
            v25 = v52;
            v26 = v15 + 104 * v16 + 48;
            v27 = v52[7];
            if (v27 >= v52[8])
            {
LABEL_21:
              v28 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v52 + 6, v26);
              goto LABEL_22;
            }
          }
          else
          {
            v22 = v59;
            v23 = v59[7];
            if (v23 >= v59[8])
            {
              v24 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v59 + 6, v17);
            }
            else
            {
              kaldi::CuMatrix<float>::CuMatrix(v59[7], v17, 111);
              v24 = v23 + 48;
              v22[7] = v23 + 48;
            }
            v22[7] = v24;
            v25 = v52;
            v26 = v15 + 104 * v16 + 48;
            v27 = v52[7];
            if (v27 >= v52[8])
              goto LABEL_21;
          }
          kaldi::CuMatrix<float>::CuMatrix(v52[7], v26, 111);
          v28 = v27 + 48;
          v25[7] = v27 + 48;
LABEL_22:
          v25[7] = v28;
LABEL_23:
          std::deque<quasar::SpeakerCodeTraining::AlignedData>::pop_front(a2);
        }
      }
      EARLogger::QuasarOSLogger(0);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AD756000, v37, OS_LOG_TYPE_INFO, "Speaker code writer has been deallocated; not training speaker code.",
          buf,
          2u);
      }

    }
    else
    {
      EARLogger::QuasarOSLogger((EARLogger *)WeakRetained);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AD756000, v13, OS_LOG_TYPE_INFO, "Training instance has been deallocated; not training speaker code.",
          buf,
          2u);
      }
    }
LABEL_41:

    if (v8)
    {
      v38 = (unint64_t *)&v8->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    EARLogger::QuasarOSLogger(0);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not training speaker code.",
        buf,
        2u);
    }

  }
}

void sub_1AD892164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

uint64_t ResultStreamWrapper::supportsDoubleWritePartial(ResultStreamWrapper *this)
{
  return 1;
}

void ___ZL18LowercasedDictKeysP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = *(void **)(a1 + 32);
  objc_msgSend(a2, "lowercaseString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKey:", v7, v6);

}

void sub_1AD89226C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar18DoublePartialLogicENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar18DoublePartialLogicENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8922C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar18DoublePartialLogicENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5CFFD58;
  a1[1] = 0;
  quasar::DoublePartialLogic::DoublePartialLogic((quasar::DoublePartialLogic *)(a1 + 3));
  return a1;
}

void sub_1AD89230C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DoublePartialLogic>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DoublePartialLogic>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::DoublePartialLogic>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<EARContinuousListeningResultHelper,std::allocator<EARContinuousListeningResultHelper>,_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,void>@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, void **a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,std::allocator<EARContinuousListeningResultHelper>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1AD8923F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,std::allocator<EARContinuousListeningResultHelper>,0>(_QWORD *a1, void **a2, void **a3, void **a4, void **a5, void **a6, void **a7)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40AE8;
  a1[1] = 0;
  EARContinuousListeningResultHelper::EARContinuousListeningResultHelper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7);
  return a1;
}

void sub_1AD892454(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t EARContinuousListeningResultHelper::EARContinuousListeningResultHelper(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  _QWORD *v13;
  id v14;
  id v15;
  id v16;
  char v17;
  char v18;
  char v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  const quasar::SystemConfig *SysConfig;
  uint64_t *v35;
  unint64_t v36;
  quasar::SpeechRecognizer *v37;
  uint64_t v38;
  quasar::SpeechRecognizer *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  id v46;
  id v47;
  _QWORD block[4];
  _QWORD *v49;
  uint64_t v50;
  quasar::SpeechRecognizer *v51;
  std::__shared_weak_count *v52;
  void *__p[2];
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v13 = a2;
  v14 = a3;
  v46 = a4;
  v47 = a5;
  v15 = a6;
  v16 = a7;
  v17 = objc_msgSend(v13, "allowUtteranceDelay");
  v18 = objc_msgSend(v13, "shouldGenerateVoiceCommandCandidates");
  v19 = objc_msgSend(v13, "isLegacyVoiceCommandRequest");
  if (v16)
  {
    v20 = v46;
    objc_msgSend(v16, "ear_toString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v54 = 0;
    v20 = v46;
  }
  v21 = (std::__shared_weak_count *)v13[7];
  v61 = v13[6];
  v62 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  quasar::ContinuousListeningResultHelper::ContinuousListeningResultHelper(a1, v17, v18, v19, (uint64_t)__p, &v61);
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_1E5D17150;
  objc_initWeak((id *)(a1 + 256), v13);
  objc_initWeak((id *)(a1 + 264), v14);
  objc_initWeak((id *)(a1 + 272), v20);
  *(_QWORD *)(a1 + 280) = objc_msgSend(v47, "copy");
  *(_QWORD *)(a1 + 288) = objc_msgSend(v15, "copy");
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  v60 = 0;
  if (objc_msgSend(v13, "isContinuousListening")
    && objc_msgSend(v13, "enableVoiceCommands")
    && (objc_msgSend(v13, "isLegacyVoiceCommandRequest") & 1) == 0)
  {
    v27 = operator new();
    EAROutputResultHandler::EAROutputResultHandler(v27, v13, v14, 0);
    v28 = v60;
    v60 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    objc_msgSend(v13, "relevantTextContext");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = operator new(0x30uLL);
    *((_QWORD *)v30 + 2) = 0;
    *(_QWORD *)v30 = &unk_1E5CFFC78;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 3) = &unk_1E5CFEE40;
    objc_initWeak((id *)v30 + 4, v29);
    *((_QWORD *)v30 + 5) = a1;
    v58 = (uint64_t)v30 + 24;
    v59 = (std::__shared_weak_count *)v30;

    std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingRecoveryHandler,std::unique_ptr<quasar::result_handler::ResultHandler>,std::shared_ptr<EARVoiceEditingClient> &>(&v60, &v58, (uint64_t *)__p);
    v31 = __p[0];
    __p[0] = 0;
    v32 = v60;
    v60 = (uint64_t)v31;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v33 = __p[0];
      __p[0] = 0;
      if (v33)
        (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
    }
    v20 = v46;
    objc_msgSend(v13, "getRecognizer");
    SysConfig = (const quasar::SystemConfig *)quasar::SpeechRecognizer::getSysConfig(v51);
    quasar::result_handler::VoiceEditingResultHandlerConfig::VoiceEditingResultHandlerConfig((quasar::result_handler::VoiceEditingResultHandlerConfig *)__p, SysConfig);
    if (v52)
    {
      v35 = &v52->__shared_owners_;
      do
        v36 = __ldaxr((unint64_t *)v35);
      while (__stlxr(v36 - 1, (unint64_t *)v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v50 = 0;
    std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingResultHandler,quasar::result_handler::VoiceEditingResultHandlerConfig &,std::unique_ptr<quasar::result_handler::ResultHandler>,decltype(nullptr),std::shared_ptr<EARVoiceEditingClient> &>((uint64_t)__p, &v60, &v58, (uint64_t *)&v51);
    v37 = v51;
    *(_QWORD *)(a1 + 312) = v51;
    v51 = 0;
    v38 = v60;
    v60 = (uint64_t)v37;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = v51;
      v51 = 0;
      if (v39)
        (*(void (**)(quasar::SpeechRecognizer *))(*(_QWORD *)v39 + 8))(v39);
    }
    if (v57 < 0)
      operator delete(v56);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v55);
    v40 = v59;
    if (v59)
    {
      v41 = (unint64_t *)&v59->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::shared_ptr<quasar::result_handler::ResultHandler>::operator=[abi:ne180100]<quasar::result_handler::ResultHandler,std::default_delete<quasar::result_handler::ResultHandler>,void>((_QWORD *)(a1 + 296), &v60);
  if (*(_QWORD *)(a1 + 312))
  {
    v43 = v13[1];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN34EARContinuousListeningResultHelperC2EP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP17_EARResultContextP8NSStringS7_S7__block_invoke;
    block[3] = &unk_1E5D470A0;
    v49 = v13;
    dispatch_async(v43, block);

  }
  v44 = v60;
  v60 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);

  return a1;
}

void sub_1AD892924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void **v30;
  void *v31;
  uint64_t v32;
  id *v33;
  uint64_t v34;
  uint64_t v36;

  quasar::result_handler::VoiceEditingResultHandlerConfig::~VoiceEditingResultHandlerConfig(&__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v34 - 128);
  v36 = *(_QWORD *)(v34 - 112);
  *(_QWORD *)(v34 - 112) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v32);

  objc_destroyWeak(v33);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper(v30);

  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingRecoveryHandler,std::unique_ptr<quasar::result_handler::ResultHandler>,std::shared_ptr<EARVoiceEditingClient> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v6 = operator new();
  v7 = v6;
  v8 = *a1;
  *a1 = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v9;
  v18 = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::result_handler::VoiceEditingRecoveryHandler::VoiceEditingRecoveryHandler(v6, &v18, &v16);
  *a3 = v7;
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD892B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x1AF44D190](v12, 0x10B3C4028B74CACLL);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingResultHandler,quasar::result_handler::VoiceEditingResultHandlerConfig &,std::unique_ptr<quasar::result_handler::ResultHandler>,decltype(nullptr),std::shared_ptr<EARVoiceEditingClient> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;

  v8 = operator new();
  v9 = v8;
  v10 = *a2;
  *a2 = 0;
  v24 = 0;
  v25 = v10;
  v11 = (std::__shared_weak_count *)a3[1];
  v21 = *a3;
  v22 = v11;
  v23 = 0;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  quasar::result_handler::VoiceEditingResultHandler::VoiceEditingResultHandler(v8, a1, &v25, &v23, &v21);
  *a4 = v9;
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD892C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  v16 = a14;
  a14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  MEMORY[0x1AF44D190](v14, 0x10F3C40D9894FA6);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandlerConfig::~VoiceEditingResultHandlerConfig(void **this)
{
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 9));
}

_QWORD *std::shared_ptr<quasar::result_handler::ResultHandler>::operator=[abi:ne180100]<quasar::result_handler::ResultHandler,std::default_delete<quasar::result_handler::ResultHandler>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5CFFFC0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t ___ZN34EARContinuousListeningResultHelperC2EP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP17_EARResultContextP8NSStringS7_S7__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadParser");
}

uint64_t EAROutputResultHandler::EAROutputResultHandler(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  _OWORD v11[17];

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E5CFEE88;
  v7 = (id *)(a1 + 16);
  v8 = a4;
  v9 = a3;
  objc_initWeak(v7, a2);
  objc_initWeak((id *)(a1 + 24), v9);

  objc_initWeak((id *)(a1 + 32), v8);
  if (quasar::gLogLevel >= 5)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Created EAROutputResultHandler", 30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
  }
  return a1;
}

void sub_1AD892ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap *v9;
  id *v10;
  id *v11;
  id *v12;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::~EAROutputResultHandler(id *this)
{
  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void EAROutputResultHandler::handlePartial(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  dispatch_queue_t *WeakRetained;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void **v17;
  uint64_t v18;
  void **p_p;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  v6 = objc_loadWeakRetained((id *)(a1 + 24));
  v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        if (-[dispatch_queue_t enableVoiceCommands](WeakRetained, "enableVoiceCommands")
          && (-[dispatch_queue_t isLegacyVoiceCommandRequest](WeakRetained, "isLegacyVoiceCommandRequest") & 1) == 0)
        {
          v8 = *a3;
        }
        else
        {
          v8 = *a3;
          *(_DWORD *)(*a3 + 76) = 0;
        }
        RHPackageToEARPackage(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "nBestResults");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "firstObject");
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (quasar::gLogLevel >= 5)
        {
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"EAROutputResultHandler: partial: ", 33);
          objc_msgSend(v11, "tokens");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          transcriptFromTokens(v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if (v14)
          {
            objc_msgSend(v14, "ear_toString");
            v16 = HIBYTE(v25);
            v17 = (void **)__p;
            v18 = v24;
          }
          else
          {
            v18 = 0;
            v17 = 0;
            v16 = 0;
            __p = 0;
            v24 = 0;
            v25 = 0;
          }
          if ((v16 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = v17;
          if ((v16 & 0x80u) == 0)
            v20 = v16;
          else
            v20 = v18;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v20);
          if (SHIBYTE(v25) < 0)
            operator delete(__p);

          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
        }
        objc_msgSend(v7, "speechRecognizer:didRecognizePartialResult:", WeakRetained, v11);
        v21 = *(uint64_t **)(*a3 + 48);
        v22 = *(uint64_t **)(*a3 + 56);
        *(_QWORD *)&v27 = 0;
        v26 = 0uLL;
        if (v21 != v22)
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v26, *v21, v21[1], 0x6DB6DB6DB6DB6DB7 * ((v21[1] - *v21) >> 5));
        EAROutputResultHandler::addPartialResultToContext(a1, (uint64_t)&v26);
        __p = &v26;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

      }
    }
  }

}

void sub_1AD8931D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleCommandCandidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  dispatch_queue_t *WeakRetained;
  id v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void **v17;
  uint64_t v18;
  void **p_p;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  void **v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  void **v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  v6 = objc_loadWeakRetained((id *)(a1 + 24));
  v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        RHPackageToEARPackage(*a3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "hasNonEmptyToken"))
        {
          if (quasar::gLogLevel >= 5)
          {
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
            v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PreITN preceding: ", 71);
            objc_msgSend(v8, "preITNRecognition");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "potentialPrecedingRecognition");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "nBest");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "firstObject");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            transcriptFromTokens(v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = v14;
            if (v14)
            {
              objc_msgSend(v14, "ear_toString");
              v16 = HIBYTE(v59);
              v17 = (void **)__p;
              v18 = v58;
            }
            else
            {
              v18 = 0;
              v17 = 0;
              v16 = 0;
              __p = 0;
              v58 = 0;
              v59 = 0;
            }
            if ((v16 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = v17;
            if ((v16 & 0x80u) == 0)
              v20 = v16;
            else
              v20 = v18;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v20);
            if (SHIBYTE(v59) < 0)
              operator delete(__p);

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
            if (quasar::gLogLevel >= 5)
            {
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v60 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
              v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PreITN command: ", 69);
              objc_msgSend(v8, "preITNRecognition");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "potentialCommandRecognition");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "nBest");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "firstObject");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              transcriptFromTokens(v25);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = v26;
              if (v26)
              {
                objc_msgSend(v26, "ear_toString");
                v28 = HIBYTE(v59);
                v29 = (void **)__p;
                v30 = v58;
              }
              else
              {
                v30 = 0;
                v29 = 0;
                v28 = 0;
                __p = 0;
                v58 = 0;
                v59 = 0;
              }
              if ((v28 & 0x80u) == 0)
                v31 = &__p;
              else
                v31 = v29;
              if ((v28 & 0x80u) == 0)
                v32 = v28;
              else
                v32 = v30;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v31, v32);
              if (SHIBYTE(v59) < 0)
                operator delete(__p);

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
              if (quasar::gLogLevel >= 5)
              {
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                v69 = 0u;
                v70 = 0u;
                v67 = 0u;
                v68 = 0u;
                v65 = 0u;
                v66 = 0u;
                v63 = 0u;
                v64 = 0u;
                v61 = 0u;
                v62 = 0u;
                v60 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PostITN preceding: ", 72);
                objc_msgSend(v8, "recognition");
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v34, "potentialPrecedingRecognition");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v35, "nBest");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v36, "firstObject");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                transcriptFromTokens(v37);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v39 = v38;
                if (v38)
                {
                  objc_msgSend(v38, "ear_toString");
                  v40 = HIBYTE(v59);
                  v41 = (void **)__p;
                  v42 = v58;
                }
                else
                {
                  v42 = 0;
                  v41 = 0;
                  v40 = 0;
                  __p = 0;
                  v58 = 0;
                  v59 = 0;
                }
                if ((v40 & 0x80u) == 0)
                  v43 = &__p;
                else
                  v43 = v41;
                if ((v40 & 0x80u) == 0)
                  v44 = v40;
                else
                  v44 = v42;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v43, v44);
                if (SHIBYTE(v59) < 0)
                  operator delete(__p);

                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                if (quasar::gLogLevel >= 5)
                {
                  v75 = 0u;
                  v76 = 0u;
                  v73 = 0u;
                  v74 = 0u;
                  v71 = 0u;
                  v72 = 0u;
                  v69 = 0u;
                  v70 = 0u;
                  v67 = 0u;
                  v68 = 0u;
                  v65 = 0u;
                  v66 = 0u;
                  v63 = 0u;
                  v64 = 0u;
                  v61 = 0u;
                  v62 = 0u;
                  v60 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PostITN command: ", 70);
                  objc_msgSend(v8, "recognition");
                  v46 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v46, "potentialCommandRecognition");
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v47, "nBest");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v48, "firstObject");
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  transcriptFromTokens(v49);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  v51 = v50;
                  if (v50)
                  {
                    objc_msgSend(v50, "ear_toString");
                    v52 = HIBYTE(v59);
                    v53 = (void **)__p;
                    v54 = v58;
                  }
                  else
                  {
                    v54 = 0;
                    v53 = 0;
                    v52 = 0;
                    __p = 0;
                    v58 = 0;
                    v59 = 0;
                  }
                  if ((v52 & 0x80u) == 0)
                    v55 = &__p;
                  else
                    v55 = v53;
                  if ((v52 & 0x80u) == 0)
                    v56 = v52;
                  else
                    v56 = v54;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v55, v56);
                  if (SHIBYTE(v59) < 0)
                    operator delete(__p);

                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                  if (quasar::gLogLevel >= 5)
                  {
                    v75 = 0u;
                    v76 = 0u;
                    v73 = 0u;
                    v74 = 0u;
                    v71 = 0u;
                    v72 = 0u;
                    v69 = 0u;
                    v70 = 0u;
                    v67 = 0u;
                    v68 = 0u;
                    v65 = 0u;
                    v66 = 0u;
                    v63 = 0u;
                    v64 = 0u;
                    v61 = 0u;
                    v62 = 0u;
                    v60 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: didRecognizeVoiceCommandCandidatePackage", 64);
                    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                  }
                }
              }
            }
          }
          objc_msgSend(v7, "speechRecognizer:didRecognizeVoiceCommandCandidatePackage:", WeakRetained, v8);
        }

      }
    }
  }

}

void sub_1AD8937EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);

  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleFinalCandidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  dispatch_queue_t *WeakRetained;
  id v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void **v16;
  uint64_t v17;
  void **p_p;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  v6 = objc_loadWeakRetained((id *)(a1 + 24));
  v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        RHPackageToEARPackage(*a3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "hasNonEmptyToken"))
        {
          if (quasar::gLogLevel >= 5)
          {
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            v23 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
            v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"EAROutputResultHandler: finalResultCandidatePackage PreITN: ", 60);
            objc_msgSend(v8, "preITNRecognition");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "nBest");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "firstObject");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            transcriptFromTokens(v12);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = v13;
            if (v13)
            {
              objc_msgSend(v13, "ear_toString");
              v15 = HIBYTE(v22);
              v16 = (void **)__p;
              v17 = v21;
            }
            else
            {
              v17 = 0;
              v16 = 0;
              v15 = 0;
              __p = 0;
              v21 = 0;
              v22 = 0;
            }
            if ((v15 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = v16;
            if ((v15 & 0x80u) == 0)
              v19 = v15;
            else
              v19 = v17;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v19);
            if (SHIBYTE(v22) < 0)
              operator delete(__p);

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v23);
            if (quasar::gLogLevel >= 5)
            {
              v38 = 0u;
              v39 = 0u;
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v32 = 0u;
              v33 = 0u;
              v30 = 0u;
              v31 = 0u;
              v28 = 0u;
              v29 = 0u;
              v26 = 0u;
              v27 = 0u;
              v24 = 0u;
              v25 = 0u;
              v23 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"EAROutputResultHandler: didRecognizeFinalResultCandidatePackage", 63);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v23);
            }
          }
          objc_msgSend(v7, "speechRecognizer:didRecognizeFinalResultCandidatePackage:", WeakRetained, v8);
        }

      }
    }
  }

}

void sub_1AD893B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);

  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleFinal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v5;
  void *v6;
  dispatch_queue_t *WeakRetained;

  WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  v5 = objc_loadWeakRetained((id *)(a1 + 24));
  if (WeakRetained)
  {
    if (v5)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        RHPackageToEARPackage(*a3);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v6, "hasNonEmptyToken") & 1) != 0 || objc_msgSend(v6, "recognitionPaused"))
          objc_msgSend(v5, "speechRecognizer:didRecognizeFinalResultPackage:", WeakRetained, v6);

      }
    }
  }

}

void sub_1AD893C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::ResultHandler::updateNow(uint64_t this, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 <= *(_DWORD *)(this + 8))
    v2 = *(_DWORD *)(this + 8);
  *a2 = v2;
  *(_DWORD *)(this + 8) = v2;
  return this;
}

void std::__shared_ptr_emplace<EARVoiceEditingClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARVoiceEditingClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<EARVoiceEditingClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void EARVoiceEditingClient::~EARVoiceEditingClient(id *this)
{
  objc_destroyWeak(this + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  objc_destroyWeak(this + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void EARVoiceEditingClient::getLeftAndRightContext(id *this@<X0>, std::string *a2@<X8>)
{
  id WeakRetained;
  _QWORD v4[6];
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __n128 (*v8)(__n128 *, __n128 *);
  void (*v9)(uint64_t);
  void *__p[2];
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __n128 (*v15)(__n128 *, __n128 *);
  void (*v16)(uint64_t);
  __int128 v17;
  __int128 v18;

  v12 = 0;
  v13 = (__int128 *)&v12;
  v14 = 0x4812000000;
  v15 = __Block_byref_object_copy__1212;
  v16 = __Block_byref_object_dispose__1213;
  v17 = 0u;
  v18 = 0u;
  v5 = 0;
  v6 = (__int128 *)&v5;
  v7 = 0x4812000000;
  v8 = __Block_byref_object_copy__1212;
  v9 = __Block_byref_object_dispose__1213;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  WeakRetained = objc_loadWeakRetained(this + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN21EARVoiceEditingClient22getLeftAndRightContextEv_block_invoke;
  v4[3] = &unk_1E5D47298;
  v4[4] = &v12;
  v4[5] = &v5;
  objc_msgSend(WeakRetained, "getLeftAndRightContextWithCompletion:", v4);
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a2, v13 + 3, v6 + 3);

  _Block_object_dispose(&v5, 8);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[1]);
  _Block_object_dispose(&v12, 8);
  if (SHIBYTE(v18) < 0)
    operator delete(*((void **)&v17 + 1));
}

void sub_1AD893E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a15, 8);
  if (a26 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v27 - 104), 8);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getDisambiguationActive(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 1);
  v2 = objc_msgSend(WeakRetained, "disambiguationActive");

  return v2;
}

void sub_1AD893EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getFavorCommandSuppression(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 1);
  v2 = objc_msgSend(WeakRetained, "favorCommandSuppression");

  return v2;
}

void sub_1AD893F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getUndoEventAndReset(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 1);
  v2 = objc_msgSend(WeakRetained, "getUndoEventAndReset");

  return v2;
}

void sub_1AD893F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::setEnableFinalization(EARVoiceEditingClient *this, char a2)
{
  return quasar::ContinuousListeningResultHelper::setEnableFinalization(*((_QWORD *)this + 2), a2);
}

void ___ZN21EARVoiceEditingClient22getLeftAndRightContextEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    v11 = 0uLL;
    v12 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = v7 + 48;
  if (*(char *)(v7 + 71) < 0)
    operator delete(*(void **)v8);
  *(_OWORD *)v8 = v11;
  *(_QWORD *)(v8 + 16) = v12;
  if (v6)
  {
    objc_msgSend(v6, "ear_toString");
  }
  else
  {
    v11 = 0uLL;
    v12 = 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = v9 + 48;
  if (*(char *)(v9 + 71) < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = v11;
  *(_QWORD *)(v10 + 16) = v12;

}

void sub_1AD894058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1AD8940E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ResultStreamWrapper::replacementTokenName(uint64_t a1@<X0>, std::string *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  void *v6;
  std::string *v9;
  void *v10;
  void *v11;
  void *v12;
  std::string::size_type size;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  BOOL v19;
  std::string::size_type v20;
  std::string::size_type v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  std::string *p_p;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  char *v43;
  char v44;
  __int128 *v45;
  void *v46[2];
  std::string::size_type v47;
  std::string v48;
  std::string v49;
  std::string __p;
  __int128 v51;
  int64_t v52;
  char v53;
  char v54;

  v53 = a3;
  v6 = *(void **)(a1 + 48);
  if (!v6)
    goto LABEL_90;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a2->__r_.__value_.__l.__size_)
      goto LABEL_90;
    v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
      goto LABEL_90;
    v9 = a2;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "lowercaseString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v12, "ear_toString");
    if (a3)
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = (char)size;
      if ((size & 0x80u) != 0)
        size = a2->__r_.__value_.__l.__size_;
      if (size)
      {
        v15 = HIBYTE(v52);
        if (v52 < 0)
          v15 = *((_QWORD *)&v51 + 1);
        if (v15)
        {
          v16 = v14 >= 0 ? (unsigned __int8 *)a2 : (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
          v17 = (char)*v16;
          if ((v17 & 0x80000000) != 0
             ? __maskrune(v17, 0x8000uLL)
             : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) & 0x8000)
          {
            if (v52 >= 0)
              v43 = (char *)&v51;
            else
              v43 = (char *)v51;
            v44 = __toupper(*v43);
            if (v52 >= 0)
              v45 = &v51;
            else
              v45 = (__int128 *)v51;
            *(_BYTE *)v45 = v44;
          }
        }
      }
    }
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v51;
    a4->__r_.__value_.__r.__words[2] = v52;
    v52 = 0;
    v51 = 0uLL;
LABEL_84:

    return;
  }
  if (a3)
  {
    memset(&__p, 0, sizeof(__p));
    memset(&v49, 0, sizeof(v49));
    v19 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v20 & 0x80u) != 0)
      v20 = a2->__r_.__value_.__l.__size_;
    if (v20)
    {
      v21 = 0;
      v22 = MEMORY[0x1E0C80978];
      while (1)
      {
        v23 = v19 ? (unsigned __int8 *)a2->__r_.__value_.__r.__words[0] : (unsigned __int8 *)a2;
        v24 = (char)v23[v21];
        if ((v24 & 0x80000000) != 0 ? __maskrune(v24, 0x2000uLL) : *(_DWORD *)(v22 + 4 * v24 + 60) & 0x2000)
          break;
        ++v21;
        v19 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        v26 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((v26 & 0x80u) != 0)
          v26 = a2->__r_.__value_.__l.__size_;
        if (v26 <= v21)
          goto LABEL_39;
      }
      std::string::basic_string(&v48, a2, 0, v21, (std::allocator<char> *)&v54);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v48;
      std::string::basic_string(&v48, a2, v21, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v54);
      v49 = v48;
    }
LABEL_39:
    v27 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    if (v28)
    {
      v29 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v30 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v29 = a2->__r_.__value_.__l.__size_;
      if (v28 != v29)
      {
LABEL_55:
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = v28;
LABEL_59:
        v35 = *(void **)(a1 + 48);
        objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", p_p, v27);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "lowercaseString");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "objectForKey:", v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();

        if (v38)
        {
          objc_msgSend(v38, "ear_toString");
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = &v49;
          else
            v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          else
            v40 = v49.__r_.__value_.__l.__size_;
          v41 = std::string::append(&v48, (const std::string::value_type *)v39, v40);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v47 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)v46 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          ResultStreamWrapper::replacementTokenName(std::string const&,BOOL)::{lambda(std::string const&,std::string)#1}::operator()(&v53, (char *)a2, (char *)v46, (uint64_t)a4);
          if (SHIBYTE(v47) < 0)
            operator delete(v46[0]);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);

          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_84;
        }
        goto LABEL_86;
      }
      if (v30 >= 0)
        v31 = a2;
      else
        v31 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (memcmp(__p.__r_.__value_.__l.__data_, v31, __p.__r_.__value_.__l.__size_))
          goto LABEL_59;
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        v32 = &__p;
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
        {
          v32 = (std::string *)((char *)v32 + 1);
          v31 = (std::string *)((char *)v31 + 1);
          if (!--v33)
            goto LABEL_86;
        }
        goto LABEL_55;
      }
    }
LABEL_86:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_90:
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    a4->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
  }
}

void sub_1AD894650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper12writePartialERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE27PartialUtteranceStartMillisbiiRKNS1_INS1_IN6quasar5TokenENS5_ISE_EEEENS5_ISG_EEEESB_SB_bbRK14FormattingInfo_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  void *v16;
  void **v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  int v23;
  _BOOL4 v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void ***v35;
  unsigned int v36;
  uint64_t v37;
  _BOOL4 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[3];
  uint64_t v52;
  std::__shared_weak_count *v53;
  BOOL v54[2];
  void **v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
    {
      objc_msgSend(v3, "ear_toString");
    }
    else
    {
      v58 = 0;
      v59 = 0;
      v60 = 0;
    }
    v4 = *(void **)(a1 + 48);
    if (v4)
    {
      objc_msgSend(v4, "ear_toString");
    }
    else
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
    }
    LODWORD(v2) = objc_msgSend(v2, "isEnableAutoPunctuation:task:itnEnablingFlags:", &v58, &v55, objc_msgSend(*(id *)(a1 + 32), "itnEnablingFlags"));
    if (SHIBYTE(v57) < 0)
      operator delete(v55);
    if (SHIBYTE(v60) < 0)
      operator delete(v58);
  }
  *(_WORD *)v54 = 0;
  quasar::DoublePartialLogic::handlePartial(*(_BYTE ***)(a1 + 72), (int)v2, *(unsigned __int8 *)(a1 + 172), *(unsigned __int8 *)(a1 + 173), &v54[1], v54);
  if (!v54[1])
  {
    v5 = *(void **)(a1 + 56);
    if (v5)
    {
      objc_msgSend(v5, "continuousListeningResultHelper");
      v7 = v58;
      v6 = v59;
      if (!v59)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v7)
        {
LABEL_19:
          v58 = 0;
          v59 = 0;
          v60 = 0;
          std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v58, *(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
          v10 = v58;
          v11 = (uint64_t *)v59;
          while (v10 != v11)
          {
            v12 = (_DWORD *)*v10;
            v13 = (_DWORD *)v10[1];
            if ((_DWORD *)*v10 != v13)
            {
              v14 = 0;
              do
              {
                if (v12[9])
                  v15 = v12[8] == 0;
                else
                  v15 = 1;
                if (v15)
                {
                  v12[7] = v14;
                  v14 += 11;
                  v12[8] = v14;
                  v12[9] = v14;
                }
                v12 += 56;
              }
              while (v12 != v13);
            }
            v10 += 3;
          }
          v16 = *(void **)(a1 + 56);
          if (v16)
          {
            objc_msgSend(v16, "continuousListeningResultHelper");
            v17 = v55;
          }
          else
          {
            v17 = 0;
            v55 = 0;
            v56 = 0;
          }
          v36 = *(_DWORD *)(a1 + 160);
          v37 = *(unsigned int *)(a1 + 164);
          v38 = v54[0];
          quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden(*(_QWORD **)(a1 + 72), &v52);
          quasar::ContinuousListeningResultHelper::writePartial((uint64_t)v17, &v58, v36, v37, (uint64_t *)(a1 + 112), a1 + 136, v38, &v52);
          v39 = v53;
          if (v53)
          {
            v40 = (unint64_t *)&v53->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v42 = v56;
          if (v56)
          {
            v43 = (unint64_t *)&v56->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v55 = (void **)&v58;
          v35 = &v55;
LABEL_62:
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v35);
          return;
        }
      }
      else
      {
LABEL_18:
        if (v7)
          goto LABEL_19;
      }
    }
    memset(v51, 0, sizeof(v51));
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v51, *(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
    v18 = *(void **)(a1 + 32);
    v19 = *(void **)(a1 + 40);
    v49 = 0;
    v50 = 0;
    v20 = *(_DWORD *)(a1 + 168);
    v21 = *(void **)(a1 + 48);
    v22 = *(void **)(a1 + 56);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v23 = *(unsigned __int8 *)(a1 + 174);
    v24 = v54[0];
    v25 = *(void **)(a1 + 64);
    quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden(*(_QWORD **)(a1 + 72), &v47);
    v45 = 0;
    v46 = 0;
    ResultStreamWrapper::writePartialToResultStream((uint64_t)v51, v18, v25, v21, v19, a1 + 112, 0, 0, 0, 1, &v49, v20, v22, (uint64_t)&v58, v23 != 0, a1 + 136, v24, &v47, 0,
      &v45);
    v26 = v46;
    if (v46)
    {
      v27 = (unint64_t *)&v46->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v48;
    if (v48)
    {
      v30 = (unint64_t *)&v48->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v55 = (void **)&v58;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v55);
    v32 = v50;
    if (v50)
    {
      v33 = (unint64_t *)&v50->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v58 = v51;
    v35 = (void ***)&v58;
    goto LABEL_62;
  }
}

void sub_1AD894B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v1 - 112;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 136));
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  a1[9] = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  a1[10] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 11, *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 14, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 5));
  a1[17] = 0;
  a1[18] = 0;
  v7 = a1 + 17;
  v7[2] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v7, *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 5));
}

void sub_1AD894CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE(void **a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v5;

  v1 = (uint64_t)(a1 + 9);
  v2 = a1 + 11;
  v3 = a1 + 14;
  v5 = a1 + 17;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = v3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = v2;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
}

__n128 ResultStreamWrapper::replacementTokenName(std::string const&,BOOL)::{lambda(std::string const&,std::string)#1}::operator()@<Q0>(_BYTE *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  char *v8;
  unsigned int v9;
  char *v10;
  char v11;
  _BYTE *v12;
  __n128 result;

  if (*a1)
  {
    v6 = a2[23];
    v7 = (char)v6;
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      if (a3[23] < 0)
      {
        if (!*((_QWORD *)a3 + 1))
          goto LABEL_21;
      }
      else if (!a3[23])
      {
        goto LABEL_21;
      }
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = *(char **)a2;
      v9 = *v8;
      if ((v9 & 0x80000000) != 0)
      {
        if (!__maskrune(v9, 0x8000uLL))
          goto LABEL_21;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x8000) == 0)
      {
        goto LABEL_21;
      }
      v10 = a3;
      if (a3[23] < 0)
        v10 = *(char **)a3;
      v11 = __toupper(*v10);
      v12 = a3;
      if (a3[23] < 0)
        v12 = *(_BYTE **)a3;
      *v12 = v11;
    }
  }
LABEL_21:
  result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

void ___ZN19ResultStreamWrapper17writeFinalChoicesERKN6quasar11RecogResultENS0_21RecogResultStreamBase11RecogStatusE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  double v13;
  void *v14;
  void *v15;
  unsigned int v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  unsigned __int8 v27;
  uint64_t v28;
  char v29;
  double v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void **v40[3];
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  void ***v46;

  quasar::DoublePartialLogic::handleFinal(*(_BYTE ***)(a1 + 72));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "continuousListeningResultHelper");
    if (!v44)
      goto LABEL_6;
    p_shared_owners = &v44->__shared_owners_;
    do
      v4 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v4 - 1, (unint64_t *)p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if (v43)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if (v43)
      {
LABEL_7:
        v5 = *(void **)(a1 + 32);
        if (v5)
        {
          objc_msgSend(v5, "continuousListeningResultHelper");
          v5 = v43;
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
        quasar::ContinuousListeningResultHelper::writeFinal((uint64_t)v5, a1 + 88, a1 + 112, *(unsigned __int8 *)(a1 + 488), *(_DWORD *)(a1 + 472), *(_DWORD *)(a1 + 476), (uint64_t *)(a1 + 136), *(_BYTE *)(a1 + 489), a1 + 160, *(_WORD *)(a1 + 490), HIBYTE(*(_WORD *)(a1 + 490)));
        if (v44)
        {
          v6 = &v44->__shared_owners_;
          do
            v7 = __ldaxr((unint64_t *)v6);
          while (__stlxr(v7 - 1, (unint64_t *)v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        return;
      }
    }
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v8 = (uint64_t **)(a1 + 88);
  v9 = a1 + 112;
  v10 = *(unsigned __int8 *)(a1 + 488);
  v11 = a1 + 184;
  v12 = (unsigned __int8 *)(a1 + 328);
  v13 = *(double *)(a1 + 384);
  v14 = *(void **)(a1 + 48);
  v15 = *(void **)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 472);
  v17 = *(_DWORD *)(a1 + 476);
  v18 = *(void **)(a1 + 64);
  v20 = *(void **)(a1 + 32);
  v19 = *(void **)(a1 + 40);
  v21 = *(_DWORD *)(a1 + 480);
  v22 = a1 + 136;
  v41 = 0;
  v42 = 0;
  memset(v40, 0, sizeof(v40));
  v23 = a1 + 392;
  v24 = a1 + 416;
  v25 = (_QWORD *)(a1 + 440);
  v26 = *(_BYTE *)(a1 + 492);
  v27 = *(_BYTE *)(a1 + 489);
  v28 = a1 + 160;
  v29 = *(_BYTE *)(a1 + 490);
  v30 = *(double *)(a1 + 464);
  v31 = *(_DWORD *)(a1 + 484);
  v38 = 0;
  v39 = 0;
  ResultStreamWrapper::writeFinalChoicesToResultStream(v8, v9, v10, v19, v14, v11, v12, v15, v13, v30, v16, v17, v18, v20, v21, 0, v22, 0, &v41,
    (uint64_t)v40,
    (uint64_t *)&v43,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v31,
    &v38);
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v46 = v40;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v40[0] = &v43;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v40);
}

void sub_1AD8950B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c39_ZTSNSt3__16vectorIdNS_9allocatorIdEEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE160c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE184c29_ZTSN6quasar14AudioAnalyticsE328c35_ZTSN6quasar20LatnnMitigatorResultE392c62_ZTSNSt3__16vectorIN6quasar11ItnOverrideENS_9allocatorIS2_EEEE416c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE440c123_ZTSNSt3__16vectorINS_3setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS7_EENS5_IS7_EEEENS5_ISB_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)(a1 + 88), *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 112), *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 5));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)(a1 + 160), *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 168), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 5));
  quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)(a1 + 184), (const quasar::AudioAnalytics *)(a2 + 184));
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  if (*(char *)(a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)(a2 + 336), *(_QWORD *)(a2 + 344));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v7;
  }
  v8 = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v8;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>((std::string *)(a1 + 392), *(__int128 **)(a2 + 392), *(__int128 **)(a2 + 400), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 3));
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 416), (const void ***)(a2 + 416));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  return std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)(a1 + 440), *(const void ****)(a2 + 440), *(const void ****)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 3));
}

void sub_1AD8952E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  quasar::AudioAnalytics *v12;
  void *v14;

  quasar::AudioAnalytics::~AudioAnalytics(v12);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 120) = v14;
    operator delete(v14);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void sub_1AD895390()
{
  JUMPOUT(0x1AD895380);
}

uint64_t __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c39_ZTSNSt3__16vectorIdNS_9allocatorIdEEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE160c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE184c29_ZTSN6quasar14AudioAnalyticsE328c35_ZTSN6quasar20LatnnMitigatorResultE392c62_ZTSNSt3__16vectorIN6quasar11ItnOverrideENS_9allocatorIS2_EEEE416c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE440c123_ZTSNSt3__16vectorINS_3setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS7_EENS5_IS7_EEEENS5_ISB_EEEE(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v2 = (void **)(a1 + 392);
  v3 = a1 + 416;
  v10 = (void **)(a1 + 440);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__tree<std::string>::destroy(v3, *(char **)(a1 + 424));
  v10 = v2;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  v4 = *(void **)(a1 + 280);
  if (v4)
  {
    *(_QWORD *)(a1 + 288) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 248);
  if (v5)
  {
    *(_QWORD *)(a1 + 256) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 216);
  if (v6)
  {
    *(_QWORD *)(a1 + 224) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 184);
  if (v7)
  {
    *(_QWORD *)(a1 + 192) = v7;
    operator delete(v7);
  }
  v10 = (void **)(a1 + 160);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 136);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  v8 = *(void **)(a1 + 112);
  if (v8)
  {
    *(_QWORD *)(a1 + 120) = v8;
    operator delete(v8);
  }
  v10 = (void **)(a1 + 88);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 72);
}

quasar::AudioAnalytics *quasar::AudioAnalytics::AudioAnalytics(quasar::AudioAnalytics *this, const quasar::AudioAnalytics *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  v5 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 8, *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  v6 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = v6;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  return this;
}

void sub_1AD89555C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD89560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::ItnOverride>::construct[abi:ne180100]<quasar::ItnOverride,quasar::ItnOverride&>(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD8956C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::ItnOverride>::construct[abi:ne180100]<quasar::ItnOverride,quasar::ItnOverride&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1AD895780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t *std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(uint64_t *result, const void ***a2, const void ***a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1AD89589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, uint64_t *a4)
{
  uint64_t *v4;
  const void ***v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD895948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 24;
      std::__tree<std::string>::destroy(v1 - 24, *(char **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void EARContinuousListeningResultHelper::reportHighResolutionRecognitionProgress(EARContinuousListeningResultHelper *this, int a2)
{
  NSObject **WeakRetained;
  NSObject **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD block[5];
  std::__shared_weak_count *v19;
  int v20;

  if (*((_QWORD *)this + 37) && *((_DWORD *)this + 80) + 240 <= a2)
  {
    *((_DWORD *)this + 80) = a2;
    WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
    v5 = WeakRetained;
    v6 = *((_QWORD *)this + 37);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (WeakRetained)
    {
      v10 = WeakRetained[1];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3321888768;
      block[2] = ___ZN34EARContinuousListeningResultHelper39reportHighResolutionRecognitionProgressEi_block_invoke;
      block[3] = &__block_descriptor_52_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
      block[4] = v6;
      v19 = v7;
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v20 = a2;
      dispatch_async(v10, block);
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    if (v7)
    {
      v16 = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

  }
}

uint64_t ___ZN34EARContinuousListeningResultHelper39reportHighResolutionRecognitionProgressEi_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

uint64_t __copy_helper_block_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 32);
}

void EARContinuousListeningResultHelper::reportPause(EARContinuousListeningResultHelper *this)
{
  NSObject **WeakRetained;
  NSObject **v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  std::__shared_weak_count *v17;

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
  v3 = WeakRetained;
  v4 = *((_QWORD *)this + 37);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (WeakRetained && v4)
  {
    v8 = WeakRetained[1];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3321888768;
    v16[2] = ___ZN34EARContinuousListeningResultHelper11reportPauseEv_block_invoke;
    v16[3] = &__block_descriptor_48_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
    v16[4] = v4;
    v17 = v5;
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    dispatch_async(v8, v16);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

}

uint64_t ___ZN34EARContinuousListeningResultHelper11reportPauseEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
}

void EARContinuousListeningResultHelper::reportResume(EARContinuousListeningResultHelper *this)
{
  NSObject **WeakRetained;
  NSObject **v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  std::__shared_weak_count *v17;

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
  v3 = WeakRetained;
  v4 = *((_QWORD *)this + 37);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (WeakRetained && v4)
  {
    v8 = WeakRetained[1];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3321888768;
    v16[2] = ___ZN34EARContinuousListeningResultHelper12reportResumeEv_block_invoke;
    v16[3] = &__block_descriptor_48_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
    v16[4] = v4;
    v17 = v5;
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    dispatch_async(v8, v16);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

}

uint64_t ___ZN34EARContinuousListeningResultHelper12reportResumeEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

id EARHelpers::VectorToArray<unsigned int>(unsigned int **a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  v6 = (void *)objc_msgSend(v2, "copy");

  return v6;
}

void sub_1AD895E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1304(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1305(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::pop_front(int64x2_t *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x27uLL)) + 104 * (a1[2].i64[0] % 0x27uLL);
  kaldi::CuMatrix<float>::~CuMatrix(v2 + 48);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<quasar::SpeakerCodeTraining::AlignedData>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void ___ZN19ResultStreamWrapper17writeTrainingDataERNSt3__15dequeIN6quasar19SpeakerCodeTraining11AlignedDataENS0_9allocatorIS4_EEEEl_block_invoke(uint64_t a1)
{
  EARLogger *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  EARLogger *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  EARLogger *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t ProcessedSamples;
  uint64_t TrainingOffset;
  uint64_t RecognitionOffset;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned int NnetVersion;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint8_t buf[4];
  _BYTE v46[18];
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  quasar::SpeakerCodeTraining::load(*(quasar::SpeakerCodeTraining **)(a1 + 64));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  v4 = v3 + 48;
  if (v5 == v6
    || (v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v8 = *(_QWORD *)(v7 + 48), v9 = *(_QWORD *)(v7 + 56), v8 == v9)
    || v6 - v5 != v9 - v8)
  {
    EARLogger::QuasarOSLogger(v2);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      v39 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 56)
                     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48)) >> 4);
      v40 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 56)
                     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48)) >> 4);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v46 = v39;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)&v46[10] = v40;
      _os_log_impl(&dword_1AD756000, v38, OS_LOG_TYPE_INFO, "Features or labels are invalid, not feeding data for training, feature size: %zu, label size: %zu", buf, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setTrainingSpeakerCode:inferenceSpeakerCode:accumulatedGradient:nnetVersion:numFrames:trainingOffset:recognitionOffset:language:", 0, 0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    quasar::SpeakerCodeTraining::batchInput(*(int32x2_t **)(a1 + 64), v4);
    v10 = (EARLogger *)quasar::SpeakerCodeTraining::batchInput(*(int32x2_t **)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(_QWORD *)(v11 + 48);
    v12 = *(_QWORD *)(v11 + 56);
    EARLogger::QuasarOSLogger(v10);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v46 = (v12 - v13) / 48;
      _os_log_impl(&dword_1AD756000, v14, OS_LOG_TYPE_INFO, "Training starts, total samples: %zu", buf, 0xCu);
    }

    if (v12 != v13)
    {
      v16 = 0;
      if ((unint64_t)((v12 - v13) / 48) <= 1)
        v17 = 1;
      else
        v17 = (v12 - v13) / 48;
      do
      {
        v15 = (EARLogger *)quasar::SpeakerCodeTraining::train(*(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) + v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) + v16);
        v16 += 48;
        --v17;
      }
      while (v17);
    }
    EARLogger::QuasarOSLogger(v15);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      ProcessedSamples = quasar::SpeakerCodeTraining::getProcessedSamples(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      TrainingOffset = quasar::SpeakerCodeTraining::getTrainingOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      RecognitionOffset = quasar::SpeakerCodeTraining::getRecognitionOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)v46 = ProcessedSamples;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)&v46[10] = TrainingOffset;
      v47 = 2048;
      v48 = RecognitionOffset;
      _os_log_impl(&dword_1AD756000, v18, OS_LOG_TYPE_INFO, "Training finishes, writing updated speaker code out, processed samples: %zu, training offset: %zu, recognition offset: %zu", buf, 0x20u);
    }

    v22 = *(void **)(a1 + 32);
    quasar::SpeakerCodeTraining::getSpeakerCode(*(_QWORD *)(a1 + 64), buf);
    EARHelpers::serialize((uint64_t *)buf);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    quasar::SpeakerCodeTraining::getInferenceSpeakerCode(*(quasar::SpeakerCodeTraining **)(a1 + 64), &v43);
    EARHelpers::serialize(&v43);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    quasar::SpeakerCodeTraining::getAccumulatedGradient(*(_QWORD *)(a1 + 64), &v41);
    EARHelpers::serialize(&v41);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    NnetVersion = quasar::SpeakerCodeTraining::getNnetVersion(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    v27 = quasar::SpeakerCodeTraining::getProcessedSamples(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    v28 = quasar::SpeakerCodeTraining::getTrainingOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    objc_msgSend(v22, "setTrainingSpeakerCode:inferenceSpeakerCode:accumulatedGradient:nnetVersion:numFrames:trainingOffset:recognitionOffset:language:", v23, v24, v25, NnetVersion, v27, v28, quasar::SpeakerCodeTraining::getRecognitionOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64)), *(_QWORD *)(a1 + 40));

    v29 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    v32 = v44;
    if (v44)
    {
      v33 = (unint64_t *)&v44->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }

    v35 = *(std::__shared_weak_count **)&v46[4];
    if (*(_QWORD *)&v46[4])
    {
      v36 = (unint64_t *)(*(_QWORD *)&v46[4] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
}

void sub_1AD896358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_64c56_ZTSNSt3__110shared_ptrIN6quasar19SpeakerCodeTrainingEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c56_ZTSNSt3__110shared_ptrIN6quasar19SpeakerCodeTrainingEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 64);
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD8964E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x27)
    a2 = 1;
  if (v2 < 0x4E)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 39;
  }
  return v4 ^ 1u;
}

void std::__assoc_state<quasar::Location>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__assoc_state<quasar::Location>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *std::promise<quasar::Location>::~promise(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const std::error_category *v4;
  unint64_t *v5;
  unint64_t v6;
  std::logic_error v8[2];
  std::exception_ptr v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v9.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v9);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v4 = std::future_category();
        MEMORY[0x1AF44CA34](v8, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v8);
      }
    }
    v5 = (unint64_t *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  std::logic_error *exception;
  std::logic_error *v3;

  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE4F88] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x1E0DE4E30], (void (*)(void *))MEMORY[0x1E0DE4540]);
}

void sub_1AD896730(void *a1)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x1AF44CA34](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E30], (void (*)(void *))MEMORY[0x1E0DE4540]);
}

void sub_1AD896798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<quasar::Location>::set_value<quasar::Location>(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1AD896838(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,std::shared_ptr<quasar::RecogResultStreamBase> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x338uLL);
  result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,std::allocator<quasar::RunAsyncParams>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD896890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,std::allocator<quasar::RunAsyncParams>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42B48;
  a1[1] = 0;
  quasar::RunAsyncParams::RunAsyncParams(a1 + 3);
  return a1;
}

void sub_1AD8968DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::__on_zero_shared(uint64_t a1)
{
  quasar::RunAsyncParams::~RunAsyncParams((quasar::RunAsyncParams *)(a1 + 24));
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_1AD8969A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ResultStreamWrapper,std::allocator<ResultStreamWrapper>,_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},void>@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, uint64_t a6@<X6>, void **a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},std::allocator<ResultStreamWrapper>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1AD896A40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},std::allocator<ResultStreamWrapper>,0>(_QWORD *a1, void **a2, void **a3, void **a4, void **a5, void **a6, uint64_t a7, void **a8)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40A40;
  a1[1] = 0;
  ResultStreamWrapper::ResultStreamWrapper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0, *a8);
  return a1;
}

void sub_1AD896AA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD896B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,decltype(nullptr),void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x338uLL);
  result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),std::allocator<quasar::RunAsyncParams>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD896B74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),std::allocator<quasar::RunAsyncParams>,0>(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_1E5D42B48;
  a1[1] = 0;
  std::allocator<quasar::RunAsyncParams>::construct[abi:ne180100]<quasar::RunAsyncParams,decltype(nullptr)>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1AD896BD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RunAsyncParams>::construct[abi:ne180100]<quasar::RunAsyncParams,decltype(nullptr)>(uint64_t a1, uint64_t a2)
{
  quasar::RunAsyncParams::RunAsyncParams(a2);
}

void sub_1AD896C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3D1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3D1A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  return quasar::endsWith(a2, *(uint64_t **)(a1 + 8));
}

uint64_t std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
  }
  return v5;
}

void sub_1AD896EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<BOOL>::__emplace_unique_key_args<BOOL,BOOL>(uint64_t **a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void TTokenizer::TTokenizer(TTokenizer *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t i;
  int v10;
  TTokenizerParamManager *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  TDataManager **v15;
  int IntVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ActiveConfigHandle;
  uint64_t v21;
  __int32 *v22;
  std::wstring *v23;
  TClitics *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *exception;
  const char *v29;
  _QWORD *v30;
  void *__p[2];
  char v32;
  std::wstring v33;
  __int128 v34;
  char v35;
  uint64_t v36[3];
  void *v37[2];
  uint64_t v38;

  *((_DWORD *)this + 21) = a5;
  *((_DWORD *)this + 22) = a5;
  v8 = 1;
  for (i = 23; i != 646; ++i)
  {
    v10 = 1812433253 * (a5 ^ (a5 >> 30));
    a5 = v10 + v8;
    *((_DWORD *)this + i) = i + v10 - 22;
    ++v8;
  }
  *((_QWORD *)this + 323) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v11 = (TTokenizerParamManager *)operator new();
  TTokenizerParamManager::TTokenizerParamManager(v11, (TLocaleInfo *)(*((_QWORD *)this + 3) + 224));
  *((_QWORD *)this + 1) = v11;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 20) = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v12 = *((_QWORD *)v11 + 16);
  *((_QWORD *)v11 + 16) = 1;
  v13 = *((_QWORD *)this + 3);
  v14 = (const char *)(v13 + 56);
  if (*(char *)(v13 + 79) < 0)
    v14 = *(const char **)v14;
  v15 = (TDataManager **)TInputModel::TInputModel((TInputModel *)v36, a2, a3, 0, v14);
  IntVar = TInputModel::getIntVar(v15, "TknVersion", 1);
  if (IntVar != 1)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v17, IntVar, "TknVersion", 1, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(&v34, (__int128 *)__p);
    *(_QWORD *)&v34 = &unk_1E5D16668;
    if (v35 >= 0)
      v27 = (char *)&v34 + 8;
    else
      v27 = (const char *)*((_QWORD *)&v34 + 1);
    conditionalAssert(v27, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/tokenizer.cpp", 139);
    TException::~TException((std::exception *)&v34);
    if (v32 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    TException::TException(exception, &v34);
    *exception = &unk_1E5D16668;
  }
  if (!*((_QWORD *)this + 2))
  {
    v18 = operator new();
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)v18 = v18 + 8;
    *(_QWORD *)this = v18;
    TDataSaver::load((uint64_t **)v18, a2, "TknGrammar", 0);
    TDataSaver::load(*(uint64_t ***)this, a2, "TknDecompound", 0);
    TDataSaver::load(*(uint64_t ***)this, a2, "TknMungeMap", 0);
    TDataSaver::load(*(uint64_t ***)this, a2, "TknRespellMap", 0);
    TDataSaver::load(*(uint64_t ***)this, a2, "TknPattern", 0);
  }
  if (TInputModel::isVar((TInputModel *)v36, "TknParam"))
    TInputModel::getStringVar(v36, (uint64_t)"TknParam", (uint64_t)v37);
  TTokenizerParamManager::initializeParamConfigs(*((TTokenizerParamManager **)this + 1));
  v19 = *((_QWORD *)this + 1);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v19 + 5864));
  if (*(_BYTE *)(v19 + TParam::getValidConfig((TParam *)(v19 + 5864), ActiveConfigHandle) + 6016))
  {
    tknPrintf("Error: pron predictor is not supported during decompounding in Tennessee since pronunciations were not ported over (see rdar://91574959).\n", v21);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(&v34, (__int128 *)__p);
    *(_QWORD *)&v34 = &unk_1E5D16668;
    if (v35 >= 0)
      v29 = (char *)&v34 + 8;
    else
      v29 = (const char *)*((_QWORD *)&v34 + 1);
    conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/tokenizer.cpp", 190);
    TException::~TException((std::exception *)&v34);
    if (v32 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    TException::TException(v30, &v34);
    *v30 = &unk_1E5D16668;
  }
  v22 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 1) + 10736));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, v22);
  std::wstring::resize(&v33, *(_QWORD *)(*((_QWORD *)this + 3) + 368), 48);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v33;
  else
    v23 = (std::wstring *)v33.__r_.__value_.__r.__words[0];
  TStringParam::setOriginal((_QWORD *)(*((_QWORD *)this + 1) + 10736), *(_QWORD *)(*((_QWORD *)this + 1) + 128), (__int32 *)v23);
  if (TInputModel::isVar((TInputModel *)v36, "TknGrammar"))
    TInputModel::getStringVar(v36, (uint64_t)"TknGrammar", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknDecompound"))
    TInputModel::getStringVar(v36, (uint64_t)"TknDecompound", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknMungeMap"))
    TInputModel::getStringVar(v36, (uint64_t)"TknMungeMap", (uint64_t)v37);
  if (TInputModel::isVar((TInputModel *)v36, "TknRespellMap"))
    TInputModel::getStringVar(v36, (uint64_t)"TknRespellMap", (uint64_t)v37);
  v24 = (TClitics *)operator new();
  TClitics::TClitics(v24, *((TLexicon **)this + 3), *((TTokenizerParamManager **)this + 1));
  *((_QWORD *)this + 5) = v24;
  v25 = operator new();
  TNewWords::TNewWords(v25, *((_QWORD *)this + 1));
  *((_QWORD *)this + 6) = v25;
  TLexicon::cleanCache(*((TLexicon **)this + 3));
  v26 = *((_QWORD *)this + 2);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  *((_QWORD *)v11 + 16) = v12;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
}

void sub_1AD897DB0(_Unwind_Exception *a1, int a2)
{
  TTokenizer *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (SLOBYTE(STACK[0x2CF]) < 0)
  {
    operator delete((void *)STACK[0x2B8]);
    if ((v6 & 1) == 0)
    {
LABEL_6:
      *(_QWORD *)(v3 + 128) = v5;
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        TTokenizer::freeMemory(v2);
        __cxa_rethrow();
      }
      if (*(char *)(v7 - 89) < 0)
        operator delete(*(void **)(v7 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v4);
  goto LABEL_6;
}

void sub_1AD898020()
{
  __cxa_end_catch();
  JUMPOUT(0x1AD898028);
}

uint64_t TIntParam::setOriginal(TIntParam *this, uint64_t a2, int a3)
{
  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3)
    return 1;
  *((_DWORD *)this + a2 + 40) = a3;
  *((_QWORD *)this + 14) |= 1 << (a2 + 9);
  TParam::notifyChange((uint64_t)this, a2);
  return 0;
}

void TInputStream::~TInputStream(TInputStream *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

double TTokenizer::freeMemory(TTokenizer *this)
{
  TDecompounder *v2;
  _OWORD *v3;
  TClitics *v4;
  quasar::Bitmap *v5;
  TPatternManager *v6;
  TRespellManager *v7;
  TMungeMapManager *v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = (_OWORD *)((char *)this + 32);
  v2 = (TDecompounder *)*((_QWORD *)this + 4);
  if (v2)
  {
    TDecompounder::~TDecompounder(v2);
    MEMORY[0x1AF44D190]();
  }
  v4 = (TClitics *)*((_QWORD *)this + 5);
  if (v4)
  {
    TClitics::~TClitics(v4);
    MEMORY[0x1AF44D190]();
  }
  v5 = (quasar::Bitmap *)*((_QWORD *)this + 6);
  if (v5)
  {
    quasar::Bitmap::~Bitmap(v5);
    MEMORY[0x1AF44D190]();
  }
  v6 = (TPatternManager *)*((_QWORD *)this + 7);
  if (v6)
  {
    TPatternManager::~TPatternManager(v6);
    MEMORY[0x1AF44D190]();
  }
  v7 = (TRespellManager *)*((_QWORD *)this + 8);
  if (v7)
  {
    TRespellManager::~TRespellManager(v7);
    MEMORY[0x1AF44D190]();
  }
  v8 = (TMungeMapManager *)*((_QWORD *)this + 9);
  if (v8)
  {
    TMungeMapManager::~TMungeMapManager(v8);
    MEMORY[0x1AF44D190]();
  }
  if (*(_QWORD *)this)
  {
    TDataSaver::~TDataSaver(*(TDataSaver **)this);
    MEMORY[0x1AF44D190]();
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 2);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  return result;
}

void TTokenizer::~TTokenizer(TTokenizer *this)
{
  TTokenizer::freeMemory(this);
}

uint64_t TTokenizer::tokenize(uint64_t a1, char *a2, const char *a3, char *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t ActiveConfigHandle;
  unsigned int v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t PreviousSegment;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ValidConfig;
  uint64_t j;
  char *v35;
  uint64_t Segment;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int *v41;
  TAllocator *v43;
  int *v44;
  TPatternManager *v45;
  TRespellManager *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t OutEdge;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  int **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int **v76;
  int *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  TPatternManager *v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  _QWORD *v103;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char v109;
  int v110[2];
  __int128 v111;
  _BYTE v112[1024];
  char v113;
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[14];
  int v119[2];
  __int128 v120;
  _BYTE v121[1024];
  char v122;
  _QWORD v123[4];

  v7 = a5;
  v10 = *(_QWORD *)(a1 + 8);
  v99 = *(_QWORD *)(v10 + 128);
  v100 = v10;
  *(_QWORD *)(v10 + 128) = a5;
  v11 = *(_QWORD *)(a1 + 24) + 224;
  v123[0] = &off_1E5D166C0;
  v123[1] = v11;
  v123[2] = 0;
  TResGraphMaker::clear((uint64_t)v123);
  if (a6)
    v12 = a6;
  else
    v12 = v123;
  v103 = v12;
  v13 = *(_QWORD *)(a1 + 8);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 136));
  if (*(_BYTE *)(v13 + TParam::getValidConfig((TParam *)(v13 + 136), ActiveConfigHandle) + 288))
  {
    v15 = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 88) = v15;
    v16 = 1;
    for (i = 23; i != 646; ++i)
    {
      v18 = 1812433253 * (v15 ^ (v15 >> 30));
      v15 = v18 + v16;
      *(_DWORD *)(a1 + 4 * i) = i + v18 - 22;
      ++v16;
    }
    *(_QWORD *)(a1 + 2584) = 0;
  }
  *(_QWORD *)v119 = v121;
  v120 = xmmword_1AE1418C0;
  v122 = 1;
  if (a3 && *a3)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 8) + 3744));
    TSegmenter::TSegmenter(v110, a3, v19 + 224, v20);
    v21 = *(_QWORD *)(a1 + 8);
    v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 13952));
    *(_QWORD *)&v111 = *(int *)(v21 + 4 * TParam::getValidConfig((TParam *)(v21 + 13952), v22) + 14112);
    (*(void (**)(int *))(*(_QWORD *)v110 + 16))(v110);
    v23 = strlen(a3);
    PreviousSegment = TSegmenter::getPreviousSegment((TSegmenter *)v110, (char *)&a3[v23]);
    if (*(_DWORD *)(PreviousSegment + 24) != 5)
      TBuffer<wchar_t>::assign((uint64_t)v119, *(int **)PreviousSegment);
    TSegmenter::~TSegmenter((TSegmenter *)v110);
  }
  v105 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 88);
  v25 = a2;
  v102 = v7;
  do
  {
    v26 = *(_QWORD *)(a1 + 24);
    v27 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 8) + 3744));
    TSegmenter::TSegmenter(v118, v25, v26 + 224, v27);
    v28 = *(_QWORD *)(a1 + 8);
    v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 13952));
    v118[1] = *(int *)(v28 + 4 * TParam::getValidConfig((TParam *)(v28 + 13952), v29) + 14112);
    (*(void (**)(_QWORD *))(v118[0] + 16))(v118);
    v30 = v25;
    do
    {
      if (!*v30)
        break;
      v30 = *(char **)(TSegmenter::getSegment((TSegmenter *)v118, v30) + 8);
    }
    while (v30 - v25 <= 2500);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 632));
    ValidConfig = TParam::getValidConfig((TParam *)(v31 + 632), v32);
    TGraph::TGraph((TGraph *)v114, v25, (TSegmenter *)v118, *(_BYTE *)(v31 + ValidConfig + 784));
    for (j = (uint64_t)TGraph::addVertex((TGraph *)v114, v25);
          ;
          j = TGraph::getNextVertex((TGraph *)v114, *(_QWORD *)(j + 24) + 1))
    {
      v35 = *(char **)(j + 16);
      if (!*v35)
        break;
      Segment = TSegmenter::getSegment((TSegmenter *)v118, v35);
      v37 = Segment;
      v38 = *(_QWORD *)(j + 16);
      if (v38 - (uint64_t)v25 >= 2501)
      {
        v39 = v117 != v116 && j == v115;
        if (v39
          && (!*(_DWORD *)(Segment + 24) || (unint64_t)(v38 - (_QWORD)v25) > 0x1388 || v38 != *(_QWORD *)(j + 24)))
        {
          goto LABEL_71;
        }
      }
      if (*(_DWORD *)(Segment + 24) == 5)
      {
        *(_QWORD *)v110 = v112;
        v111 = xmmword_1AE1418C0;
        v113 = 1;
        TBuffer<wchar_t>::assign((uint64_t)v110, dword_1AE144E18);
        v40 = 0;
        v41 = *(int **)v37;
        while (v41[v40++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), v41, v40 - 1);
        v43 = *(TAllocator **)(a1 + 24);
        if (*((_QWORD *)&v111 + 1) >= (unint64_t)v111)
        {
          if (v113)
          {
            LODWORD(v106) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
            v44 = *(int **)v110;
            --*((_QWORD *)&v111 + 1);
          }
          else
          {
            v44 = *(int **)v110;
            if ((_QWORD)v111)
              *(_DWORD *)(*(_QWORD *)v110 + 4 * v111 - 4) = 0;
          }
        }
        else
        {
          v44 = *(int **)v110;
          *(_DWORD *)(*(_QWORD *)v110 + 4 * *((_QWORD *)&v111 + 1)) = 0;
        }
        v60 = TLexicon::addTempWord(v43, 0, v44, 0, 0);
        v61 = TGraph::addVertex((TGraph *)v114, *(char **)(v37 + 8));
        LODWORD(v106) = 3;
        v107 = v60;
        v108 = 0;
        v109 = 0;
        TGraph::addEdge(v114, j, v61, (uint64_t)&v106);
        if (v113 && *(_BYTE **)v110 != v112)
        {
          if (*(_QWORD *)v110)
            MEMORY[0x1AF44D160]();
        }
      }
      else
      {
        v45 = *(TPatternManager **)(a1 + 56);
        if (v45)
          TPatternManager::addWords(v45, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118, v7);
        TTokenizer::addWords((TTokenizer *)a1, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118);
        v46 = *(TRespellManager **)(a1 + 64);
        if (v46)
          TRespellManager::addWords(v46, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118);
        if (*(_QWORD *)(a1 + 32))
        {
          v47 = *(_QWORD *)(a1 + 8);
          v48 = TParam::getActiveConfigHandle((TParam *)(v47 + 12112));
          if (*(_BYTE *)(v47 + TParam::getValidConfig((TParam *)(v47 + 12112), v48) + 12264))
            TDecompounder::addWords(*(TDecompounder **)(a1 + 32), (char **)j, (TGraph *)v114, (TSegmenter *)v118);
        }
        if (*(_QWORD *)(a1 + 40))
        {
          v49 = *(_QWORD *)(a1 + 8);
          v50 = TParam::getActiveConfigHandle((TParam *)(v49 + 12360));
          if (*(_BYTE *)(v49 + TParam::getValidConfig((TParam *)(v49 + 12360), v50) + 12512))
            TClitics::addWords(*(TClitics **)(a1 + 40), (char **)j, (TGraph *)v114, (TSegmenter *)v118);
        }
        v51 = *(_QWORD *)(a1 + 48);
        if (v51)
          TNewWords::addWords(v51, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118, *(TLexicon **)(a1 + 24));
        v52 = TGraph::addVertex((TGraph *)v114, *(char **)(v37 + 8));
        OutEdge = TVertex::getOutEdge(j);
        if (OutEdge)
        {
          v54 = *(_QWORD *)(OutEdge + 64);
          v55 = v54 != 0;
          if (v54)
          {
            while (1)
            {
              OutEdge = *(_QWORD *)(OutEdge + 8);
              if (!OutEdge)
                break;
              if (!*(_BYTE *)(OutEdge + 32))
              {
                v56 = 0;
                v57 = *(_QWORD *)(OutEdge + 64);
                v55 = v57 != 0;
                if (!v57)
                  goto LABEL_56;
              }
            }
            v56 = v55;
          }
          else
          {
            v56 = 0;
          }
        }
        else
        {
          v56 = 1;
        }
LABEL_56:
        v58 = TVertex::getInEdge((uint64_t)v52);
        if (v58)
        {
LABEL_57:
          if (*(_QWORD *)(v58 + 64))
          {
            while (1)
            {
              v58 = *(_QWORD *)v58;
              if (!v58)
                break;
              if (!*(_BYTE *)(v58 + 32))
                goto LABEL_57;
            }
          }
          else if ((v56 & 1) == 0)
          {
            continue;
          }
        }
        v59 = TLexicon::addTempWord(*(TAllocator **)(a1 + 24), *(int **)v37, 0, 0, 0);
        v110[0] = 0;
        v111 = (unint64_t)v59;
        v112[0] = 0;
        TGraph::addEdge(v114, j, v52, (uint64_t)v110);
      }
    }
    j = v115;
LABEL_71:
    *(_QWORD *)v110 = v112;
    v111 = xmmword_1AE1418C0;
    v113 = 1;
    v62 = (int **)TSegmenter::getSegment((TSegmenter *)v118, *(char **)(j + 24));
    if (v62)
    {
      TBuffer<wchar_t>::assign((uint64_t)v110, *v62);
    }
    else if (a4 && *a4)
    {
      v72 = *(_QWORD *)(a1 + 24);
      v73 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 8) + 3744));
      TSegmenter::TSegmenter(&v106, a4, v72 + 224, v73);
      v74 = *(_QWORD *)(a1 + 8);
      v75 = TParam::getActiveConfigHandle((TParam *)(v74 + 13952));
      v107 = (_QWORD *)*(int *)(v74 + 4 * TParam::getValidConfig((TParam *)(v74 + 13952), v75) + 14112);
      (*(void (**)(uint64_t *))(v106 + 16))(&v106);
      v76 = (int **)TSegmenter::getSegment((TSegmenter *)&v106, a4);
      TBuffer<wchar_t>::assign((uint64_t)v110, *v76);
      TSegmenter::~TSegmenter((TSegmenter *)&v106);
    }
    TTokenizer::deleteBadPaths((TTokenizer *)a1, (TGraph *)v114);
    if (v117 != v116)
    {
      v63 = 0;
      if ((unint64_t)((v117 - v116) >> 3) <= 1)
        v64 = 1;
      else
        v64 = (v117 - v116) >> 3;
      do
      {
        v65 = *(_QWORD *)(v116 + 8 * v63);
        if (!*(_BYTE *)(v65 + 32))
        {
          v66 = *(_QWORD *)(a1 + 64);
          if (v66)
          {
            if (*(_DWORD *)(v65 + 48) == 2)
            {
              v67 = *(_QWORD *)(a1 + 8);
              v68 = TParam::getActiveConfigHandle((TParam *)(v67 + 880));
              v69 = TParam::getValidConfig((TParam *)(v67 + 880), v68);
              TRespellManager::expandWord(v66, (TGraph *)v114, v65, *(unsigned __int8 *)(v67 + v69 + 1032));
            }
          }
        }
        ++v63;
      }
      while (v64 != v63);
    }
    if (*(_QWORD *)(a1 + 72))
    {
      TGraph::minimize((TGraph *)v114);
      v70 = *(_QWORD *)(a1 + 72);
      if (*((_QWORD *)&v120 + 1) >= (unint64_t)v120)
      {
        if (v122)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v119, *((unint64_t *)&v120 + 1), (int *)&v106, 1uLL);
          v71 = *(int **)v119;
          --*((_QWORD *)&v120 + 1);
        }
        else
        {
          v71 = *(int **)v119;
          if ((_QWORD)v120)
            *(_DWORD *)(*(_QWORD *)v119 + 4 * v120 - 4) = 0;
        }
      }
      else
      {
        v71 = *(int **)v119;
        *(_DWORD *)(*(_QWORD *)v119 + 4 * *((_QWORD *)&v120 + 1)) = 0;
      }
      if (*((_QWORD *)&v111 + 1) >= (unint64_t)v111)
      {
        if (v113)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
          v77 = *(int **)v110;
          --*((_QWORD *)&v111 + 1);
        }
        else
        {
          v77 = *(int **)v110;
          if ((_QWORD)v111)
            *(_DWORD *)(*(_QWORD *)v110 + 4 * v111 - 4) = 0;
        }
      }
      else
      {
        v77 = *(int **)v110;
        *(_DWORD *)(*(_QWORD *)v110 + 4 * *((_QWORD *)&v111 + 1)) = 0;
      }
      TMungeMapManager::munge(v70, (TGraph *)v114, v71, v77, (TSegmenter *)v118, 0, v105);
    }
    v78 = (v117 - v116) >> 3;
    if (v117 != v116)
    {
      v79 = 0;
      if (v78 <= 1)
        v80 = 1;
      else
        v80 = (v117 - v116) >> 3;
      do
      {
        v81 = *(_QWORD *)(v116 + 8 * v79);
        if (!*(_BYTE *)(v81 + 32))
        {
          v82 = *(_QWORD *)(a1 + 56);
          if (v82)
          {
            if (*(_DWORD *)(v81 + 48) == 5)
            {
              v83 = *(_QWORD *)(a1 + 8);
              v84 = TParam::getActiveConfigHandle((TParam *)(v83 + 880));
              v85 = TParam::getValidConfig((TParam *)(v83 + 880), v84);
              TPatternManager::expandWord(v82, (TGraph *)v114, v81, *(unsigned __int8 *)(v83 + v85 + 1032));
            }
          }
        }
        ++v79;
      }
      while (v80 != v79);
    }
    if (*(_QWORD *)(a1 + 72))
    {
      TGraph::minimize((TGraph *)v114);
      v86 = *(_QWORD *)(a1 + 72);
      if (*((_QWORD *)&v120 + 1) >= (unint64_t)v120)
      {
        if (v122)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v119, *((unint64_t *)&v120 + 1), (int *)&v106, 1uLL);
          v87 = *(int **)v119;
          --*((_QWORD *)&v120 + 1);
        }
        else
        {
          v87 = *(int **)v119;
          if ((_QWORD)v120)
            *(_DWORD *)(*(_QWORD *)v119 + 4 * v120 - 4) = 0;
        }
      }
      else
      {
        v87 = *(int **)v119;
        *(_DWORD *)(*(_QWORD *)v119 + 4 * *((_QWORD *)&v120 + 1)) = 0;
      }
      if (*((_QWORD *)&v111 + 1) >= (unint64_t)v111)
      {
        if (v113)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
          v88 = *(int **)v110;
          --*((_QWORD *)&v111 + 1);
        }
        else
        {
          v88 = *(int **)v110;
          if ((_QWORD)v111)
            *(_DWORD *)(*(_QWORD *)v110 + 4 * v111 - 4) = 0;
        }
      }
      else
      {
        v88 = *(int **)v110;
        *(_DWORD *)(*(_QWORD *)v110 + 4 * *((_QWORD *)&v111 + 1)) = 0;
      }
      TMungeMapManager::munge(v86, (TGraph *)v114, v87, v88, (TSegmenter *)v118, v78, v105);
    }
    TGraph::minimize((TGraph *)v114);
    v89 = *(_QWORD *)(a1 + 8);
    v90 = TParam::getActiveConfigHandle((TParam *)(v89 + 15256));
    if (*(_BYTE *)(v89 + TParam::getValidConfig((TParam *)(v89 + 15256), v90) + 15408))
      TTokenizer::addClones((TTokenizer *)a1, (TGraph *)v114);
    v91 = *(_QWORD *)(a1 + 8);
    v92 = TParam::getActiveConfigHandle((TParam *)(v91 + 17864));
    if (*(_BYTE *)(v91 + TParam::getValidConfig((TParam *)(v91 + 17864), v92) + 18016))
      TTokenizer::chooseBestPath((TTokenizer *)a1, (TGraph *)v114);
    (*(void (**)(_QWORD *, _QWORD *, int64_t))(*v103 + 16))(v103, v114, v25 - a2);
    v93 = *(_BYTE **)(v115 + 16);
    v94 = *v93;
    if (*v93)
    {
      TBuffer<wchar_t>::resize((uint64_t)v119, 0);
      v95 = TSegmenter::getPreviousSegment((TSegmenter *)v118, *(char **)(v115 + 16));
      if (*(_DWORD *)(v95 + 24) != 5)
        TBuffer<wchar_t>::assign((uint64_t)v119, *(int **)v95);
      v25 = *(char **)(v115 + 24);
    }
    TLexicon::cleanCache(*(TLexicon **)(a1 + 24));
    v96 = *(_QWORD *)(a1 + 48);
    if (v96)
      *(_QWORD *)(v96 + 40) = 0;
    v97 = *(TPatternManager **)(a1 + 56);
    if (v97)
      TPatternManager::clear(v97);
    if (v113 && *(_BYTE **)v110 != v112 && *(_QWORD *)v110)
      MEMORY[0x1AF44D160]();
    TGraph::~TGraph((TGraph *)v114);
    TSegmenter::~TSegmenter((TSegmenter *)v118);
    v7 = v102;
  }
  while (v94);
  if (v122 && *(_BYTE **)v119 != v121 && *(_QWORD *)v119)
    MEMORY[0x1AF44D160]();
  v123[0] = &off_1E5D166C0;
  TResGraphMaker::clear((uint64_t)v123);
  *(_QWORD *)(v100 + 128) = v99;
  return -1;
}

void sub_1AD898DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  TSegmenter::~TSegmenter((TSegmenter *)&a34);
  if (LOBYTE(STACK[0xA08]))
  {
    if (STACK[0x5F0] != a9 && STACK[0x5F0] != 0)
      MEMORY[0x1AF44D160]();
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)(v34 - 112));
  *(_QWORD *)(a11 + 128) = a10;
  _Unwind_Resume(a1);
}

void TTokenizer::addWords(TTokenizer *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  __int32 *v7;
  _QWORD *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t ActiveConfigHandle;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ValidConfig;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  __objc2_class **p_superclass;
  _DWORD *v21;
  signed int v22;
  unsigned __int8 v23;
  uint64_t PreviousSegment;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  int v30;
  unsigned __int8 v31;
  TLocaleInfo *v33;
  TLocaleInfo *v34;
  int v36;
  uint64_t v37;
  __int128 v38;
  void *__p[2];
  char v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v7 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 1) + 10736));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v7);
  v8 = (_QWORD *)*((_QWORD *)this + 3);
  v9 = (char *)*((_QWORD *)a2 + 2);
  if (v40 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = *((_QWORD *)this + 1);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 16456));
  v13 = *(int *)(v11 + 4 * TParam::getValidConfig((TParam *)(v11 + 16456), ActiveConfigHandle) + 16616);
  v14 = *((_QWORD *)this + 1);
  v15 = TParam::getActiveConfigHandle((TParam *)(v14 + 16104));
  ValidConfig = TParam::getValidConfig((TParam *)(v14 + 16104), v15);
  TLexicon::findHeadClonesCollatedPrefix(v8, v9, a4, v10, v13, *(int *)(v14 + 4 * ValidConfig + 16264), &v41);
  v17 = (char *)v41;
  if (v42 != v41)
  {
    v18 = 0;
    v19 = 0;
    p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
    do
    {
      v21 = **(_DWORD ***)&v17[v18];
      if (*v21 != 45)
        goto LABEL_12;
      v22 = v21[1];
      if ((v23 & 1) == 0
      {
        v33 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v33);
        p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
      }
      if (!TLocaleInfo::isAlpha((uint64_t)p_superclass[459], v22))
        goto LABEL_12;
      PreviousSegment = TSegmenter::getPreviousSegment(a4, *((char **)a2 + 2));
      v26 = PreviousSegment;
      if (PreviousSegment)
      {
        if (!*(_DWORD *)(PreviousSegment + 24))
        {
          v29 = v25;
          v30 = **(_DWORD **)PreviousSegment;
          if ((v31 & 1) == 0
          {
            v34 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v34);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v34;
          }
          if (v30 == 13 || v30 == 10)
          {
            p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
            v26 = TSegmenter::getPreviousSegment(a4, v29);
            if (!v26)
              goto LABEL_13;
          }
          else
          {
            p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
          }
        }
        if ((*(_DWORD *)(v26 + 24) - 1) <= 1)
        {
LABEL_12:
          v27 = TGraph::addVertex(a3, (char *)(*((_QWORD *)a2 + 2) + *(_QWORD *)((char *)v41 + v18 + 8)));
          v28 = *(_QWORD *)((char *)v41 + v18);
          v36 = 1;
          v37 = v28;
          v38 = *(_OWORD *)((char *)v41 + v18 + 16);
          TGraph::addEdge(a3, (uint64_t)a2, v27, (uint64_t)&v36);
        }
      }
LABEL_13:
      ++v19;
      v17 = (char *)v41;
      v18 += 32;
    }
    while (v19 < (v42 - (_BYTE *)v41) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&v41, 0);
  if (v40 < 0)
    operator delete(__p[0]);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_1AD8991F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  MEMORY[0x1AF44D190](a9, 0x1070C40ADD13FEBLL);
  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void TTokenizer::deleteBadPaths(TTokenizer *this, TGraph *a2)
{
  uint64_t v4;
  uint64_t ActiveConfigHandle;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t OutEdge;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  TVertex *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  void *__p;
  uint64_t *v129;
  unint64_t v130;
  void *v131[3];
  _QWORD *v132;
  _BYTE *v133;
  uint64_t v134;

  v132 = 0;
  v133 = 0;
  v134 = 0;
  TGraph::topologicalSort(a2, (void **)&v132, 0);
  std::vector<TEdgeStat>::vector(v131, (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  *((_BYTE *)v131[0] + 72 * *(_QWORD *)(*((_QWORD *)a2 + 8) + 40) + 64) = 1;
  __p = 0;
  v129 = 0;
  v130 = 0;
  v4 = *((_QWORD *)this + 1);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v4 + 15752));
  if (*(_DWORD *)(v4 + 4 * TParam::getValidConfig((TParam *)(v4 + 15752), ActiveConfigHandle) + 15912) != -1)
  {
    v6 = *((_QWORD *)this + 1) + 15752;
    v7 = ((char *)v129 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
    if (v8 <= v7 + 1)
      v8 = v7 + 1;
    if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
      v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v9);
    else
      v10 = 0;
    v11 = (uint64_t *)&v10[8 * v7];
    v12 = &v10[8 * v9];
    *v11 = v6;
    v13 = v11 + 1;
    v15 = (char *)__p;
    v14 = (char *)v129;
    if (v129 != __p)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v11 = v16;
      }
      while (v14 != v15);
      v14 = (char *)__p;
    }
    __p = v11;
    v129 = v13;
    v130 = (unint64_t)v12;
    if (v14)
      operator delete(v14);
    v129 = v13;
  }
  v17 = *((_QWORD *)this + 1);
  v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 16808));
  if (*(_DWORD *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 16808), v18) + 16968) != -1)
  {
    v19 = *((_QWORD *)this + 1) + 16808;
    v20 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v22 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v23 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v24);
      else
        v25 = 0;
      v26 = (uint64_t *)&v25[8 * v22];
      v27 = &v25[8 * v24];
      *v26 = v19;
      v21 = v26 + 1;
      v29 = (char *)__p;
      v28 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)__p;
      }
      __p = v26;
      v129 = v21;
      v130 = (unint64_t)v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v129 = v19;
      v21 = v20 + 1;
    }
    v129 = v21;
  }
  v31 = *((_QWORD *)this + 1);
  v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 17160));
  if (*(_DWORD *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 17160), v32) + 17320) != -1)
  {
    v33 = *((_QWORD *)this + 1) + 17160;
    v34 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v36 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v37 <= v36 + 1)
        v37 = v36 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v38);
      else
        v39 = 0;
      v40 = (uint64_t *)&v39[8 * v36];
      v41 = &v39[8 * v38];
      *v40 = v33;
      v35 = v40 + 1;
      v43 = (char *)__p;
      v42 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v44 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v40 = v44;
        }
        while (v42 != v43);
        v42 = (char *)__p;
      }
      __p = v40;
      v129 = v35;
      v130 = (unint64_t)v41;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *v129 = v33;
      v35 = v34 + 1;
    }
    v129 = v35;
  }
  v45 = *((_QWORD *)this + 1);
  v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 17512));
  if (*(_DWORD *)(v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 17512), v46) + 17672) != -1)
  {
    v47 = *((_QWORD *)this + 1) + 17512;
    v48 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v50 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v50 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v51 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v52);
      else
        v53 = 0;
      v54 = (uint64_t *)&v53[8 * v50];
      v55 = &v53[8 * v52];
      *v54 = v47;
      v49 = v54 + 1;
      v57 = (char *)__p;
      v56 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v58 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v54 = v58;
        }
        while (v56 != v57);
        v56 = (char *)__p;
      }
      __p = v54;
      v129 = v49;
      v130 = (unint64_t)v55;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *v129 = v47;
      v49 = v48 + 1;
    }
    v129 = v49;
  }
  v59 = *((_QWORD *)this + 1);
  v60 = TParam::getActiveConfigHandle((TParam *)(v59 + 18112));
  if (*(_DWORD *)(v59 + 4 * TParam::getValidConfig((TParam *)(v59 + 18112), v60) + 18272) != -1)
  {
    v61 = *((_QWORD *)this + 1) + 18112;
    v62 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v64 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v65 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v65 <= v64 + 1)
        v65 = v64 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v66);
      else
        v67 = 0;
      v68 = (uint64_t *)&v67[8 * v64];
      v69 = &v67[8 * v66];
      *v68 = v61;
      v63 = v68 + 1;
      v71 = (char *)__p;
      v70 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v72 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v68 = v72;
        }
        while (v70 != v71);
        v70 = (char *)__p;
      }
      __p = v68;
      v129 = v63;
      v130 = (unint64_t)v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v129 = v61;
      v63 = v62 + 1;
    }
    v129 = v63;
  }
  v73 = *((_QWORD *)this + 1);
  v74 = TParam::getActiveConfigHandle((TParam *)(v73 + 18464));
  if (*(_DWORD *)(v73 + 4 * TParam::getValidConfig((TParam *)(v73 + 18464), v74) + 18624) != -1)
  {
    v75 = *((_QWORD *)this + 1) + 18464;
    v76 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v78 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v78 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v79 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v79 <= v78 + 1)
        v79 = v78 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v80);
      else
        v81 = 0;
      v82 = (uint64_t *)&v81[8 * v78];
      v83 = &v81[8 * v80];
      *v82 = v75;
      v77 = v82 + 1;
      v85 = (char *)__p;
      v84 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v86 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *--v82 = v86;
        }
        while (v84 != v85);
        v84 = (char *)__p;
      }
      __p = v82;
      v129 = v77;
      v130 = (unint64_t)v83;
      if (v84)
        operator delete(v84);
    }
    else
    {
      *v129 = v75;
      v77 = v76 + 1;
    }
    v129 = v77;
  }
  v87 = *((_QWORD *)this + 1);
  v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 18816));
  if (*(_DWORD *)(v87 + 4 * TParam::getValidConfig((TParam *)(v87 + 18816), v88) + 18976) == -1)
  {
    v91 = v129;
  }
  else
  {
    v89 = *((_QWORD *)this + 1) + 18816;
    v90 = v129;
    if ((unint64_t)v129 >= v130)
    {
      v92 = ((char *)v129 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v92 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v93 = (uint64_t)(v130 - (_QWORD)__p) >> 2;
      if (v93 <= v92 + 1)
        v93 = v92 + 1;
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v94 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v94 = v93;
      if (v94)
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v94);
      else
        v95 = 0;
      v96 = (uint64_t *)&v95[8 * v92];
      v97 = &v95[8 * v94];
      *v96 = v89;
      v91 = v96 + 1;
      v99 = (char *)__p;
      v98 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          v100 = *((_QWORD *)v98 - 1);
          v98 -= 8;
          *--v96 = v100;
        }
        while (v98 != v99);
        v98 = (char *)__p;
      }
      __p = v96;
      v129 = v91;
      v130 = (unint64_t)v97;
      if (v98)
        operator delete(v98);
    }
    else
    {
      *v129 = v89;
      v91 = v90 + 1;
    }
    v129 = v91;
  }
  v101 = 126 - 2 * __clz(((char *)v91 - (_BYTE *)__p) >> 3);
  *(_QWORD *)&v123 = sortPruningParams;
  if (v91 == __p)
    v102 = 0;
  else
    v102 = v101;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>((uint64_t)__p, v91, (uint64_t (**)(uint64_t, uint64_t))&v123, v102, 1);
  v103 = v132;
  if (v133 != (_BYTE *)v132)
  {
    v104 = 0;
    do
    {
      OutEdge = TVertex::getOutEdge(v103[v104]);
      if (OutEdge)
      {
LABEL_132:
        v127 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        computeEdgeStat(OutEdge, *((_QWORD *)this + 1), (uint64_t *)&__p, (uint64_t)&v123);
        v106 = 0;
        v107 = *(_QWORD *)(*(_QWORD *)(OutEdge + 24) + 40);
        v108 = (char *)v131[0];
        v109 = (char *)v131[0] + 72 * *(_QWORD *)(*(_QWORD *)(OutEdge + 16) + 40);
        do
        {
          *(__int128 *)((char *)&v123 + v106) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v106), *(int64x2_t *)&v109[v106]);
          v106 += 16;
        }
        while (v106 != 64);
        v110 = &v108[72 * v107];
        if (v110[64])
        {
          v111 = 0;
          while (1)
          {
            v112 = *(_QWORD *)((char *)&v123 + v111);
            v113 = *(_QWORD *)&v110[v111];
            v114 = v112 >= v113;
            if (v112 != v113)
              break;
            v111 += 8;
            if (v111 == 56)
            {
              v114 = *((_QWORD *)&v126 + 1) >= *((_QWORD *)v110 + 7);
              break;
            }
          }
          if (v114)
            goto LABEL_141;
        }
        *((_OWORD *)v110 + 1) = v124;
        *((_OWORD *)v110 + 2) = v125;
        *((_OWORD *)v110 + 3) = v126;
        v110[64] = v127;
        *(_OWORD *)v110 = v123;
LABEL_141:
        while (1)
        {
          OutEdge = *(_QWORD *)(OutEdge + 8);
          if (!OutEdge)
            break;
          if (!*(_BYTE *)(OutEdge + 32))
            goto LABEL_132;
        }
      }
      ++v104;
      v103 = v132;
    }
    while (v104 < (v133 - (_BYTE *)v132) >> 3);
    if (v133 != (_BYTE *)v132)
    {
      v115 = 0;
      v116 = (v133 - (_BYTE *)v132) >> 3;
      do
      {
        v117 = (TVertex *)v103[v116 + ~v115];
        v118 = TVertex::getOutEdge((uint64_t)v117);
        if (v118)
        {
LABEL_148:
          v127 = 0;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          computeEdgeStat(v118, *((_QWORD *)this + 1), (uint64_t *)&__p, (uint64_t)&v123);
          v119 = 0;
          v120 = *(_QWORD *)(*(_QWORD *)(v118 + 24) + 40);
          v121 = (char *)v131[0];
          v122 = (char *)v131[0] + 72 * *(_QWORD *)(*(_QWORD *)(v118 + 16) + 40);
          do
          {
            *(__int128 *)((char *)&v123 + v119) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v119), *(int64x2_t *)&v122[v119]);
            v119 += 16;
          }
          while (v119 != 64);
          if (memcmp(&v123, &v121[72 * v120], 0x40uLL))
            TGraph::deleteEdge((uint64_t)a2, v118);
          while (1)
          {
            v118 = *(_QWORD *)(v118 + 8);
            if (!v118)
              break;
            if (!*(_BYTE *)(v118 + 32))
              goto LABEL_148;
          }
        }
        if (v117 != *((TVertex **)a2 + 9) && !TVertex::getOutEdge((uint64_t)v117))
          TGraph::deleteVertex(a2, v117);
        ++v115;
        v103 = v132;
        v116 = (v133 - (_BYTE *)v132) >> 3;
      }
      while (v115 < v116);
    }
  }
  if (__p)
  {
    v129 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_1AD899C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(_QWORD *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::addClones(TTokenizer *this, TGraph *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int32 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t *v12;
  void **v13;
  _OWORD v14[2];
  void *__p[2];
  char v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = *((_QWORD *)a2 + 13);
  v3 = *((_QWORD *)a2 + 14);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v5 = (__int32 *)TStringParam::get((TStringParam *)(*((_QWORD *)this + 1) + 10736));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v5);
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if ((unint64_t)((v3 - v4) >> 3) <= 1)
      v8 = 1;
    else
      v8 = (v3 - v4) >> 3;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 8 * v7);
      if (!*(_BYTE *)(v9 + 32))
      {
        v10 = *(_OWORD *)(v9 + 64);
        v14[0] = *(_OWORD *)(v9 + 48);
        v14[1] = v10;
        if (LODWORD(v14[0]) == 1)
        {
          TWord::getClones(*((uint64_t *)&v14[0] + 1), (uint64_t)&v17);
          v6 = v18;
          if (v18 != v17)
          {
            v11 = 0;
            v6 = v17;
            do
            {
              v12 = (uint64_t *)v6[v11];
              *((_QWORD *)&v14[0] + 1) = v12;
              if (v16 >= 0)
                v13 = __p;
              else
                v13 = (void **)__p[0];
              if (!TWord::applyMask(v12, v13))
                TGraph::addEdge(a2, *(_QWORD *)(v9 + 16), *(_QWORD **)(v9 + 24), (uint64_t)v14);
              ++v11;
              v6 = v17;
            }
            while (v11 < ((char *)v18 - (_BYTE *)v17) >> 3);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (v16 < 0)
  {
    operator delete(__p[0]);
    v6 = v17;
  }
  if (v6)
  {
    v18 = v6;
    operator delete(v6);
  }
}

void sub_1AD899DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TTokenizer::chooseBestPath(TTokenizer *this, TGraph *a2)
{
  _QWORD *v4;
  unint64_t v5;
  TVertex *v6;
  unint64_t OutEdgeCount;
  int v8;
  uint64_t v9;
  uint64_t ActiveConfigHandle;
  uint64_t v11;
  uint64_t OutEdge;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  TGraph::topologicalSort(a2, (void **)&v14, 0);
  v4 = v15;
  if (v15 != v14)
  {
    v5 = 0;
    v4 = v14;
    do
    {
      v6 = (TVertex *)v4[v5];
      if (!*((_BYTE *)v6 + 32))
      {
        if (v6 == *((TVertex **)a2 + 8) || TVertex::getInEdge(v4[v5]))
        {
          OutEdgeCount = TVertex::getOutEdgeCount(v6);
          v8 = OutEdgeCount;
          if (OutEdgeCount >= 2
            && (v9 = *((_QWORD *)this + 1),
                ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 384)),
                *(_BYTE *)(v9 + TParam::getValidConfig((TParam *)(v9 + 384), ActiveConfigHandle) + 536)))
          {
            v11 = (int)(floor((double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)this + 88))* 2.32830644e-10* (double)v8)+ 0.0);
          }
          else
          {
            v11 = 0;
          }
          OutEdge = TVertex::getOutEdge((uint64_t)v6);
          if (OutEdge)
          {
            v13 = 0;
LABEL_14:
            if (v11 != v13)
              TGraph::deleteEdge((uint64_t)a2, OutEdge);
            while (1)
            {
              OutEdge = *(_QWORD *)(OutEdge + 8);
              if (!OutEdge)
                break;
              if (!*(_BYTE *)(OutEdge + 32))
              {
                ++v13;
                goto LABEL_14;
              }
            }
          }
        }
        else
        {
          TGraph::deleteVertex(a2, v6);
        }
      }
      ++v5;
      v4 = v14;
    }
    while (v5 < v15 - v14);
  }
  if (v4)
  {
    v15 = v4;
    operator delete(v4);
  }
}

void sub_1AD899FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TResGraphMaker::~TResGraphMaker(TResGraphMaker *this)
{
  *(_QWORD *)this = &off_1E5D166C0;
  TResGraphMaker::clear((uint64_t)this);
}

{
  *(_QWORD *)this = &off_1E5D166C0;
  TResGraphMaker::clear((uint64_t)this);
  JUMPOUT(0x1AF44D190);
}

BOOL sortPruningParams(const TIntParam *a1, const TIntParam *a2)
{
  TParam *v3;
  uint64_t ActiveConfigHandle;
  uint64_t v5;

  v3 = a1;
  ActiveConfigHandle = TParam::getActiveConfigHandle(a1);
  LODWORD(v3) = *((_DWORD *)v3 + TParam::getValidConfig(v3, ActiveConfigHandle) + 40);
  v5 = TParam::getActiveConfigHandle(a2);
  return (int)v3 < *((_DWORD *)a2 + TParam::getValidConfig(a2, v5) + 40);
}

uint64_t computeEdgeStat(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  char v34;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  __int32 *v47;
  __n128 v48;
  uint64_t v49;
  char v50;

  *(_BYTE *)(a4 + 64) = 1;
  if (*(_DWORD *)(result + 48) != 6)
  {
    v5 = *a3;
    if (a3[1] != *a3)
    {
      v7 = result;
      v8 = 0;
      v9 = *(unsigned __int8 *)(result + 72);
      v10 = a2 + 15752;
      v11 = *(_QWORD *)(result + 64);
      v12 = a2 + 16808;
      v13 = a2 + 17160;
      v14 = a2 + 17512;
      v15 = a2 + 18112;
      v16 = a2 + 18464;
      v17 = a2 + 18816;
      v18 = (__int32 *)&v49;
      v19 = v11 & 0x30;
      v20 = v11 & 0x35;
      v21 = v11 & 0xC0;
      v22 = v11 & 0xD;
      if ((v11 & 5) != 0)
        v23 = 3;
      else
        v23 = 2;
      v24 = (__n128)xmmword_1AE1418C0;
      while (1)
      {
        v25 = *(_QWORD *)(v5 + 8 * v8);
        if (v25 == v10)
          break;
        if (v25 == v12)
        {
          if (!*(_DWORD *)(v7 + 48))
            goto LABEL_25;
        }
        else
        {
          if (v25 == v13)
          {
            if (!v20)
              goto LABEL_27;
LABEL_25:
            v27 = 1;
            goto LABEL_26;
          }
          if (v25 == v14)
            goto LABEL_25;
          if (v25 == v15)
          {
            if (*(_DWORD *)(v7 + 48) != 5)
              goto LABEL_27;
            goto LABEL_25;
          }
          if (v25 == v16)
          {
            if (*(_DWORD *)(v7 + 48) == 4)
              goto LABEL_25;
          }
          else if (v25 == v17)
          {
            v26 = v23;
            if (v22)
              goto LABEL_15;
            if ((v11 & 2) != 0)
            {
              v28 = *(_QWORD *)(v7 + 16);
              v44 = v11;
              v45 = v9;
              v46 = v18;
              v42 = v16;
              v43 = v15;
              v40 = v19;
              v41 = v17;
              v39 = v20;
              v38 = v23;
              v37 = v24;
              result = TVertex::getInEdge(v28);
              v24 = v37;
              v23 = v38;
              v22 = 0;
              v20 = v39;
              v19 = v40;
              v17 = v41;
              v16 = v42;
              v15 = v43;
              v11 = v44;
              v9 = v45;
              v18 = v46;
              if (result)
              {
                if (*(_QWORD *)(v28 + 16) == *(_QWORD *)(v28 + 24))
                  goto LABEL_55;
                v47 = v46;
                v48 = v37;
                v50 = 1;
                v29 = TVertex::getInEdge(v28);
                v11 = v44;
                v9 = v45;
                v18 = v46;
                v16 = v42;
                v15 = v43;
                v19 = v40;
                v17 = v41;
                v22 = 0;
                v20 = v39;
                v23 = v38;
                v24 = v37;
                result = 44;
                if (v29)
                {
LABEL_33:
                  v30 = *(_DWORD *)(v29 + 48);
                  v31 = v30 > 5;
                  v32 = (1 << v30) & 0x2C;
                  if (!v31 && v32 != 0)
                  {
LABEL_56:
                    v34 = 0;
                    goto LABEL_45;
                  }
                  result = TWord::getWrittenForm(*(__int32 ***)(v29 + 56), (uint64_t)&v47);
                  if (v48.n128_u64[1] > 1)
                  {
                    v34 = 0;
                    v11 = v44;
                    v9 = v45;
                    v18 = v46;
                    v16 = v42;
                    v15 = v43;
                    v19 = v40;
                    v17 = v41;
                    v22 = 0;
                    v20 = v39;
                    v23 = v38;
                    v24 = v37;
                    goto LABEL_45;
                  }
                  result = (uint64_t)wcschr(dword_1AE144E30, *v47);
                  v11 = v44;
                  v9 = v45;
                  v18 = v46;
                  v16 = v42;
                  v15 = v43;
                  v19 = v40;
                  v17 = v41;
                  v22 = 0;
                  v20 = v39;
                  v23 = v38;
                  v24 = v37;
                  if (!result)
                    goto LABEL_56;
                  result = 44;
                  while (1)
                  {
                    v29 = *(_QWORD *)v29;
                    if (!v29)
                      break;
                    if (!*(_BYTE *)(v29 + 32))
                      goto LABEL_33;
                  }
                }
                v34 = 1;
LABEL_45:
                if (v50)
                {
                  result = (uint64_t)v47;
                  if (v47 != v18 && v47 != 0)
                  {
                    result = MEMORY[0x1AF44D160](v24);
                    v24 = v37;
                    v23 = v38;
                    v22 = 0;
                    v20 = v39;
                    v19 = v40;
                    v17 = v41;
                    v16 = v42;
                    v15 = v43;
                    v11 = v44;
                    v9 = v45;
                    v18 = v46;
                  }
                }
                if ((v34 & 1) == 0)
                {
LABEL_55:
                  v26 = 1;
LABEL_15:
                  *(_QWORD *)(a4 + 8 * v8) += v26;
                }
              }
            }
            v36 = *(_QWORD *)(a4 + 8 * v8);
            if (v19)
            {
              v36 += 3;
              *(_QWORD *)(a4 + 8 * v8) = v36;
            }
            v27 = v36 + v9;
LABEL_26:
            *(_QWORD *)(a4 + 8 * v8) = v27;
          }
        }
LABEL_27:
        ++v8;
        v5 = *a3;
        if (v8 >= (a3[1] - *a3) >> 3)
          return result;
      }
      if (!v21)
        goto LABEL_27;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_1AD89A3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a21)
  {
    if (a22)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void TInputStream::TInputStream(TInputStream *this, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = a3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 1;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = a5;
  if (a4)
    MEMORY[0x1AF44C914]((char *)this + 16, a4);
  *((_BYTE *)this + 9) = TInputStream::readHeader(this);
}

void sub_1AD89A480(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;

  v5 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(_QWORD **)(v1 + 160));
  if (*(char *)(v1 + 151) < 0)
    operator delete(*(void **)(v1 + 128));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::set(TIntParam *this, uint64_t a2, int a3)
{
  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3)
    return 1;
  *((_DWORD *)this + a2 + 64) = a3;
  *((_QWORD *)this + 14) |= 1 << (a2 + 33);
  TParam::notifyChange((uint64_t)this, a2);
  return 0;
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1, v7 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v4;
    v6 = (void *)a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

_QWORD *std::vector<TEdgeStat>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 72 * a2;
    v6 = 72 * a2;
    do
    {
      *(_BYTE *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_OWORD *)(v4 + 48) = 0uLL;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1AD89A654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void fst::MappedFile::~MappedFile(fst::MappedFile *this)
{
  size_t v2;
  void *v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  char v14;

  *(_QWORD *)this = &off_1E5D19480;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_9;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    if (!munmap(v3, v2))
      goto LABEL_9;
    std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)v12);
    v5 = (_QWORD *)fst::cerr(v4);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"failed to unmap region: ", 24);
    v7 = __error();
    v8 = strerror(*v7);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
    v10 = (void *)v12[0];
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    if (!v11)
      goto LABEL_9;
    v10 = (void *)(v11 - *((int *)this + 8));
  }
  operator delete(v10);
LABEL_9:
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

{
  fst::MappedFile::~MappedFile(this);
  JUMPOUT(0x1AF44D190);
}

void fst::MappedFile::SetLocked(fst::MappedFile *this, int a2)
{
  float v2;
  size_t v4;
  float v5;
  const void *v6;
  EARLogger *v7;
  int v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  int *v15;
  char *v16;
  EARLogger *v17;
  int v18;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  char *v23;
  size_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  int v29;
  int v30;
  int *v31;
  char *v32;
  const char *v33;
  NSObject *v34;
  char v35;
  _BYTE __p[12];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  double v40;
  __int16 v41;
  size_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *((float *)this + 16);
  if (v2 > 0.0 && *((unsigned __int8 *)this + 68) != a2)
  {
    v4 = *((_QWORD *)this + 3);
    if (v2 < 1.0)
    {
      v5 = v2 * (float)v4;
      if ((unint64_t)v5 < v4)
        v4 = (unint64_t)v5;
    }
    v6 = (const void *)*((_QWORD *)this + 2);
    if (a2)
    {
      v7 = (EARLogger *)mlock(v6, v4);
      v8 = (int)v7;
      if (!(_DWORD)v7)
        *((_BYTE *)this + 68) = 1;
      v9 = EARLogger::QuasarOSLogger(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (_QWORD *)((char *)this + 40);
        if (*((char *)this + 63) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *((_QWORD *)this + 3);
        v12 = *((float *)this + 16);
        v13 = *((unsigned __int8 *)this + 68);
        if (v8)
        {
          v14 = *__error();
          v15 = __error();
          v16 = strerror(*v15);
        }
        else
        {
          v14 = 0;
          v16 = "";
        }
        *(_DWORD *)__p = 136316930;
        *(_QWORD *)&__p[4] = v10;
        v37 = 2048;
        v38 = v11;
        v39 = 2048;
        v40 = v12;
        v41 = 2048;
        v42 = v4;
        v43 = 1024;
        v44 = v13;
        v45 = 1024;
        v46 = v8;
        v47 = 1024;
        v48 = v14;
        v49 = 2080;
        v50 = v16;
        v33 = "mlock source %s size %lu mlock_fraction %f mlock_size %lu locked_ %d ret %d errno %d strerror %s";
        v34 = v9;
LABEL_27:
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, v33, __p, 0x46u);
      }
    }
    else
    {
      v17 = (EARLogger *)munlock(v6, v4);
      v18 = (int)v17;
      if ((_DWORD)v17)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v19 = fst::LogMessage::LogMessage((fst *)&v35, (uint64_t)__p);
        v20 = (_QWORD *)fst::cerr(v19);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Memory unlock of file failed: ", 30);
        v22 = __error();
        v23 = strerror(*v22);
        v24 = strlen(v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v35);
        if (SHIBYTE(v39) < 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *((_BYTE *)this + 68) = 0;
      }
      v25 = EARLogger::QuasarOSLogger(v17);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = (_QWORD *)((char *)this + 40);
        if (*((char *)this + 63) < 0)
          v26 = (_QWORD *)*v26;
        v27 = *((_QWORD *)this + 3);
        v28 = *((float *)this + 16);
        v29 = *((unsigned __int8 *)this + 68);
        if (v18)
        {
          v30 = *__error();
          v31 = __error();
          v32 = strerror(*v31);
        }
        else
        {
          v30 = 0;
          v32 = "";
        }
        *(_DWORD *)__p = 136316930;
        *(_QWORD *)&__p[4] = v26;
        v37 = 2048;
        v38 = v27;
        v39 = 2048;
        v40 = v28;
        v41 = 2048;
        v42 = v4;
        v43 = 1024;
        v44 = v29;
        v45 = 1024;
        v46 = v18;
        v47 = 1024;
        v48 = v30;
        v49 = 2080;
        v50 = v32;
        v33 = "munlock source %s size %lu mlock_fraction %f mlock_size %lu locked_ %d ret %d errno %d strerror %s";
        v34 = v25;
        goto LABEL_27;
      }
    }
  }
}

void sub_1AD89B904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::MappedFile::Allocate(fst::MappedFile *this, int a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  void *__p[2];
  uint64_t v13;

  if (this)
  {
    v4 = a2;
    v5 = (unint64_t)operator new((size_t)this + a2);
    v6 = v5 / v4 * a2 - v5 + 16;
    v7 = (char *)(v5 + v6);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *(_QWORD *)v8 = &off_1E5D19480;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = this;
  *(_DWORD *)(v8 + 32) = v6;
  v9 = (std::string *)(v8 + 40);
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v10 = SHIBYTE(v13);
    *(_DWORD *)(v8 + 64) = 0;
    *(_BYTE *)(v8 + 68) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 56) = v13;
    *(_DWORD *)(v8 + 64) = 0;
    *(_BYTE *)(v8 + 68) = 0;
  }
  return v8;
}

void sub_1AD89BA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x1093C40E6D40A01);
  _Unwind_Resume(a1);
}

fst::MappedFile *fst::MappedFile::Map(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  std::string *v20;
  fst *v21;
  _QWORD *v22;
  fst *v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  const std::string::value_type *v31;
  const std::string::value_type *v32;
  std::string::value_type *v33;
  char *v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  fst *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  fst *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  fst *v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  fst *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  fst::MappedFile *v77;
  void *v79[2];
  char v80;
  char v81;
  void *__p[2];
  char v83;
  unint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  std::istream::tellg();
  v5 = a2;
  v6 = *(_DWORD *)(a2 + 48);
  v7 = v84 & 0xF;
  if ((v6 - 1) > 1 || v7 != 0)
  {
    if ((v6 - 3) < 0xFFFFFFFE || v7 == 0)
      goto LABEL_36;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v10 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v5 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Mapping of file failed: stream position ", 40);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is not aligned", 15);
LABEL_20:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v79);
    if (v83 < 0)
      operator delete(__p[0]);
LABEL_36:
    if (*(_DWORD *)(v5 + 48))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
      v35 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"File mapping at offset ", 23);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" of size ", 9);
      v38 = (_QWORD *)std::ostream::operator<<();
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" of file ", 9);
      v40 = *(char *)(a2 + 23);
      v41 = v40 >= 0 ? a2 : *(_QWORD *)a2;
      v42 = v40 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" could not be honored, reading instead.", 39);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v79);
      if (v83 < 0)
        operator delete(__p[0]);
    }
    v77 = (fst::MappedFile *)fst::MappedFile::Allocate((fst::MappedFile *)a3, 16);
    if (a3)
    {
      v44 = *((_QWORD *)v77 + 1);
      while (1)
      {
        v45 = a3 >= 0x10000000 ? 0x10000000 : a3;
        std::istream::tellg();
        v46 = (_QWORD *)std::istream::read();
        if ((*((_BYTE *)v46 + *(_QWORD *)(*v46 - 24) + 32) & 5) != 0)
          break;
        a3 -= v45;
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v79, "INFO");
          v47 = fst::LogMessage::LogMessage((fst *)&v81, (uint64_t)v79);
          v48 = (_QWORD *)fst::cerr(v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Read ", 5);
          v49 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" bytes. ", 8);
          v50 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" remaining.", 11);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v81);
          if (v80 < 0)
            operator delete(v79[0]);
        }
        v44 += v45;
        if (!a3)
          return v77;
      }
      std::string::basic_string[abi:ne180100]<0>(v79, "ERROR");
      v51 = fst::LogMessage::LogMessage((fst *)&v81, (uint64_t)v79);
      v52 = (_QWORD *)fst::cerr(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Failed to read ", 15);
      v53 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" bytes at offset ", 17);
      v54 = (_QWORD *)std::ostream::operator<<();
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"from \"", 6);
      v56 = *(char *)(a2 + 23);
      if (v56 >= 0)
        v57 = a2;
      else
        v57 = *(_QWORD *)a2;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(a2 + 23);
      else
        v58 = *(_QWORD *)(a2 + 8);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"\".", 2);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v81);
      if (v80 < 0)
        operator delete(v79[0]);
      (*(void (**)(fst::MappedFile *))(*(_QWORD *)v77 + 8))(v77);
      return 0;
    }
    return v77;
  }
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v14 = open(v13, 0);
  if (v14 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v5 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mapping of file failed: invalid file descriptor", 47);
    goto LABEL_20;
  }
  v15 = sysconf(29);
  v16 = v84 % v15;
  v17 = v16 + a3;
  v18 = (char *)mmap(0, v16 + a3, 1, 1, v14, v84 / v15 * v15);
  if (close(v14) || v18 == (char *)-1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v23 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
    v24 = (_QWORD *)fst::cerr(v23);
    v5 = a2;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Mapping of file failed: ", 24);
    v26 = __error();
    v27 = strerror(*v26);
    v28 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
    goto LABEL_20;
  }
  v19 = *(_DWORD *)(a2 + 56);
  v77 = (fst::MappedFile *)operator new();
  *(_QWORD *)v77 = &off_1E5D19480;
  *((_QWORD *)v77 + 1) = &v18[v16];
  *((_QWORD *)v77 + 2) = v18;
  *((_QWORD *)v77 + 3) = v17;
  *((_DWORD *)v77 + 8) = v16;
  v20 = (std::string *)((char *)v77 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v77 + 7) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v77 + 16) = v19;
  *((_BYTE *)v77 + 68) = 0;
  std::istream::seekg();
  if (!a1)
  {
    (*(void (**)(fst::MappedFile *))(*(_QWORD *)v77 + 8))(v77);
    v5 = a2;
    goto LABEL_36;
  }
  v29 = *(unsigned __int8 *)(a2 + 23);
  v30 = (v29 & 0x80u) != 0;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a2 + 8);
  if (v30)
    v31 = *(const std::string::value_type **)a2;
  else
    v31 = (const std::string::value_type *)a2;
  if (v29 >= 8)
  {
    v32 = &v31[v29];
    v33 = (std::string::value_type *)v31;
    do
    {
      v34 = (char *)memchr(v33, 46, v29 - 7);
      if (!v34)
        break;
      if (*(_QWORD *)v34 == 0x2E646574726F732ELL)
      {
        if (v34 != v32
          && v34 - v31 != -1
          && vm_behavior_set(*MEMORY[0x1E0C83DA0], ~*MEMORY[0x1E0C85AC0] & (unint64_t)&v18[v17 - (uint64_t)(9 * v17) / 10], ~*MEMORY[0x1E0C85AC0] & (unint64_t)((uint64_t)(9 * v17) / 10), 1))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v61 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
          v62 = (_QWORD *)fst::cerr(v61);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Failed to hint VM for ", 22);
          v64 = *(char *)(a2 + 23);
          v65 = v64 >= 0 ? a2 : *(_QWORD *)a2;
          v66 = v64 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)v79);
          if (v83 < 0)
            operator delete(__p[0]);
        }
        break;
      }
      v33 = v34 + 1;
      v29 = v32 - v33;
    }
    while (v32 - v33 >= 8);
  }
  if (*(_DWORD *)(a2 + 48) == 2)
    fst::MappedFile::SetLocked(v77, 1);
  if (FLAGS_v >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v68 = fst::LogMessage::LogMessage((fst *)v79, (uint64_t)__p);
    v69 = (_QWORD *)fst::cerr(v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"mmap'ed region of ", 18);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" at offset ", 11);
    v71 = (_QWORD *)std::ostream::operator<<();
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" from ", 6);
    v73 = *(char *)(a2 + 23);
    v74 = v73 >= 0 ? a2 : *(_QWORD *)a2;
    v75 = v73 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" to addr ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v79);
    if (v83 < 0)
      operator delete(__p[0]);
  }
  return v77;
}

void sub_1AD89C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD89C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const TLocaleInfo **buildRegExp(const TFileObject *a1, TLexicon *a2, int a3)
{
  const TLocaleInfo **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  void **p_p;
  __int128 *v15;
  const char *v16;
  int v17;
  void **v18;
  uint64_t v19;
  void **v20;
  __int128 *v21;
  __int32 *v22;
  const char *v24;
  _QWORD *exception;
  const char *v26;
  _QWORD *v27;
  void *__p;
  __int128 v29;
  _BYTE v30[7];
  char v31;
  char v32;
  __int128 v33;
  char v34;
  void *v35;
  int64x2_t v36;
  uint64_t v37;

  v35 = &unk_1AE144E8C;
  v36 = vdupq_n_s64(1uLL);
  v37 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v35, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "");
    TException::TException(&__p, &v33);
    __p = &unk_1E5D16668;
    if (v31 >= 0)
      v24 = (const char *)&v29;
    else
      v24 = (const char *)v29;
    conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 70);
    TException::~TException((std::exception *)&__p);
    if (v34 < 0)
      operator delete((void *)v33);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(exception, (__int128 *)&__p);
    *exception = &unk_1E5D16668;
  }
  v6 = (const TLocaleInfo **)operator new();
  TRegExp::TRegExp(v6, (uint64_t)a2 + 224);
  v7 = *((_QWORD *)a1 + 3);
  if (v7)
  {
    v8 = 0;
    v9 = "Error : %s%s\n";
    while (1)
    {
      v10 = v8;
      v8 = 1;
      if ((TFileObject::verify((TFileObject *)v7, 1, 0) & 1) == 0)
      {
        if (*(_DWORD *)(v7 + 40) != 2)
        {
          if (a3)
          {
            if (TLexicon::checkName((uint64_t)a2, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              loggableFileObject((uint64_t *)v7);
              v11 = SHIBYTE(v29);
              v12 = (void **)__p;
              loggableUnicode(*(unsigned int **)(v7 + 24), &v33);
              if (v11 >= 0)
                p_p = &__p;
              else
                p_p = v12;
              v15 = &v33;
              if (v34 < 0)
                v15 = (__int128 *)v33;
              tknPrintf("Error: %s'%s' is an invalid token name.\n", v13, p_p, v15);
              if (v34 < 0)
                operator delete((void *)v33);
              if (SHIBYTE(v29) < 0)
                operator delete(__p);
              v8 = 1;
              goto LABEL_31;
            }
            if (*(_BYTE *)(getPropCheckTokenExistence() + 8)
              && !TLexicon::findHeadClone((uint64_t)a2, *(__int32 **)(v7 + 24)))
            {
              v16 = v9;
              loggableFileObject((uint64_t *)v7);
              v17 = SHIBYTE(v29);
              v18 = (void **)__p;
              loggableUnicode(*(unsigned int **)(v7 + 24), &v33);
              if (v17 >= 0)
                v20 = &__p;
              else
                v20 = v18;
              v21 = &v33;
              if (v34 < 0)
                v21 = (__int128 *)v33;
              tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v19, v20, v21);
              v9 = v16;
              if (v34 < 0)
                operator delete((void *)v33);
              if (SHIBYTE(v29) < 0)
                operator delete(__p);
            }
          }
          v8 = v10;
LABEL_31:
          __p = v30;
          v29 = xmmword_1AE1418C0;
          v32 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v7 + 24), (uint64_t)&__p, 0, 3);
          if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
          {
            if (v32)
            {
              LODWORD(v33) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v29 + 1), (int *)&v33, 1uLL);
              v22 = (__int32 *)__p;
              --*((_QWORD *)&v29 + 1);
            }
            else
            {
              v22 = (__int32 *)__p;
              if ((_QWORD)v29)
                *((_DWORD *)__p + v29 - 1) = 0;
            }
          }
          else
          {
            v22 = (__int32 *)__p;
            *((_DWORD *)__p + *((_QWORD *)&v29 + 1)) = 0;
          }
          TRegExp::add(v6, v22, 0);
          if (v32 && __p != v30 && __p)
            MEMORY[0x1AF44D160]();
          goto LABEL_41;
        }
        TRegExp::add(v6, *(__int32 **)(v7 + 24), 0);
        v8 = v10;
      }
LABEL_41:
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
      {
        if ((v8 & 1) != 0)
        {
          TRegExp::~TRegExp((TRegExp *)v6);
          MEMORY[0x1AF44D190]();
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          TException::TException(&__p, &v33);
          __p = &unk_1E5D16668;
          if (v31 >= 0)
            v26 = (const char *)&v29;
          else
            v26 = (const char *)v29;
          conditionalAssert(v26, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 125);
          TException::~TException((std::exception *)&__p);
          if (v34 < 0)
            operator delete((void *)v33);
          v27 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(v27, (__int128 *)&__p);
          *v27 = &unk_1E5D16668;
        }
        break;
      }
    }
  }
  TRegExp::doneAdding((TRegExp *)v6);
  return v6;
}

void sub_1AD89C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AD89C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1AD89C90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  TException::~TException(&a13);
  if (*(char *)(v18 - 121) < 0)
    operator delete(*(void **)(v18 - 144));
  _Unwind_Resume(a1);
}

void sub_1AD89C990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (LOBYTE(STACK[0x438]))
    buildRegExp((uint64_t *)va, v5);
  _Unwind_Resume(a1);
}

void TFsaBuilder::minimizeChildren(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t **v9;
  uint64_t **v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(a3 + 24);
  if (v4)
  {
    v9 = a4 + 1;
    do
    {
      v11 = *(_QWORD **)(v4 + 16);
      if (!v11[1])
      {
        TFsaBuilder::minimizeChildren(a1, a2);
        v10 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>((uint64_t)a4, (uint64_t *)&v11);
        if (v9 == v10)
        {
          v11[1] = 1;
          std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(a4, (uint64_t *)&v11, (uint64_t *)&v11);
        }
        else
        {
          TFsa::moveTrans((uint64_t)a2, v4, a3, (uint64_t)v10[4]);
          TFsa::deleteState(a2, v11);
        }
      }
      v4 = *(_QWORD *)(v4 + 40);
    }
    while (v4);
  }
}

uint64_t TFsa::moveTrans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != a3)
  {
    TState::deleteTrans(v6, a2, 1u);
    TState::addTrans(a3, a2, 1u);
  }
  result = *(_QWORD *)(a2 + 16);
  if (result != a4)
  {
    TState::deleteTrans(result, a2, 0);
    return TState::addTrans(a4, a2, 0);
  }
  return result;
}

void TFsaBuilder::addSuffix(int a1, TAllocator *this, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  int v8;

  v4 = (uint64_t)a3;
  if (*a4)
  {
    v6 = a4 + 1;
    do
    {
      v7 = TFsa::newState(this, 0);
      TFsa::newTrans(this, v4, (uint64_t)v7, *(v6 - 1));
      v8 = *v6++;
      v4 = (uint64_t)v7;
    }
    while (v8);
  }
  else
  {
    v7 = a3;
  }
  TFsa::addExtremity((uint64_t)this, (uint64_t)v7, 1u);
}

TFsa *TFsaBuilder::operator()(uint64_t a1, uint64_t *a2)
{
  TFsa *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v14;
  _QWORD *v15[2];

  v4 = (TFsa *)operator new();
  TFsa::TFsa(v4);
  v5 = TFsa::newState(v4, 0);
  TFsa::addExtremity((uint64_t)v4, (uint64_t)v5, 0);
  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      v8 = *(_DWORD **)(v6 + 8 * v7);
      v9 = v5[3];
      if (v9)
      {
        v10 = v5;
        do
        {
          if (*v8 == *(_DWORD *)v9)
          {
            v10 = *(_QWORD **)(v9 + 16);
            v11 = v10 + 3;
            ++v8;
          }
          else
          {
            v11 = (uint64_t *)(v9 + 40);
          }
          v9 = *v11;
        }
        while (v9);
      }
      else
      {
        v10 = v5;
      }
      TFsaBuilder::minimizeChildren(a1, v4, (uint64_t)v10, &v14);
      TFsaBuilder::addSuffix(v12, v4, v10, v8);
      ++v7;
      v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 3);
  }
  TFsaBuilder::minimizeChildren(a1, v4, (uint64_t)v5, &v14);
  std::__tree<int>::destroy((uint64_t)&v14, v15[0]);
  return v4;
}

void sub_1AD89CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void TDecompounder::load(TDecompounder *this, TInputStream *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  std::exception_vtbl *v10;
  uint64_t v11;
  std::exception *v12;
  void **v13;
  int v14;
  std::exception_vtbl *v15;
  uint64_t v16;
  std::exception *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  const __int32 **v30;
  const __int32 **v31;
  unint64_t v32;
  uint64_t v33;
  TFsa *v34;
  std::exception_vtbl *v35;
  _QWORD *v36;
  std::exception_vtbl *v37;
  _QWORD *v38;
  const char *v39;
  _QWORD *exception;
  int64x2_t *v41;
  _QWORD *v42;
  char v43;
  void *v44[2];
  char v45;
  std::exception v46[2];
  char v47;
  char v48;
  void *__p[2];
  char v50;
  void *v51;
  char *v52;
  char *v53;
  void *v54[2];
  char v55;
  std::exception v56[2];
  char v57;
  char v58;
  std::exception v59;
  int64x2_t v60;
  uint64_t v61;
  char v62;
  std::exception v63;
  __int128 v64;
  uint64_t v65;
  __int32 *v66;
  __int128 v67;
  uint64_t v68;
  __int32 *v69;
  __int128 v70;
  uint64_t v71;
  __int32 *v72;
  __int128 v73;
  uint64_t v74;
  __int32 *v75;
  __int128 v76;
  uint64_t v77;
  __int32 *v78;
  __int128 v79;
  uint64_t v80;
  __int32 *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (TInputStream::verifyHeader((uint64_t)a2, "TknDecomp", (uint64_t)&pTknDecompVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "");
    TException::TException(&v63, (__int128 *)v44);
    v63.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v65 >= 0)
      v39 = (const char *)&v64;
    else
      v39 = (const char *)v64;
    conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 382);
    TException::~TException(&v63);
    if (v45 < 0)
      operator delete(v44[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v63, "");
    TException::TException(exception, (__int128 *)&v63);
    *exception = &unk_1E5D16668;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v44, a2);
  v4 = v44[0];
  v64 = xmmword_1AE144E70;
  v63.__vftable = (std::exception_vtbl *)dword_1AE144E90;
  v67 = xmmword_1AE144E70;
  v65 = -1;
  v66 = dword_1AE144EB0;
  v70 = xmmword_1AE144E70;
  v68 = -1;
  v69 = dword_1AE144ED8;
  v73 = xmmword_1AE144E70;
  v71 = -1;
  v72 = dword_1AE144F14;
  v76 = xmmword_1AE143210;
  v74 = -1;
  v75 = dword_1AE144F4C;
  v77 = -1;
  v79 = xmmword_1AE144E70;
  v78 = dword_1AE144F8C;
  v82 = xmmword_1AE144E70;
  v80 = 1;
  v81 = dword_1AE144FC8;
  v83 = 1;
  if (TFileObject::verify((uint64_t)v44[0], (uint64_t)&v63, 7uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "");
    TException::TException(&v59, (__int128 *)v56);
    v59.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v61 >= 0)
      v41 = &v60;
    else
      v41 = (int64x2_t *)v60.i64[0];
    conditionalAssert(v41->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 404);
    TException::~TException(&v59);
    if (v57 < 0)
      operator delete(v56[0].__vftable);
    v42 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v59, "");
    TException::TException(v42, (__int128 *)&v59);
    *v42 = &unk_1E5D16668;
  }
  v5 = v4[3];
  if (v5)
  {
    v43 = 0;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144E90))
      {
        if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144EB0))
        {
          *((_QWORD *)this + 3) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144ED8))
        {
          *((_QWORD *)this + 5) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144F14))
        {
          *((_QWORD *)this + 4) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144F4C))
        {
          *((_QWORD *)this + 6) = buildRegExp((const TFileObject *)v5, *(TLexicon **)this, 1);
        }
        else if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144F8C))
        {
          v43 = 1;
        }
        else
        {
          v43 |= wcscmp(*(const __int32 **)(v5 + 8), dword_1AE144FC8) == 0;
        }
        goto LABEL_70;
      }
      v6 = *(_QWORD *)this;
      v60 = vdupq_n_s64(1uLL);
      v59.__vftable = (std::exception_vtbl *)&unk_1AE144E8C;
      v61 = -1;
      if (TFileObject::verify(v5, (uint64_t)&v59, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v54, "");
        TException::TException(v56, (__int128 *)v54);
        v56[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v58 >= 0)
          v35 = (std::exception_vtbl *)&v56[1];
        else
          v35 = v56[1].__vftable;
        conditionalAssert((const char *)v35, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 304);
        TException::~TException(v56);
        if (v55 < 0)
          operator delete(v54[0]);
        v36 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v56, "");
        TException::TException(v36, (__int128 *)v56);
        *v36 = &unk_1E5D16668;
      }
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v7 = *(_QWORD *)(v5 + 24);
      if (!v7)
      {
        v31 = 0;
        v30 = 0;
        goto LABEL_64;
      }
      v8 = 0;
      do
      {
        if ((TFileObject::verify((TFileObject *)v7, 0, 0) & 1) != 0)
          goto LABEL_27;
        if (TLexicon::checkName(v6, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          loggableFileObject((uint64_t *)v7);
          v9 = v47;
          v10 = v46[0].__vftable;
          loggableUnicode(*(unsigned int **)(v7 + 24), __p);
          if (v9 >= 0)
            v12 = v46;
          else
            v12 = (std::exception *)v10;
          if (v50 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          tknPrintf("Error: %s'%s' is an invalid token name.\n", v11, v12, v13);
          if (v50 < 0)
            operator delete(__p[0]);
          if (v47 < 0)
            operator delete(v46[0].__vftable);
LABEL_27:
          v8 = 1;
          goto LABEL_28;
        }
        if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v6, *(__int32 **)(v7 + 24)))
        {
          loggableFileObject((uint64_t *)v7);
          v14 = v47;
          v15 = v46[0].__vftable;
          loggableUnicode(*(unsigned int **)(v7 + 24), __p);
          if (v14 >= 0)
            v17 = v46;
          else
            v17 = (std::exception *)v15;
          if (v50 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v16, v17, v18);
          if (v50 < 0)
            operator delete(__p[0]);
          if (v47 < 0)
            operator delete(v46[0].__vftable);
        }
        v19 = *(_QWORD *)(v7 + 24);
        v20 = v52;
        if (v52 >= v53)
        {
          v22 = (v52 - (_BYTE *)v51) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = (v53 - (_BYTE *)v51) >> 2;
          if (v23 <= v22 + 1)
            v23 = v22 + 1;
          if ((unint64_t)(v53 - (_BYTE *)v51) >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v53, v24);
          else
            v25 = 0;
          v26 = &v25[8 * v22];
          *(_QWORD *)v26 = v19;
          v21 = v26 + 8;
          v28 = (char *)v51;
          v27 = v52;
          if (v52 != v51)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            v27 = (char *)v51;
          }
          v51 = v26;
          v52 = v21;
          v53 = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v52 = v19;
          v21 = v20 + 8;
        }
        v52 = v21;
LABEL_28:
        v7 = *(_QWORD *)(v7 + 16);
      }
      while (v7);
      if ((v8 & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v46, (__int128 *)__p);
        v46[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v48 >= 0)
          v37 = (std::exception_vtbl *)&v46[1];
        else
          v37 = v46[1].__vftable;
        conditionalAssert((const char *)v37, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 337);
        TException::~TException(v46);
        if (v50 < 0)
          operator delete(__p[0]);
        v38 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v46, "");
        TException::TException(v38, (__int128 *)v46);
        *v38 = &unk_1E5D16668;
      }
      v30 = (const __int32 **)v51;
      v31 = (const __int32 **)v52;
LABEL_64:
      v32 = 126 - 2 * __clz(v31 - v30);
      if (v31 == v30)
        v33 = 0;
      else
        v33 = v32;
      std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>((uint64_t)v30, v31, (uint64_t)&v62, v33, 1);
      v34 = TFsaBuilder::operator()((uint64_t)v46, (uint64_t *)&v51);
      if (v51)
      {
        v52 = (char *)v51;
        operator delete(v51);
      }
      *((_QWORD *)this + 2) = v34;
LABEL_70:
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
      {
        if ((v43 & 1) != 0)
          tknPrintString("Warning: Decompounder model has been lobotomized on load.\n");
        break;
      }
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v44);
}

void sub_1AD89D79C()
{
  uint64_t v0;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v0);
  JUMPOUT(0x1AD89D8F0);
}

void sub_1AD89D8E8()
{
  JUMPOUT(0x1AD89D8F0);
}

void sub_1AD89D988(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AD89D994(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1AD89D99CLL);
  __clang_call_terminate(a1);
}

void TDecompounder::TDecompounder(TDecompounder *this, TInputStream *a2, TLexicon *a3, TTokenizerParamManager *a4)
{
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  TDecompounder::load(this, a2);
}

void TDecompounder::~TDecompounder(TDecompounder *this)
{
  TFsa *v2;
  TRegExp *v3;
  TRegExp *v4;
  TRegExp *v5;
  TRegExp *v6;

  v2 = (TFsa *)*((_QWORD *)this + 2);
  if (v2)
  {
    TFsa::~TFsa(v2);
    MEMORY[0x1AF44D190]();
  }
  v3 = (TRegExp *)*((_QWORD *)this + 3);
  if (v3)
  {
    TRegExp::~TRegExp(v3);
    MEMORY[0x1AF44D190]();
  }
  v4 = (TRegExp *)*((_QWORD *)this + 4);
  if (v4)
  {
    TRegExp::~TRegExp(v4);
    MEMORY[0x1AF44D190]();
  }
  v5 = (TRegExp *)*((_QWORD *)this + 5);
  if (v5)
  {
    TRegExp::~TRegExp(v5);
    MEMORY[0x1AF44D190]();
  }
  v6 = (TRegExp *)*((_QWORD *)this + 6);
  if (v6)
  {
    TRegExp::~TRegExp(v6);
    MEMORY[0x1AF44D190]();
  }
}

uint64_t TDecompounder::isValidWord(TDecompounder *this, int **a2, __int32 **a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t ActiveConfigHandle;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  unsigned __int8 v25;
  int isUpper;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  __int32 *v35;
  TLocaleInfo *v37;
  TLocaleInfo *v38;
  __int32 *v39;
  __int128 v40;
  _BYTE v41[785];
  char v42;
  __int32 *v43;
  __int128 v44;
  _BYTE v45[785];
  char v46;
  unsigned int *v47;
  __int128 v48;
  _BYTE v49[1024];
  char v50;
  int v51;

  if (a4 && (a5 & 1) != 0)
    return 0;
  v47 = (unsigned int *)v49;
  v48 = xmmword_1AE1418C0;
  v50 = 1;
  TWord::getTokenName(a3, (uint64_t)&v47);
  v11 = *((_QWORD *)this + 1);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 5616));
  if (!*(_BYTE *)(v11 + TParam::getValidConfig((TParam *)(v11 + 5616), ActiveConfigHandle) + 5768))
    goto LABEL_44;
  v13 = *((_QWORD *)this + 1);
  v14 = TParam::getActiveConfigHandle((TParam *)(v13 + 5120));
  if (!*(_BYTE *)(v13 + TParam::getValidConfig((TParam *)(v13 + 5120), v14) + 5272))
  {
    v17 = (_QWORD *)*((_QWORD *)this + 3);
    if (v17)
    {
      if (*((_QWORD *)&v48 + 1) >= (unint64_t)v48)
      {
        if (v50)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v18 = v47;
          --*((_QWORD *)&v48 + 1);
        }
        else
        {
          v18 = v47;
          if ((_QWORD)v48)
            v47[(_QWORD)v48 - 1] = 0;
        }
      }
      else
      {
        v18 = v47;
        v47[*((_QWORD *)&v48 + 1)] = 0;
      }
      if (TRegExp::match(v17, v18, 0))
        goto LABEL_51;
    }
  }
  if (a4)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 5);
    if (v15)
    {
      if (*((_QWORD *)&v48 + 1) >= (unint64_t)v48)
      {
        if (v50)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v16 = v47;
          --*((_QWORD *)&v48 + 1);
        }
        else
        {
          v16 = v47;
          if ((_QWORD)v48)
            v47[(_QWORD)v48 - 1] = 0;
        }
      }
      else
      {
        v16 = v47;
        v47[*((_QWORD *)&v48 + 1)] = 0;
      }
      if (TRegExp::match(v15, v16, 0))
        goto LABEL_51;
    }
    if ((a5 & 1) != 0)
    {
LABEL_23:
      v19 = (_QWORD *)*((_QWORD *)this + 4);
      if (v19)
      {
        if (*((_QWORD *)&v48 + 1) < (unint64_t)v48)
        {
          v20 = v47;
          v47[*((_QWORD *)&v48 + 1)] = 0;
          goto LABEL_43;
        }
        if (v50)
        {
LABEL_33:
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)&v43, 1uLL);
          v20 = v47;
          --*((_QWORD *)&v48 + 1);
          goto LABEL_43;
        }
        v20 = v47;
        if ((_QWORD)v48)
          v47[(_QWORD)v48 - 1] = 0;
LABEL_43:
        if (TRegExp::match(v19, v20, 0))
          goto LABEL_51;
        goto LABEL_44;
      }
      goto LABEL_44;
    }
    if ((a4 & 1) != 0)
      goto LABEL_44;
  }
  else if (a5)
  {
    goto LABEL_23;
  }
  v19 = (_QWORD *)*((_QWORD *)this + 6);
  if (v19)
  {
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v48)
    {
      v20 = v47;
      v47[*((_QWORD *)&v48 + 1)] = 0;
      goto LABEL_43;
    }
    if (v50)
      goto LABEL_33;
    v20 = v47;
    if ((_QWORD)v48)
      v47[(_QWORD)v48 - 1] = 0;
    goto LABEL_43;
  }
LABEL_44:
  v21 = *((_QWORD *)this + 1);
  v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 5368));
  if (*(_BYTE *)(v21 + TParam::getValidConfig((TParam *)(v21 + 5368), v22) + 5520))
    v23 = a5 == 0;
  else
    v23 = 1;
  if (v23)
    goto LABEL_52;
  v24 = **a2;
  {
    v37 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v37);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v37;
  }
  isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24);
  v27 = *v47;
  {
    v38 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v38);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v38;
  }
  if (isUpper == TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27))
  {
LABEL_52:
    v29 = *((_QWORD *)this + 1);
    v30 = TParam::getActiveConfigHandle((TParam *)(v29 + 6112));
    v10 = 1;
    if (*(_BYTE *)(v29 + TParam::getValidConfig((TParam *)(v29 + 6112), v30) + 6264))
      v31 = a5 == 0;
    else
      v31 = 1;
    if (v31)
      goto LABEL_99;
    v43 = (__int32 *)v45;
    v44 = xmmword_1AE1418C0;
    v46 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v43);
    v39 = (__int32 *)v41;
    v40 = xmmword_1AE1418C0;
    v42 = 1;
    TWord::getCategoryTag((uint64_t)a3, &v39);
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v51, 1uLL);
        v32 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v32 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v32 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    if (!wcscmp(v32, dword_1AE144FE8))
      goto LABEL_93;
    if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
    {
      if (v46)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), &v51, 1uLL);
        v33 = v43;
        --*((_QWORD *)&v44 + 1);
      }
      else
      {
        v33 = v43;
        if ((_QWORD)v44)
          v43[(_QWORD)v44 - 1] = 0;
      }
    }
    else
    {
      v33 = v43;
      v43[*((_QWORD *)&v44 + 1)] = 0;
    }
    if (!wcscmp(v33, dword_1AE144FE8))
      goto LABEL_93;
    if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
    {
      if (v46)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), &v51, 1uLL);
        v34 = v43;
        --*((_QWORD *)&v44 + 1);
      }
      else
      {
        v34 = v43;
        if ((_QWORD)v44)
          v43[(_QWORD)v44 - 1] = 0;
      }
    }
    else
    {
      v34 = v43;
      v43[*((_QWORD *)&v44 + 1)] = 0;
    }
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v51 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v51, 1uLL);
        v35 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v35 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v35 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    if (!wcsncmp(v34, v35, 2uLL))
    {
LABEL_93:
      if (v42 && v39 != (__int32 *)v41 && v39)
        MEMORY[0x1AF44D160]();
      if (v46 && v43 != (__int32 *)v45 && v43)
        MEMORY[0x1AF44D160]();
      goto LABEL_99;
    }
    if (v42 && v39 != (__int32 *)v41 && v39)
      MEMORY[0x1AF44D160]();
    if (v46 && v43 != (__int32 *)v45 && v43)
      MEMORY[0x1AF44D160]();
  }
LABEL_51:
  v10 = 0;
LABEL_99:
  if (v50 && v47 != (unsigned int *)v49 && v47)
    MEMORY[0x1AF44D160]();
  return v10;
}

void sub_1AD89E1B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xC70]))
  {
    v4 = STACK[0x858];
    if (STACK[0x858] != v2)
    {
      if (v4)
        MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::decompound(TDecompounder *this, const TWord *a2, TFsa *a3)
{
  uint64_t v3;
  unint64_t *v4;
  __int32 **v5;
  TWord *v6;
  TAllocator **v7;
  int *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  _BYTE *v12;
  TAllocator *v13;
  uint64_t ActiveConfigHandle;
  TAllocator *v15;
  uint64_t *v16;
  uint64_t *v17;
  TAllocator *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  TAllocator *v23;
  int *v24;
  TAllocator *v25;
  uint64_t v26;
  size_t v27;
  TAllocator *v28;
  uint64_t v29;
  size_t v30;
  _DWORD *v31;
  int v32;
  int *v33;
  __int32 *v34;
  BOOL HeadClonesCollated;
  int v36;
  BOOL v37;
  int *v38;
  TAllocator *v39;
  uint64_t v40;
  size_t v41;
  TAllocator *v42;
  uint64_t v43;
  uint64_t ValidConfig;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  TWord *v56;
  TAllocator *v57;
  uint64_t v58;
  uint64_t v59;
  TAllocator *v60;
  uint64_t v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  TAllocator *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t j;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t TransCount;
  _QWORD *v120;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *k;
  _QWORD *v126;
  std::exception_vtbl *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  const char *v138;
  _QWORD *exception;
  uint64_t WordSpec;
  int **v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  void *v147[2];
  char v148;
  void *__p;
  char *v150;
  char *v151;
  void *v152;
  char *v153;
  char *v154;
  void *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  __int128 v159;
  _BYTE v160[809];
  char v161;
  void *v162;
  _QWORD *v163;
  _BYTE *v164;
  __int128 v165;
  _BYTE v166[785];
  char v167;
  _BYTE *v168;
  __int128 v169;
  _BYTE v170[1024];
  char v171;
  std::exception v172;
  __int128 v173;
  _BYTE v174[1024];
  char v175;
  uint64_t v176;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v146 = v4;
  v6 = (TWord *)v5;
  v7 = (TAllocator **)v3;
  v176 = *MEMORY[0x1E0C80C00];
  v168 = v170;
  v169 = xmmword_1AE1418C0;
  v171 = 1;
  TWord::getWrittenForm(v5, (uint64_t)&v168);
  WordSpec = TWord::getWordSpec(v6);
  v164 = v166;
  v165 = xmmword_1AE1418C0;
  v167 = 1;
  v8 = (int *)TStringParam::get((TAllocator *)((char *)v7[1] + 10736));
  TBuffer<wchar_t>::assign((uint64_t)&v164, v8);
  *((_DWORD *)v164 + 70) = 48;
  v172.__vftable = 0;
  std::vector<TState *>::vector(&v162, *((_QWORD *)&v169 + 1) + 1, &v172);
  v141 = (int **)v6;
  v9 = TFsa::newState((TAllocator *)v146, 0);
  *(_QWORD *)v162 = v9;
  TFsa::addExtremity((uint64_t)v146, *(_QWORD *)v162, 0);
  v10 = *((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    for (i = 0; i < v10; ++i)
    {
      v143 = *((_QWORD *)v162 + i);
      if (!v143)
        continue;
      v158 = v160;
      v159 = xmmword_1AE1418C0;
      v161 = 1;
      if (v10 >= (unint64_t)v169)
      {
        if (v171)
        {
          LODWORD(v172.__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v168, v10, (int *)&v172, 1uLL);
          v12 = v168;
          --*((_QWORD *)&v169 + 1);
        }
        else
        {
          v12 = v168;
          if ((_QWORD)v169)
            *(_DWORD *)&v168[4 * v169 - 4] = 0;
        }
      }
      else
      {
        v12 = v168;
        *(_DWORD *)&v168[4 * v10] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v158, (int *)&v12[4 * i]);
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v13 = v7[1];
      ActiveConfigHandle = TParam::getActiveConfigHandle((TAllocator *)((char *)v13 + 5120));
      if (!*((_BYTE *)v13 + TParam::getValidConfig((TAllocator *)((char *)v13 + 5120), ActiveConfigHandle) + 5272)
        || (v15 = v7[2]) == 0
        || !*((_QWORD *)v15 + 25))
      {
        v23 = *v7;
        if (*((_QWORD *)&v159 + 1) >= (unint64_t)v159)
        {
          if (v161)
          {
            LODWORD(v172.__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v158, *((unint64_t *)&v159 + 1), (int *)&v172, 1uLL);
            v24 = (int *)v158;
            --*((_QWORD *)&v159 + 1);
          }
          else
          {
            v24 = (int *)v158;
            if ((_QWORD)v159)
              *(_DWORD *)&v158[4 * v159 - 4] = 0;
          }
        }
        else
        {
          v24 = (int *)v158;
          *(_DWORD *)&v158[4 * *((_QWORD *)&v159 + 1)] = 0;
        }
        v25 = v7[1];
        v26 = TParam::getActiveConfigHandle((TAllocator *)((char *)v25 + 16456));
        v27 = *((int *)v25 + TParam::getValidConfig((TAllocator *)((char *)v25 + 16456), v26) + 4154);
        v28 = v7[1];
        v29 = TParam::getActiveConfigHandle((TAllocator *)((char *)v28 + 16104));
        v30 = *((int *)v28 + TParam::getValidConfig((TAllocator *)((char *)v28 + 16104), v29) + 4066);
        if (*((_QWORD *)&v165 + 1) >= (unint64_t)v165)
        {
          if (v167)
          {
            LODWORD(v172.__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v164, *((unint64_t *)&v165 + 1), (int *)&v172, 1uLL);
            v31 = v164;
            --*((_QWORD *)&v165 + 1);
          }
          else
          {
            v31 = v164;
            if ((_QWORD)v165)
              *(_DWORD *)&v164[4 * v165 - 4] = 0;
          }
        }
        else
        {
          v31 = v164;
          *(_DWORD *)&v164[4 * *((_QWORD *)&v165 + 1)] = 0;
        }
        v172.__vftable = (std::exception_vtbl *)v174;
        v173 = xmmword_1AE1418C0;
        v175 = 1;
        v32 = *v24;
        if (*v24)
        {
          v33 = v24 + 1;
          do
          {
            LODWORD(v152) = v32;
            TBuffer<wchar_t>::insert((uint64_t)&v172, *((unint64_t *)&v173 + 1), (int *)&v152, 1uLL);
            if (*((_QWORD *)&v173 + 1) >= (unint64_t)v173)
            {
              if (v175)
              {
                LODWORD(v152) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v172, *((unint64_t *)&v173 + 1), (int *)&v152, 1uLL);
                v34 = (__int32 *)v172.__vftable;
                --*((_QWORD *)&v173 + 1);
              }
              else
              {
                v34 = (__int32 *)v172.__vftable;
                if ((_QWORD)v173)
                  *((_DWORD *)v172.__vftable + v173 - 1) = 0;
              }
            }
            else
            {
              v34 = (__int32 *)v172.__vftable;
              *((_DWORD *)&v172.~exception + *((_QWORD *)&v173 + 1)) = 0;
            }
            HeadClonesCollated = TLexicon::findHeadClonesCollated(v23, v34, v31, v27, v30, &v155);
            v36 = *v33++;
            v32 = v36;
            if (v36)
              v37 = HeadClonesCollated;
            else
              v37 = 0;
          }
          while (v37);
          if (v175 && v172.__vftable != (std::exception_vtbl *)v174 && v172.__vftable)
            MEMORY[0x1AF44D160]();
        }
        goto LABEL_57;
      }
      v16 = (uint64_t *)*((_QWORD *)v15 + 19);
      v17 = (uint64_t *)*((_QWORD *)v15 + 20);
      if (v16 != v17)
      {
        while (!*v16)
        {
          if (++v16 == v17)
          {
            v16 = v17;
            break;
          }
        }
      }
      v18 = *v7;
      v19 = *v16;
      v20 = *((_QWORD *)&v159 + 1);
      v21 = v159;
      if (*((_QWORD *)&v159 + 1) >= (unint64_t)v159)
      {
        if (v161)
        {
          LODWORD(v152) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v158, *((unint64_t *)&v159 + 1), (int *)&v152, 1uLL);
          v20 = --*((_QWORD *)&v159 + 1);
          v22 = (int *)v158;
          v21 = v159;
        }
        else
        {
          v22 = (int *)v158;
          if (!(_QWORD)v159)
            goto LABEL_53;
          *(_DWORD *)&v158[4 * v159 - 4] = 0;
        }
      }
      else
      {
        v22 = (int *)v158;
        *(_DWORD *)&v158[4 * *((_QWORD *)&v159 + 1)] = 0;
      }
      if (v20 >= v21)
      {
        if (v161)
        {
          LODWORD(v152) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v158, v20, (int *)&v152, 1uLL);
          v38 = (int *)v158;
          --*((_QWORD *)&v159 + 1);
          goto LABEL_56;
        }
        if (v21)
          v22[v21 - 1] = 0;
      }
      else
      {
        v22[v20] = 0;
      }
LABEL_53:
      v38 = v22;
LABEL_56:
      v39 = v7[1];
      v40 = TParam::getActiveConfigHandle((TAllocator *)((char *)v39 + 16456));
      v41 = *((int *)v39 + TParam::getValidConfig((TAllocator *)((char *)v39 + 16456), v40) + 4154);
      v42 = v7[1];
      v43 = TParam::getActiveConfigHandle((TAllocator *)((char *)v42 + 16104));
      ValidConfig = TParam::getValidConfig((TAllocator *)((char *)v42 + 16104), v43);
      fsaSearch(v18, v19, v22, v38, (__int32 *)&v172, &v172, 0, v41, *((int *)v42 + ValidConfig + 4066), &v155);
LABEL_57:
      v152 = 0;
      v153 = 0;
      v154 = 0;
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v154, 1uLL);
      *(_QWORD *)v45 = v143;
      v47 = v45 + 8;
      v49 = (char *)v152;
      v48 = v153;
      v50 = v45;
      if (v153 != v152)
      {
        do
        {
          v51 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *((_QWORD *)v50 - 1) = v51;
          v50 -= 8;
        }
        while (v48 != v49);
        v48 = (char *)v152;
      }
      v152 = v50;
      v153 = v45 + 8;
      v154 = &v45[8 * v46];
      if (v48)
        operator delete(v48);
      v142 = i;
      v153 = v47;
      v52 = v156;
      if (v156 != v155)
      {
        v53 = 0;
        v52 = (char *)v155;
        do
        {
          v54 = &v52[32 * v53];
          v56 = *(TWord **)v54;
          v55 = *((_QWORD *)v54 + 1);
          v57 = v7[1];
          v58 = TParam::getActiveConfigHandle((TAllocator *)((char *)v57 + 5368));
          if (*((_BYTE *)v57 + TParam::getValidConfig((TAllocator *)((char *)v57 + 5368), v58) + 5520))
            *((_QWORD *)v155 + 4 * v53 + 2) &= 0xFFFFFFFFFFFFFFBCLL;
          v59 = *TWord::getOptionalTagBits(v56);
          v145 = v55 + v142;
          if ((v59 & 0x80) != 0)
          {
            if (!v142 || *((_QWORD *)&v169 + 1) == v145)
              goto LABEL_138;
          }
          else
          {
            if (!TDecompounder::isValidWord((TDecompounder *)v7, v141, (__int32 **)v56, v142 == 0, *((_QWORD *)&v169 + 1) == v55 + v142))goto LABEL_138;
            v60 = v7[1];
            v61 = TParam::getActiveConfigHandle((TAllocator *)((char *)v60 + 5864));
            if (*((_BYTE *)v60 + TParam::getValidConfig((TAllocator *)((char *)v60 + 5864), v61) + 6016))
              v62 = WordSpec == 0;
            else
              v62 = 1;
            if (v62)
            {
              if (!*((_QWORD *)v162 + v145))
              {
                v63 = TFsa::newState((TAllocator *)v146, 0);
                *((_QWORD *)v162 + v145) = v63;
              }
              v64 = operator new();
              TWord::getWordSpec(v56);
              if (v65)
                v66 = 1;
              else
                v66 = 4;
              v67 = (char *)v155 + 32 * v53;
              *(_DWORD *)v64 = v66;
              *(_QWORD *)(v64 + 8) = v56;
              *(_OWORD *)(v64 + 16) = *((_OWORD *)v67 + 1);
              TFsa::newTrans((TAllocator *)v146, v143, *((_QWORD *)v162 + v145), v64);
              goto LABEL_138;
            }
          }
          if (TWord::getWordSpec(v56) && v153 != v152)
          {
            v68 = 0;
            v69 = (v153 - (_BYTE *)v152) >> 3;
            if (v69 <= 1)
              v69 = 1;
            v144 = v69;
            while (1)
            {
              v70 = *((_QWORD *)v152 + v68);
              v150 = 0;
              v151 = 0;
              __p = 0;
              v71 = *(_QWORD **)(v70 + 16);
              if (!v71)
                goto LABEL_132;
              do
              {
                if ((v59 & 0x80) != 0 && (*(_BYTE *)TWord::getOptionalTagBits(*(TWord **)(*v71 + 8)) & 0x80) != 0)
                {
                  v75 = v150;
                  if (v150 >= v151)
                  {
                    v77 = (v150 - (_BYTE *)__p) >> 3;
                    if ((unint64_t)(v77 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v78 = (v151 - (_BYTE *)__p) >> 2;
                    if (v78 <= v77 + 1)
                      v78 = v77 + 1;
                    if ((unint64_t)(v151 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                      v79 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v79 = v78;
                    if (v79)
                      v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v151, v79);
                    else
                      v80 = 0;
                    v81 = &v80[8 * v77];
                    *(_QWORD *)v81 = v71;
                    v76 = v81 + 8;
                    v83 = (char *)__p;
                    v82 = v150;
                    if (v150 != __p)
                    {
                      do
                      {
                        v84 = *((_QWORD *)v82 - 1);
                        v82 -= 8;
                        *((_QWORD *)v81 - 1) = v84;
                        v81 -= 8;
                      }
                      while (v82 != v83);
                      v82 = (char *)__p;
                    }
                    __p = v81;
                    v150 = v76;
                    v151 = &v80[8 * v79];
                    if (v82)
                      operator delete(v82);
                  }
                  else
                  {
                    *(_QWORD *)v150 = v71;
                    v76 = v75 + 8;
                  }
                  v150 = v76;
                }
                else
                {
                  v72 = v7[1];
                  v73 = TParam::getActiveConfigHandle((TAllocator *)((char *)v72 + 5864));
                  if (*((_BYTE *)v72 + TParam::getValidConfig((TAllocator *)((char *)v72 + 5864), v73) + 6016))
                  {
                    tknPrintf("Error: pron predictor is not supported during decompounding in Tennessee since pronunciations were not ported over (see rdar://91574959).\n", v74);
                    std::string::basic_string[abi:ne180100]<0>(v147, "");
                    TException::TException(&v172, (__int128 *)v147);
                    v172.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
                    if (v174[7] >= 0)
                      v138 = (const char *)&v173;
                    else
                      v138 = (const char *)v173;
                    conditionalAssert(v138, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 769);
                    TException::~TException(&v172);
                    if (v148 < 0)
                      operator delete(v147[0]);
                    exception = __cxa_allocate_exception(0x20uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v172, "");
                    TException::TException(exception, (__int128 *)&v172);
                    *exception = &unk_1E5D16668;
                  }
                }
                v71 = (_QWORD *)v71[4];
              }
              while (v71);
              if (__p == v150)
                goto LABEL_132;
              if (TState::getTransCount(v70, 0) != (v150 - (_BYTE *)__p) >> 3)
                break;
LABEL_135:
              if (__p)
              {
                v150 = (char *)__p;
                operator delete(__p);
              }
              if (++v68 == v144)
                goto LABEL_138;
            }
            v85 = TFsa::newState((TAllocator *)v146, 0);
            v86 = v85;
            v87 = v153;
            if (v153 >= v154)
            {
              v89 = (v153 - (_BYTE *)v152) >> 3;
              if ((unint64_t)(v89 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v90 = (v154 - (_BYTE *)v152) >> 2;
              if (v90 <= v89 + 1)
                v90 = v89 + 1;
              if ((unint64_t)(v154 - (_BYTE *)v152) >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v90;
              if (v91)
                v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v154, v91);
              else
                v92 = 0;
              v93 = &v92[8 * v89];
              *(_QWORD *)v93 = v86;
              v88 = v93 + 8;
              v95 = (char *)v152;
              v94 = v153;
              if (v153 != v152)
              {
                do
                {
                  v96 = *((_QWORD *)v94 - 1);
                  v94 -= 8;
                  *((_QWORD *)v93 - 1) = v96;
                  v93 -= 8;
                }
                while (v94 != v95);
                v94 = (char *)v152;
              }
              v152 = v93;
              v153 = v88;
              v154 = &v92[8 * v91];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *(_QWORD *)v153 = v85;
              v88 = v87 + 8;
            }
            v153 = v88;
            v97 = __p;
            if (v150 != __p)
            {
              v98 = 0;
              do
              {
                TFsa::moveTrans((uint64_t)v146, v97[v98], *(_QWORD *)(v97[v98] + 24), *((_QWORD *)v153 - 1));
                ++v98;
                v97 = __p;
              }
              while (v98 < (v150 - (_BYTE *)__p) >> 3);
            }
            for (j = *(_QWORD *)(v70 + 24); j; j = *(_QWORD *)(j + 40))
            {
              v100 = operator new();
              v101 = (char *)v155 + 32 * v53;
              *(_DWORD *)v100 = 1;
              *(_QWORD *)(v100 + 8) = v56;
              *(_OWORD *)(v100 + 16) = *((_OWORD *)v101 + 1);
              TFsa::newTrans((TAllocator *)v146, *((_QWORD *)v153 - 1), *(_QWORD *)(j + 16), v100);
            }
LABEL_132:
            if (!*((_QWORD *)v162 + v145))
            {
              v102 = TFsa::newState((TAllocator *)v146, 0);
              *((_QWORD *)v162 + v145) = v102;
            }
            v103 = operator new();
            v104 = (char *)v155 + 32 * v53;
            *(_DWORD *)v103 = 1;
            *(_QWORD *)(v103 + 8) = v56;
            *(_OWORD *)(v103 + 16) = *((_OWORD *)v104 + 1);
            TFsa::newTrans((TAllocator *)v146, v143, *((_QWORD *)v162 + v145), v103);
            goto LABEL_135;
          }
LABEL_138:
          ++v53;
          v52 = (char *)v155;
        }
        while (v53 < (v156 - (_BYTE *)v155) >> 5);
      }
      if (v152)
      {
        v153 = (char *)v152;
        operator delete(v152);
        v52 = (char *)v155;
      }
      if (v52)
      {
        v156 = v52;
        operator delete(v52);
      }
      i = v142;
      if (v161 && v158 != v160 && v158)
        MEMORY[0x1AF44D160]();
      v10 = *((_QWORD *)&v169 + 1);
    }
  }
  v105 = *(v163 - 1);
  if (v105)
    TFsa::addExtremity((uint64_t)v146, v105, 1u);
  std::vector<unsigned long>::vector(&v172, (uint64_t)(v146[7] - v146[6]) >> 3);
  v158 = 0;
  v159 = 0uLL;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v158, v146[5]);
  v107 = (_QWORD *)v146[6];
  v106 = (_QWORD *)v146[7];
  if (v107 != v106)
  {
    while (!*v107)
    {
      if (++v107 == v106)
        goto LABEL_184;
    }
  }
  if (v107 != v106)
  {
    do
    {
      v108 = (_QWORD *)*v107;
      if (!*(_QWORD *)(*v107 + 24) && v108[5] == -1)
      {
        v109 = v159;
        if ((unint64_t)v159 >= *((_QWORD *)&v159 + 1))
        {
          v111 = (uint64_t)(v159 - (_QWORD)v158) >> 3;
          if ((unint64_t)(v111 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v112 = (uint64_t)(*((_QWORD *)&v159 + 1) - (_QWORD)v158) >> 2;
          if (v112 <= v111 + 1)
            v112 = v111 + 1;
          if (*((_QWORD *)&v159 + 1) - (_QWORD)v158 >= 0x7FFFFFFFFFFFFFF8uLL)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v112;
          if (v113)
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v159 + 8, v113);
          else
            v114 = 0;
          v115 = &v114[8 * v111];
          *(_QWORD *)v115 = v108;
          v110 = v115 + 8;
          v117 = v158;
          v116 = (char *)v159;
          if ((char *)v159 != v158)
          {
            do
            {
              v118 = *((_QWORD *)v116 - 1);
              v116 -= 8;
              *((_QWORD *)v115 - 1) = v118;
              v115 -= 8;
            }
            while (v116 != v117);
            v116 = v158;
          }
          v158 = v115;
          *(_QWORD *)&v159 = v110;
          *((_QWORD *)&v159 + 1) = &v114[8 * v113];
          if (v116)
            operator delete(v116);
        }
        else
        {
          *(_QWORD *)v159 = v108;
          v110 = (_QWORD *)(v109 + 8);
        }
        *(_QWORD *)&v159 = v110;
      }
      TransCount = TState::getTransCount((uint64_t)v108, 1u);
      *((_QWORD *)&v172.~exception + *v108) = TransCount;
      v120 = v107 + 1;
      while (v120 != v106)
      {
        if (*v120++)
        {
          v107 = v120 - 1;
          goto LABEL_183;
        }
      }
      v107 = v106;
LABEL_183:
      ;
    }
    while (v107 != (_QWORD *)v146[7]);
  }
LABEL_184:
  v122 = (char *)v159;
  if ((char *)v159 != v158)
  {
    v123 = 0;
    v122 = v158;
    do
    {
      v124 = *(_QWORD **)&v122[8 * v123];
      for (k = (_QWORD *)v124[2]; k; k = (_QWORD *)k[4])
      {
        v126 = (_QWORD *)k[3];
        v127 = v172.__vftable;
        --*((_QWORD *)&v172.~exception + *v126);
        if (!*((_QWORD *)&v127->~exception + *v126))
        {
          v128 = v159;
          if ((unint64_t)v159 >= *((_QWORD *)&v159 + 1))
          {
            v130 = (uint64_t)(v159 - (_QWORD)v158) >> 3;
            if ((unint64_t)(v130 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v131 = (uint64_t)(*((_QWORD *)&v159 + 1) - (_QWORD)v158) >> 2;
            if (v131 <= v130 + 1)
              v131 = v130 + 1;
            if (*((_QWORD *)&v159 + 1) - (_QWORD)v158 >= 0x7FFFFFFFFFFFFFF8uLL)
              v132 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v132 = v131;
            if (v132)
              v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v159 + 8, v132);
            else
              v133 = 0;
            v134 = &v133[8 * v130];
            *(_QWORD *)v134 = v126;
            v129 = v134 + 8;
            v136 = v158;
            v135 = (char *)v159;
            if ((char *)v159 != v158)
            {
              do
              {
                v137 = *((_QWORD *)v135 - 1);
                v135 -= 8;
                *((_QWORD *)v134 - 1) = v137;
                v134 -= 8;
              }
              while (v135 != v136);
              v135 = v158;
            }
            v158 = v134;
            *(_QWORD *)&v159 = v129;
            *((_QWORD *)&v159 + 1) = &v133[8 * v132];
            if (v135)
              operator delete(v135);
          }
          else
          {
            *(_QWORD *)v159 = v126;
            v129 = (_QWORD *)(v128 + 8);
          }
          *(_QWORD *)&v159 = v129;
        }
        if (*k)
          MEMORY[0x1AF44D190](*k, 0x1060C40A1FB9E56);
      }
      TFsa::deleteState(v146, v124);
      ++v123;
      v122 = v158;
    }
    while (v123 < (uint64_t)(v159 - (_QWORD)v158) >> 3);
  }
  if (v122)
  {
    *(_QWORD *)&v159 = v122;
    operator delete(v122);
  }
  if (v172.__vftable)
  {
    *(std::exception *)&v173 = v172;
    operator delete(v172.__vftable);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v167 && v164 != v166 && v164)
    MEMORY[0x1AF44D160]();
  if (v171 && v168 != v170 && v168)
    MEMORY[0x1AF44D160]();
}

void sub_1AD89F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p)
{
  void *v39;
  void *v40;
  unint64_t v41;

  if (__p)
    operator delete(__p);
  v39 = (void *)STACK[0xD60];
  if (STACK[0xD60])
  {
    STACK[0xD68] = (unint64_t)v39;
    operator delete(v39);
  }
  v40 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v40;
    operator delete(v40);
  }
  if (LOBYTE(STACK[0x938]))
  {
    v41 = STACK[0x520];
    if (STACK[0x520] != a11)
    {
      if (v41)
        MEMORY[0x1AF44D160](v41, 0x1000C8052888210);
    }
  }
  if (LOBYTE(STACK[0xD58]))
  {
    if (STACK[0x940] != a12 && STACK[0x940] != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void fsaSearch(TAllocator *a1, uint64_t a2, int *a3, int *a4, __int32 *a5, _DWORD *a6, int a7, size_t a8, size_t a9, void **a10)
{
  uint64_t v14;
  __int32 **HeadClone;
  const __int32 *v17;
  unsigned int *v18;
  __int32 **v19;
  __int32 **v20;
  __int32 **v21;
  unint64_t v22;
  __int32 ***v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int32 ***v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t *i;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  __int32 **v40;
  uint64_t v41;
  uint64_t Score;
  const __int32 *v45;
  __int128 v46;
  _BYTE v47[785];
  char v48;
  unsigned int *v49;
  __int128 v50;
  _BYTE v51[1024];
  char v52;
  int v53[3];

  v14 = a2;
  if (*(_QWORD *)(a2 + 40) != -1)
  {
    *a6 = 0;
    HeadClone = (__int32 **)TLexicon::findHeadClone((uint64_t)a1, a5);
    if (!HeadClone)
      HeadClone = (__int32 **)TLexicon::addTempWord(a1, a5, 0, 0, 0);
    v49 = (unsigned int *)v51;
    v50 = xmmword_1AE1418C0;
    v52 = 1;
    v45 = (const __int32 *)v47;
    v46 = xmmword_1AE1418C0;
    v48 = 1;
    TWord::getWrittenForm(HeadClone, (uint64_t)&v49);
    TBuffer<wchar_t>::resize((uint64_t)&v45, 0);
    TBuffer<wchar_t>::insert((uint64_t)&v45, 0, a3, a4 - a3);
    if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
    {
      if (v48)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v53, 1uLL);
        v17 = v45;
        --*((_QWORD *)&v46 + 1);
      }
      else
      {
        v17 = v45;
        if ((_QWORD)v46)
          v45[v46 - 1] = 0;
      }
    }
    else
    {
      v17 = v45;
      v45[*((_QWORD *)&v46 + 1)] = 0;
    }
    if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
    {
      if (v52)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v53, 1uLL);
        v18 = v49;
        --*((_QWORD *)&v50 + 1);
      }
      else
      {
        v18 = v49;
        if ((_QWORD)v50)
          v49[(_QWORD)v50 - 1] = 0;
      }
    }
    else
    {
      v18 = v49;
      v49[*((_QWORD *)&v50 + 1)] = 0;
    }
    Score = TLexicon::makeScore((uint64_t)a1, v17, v18, a8, a9);
    v20 = HeadClone;
    v21 = (__int32 **)*((_QWORD *)&v46 + 1);
    v22 = (unint64_t)a10[2];
    v23 = (__int32 ***)a10[1];
    if ((unint64_t)v23 >= v22)
    {
      v40 = v19;
      v41 = v14;
      v25 = ((char *)v23 - (_BYTE *)*a10) >> 5;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)*a10;
      if (v27 >> 4 > v26)
        v26 = v27 >> 4;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a10 + 2), v28);
      else
        v29 = 0;
      v30 = (__int32 ***)&v29[32 * v25];
      v31 = &v29[32 * v28];
      *v30 = v20;
      v30[1] = v21;
      v30[2] = (__int32 **)Score;
      v30[3] = v40;
      v24 = v30 + 4;
      v33 = (char *)*a10;
      v32 = (char *)a10[1];
      if (v32 == *a10)
      {
        v14 = v41;
      }
      else
      {
        v14 = v41;
        do
        {
          v34 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v30 - 1) = v34;
          v30 -= 4;
          v32 -= 32;
        }
        while (v32 != v33);
        v32 = (char *)*a10;
      }
      *a10 = v30;
      a10[1] = v24;
      a10[2] = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v23 = v20;
      v23[1] = v21;
      v24 = v23 + 4;
      v23[2] = (__int32 **)Score;
      v23[3] = v19;
    }
    a10[1] = v24;
    if (v48 && v45 != (const __int32 *)v47 && v45)
      MEMORY[0x1AF44D160]();
    if (v52 && v49 != (unsigned int *)v51 && v49)
      MEMORY[0x1AF44D160]();
  }
  for (i = *(uint64_t **)(v14 + 24); i; i = (uint64_t *)i[5])
  {
    v36 = *i;
    if (*i == 92)
      v37 = 1;
    else
      v37 = a7;
    if ((v37 & 1) == 0)
    {
      v38 = *a4;
      v39 = *((_QWORD *)a1 + 32);
      if (!v39)
        goto LABEL_52;
      if ((unint64_t)v38 < 0x10000)
        v38 = *(_DWORD *)(v39 + 4 * v38);
      if ((unint64_t)(int)v36 < 0x10000)
        LODWORD(v39) = *(_DWORD *)(v39 + 4 * (int)v36);
      else
LABEL_52:
        v39 = *i;
      if (v38 != (_DWORD)v39)
        continue;
    }
    *a6 = v36;
    fsaSearch(a1, i[2], a3, &a4[v37 ^ 1], a5, a6 + 1);
  }
}

void sub_1AD89F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v20;

  if (LOBYTE(STACK[0x468]) && a19 != a14 && a19)
    MEMORY[0x1AF44D160]();
  if (LOBYTE(STACK[0x888]))
  {
    v20 = STACK[0x470];
    if (STACK[0x470] != a15)
    {
      if (v20)
        MEMORY[0x1AF44D160](v20, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::addWords(TDecompounder *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t Segment;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  char *v14;
  uint64_t v15;
  uint64_t ActiveConfigHandle;
  char v17;
  uint64_t v18;
  int **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v25;
  int *v26;
  uint64_t OutEdge;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int32 *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ValidConfig;
  unint64_t v41;
  _BYTE *v42;
  const TWord *v43;
  TAllocator *v44;
  int *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *__p[3];
  int v60[10];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  __int32 *v73;
  __int128 v74;
  _BYTE v75[1024];
  char v76;

  Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    v9 = Segment;
    v10 = *(_DWORD *)(Segment + 24);
    v11 = v10 > 5;
    v12 = (1 << v10) & 0x2D;
    if (v11 || v12 == 0)
    {
      v73 = (__int32 *)v75;
      v74 = xmmword_1AE1418C0;
      v76 = 1;
      TBuffer<wchar_t>::assign((uint64_t)&v73, *(int **)Segment);
      v14 = *(char **)(v9 + 8);
      if (*(_DWORD *)(v9 + 24) == 1
        && (v15 = *((_QWORD *)this + 1),
            ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 13352)),
            *(_BYTE *)(v15 + TParam::getValidConfig((TParam *)(v15 + 13352), ActiveConfigHandle) + 13504))
        && *v14)
      {
        v17 = 0;
        do
        {
          v18 = TSegmenter::getSegment(a4, v14);
          v19 = (int **)v18;
          if (!v18)
            break;
          if (**(_DWORD **)v18 != 45)
            break;
          v20 = TSegmenter::getSegment(a4, *(char **)(v18 + 8));
          v21 = v20;
          if (!v20)
            break;
          if (*(_DWORD *)(v20 + 24) != 1)
            break;
          v22 = 0;
          v23 = *v19;
          while (v23[v22++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v23, v22 - 1);
          v25 = 0;
          v26 = *(int **)v21;
          while (v26[v25++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v26, v25 - 1);
          v14 = *(char **)(v21 + 8);
          v17 = 1;
        }
        while (*v14);
      }
      else
      {
        v17 = 0;
      }
      OutEdge = TVertex::getOutEdge((uint64_t)a2);
      if (!OutEdge)
        goto LABEL_30;
      v29 = 0;
LABEL_24:
      v29 |= (*(_BYTE *)(OutEdge + 64) & 0xC0) == 0;
      while (1)
      {
        OutEdge = *(_QWORD *)(OutEdge + 8);
        if (!OutEdge)
          break;
        if (!*(_BYTE *)(OutEdge + 32))
          goto LABEL_24;
      }
      if (v17 & 1 | ((v29 & 1) == 0)
        || (v30 = *((_QWORD *)this + 1),
            v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 13104)),
            *(_BYTE *)(v30 + TParam::getValidConfig((TParam *)(v30 + 13104), v31) + 13256)))
      {
LABEL_30:
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v32 = *(_QWORD **)this;
        if (*((_QWORD *)&v74 + 1) >= (unint64_t)v74)
        {
          if (v76)
          {
            v60[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v60, 1uLL);
            v33 = v73;
            --*((_QWORD *)&v74 + 1);
          }
          else
          {
            v33 = v73;
            if ((_QWORD)v74)
              v73[(_QWORD)v74 - 1] = 0;
          }
        }
        else
        {
          v33 = v73;
          v73[*((_QWORD *)&v74 + 1)] = 0;
        }
        v34 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 1) + 10736));
        v35 = *((_QWORD *)this + 1);
        v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 16456));
        v37 = *(int *)(v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 16456), v36) + 16616);
        v38 = *((_QWORD *)this + 1);
        v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 16104));
        ValidConfig = TParam::getValidConfig((TParam *)(v38 + 16104), v39);
        TLexicon::findHeadClonesCollated(v32, v33, v34, v37, *(int *)(v38 + 4 * ValidConfig + 16264), &v70);
        if (v70 == v71)
          goto LABEL_44;
        v41 = (v71 - (_BYTE *)v70) >> 5;
        if (v41 <= 1)
          v41 = 1;
        v42 = (char *)v70 + 16;
        while ((*v42 & 0x35) != 0)
        {
          v42 += 32;
          if (!--v41)
            goto LABEL_44;
        }
        v43 = (const TWord *)*((_QWORD *)v42 - 2);
        if (!v43)
        {
LABEL_44:
          v44 = *(TAllocator **)this;
          if (*((_QWORD *)&v74 + 1) >= (unint64_t)v74)
          {
            if (v76)
            {
              v60[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v60, 1uLL);
              v45 = v73;
              --*((_QWORD *)&v74 + 1);
            }
            else
            {
              v45 = v73;
              if ((_QWORD)v74)
                v73[(_QWORD)v74 - 1] = 0;
            }
          }
          else
          {
            v45 = v73;
            v73[*((_QWORD *)&v74 + 1)] = 0;
          }
          v43 = (const TWord *)TLexicon::addTempWord(v44, v45, 0, 0, 0);
        }
        TFsa::TFsa((TFsa *)v60);
        TDecompounder::decompound(this, v43, (TFsa *)v60);
        if (v61)
        {
          v58 = 0;
          std::vector<TVertex *>::vector(__p, (v63 - v62) >> 3, &v58);
          v46 = v66;
          if (v66 != v67)
          {
            while (!*v46)
            {
              if (++v46 == v67)
              {
                v46 = v67;
                break;
              }
            }
          }
          *((_QWORD *)__p[0] + *(_QWORD *)*v46) = a2;
          v47 = TGraph::addVertex(a3, v14);
          v48 = v68;
          if (v68 != v69)
          {
            while (!*v48)
            {
              if (++v48 == v69)
              {
                v48 = v69;
                break;
              }
            }
          }
          *((_QWORD *)__p[0] + *(_QWORD *)*v48) = v47;
          v50 = v62;
          v49 = v63;
          if (v63 != v62)
          {
            v51 = 0;
            do
            {
              if (*(_QWORD *)(v50 + 8 * v51) && !*((_QWORD *)__p[0] + v51))
              {
                v52 = TGraph::addVertex(a3, 0);
                *((_QWORD *)__p[0] + v51) = v52;
                v50 = v62;
                v49 = v63;
              }
              ++v51;
            }
            while (v51 < (v49 - v50) >> 3);
          }
          v54 = v64;
          v53 = v65;
          if (v65 != v64)
          {
            v55 = 0;
            do
            {
              v56 = *(_QWORD *)(v54 + 8 * v55);
              if (v56)
              {
                v57 = *(_QWORD *)v56;
                TGraph::addEdge(a3, *((_QWORD *)__p[0] + **(_QWORD **)(v56 + 24)), *((_QWORD **)__p[0] + **(_QWORD **)(v56 + 16)), *(_QWORD *)v56);
                MEMORY[0x1AF44D190](v57, 0x1060C40A1FB9E56);
                v54 = v64;
                v53 = v65;
              }
              ++v55;
            }
            while (v55 < (v53 - v54) >> 3);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        TFsa::~TFsa((TFsa *)v60);
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
      }
      if (v76 && v73 != (__int32 *)v75)
      {
        if (v73)
          MEMORY[0x1AF44D160]();
      }
    }
  }
}

void sub_1AD89FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p)
    operator delete(__p);
  TFsa::~TFsa((TFsa *)&a15);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (LOBYTE(STACK[0x540]))
  {
    if (a46 != a10 && a46 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(uint64_t result, const __int32 **a2, uint64_t a3, uint64_t a4, char a5)
{
  const __int32 **v8;
  const __int32 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const __int32 **v15;
  const __int32 *v16;
  const __int32 **v17;
  char v18;
  BOOL v19;
  const __int32 *v20;

  v8 = (const __int32 **)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = wcscmp(*(a2 - 1), *v9);
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((wcscmp(*(v9 - 1), *v9) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v9, a2);
            v9 = (const __int32 **)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(v9, a2, a2, a3);
        return result;
    }
  }
}

const __int32 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  const __int32 **v3;
  const __int32 **v4;
  uint64_t v5;
  const __int32 **v6;
  const __int32 *v7;
  const __int32 *v8;
  const __int32 *v9;
  uint64_t v10;
  const __int32 **v11;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 1;
    if (result + 1 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v4;
        result = (const __int32 **)wcscmp(v7, v8);
        if ((result & 0x80000000) != 0)
        {
          v9 = *v6;
          v10 = v5;
          while (1)
          {
            *(const __int32 **)((char *)v3 + v10 + 8) = *(const __int32 **)((char *)v3 + v10);
            if (!v10)
              break;
            result = (const __int32 **)wcscmp(v9, *(const __int32 **)((char *)v3 + v10 - 8));
            v10 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v11 = (const __int32 **)((char *)v3 + v10 + 8);
              goto LABEL_10;
            }
          }
          v11 = v3;
LABEL_10:
          *v11 = v9;
        }
        v4 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

const __int32 **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  const __int32 **v3;
  const __int32 *v4;
  const __int32 *v5;
  const __int32 *v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;

  if (result != a2)
  {
    v3 = result;
    while (v3 + 1 != a2)
    {
      v5 = *v3;
      v4 = v3[1];
      ++v3;
      result = (const __int32 **)wcscmp(v4, v5);
      if ((result & 0x80000000) != 0)
      {
        v6 = *v3;
        v7 = v3;
        do
        {
          v8 = v7;
          v9 = *--v7;
          *v8 = v9;
          result = (const __int32 **)wcscmp(v6, *(v8 - 2));
        }
        while ((result & 0x80000000) != 0);
        *v7 = v6;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3)
{
  int v6;
  int v7;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;
  const __int32 *v12;

  v6 = wcscmp(*a2, *a1);
  v7 = wcscmp(*a3, *a2);
  if (v6 < 0)
  {
    v9 = *a1;
    if (v7 < 0)
    {
      *a1 = *a3;
      *a3 = v9;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      if (wcscmp(*a3, v9) < 0)
      {
        v10 = *a2;
        *a2 = *a3;
        *a3 = v10;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0)
      return 0;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (wcscmp(*a2, *a1) < 0)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
  }
  return 1;
}

const __int32 **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  const __int32 **v2;
  const __int32 *v4;
  const __int32 **v5;
  const __int32 **v6;
  const __int32 *v7;
  const __int32 *v8;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;

  v2 = a2;
  v4 = *a1;
  if (wcscmp(*a1, *(a2 - 1)) < 0)
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    v5 = a1 + 1;
    do
    {
      v6 = v5;
      if (v5 >= v2)
        break;
      ++v5;
    }
    while ((wcscmp(v4, *v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
      v8 = *--v2;
    while (wcscmp(v4, v8) < 0);
  }
  while (v6 < v2)
  {
    v9 = *v6;
    *v6 = *v2;
    *v2 = v9;
    do
    {
      v10 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v10) & 0x80000000) == 0);
    do
      v11 = *--v2;
    while (wcscmp(v4, v11) < 0);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v4;
  return v6;
}

const __int32 **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4;
  const __int32 *v5;
  int v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 **v11;
  const __int32 **v12;
  const __int32 *v13;
  const __int32 *v14;
  const __int32 *v15;

  v4 = 0;
  v5 = *a1;
  do
    v6 = wcscmp(a1[++v4], v5);
  while (v6 < 0);
  v7 = &a1[v4];
  v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *--a2;
    }
    while ((wcscmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
      v9 = *--a2;
    while ((wcscmp(v9, v5) & 0x80000000) == 0);
  }
  if (v7 < a2)
  {
    v11 = &a1[v4];
    v12 = a2;
    do
    {
      v13 = *v11;
      *v11 = *v12;
      *v12 = v13;
      do
      {
        v14 = v11[1];
        ++v11;
      }
      while (wcscmp(v14, v5) < 0);
      do
        v15 = *--v12;
      while ((wcscmp(v15, v5) & 0x80000000) == 0);
    }
    while (v11 < v12);
    v8 = v11 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v5;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const __int32 *v6;
  const __int32 **v7;
  const __int32 **v8;
  uint64_t v9;
  int v10;
  const __int32 *v11;
  uint64_t v12;
  const __int32 **v13;
  const __int32 **v14;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (wcscmp(*(a2 - 1), *a1) < 0)
      {
        v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (wcscmp(*v8, *v7) < 0)
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        v13 = (const __int32 **)((char *)a1 + v12);
        *(const __int32 **)((char *)a1 + v12 + 24) = *(const __int32 **)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if ((wcscmp(v11, v13[1]) & 0x80000000) == 0)
        {
          v14 = (const __int32 **)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4)
{
  uint64_t result;
  const __int32 *v9;
  const __int32 *v10;
  const __int32 *v11;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3);
  result = wcscmp(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = wcscmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = wcscmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4, const __int32 **a5)
{
  uint64_t result;
  const __int32 *v11;
  const __int32 *v12;
  const __int32 *v13;
  const __int32 *v14;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3, a4);
  result = wcscmp(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    result = wcscmp(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = wcscmp(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        result = wcscmp(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

const __int32 **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const __int32 **v12;
  const __int32 **v13;
  const __int32 **v14;
  const __int32 *v15;
  uint64_t v16;
  const __int32 **v17;
  const __int32 *v18;
  const __int32 **v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (wcscmp(*v14, *a1) < 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, const __int32 **a4)
{
  unint64_t v4;
  const __int32 **v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  const __int32 **v11;
  uint64_t v12;
  const __int32 *v13;
  const __int32 **v14;
  uint64_t v15;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v9 = ((uint64_t)a4 - result) >> 2;
      v10 = v9 + 1;
      v11 = (const __int32 **)(result + 8 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
      {
        ++v11;
        v10 = v12;
      }
      result = wcscmp(*v11, *v5);
      if ((result & 0x80000000) == 0)
      {
        v13 = *v5;
        do
        {
          v14 = v11;
          *v5 = *v11;
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = (const __int32 **)(v6 + 8 * v15);
          if (2 * v10 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
          {
            ++v11;
            v15 = 2 * v10 + 2;
          }
          result = wcscmp(*v11, v13);
          v5 = v14;
          v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *v14 = v13;
      }
    }
  }
  return result;
}

const __int32 **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __int32 **v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[v5 + 1];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3 && wcscmp(*v8, a1[v5 + 2]) < 0)
    {
      ++v8;
      v9 = v10;
    }
    *a1 = *v8;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const __int32 **v7;
  const __int32 **v8;
  const __int32 *v9;
  const __int32 **v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (const __int32 **)(result + 8 * (v4 >> 1));
    v8 = (const __int32 **)(a2 - 8);
    result = wcscmp(*v7, *(const __int32 **)(a2 - 8));
    if ((result & 0x80000000) != 0)
    {
      v9 = *v8;
      do
      {
        v10 = v7;
        *v8 = *v7;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (const __int32 **)(v5 + 8 * v6);
        result = wcscmp(*v7, v9);
        v8 = v10;
      }
      while ((result & 0x80000000) != 0);
      *v10 = v9;
    }
  }
  return result;
}

_QWORD *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = TFsaBuilder::TStateCompare::operator()(v5, v3[4], *a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || TFsaBuilder::TStateCompare::operator()(v5, *a2, v6[4]))
    return v2;
  return v6;
}

uint64_t TFsaBuilder::TStateCompare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a3 + 40);
  if ((v3 != -1) == (v4 != -1))
    return std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(*(unint64_t **)(a2 + 24), 1u, 0, 1, *(unint64_t **)(a3 + 24), 1u, 0, 1);
  return v4 != -1 && v3 == -1;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(unint64_t *a1, unsigned int a2, unint64_t *a3, int a4, unint64_t *a5, unsigned int a6, unint64_t *a7, int a8)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (a6 == a8 && a5 == a7)
    return 0;
  while (a2 != a4 || a1 != a3)
  {
    v9 = *a1;
    v10 = *a5;
    v11 = *a1 >= *a5;
    if (*a1 == *a5)
    {
      v9 = a1[2];
      v10 = a5[2];
      v11 = v9 >= v10;
    }
    if (!v11)
      break;
    if (v10 >= v9)
    {
      a1 = (unint64_t *)a1[a2 + 4];
      a5 = (unint64_t *)a5[a6 + 4];
      if (a6 != a8 || a5 != a7)
        continue;
    }
    return 0;
  }
  return 1;
}

uint64_t *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!TFsaBuilder::TStateCompare::operator()(v7, *a3, v4[4]))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!TFsaBuilder::TStateCompare::operator()(v7, v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *std::vector<TState *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD8A0F60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<TVertex *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD8A0FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *tknPrintString(const char *a1)
{
  const char *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  char v8;
  char *v9;
  int v10;

  v2 = s_pLogPartialLine;
  v3 = strlen(s_pLogPartialLine);
  v4 = strlen(a1) + v3 + 101;
  if (v4 <= s_nPartialLineAllocSize)
  {
    v6 = s_pLogPartialLine;
  }
  else
  {
    v5 = (v4 & 0xFFFFFC00) + 1024;
    s_pLogPartialLine = &s_pStaticLogPartialLine;
    s_nPartialLineAllocSize = 0x2000;
    v6 = (char *)operator new[]();
    s_pLogPartialLine = v6;
    s_nPartialLineAllocSize = v5;
    strcpy(v6, v2);
    if (v2 == &s_pStaticLogPartialLine)
    {
      s_pStaticLogPartialLine = 0;
    }
    else if (v2)
    {
      MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
      v6 = s_pLogPartialLine;
    }
  }
  v7 = &v6[strlen(v6)];
  v8 = *a1;
  if (*a1)
  {
    do
    {
      if ((s_bJustPrintedNewLine & 1) == 0)
      {
        v9 = strcpy(v7, gpLogLinePrefix);
        v7 += strlen(v9);
        s_bJustPrintedNewLine = 1;
        v8 = *a1;
      }
      *v7++ = v8;
      if (*a1 == 10)
      {
        *v7 = 0;
        tknLogString(s_pLogPartialLine);
        v7 = s_pLogPartialLine;
        s_bJustPrintedNewLine = 0;
        v6 = s_pLogPartialLine;
      }
      v10 = *(unsigned __int8 *)++a1;
      v8 = v10;
    }
    while (v10);
  }
  *v7 = 0;
  return memmove(s_pLogPartialLine, v6, v7 - v6 + 1);
}

void *tknPrintf(const char *a1, uint64_t a2, ...)
{
  const char *v2;
  char __str[8192];
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v2 = (const char *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = *MEMORY[0x1E0C80C00];
  __str[0] = 0;
  vsnprintf(__str, 0x1FFEuLL, v2, va);
  return tknPrintString(__str);
}

void *loggableUnicode@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  void *result;
  TLocaleInfo *v6;
  char v7;
  char *__s;
  __int128 v9;
  _BYTE v10[256];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __s = v10;
  v9 = xmmword_1AE1418C0;
  v11 = 1;
  {
    v6 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v6);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v6;
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a1, (uint64_t)&__s);
  if (*((_QWORD *)&v9 + 1) >= (unint64_t)v9)
  {
    if (v11)
    {
      v7 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v9 + 1), &v7, 1uLL);
      --*((_QWORD *)&v9 + 1);
    }
    else if ((_QWORD)v9)
    {
      __s[(_QWORD)v9 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v9 + 1)] = 0;
  }
  result = std::string::basic_string[abi:ne180100]<0>(a2, __s);
  if (v11)
  {
    result = __s;
    if (__s != v10)
    {
      if (__s)
        return (void *)MEMORY[0x1AF44D160]();
    }
  }
  return result;
}

void sub_1AD8A1374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x1AF44D190](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, unsigned int *a2)
{
  unsigned __int8 v4;
  size_t v5;
  TLocaleInfo *v7;
  char v8;
  char *__s;
  __int128 v10;
  _BYTE v11[256];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __s = v11;
  v10 = xmmword_1AE1418C0;
  v12 = 1;
  {
    v7 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v7);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v7;
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, (uint64_t)&__s);
  if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      v8 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v10 + 1), &v8, 1uLL);
      --*((_QWORD *)&v10 + 1);
    }
    else if ((_QWORD)v10)
    {
      __s[(_QWORD)v10 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v10 + 1)] = 0;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v5);
  if (v12 && __s != v11 && __s)
    MEMORY[0x1AF44D160]();
  return a1;
}

void sub_1AD8A156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x1AF44D190](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::insert(uint64_t result, unint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 280))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, *(_QWORD *)(v6 + 16));
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x1AF44D160](v12, 0x1000C8077774924);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  if (v8 < v7)
  {
    v13 = v8 + a4;
    v14 = *(_QWORD *)(v6 + 8);
    if (v8 + a4 < v14)
    {
      if (v14 >= v7 + a4)
        v14 = v7 + a4;
      for (; v13 != v14; --v14)
        *(_BYTE *)(*(_QWORD *)v6 + v14 - 1) = *(_BYTE *)(*(_QWORD *)v6 + v14 + ~a4);
    }
  }
  v15 = *(_QWORD *)(v6 + 8);
  v16 = v15 - v8;
  if (v15 > v8)
  {
    if (v16 >= a4)
      v16 = a4;
    if (v16)
    {
      do
      {
        v17 = *a3++;
        *(_BYTE *)(*(_QWORD *)v6 + v8++) = v17;
        --v16;
      }
      while (v16);
      v15 = *(_QWORD *)(v6 + 8);
    }
  }
  v18 = *(_QWORD *)(v6 + 16) + a4;
  *(_QWORD *)(v6 + 16) = v18;
  if (v18 < v15)
    *(_BYTE *)(*(_QWORD *)v6 + v18) = 0;
  return result;
}

void sub_1AD8A17E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD8A1890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD8A1948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD8A1AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD8A1B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD8A1BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void freeChart(uint64_t a1)
{
  _DWORD **v2;
  _DWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;

  v2 = (_DWORD **)maxRefLengthTLS();
  v3 = *v2;
  if (!*v2)
  {
    v4 = v2;
    v3 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v4 = v3;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 8 * v5);
    if (v6)
      MEMORY[0x1AF44D160](v6, 0x1000C8000313F17);
    if (++v5 > *v3)
      JUMPOUT(0x1AF44D160);
  }
}

void wordError_freeThread(void)
{
  void **v0;
  uint64_t *v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v0 = (void **)chartTLS();
  v1 = (uint64_t *)*v0;
  if (!*v0)
  {
    v1 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v0 = v1;
  }
  v2 = *v1;
  if (v2)
    freeChart(v2);
  v3 = (void **)maxHypLengthTLS();
  if (*v3)
  {
    free(*v3);
    *v3 = 0;
  }
  v4 = (void **)maxRefLengthTLS();
  if (*v4)
  {
    free(*v4);
    *v4 = 0;
  }
  if (*v0)
  {
    free(*v0);
    *v0 = 0;
  }
}

_QWORD *LHash<unsigned int,double>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  _DWORD *v6;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  v6 = (_DWORD *)(*a1 + 16);
  do
  {
    *v6 = -1;
    v6 += 4;
    --v4;
  }
  while (v4);
  return result;
}

_QWORD *LHash<unsigned int,double>::LHash(_QWORD *a1, unsigned int a2)
{
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,double>::alloc(a1, a2);
  }
  return a1;
}

void LHash<unsigned int,double>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 16 * ~(-1 << *(_DWORD *)v4) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,double>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,double>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,double>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,double>::find(_DWORD **a1, unsigned int a2, _BYTE *a3)
{
  int v5;
  int v7;

  v7 = 0;
  v5 = LHash<unsigned int,double>::locate(a1, a2, &v7);
  *a3 = v5;
  if (v5)
    return (uint64_t)&(*a1)[4 * v7 + 2];
  else
    return 0;
}

uint64_t LHash<unsigned int,double>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = v3 + 2;
  v5 = *v3;
  v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v9 = -1 << v6;
    v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    v10 = v4[4 * v7 + 2];
    if (v10 == -1)
    {
LABEL_10:
      result = 0;
    }
    else
    {
      v11 = ~(_DWORD)v9;
      while (v10 != a2)
      {
        v7 = ((_DWORD)v7 + 1) & v11;
        v10 = v4[4 * v7 + 2];
        if (v10 == -1)
          goto LABEL_10;
      }
      result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    v12 = 0;
    v7 = v5 >> 5;
    v13 = v3 + 4;
    while (1)
    {
      v14 = *v13;
      v13 += 4;
      if (v14 == a2)
        break;
      if (v7 == ++v12)
        goto LABEL_14;
    }
    result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,double>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v15;

  if (!*a1)
    LHash<unsigned int,double>::alloc(a1, 1u);
  v15 = 0;
  v6 = LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v15);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,double>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 2);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,double>::locate((_DWORD **)a1, *v12, &v15);
            *(_OWORD *)(*a1 + 16 * v15 + 8) = *(_OWORD *)(v12 - 2);
          }
          v12 += 4;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v15);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[2 * v15 + 2]) = a2;
    v7[2 * v15 + 1] = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[2 * v15 + 1];
}

_DWORD **LHash<unsigned int,double>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a2 + 8;
  *a2 = v2;
  v3 = *result;
  if (*result)
  {
    v4 = 1 << *v3;
    v5 = 16 * (v4 - 1) + 24;
    *a2 = v5 + v2;
    a2[1] += 16 * (v4 - (*v3 >> 5));
    v6 = 256;
    if (v5 < 0x100)
      v6 = 16 * (v4 - 1) + 24;
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,double>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,double>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,double>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 16);
  do
  {
    v8 = *v7;
    v7 += 4;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[4 * v16 + 4];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AD8A2400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,double>::LHashIter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (_DWORD *)operator new[]();
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(int **)(a2 + 24);
      do
      {
        v9 = *v8++;
        *v6++ = v9;
        --v7;
      }
      while (v7);
    }
  }
  return a1;
}

uint64_t LHashIter<unsigned int,double>::~LHashIter(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8052888210);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t LHashIter<unsigned int,double>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 16 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

void sub_1AD8A2568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,double>::~LHash(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (_DWORD *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v11 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)v4 + v12 - 4) + 8));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v8 + 8));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(v11 - 2) + 8));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * v11 + 8)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v12 + 8)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * a1[++v6] + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v12 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v11 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v16 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v17 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a4 + 8), *(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(_QWORD *)a5 + 8 + 16 * *a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a5 + 8), *(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a4 + 8));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a4 + 8), *(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a3 + 8));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a2 + 8));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(_QWORD *)a6 + 8 + 16 * *a1 + 8));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *v14 + 8), *(unsigned int *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * v12[1] + 8)) < 0)
      {
        ++v12;
        v11 = v13;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v5 + 8));
      if ((result & 0x80000000) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * v12[1] + 8)) < 0)
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * v14 + 8));
          v5 = v15;
          v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * *v9 + 8), *(unsigned int *)(*(_QWORD *)a2 + 8 + 16 * a1[v6 + 2] + 8)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)(a2 - 4) + 8));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28970;
  a1[1] = v2;
  return a1;
}

void sub_1AD8A37C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
  *a1 = &unk_1E5D28970;
  a1[1] = v4;
  return a1;
}

void sub_1AD8A3848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28970;
  result[1] = v3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD8A3940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D28970;
    result[1] = v3;
  }
  return result;
}

_DWORD *fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  fst *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  fst::LogMessage *v22;
  fst *v23;
  _QWORD *v24;
  int v25;
  char v27;
  _DWORD v28[4];
  void *__p[2];
  char v30;
  unint64_t v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (_DWORD *)operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl((uint64_t)v4);
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v37 = -1;
  v38 = 0;
  v39 = 0;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader((uint64_t)v4, a1, a2, 1, (uint64_t)v32) & 1) == 0)
  {
LABEL_41:
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_42;
  }
  v4[22] = v37;
  if (v38 == -1
    || (std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)v4 + 8, (int)v38), v5 = v38, v38 == -1)|| v38 >= 1)
  {
    v6 = 0;
    v13 = a1 + 4;
    while (1)
    {
      LODWORD(__p[0]) = 0;
      std::istream::read();
      if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
        break;
      v14 = (int)__p[0];
      fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v4);
      **(_DWORD **)(*((_QWORD *)v4 + 8) + 8 * v6) = v14;
      v31 = 0;
      std::istream::read();
      if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v23 = fst::LogMessage::LogMessage((fst *)v28, (uint64_t)__p);
        v24 = (_QWORD *)fst::cerr(v23);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"VectorFst::Read: read failed: ", 30);
        v25 = *(char *)(a2 + 23);
        if (v25 >= 0)
          v11 = a2;
        else
          v11 = *(_QWORD *)a2;
        if (v25 >= 0)
          v12 = *(unsigned __int8 *)(a2 + 23);
        else
          v12 = *(_QWORD *)(a2 + 8);
        goto LABEL_38;
      }
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 8 * v6) + 24), v31);
      if (v31)
      {
        v15 = 0;
        while (1)
        {
          std::istream::read();
          std::istream::read();
          LODWORD(__p[0]) = 0;
          std::istream::read();
          v28[2] = __p[0];
          std::istream::read();
          if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
            break;
          fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*((_QWORD *)v4 + 8) + 8 * v6), v28);
          if (++v15 >= v31)
            goto LABEL_20;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v16 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)__p);
        v17 = (_QWORD *)fst::cerr(v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"VectorFst::Read: read failed: ", 30);
        v19 = *(char *)(a2 + 23);
        if (v19 >= 0)
          v20 = a2;
        else
          v20 = *(_QWORD *)a2;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(a2 + 23);
        else
          v21 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        v22 = (fst::LogMessage *)&v27;
        goto LABEL_39;
      }
LABEL_20:
      ++v6;
      v5 = v38;
      if (v38 != -1 && v38 <= v6)
        goto LABEL_6;
    }
    v5 = v38;
    if (v38 != -1)
      goto LABEL_6;
  }
  else
  {
    LODWORD(v6) = 0;
LABEL_6:
    if (v5 != v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)v28, (uint64_t)__p);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VectorFst::Read: unexpected end of file: ", 41);
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
LABEL_38:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v22 = (fst::LogMessage *)v28;
LABEL_39:
      fst::LogMessage::~LogMessage(v22);
      if (v30 < 0)
        operator delete(__p[0]);
      goto LABEL_41;
    }
  }
LABEL_42:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return v4;
}

void sub_1AD8A3D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (a20 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a22);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v2;

  result = fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Read(a1);
  if (result)
  {
    v2 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D28970;
    result[1] = v2;
  }
  return result;
}

_DWORD *fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Read(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;
  void *v14[2];
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_5:
      std::ifstream::basic_ifstream(v14);
      if ((v15[*((_QWORD *)v14[0] - 3) + 16] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
        v3 = (_QWORD *)fst::cerr(v2);
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ExpandedFst::Read: Can't open file: ", 36);
        v5 = *(char *)(a1 + 23);
        if (v5 >= 0)
          v6 = a1;
        else
          v6 = *(_QWORD *)a1;
        if (v5 >= 0)
          v7 = *(unsigned __int8 *)(a1 + 23);
        else
          v7 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
        if (v12 < 0)
          operator delete(__p[0]);
        v8 = 0;
      }
      else
      {
        fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
        v8 = fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(v14, (uint64_t)__p);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      v14[0] = *(void **)MEMORY[0x1E0DE4F40];
      *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1AF44CA70](v15);
      std::istream::~istream();
      MEMORY[0x1AF44D094](v16);
      return v8;
    }
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_5;
  }
  v9 = (_QWORD *)fst::cin((fst *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "standard input");
  fst::FstReadOptions::FstReadOptions(v14, __p, 0, 0, 0);
  v8 = fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(v9, (uint64_t)v14);
  if ((v15[7] & 0x80000000) != 0)
    operator delete(v14[0]);
  if (v12 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1AD8A3FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a24);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v6 = -1;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  v37 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v38 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v38 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v32);
  v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return updated;
}

void sub_1AD8A446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D213B0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD8A4620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D286F0;
  a1[1] = v2;
  return a1;
}

void sub_1AD8A4694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
  *a1 = &unk_1E5D286F0;
  a1[1] = v4;
  return a1;
}

void sub_1AD8A4718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D286F0;
  result[1] = v3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD8A4810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v6 = -1;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  v37 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v38 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v38 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v32);
  v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return updated;
}

void sub_1AD8A4C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD8A4F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D212D0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD8A50D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD8A5170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D256C0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D256C0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25440;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25440;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a3, a1, a2, a4, 2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD8A5E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD8A5F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD8A6038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF20;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD8A6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t result;
  fst *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const void **v38;
  unsigned __int8 *v39;
  fst *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const void **v56;
  unsigned __int8 *v57;
  fst *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  fst *v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *__p[2];
  char v82;
  char v83;

  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    *(_DWORD *)a5 = *(_DWORD *)v10;
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v10 + 8));
    std::string::operator=((std::string *)(a5 + 32), (const std::string *)(v10 + 32));
    v11 = *(_QWORD *)(v10 + 88);
    v12 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(a5 + 72) = v12;
    *(_QWORD *)(a5 + 88) = v11;
  }
  else
  {
    v13 = fst::FstHeader::Read(a5, (uint64_t)a2, a3, 0);
    result = 0;
    if (!v13)
      return result;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v15 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    v16 = (_QWORD *)fst::cerr(v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"FstImpl::ReadHeader: source: ", 29);
    v18 = *(char *)(a3 + 23);
    v19 = v18 >= 0 ? a3 : *(_QWORD *)a3;
    v20 = v18 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", fst_type: ", 12);
    v23 = *(char *)(a5 + 31);
    v24 = v23 >= 0 ? a5 + 8 : *(_QWORD *)(a5 + 8);
    v25 = v23 >= 0 ? *(unsigned __int8 *)(a5 + 31) : *(_QWORD *)(a5 + 16);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", arc_type: ", 12);
    v28 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    v29 = *(char *)(v28 + 23);
    v30 = v29 >= 0 ? v28 : *(_QWORD *)v28;
    v31 = v29 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(_QWORD *)(v28 + 8);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", version: ", 11);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", flags: ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0)
      operator delete(__p[0]);
  }
  v34 = *(unsigned __int8 *)(a5 + 31);
  if ((v34 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(a5 + 31);
  else
    v35 = *(_QWORD *)(a5 + 16);
  v36 = *(unsigned __int8 *)(a1 + 39);
  v37 = (char)v36;
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a1 + 24);
  if (v35 != v36)
    goto LABEL_40;
  v38 = (const void **)(a5 + 8);
  if (v37 >= 0)
    v39 = (unsigned __int8 *)(a1 + 16);
  else
    v39 = *(unsigned __int8 **)(a1 + 16);
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(_QWORD *)(a5 + 16)))
    {
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v40 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      v41 = (_QWORD *)fst::cerr(v40);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"FstImpl::ReadHeader: Fst not of type \"", 38);
      v43 = *(char *)(a1 + 39);
      if (v43 >= 0)
        v44 = a1 + 16;
      else
        v44 = *(_QWORD *)(a1 + 16);
      if (v43 >= 0)
        v45 = *(unsigned __int8 *)(a1 + 39);
      else
        v45 = *(_QWORD *)(a1 + 24);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\": ", 3);
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      goto LABEL_79;
    }
  }
  else if (*(_BYTE *)(a5 + 31))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34)
        goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_52:
  v51 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  v52 = *(unsigned __int8 *)(a5 + 55);
  if ((v52 & 0x80u) == 0)
    v53 = *(unsigned __int8 *)(a5 + 55);
  else
    v53 = *(_QWORD *)(a5 + 40);
  v54 = *(unsigned __int8 *)(v51 + 23);
  v55 = (char)v54;
  if ((v54 & 0x80u) != 0)
    v54 = *(_QWORD *)(v51 + 8);
  if (v53 != v54)
    goto LABEL_67;
  v56 = (const void **)(a5 + 32);
  if (v55 >= 0)
    v57 = (unsigned __int8 *)v51;
  else
    v57 = *(unsigned __int8 **)v51;
  if ((v52 & 0x80) != 0)
  {
    if (memcmp(*v56, v57, *(_QWORD *)(a5 + 40)))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v58 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      v59 = (_QWORD *)fst::cerr(v58);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"FstImpl::ReadHeader: Arc not of type \"", 38);
      v61 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
      v62 = *(char *)(v61 + 23);
      if (v62 >= 0)
        v63 = v61;
      else
        v63 = *(_QWORD *)v61;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v61 + 23);
      else
        v64 = *(_QWORD *)(v61 + 8);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\": ", 3);
      v66 = *(char *)(a3 + 23);
      if (v66 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      if (v66 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      goto LABEL_79;
    }
  }
  else if (*(_BYTE *)(a5 + 55))
  {
    while (*(unsigned __int8 *)v56 == *v57)
    {
      v56 = (const void **)((char *)v56 + 1);
      ++v57;
      if (!--v52)
        goto LABEL_83;
    }
    goto LABEL_67;
  }
LABEL_83:
  if (*(_DWORD *)(a5 + 56) < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v67 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    v68 = (_QWORD *)fst::cerr(v67);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
    v70 = *(char *)(a1 + 39);
    if (v70 >= 0)
      v71 = a1 + 16;
    else
      v71 = *(_QWORD *)(a1 + 16);
    if (v70 >= 0)
      v72 = *(unsigned __int8 *)(a1 + 39);
    else
      v72 = *(_QWORD *)(a1 + 24);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" Fst version: ", 14);
    v74 = *(char *)(a3 + 23);
    if (v74 >= 0)
      v49 = a3;
    else
      v49 = *(_QWORD *)a3;
    if (v74 >= 0)
      v50 = *(unsigned __int8 *)(a3 + 23);
    else
      v50 = *(_QWORD *)(a3 + 8);
LABEL_79:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0)
      operator delete(__p[0]);
    return 0;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a5 + 64);
  if ((*(_BYTE *)(a5 + 60) & 1) != 0)
    *(_QWORD *)(a1 + 40) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  if (!*(_BYTE *)(a3 + 52))
  {
    v75 = *(_QWORD *)(a1 + 40);
    if (v75)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v75 + 8))(v75, v57);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  if ((*(_BYTE *)(a5 + 60) & 2) != 0)
    *(_QWORD *)(a1 + 48) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  if (!*(_BYTE *)(a3 + 53))
  {
    v76 = *(_QWORD *)(a1 + 48);
    if (v76)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v76 + 8))(v76, v57);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  v77 = *(_QWORD *)(a3 + 32);
  if (v77)
  {
    v78 = *(_QWORD *)(a1 + 40);
    if (v78)
    {
      (*(void (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v78 + 8))(*(_QWORD *)(a1 + 40), v57);
      v77 = *(_QWORD *)(a3 + 32);
    }
    *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77, v57);
  }
  v79 = *(_QWORD *)(a3 + 40);
  if (v79)
  {
    v80 = *(_QWORD *)(a1 + 48);
    if (v80)
    {
      (*(void (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v80 + 8))(*(_QWORD *)(a1 + 48), v57);
      v79 = *(_QWORD *)(a3 + 40);
    }
    *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v79 + 16))(v79, v57);
  }
  return 1;
}

void sub_1AD8A66A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::SymbolTable::Read(_QWORD *a1, const std::string *a2)
{
  _QWORD *v3;
  void *__p[2];
  __int128 v6;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  v3 = fst::SymbolTable::Read(a1);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  return v3;
}

void sub_1AD8A6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  fst::SymbolTableReadOptions::~SymbolTableReadOptions(&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::SymbolTable::Read(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v2;

  result = (_QWORD *)fst::SymbolTableImpl::Read(a1);
  if (result)
  {
    v2 = result;
    result = (_QWORD *)operator new();
    *result = &off_1E5D1AD68;
    result[1] = v2;
  }
  return result;
}

void fst::SymbolTableReadOptions::~SymbolTableReadOptions(void **this)
{
  void *v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD8A6C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22780;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CEB0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD8A6D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FCB0;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22780;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  *(_QWORD *)a1 = &unk_1E5D22780;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CEB0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v23 >= v22)
        goto LABEL_45;
LABEL_25:
      v14 = v23;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (!v21)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v23;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD8A72C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::LogWeightTpl<float>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::LogWeightTpl<float>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type(void)::type;
}

void sub_1AD8A7418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::LogWeightTpl<float>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string v5;

  {
    v2 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    v3 = std::string::insert(&v5, 0, "log");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    fst::LogWeightTpl<float>::Type(void)::type = v2;
  }
  return fst::LogWeightTpl<float>::Type(void)::type;
}

void sub_1AD8A7514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD8A79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  std::vector<int>::value_type __x;
  std::vector<int> v32;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v32.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v30 = *(int64x2_t *)(v16 + 8);
        v26 = 0;
        v27 = v20 >> 4;
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v22 = *(_QWORD *)(v16 + 24);
        do
        {
          v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(_QWORD *)v22;
            v24.i64[1] = HIDWORD(*(_QWORD *)v22);
            v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              v14 = *v4;
            }
            ++v26;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v21;
          v25 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        v30 = v19;
        v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((_QWORD *)v16, v27 - v26);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v32.__begin_;
    if (!v32.__begin_)
      return;
  }
  else
  {
    v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1AD8A7C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD8A7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  int v25;
  std::vector<unsigned int>::pointer end;
  unsigned int *v27;
  std::vector<unsigned int>::pointer begin;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  std::vector<unsigned int>::pointer v36;
  unsigned int *v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  std::vector<unsigned int>::pointer v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  std::vector<unsigned int>::pointer v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  int v59;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  std::vector<unsigned int> v66;
  std::vector<unsigned int> v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v73 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, &v68, 0);
      v8 = v73;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v61 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      v65 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v63);
      v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63))
        {
          if (v63)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11)
              std::vector<int>::reserve(&v67, v18);
            if (v14)
              std::vector<int>::reserve(&v66, v18);
            v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v68);
            v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(_QWORD *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71)
                      --*(_DWORD *)v71;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2)
                      v46 = 2;
                    v47 = v67.__begin_ + 1;
                    v48 = *v67.__begin_;
                    v49 = v46 - 1;
                    while (1)
                    {
                      v51 = *v47++;
                      v50 = v51;
                      if (v51 == v48)
                        break;
                      v48 = v50;
                      if (!--v49)
                        goto LABEL_101;
                    }
                    v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1)
                        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      v58 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                      *(float *)&v68 = v58;
                      v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v58) != 1)v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        *(float *)&v68 = v58;
                        v75 = 0;
                        if (v58 != 0.0)
                          v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v63)
                        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
                      else
                        ++v65;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14)
                      goto LABEL_112;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2)
                      v52 = 2;
                    v53 = v66.__begin_ + 1;
                    v54 = *v66.__begin_;
                    v55 = v52 - 1;
                    while (1)
                    {
                      v57 = *v53++;
                      v56 = v57;
                      if (v57 == v54)
                        break;
                      v54 = v56;
                      if (!--v55)
                        goto LABEL_112;
                    }
                    v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              v20 = v69 + 16 * v72;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v73;
              }
              else
              {
                v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v8)
                v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < (int)a2)
                v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v75 = 0;
              v24 = *(float *)(v20 + 8);
              v75 = LODWORD(v24);
              v74 = 0;
              if (v24 != 0.0)
              {
                v75 = LODWORD(v24);
                v74 = 2139095040;
                if (v24 != INFINITY)
                  v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17)
                v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v25 != (_DWORD)v17 + 1)
                v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  begin = v67.__begin_;
                  v29 = v67.__end_ - v67.__begin_;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_135;
                  v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    begin = v67.__begin_;
                    end = v67.__end_;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (unsigned int *)&v33[4 * v29];
                  *v34 = *(_DWORD *)v20;
                  v27 = v34 + 1;
                  while (end != begin)
                  {
                    v35 = *--end;
                    *--v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v67.__end_ = v8;
                  v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  v38 = v66.__begin_;
                  v39 = v66.__end_ - v66.__begin_;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62)
LABEL_135:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40)
                    v40 = v41 >> 1;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                    v42 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    v38 = v66.__begin_;
                    v36 = v66.__end_;
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (unsigned int *)&v43[4 * v39];
                  *v44 = *(_DWORD *)(v20 + 4);
                  v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    v45 = *--v36;
                    *--v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          v17 = v65;
          goto LABEL_18;
        }
        if (v63)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      v8 = v73;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1AD8A8554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 12);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 12);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 12), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      a3 = v44;
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD8A8CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD8A8DCC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A830;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD8A8EB4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A830;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD8A92C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
    v12 = a5;
    if (!a4)
      v12 = 0;
    v13 = v11 + v12;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(_QWORD *)a1)
        free(*(void **)a1);
      v23 = 0x4000;
      if (v13 > 0x4000)
        v23 = v13;
      *(_QWORD *)(a1 + 8) = v23;
      v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 16) = v15;
      v14 = v15;
    }
    else
    {
      v14 = *(_OWORD **)(a1 + 16);
      v15 = *(_OWORD **)a1;
    }
    *(_QWORD *)(a1 + 24) = &v14[v13];
    v16 = v24;
    v17 = v25;
    v19 = v26;
    v18 = v27;
    if (v27)
      ++*v27;
    v20 = 0;
    if (!v16)
      goto LABEL_15;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      v22 = *v16;
      if (v21)
        break;
      *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16)
          break;
LABEL_15:
        if (v20 >= v19)
        {
          if (v18)
            --*v18;
          return;
        }
        *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    v10 = v25 + 16 * v26;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1AD8A94C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  std::vector<int>::value_type __x;
  std::vector<int> v32;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v32.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v30 = *(int64x2_t *)(v16 + 8);
        v26 = 0;
        v27 = v20 >> 4;
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v22 = *(_QWORD *)(v16 + 24);
        do
        {
          v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(_QWORD *)v22;
            v24.i64[1] = HIDWORD(*(_QWORD *)v22);
            v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              v14 = *v4;
            }
            ++v26;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v21;
          v25 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        v30 = v19;
        v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((_QWORD *)v16, v27 - v26);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v32.__begin_;
    if (!v32.__begin_)
      return;
  }
  else
  {
    v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1AD8A96E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::SimpleTokenizerOptions::options@<X0>(quasar::SimpleTokenizerOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = (char *)this + 16;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

BOOL quasar::SimpleTokenizerBlock::init(quasar::SimpleTokenizerBlock *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)((char *)this + 184);
  quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
  return quasar::RegularExpressionReplacer::read(v1);
}

BOOL quasar::RegularExpressionReplacer::read(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type size;
  uint64_t *v11;
  int *v12;
  std::string *v13;
  unsigned __int8 v14;
  _QWORD *v15;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  std::string::size_type v19;
  char *v20;
  std::string::size_type v21;
  int v22;
  __int128 v23;
  std::string *v24;
  void **v25;
  std::string::size_type v26;
  int v27;
  std::string *v28;
  int v29;
  std::string::size_type v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int *v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  std::locale *v47;
  std::locale *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  std::string *data;
  std::string::size_type v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::locale::__imp *v75;
  std::locale::__imp *v76;
  std::wstring v77;
  std::wstring v78;
  std::regex_traits<wchar_t> v79;
  __int128 v80;
  __int128 v81;
  std::locale::__imp *v82;
  std::locale v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  std::locale::__imp *v87;
  std::wstring v88;
  __int128 v89;
  std::string::size_type v90;
  std::locale v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  std::string *v109;
  unint64_t v110;
  void *v111;
  char v112;
  std::string v113;
  std::regex_traits<wchar_t> v114[2];
  std::__shared_weak_count *v115;
  void *__p[2];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[2];
  _BYTE v134[120];
  uint64_t v135;
  _QWORD v136[22];

  v136[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v133);
  v2 = v135;
  if (v135)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100](v114, dword_1AE145594, 0);
    v3 = v133[0];
    if ((v134[*(_QWORD *)(v133[0] - 24) + 16] & 2) != 0)
      goto LABEL_119;
    memset(&v113, 0, sizeof(v113));
    v4 = &v84;
    v72 = v2;
    v75 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
    v76 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
    v74 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v5 = &quasar::gLogLevel;
    v73 = MEMORY[0x1E0DE4FB8] + 16;
LABEL_4:
    std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(_QWORD *)(v3 - 24)));
    v6 = std::locale::use_facet(v91, MEMORY[0x1E0DE4A90]);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v91);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v133, (uint64_t)&v113, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0)
    {
      if (*v5 >= 6)
      {
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        *(_OWORD *)v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        *(_OWORD *)&v91[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v113;
        else
          v9 = (std::string *)v113.__r_.__value_.__r.__words[0];
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
        else
          size = v113.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v9, size);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v91);
      }
      kaldi::Trim(&v113);
      v11 = v4;
      v12 = v5;
      v13 = &v113;
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)v113.__r_.__value_.__r.__words[0];
      v14 = v13->__r_.__value_.__s.__data_[1];
      v112 = 1;
      LOWORD(v111) = v14;
      v109 = 0;
      v108 = 0;
      v110 = 0;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v91, &v113, 24);
      v89 = 0uLL;
      v90 = 0;
      while (1)
      {
        v15 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (uint64_t)&v89, v14);
        v16 = v109;
        v17 = (_BYTE *)v108;
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
        {
          if ((std::string *)((char *)v109 - v108) != (std::string *)96)
            goto LABEL_126;
          v5 = v12;
          v4 = v11;
          v27 = *(char *)(v108 + 23);
          if (v27 < 0)
          {
            if (*(_QWORD *)(v108 + 8) != 1)
              goto LABEL_126;
            v17 = *(_BYTE **)v108;
          }
          else if (v27 != 1)
          {
            goto LABEL_126;
          }
          if (*v17 != 115)
            goto LABEL_126;
          v28 = v109 - 1;
          if (SHIBYTE(v109[-1].__r_.__value_.__r.__words[2]) < 0)
          {
            v30 = v109[-1].__r_.__value_.__l.__size_;
            if (v30 != 1 || *v28->__r_.__value_.__l.__data_ != 103)
            {
              if (v30 != 2)
                goto LABEL_126;
              v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
LABEL_59:
              if (LOWORD(v28->__r_.__value_.__l.__data_) != 15207)
              {
LABEL_126:
                v131 = 0u;
                v132 = 0u;
                v129 = 0u;
                v130 = 0u;
                v127 = 0u;
                v128 = 0u;
                v125 = 0u;
                v126 = 0u;
                v123 = 0u;
                v124 = 0u;
                v121 = 0u;
                v122 = 0u;
                v119 = 0u;
                v120 = 0u;
                v117 = 0u;
                v118 = 0u;
                *(_OWORD *)__p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Only (global) replacement operations are supported, got ", 56);
                v64 = *(char *)(v108 + 23);
                if (v64 >= 0)
                  v65 = v108;
                else
                  v65 = *(_QWORD *)v108;
                if (v64 >= 0)
                  v66 = *(unsigned __int8 *)(v108 + 23);
                else
                  v66 = *(_QWORD *)(v108 + 8);
                v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
                v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" with specifier ", 16);
                v69 = SHIBYTE(v109[-1].__r_.__value_.__r.__words[2]);
                if (v69 >= 0)
                  data = v109 - 1;
                else
                  data = (std::string *)v109[-1].__r_.__value_.__l.__data_;
                if (v69 >= 0)
                  v71 = HIBYTE(v109[-1].__r_.__value_.__r.__words[2]);
                else
                  v71 = v109[-1].__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)data, v71);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
              }
            }
          }
          else
          {
            v29 = HIBYTE(v109[-1].__r_.__value_.__r.__words[2]);
            if (v29 != 1)
            {
              if (v29 != 2)
                goto LABEL_126;
              goto LABEL_59;
            }
            if (v28->__r_.__value_.__s.__data_[0] != 103)
              goto LABEL_126;
          }
          if (*v5 >= 6)
          {
            v131 = 0u;
            v132 = 0u;
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"read expression: \"", 18);
            v32 = *(char *)(v108 + 47);
            if (v32 >= 0)
              v33 = v108 + 24;
            else
              v33 = *(_QWORD *)(v108 + 24);
            if (v32 >= 0)
              v34 = *(unsigned __int8 *)(v108 + 47);
            else
              v34 = *(_QWORD *)(v108 + 32);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\", mapping to \"", 15);
            v37 = *(char *)(v108 + 71);
            if (v37 >= 0)
              v38 = v108 + 48;
            else
              v38 = *(_QWORD *)(v108 + 48);
            if (v37 >= 0)
              v39 = *(unsigned __int8 *)(v108 + 71);
            else
              v39 = *(_QWORD *)(v108 + 56);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
          }
          std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)__p);
          v41 = *(char *)(v108 + 47);
          if (v41 >= 0)
            v42 = (int *)(v108 + 24);
          else
            v42 = *(int **)(v108 + 24);
          if (v41 >= 0)
            v43 = *(unsigned __int8 *)(v108 + 47);
          else
            v43 = *(_QWORD *)(v108 + 32);
          std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes((uint64_t)__p, v42, (int *)((char *)v42 + v43), &v78);
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100]<std::char_traits<wchar_t>,std::allocator<wchar_t>>(&v79, (uint64_t)&v78, 0);
          v44 = *(char *)(v108 + 71);
          if (v44 >= 0)
            v45 = (int *)(v108 + 48);
          else
            v45 = *(int **)(v108 + 48);
          if (v44 >= 0)
            v46 = *(unsigned __int8 *)(v108 + 71);
          else
            v46 = *(_QWORD *)(v108 + 56);
          std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes((uint64_t)__p, v45, (int *)((char *)v45 + v46), &v77);
          std::locale::locale(&v83, &v79.__loc_);
          *(_OWORD *)v11 = *(_OWORD *)&v79.__ct_;
          v85 = v80;
          v86 = v81;
          v81 = 0uLL;
          v87 = v82;
          v88 = v77;
          memset(&v77, 0, sizeof(v77));
          v47 = (std::locale *)a1[1];
          if ((unint64_t)v47 >= a1[2])
          {
            v50 = std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__push_back_slow_path<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>(a1, (uint64_t)&v83);
            v51 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
            a1[1] = v50;
            if (v51 < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
          }
          else
          {
            v48 = std::locale::locale(v47, &v83);
            *(_OWORD *)&v48[1].__locale_ = *(_OWORD *)v11;
            *(_OWORD *)&v48[3].__locale_ = v85;
            *(_OWORD *)&v48[5].__locale_ = v86;
            v86 = 0uLL;
            v48[7].__locale_ = v87;
            v49 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
            v48[10].__locale_ = (std::locale::__imp *)v88.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v48[8].__locale_ = v49;
            memset(&v88, 0, sizeof(v88));
            a1[1] = (uint64_t)&v48[11];
          }
          v52 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
          if (*((_QWORD *)&v86 + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          std::locale::~locale(&v83);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          if (*((_QWORD *)&v81 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          std::locale::~locale(&v79.__loc_);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)__p);
          if (SHIBYTE(v90) < 0)
            operator delete((void *)v89);
          v91[0].__locale_ = v76;
          *(std::locale::__imp **)((char *)&v91[0].__locale_ + *((_QWORD *)v76 - 3)) = v75;
          *(_QWORD *)&v92 = v74;
          *((_QWORD *)&v92 + 1) = v73;
          if (SHIBYTE(v97) < 0)
            operator delete(v96[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](&v99);
          v91[0].__locale_ = (std::locale::__imp *)&v108;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
          if (v112 < 0)
            operator delete(v111);
          v3 = v133[0];
          goto LABEL_4;
        }
        if (v109 == (std::string *)v108)
          goto LABEL_29;
        v18 = v109 - 1;
        if (SHIBYTE(v109[-1].__r_.__value_.__r.__words[2]) < 0)
        {
          v19 = v109[-1].__r_.__value_.__l.__size_;
          if (!v19)
            goto LABEL_29;
          v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
        }
        else
        {
          v19 = HIBYTE(v109[-1].__r_.__value_.__r.__words[2]);
          if (!*((_BYTE *)&v109[-1].__r_.__value_.__s + 23))
            goto LABEL_29;
        }
        v20 = (char *)&v18[-1].__r_.__value_.__r.__words[2] + 7;
        v21 = v19;
        while (v21)
        {
          v22 = v20[v21--];
          if (v22 != 92)
            goto LABEL_28;
        }
        LODWORD(v21) = -1;
LABEL_28:
        if ((((_DWORD)v19 + ~(_DWORD)v21) & 1) != 0)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v111, (const void **)&v89, (uint64_t)__p);
          if ((SBYTE7(v117) & 0x80u) == 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          if ((SBYTE7(v117) & 0x80u) == 0)
            v26 = BYTE7(v117);
          else
            v26 = (std::string::size_type)__p[1];
          std::string::append(v109 - 1, (const std::string::value_type *)v25, v26);
          if (SBYTE7(v117) < 0)
            operator delete(__p[0]);
        }
        else
        {
LABEL_29:
          if ((unint64_t)v109 >= v110)
          {
            v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v108, &v89);
          }
          else
          {
            if (SHIBYTE(v90) < 0)
            {
              std::string::__init_copy_ctor_external(v109, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
            }
            else
            {
              v23 = v89;
              v109->__r_.__value_.__r.__words[2] = v90;
              *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v23;
            }
            v24 = v16 + 1;
          }
          v109 = v24;
        }
      }
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    v2 = v72;
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v133 + *(_QWORD *)(v133[0] - 24)), *(_DWORD *)&v134[*(_QWORD *)(v133[0] - 24) + 16] | 4);
    if (*v5 >= 6)
    {
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      *(_OWORD *)v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      *(_OWORD *)&v91[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"RegularExpressionReplacer read in ", 34);
      v58 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" regular expressions", 20);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v91);
    }
LABEL_119:
    v59 = v115;
    if (v115)
    {
      p_shared_owners = (unint64_t *)&v115->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    std::locale::~locale(&v114[0].__loc_);
  }
  v133[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v133 + *(_QWORD *)(v133[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v134);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v136);
  return v2 != 0;
}

void sub_1AD8AA1C4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD8AA280);
}

void sub_1AD8AA1D8()
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&STACK[0x2E0]);
  JUMPOUT(0x1AD8AA21CLL);
}

void sub_1AD8AA1F0()
{
  unint64_t v0;

  STACK[0x260] = v0;
  JUMPOUT(0x1AD8AA21CLL);
}

void sub_1AD8AA200()
{
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  JUMPOUT(0x1AD8AA21CLL);
}

void sub_1AD8AA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a51 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
  a52 = (uint64_t)&STACK[0x258];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::locale::~locale((std::locale *)&STACK[0x2A0]);
  std::ifstream::~ifstream(&STACK[0x3F8]);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'quasar::SimpleTokenizerBlock::init(quasar::SimpleTokenizerBlock *this)
{
  char *v1;
  uint64_t *v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 88);
  v2 = (uint64_t *)(v1 + 184);
  quasar::OptionValue<std::string>::value((_QWORD *)v1 + 3);
  return quasar::RegularExpressionReplacer::read(v2);
}

void quasar::SimpleTokenizerBlock::process(_QWORD *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  quasar::TranslationPhraseInternal *v3;
  quasar::TranslationPhraseInternal *v4;
  const std::string *v5;
  const std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string v12;
  __int16 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  uint64_t v23;
  void **v24[17];
  std::string *v25;
  std::string *v26;
  unint64_t v27;
  const std::string *v28;
  const std::string *v29;
  uint64_t v30;
  std::string v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::string *v35;
  unint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v32, v3);
      quasar::RegularExpressionReplacer::apply(a1 + 23, (uint64_t)v32, &v31);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      kaldi::SplitStringToVector(&v31, " ", 1, (uint64_t)&v28);
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v24);
      v6 = v28;
      v5 = v29;
      while (v6 != v5)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        memset(&v12, 0, sizeof(v12));
        v13 = 0;
        v17 = 3212836864;
        v18 = -1;
        v19 = 0u;
        v20 = 0u;
        __p = 0u;
        v22 = 0;
        v23 = -1;
        std::string::operator=(&v12, v6);
        LOBYTE(v13) = 1;
        v7 = v26;
        if ((unint64_t)v26 >= v27)
        {
          v8 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v25, (const quasar::TranslationTokenInternal *)&v12);
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(v26, (const quasar::TranslationTokenInternal *)&v12);
          v8 = (std::string *)((char *)v7 + 136);
        }
        v26 = v8;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (SBYTE7(v20) < 0)
          operator delete((void *)v19);
        if (v14)
        {
          v15 = v14;
          operator delete(v14);
        }
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        ++v6;
      }
      if (v25 != v26)
        v26[-5].__r_.__value_.__s.__data_[8] = 0;
      v9 = v35;
      if ((unint64_t)v35 >= v36)
      {
        v10 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v34, (const quasar::TranslationPhraseInternal *)v24);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(v35, (const quasar::TranslationPhraseInternal *)v24);
        v10 = (std::string *)((char *)v9 + 200);
      }
      v35 = v10;
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v24);
      v24[0] = (void **)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v33 < 0)
        operator delete(v32[0]);
      v3 = (quasar::TranslationPhraseInternal *)((char *)v3 + 200);
    }
    while (v3 != v4);
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)&v34, 0);
  v24[0] = (void **)&v34;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1AD8AA50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;

  a29 = (void **)(v29 - 128);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void quasar::RegularExpressionReplacer::apply(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  std::string::value_type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::wstring::size_type size;
  std::__wrap_iter<const wchar_t *> v12;
  std::__wrap_iter<const wchar_t *> v13;
  __int32 *v14;
  uint64_t v15;
  std::wstring::size_type v16;
  char *p_p;
  std::wstring v18;
  std::wstring __p;
  _BYTE v20[192];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*a1 == a1[1])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v20);
    v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) == 0)
      v7 = (std::string::value_type *)a2;
    else
      v7 = *(std::string::value_type **)a2;
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a2 + 8);
    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes((uint64_t)v20, (int *)v7, (int *)&v7[v6], &__p);
    v8 = *a1;
    v9 = a1[1];
    if (v8 != v9)
    {
      v10 = v8 + 64;
      do
      {
        memset(&v18, 0, sizeof(v18));
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)&__p;
        else
          v12.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (*(char *)(v10 + 23) >= 0)
          v14 = (__int32 *)v10;
        else
          v14 = *(__int32 **)v10;
        v13.__i_ = &v12.__i_[size];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::wstring>,std::__wrap_iter<wchar_t const*>,std::regex_traits<wchar_t>,wchar_t>(&v18, v12, v13, (const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *)(v10 - 64), v14, 0x100u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v18;
        v15 = v10 + 24;
        v10 += 88;
      }
      while (v15 != v9);
    }
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = __p.__r_.__value_.__l.__size_;
    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes((uint64_t)v20, p_p, &p_p[4 * v16], a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v20);
  }
}

void sub_1AD8AA76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void quasar::TranslationTokenInternal::~TranslationTokenInternal(quasar::TranslationTokenInternal *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void `virtual thunk to'quasar::SimpleTokenizerBlock::process(_QWORD *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  quasar::SimpleTokenizerBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt((std::codecvt<wchar_t, char, mbstate_t> *)v2, 0);
  *(_QWORD *)(v2 + 24) = 1114111;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &unk_1E5D40750;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1AD8AA8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  a1[16] = MEMORY[0x1E0DE4FD0] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_1AD8AA9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

void std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
  std::locale::~locale((std::locale *)a1);
}

uint64_t quasar::SimpleTokenizerBlock::minConfigVersion(quasar::SimpleTokenizerBlock *this)
{
  return 125;
}

uint64_t `virtual thunk to'quasar::SimpleTokenizerBlock::minConfigVersion(quasar::SimpleTokenizerBlock *this)
{
  return 125;
}

void quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AD8AAB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::SimpleTokenizerBlock::~SimpleTokenizerBlock(quasar::SimpleTokenizerBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 208));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 208));
  JUMPOUT(0x1AF44D190);
}

const char *quasar::SimpleTokenizerBlock::blockType(quasar::SimpleTokenizerBlock *this)
{
  return "SimpleTokenizerBlock";
}

void `virtual thunk to'quasar::SimpleTokenizerBlock::~SimpleTokenizerBlock(quasar::SimpleTokenizerBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 208));
}

{
  char **v1;

  v1 = (char **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 26);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::SimpleTokenizerBlock::blockType(quasar::SimpleTokenizerBlock *this)
{
  return "SimpleTokenizerBlock";
}

void quasar::SimpleTokenizerBlock::~SimpleTokenizerBlock(quasar::SimpleTokenizerBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  v6 = (void **)((char *)this + 184);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  *((_QWORD *)this + 1) = &off_1E5D38E78;
  *((_QWORD *)this + 3) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  *((_QWORD *)this + 3) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(uint64_t *a1, const quasar::TranslationTokenInternal *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xF0F0F0F0F0F0F0)
    v9 = 0x1E1E1E1E1E1E1E1;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[136 * v4];
  v16 = &v10[136 * v9];
  quasar::TranslationTokenInternal::TranslationTokenInternal(v14, a2);
  v15 = &v14[5].__r_.__value_.__s.__data_[16];
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v13);
  return v11;
}

void sub_1AD8AAE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 136);
      std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a2 + 24) = *((_WORD *)a3 + 12);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v4 = *((_QWORD *)a3 + 7);
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  *(_QWORD *)(a2 + 56) = v4;
  v5 = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v5;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 9) = 0;
  v6 = *((_QWORD *)a3 + 12);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 96) = v6;
  *(_QWORD *)(a2 + 104) = 0;
  result = *(__n128 *)((char *)a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a3 + 16);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TranslationTokenInternal>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TranslationTokenInternal>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1AF44D190);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::wstring *a4@<X8>)
{
  int *v7;
  std::wstring::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::wstring::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::wstring *v19;
  uint64_t v20;
  std::wstring::size_type v21;
  char v22;
  std::wstring *v23;
  const std::wstring::value_type **v24;
  char *v25;
  std::wstring::size_type v26;
  std::wstring *v27;
  uint64_t v28;
  int *v29;
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_23;
  v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 4;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::wstring::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      v18 = v29 == v7;
      *(_QWORD *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18)
        goto LABEL_34;
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((_BYTE *)&a4->__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_35;
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = (char *)a4;
          else
            v25 = (char *)a4->__r_.__value_.__r.__words[0];
          std::wstring::resize(a4, (v15 - v25) >> 2, 0);
          std::wstring::append[abi:ne180100]<wchar_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = a4;
          else
            v27 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
          std::wstring::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      v20 = v28 - (_QWORD)v19;
      std::wstring::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      v22 = v21;
      v23 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0)
        v23 = a4;
      v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v23 + 4 * v21;
      v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26)
      goto LABEL_41;
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1AD8AB3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::wstring *std::wstring::append[abi:ne180100]<wchar_t const*,0>(std::wstring *this, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  std::wstring::size_type size;
  std::wstring::size_type v9;
  std::wstring *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  std::wstring::size_type v14;
  std::wstring *v15;
  int *v16;
  int v17;
  std::wstring::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
    v10 = this;
  }
  v12 = v7 >> 2;
  if (v10 > (std::wstring *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::wstring::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v15 = this;
    if ((v6 & 0x80) != 0)
      v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      v17 = *v4++;
      *v16++ = v17;
    }
    *v16 = 0;
    v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v18;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (std::wstring::size_type)__p[1];
    std::wstring::append(this, (const std::wstring::value_type *)v13, v14);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1AD8AB544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::wstring *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::wstring>,std::__wrap_iter<wchar_t const*>,std::regex_traits<wchar_t>,wchar_t>(std::wstring *a1, std::__wrap_iter<const wchar_t *> a2, std::__wrap_iter<const wchar_t *> a3, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *a4, __int32 *a5, unsigned __int32 __m)
{
  __int16 v6;
  std::wstring::value_type *i;
  std::__wrap_iter<const wchar_t *>::iterator_type v11;
  std::wstring::value_type *v12;
  std::wstring::value_type *v13;
  std::wstring::value_type *v14;
  std::__wrap_iter<const wchar_t *>::iterator_type v15;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> v17;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> v18;

  v6 = __m;
  i = (std::wstring::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::wstring::push_back(a1, *i++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = &a5[wcslen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::wstring::value_type *)v18.__match_.__prefix_.first.__i_;
        v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::wstring::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<wchar_t const*>>::format<std::back_insert_iterator<std::wstring>>(&v18.__match_, a1, a5, v13, v6);
      v12 = (std::wstring::value_type *)v18.__match_.__suffix_.first.__i_;
      v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::wstring::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1AD8AB6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__x)
{
  std::vector<std::wssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *end;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::value_type *p_match;
  std::vector<std::wssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v8;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<wchar_t const*>>::compare[abi:ne180100](begin, v7) == 0;
  return v10;
}

std::wstring *std::match_results<std::__wrap_iter<wchar_t const*>>::format<std::back_insert_iterator<std::wstring>>(_QWORD **a1, std::wstring *this, std::wstring::value_type *a3, std::wstring::value_type *a4, __int16 a5)
{
  std::wstring::value_type *v6;
  std::wstring::value_type v9;
  std::wstring::value_type *v10;
  std::wstring::value_type *v12;
  std::wstring::value_type *v13;
  std::wstring::value_type v14;
  std::wstring::value_type *v15;
  std::wstring::value_type *v16;
  std::wstring::value_type v17;
  std::wstring::value_type *v18;
  std::wstring::value_type *v19;
  std::wstring::value_type v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  std::wstring::value_type **v25;
  std::wstring::value_type *v26;
  std::wstring::value_type *v27;
  std::wstring::value_type v28;
  std::wstring::value_type v29;
  std::wstring::value_type *v30;
  std::wstring::value_type *v31;
  std::wstring::value_type v32;
  std::wstring::value_type *v33;
  unsigned int v34;
  std::wstring::value_type **v35;
  std::wstring::value_type *v36;
  std::wstring::value_type *v37;
  std::wstring::value_type v38;

  v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4)
      return this;
    while (1)
    {
      v29 = *v6;
      if (*v6 == 92)
      {
        v33 = v6 + 1;
        if (v6 + 1 != a4)
        {
          v29 = *v33;
          v34 = *v33 - 48;
          if (v34 <= 9)
          {
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v34)
              v35 = (std::wstring::value_type **)(a1 + 3);
            else
              v35 = (std::wstring::value_type **)&(*a1)[3 * v34];
            v36 = *v35;
            v37 = v35[1];
            while (v36 != v37)
            {
              v38 = *v36++;
              std::wstring::push_back(this, v38);
            }
            goto LABEL_54;
          }
          ++v6;
        }
      }
      else if (v29 == 38)
      {
        v30 = (std::wstring::value_type *)**a1;
        v31 = (std::wstring::value_type *)(*a1)[1];
        while (v30 != v31)
        {
          v32 = *v30++;
          std::wstring::push_back(this, v32);
        }
        goto LABEL_53;
      }
      std::wstring::push_back(this, v29);
LABEL_53:
      v33 = v6;
LABEL_54:
      v6 = v33 + 1;
      if (v33 + 1 == a4)
        return this;
    }
  }
  if (a3 != a4)
  {
    do
    {
      v9 = *v6;
      v10 = v6 + 1;
      if (*v6 == 36 && v10 != a4)
      {
        v9 = *v10;
        if (*v10 > 38)
        {
          if (v9 == 39)
          {
            v18 = (std::wstring::value_type *)a1[9];
            v19 = (std::wstring::value_type *)a1[10];
            while (v18 != v19)
            {
              v20 = *v18++;
              std::wstring::push_back(this, v20);
            }
            goto LABEL_10;
          }
          if (v9 == 96)
          {
            v15 = (std::wstring::value_type *)a1[6];
            v16 = (std::wstring::value_type *)a1[7];
            while (v15 != v16)
            {
              v17 = *v15++;
              std::wstring::push_back(this, v17);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v9 == 36)
            goto LABEL_9;
          if (v9 == 38)
          {
            v12 = (std::wstring::value_type *)**a1;
            v13 = (std::wstring::value_type *)(*a1)[1];
            while (v12 != v13)
            {
              v14 = *v12++;
              std::wstring::push_back(this, v14);
            }
            goto LABEL_10;
          }
        }
        v21 = (v9 - 48);
        if (v21 <= 9)
        {
          if (v6 + 2 != a4)
          {
            v22 = v6[2];
            v23 = v22 - 48;
            v24 = v22 + 10 * v21 - 48;
            if (v23 <= 9)
            {
              v21 = v24;
              v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v21)
            v25 = (std::wstring::value_type **)(a1 + 3);
          else
            v25 = (std::wstring::value_type **)&(*a1)[3 * v21];
          v26 = *v25;
          v27 = v25[1];
          while (v26 != v27)
          {
            v28 = *v26++;
            std::wstring::push_back(this, v28);
          }
          goto LABEL_10;
        }
        v9 = 36;
      }
      v10 = v6;
LABEL_9:
      std::wstring::push_back(this, v9);
LABEL_10:
      v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__cdecl std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator++(std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this)
{
  std::sub_match<std::__wrap_iter<const wchar_t *>> *begin;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const wchar_t *>>::value_type *p_unmatched;
  __int32 *v7;
  const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *pregex;
  __int32 *v9;
  char v10;
  __int32 *v11;
  const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *v12;
  char v13;
  std::match_results<const wchar_t *> __p;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (__int32 *)p_unmatched->second.__i_;
  if (p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (__int32 *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>
                                                                                         + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (__int32 *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1AD8ABB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__cdecl std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this, std::__wrap_iter<const wchar_t *> __a, std::__wrap_iter<const wchar_t *> __b, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::value_type *p_match;
  std::match_results<const wchar_t *> __p;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>
                                                                                     + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)__re, (__int32 *)__a.__i_, (__int32 *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1AD8ABC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, __int32 *__f, __int32 *__l, std::match_results<const wchar_t *> *this, int a5)
{
  int v9;
  std::match_results<const wchar_t *>::value_type *p_unmatched;
  const __int32 *first;
  const __int32 *second;
  uint64_t result;
  int v14;
  const __int32 *v15;
  int v16;
  std::vector<std::wcsub_match>::pointer end;
  std::vector<std::wcsub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_subs<std::allocator<std::sub_match<wchar_t const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<wchar_t const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const __int32 *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::wcsub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)((unint64_t)((char *)a3 - (char *)a2) >> 2))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const __int32 *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1AD8AC260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<wchar_t>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v52 = 0;
    v51 = a3;
    v50 = (a3 - a2) >> 2;
    v19 = *((_QWORD *)&v61 + 1);
    v20 = *((_QWORD *)&v59 + 1);
    v21 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v22 = v21 / 0x2A;
    v23 = 3 * (v21 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v22) + 32 * v23 + 80) = v6;
    v24 = *(_QWORD *)(v20 + 8 * v22) + 32 * v23;
    v25 = (unint64_t)(a3 - a2) >> 2;
    *(_DWORD *)(v24 + 88) = a5;
    *(_BYTE *)(v24 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v25)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v19 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == v51;
          v36 = v33 != a2 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v52;
          if ((v53 & (v52 >= (v33 - *(_QWORD *)(v28 + 96 * v29 + 8)) >> 2)) == 0)
            v37 = (v33 - *(_QWORD *)(v28 + 96 * v29 + 8)) >> 2;
          if (v37 != v50)
          {
            v52 = v37;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v38 = (void **)*((_QWORD *)&v59 + 1);
          v39 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v39 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v40 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v41 = (_QWORD *)(*v40 + 96 * ((unint64_t)v61 % 0x2A));
            v42 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v41 != (_QWORD *)v42)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v41);
                v41 += 12;
                if ((_QWORD *)((char *)v41 - *v40) == (_QWORD *)4032)
                {
                  v43 = (_QWORD *)v40[1];
                  ++v40;
                  v41 = v43;
                }
              }
              while (v41 != (_QWORD *)v42);
              v38 = (void **)*((_QWORD *)&v59 + 1);
              v39 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v46 = v39 - (_QWORD)v38;
          if (v46 >= 0x11)
          {
            do
            {
              operator delete(*v38);
              v38 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v38;
              v46 = v60 - (_QWORD)v38;
            }
            while ((_QWORD)v60 - (_QWORD)v38 > 0x10uLL);
          }
          if (v46 >> 3 == 1)
          {
            v47 = 21;
          }
          else
          {
            if (v46 >> 3 != 2)
              goto LABEL_53;
            v47 = 42;
          }
          *(_QWORD *)&v61 = v47;
LABEL_53:
          v53 = 1;
          v52 = v50;
LABEL_38:
          v19 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v48 = *a4;
            *(_QWORD *)v48 = a2;
            *(_QWORD *)(v48 + 8) = a2 + 4 * v52;
            v6 = 1;
            *(_BYTE *)(v48 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<wchar_t>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v44 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v44;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v45 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v45;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<wchar_t>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1AD8AC7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_subs<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  char v12;
  unsigned int v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const __int32 *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::wcsub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v42 = a4;
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v43 = 0;
  v12 = 0;
  v13 = 0;
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)((unint64_t)((char *)a3 - (char *)a2) >> 2);
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const __int32 *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = v12;
        v27 = (uint64_t)v19 - *((_QWORD *)v14 - 11);
        v28 = v43;
        if ((v26 & (v43 >= v27 >> 2)) == 0)
        {
          v29 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v29;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v28 = v27 >> 2;
          v30 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v30;
        }
        v31 = v54;
        if (v28 == a3 - a2)
        {
          v32 = (uint64_t)v53;
          while (v31 != (_QWORD *)v32)
          {
            v31 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v31);
          }
          v54 = (_OWORD *)v32;
          v12 = 1;
          v43 = a3 - a2;
        }
        else
        {
          v43 = v28;
          v33 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v33;
          v12 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v12 & 1) != 0)
  {
    v34 = *v42;
    *(_QWORD *)v34 = a2;
    *(_QWORD *)(v34 + 8) = &a2[v43];
    *(_BYTE *)(v34 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v36 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v37 = 1;
      do
      {
        v38 = v34 + 24 * v37;
        *(_OWORD *)v38 = *((_OWORD *)v36 - 1);
        v39 = *v36;
        v36 += 24;
        *(_BYTE *)(v38 + 16) = v39;
        v15 = v35 > v37++;
      }
      while (v15);
    }
    v40 = 1;
  }
  else
  {
LABEL_43:
    v40 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v40;
}

void sub_1AD8ACD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<wchar_t>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1AD8ACEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<wchar_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

char *std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8AD0A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8AD110(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::deque<std::__state<wchar_t>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<wchar_t>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

int64x2_t std::deque<std::__state<wchar_t>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<wchar_t>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1AE140E90);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<wchar_t>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD8AD5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<wchar_t>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1AD8AD8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::sub_match<std::__wrap_iter<wchar_t const*>>::compare[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  size_t v3;
  size_t v4;
  size_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void *v12[2];
  unsigned __int8 v13;

  std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100](a1, v12);
  std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100](a2, __p);
  if ((v11 & 0x80u) == 0)
    v3 = v11;
  else
    v3 = (size_t)__p[1];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (size_t)v12[1];
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  if (!v5
    || ((v13 & 0x80u) == 0 ? (v6 = v12) : (v6 = (void **)v12[0]),
        (v11 & 0x80u) == 0 ? (v7 = __p) : (v7 = (void **)__p[0]),
        v8 = wmemcmp((const __int32 *)v6, (const __int32 *)v7, v5),
        !(_DWORD)v8))
  {
    if (v4 < v3)
      v8 = 0xFFFFFFFFLL;
    else
      v8 = v3 < v4;
  }
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  return v8;
}

void sub_1AD8ADA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100]@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*((_BYTE *)result + 16))
    return std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(a2, (int *)*result, (int *)result[1], (uint64_t)(result[1] - *result) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string::size_type v40;
  char *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_62;
  v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    v23 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a1 + 104);
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[size];
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(a4, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a3)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a4;
      else
        v27 = (char *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = a4;
      else
        v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = a4;
  else
    v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = a4->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)(v43 + v42))
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = (std::string::size_type)a4;
    else
      v40 = a4->__r_.__value_.__r.__words[0];
    v41 = &v47[-v40];
    std::string::resize(a4, 2 * (_QWORD)&v47[-v40], 0);
    v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = (std::string::size_type)a4;
    else
      v43 = a4->__r_.__value_.__r.__words[0];
    v36 = &v41[v43];
    if ((v42 & 0x80u) != 0)
      v42 = a4->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::string::size_type)a4;
    else
      v45 = a4->__r_.__value_.__r.__words[0];
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a1 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1AD8ADDF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1AD8ADF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_traits<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100](std::regex_traits<wchar_t> *a1, __int32 *a2, int a3)
{
  std::regex_traits<wchar_t> *v6;
  std::basic_regex<wchar_t> *v7;

  v6 = std::regex_traits<wchar_t>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = (std::basic_regex<wchar_t> *)&a2[wcslen(a2)];
  if (std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>((uint64_t)a1, (std::basic_regex<wchar_t> *)a2, v7) != (int *)v7)std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1AD8AE018(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<wchar_t> *__cdecl std::regex_traits<wchar_t>::regex_traits(std::regex_traits<wchar_t> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1AF44CFA4]();
  this->__ct_ = (const std::ctype<wchar_t> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A98]);
  this->__col_ = (const std::collate<wchar_t> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C10]);
  return this;
}

void sub_1AD8AE07C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D400F0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<wchar_t>>::reset[abi:ne180100]<std::__empty_state<wchar_t>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>((std::basic_regex<wchar_t> *)a1, a2, a3);
      case 0x80u:
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<wchar_t const*>((std::basic_regex<wchar_t> *)a1, (__int32 *)a2, (int *)a3);
      case 0x100u:
        return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<wchar_t const*>((std::basic_regex<wchar_t> *)a1, (__int32 *)a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>((std::basic_regex<wchar_t> *)a1, a2, a3);
    }
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>(a1, (int *)a2, (int *)a3);
  }
  else
  {
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>((std::basic_regex<wchar_t> *)a1, (int *)a2, (int *)a3);
  }
}

void sub_1AD8AE1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<wchar_t>>::reset[abi:ne180100]<std::__empty_state<wchar_t>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  int *v7;
  int *v8;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *v10;
  std::__node<wchar_t> *first;
  std::__owns_one_state<wchar_t> *v12;
  int *v13;
  int *v14;
  std::__node<wchar_t> *v15;
  std::__owns_one_state<wchar_t> *v16;
  std::__node<wchar_t> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<wchar_t> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(a1, v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<wchar_t> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<wchar_t>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
      }
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v12);
      if (v8 == a3)
        return a3;
    }
    return v8;
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E5D408E0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E5D409A0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::basic_regex<wchar_t> *v3;
  std::__owns_one_state<wchar_t> *end;
  unsigned int *v7;
  unsigned int *v8;
  std::__owns_one_state<wchar_t> *v9;
  unsigned int *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned int *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned int *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<wchar_t> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>((uint64_t)a1, (std::basic_regex<wchar_t> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<wchar_t const*>(std::basic_regex<wchar_t> *a1, __int32 *__s, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  __int32 *v7;
  int *v8;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *v10;
  std::__node<wchar_t> *first;
  __int32 *i;
  __int32 *v13;
  int *v14;
  std::__owns_one_state<wchar_t> *v15;
  std::__node<wchar_t> *v16;
  std::__owns_one_state<wchar_t> *v17;
  std::__node<wchar_t> *v18;

  end = a1->__end_;
  v7 = wmemchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<wchar_t> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>((uint64_t)a1, __s, v8);
  }
  for (i = &v8[v8 != a3]; i != a3; i = &v14[v14 != a3])
  {
    v13 = wmemchr(i, 10, a3 - i);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == i)
    {
      v16 = (std::__node<wchar_t> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<wchar_t>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>((uint64_t)a1, i, v14);
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v15);
  }
  return a3;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<wchar_t const*>(std::basic_regex<wchar_t> *a1, __int32 *__s, std::basic_regex<wchar_t> *a3)
{
  std::__owns_one_state<wchar_t> *end;
  __int32 *v7;
  std::basic_regex<wchar_t> *v8;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *v10;
  std::__node<wchar_t> *first;
  __int32 *i;
  __int32 *v13;
  std::basic_regex<wchar_t> *v14;
  std::__owns_one_state<wchar_t> *v15;
  std::__node<wchar_t> *v16;
  std::__owns_one_state<wchar_t> *v17;
  std::__node<wchar_t> *v18;

  end = a1->__end_;
  v7 = wmemchr(__s, 10, ((char *)a3 - (char *)__s) >> 2);
  if (v7)
    v8 = (std::basic_regex<wchar_t> *)v7;
  else
    v8 = a3;
  if (v8 == (std::basic_regex<wchar_t> *)__s)
  {
    v9 = (std::__node<wchar_t> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)__s, v8);
  }
  for (i = (__int32 *)v8 + (v8 != a3); i != (__int32 *)a3; i = (__int32 *)v14 + (v14 != a3))
  {
    v13 = wmemchr(i, 10, ((char *)a3 - (char *)i) >> 2);
    if (v13)
      v14 = (std::basic_regex<wchar_t> *)v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == (std::basic_regex<wchar_t> *)i)
    {
      v16 = (std::__node<wchar_t> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<wchar_t>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)i, v14);
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v15);
  }
  return a3;
}

void std::__end_state<wchar_t>::~__end_state()
{
  JUMPOUT(0x1AF44D190);
}

void std::__end_state<wchar_t>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46620;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8AE8F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<wchar_t>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<wchar_t>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

void std::__empty_state<wchar_t>::__exec(const std::__empty_state<wchar_t> *this, std::__empty_state<wchar_t>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<wchar_t>::~__owns_one_state(std::__owns_one_state<wchar_t> *this)
{
  std::__node<wchar_t> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<wchar_t> *))first->~__node_0)(first);
}

{
  std::__node<wchar_t> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<wchar_t> *))first->~__node_0)(first);
  JUMPOUT(0x1AF44D190);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(std::basic_regex<wchar_t> *this, std::__owns_one_state<wchar_t> *__sa, std::__owns_one_state<wchar_t> *__sb)
{
  std::__node<wchar_t> *v6;
  std::__node<wchar_t> *first;
  std::__node<wchar_t> *v8;
  std::__node<wchar_t> *v9;
  std::__node<wchar_t> *v10;
  std::__node<wchar_t> *v11;

  v6 = (std::__node<wchar_t> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<wchar_t>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<wchar_t>_vtbl *)first;
  v6->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D40090;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<wchar_t> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<wchar_t>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<wchar_t> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D466F8;
  v10[1].__vftable = (std::__node<wchar_t>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<wchar_t> *)__sb->__first_;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *result;
  std::__owns_one_state<wchar_t> *end;
  unsigned int marked_count;
  int *v9;

  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<wchar_t const*>(a1, a2, a3);
  if (result == a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<wchar_t const*>(a1, a2, a3);
    result = a2;
    if (v9 != a2)
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  int *v3;
  int v6;
  int *v7;
  BOOL v8;
  int *v9;
  int v11;
  int *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<wchar_t> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (*a2 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<wchar_t>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<wchar_t>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<wchar_t> *)v14;
    this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1AD8AEECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  int *v3;
  int v6;
  std::__node<wchar_t> *v7;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;
  int *p_open_count;
  int *v12;
  unsigned int marked_count;
  int *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (*a2 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<wchar_t const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)this, a2, a3);
      if (v6 != 63)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<wchar_t> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D46758;
    v7[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>(uint64_t a1, int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  size_t v14;
  unsigned int *v15;
  unsigned int *v16;
  size_t v17;
  BOOL v18;
  BOOL v19;
  std::__owns_one_state<wchar_t> *v20;
  BOOL v21;
  unsigned int *v22;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  size_t __max;

  if (a2 == (int *)a3)
    return (unsigned int *)a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (*a2 > 62)
  {
    if (v12 == 63)
    {
      v13 = (unsigned int *)(a2 + 1);
      if (v11)
        v19 = 1;
      else
        v19 = v13 == a3;
      if (!v19 && *v13 == 63)
      {
        v13 = (unsigned int *)(a2 + 2);
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v17 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v17 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return (unsigned int *)a2;
    v15 = (unsigned int *)(a2 + 1);
    v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(a1, (unsigned int *)a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        if (*v16 != 44)
        {
          if (*v16 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v17 = (int)__max;
LABEL_33:
              v20 = __s;
              v21 = 0;
LABEL_46:
              std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop((std::basic_regex<wchar_t> *)a1, v14, v17, v20, a5, a6, v21);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v17 = (int)__max;
LABEL_45:
            v20 = __s;
            v21 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v22 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v22 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v17 = -1;
          goto LABEL_45;
        }
        v26 = -1;
        v24 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(v10, v22, a3, &v26);
        if (v24 != v22 && v24 != a3 && *v24 == 125)
        {
          v17 = v26;
          v14 = (int)__max;
          if (v26 >= (int)__max)
          {
            v13 = v24 + 1;
            v21 = 1;
            if (!v11 && v13 != a3)
            {
              v25 = v24[1];
              v21 = v25 != 63;
              if (v25 == 63)
                v13 = v24 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v20 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = (unsigned int *)(a2 + 1);
    if (v11)
      v18 = 1;
    else
      v18 = v13 == a3;
    if (!v18 && *v13 == 63)
    {
      v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = (unsigned int *)(a2 + 1);
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v17 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return (unsigned int *)a2;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(std::basic_regex<wchar_t> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<wchar_t> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E5D40438;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<wchar_t> *)v4;
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(std::basic_regex<wchar_t> *this, const std::basic_regex<wchar_t> *a2, BOOL a3, unsigned int a4)
{
  std::__node<wchar_t> *v8;

  v8 = (std::__node<wchar_t> *)operator new();
  std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
}

void sub_1AD8AF504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<wchar_t>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<wchar_t>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__l_anchor_multiline<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(_DWORD *)(*(_QWORD *)(a2 + 16) - 4);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<wchar_t>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<wchar_t>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__r_anchor_multiline<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  int *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(int **)(a2 + 16);
  if (v2 == *(int **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40438;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40438;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;

  v4 = *(unsigned int **)(a2 + 8);
  v5 = *(unsigned int **)(a2 + 24);
  if (v4 == v5)
  {
LABEL_13:
    result = 0;
    goto LABEL_19;
  }
  v6 = *(unsigned int **)(a2 + 16);
  if (v6 == v5)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v8 = *(v5 - 1);
LABEL_11:
      if (v8 == 95)
        result = 1;
      else
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), 1280);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (v6 == v4)
  {
    v7 = *(_DWORD *)(a2 + 88);
    if ((v7 & 0x80) == 0)
    {
      if ((v7 & 4) == 0)
      {
        v8 = *v4;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
  }
  v9 = *v6;
  if (*(v6 - 1) == 95)
    v10 = 1;
  else
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), 1280);
  if ((_DWORD)v9 == 95)
    v12 = 1;
  else
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), 1280, v9);
  result = v10 != v12;
LABEL_19:
  if (*(unsigned __int8 *)(a1 + 40) == (_DWORD)result)
  {
    v13 = 0;
    v14 = -993;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = -994;
  }
  *(_DWORD *)a2 = v14;
  *(_QWORD *)(a2 + 80) = v13;
  return result;
}

uint64_t std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E5D40150;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D40150;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D40150;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

void std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::wcsub_match>::size_type v4;
  uint64_t v5;
  const __int32 *v6;
  BOOL v7;
  char v8;
  std::sub_match<const wchar_t *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const wchar_t *> *v15;
  uint64_t v16;
  std::vector<std::wcsub_match> __p;
  std::vector<std::wcsub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::wcsub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const __int32 **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const __int32 **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const __int32 **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(a1 + 16, v6, *(const __int32 **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const wchar_t *, const wchar_t *> *)v16 = v15->std::pair<const wchar_t *, const wchar_t *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1AD8AFBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v5;
  int *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<wchar_t const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(a1, a2 + 1, a3);
    if (result == v5)
    {
      result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2 + 1, a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  std::wstring::value_type *v5;
  std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *started;
  uint64_t *v7;
  int *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list((std::basic_regex<wchar_t> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<wchar_t const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(std::basic_regex<wchar_t> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E5D46818;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<wchar_t> *)v2;
    this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
  }
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(std::basic_regex<wchar_t> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E5D467B8;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<wchar_t> *)v4;
    this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
  }
}

std::basic_regex<wchar_t>::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t>::value_type *a2, std::basic_regex<wchar_t>::value_type *a3)
{
  std::basic_regex<wchar_t>::value_type *v3;
  std::basic_regex<wchar_t>::value_type v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (v4 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<wchar_t>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<wchar_t>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int v4;
  unsigned __int32 v5;
  int *v6;
  int *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = *a2 - 48;
  if (v4 == 48)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((*v7 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(a1, v5);
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (*a2 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3, std::wstring *a4)
{
  std::wstring::value_type *v4;
  std::basic_regex<wchar_t> *v7;
  int v8;
  int v9;
  std::wstring *v10;
  std::wstring::value_type v11;
  std::wstring::value_type v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  int v20;
  int v21;
  int v22;
  std::wstring::value_type v23;

  v4 = a2;
  if (a2 == a3)
    return (unsigned int *)v4;
  v7 = this;
  v8 = *a2;
  if (*a2 > 101)
  {
    v9 = 0;
    switch(v8)
    {
      case 'n':
        if (a4)
        {
          v10 = a4;
          v11 = 10;
          goto LABEL_50;
        }
        v11 = 10;
        goto LABEL_62;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
        goto LABEL_47;
      case 'r':
        if (a4)
        {
          v10 = a4;
          v11 = 13;
          goto LABEL_50;
        }
        v11 = 13;
        goto LABEL_62;
      case 't':
        if (a4)
        {
          v10 = a4;
          v11 = 9;
          goto LABEL_50;
        }
        v11 = 9;
        goto LABEL_62;
      case 'u':
        if (a2 + 1 == a3)
          goto LABEL_65;
        v13 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, a2[1], 0);
        v14 = v13;
        v15 = -48;
        if ((v13 & 0xFFFFFFF8) == 0x30 || (v13 & 0xFFFFFFFE) == 0x38)
          goto LABEL_26;
        v14 = v13 | 0x20;
        if (((v13 | 0x20) - 97) >= 6u)
          goto LABEL_65;
        v15 = -87;
LABEL_26:
        v4 += 2;
        if (v4 == a3)
          goto LABEL_65;
        v16 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, *v4, 0);
        v17 = -48;
        if ((v16 & 0xFFFFFFF8) == 0x30 || (v16 & 0xFFFFFFFE) == 0x38)
          goto LABEL_31;
        LOBYTE(v16) = v16 | 0x20;
        if ((v16 - 97) >= 6u)
          goto LABEL_65;
        v17 = -87;
LABEL_31:
        v9 = ((v15 + v14) << 8) + 16 * (v17 + v16);
LABEL_32:
        if (v4 + 1 == a3)
          goto LABEL_65;
        v18 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[1], 0);
        v19 = v18;
        v20 = -48;
        if ((v18 & 0xFFFFFFF8) == 0x30 || (v18 & 0xFFFFFFFE) == 0x38)
          goto LABEL_37;
        v19 = v18 | 0x20;
        if (((v18 | 0x20) - 97) >= 6u)
          goto LABEL_65;
        v20 = -87;
LABEL_37:
        if (v4 + 2 == a3)
          goto LABEL_65;
        v21 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[2], 0);
        v22 = -48;
        if ((v21 & 0xFFFFFFF8) == 0x30 || (v21 & 0xFFFFFFFE) == 0x38)
          goto LABEL_42;
        LOBYTE(v21) = v21 | 0x20;
        if ((v21 - 97) >= 6u)
          goto LABEL_65;
        v22 = -87;
LABEL_42:
        v23 = v22 + v21 + 16 * (v20 + v19 + v9);
        if (a4)
          std::wstring::operator=(a4, v23);
        else
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(v7, v23);
        v4 += 3;
        return (unsigned int *)v4;
      case 'v':
        if (a4)
        {
          v10 = a4;
          v11 = 11;
          goto LABEL_50;
        }
        v11 = 11;
        goto LABEL_62;
      case 'x':
        goto LABEL_32;
      default:
        if (v8 != 102)
          goto LABEL_47;
        if (a4)
        {
          v10 = a4;
          v11 = 12;
          goto LABEL_50;
        }
        v11 = 12;
        break;
    }
    goto LABEL_62;
  }
  if (v8 == 48)
  {
    if (a4)
    {
      v10 = a4;
      v11 = 0;
LABEL_50:
      std::wstring::operator=(v10, v11);
      return (unsigned int *)++v4;
    }
    v11 = 0;
LABEL_62:
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v11);
    return (unsigned int *)++v4;
  }
  if (v8 != 99)
  {
    if (v8 == 95)
      goto LABEL_65;
LABEL_47:
    if ((((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, 1280) & 1) != 0)LABEL_65:std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v11 = *v4;
    if (a4)
    {
      v10 = a4;
      goto LABEL_50;
    }
    this = v7;
    goto LABEL_62;
  }
  if (a2 + 1 == a3 || (a2[1] & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_65;
  v12 = a2[1] & 0x1F;
  if (a4)
    std::wstring::operator=(a4, v12);
  else
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v12);
  v4 += 2;
  return (unsigned int *)v4;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *v7;
  uint64_t v8;
  std::__node<wchar_t> *first;

  v2 = *(_QWORD *)&__c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<wchar_t> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E5D40940;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_DWORD *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E5D40210;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = v2;
  end->__first_ = (std::__node<wchar_t> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
}

void sub_1AD8B0564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408ABF81D7);
  _Unwind_Resume(a1);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(std::basic_regex<wchar_t> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<wchar_t> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<wchar_t> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E5D3CE00;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<wchar_t> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E5D40720;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 72))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD8B06F0(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<wchar_t> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<wchar_t> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40720;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40720;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int **)(a2 + 16);
  if (v3 == *(unsigned int **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 72))(*(_QWORD *)(result + 24), *v3), (_DWORD)result != *(_DWORD *)(v4 + 40)))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) += 4;
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40940;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40940;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || *v2 != *(_DWORD *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<wchar_t>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<wchar_t>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || *v2 != *(_DWORD *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40518;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40518;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = v4 >> 2;
    v6 = *(_QWORD *)(a2 + 16);
    if (v4 >> 2 <= (*(_QWORD *)(a2 + 24) - v6) >> 2)
    {
      v8 = result;
      if (v4 < 1)
      {
LABEL_12:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v6 + 4 * v5;
        v7 = *(_QWORD *)(v8 + 8);
        goto LABEL_13;
      }
      v9 = 0;
      if (v5 <= 1)
        v10 = 1;
      else
        v10 = v4 >> 2;
      v11 = 4 * v10;
      while (1)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 72))(*(_QWORD *)(v8 + 24), *(unsigned int *)(*(_QWORD *)v3 + v9));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 72))(*(_QWORD *)(v8 + 24), *(unsigned int *)(*(_QWORD *)(a2 + 16) + v9));
        if (v12 != (_DWORD)result)
          break;
        v9 += 4;
        if (v11 == v9)
        {
          v6 = *(_QWORD *)(a2 + 16);
          goto LABEL_12;
        }
      }
    }
  }
  v7 = 0;
  *(_DWORD *)a2 = -993;
LABEL_13:
  *(_QWORD *)(a2 + 80) = v7;
  return result;
}

std::locale *std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D406C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D406C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int **v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (int **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = (char *)v4[1] - (char *)*v4;
    v7 = v6 >> 2;
    v8 = *(_QWORD *)(a2 + 16);
    if (v6 >> 2 <= (*(_QWORD *)(a2 + 24) - v8) >> 2)
    {
      if (v6 < 1)
      {
LABEL_11:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v8 + 4 * v7;
        v9 = *(_QWORD *)(result + 8);
        goto LABEL_12;
      }
      if (v7 <= 1)
        v10 = 1;
      else
        v10 = v6 >> 2;
      v11 = *(int **)(a2 + 16);
      while (1)
      {
        v13 = *v5++;
        v12 = v13;
        v14 = *v11++;
        if (v12 != v14)
          break;
        if (!--v10)
          goto LABEL_11;
      }
    }
  }
  v9 = 0;
  *(_DWORD *)a2 = -993;
LABEL_12:
  *(_QWORD *)(a2 + 80) = v9;
  return result;
}

void (__cdecl ***std::__back_ref<wchar_t>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<wchar_t>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

unsigned int *std::__back_ref<wchar_t>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = v8 >> 2,
        v10 = *(_QWORD *)(a2 + 16),
        v8 >> 2 <= (*(_QWORD *)(a2 + 24) - v10) >> 2)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v10 + 4 * v9;
    v11 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v11 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v11;
  return result;
}

std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *__cdecl std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(std::basic_regex<wchar_t> *this, BOOL __negate)
{
  std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *v4;

  v4 = (std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *)operator new();
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1AD8B0F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v12 = *(_QWORD *)(a1 + 56);
    v13 = (void **)(a1 + 40);
    v5 = *(char **)(a1 + 48);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = (char *)*v13;
      v14 = (v5 - (_BYTE *)*v13) >> 2;
      if (!((unint64_t)(v14 + 1) >> 62))
      {
        v15 = v12 - (_QWORD)v6;
        v16 = (uint64_t)(v12 - (_QWORD)v6) >> 1;
        if (v16 <= v14 + 1)
          v16 = v14 + 1;
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v17);
          v6 = *(char **)(a1 + 40);
          v5 = *(char **)(a1 + 48);
        }
        else
        {
          v18 = 0;
        }
        v20 = &v18[4 * v14];
        v21 = &v18[4 * v17];
        *(_DWORD *)v20 = v2;
        v19 = v20 + 4;
        while (v5 != v6)
        {
          v28 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v28;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
    else
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = (char *)*v13;
      v23 = (v5 - (_BYTE *)*v13) >> 2;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        v24 = v12 - (_QWORD)v6;
        v25 = (uint64_t)(v12 - (_QWORD)v6) >> 1;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v26);
          v6 = *(char **)(a1 + 40);
          v5 = *(char **)(a1 + 48);
        }
        else
        {
          v27 = 0;
        }
        v20 = &v27[4 * v23];
        v21 = &v27[4 * v26];
        *(_DWORD *)v20 = v2;
        v19 = v20 + 4;
        while (v5 != v6)
        {
          v29 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v29;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), a2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(char **)(a1 + 48);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *(_DWORD *)v5 = v2;
    v19 = v5 + 4;
    goto LABEL_45;
  }
  v6 = *(char **)(a1 + 40);
  v7 = (v5 - v6) >> 2;
  if ((unint64_t)(v7 + 1) >> 62)
    goto LABEL_46;
  v8 = v4 - (_QWORD)v6;
  v9 = (uint64_t)(v4 - (_QWORD)v6) >> 1;
  if (v9 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10)
  {
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v10);
    v6 = *(char **)(a1 + 40);
    v5 = *(char **)(a1 + 48);
  }
  else
  {
    v11 = 0;
  }
  v20 = &v11[4 * v7];
  v21 = &v11[4 * v10];
  *(_DWORD *)v20 = v2;
  v19 = v20 + 4;
  while (v5 != v6)
  {
    v22 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *((_DWORD *)v20 - 1) = v22;
    v20 -= 4;
  }
LABEL_43:
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v6)
    operator delete(v6);
LABEL_45:
  *(_QWORD *)(a1 + 48) = v19;
}

